// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999959901808653	WITHOUT_CLASSIFICATION	4.009819134652547E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9998416552010494	WITHOUT_CLASSIFICATION	1.583447989507235E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999558103304612	WITHOUT_CLASSIFICATION	4.418966953885898E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999558103304612	WITHOUT_CLASSIFICATION	4.418966953885898E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995651858773862	WITHOUT_CLASSIFICATION	4.3481412261384833E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999969338008339	WITHOUT_CLASSIFICATION	3.0661991660751425E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9997304527496741	WITHOUT_CLASSIFICATION	2.695472503258956E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9995993460388197	WITHOUT_CLASSIFICATION	4.006539611803073E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999766366139299	WITHOUT_CLASSIFICATION	2.3363386070067327E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999501537169462	WITHOUT_CLASSIFICATION	4.9846283053822104E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999501537169462	WITHOUT_CLASSIFICATION	4.9846283053822104E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999501537169462	WITHOUT_CLASSIFICATION	4.9846283053822104E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999501537169462	WITHOUT_CLASSIFICATION	4.9846283053822104E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9957346781386269	WITHOUT_CLASSIFICATION	0.004265321861373028	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9994135375989996	WITHOUT_CLASSIFICATION	5.864624010003428E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9997200562365013	WITHOUT_CLASSIFICATION	2.7994376349882097E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9995725735374912	WITHOUT_CLASSIFICATION	4.2742646250892977E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.999864183071546	WITHOUT_CLASSIFICATION	1.3581692845386178E-4	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999817354751155	WITHOUT_CLASSIFICATION	1.826452488444827E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999679639111771	WITHOUT_CLASSIFICATION	3.203608882283407E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999807092477242	WITHOUT_CLASSIFICATION	1.9290752275843124E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9800386109232716	WITHOUT_CLASSIFICATION	0.01996138907672835	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996825315365059	WITHOUT_CLASSIFICATION	3.174684634941821E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999835625984597	WITHOUT_CLASSIFICATION	1.643740154028346E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9995712848366922	WITHOUT_CLASSIFICATION	4.2871516330778806E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9998719658239129	WITHOUT_CLASSIFICATION	1.2803417608698065E-4	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997842454634842	WITHOUT_CLASSIFICATION	2.1575453651566097E-4	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9977326868490819	WITHOUT_CLASSIFICATION	0.002267313150918015	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999821635239843	WITHOUT_CLASSIFICATION	1.7836476015705924E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999501537169462	WITHOUT_CLASSIFICATION	4.9846283053822104E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998387576209206	WITHOUT_CLASSIFICATION	1.6124237907948327E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.999950017939737	WITHOUT_CLASSIFICATION	4.998206026286962E-5	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998236996320436	WITHOUT_CLASSIFICATION	1.7630036795644705E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9984717772162361	WITHOUT_CLASSIFICATION	0.0015282227837637983	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999236449881621	WITHOUT_CLASSIFICATION	7.63550118379757E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999909944211929	WITHOUT_CLASSIFICATION	9.0055788070481E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9995051353165474	WITHOUT_CLASSIFICATION	4.94864683452556E-4	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999905180652869	WITHOUT_CLASSIFICATION	9.481934713151168E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9997951154108972	WITHOUT_CLASSIFICATION	2.0488458910271928E-4	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.999865420681087	WITHOUT_CLASSIFICATION	1.3457931891306643E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9996855379147208	WITHOUT_CLASSIFICATION	3.144620852791571E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999302222645864	WITHOUT_CLASSIFICATION	6.977773541364649E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999694371524416	WITHOUT_CLASSIFICATION	3.0562847558369194E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999655228981852	WITHOUT_CLASSIFICATION	3.4477101814783325E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9997643005456295	WITHOUT_CLASSIFICATION	2.356994543705716E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9995173766862258	WITHOUT_CLASSIFICATION	4.8262331377429035E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999132923800569	WITHOUT_CLASSIFICATION	8.670761994305962E-5	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9972438946411673	WITHOUT_CLASSIFICATION	0.0027561053588327834	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999439734154534	WITHOUT_CLASSIFICATION	5.6026584546608304E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9993312288552213	WITHOUT_CLASSIFICATION	6.687711447786668E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999112865528343	WITHOUT_CLASSIFICATION	8.871344716563533E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999044453541461	WITHOUT_CLASSIFICATION	9.555464585382173E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9996184843148979	WITHOUT_CLASSIFICATION	3.815156851021566E-4	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9998796031361934	WITHOUT_CLASSIFICATION	1.2039686380665415E-4	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9983513434463792	WITHOUT_CLASSIFICATION	0.0016486565536207429	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9995896487092053	WITHOUT_CLASSIFICATION	4.1035129079469425E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999800235023699	WITHOUT_CLASSIFICATION	1.9976497630134277E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9986737908967389	WITHOUT_CLASSIFICATION	0.0013262091032611248	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9996551544630338	WITHOUT_CLASSIFICATION	3.4484553696622673E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999859721888336	WITHOUT_CLASSIFICATION	1.4027811166403815E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9994669591162388	WITHOUT_CLASSIFICATION	5.330408837612528E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9998638260755548	WITHOUT_CLASSIFICATION	1.3617392444526015E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9996579030238443	WITHOUT_CLASSIFICATION	3.4209697615564445E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999852484023962	WITHOUT_CLASSIFICATION	1.47515976038081E-4	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999221063536351	WITHOUT_CLASSIFICATION	7.789364636482777E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999778636043002	WITHOUT_CLASSIFICATION	2.2136395699743764E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997526791518943	WITHOUT_CLASSIFICATION	2.473208481056998E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997526791518943	WITHOUT_CLASSIFICATION	2.473208481056998E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999925357763709	WITHOUT_CLASSIFICATION	7.464223629086242E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9996157103644034	WITHOUT_CLASSIFICATION	3.8428963559659413E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999727950808777	WITHOUT_CLASSIFICATION	2.720491912228998E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9992255998407886	WITHOUT_CLASSIFICATION	7.744001592114041E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9900675777779991	WITHOUT_CLASSIFICATION	0.009932422222000898	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9989771063179221	WITHOUT_CLASSIFICATION	0.0010228936820778827	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9996871376731943	WITHOUT_CLASSIFICATION	3.128623268056565E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999661939528486	WITHOUT_CLASSIFICATION	3.380604715144799E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9997521998009476	WITHOUT_CLASSIFICATION	2.478001990522936E-4	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999953921249608	WITHOUT_CLASSIFICATION	4.607875039206599E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999667298538055	WITHOUT_CLASSIFICATION	3.3270146194562544E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997630358770105	WITHOUT_CLASSIFICATION	2.369641229894849E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997630358770105	WITHOUT_CLASSIFICATION	2.369641229894849E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997630358770105	WITHOUT_CLASSIFICATION	2.369641229894849E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.999895038697456	WITHOUT_CLASSIFICATION	1.0496130254396438E-4	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9998741799515697	WITHOUT_CLASSIFICATION	1.2582004843029028E-4	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999558233641173	WITHOUT_CLASSIFICATION	4.417663588275661E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9680807894347904	WITHOUT_CLASSIFICATION	0.031919210565209556	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999243496308532	WITHOUT_CLASSIFICATION	7.565036914686766E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999829570828002	WITHOUT_CLASSIFICATION	1.704291719989549E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9930913339137747	WITHOUT_CLASSIFICATION	0.006908666086225292	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.99984050794044	WITHOUT_CLASSIFICATION	1.5949205956001207E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999658792073142	WITHOUT_CLASSIFICATION	3.412079268585798E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999170202437319	WITHOUT_CLASSIFICATION	8.297975626814244E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999502648220339	WITHOUT_CLASSIFICATION	4.9735177966094705E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999502648220339	WITHOUT_CLASSIFICATION	4.9735177966094705E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999388317090488	WITHOUT_CLASSIFICATION	6.116829095114779E-5	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9997362604182441	WITHOUT_CLASSIFICATION	2.6373958175582686E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999589205852355	WITHOUT_CLASSIFICATION	4.1079414764480374E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998431910744053	WITHOUT_CLASSIFICATION	1.5680892559470096E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9997016980587566	WITHOUT_CLASSIFICATION	2.9830194124329696E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999803170490048	WITHOUT_CLASSIFICATION	1.968295099511264E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999907113150893	WITHOUT_CLASSIFICATION	9.288684910638805E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9998722122906449	WITHOUT_CLASSIFICATION	1.2778770935508693E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999209207534717	WITHOUT_CLASSIFICATION	7.907924652830162E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998269422813924	WITHOUT_CLASSIFICATION	1.7305771860767164E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.986787718924764	WITHOUT_CLASSIFICATION	0.013212281075235964	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999874627086779	WITHOUT_CLASSIFICATION	1.2537291322136579E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999231348986579	WITHOUT_CLASSIFICATION	7.686510134205738E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999328982210967	WITHOUT_CLASSIFICATION	6.710177890332544E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999449613739452	WITHOUT_CLASSIFICATION	5.503862605484112E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9915653073207944	WITHOUT_CLASSIFICATION	0.008434692679205642	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9998760780220015	WITHOUT_CLASSIFICATION	1.2392197799844512E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9998490271533651	WITHOUT_CLASSIFICATION	1.509728466347892E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9997219399093715	WITHOUT_CLASSIFICATION	2.780600906285564E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999421832021599	WITHOUT_CLASSIFICATION	5.781679784015566E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9998050946828884	WITHOUT_CLASSIFICATION	1.9490531711155055E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999520336646865	WITHOUT_CLASSIFICATION	4.7966335313503154E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999515263100643	WITHOUT_CLASSIFICATION	4.847368993562857E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999378277137605	WITHOUT_CLASSIFICATION	6.217228623948687E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9998093320355733	WITHOUT_CLASSIFICATION	1.9066796442665038E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999601559708717	WITHOUT_CLASSIFICATION	3.984402912825368E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999489579284065	WITHOUT_CLASSIFICATION	5.104207159342634E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999956237398705	WITHOUT_CLASSIFICATION	4.376260129552945E-6	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9997825842574327	WITHOUT_CLASSIFICATION	2.174157425673355E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9994948086247942	WITHOUT_CLASSIFICATION	5.051913752058022E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999115612699481	WITHOUT_CLASSIFICATION	8.843873005182102E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9994272020147877	WITHOUT_CLASSIFICATION	5.727979852122252E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9998068120976972	WITHOUT_CLASSIFICATION	1.9318790230288426E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998429682490346	WITHOUT_CLASSIFICATION	1.5703175096537273E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9960267002268788	WITHOUT_CLASSIFICATION	0.003973299773121232	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.999935742074605	WITHOUT_CLASSIFICATION	6.42579253950425E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999353027408541	WITHOUT_CLASSIFICATION	6.469725914596198E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999983992625506	WITHOUT_CLASSIFICATION	1.6007374494105703E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9992963559165666	WITHOUT_CLASSIFICATION	7.03644083433255E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999119980733422	WITHOUT_CLASSIFICATION	8.80019266579118E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9958147384056392	WITHOUT_CLASSIFICATION	0.004185261594360904	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9987925503563106	WITHOUT_CLASSIFICATION	0.0012074496436893008	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999758916764279	WITHOUT_CLASSIFICATION	2.4108323572129662E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9445527737502991	WITHOUT_CLASSIFICATION	0.05544722624970084	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.999801292543381	WITHOUT_CLASSIFICATION	1.9870745661905459E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998700293146471	WITHOUT_CLASSIFICATION	1.2997068535285482E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999600447651746	WITHOUT_CLASSIFICATION	3.995523482545692E-5	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999631222930638	WITHOUT_CLASSIFICATION	3.687770693609106E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9996518704770686	WITHOUT_CLASSIFICATION	3.481295229313861E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999337264295741	WITHOUT_CLASSIFICATION	6.627357042582967E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.999962563412795	WITHOUT_CLASSIFICATION	3.743658720492833E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999765388373391	WITHOUT_CLASSIFICATION	2.346116266094214E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9991580407038299	WITHOUT_CLASSIFICATION	8.419592961700933E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9969057747816177	WITHOUT_CLASSIFICATION	0.0030942252183822436	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9998500704970356	WITHOUT_CLASSIFICATION	1.4992950296445378E-4	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9998211759441129	WITHOUT_CLASSIFICATION	1.7882405588709888E-4	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9962203890673131	WITHOUT_CLASSIFICATION	0.0037796109326867816	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9998892244328967	WITHOUT_CLASSIFICATION	1.1077556710329715E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9997492293249935	WITHOUT_CLASSIFICATION	2.5077067500648244E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9942433393280151	WITHOUT_CLASSIFICATION	0.005756660671984819	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9985252602130245	WITHOUT_CLASSIFICATION	0.0014747397869754844	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9989234664829043	WITHOUT_CLASSIFICATION	0.001076533517095637	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9995537975541572	WITHOUT_CLASSIFICATION	4.462024458428398E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999954207130441	WITHOUT_CLASSIFICATION	4.579286955830523E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.999990548519825	WITHOUT_CLASSIFICATION	9.45148017482709E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999765474970841	WITHOUT_CLASSIFICATION	2.3452502915870334E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998721504586969	WITHOUT_CLASSIFICATION	1.278495413030683E-4	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.999801933855869	WITHOUT_CLASSIFICATION	1.9806614413105355E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9998620193999715	WITHOUT_CLASSIFICATION	1.3798060002851668E-4	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9996196078094144	WITHOUT_CLASSIFICATION	3.803921905856535E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998849274695562	WITHOUT_CLASSIFICATION	1.1507253044373813E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999670831903785	WITHOUT_CLASSIFICATION	3.2916809621374094E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999611614068469	WITHOUT_CLASSIFICATION	3.88385931530167E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999899345950143	WITHOUT_CLASSIFICATION	1.0065404985645669E-5	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9996006110260577	WITHOUT_CLASSIFICATION	3.9938897394225847E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9967829627939647	WITHOUT_CLASSIFICATION	0.003217037206035183	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9778441836853218	WITHOUT_CLASSIFICATION	0.022155816314678216	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9996832471696382	WITHOUT_CLASSIFICATION	3.167528303618298E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999473612282843	WITHOUT_CLASSIFICATION	5.263877171571588E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999304683502197	WITHOUT_CLASSIFICATION	6.95316497802968E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9996764111144302	WITHOUT_CLASSIFICATION	3.235888855699099E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999105157152413	WITHOUT_CLASSIFICATION	8.94842847587924E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999007442350677	WITHOUT_CLASSIFICATION	9.925576493230037E-5	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999230193129734	WITHOUT_CLASSIFICATION	7.698068702659363E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999944059557082	WITHOUT_CLASSIFICATION	5.594044291730057E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999944059557082	WITHOUT_CLASSIFICATION	5.594044291730057E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999295788175259	WITHOUT_CLASSIFICATION	7.0421182474113E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999927909928228	WITHOUT_CLASSIFICATION	7.209007177312978E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999842053072774	WITHOUT_CLASSIFICATION	1.5794692722664453E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9838243392413584	WITHOUT_CLASSIFICATION	0.016175660758641623	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9981295214035667	WITHOUT_CLASSIFICATION	0.0018704785964332824	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9997999098735646	WITHOUT_CLASSIFICATION	2.000901264353571E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9997999098735646	WITHOUT_CLASSIFICATION	2.000901264353571E-4	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9661044036845113	WITHOUT_CLASSIFICATION	0.03389559631548862	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999977530815757	WITHOUT_CLASSIFICATION	2.2469184243037525E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999977530815757	WITHOUT_CLASSIFICATION	2.2469184243037525E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9952585980387308	WITHOUT_CLASSIFICATION	0.004741401961269091	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996531158641971	WITHOUT_CLASSIFICATION	3.4688413580293557E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996531158641971	WITHOUT_CLASSIFICATION	3.4688413580293557E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999816628139413	WITHOUT_CLASSIFICATION	1.833718605872348E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999816628139413	WITHOUT_CLASSIFICATION	1.833718605872348E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999002363327604	WITHOUT_CLASSIFICATION	9.976366723957345E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.999984501424994	WITHOUT_CLASSIFICATION	1.5498575006030793E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999860434734417	WITHOUT_CLASSIFICATION	1.3956526558432583E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9995793343708287	WITHOUT_CLASSIFICATION	4.206656291713268E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.999735438370814	WITHOUT_CLASSIFICATION	2.6456162918598545E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999348669732069	WITHOUT_CLASSIFICATION	6.513302679312692E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9996764138994924	WITHOUT_CLASSIFICATION	3.2358610050766507E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999348669732069	WITHOUT_CLASSIFICATION	6.513302679312692E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9991199985162094	WITHOUT_CLASSIFICATION	8.800014837906383E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9997947419806977	WITHOUT_CLASSIFICATION	2.0525801930230915E-4	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9998423995699763	WITHOUT_CLASSIFICATION	1.5760043002364325E-4	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9989236596218626	WITHOUT_CLASSIFICATION	0.0010763403781374945	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999768412407908	WITHOUT_CLASSIFICATION	2.3158759209229254E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9963518708160313	WITHOUT_CLASSIFICATION	0.0036481291839688076	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9998523601926151	WITHOUT_CLASSIFICATION	1.476398073848754E-4	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9995980279741511	WITHOUT_CLASSIFICATION	4.0197202584889774E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9990634145623595	WITHOUT_CLASSIFICATION	9.365854376406003E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9998304212312246	WITHOUT_CLASSIFICATION	1.695787687753551E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9998848537042307	WITHOUT_CLASSIFICATION	1.151462957692639E-4	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999829511712767	WITHOUT_CLASSIFICATION	1.7048828723329086E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.999396686052954	WITHOUT_CLASSIFICATION	6.033139470460154E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999349853102191	WITHOUT_CLASSIFICATION	6.50146897809552E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9990574167465524	WITHOUT_CLASSIFICATION	9.425832534477064E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9992936262109352	WITHOUT_CLASSIFICATION	7.063737890647611E-4	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9980801525986542	WITHOUT_CLASSIFICATION	0.0019198474013457866	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9975150544739553	WITHOUT_CLASSIFICATION	0.002484945526044855	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9775395342339592	WITHOUT_CLASSIFICATION	0.02246046576604084	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9993002346461555	WITHOUT_CLASSIFICATION	6.997653538445298E-4	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9998447355841552	WITHOUT_CLASSIFICATION	1.5526441584470636E-4	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999782434079135	WITHOUT_CLASSIFICATION	2.175659208649618E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9997764884305905	WITHOUT_CLASSIFICATION	2.2351156940944786E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999026970646325	WITHOUT_CLASSIFICATION	9.730293536745993E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9998319672039628	WITHOUT_CLASSIFICATION	1.6803279603706884E-4	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999028551399053	WITHOUT_CLASSIFICATION	9.714486009473074E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999221201153555	WITHOUT_CLASSIFICATION	7.78798846444995E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999376691810518	WITHOUT_CLASSIFICATION	6.233081894834525E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9998325031147526	WITHOUT_CLASSIFICATION	1.674968852473732E-4	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999547282445852	WITHOUT_CLASSIFICATION	4.5271755414810004E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999874375701464	WITHOUT_CLASSIFICATION	1.2562429853608431E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9994612829116833	WITHOUT_CLASSIFICATION	5.387170883166839E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999260311175227	WITHOUT_CLASSIFICATION	7.396888247732325E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999364009683083	WITHOUT_CLASSIFICATION	6.359903169176558E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9998217891691118	WITHOUT_CLASSIFICATION	1.782108308882861E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9998617698519894	WITHOUT_CLASSIFICATION	1.3823014801053063E-4	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999646793717758	WITHOUT_CLASSIFICATION	3.532062822422039E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9998217891691118	WITHOUT_CLASSIFICATION	1.782108308882861E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999802565048163	WITHOUT_CLASSIFICATION	1.9743495183843024E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999201698997386	WITHOUT_CLASSIFICATION	7.983010026133755E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999313613903766	WITHOUT_CLASSIFICATION	6.863860962336785E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9998917519581533	WITHOUT_CLASSIFICATION	1.0824804184678604E-4	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.999983080012652	WITHOUT_CLASSIFICATION	1.6919987348015428E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.999781463539633	WITHOUT_CLASSIFICATION	2.1853646036697072E-4	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9998543013204396	WITHOUT_CLASSIFICATION	1.4569867956037747E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999723530788385	WITHOUT_CLASSIFICATION	2.7646921161547674E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998164812586854	WITHOUT_CLASSIFICATION	1.8351874131469187E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.999830897403692	WITHOUT_CLASSIFICATION	1.6910259630788962E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999107636957316	WITHOUT_CLASSIFICATION	8.923630426833062E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.999987507958169	WITHOUT_CLASSIFICATION	1.2492041831006805E-5	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9995364339688444	WITHOUT_CLASSIFICATION	4.635660311556499E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999434207545299	WITHOUT_CLASSIFICATION	5.6579245470019624E-5	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999975973076511	WITHOUT_CLASSIFICATION	2.4026923488131267E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999975973076511	WITHOUT_CLASSIFICATION	2.4026923488131267E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.999873749637987	WITHOUT_CLASSIFICATION	1.2625036201289935E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999138868701414	WITHOUT_CLASSIFICATION	8.6113129858624E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9848740249836467	WITHOUT_CLASSIFICATION	0.01512597501635335	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999179918624035	WITHOUT_CLASSIFICATION	8.200813759655776E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9966099858101269	WITHOUT_CLASSIFICATION	0.0033900141898731105	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.999982000601465	WITHOUT_CLASSIFICATION	1.7999398535020098E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9868581761166483	WITHOUT_CLASSIFICATION	0.013141823883351802	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999616616568598	WITHOUT_CLASSIFICATION	3.833834314016083E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9996750908330818	WITHOUT_CLASSIFICATION	3.2490916691817515E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999886609588364	WITHOUT_CLASSIFICATION	1.1339041163622323E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999872661127323	WITHOUT_CLASSIFICATION	1.2733887267732203E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999872661127323	WITHOUT_CLASSIFICATION	1.2733887267732203E-5	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999480500752406	WITHOUT_CLASSIFICATION	5.194992475949847E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9965509841397115	WITHOUT_CLASSIFICATION	0.003449015860288436	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997002669034084	WITHOUT_CLASSIFICATION	2.9973309659164484E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999852453494137	WITHOUT_CLASSIFICATION	1.4754650586278013E-5	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999334610408142	WITHOUT_CLASSIFICATION	6.653895918591076E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999913233011016	WITHOUT_CLASSIFICATION	8.676698898476669E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999682849792966	WITHOUT_CLASSIFICATION	3.171502070353711E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9988604025234405	WITHOUT_CLASSIFICATION	0.0011395974765594427	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999810073185159	WITHOUT_CLASSIFICATION	1.8992681484098266E-5	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9996157672892073	WITHOUT_CLASSIFICATION	3.842327107927307E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9996572335746029	WITHOUT_CLASSIFICATION	3.427664253971068E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9998179088308384	WITHOUT_CLASSIFICATION	1.8209116916148858E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999865535882732	WITHOUT_CLASSIFICATION	1.344641172697068E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999865535882732	WITHOUT_CLASSIFICATION	1.344641172697068E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9976090110975011	WITHOUT_CLASSIFICATION	0.0023909889024989047	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999971301553723	WITHOUT_CLASSIFICATION	2.8698446276019772E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999803125784433	WITHOUT_CLASSIFICATION	1.9687421556683014E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9997352735447317	WITHOUT_CLASSIFICATION	2.6472645526830327E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9997900992387421	WITHOUT_CLASSIFICATION	2.0990076125799572E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999017413331743	WITHOUT_CLASSIFICATION	9.825866682561443E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9986539983441312	WITHOUT_CLASSIFICATION	0.0013460016558687685	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999461037666892	WITHOUT_CLASSIFICATION	5.3896233310695064E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9916675928114658	WITHOUT_CLASSIFICATION	0.008332407188534185	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999538376589263	WITHOUT_CLASSIFICATION	4.616234107372263E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997002669034084	WITHOUT_CLASSIFICATION	2.9973309659164484E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9977054836406087	WITHOUT_CLASSIFICATION	0.0022945163593912766	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9882217588661087	WITHOUT_CLASSIFICATION	0.011778241133891133	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9998126028598672	WITHOUT_CLASSIFICATION	1.8739714013281064E-4	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9998851885247242	WITHOUT_CLASSIFICATION	1.1481147527576408E-4	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999526397183923	WITHOUT_CLASSIFICATION	4.73602816075658E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9997243410256875	WITHOUT_CLASSIFICATION	2.7565897431244574E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999607874599516	WITHOUT_CLASSIFICATION	3.921254004833597E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9995261791039124	WITHOUT_CLASSIFICATION	4.738208960876465E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9996041738422735	WITHOUT_CLASSIFICATION	3.9582615772642746E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.999602575542131	WITHOUT_CLASSIFICATION	3.9742445786892323E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998770663822486	WITHOUT_CLASSIFICATION	1.229336177513317E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999518675241821	WITHOUT_CLASSIFICATION	4.813247581797535E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999821780137302	WITHOUT_CLASSIFICATION	1.7821986269773443E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999619629643389	WITHOUT_CLASSIFICATION	3.8037035661102976E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9992509685548593	WITHOUT_CLASSIFICATION	7.49031445140831E-4	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9997864244426466	WITHOUT_CLASSIFICATION	2.1357555735331105E-4	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9995955124187214	WITHOUT_CLASSIFICATION	4.0448758127858996E-4	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999575283292613	WITHOUT_CLASSIFICATION	4.247167073857136E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9998268783252642	WITHOUT_CLASSIFICATION	1.7312167473583997E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9994880772795975	WITHOUT_CLASSIFICATION	5.119227204024525E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999912266400931	WITHOUT_CLASSIFICATION	8.77335990695121E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999464638184432	WITHOUT_CLASSIFICATION	5.3536181556795155E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9956300375588695	WITHOUT_CLASSIFICATION	0.004369962441130484	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9998808946570031	WITHOUT_CLASSIFICATION	1.1910534299686982E-4	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9995597128821846	WITHOUT_CLASSIFICATION	4.4028711781547627E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9995510813497843	WITHOUT_CLASSIFICATION	4.4891865021570195E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999717631638749	WITHOUT_CLASSIFICATION	2.8236836125018992E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9923665627237293	WITHOUT_CLASSIFICATION	0.007633437276270765	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.999907178057948	WITHOUT_CLASSIFICATION	9.282194205188692E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998769389071411	WITHOUT_CLASSIFICATION	1.230610928588399E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9997988928852021	WITHOUT_CLASSIFICATION	2.0110711479794582E-4	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.999937672697573	WITHOUT_CLASSIFICATION	6.232730242689322E-5	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999053299758253	WITHOUT_CLASSIFICATION	9.467002417472276E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9998677190443573	WITHOUT_CLASSIFICATION	1.3228095564263474E-4	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999744476455756	WITHOUT_CLASSIFICATION	2.555235442440652E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9978748591814802	WITHOUT_CLASSIFICATION	0.0021251408185198675	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998614408988552	WITHOUT_CLASSIFICATION	1.3855910114478895E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999388317090488	WITHOUT_CLASSIFICATION	6.116829095114779E-5	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999899743908418	WITHOUT_CLASSIFICATION	1.0025609158205487E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9970504376929559	WITHOUT_CLASSIFICATION	0.002949562307044027	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998700293146471	WITHOUT_CLASSIFICATION	1.2997068535285482E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999145032435788	WITHOUT_CLASSIFICATION	8.549675642131893E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9997324411871809	WITHOUT_CLASSIFICATION	2.675588128191544E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9998024570372336	WITHOUT_CLASSIFICATION	1.9754296276636076E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999977639474839	WITHOUT_CLASSIFICATION	2.2360525161693848E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9998648379464287	WITHOUT_CLASSIFICATION	1.3516205357128066E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.997477744874706	WITHOUT_CLASSIFICATION	0.002522255125294093	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9997987012407176	WITHOUT_CLASSIFICATION	2.0129875928244728E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9956283802651285	WITHOUT_CLASSIFICATION	0.004371619734871536	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999051164009217	WITHOUT_CLASSIFICATION	9.48835990783214E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.998889372576515	WITHOUT_CLASSIFICATION	0.0011106274234849588	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9998640681608172	WITHOUT_CLASSIFICATION	1.3593183918277904E-4	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999228786247001	WITHOUT_CLASSIFICATION	7.712137529987741E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999961309278343	WITHOUT_CLASSIFICATION	3.869072165586453E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999746087010893	WITHOUT_CLASSIFICATION	2.5391298910630668E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9997274129676488	WITHOUT_CLASSIFICATION	2.725870323512321E-4	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9977996829972384	WITHOUT_CLASSIFICATION	0.002200317002761631	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999910656642106	WITHOUT_CLASSIFICATION	8.934335789364336E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999239245942471	WITHOUT_CLASSIFICATION	7.607540575292021E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999672588536616	WITHOUT_CLASSIFICATION	3.274114633835473E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9995753592566758	WITHOUT_CLASSIFICATION	4.2464074332418725E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999910446715885	WITHOUT_CLASSIFICATION	8.955328411502811E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.999825961154278	WITHOUT_CLASSIFICATION	1.7403884572192872E-4	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999973472317993	WITHOUT_CLASSIFICATION	2.6527682006076293E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9998951841467733	WITHOUT_CLASSIFICATION	1.0481585322675632E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9998239486531149	WITHOUT_CLASSIFICATION	1.7605134688516373E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999683536021156	WITHOUT_CLASSIFICATION	3.1646397884541214E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.7968900831860737	WITHOUT_CLASSIFICATION	0.20310991681392632	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9986650125652794	WITHOUT_CLASSIFICATION	0.0013349874347205674	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9950215504601647	WITHOUT_CLASSIFICATION	0.004978449539835203	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999401372964319	WITHOUT_CLASSIFICATION	5.986270356804326E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999329152409158	WITHOUT_CLASSIFICATION	6.708475908418933E-5	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9987078358946825	WITHOUT_CLASSIFICATION	0.0012921641053175801	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9990463012039669	WITHOUT_CLASSIFICATION	9.53698796033056E-4	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9982055769643109	WITHOUT_CLASSIFICATION	0.0017944230356890293	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999922198908436	WITHOUT_CLASSIFICATION	7.780109156426069E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999099226958386	WITHOUT_CLASSIFICATION	9.007730416144158E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9998944365844181	WITHOUT_CLASSIFICATION	1.0556341558185161E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9942678256245518	WITHOUT_CLASSIFICATION	0.0057321743754481244	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9987446762895379	WITHOUT_CLASSIFICATION	0.0012553237104621152	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999654651263484	WITHOUT_CLASSIFICATION	3.453487365164336E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9997238579244914	WITHOUT_CLASSIFICATION	2.761420755086604E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.999858227404933	WITHOUT_CLASSIFICATION	1.41772595066929E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9995623231450856	WITHOUT_CLASSIFICATION	4.37676854914277E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9991996540622101	WITHOUT_CLASSIFICATION	8.003459377899805E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9991780321083822	WITHOUT_CLASSIFICATION	8.219678916179012E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999196897506724	WITHOUT_CLASSIFICATION	8.031024932761816E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999196897506724	WITHOUT_CLASSIFICATION	8.031024932761816E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9979805697461673	WITHOUT_CLASSIFICATION	0.002019430253832679	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.8735863124782898	WITHOUT_CLASSIFICATION	0.12641368752171028	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9998290097657236	WITHOUT_CLASSIFICATION	1.7099023427633733E-4	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9761926698805482	WITHOUT_CLASSIFICATION	0.023807330119451815	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999656306794538	WITHOUT_CLASSIFICATION	3.4369320546222014E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999536906147336	WITHOUT_CLASSIFICATION	4.630938526641412E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9997466497736012	WITHOUT_CLASSIFICATION	2.533502263987461E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9998048156872323	WITHOUT_CLASSIFICATION	1.951843127676972E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999912813313473	WITHOUT_CLASSIFICATION	8.71866865271756E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9992050906480229	WITHOUT_CLASSIFICATION	7.949093519770598E-4	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999086688663538	WITHOUT_CLASSIFICATION	9.133113364622866E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999847990714129	WITHOUT_CLASSIFICATION	1.5200928587081697E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9961116864783557	WITHOUT_CLASSIFICATION	0.0038883135216442443	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.999977080116613	WITHOUT_CLASSIFICATION	2.291988338703601E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999424002678353	WITHOUT_CLASSIFICATION	5.759973216466846E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9834847587124386	WITHOUT_CLASSIFICATION	0.01651524128756147	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9949589244376861	WITHOUT_CLASSIFICATION	0.005041075562313957	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999190302907778	WITHOUT_CLASSIFICATION	8.096970922225406E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.999975905331726	WITHOUT_CLASSIFICATION	2.4094668273934857E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.8885088967319598	WITHOUT_CLASSIFICATION	0.1114911032680402	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999363215031488	WITHOUT_CLASSIFICATION	6.367849685123344E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9997990476432985	WITHOUT_CLASSIFICATION	2.0095235670140822E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999487062332332	WITHOUT_CLASSIFICATION	5.1293766766792365E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9992873428628122	WITHOUT_CLASSIFICATION	7.126571371878677E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996825315365059	WITHOUT_CLASSIFICATION	3.174684634941821E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9993676867691427	WITHOUT_CLASSIFICATION	6.323132308572451E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9998486304423851	WITHOUT_CLASSIFICATION	1.5136955761477363E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999877340330708	WITHOUT_CLASSIFICATION	1.2265966929142098E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9987322644892409	WITHOUT_CLASSIFICATION	0.0012677355107591096	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999880245423914	WITHOUT_CLASSIFICATION	1.1975457608578747E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.999964496274034	WITHOUT_CLASSIFICATION	3.550372596594472E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999270344151595	WITHOUT_CLASSIFICATION	7.296558484054191E-5	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.99999190612745	WITHOUT_CLASSIFICATION	8.093872549976332E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9996441014114247	WITHOUT_CLASSIFICATION	3.5589858857532926E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998381005806475	WITHOUT_CLASSIFICATION	1.6189941935242913E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9998195231283944	WITHOUT_CLASSIFICATION	1.804768716055647E-4	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999652237137949	WITHOUT_CLASSIFICATION	3.477628620507086E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999652237137949	WITHOUT_CLASSIFICATION	3.477628620507086E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9998413337373998	WITHOUT_CLASSIFICATION	1.5866626260019703E-4	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999179729954437	WITHOUT_CLASSIFICATION	8.202700455627633E-5	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9579279966097212	WITHOUT_CLASSIFICATION	0.042072003390278806	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999873013971563	WITHOUT_CLASSIFICATION	1.2698602843639233E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999939313507655	WITHOUT_CLASSIFICATION	6.068649234490283E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999773206681015	WITHOUT_CLASSIFICATION	2.267933189848261E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9988820995368377	WITHOUT_CLASSIFICATION	0.0011179004631622757	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999396933680494	WITHOUT_CLASSIFICATION	6.0306631950616214E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999301166697757	WITHOUT_CLASSIFICATION	6.988333022432978E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999846695986372	WITHOUT_CLASSIFICATION	1.533040136281082E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9998256879082821	WITHOUT_CLASSIFICATION	1.743120917180191E-4	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999600701823641	WITHOUT_CLASSIFICATION	3.992981763593917E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999430594585983	WITHOUT_CLASSIFICATION	5.6940541401618836E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9998495970205097	WITHOUT_CLASSIFICATION	1.5040297949039765E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999530879680177	WITHOUT_CLASSIFICATION	4.691203198212347E-5	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.999899529032495	WITHOUT_CLASSIFICATION	1.0047096750495317E-4	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999477712720791	WITHOUT_CLASSIFICATION	5.222872792094702E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999621749918638	WITHOUT_CLASSIFICATION	3.7825008136255116E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.998393202633185	WITHOUT_CLASSIFICATION	0.0016067973668150257	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999076325845677	WITHOUT_CLASSIFICATION	9.236741543221675E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9998176914447299	WITHOUT_CLASSIFICATION	1.82308555270059E-4	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9999515266811315	WITHOUT_CLASSIFICATION	4.847331886856321E-5	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999653235813525	WITHOUT_CLASSIFICATION	3.4676418647397915E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9997908281112813	WITHOUT_CLASSIFICATION	2.091718887188491E-4	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9991930925229145	WITHOUT_CLASSIFICATION	8.069074770853701E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.999995814489404	WITHOUT_CLASSIFICATION	4.185510595965226E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999784266326627	WITHOUT_CLASSIFICATION	2.1573367337304896E-4	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9989498127542069	WITHOUT_CLASSIFICATION	0.0010501872457931464	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9998640254388864	WITHOUT_CLASSIFICATION	1.3597456111354581E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999799694531465	WITHOUT_CLASSIFICATION	2.0030546853471306E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999908619552347	WITHOUT_CLASSIFICATION	9.138044765442483E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.996195502814155	WITHOUT_CLASSIFICATION	0.003804497185845026	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999896720671518	WITHOUT_CLASSIFICATION	1.0327932848247012E-5	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9997037945091252	WITHOUT_CLASSIFICATION	2.962054908747796E-4	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999723169402402	WITHOUT_CLASSIFICATION	2.768305975968571E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999985405201437	WITHOUT_CLASSIFICATION	1.4594798563073121E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998308666661432	WITHOUT_CLASSIFICATION	1.6913333385679773E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998297601608526	WITHOUT_CLASSIFICATION	1.702398391473391E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9996477476690847	WITHOUT_CLASSIFICATION	3.5225233091525646E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998568162915387	WITHOUT_CLASSIFICATION	1.431837084612558E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999653523066848	WITHOUT_CLASSIFICATION	3.4647693315190126E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9975383839414755	WITHOUT_CLASSIFICATION	0.002461616058524479	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.966498747670047	WITHOUT_CLASSIFICATION	0.033501252329952935	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999852535381052	WITHOUT_CLASSIFICATION	1.4746461894972363E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9994033014114942	WITHOUT_CLASSIFICATION	5.966985885058082E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9992149687964013	WITHOUT_CLASSIFICATION	7.850312035986915E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9994367476929038	WITHOUT_CLASSIFICATION	5.632523070961775E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9980135343361379	WITHOUT_CLASSIFICATION	0.001986465663862105	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999877340330708	WITHOUT_CLASSIFICATION	1.2265966929142098E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9996683314448674	WITHOUT_CLASSIFICATION	3.3166855513253437E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999298358178608	WITHOUT_CLASSIFICATION	7.01641821392392E-5	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999812564694562	WITHOUT_CLASSIFICATION	1.874353054373166E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999559148475472	WITHOUT_CLASSIFICATION	4.4085152452727616E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9998696362197276	WITHOUT_CLASSIFICATION	1.3036378027231923E-4	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9991923571097038	WITHOUT_CLASSIFICATION	8.076428902961032E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9998917225893034	WITHOUT_CLASSIFICATION	1.082774106966386E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998260313495522	WITHOUT_CLASSIFICATION	1.73968650447761E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999345251598025	WITHOUT_CLASSIFICATION	6.547484019746724E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999305769269834	WITHOUT_CLASSIFICATION	6.942307301659455E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999386194151757	WITHOUT_CLASSIFICATION	6.138058482432177E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999547278618615	WITHOUT_CLASSIFICATION	4.5272138138621794E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9994000169038358	WITHOUT_CLASSIFICATION	5.999830961641517E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9994328833996633	WITHOUT_CLASSIFICATION	5.671166003366444E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999671435448413	WITHOUT_CLASSIFICATION	3.2856455158790946E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998207242361671	WITHOUT_CLASSIFICATION	1.792757638329119E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998558795295995	WITHOUT_CLASSIFICATION	1.4412047040053303E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9994985314019649	WITHOUT_CLASSIFICATION	5.01468598035093E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9996854072783019	WITHOUT_CLASSIFICATION	3.1459272169810193E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9898960419796395	WITHOUT_CLASSIFICATION	0.010103958020360456	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999398635745501	WITHOUT_CLASSIFICATION	6.0136425449867287E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9994423589509671	WITHOUT_CLASSIFICATION	5.576410490329229E-4	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9988924661118405	WITHOUT_CLASSIFICATION	0.0011075338881595365	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9989390447352778	WITHOUT_CLASSIFICATION	0.0010609552647222371	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.999988747729598	WITHOUT_CLASSIFICATION	1.1252270402022718E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.999705865648738	WITHOUT_CLASSIFICATION	2.941343512620599E-4	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9998781878138708	WITHOUT_CLASSIFICATION	1.2181218612924216E-4	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999203092024215	WITHOUT_CLASSIFICATION	7.969079757854998E-5	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999693388210116	WITHOUT_CLASSIFICATION	3.0661178988354455E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999673882072911	WITHOUT_CLASSIFICATION	3.2611792708951774E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999918522301147	WITHOUT_CLASSIFICATION	8.147769885263853E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9998257102805383	WITHOUT_CLASSIFICATION	1.7428971946157986E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9996852582628682	WITHOUT_CLASSIFICATION	3.147417371318162E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998789406968689	WITHOUT_CLASSIFICATION	1.2105930313109464E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8551027291390779	WITHOUT_CLASSIFICATION	0.14489727086092205	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999629623945387	WITHOUT_CLASSIFICATION	3.703760546128608E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999673882072911	WITHOUT_CLASSIFICATION	3.2611792708951774E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9984077570043153	WITHOUT_CLASSIFICATION	0.001592242995684665	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999263403946447	WITHOUT_CLASSIFICATION	7.365960535525753E-5	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999267888089051	WITHOUT_CLASSIFICATION	7.321119109493256E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999390408673046	WITHOUT_CLASSIFICATION	6.095913269549788E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999896610136046	WITHOUT_CLASSIFICATION	1.0338986395312049E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998468812532474	WITHOUT_CLASSIFICATION	1.5311874675264265E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999476356289153	WITHOUT_CLASSIFICATION	5.236437108469814E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9997353617281536	WITHOUT_CLASSIFICATION	2.646382718464001E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9995238000298873	WITHOUT_CLASSIFICATION	4.761999701126337E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9998207445390805	WITHOUT_CLASSIFICATION	1.7925546091953669E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9998805281403897	WITHOUT_CLASSIFICATION	1.1947185961019124E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9995418224475817	WITHOUT_CLASSIFICATION	4.5817755241828146E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999768366444669	WITHOUT_CLASSIFICATION	2.316335553316652E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999909944211929	WITHOUT_CLASSIFICATION	9.0055788070481E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9982005926065435	WITHOUT_CLASSIFICATION	0.0017994073934565564	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9997359708450894	WITHOUT_CLASSIFICATION	2.640291549107304E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999580201509566	WITHOUT_CLASSIFICATION	4.1979849043504074E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.999956808045435	WITHOUT_CLASSIFICATION	4.319195456502517E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9998418615044915	WITHOUT_CLASSIFICATION	1.5813849550844978E-4	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9997794919921215	WITHOUT_CLASSIFICATION	2.205080078785245E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9998425681284207	WITHOUT_CLASSIFICATION	1.574318715793585E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.999826910392928	WITHOUT_CLASSIFICATION	1.7308960707203936E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999273886920217	WITHOUT_CLASSIFICATION	7.261130797830086E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9998160315715311	WITHOUT_CLASSIFICATION	1.839684284687671E-4	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9977906139828315	WITHOUT_CLASSIFICATION	0.0022093860171684947	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9992664855816558	WITHOUT_CLASSIFICATION	7.335144183442402E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999304011357721	WITHOUT_CLASSIFICATION	6.959886422791432E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999158758644381	WITHOUT_CLASSIFICATION	8.412413556195828E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9995096634904139	WITHOUT_CLASSIFICATION	4.903365095860952E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999940739864806	WITHOUT_CLASSIFICATION	5.926013519399867E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998721122195217	WITHOUT_CLASSIFICATION	1.2788778047833526E-4	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999196897506724	WITHOUT_CLASSIFICATION	8.031024932761816E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9929057204499988	WITHOUT_CLASSIFICATION	0.007094279550001075	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.999987645491888	WITHOUT_CLASSIFICATION	1.2354508112013289E-5	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9986319899783583	WITHOUT_CLASSIFICATION	0.001368010021641678	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999565951848384	WITHOUT_CLASSIFICATION	4.3404815161694364E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999650118841243	WITHOUT_CLASSIFICATION	3.498811587568325E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999861323968653	WITHOUT_CLASSIFICATION	1.3867603134804263E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999861323968653	WITHOUT_CLASSIFICATION	1.3867603134804263E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9998571785807284	WITHOUT_CLASSIFICATION	1.4282141927163014E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9997212533741875	WITHOUT_CLASSIFICATION	2.787466258124933E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9991172852096566	WITHOUT_CLASSIFICATION	8.827147903433311E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999388477578709	WITHOUT_CLASSIFICATION	6.115224212913158E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9998045607471182	WITHOUT_CLASSIFICATION	1.9543925288173706E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999947195631222	WITHOUT_CLASSIFICATION	5.280436877821164E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9947509864693204	WITHOUT_CLASSIFICATION	0.005249013530679553	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.999826561113584	WITHOUT_CLASSIFICATION	1.7343888641601146E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.999826561113584	WITHOUT_CLASSIFICATION	1.7343888641601146E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.999826561113584	WITHOUT_CLASSIFICATION	1.7343888641601146E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9997509301925219	WITHOUT_CLASSIFICATION	2.490698074781055E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9445527737502991	WITHOUT_CLASSIFICATION	0.05544722624970084	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999510164197449	WITHOUT_CLASSIFICATION	4.8983580255177425E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9834847587124386	WITHOUT_CLASSIFICATION	0.01651524128756147	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9974556532871313	WITHOUT_CLASSIFICATION	0.0025443467128687404	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9998377814773083	WITHOUT_CLASSIFICATION	1.6221852269178547E-4	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9998088487072655	WITHOUT_CLASSIFICATION	1.911512927344106E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999770487222692	WITHOUT_CLASSIFICATION	2.295127773078004E-5	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9445527737502991	WITHOUT_CLASSIFICATION	0.05544722624970084	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999919520112769	WITHOUT_CLASSIFICATION	8.047988723188354E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999919520112769	WITHOUT_CLASSIFICATION	8.047988723188354E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999904944392206	WITHOUT_CLASSIFICATION	9.50556077930151E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998589438171148	WITHOUT_CLASSIFICATION	1.4105618288524482E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9998731723423994	WITHOUT_CLASSIFICATION	1.2682765760056418E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998720042115368	WITHOUT_CLASSIFICATION	1.2799578846318314E-4	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.999984501424994	WITHOUT_CLASSIFICATION	1.5498575006030793E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999565969764692	WITHOUT_CLASSIFICATION	4.340302353078295E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9998726913098132	WITHOUT_CLASSIFICATION	1.2730869018685956E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9996859769434432	WITHOUT_CLASSIFICATION	3.1402305655673957E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.999741817689249	WITHOUT_CLASSIFICATION	2.581823107509605E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9998693531076317	WITHOUT_CLASSIFICATION	1.306468923682954E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999782131818158	WITHOUT_CLASSIFICATION	2.1786818184177762E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9998887672677375	WITHOUT_CLASSIFICATION	1.1123273226250139E-4	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9998840772375408	WITHOUT_CLASSIFICATION	1.1592276245919237E-4	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9983487216067393	WITHOUT_CLASSIFICATION	0.0016512783932607074	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999879447862049	WITHOUT_CLASSIFICATION	1.2055213795206425E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999948724752302	WITHOUT_CLASSIFICATION	5.127524769748675E-6	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999266502728924	WITHOUT_CLASSIFICATION	7.334972710768235E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9997796243540441	WITHOUT_CLASSIFICATION	2.2037564595588964E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9997966944506121	WITHOUT_CLASSIFICATION	2.033055493878834E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9972936638143577	WITHOUT_CLASSIFICATION	0.0027063361856423597	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999985658121869	WITHOUT_CLASSIFICATION	1.4341878131056372E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999487062332332	WITHOUT_CLASSIFICATION	5.1293766766792365E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999773206681015	WITHOUT_CLASSIFICATION	2.267933189848261E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999976414718044	WITHOUT_CLASSIFICATION	2.3585281956258026E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9823246593451399	WITHOUT_CLASSIFICATION	0.017675340654860098	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999593010481506	WITHOUT_CLASSIFICATION	4.069895184948011E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9994460696057346	WITHOUT_CLASSIFICATION	5.539303942653372E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998017880547083	WITHOUT_CLASSIFICATION	1.9821194529179797E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998017880547083	WITHOUT_CLASSIFICATION	1.9821194529179797E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9986633264351196	WITHOUT_CLASSIFICATION	0.001336673564880452	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999250940154312	WITHOUT_CLASSIFICATION	7.490598456885757E-5	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999710848329489	WITHOUT_CLASSIFICATION	2.891516705101606E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999625156103668	WITHOUT_CLASSIFICATION	3.748438963334732E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9997800924492349	WITHOUT_CLASSIFICATION	2.1990755076502138E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999707151932705	WITHOUT_CLASSIFICATION	2.9284806729454983E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9998996975620847	WITHOUT_CLASSIFICATION	1.0030243791528042E-4	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999062390128881	WITHOUT_CLASSIFICATION	9.376098711197732E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999331725389444	WITHOUT_CLASSIFICATION	6.682746105554235E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999349988849254	WITHOUT_CLASSIFICATION	6.500111507450187E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999732066632214	WITHOUT_CLASSIFICATION	2.679333677852572E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999950002424646	WITHOUT_CLASSIFICATION	4.99975753546743E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999385431055579	WITHOUT_CLASSIFICATION	6.145689444220974E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999949099443087	WITHOUT_CLASSIFICATION	5.090055691296167E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999581210636687	WITHOUT_CLASSIFICATION	4.1878936331269844E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998721504586969	WITHOUT_CLASSIFICATION	1.278495413030683E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998284706159799	WITHOUT_CLASSIFICATION	1.7152938402010322E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.999984868532785	WITHOUT_CLASSIFICATION	1.513146721507661E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9995726124991192	WITHOUT_CLASSIFICATION	4.2738750088076486E-4	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9962868593982726	WITHOUT_CLASSIFICATION	0.0037131406017274593	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998167216005065	WITHOUT_CLASSIFICATION	1.832783994935304E-4	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.99940687889891	WITHOUT_CLASSIFICATION	5.931211010899459E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999751429773108	WITHOUT_CLASSIFICATION	2.4857022689246477E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999594713967273	WITHOUT_CLASSIFICATION	4.052860327275408E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9992326235907005	WITHOUT_CLASSIFICATION	7.673764092994618E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999385431055579	WITHOUT_CLASSIFICATION	6.145689444220974E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999717751602762	WITHOUT_CLASSIFICATION	2.8224839723811356E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999581210636687	WITHOUT_CLASSIFICATION	4.1878936331269844E-5	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9996848074465262	WITHOUT_CLASSIFICATION	3.151925534737961E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9992604743029369	WITHOUT_CLASSIFICATION	7.395256970631118E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.999976715593501	WITHOUT_CLASSIFICATION	2.3284406498975905E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9978706649149706	WITHOUT_CLASSIFICATION	0.0021293350850293906	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9949184509351299	WITHOUT_CLASSIFICATION	0.005081549064870155	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9996707648383993	WITHOUT_CLASSIFICATION	3.292351616007209E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.999776220881217	WITHOUT_CLASSIFICATION	2.2377911878302656E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.999857227111436	WITHOUT_CLASSIFICATION	1.4277288856397082E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.99991819294235	WITHOUT_CLASSIFICATION	8.180705765001237E-5	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999655243659531	WITHOUT_CLASSIFICATION	3.4475634046839206E-5	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999878892471402	WITHOUT_CLASSIFICATION	1.2110752859852816E-5	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9995115279941861	WITHOUT_CLASSIFICATION	4.884720058139047E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9995538874758847	WITHOUT_CLASSIFICATION	4.4611252411535287E-4	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999754372403766	WITHOUT_CLASSIFICATION	2.4562759623404414E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999900034613505	WITHOUT_CLASSIFICATION	9.996538649485102E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999260781875702	WITHOUT_CLASSIFICATION	7.392181242975517E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999652237137949	WITHOUT_CLASSIFICATION	3.477628620507086E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999337114240735	WITHOUT_CLASSIFICATION	6.628857592654392E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9980900123669773	WITHOUT_CLASSIFICATION	0.0019099876330227112	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999753571127866	WITHOUT_CLASSIFICATION	2.464288721338636E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9996764111144302	WITHOUT_CLASSIFICATION	3.235888855699099E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.999970887869845	WITHOUT_CLASSIFICATION	2.9112130155029917E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999849390054933	WITHOUT_CLASSIFICATION	1.5060994506751783E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9989500703014684	WITHOUT_CLASSIFICATION	0.0010499296985316492	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999480571223378	WITHOUT_CLASSIFICATION	5.194287766223813E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9998090327880571	WITHOUT_CLASSIFICATION	1.9096721194285547E-4	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9989201245959294	WITHOUT_CLASSIFICATION	0.0010798754040705328	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998772783929936	WITHOUT_CLASSIFICATION	1.2272160700636377E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998772783929936	WITHOUT_CLASSIFICATION	1.2272160700636377E-4	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9984292567603961	WITHOUT_CLASSIFICATION	0.0015707432396039151	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999771322631378	WITHOUT_CLASSIFICATION	2.2867736862127213E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999427470639239	WITHOUT_CLASSIFICATION	5.725293607605726E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9985729361815732	WITHOUT_CLASSIFICATION	0.001427063818426854	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999799808426941	WITHOUT_CLASSIFICATION	2.001915730585451E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999500813630531	WITHOUT_CLASSIFICATION	4.991863694683568E-5	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9995513573335832	WITHOUT_CLASSIFICATION	4.4864266641670813E-4	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999840873050088	WITHOUT_CLASSIFICATION	1.59126949911581E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9998837702751072	WITHOUT_CLASSIFICATION	1.1622972489269668E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.999437644703046	WITHOUT_CLASSIFICATION	5.623552969541373E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.999678279106062	WITHOUT_CLASSIFICATION	3.217208939380183E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999568359975874	WITHOUT_CLASSIFICATION	4.316400241249813E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9998030928560725	WITHOUT_CLASSIFICATION	1.9690714392759E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.8967829522769628	WITHOUT_CLASSIFICATION	0.10321704772303726	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.996696136507745	WITHOUT_CLASSIFICATION	0.0033038634922549666	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999785683656738	WITHOUT_CLASSIFICATION	2.1431634326211395E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999940830339318	WITHOUT_CLASSIFICATION	5.916966068134577E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9980283765377916	WITHOUT_CLASSIFICATION	0.0019716234622083814	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999879923846227	WITHOUT_CLASSIFICATION	1.2007615377243258E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999478331814391	WITHOUT_CLASSIFICATION	5.216681856094036E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9995175588336371	WITHOUT_CLASSIFICATION	4.824411663628483E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999879923846227	WITHOUT_CLASSIFICATION	1.2007615377243258E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9949347718636454	WITHOUT_CLASSIFICATION	0.005065228136354519	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9998735907390128	WITHOUT_CLASSIFICATION	1.2640926098724252E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999934372581169	WITHOUT_CLASSIFICATION	6.562741883097487E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999934372581169	WITHOUT_CLASSIFICATION	6.562741883097487E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999324112012339	WITHOUT_CLASSIFICATION	6.758879876618966E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999188694254171	WITHOUT_CLASSIFICATION	8.113057458286817E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997086980231679	WITHOUT_CLASSIFICATION	2.913019768320975E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9967091812279449	WITHOUT_CLASSIFICATION	0.003290818772055117	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999730572920251	WITHOUT_CLASSIFICATION	2.6942707974860754E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9962106944872895	WITHOUT_CLASSIFICATION	0.0037893055127104338	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999317173712782	WITHOUT_CLASSIFICATION	6.828262872192222E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9986826340013397	WITHOUT_CLASSIFICATION	0.0013173659986602752	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999751903584505	WITHOUT_CLASSIFICATION	2.4809641549513308E-5	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999254359064951	WITHOUT_CLASSIFICATION	7.456409350485899E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9996683314448674	WITHOUT_CLASSIFICATION	3.3166855513253437E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9998662711423026	WITHOUT_CLASSIFICATION	1.3372885769739236E-4	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999769480437267	WITHOUT_CLASSIFICATION	2.305195627322377E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999785683656738	WITHOUT_CLASSIFICATION	2.1431634326211395E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999730572920251	WITHOUT_CLASSIFICATION	2.6942707974860754E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9338065092543574	WITHOUT_CLASSIFICATION	0.0661934907456427	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9338065092543574	WITHOUT_CLASSIFICATION	0.0661934907456427	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9404982414583986	WITHOUT_CLASSIFICATION	0.05950175854160141	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.999911839660041	WITHOUT_CLASSIFICATION	8.816033995900865E-5	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9994955505994988	WITHOUT_CLASSIFICATION	5.044494005011618E-4	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998203624346247	WITHOUT_CLASSIFICATION	1.796375653752641E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9998675607407569	WITHOUT_CLASSIFICATION	1.324392592431106E-4	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999897190636315	WITHOUT_CLASSIFICATION	1.0280936368491633E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9976122658214548	WITHOUT_CLASSIFICATION	0.0023877341785452843	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9953888099988071	WITHOUT_CLASSIFICATION	0.0046111900011929175	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999195907196828	WITHOUT_CLASSIFICATION	8.04092803171942E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999928139273864	WITHOUT_CLASSIFICATION	7.18607261365849E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9991747259985571	WITHOUT_CLASSIFICATION	8.252740014429369E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999959788605538	WITHOUT_CLASSIFICATION	4.0211394461387724E-6	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.999968755954658	WITHOUT_CLASSIFICATION	3.124404534209115E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999940830339318	WITHOUT_CLASSIFICATION	5.916966068134577E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999188694254171	WITHOUT_CLASSIFICATION	8.113057458286817E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997086980231679	WITHOUT_CLASSIFICATION	2.913019768320975E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997086980231679	WITHOUT_CLASSIFICATION	2.913019768320975E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999730572920251	WITHOUT_CLASSIFICATION	2.6942707974860754E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999730572920251	WITHOUT_CLASSIFICATION	2.6942707974860754E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9338065092543574	WITHOUT_CLASSIFICATION	0.0661934907456427	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999885779935491	WITHOUT_CLASSIFICATION	1.142200645081731E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.996512628904602	WITHOUT_CLASSIFICATION	0.003487371095397911	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999683993798979	WITHOUT_CLASSIFICATION	3.160062010217369E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996262629672021	WITHOUT_CLASSIFICATION	3.7373703279792905E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9992032090694094	WITHOUT_CLASSIFICATION	7.967909305907156E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9738259597239785	WITHOUT_CLASSIFICATION	0.026174040276021524	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999124133601942	WITHOUT_CLASSIFICATION	8.758663980569532E-5	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9991543186227143	WITHOUT_CLASSIFICATION	8.456813772856109E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999567303041774	WITHOUT_CLASSIFICATION	4.326969582263473E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999188694254171	WITHOUT_CLASSIFICATION	8.113057458286817E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997086980231679	WITHOUT_CLASSIFICATION	2.913019768320975E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997086980231679	WITHOUT_CLASSIFICATION	2.913019768320975E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9953888099988071	WITHOUT_CLASSIFICATION	0.0046111900011929175	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999928139273864	WITHOUT_CLASSIFICATION	7.18607261365849E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999202539597892	WITHOUT_CLASSIFICATION	7.974604021075315E-5	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999813798961524	WITHOUT_CLASSIFICATION	1.8620103847621676E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999883147323875	WITHOUT_CLASSIFICATION	1.1685267612412366E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999883147323875	WITHOUT_CLASSIFICATION	1.1685267612412366E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999642164199485	WITHOUT_CLASSIFICATION	3.5783580051453E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9998186655096227	WITHOUT_CLASSIFICATION	1.8133449037737595E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999691395629061	WITHOUT_CLASSIFICATION	3.0860437093824404E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999929930976121	WITHOUT_CLASSIFICATION	7.006902387840251E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999929930976121	WITHOUT_CLASSIFICATION	7.006902387840251E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999604479439779	WITHOUT_CLASSIFICATION	3.9552056022048874E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999604479439779	WITHOUT_CLASSIFICATION	3.9552056022048874E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999894789987414	WITHOUT_CLASSIFICATION	1.0521001258688391E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999894789987414	WITHOUT_CLASSIFICATION	1.0521001258688391E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.999980793226966	WITHOUT_CLASSIFICATION	1.9206773034111528E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9998640693481569	WITHOUT_CLASSIFICATION	1.359306518430867E-4	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9981329284496999	WITHOUT_CLASSIFICATION	0.0018670715503000168	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999383322781347	WITHOUT_CLASSIFICATION	6.166772186531018E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999438983333352	WITHOUT_CLASSIFICATION	5.610166666474496E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.999944963756911	WITHOUT_CLASSIFICATION	5.5036243089090496E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999832073422058	WITHOUT_CLASSIFICATION	1.6792657794129324E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9998677257774291	WITHOUT_CLASSIFICATION	1.3227422257085743E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9997607084352811	WITHOUT_CLASSIFICATION	2.392915647190194E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999012913066258	WITHOUT_CLASSIFICATION	9.870869337424377E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999567622481977	WITHOUT_CLASSIFICATION	4.3237751802197725E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.999615376529682	WITHOUT_CLASSIFICATION	3.8462347031807215E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998714011948321	WITHOUT_CLASSIFICATION	1.2859880516802384E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998714011948321	WITHOUT_CLASSIFICATION	1.2859880516802384E-4	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9996853614164046	WITHOUT_CLASSIFICATION	3.146385835953355E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999565969764692	WITHOUT_CLASSIFICATION	4.340302353078295E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9949553234746442	WITHOUT_CLASSIFICATION	0.005044676525355783	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9998301935562623	WITHOUT_CLASSIFICATION	1.6980644373764585E-4	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.999980565388135	WITHOUT_CLASSIFICATION	1.943461186502464E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9996933008358624	WITHOUT_CLASSIFICATION	3.0669916413766674E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.998699935823399	WITHOUT_CLASSIFICATION	0.0013000641766009902	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999038652176686	WITHOUT_CLASSIFICATION	9.613478233129087E-5	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999519480060709	WITHOUT_CLASSIFICATION	4.80519939291514E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9998559001176736	WITHOUT_CLASSIFICATION	1.4409988232636154E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999390663333488	WITHOUT_CLASSIFICATION	6.093366665125462E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9994548501572027	WITHOUT_CLASSIFICATION	5.451498427973692E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998900248159676	WITHOUT_CLASSIFICATION	1.0997518403233152E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.999954654531595	WITHOUT_CLASSIFICATION	4.5345468404841986E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9972665971927366	WITHOUT_CLASSIFICATION	0.002733402807263412	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999900473462389	WITHOUT_CLASSIFICATION	9.952653761158584E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.999967259100821	WITHOUT_CLASSIFICATION	3.274089917906589E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9996123519179214	WITHOUT_CLASSIFICATION	3.876480820786089E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998197524901629	WITHOUT_CLASSIFICATION	1.8024750983725967E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998197524901629	WITHOUT_CLASSIFICATION	1.8024750983725967E-4	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9998483127585023	WITHOUT_CLASSIFICATION	1.516872414976386E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9996683314448674	WITHOUT_CLASSIFICATION	3.3166855513253437E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999163667962058	WITHOUT_CLASSIFICATION	8.363320379421878E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999571314987248	WITHOUT_CLASSIFICATION	4.286850127510068E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999571314987248	WITHOUT_CLASSIFICATION	4.286850127510068E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999819420744129	WITHOUT_CLASSIFICATION	1.8057925587054128E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999209509074202	WITHOUT_CLASSIFICATION	7.904909257978461E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.999827278065547	WITHOUT_CLASSIFICATION	1.7272193445301497E-4	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9993235155922385	WITHOUT_CLASSIFICATION	6.764844077615046E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994974040435998	WITHOUT_CLASSIFICATION	5.025959564001856E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994974040435998	WITHOUT_CLASSIFICATION	5.025959564001856E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994974040435998	WITHOUT_CLASSIFICATION	5.025959564001856E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9993235155922385	WITHOUT_CLASSIFICATION	6.764844077615046E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999632734217488	WITHOUT_CLASSIFICATION	3.672657825109134E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.99997301319133	WITHOUT_CLASSIFICATION	2.6986808669974705E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999085970437198	WITHOUT_CLASSIFICATION	9.140295628020268E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9997604711861925	WITHOUT_CLASSIFICATION	2.3952881380751568E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999629625217828	WITHOUT_CLASSIFICATION	3.703747821717163E-5	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9992831864376932	WITHOUT_CLASSIFICATION	7.16813562306755E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999717008682424	WITHOUT_CLASSIFICATION	2.8299131757623656E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9993186026502778	WITHOUT_CLASSIFICATION	6.813973497222572E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999390663333488	WITHOUT_CLASSIFICATION	6.093366665125462E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9994829534051735	WITHOUT_CLASSIFICATION	5.17046594826427E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999479004482772	WITHOUT_CLASSIFICATION	5.209955172280404E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999826458178066	WITHOUT_CLASSIFICATION	1.7354182193418406E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9950545736553572	WITHOUT_CLASSIFICATION	0.004945426344642789	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999060965064938	WITHOUT_CLASSIFICATION	9.39034935062195E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9992575047339876	WITHOUT_CLASSIFICATION	7.424952660124916E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999097933248386	WITHOUT_CLASSIFICATION	9.02066751612547E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9998847331039112	WITHOUT_CLASSIFICATION	1.1526689608874378E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9987240717509989	WITHOUT_CLASSIFICATION	0.001275928249001133	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998449632793985	WITHOUT_CLASSIFICATION	1.5503672060133197E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9994846205209761	WITHOUT_CLASSIFICATION	5.153794790239954E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999105674533111	WITHOUT_CLASSIFICATION	8.943254668891452E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9998922754700545	WITHOUT_CLASSIFICATION	1.0772452994551045E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9997755358583101	WITHOUT_CLASSIFICATION	2.2446414168977695E-4	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999770086595998	WITHOUT_CLASSIFICATION	2.2991340400183166E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9998881848227863	WITHOUT_CLASSIFICATION	1.1181517721378916E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.999870322648937	WITHOUT_CLASSIFICATION	1.2967735106295266E-4	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999503405170201	WITHOUT_CLASSIFICATION	4.9659482979761315E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9986395032896487	WITHOUT_CLASSIFICATION	0.0013604967103512803	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9998058150487842	WITHOUT_CLASSIFICATION	1.9418495121576444E-4	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9997999571748919	WITHOUT_CLASSIFICATION	2.0004282510819799E-4	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.999868490672015	WITHOUT_CLASSIFICATION	1.3150932798500876E-4	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.999923698047785	WITHOUT_CLASSIFICATION	7.630195221492816E-5	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999570380183048	WITHOUT_CLASSIFICATION	4.296198169521216E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999781796183289	WITHOUT_CLASSIFICATION	2.1820381671117994E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.999696551208026	WITHOUT_CLASSIFICATION	3.034487919740271E-4	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9983894335788929	WITHOUT_CLASSIFICATION	0.0016105664211070944	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999819420744129	WITHOUT_CLASSIFICATION	1.8057925587054128E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999770674634241	WITHOUT_CLASSIFICATION	2.293253657597511E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9993235155922385	WITHOUT_CLASSIFICATION	6.764844077615046E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9992831864376932	WITHOUT_CLASSIFICATION	7.16813562306755E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999479004482772	WITHOUT_CLASSIFICATION	5.209955172280404E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9950545736553572	WITHOUT_CLASSIFICATION	0.004945426344642789	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9992575047339876	WITHOUT_CLASSIFICATION	7.424952660124916E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999826458178066	WITHOUT_CLASSIFICATION	1.7354182193418406E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999097933248386	WITHOUT_CLASSIFICATION	9.02066751612547E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998449632793985	WITHOUT_CLASSIFICATION	1.5503672060133197E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9987240717509989	WITHOUT_CLASSIFICATION	0.001275928249001133	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999105674533111	WITHOUT_CLASSIFICATION	8.943254668891452E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999942451376196	WITHOUT_CLASSIFICATION	5.754862380327677E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9992587429965156	WITHOUT_CLASSIFICATION	7.412570034843223E-4	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9998191500696388	WITHOUT_CLASSIFICATION	1.808499303610457E-4	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999773598055386	WITHOUT_CLASSIFICATION	2.2640194461518604E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999338209010575	WITHOUT_CLASSIFICATION	6.617909894244514E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999746715699711	WITHOUT_CLASSIFICATION	2.5328430028939506E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998931437830486	WITHOUT_CLASSIFICATION	1.068562169513838E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9997051360091916	WITHOUT_CLASSIFICATION	2.9486399080838166E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9987815744668426	WITHOUT_CLASSIFICATION	0.001218425533157516	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9998529723541161	WITHOUT_CLASSIFICATION	1.4702764588396487E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999110692872112	WITHOUT_CLASSIFICATION	8.893071278882344E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9921108244813068	WITHOUT_CLASSIFICATION	0.007889175518693156	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9997967906744252	WITHOUT_CLASSIFICATION	2.0320932557482072E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999220334414372	WITHOUT_CLASSIFICATION	7.796655856277445E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996533947647396	WITHOUT_CLASSIFICATION	3.466052352604388E-4	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999189675309684	WITHOUT_CLASSIFICATION	8.103246903161934E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9996875815309274	WITHOUT_CLASSIFICATION	3.124184690725773E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9995844254321061	WITHOUT_CLASSIFICATION	4.155745678938543E-4	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999641600168885	WITHOUT_CLASSIFICATION	3.5839983111517304E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9983109959822298	WITHOUT_CLASSIFICATION	0.0016890040177701218	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9975578309544533	WITHOUT_CLASSIFICATION	0.002442169045546763	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9975578309544533	WITHOUT_CLASSIFICATION	0.002442169045546763	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9957046338017906	WITHOUT_CLASSIFICATION	0.004295366198209377	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9967958943342766	WITHOUT_CLASSIFICATION	0.0032041056657232726	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9967958943342766	WITHOUT_CLASSIFICATION	0.0032041056657232726	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998058908355406	WITHOUT_CLASSIFICATION	1.94109164459478E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998058908355406	WITHOUT_CLASSIFICATION	1.94109164459478E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9996900401556946	WITHOUT_CLASSIFICATION	3.099598443054445E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9996900401556946	WITHOUT_CLASSIFICATION	3.099598443054445E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999916444033803	WITHOUT_CLASSIFICATION	8.355596619778974E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9978958303634664	WITHOUT_CLASSIFICATION	0.002104169636533518	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9978958303634664	WITHOUT_CLASSIFICATION	0.002104169636533518	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999390566312522	WITHOUT_CLASSIFICATION	6.094336874780682E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999390566312522	WITHOUT_CLASSIFICATION	6.094336874780682E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998009477254743	WITHOUT_CLASSIFICATION	1.990522745255606E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999747579516778	WITHOUT_CLASSIFICATION	2.5242048322204235E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999747579516778	WITHOUT_CLASSIFICATION	2.5242048322204235E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9994414986255282	WITHOUT_CLASSIFICATION	5.585013744716931E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9997850020514605	WITHOUT_CLASSIFICATION	2.1499794853961675E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998854552042334	WITHOUT_CLASSIFICATION	1.1454479576655989E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9994414986255282	WITHOUT_CLASSIFICATION	5.585013744716931E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9996285486033144	WITHOUT_CLASSIFICATION	3.71451396685623E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999940110525707	WITHOUT_CLASSIFICATION	5.988947429366288E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.99970114044989	WITHOUT_CLASSIFICATION	2.988595501100439E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.999997430136369	WITHOUT_CLASSIFICATION	2.569863630976957E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999924188121089	WITHOUT_CLASSIFICATION	7.58118789115815E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999924188121089	WITHOUT_CLASSIFICATION	7.581187891158164E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999763964592009	WITHOUT_CLASSIFICATION	2.3603540799162577E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999918821834296	WITHOUT_CLASSIFICATION	8.117816570398732E-5	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999918821834296	WITHOUT_CLASSIFICATION	8.117816570398732E-5	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999474155409767	WITHOUT_CLASSIFICATION	5.2584459023337295E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.99970114044989	WITHOUT_CLASSIFICATION	2.988595501100439E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.999997430136369	WITHOUT_CLASSIFICATION	2.569863630976957E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999924188121089	WITHOUT_CLASSIFICATION	7.58118789115815E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999924188121089	WITHOUT_CLASSIFICATION	7.581187891158164E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999763964592009	WITHOUT_CLASSIFICATION	2.3603540799162577E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9996699601634103	WITHOUT_CLASSIFICATION	3.3003983658977783E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998903710219568	WITHOUT_CLASSIFICATION	1.0962897804328995E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.996124960939697	WITHOUT_CLASSIFICATION	0.0038750390603029916	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9994384790339935	WITHOUT_CLASSIFICATION	5.615209660064812E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9998844201385254	WITHOUT_CLASSIFICATION	1.1557986147458638E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999803773725802	WITHOUT_CLASSIFICATION	1.96226274198635E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999790094701783	WITHOUT_CLASSIFICATION	2.099052982168243E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999790094701783	WITHOUT_CLASSIFICATION	2.099052982168243E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9992006405908376	WITHOUT_CLASSIFICATION	7.993594091623566E-4	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999255612805061	WITHOUT_CLASSIFICATION	7.443871949388887E-5	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999255612805061	WITHOUT_CLASSIFICATION	7.443871949388887E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999642550872513	WITHOUT_CLASSIFICATION	3.574491274879845E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999255612805061	WITHOUT_CLASSIFICATION	7.443871949388887E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999255612805061	WITHOUT_CLASSIFICATION	7.443871949388887E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999284148030966	WITHOUT_CLASSIFICATION	7.158519690341488E-5	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999284148030966	WITHOUT_CLASSIFICATION	7.158519690341488E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999741645437501	WITHOUT_CLASSIFICATION	2.5835456249929438E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999741645437501	WITHOUT_CLASSIFICATION	2.5835456249929438E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999255612805061	WITHOUT_CLASSIFICATION	7.443871949388887E-5	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999776090710791	WITHOUT_CLASSIFICATION	2.2390928920889422E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999157815169928	WITHOUT_CLASSIFICATION	8.421848300716839E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999621645465876	WITHOUT_CLASSIFICATION	3.783545341237964E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994944676884125	WITHOUT_CLASSIFICATION	5.055323115875251E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9996511100578394	WITHOUT_CLASSIFICATION	3.488899421606863E-4	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9997732949816249	WITHOUT_CLASSIFICATION	2.2670501837505298E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9998762614219627	WITHOUT_CLASSIFICATION	1.2373857803714422E-4	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9965670238717074	WITHOUT_CLASSIFICATION	0.003432976128292591	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.999641493211498	WITHOUT_CLASSIFICATION	3.585067885020299E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9976196511016919	WITHOUT_CLASSIFICATION	0.0023803488983080386	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9976196511016919	WITHOUT_CLASSIFICATION	0.0023803488983080386	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999819900553975	WITHOUT_CLASSIFICATION	1.8009944602499938E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999819900553975	WITHOUT_CLASSIFICATION	1.8009944602499938E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9991789616528842	WITHOUT_CLASSIFICATION	8.210383471158343E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998703491633619	WITHOUT_CLASSIFICATION	1.2965083663800134E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998703491633619	WITHOUT_CLASSIFICATION	1.2965083663800134E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998703491633619	WITHOUT_CLASSIFICATION	1.2965083663800134E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999903727056659	WITHOUT_CLASSIFICATION	9.627294334064287E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999903727056659	WITHOUT_CLASSIFICATION	9.627294334064287E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998848864724216	WITHOUT_CLASSIFICATION	1.1511352757843803E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999825377491729	WITHOUT_CLASSIFICATION	1.746225082714918E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999591210698676	WITHOUT_CLASSIFICATION	4.087893013232571E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.999996702803364	WITHOUT_CLASSIFICATION	3.29719663610162E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9997507091697787	WITHOUT_CLASSIFICATION	2.4929083022124765E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9998524079515706	WITHOUT_CLASSIFICATION	1.4759204842933218E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.999051806012562	WITHOUT_CLASSIFICATION	9.481939874379271E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998848864724216	WITHOUT_CLASSIFICATION	1.1511352757843803E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999902683787684	WITHOUT_CLASSIFICATION	9.731621231663397E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999825377491729	WITHOUT_CLASSIFICATION	1.746225082714918E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999591210698676	WITHOUT_CLASSIFICATION	4.087893013232571E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998514628826568	WITHOUT_CLASSIFICATION	1.4853711734324744E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999636292630952	WITHOUT_CLASSIFICATION	3.6370736904802064E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997885764580005	WITHOUT_CLASSIFICATION	2.1142354199959286E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9998765092797671	WITHOUT_CLASSIFICATION	1.2349072023297653E-4	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.999926012595715	WITHOUT_CLASSIFICATION	7.398740428502296E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9997510998300088	WITHOUT_CLASSIFICATION	2.4890016999122485E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998514628826568	WITHOUT_CLASSIFICATION	1.4853711734324744E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999905216332248	WITHOUT_CLASSIFICATION	9.478366775186478E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999905216332248	WITHOUT_CLASSIFICATION	9.478366775186478E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999160605767649	WITHOUT_CLASSIFICATION	8.393942323510953E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.999941934668326	WITHOUT_CLASSIFICATION	5.8065331674034944E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9995114827139895	WITHOUT_CLASSIFICATION	4.885172860104959E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.998671308938818	WITHOUT_CLASSIFICATION	0.001328691061182018	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9995832526282579	WITHOUT_CLASSIFICATION	4.1674737174220313E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999849295137964	WITHOUT_CLASSIFICATION	1.5070486203576907E-5	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.999503750474383	WITHOUT_CLASSIFICATION	4.96249525617108E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9998781173531467	WITHOUT_CLASSIFICATION	1.2188264685330614E-4	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9990940003365727	WITHOUT_CLASSIFICATION	9.059996634272839E-4	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999810849880295	WITHOUT_CLASSIFICATION	1.8915011970528993E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.999691058752419	WITHOUT_CLASSIFICATION	3.08941247580913E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.998671308938818	WITHOUT_CLASSIFICATION	0.001328691061182018	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9995832526282579	WITHOUT_CLASSIFICATION	4.1674737174220313E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9998329276132637	WITHOUT_CLASSIFICATION	1.670723867362254E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999806531154857	WITHOUT_CLASSIFICATION	1.9346884514389836E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9995927774143918	WITHOUT_CLASSIFICATION	4.07222585608197E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.999986934143848	WITHOUT_CLASSIFICATION	1.306585615204435E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999595394928127	WITHOUT_CLASSIFICATION	4.04605071873861E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999638936046801	WITHOUT_CLASSIFICATION	3.610639531983129E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999107623379819	WITHOUT_CLASSIFICATION	8.923766201817892E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9996152692848954	WITHOUT_CLASSIFICATION	3.8473071510466793E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999952072664029	WITHOUT_CLASSIFICATION	4.792733597120639E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999766582475182	WITHOUT_CLASSIFICATION	2.3341752481739173E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999800018525679	WITHOUT_CLASSIFICATION	1.999814743209091E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999176865665451	WITHOUT_CLASSIFICATION	8.231343345486871E-5	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999771265733399	WITHOUT_CLASSIFICATION	2.2873426660128166E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999766582475182	WITHOUT_CLASSIFICATION	2.3341752481739173E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999800018525679	WITHOUT_CLASSIFICATION	1.999814743209091E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999176865665451	WITHOUT_CLASSIFICATION	8.231343345486871E-5	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998903616780621	WITHOUT_CLASSIFICATION	1.0963832193783432E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9993388481863232	WITHOUT_CLASSIFICATION	6.611518136767743E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.999487495018938	WITHOUT_CLASSIFICATION	5.125049810621128E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9990555551476675	WITHOUT_CLASSIFICATION	9.444448523324916E-4	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9994380896477267	WITHOUT_CLASSIFICATION	5.619103522733287E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9998212410732554	WITHOUT_CLASSIFICATION	1.7875892674462424E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9996917200603136	WITHOUT_CLASSIFICATION	3.082799396863673E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9994865752641708	WITHOUT_CLASSIFICATION	5.134247358292171E-4	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999817422118763	WITHOUT_CLASSIFICATION	1.8257788123621166E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9914193866247413	WITHOUT_CLASSIFICATION	0.008580613375258644	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9992336627531861	WITHOUT_CLASSIFICATION	7.663372468138578E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9993216701113157	WITHOUT_CLASSIFICATION	6.783298886843339E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999628640064087	WITHOUT_CLASSIFICATION	3.713599359144397E-5	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9991384959751121	WITHOUT_CLASSIFICATION	8.615040248879163E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999082665660862	WITHOUT_CLASSIFICATION	9.173343391371298E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.998645654319747	WITHOUT_CLASSIFICATION	0.0013543456802530673	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9990839496178887	WITHOUT_CLASSIFICATION	9.160503821112186E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999685611194749	WITHOUT_CLASSIFICATION	3.143888052505133E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999506176217083	WITHOUT_CLASSIFICATION	4.9382378291794824E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998394617374916	WITHOUT_CLASSIFICATION	1.6053826250838233E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999380973304648	WITHOUT_CLASSIFICATION	6.19026695351559E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999380973304648	WITHOUT_CLASSIFICATION	6.19026695351559E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9992742810341747	WITHOUT_CLASSIFICATION	7.257189658253442E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9992742810341747	WITHOUT_CLASSIFICATION	7.257189658253442E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9998915304025504	WITHOUT_CLASSIFICATION	1.0846959744963348E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9998915304025504	WITHOUT_CLASSIFICATION	1.0846959744963348E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999081144099197	WITHOUT_CLASSIFICATION	9.188559008037908E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999991727739984	WITHOUT_CLASSIFICATION	8.272260015865923E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999853789713739	WITHOUT_CLASSIFICATION	1.4621028626112139E-4	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999399401771304	WITHOUT_CLASSIFICATION	6.005982286966296E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999826815273463	WITHOUT_CLASSIFICATION	1.7318472653691128E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999845289227679	WITHOUT_CLASSIFICATION	1.54710772320483E-5	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9998260223552314	WITHOUT_CLASSIFICATION	1.7397764476849247E-4	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999815224670189	WITHOUT_CLASSIFICATION	1.8477532981107924E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999081144099197	WITHOUT_CLASSIFICATION	9.188559008037908E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999991727739984	WITHOUT_CLASSIFICATION	8.272260015865923E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999853789713739	WITHOUT_CLASSIFICATION	1.4621028626112139E-4	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999826815273463	WITHOUT_CLASSIFICATION	1.7318472653691128E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999845289227679	WITHOUT_CLASSIFICATION	1.54710772320483E-5	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999239561348225	WITHOUT_CLASSIFICATION	7.604386517745559E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999489228929512	WITHOUT_CLASSIFICATION	5.107710704886982E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9990480693709387	WITHOUT_CLASSIFICATION	9.519306290612072E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9990480693709387	WITHOUT_CLASSIFICATION	9.519306290612072E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9996192644226276	WITHOUT_CLASSIFICATION	3.807355773724743E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9993788046476267	WITHOUT_CLASSIFICATION	6.2119535237325E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.995435468234142	WITHOUT_CLASSIFICATION	0.004564531765858021	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9995950256812601	WITHOUT_CLASSIFICATION	4.049743187398632E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9995950256812601	WITHOUT_CLASSIFICATION	4.049743187398632E-4	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9998652298779208	WITHOUT_CLASSIFICATION	1.347701220791815E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999998288490088	WITHOUT_CLASSIFICATION	1.711509911928596E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9995466052026681	WITHOUT_CLASSIFICATION	4.533947973318771E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999494681367048	WITHOUT_CLASSIFICATION	5.0531863295060134E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999080000366365	WITHOUT_CLASSIFICATION	9.19999633634854E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9921108244813068	WITHOUT_CLASSIFICATION	0.007889175518693156	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9997967906744252	WITHOUT_CLASSIFICATION	2.0320932557482072E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999220334414372	WITHOUT_CLASSIFICATION	7.796655856277445E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996533947647396	WITHOUT_CLASSIFICATION	3.466052352604388E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9995844254321061	WITHOUT_CLASSIFICATION	4.155745678938543E-4	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999641600168885	WITHOUT_CLASSIFICATION	3.5839983111517304E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9998652298779208	WITHOUT_CLASSIFICATION	1.347701220791815E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999998288490088	WITHOUT_CLASSIFICATION	1.711509911928596E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999494681367048	WITHOUT_CLASSIFICATION	5.0531863295060134E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9997426121542345	WITHOUT_CLASSIFICATION	2.573878457653705E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.995435468234142	WITHOUT_CLASSIFICATION	0.004564531765858021	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.995435468234142	WITHOUT_CLASSIFICATION	0.004564531765858021	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.999691058752419	WITHOUT_CLASSIFICATION	3.08941247580913E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.999691058752419	WITHOUT_CLASSIFICATION	3.08941247580913E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993938145868194	WITHOUT_CLASSIFICATION	6.061854131805439E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993938145868194	WITHOUT_CLASSIFICATION	6.061854131805439E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999041596186755	WITHOUT_CLASSIFICATION	9.58403813244733E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9995670635304651	WITHOUT_CLASSIFICATION	4.329364695347864E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9991372491946239	WITHOUT_CLASSIFICATION	8.627508053762124E-4	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9998909431080155	WITHOUT_CLASSIFICATION	1.0905689198440327E-4	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9998495615297422	WITHOUT_CLASSIFICATION	1.5043847025784E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998584821405793	WITHOUT_CLASSIFICATION	1.4151785942085262E-4	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9986330253915847	WITHOUT_CLASSIFICATION	0.0013669746084152415	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999516726828879	WITHOUT_CLASSIFICATION	4.83273171121685E-5	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9997412533446561	WITHOUT_CLASSIFICATION	2.587466553439208E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999598162718784	WITHOUT_CLASSIFICATION	4.0183728121639545E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999977606926816	WITHOUT_CLASSIFICATION	2.2393073184364655E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999686573576796	WITHOUT_CLASSIFICATION	3.1342642320412095E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999917023073198	WITHOUT_CLASSIFICATION	8.297692680074608E-6	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999764774325561	WITHOUT_CLASSIFICATION	2.3522567443845204E-5	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999606203299113	WITHOUT_CLASSIFICATION	3.937967008875589E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9998258109949377	WITHOUT_CLASSIFICATION	1.7418900506222966E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999382472693468	WITHOUT_CLASSIFICATION	6.175273065323983E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.999904665894119	WITHOUT_CLASSIFICATION	9.533410588095389E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9997967906744252	WITHOUT_CLASSIFICATION	2.0320932557482072E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996533947647396	WITHOUT_CLASSIFICATION	3.466052352604388E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9997426121542345	WITHOUT_CLASSIFICATION	2.573878457653705E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.995435468234142	WITHOUT_CLASSIFICATION	0.004564531765858021	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.999691058752419	WITHOUT_CLASSIFICATION	3.08941247580913E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993938145868194	WITHOUT_CLASSIFICATION	6.061854131805439E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9990340642898912	WITHOUT_CLASSIFICATION	9.659357101089093E-4	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9995252748439183	WITHOUT_CLASSIFICATION	4.7472515608171803E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9998663139067477	WITHOUT_CLASSIFICATION	1.3368609325231892E-4	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999815660881076	WITHOUT_CLASSIFICATION	1.8433911892424592E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9990688287684384	WITHOUT_CLASSIFICATION	9.311712315616274E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9990688287684384	WITHOUT_CLASSIFICATION	9.311712315616274E-4	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999493175202526	WITHOUT_CLASSIFICATION	5.068247974725883E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999566256767496	WITHOUT_CLASSIFICATION	4.337432325031724E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999949405307882	WITHOUT_CLASSIFICATION	5.059469211795388E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999566256767496	WITHOUT_CLASSIFICATION	4.337432325031724E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999908012332358	WITHOUT_CLASSIFICATION	9.19876676413648E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999908012332358	WITHOUT_CLASSIFICATION	9.19876676413648E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9996846065170066	WITHOUT_CLASSIFICATION	3.1539348299339167E-4	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999831048209524	WITHOUT_CLASSIFICATION	1.6895179047521472E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9995071122735668	WITHOUT_CLASSIFICATION	4.928877264331464E-4	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999786515980393	WITHOUT_CLASSIFICATION	2.1348401960687164E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999866176774201	WITHOUT_CLASSIFICATION	1.3382322579828197E-5	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9996892949839719	WITHOUT_CLASSIFICATION	3.1070501602810423E-4	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999799718208834	WITHOUT_CLASSIFICATION	2.002817911656238E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.999409836873303	WITHOUT_CLASSIFICATION	5.901631266970811E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9954865047460961	WITHOUT_CLASSIFICATION	0.004513495253903785	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9993722116568352	WITHOUT_CLASSIFICATION	6.277883431647767E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.999847816993429	WITHOUT_CLASSIFICATION	1.5218300657115382E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9996447272817208	WITHOUT_CLASSIFICATION	3.552727182791861E-4	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999196992929876	WITHOUT_CLASSIFICATION	8.030070701240138E-5	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9992144737874505	WITHOUT_CLASSIFICATION	7.855262125494285E-4	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9991373887286079	WITHOUT_CLASSIFICATION	8.626112713922356E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9973396277762734	WITHOUT_CLASSIFICATION	0.0026603722237266733	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9996699522010766	WITHOUT_CLASSIFICATION	3.3004779892344376E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9998593403980871	WITHOUT_CLASSIFICATION	1.4065960191282433E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9985548308398587	WITHOUT_CLASSIFICATION	0.0014451691601412053	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.999972622195024	WITHOUT_CLASSIFICATION	2.7377804975997354E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9990154020893651	WITHOUT_CLASSIFICATION	9.845979106349097E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999728794038257	WITHOUT_CLASSIFICATION	2.7120596174217504E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999728794038257	WITHOUT_CLASSIFICATION	2.7120596174217504E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9982507737521523	WITHOUT_CLASSIFICATION	0.0017492262478477738	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999903748980365	WITHOUT_CLASSIFICATION	9.62510196346628E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999038652176686	WITHOUT_CLASSIFICATION	9.613478233129087E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999038652176686	WITHOUT_CLASSIFICATION	9.613478233129087E-5	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9434703575170553	WITHOUT_CLASSIFICATION	0.05652964248294461	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9992070684933346	WITHOUT_CLASSIFICATION	7.92931506665287E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9998098670502511	WITHOUT_CLASSIFICATION	1.90132949748944E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999938606923175	WITHOUT_CLASSIFICATION	6.139307682494612E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999938606923175	WITHOUT_CLASSIFICATION	6.139307682494612E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9982541826179681	WITHOUT_CLASSIFICATION	0.0017458173820319954	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999565700740115	WITHOUT_CLASSIFICATION	4.342992598852691E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999608609620441	WITHOUT_CLASSIFICATION	3.913903795586527E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999484251935551	WITHOUT_CLASSIFICATION	5.157480644492504E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9859747035125463	WITHOUT_CLASSIFICATION	0.014025296487453688	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999761321416424	WITHOUT_CLASSIFICATION	2.3867858357664027E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999758411519354	WITHOUT_CLASSIFICATION	2.415884806464934E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.999743374110173	WITHOUT_CLASSIFICATION	2.56625889827083E-4	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.999985104472725	WITHOUT_CLASSIFICATION	1.4895527274927945E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9996279419195568	WITHOUT_CLASSIFICATION	3.7205808044305763E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999840545929044	WITHOUT_CLASSIFICATION	1.5945407095605846E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999949330146778	WITHOUT_CLASSIFICATION	5.0669853222513586E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999944612197811	WITHOUT_CLASSIFICATION	5.538780218930068E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.999523916558206	WITHOUT_CLASSIFICATION	4.7608344179398E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9998456571081566	WITHOUT_CLASSIFICATION	1.5434289184334838E-4	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999560089119611	WITHOUT_CLASSIFICATION	4.39910880388385E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.999945413888635	WITHOUT_CLASSIFICATION	5.458611136493748E-5	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999625573175169	WITHOUT_CLASSIFICATION	3.744268248315504E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999620081136474	WITHOUT_CLASSIFICATION	3.799188635264301E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999286615227173	WITHOUT_CLASSIFICATION	7.133847728262454E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.99998778631481	WITHOUT_CLASSIFICATION	1.2213685190024181E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999836563389994	WITHOUT_CLASSIFICATION	1.634366100058748E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999210221586745	WITHOUT_CLASSIFICATION	7.897784132539923E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9995656424607797	WITHOUT_CLASSIFICATION	4.3435753922016934E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999864097726298	WITHOUT_CLASSIFICATION	1.3590227370347307E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9988044450616508	WITHOUT_CLASSIFICATION	0.0011955549383492285	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9901232092302863	WITHOUT_CLASSIFICATION	0.009876790769713607	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998640500940104	WITHOUT_CLASSIFICATION	1.3594990598959341E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999781782602752	WITHOUT_CLASSIFICATION	2.1821739724781175E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999908179167045	WITHOUT_CLASSIFICATION	9.182083295375074E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999553654503021	WITHOUT_CLASSIFICATION	4.463454969792091E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.999523916558206	WITHOUT_CLASSIFICATION	4.7608344179398E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998640500940104	WITHOUT_CLASSIFICATION	1.3594990598959341E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999781782602752	WITHOUT_CLASSIFICATION	2.1821739724781175E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999553654503021	WITHOUT_CLASSIFICATION	4.463454969792091E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999489857177761	WITHOUT_CLASSIFICATION	5.101428222379617E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999926655252792	WITHOUT_CLASSIFICATION	7.3344747207391485E-6	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999774572765503	WITHOUT_CLASSIFICATION	2.2542723449742633E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9998596274273384	WITHOUT_CLASSIFICATION	1.4037257266166225E-4	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999886298216929	WITHOUT_CLASSIFICATION	1.1370178307103182E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9988450468254546	WITHOUT_CLASSIFICATION	0.0011549531745454612	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999972622195024	WITHOUT_CLASSIFICATION	2.7377804975997354E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9997803636939642	WITHOUT_CLASSIFICATION	2.1963630603593154E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999928654620683	WITHOUT_CLASSIFICATION	7.134537931576617E-6	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9905848288383995	WITHOUT_CLASSIFICATION	0.00941517116160047	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9994567728518535	WITHOUT_CLASSIFICATION	5.432271481465948E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9994567728518535	WITHOUT_CLASSIFICATION	5.432271481465948E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999490092272179	WITHOUT_CLASSIFICATION	5.0990772782146364E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999735674069118	WITHOUT_CLASSIFICATION	2.643259308824641E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9998893854717107	WITHOUT_CLASSIFICATION	1.1061452828928574E-4	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999418275665768	WITHOUT_CLASSIFICATION	5.8172433423282844E-5	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997554762338221	WITHOUT_CLASSIFICATION	2.445237661779392E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998745491260316	WITHOUT_CLASSIFICATION	1.2545087396839563E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9430093297493664	WITHOUT_CLASSIFICATION	0.05699067025063367	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9998144158788667	WITHOUT_CLASSIFICATION	1.8558412113338848E-4	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999728399819883	WITHOUT_CLASSIFICATION	2.7160018011644172E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.999969006256592	WITHOUT_CLASSIFICATION	3.0993743407925936E-5	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999667690443336	WITHOUT_CLASSIFICATION	3.323095566635661E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.999745542441016	WITHOUT_CLASSIFICATION	2.544575589840226E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9998597403359322	WITHOUT_CLASSIFICATION	1.402596640678839E-4	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999619124318898	WITHOUT_CLASSIFICATION	3.808756811018035E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9994757503055971	WITHOUT_CLASSIFICATION	5.242496944027718E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999475028961541	WITHOUT_CLASSIFICATION	5.249710384591828E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999092592639386	WITHOUT_CLASSIFICATION	9.074073606140073E-5	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999238529623871	WITHOUT_CLASSIFICATION	7.614703761288121E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9996995667143816	WITHOUT_CLASSIFICATION	3.004332856183675E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999416511377905	WITHOUT_CLASSIFICATION	5.834886220940059E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999449076348609	WITHOUT_CLASSIFICATION	5.5092365139066E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.8608236304194816	WITHOUT_CLASSIFICATION	0.13917636958051827	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9994845657379606	WITHOUT_CLASSIFICATION	5.154342620394568E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999692947498968	WITHOUT_CLASSIFICATION	3.070525010307549E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999040654348029	WITHOUT_CLASSIFICATION	9.593456519705984E-5	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.999975276382754	WITHOUT_CLASSIFICATION	2.4723617246005813E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999753375053266	WITHOUT_CLASSIFICATION	2.4662494673345572E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999508419961382	WITHOUT_CLASSIFICATION	4.915800386187268E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999580769421688	WITHOUT_CLASSIFICATION	4.1923057831295706E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.999657871319703	WITHOUT_CLASSIFICATION	3.421286802971169E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999473477916153	WITHOUT_CLASSIFICATION	5.2652208384657874E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9994112081895858	WITHOUT_CLASSIFICATION	5.887918104141808E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999971719080703	WITHOUT_CLASSIFICATION	2.8280919296971074E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999583729676358	WITHOUT_CLASSIFICATION	4.1627032364177764E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9969772236142844	WITHOUT_CLASSIFICATION	0.0030227763857155654	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999112330366283	WITHOUT_CLASSIFICATION	8.876696337163534E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9998700764104463	WITHOUT_CLASSIFICATION	1.2992358955376493E-4	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999578864826066	WITHOUT_CLASSIFICATION	4.211351739347866E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.8298886284211424	WITHOUT_CLASSIFICATION	0.1701113715788577	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999298848568846	WITHOUT_CLASSIFICATION	7.011514311541563E-5	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9990357494799825	WITHOUT_CLASSIFICATION	9.642505200173805E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9983769890387185	WITHOUT_CLASSIFICATION	0.0016230109612815336	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9998409377122784	WITHOUT_CLASSIFICATION	1.5906228772158366E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999173790491125	WITHOUT_CLASSIFICATION	8.262095088751652E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9993402782662235	WITHOUT_CLASSIFICATION	6.597217337764325E-4	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9883884991604859	WITHOUT_CLASSIFICATION	0.011611500839514233	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.999275226369663	WITHOUT_CLASSIFICATION	7.247736303368836E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9866892986163646	WITHOUT_CLASSIFICATION	0.013310701383635435	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996919390481342	WITHOUT_CLASSIFICATION	3.08060951865763E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999582071052702	WITHOUT_CLASSIFICATION	4.179289472976278E-5	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9996714422920528	WITHOUT_CLASSIFICATION	3.2855770794717055E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9967126859300336	WITHOUT_CLASSIFICATION	0.0032873140699664163	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9967724242913718	WITHOUT_CLASSIFICATION	0.0032275757086280845	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9967724242913718	WITHOUT_CLASSIFICATION	0.0032275757086280845	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996909470056051	WITHOUT_CLASSIFICATION	3.090529943948231E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9995925744206235	WITHOUT_CLASSIFICATION	4.0742557937643213E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996909470056051	WITHOUT_CLASSIFICATION	3.090529943948231E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9997357545296112	WITHOUT_CLASSIFICATION	2.6424547038881815E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9996792554623191	WITHOUT_CLASSIFICATION	3.2074453768090547E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9996885004834369	WITHOUT_CLASSIFICATION	3.114995165630121E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9996764111144302	WITHOUT_CLASSIFICATION	3.235888855699099E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9990550192168002	WITHOUT_CLASSIFICATION	9.449807831997768E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999584244667473	WITHOUT_CLASSIFICATION	4.157553325272664E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999789289128871	WITHOUT_CLASSIFICATION	2.1071087112856562E-5	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997149299458172	WITHOUT_CLASSIFICATION	2.85070054182695E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.999994417193982	WITHOUT_CLASSIFICATION	5.582806018075808E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999463591882963	WITHOUT_CLASSIFICATION	5.364081170360327E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9997699974667369	WITHOUT_CLASSIFICATION	2.300025332631274E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9997911436629368	WITHOUT_CLASSIFICATION	2.0885633706338146E-4	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999661588598209	WITHOUT_CLASSIFICATION	3.384114017916837E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999770516509081	WITHOUT_CLASSIFICATION	2.2948349091819536E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998704008948093	WITHOUT_CLASSIFICATION	1.2959910519079346E-4	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9988537370183505	WITHOUT_CLASSIFICATION	0.001146262981649581	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9990022299766583	WITHOUT_CLASSIFICATION	9.977700233416238E-4	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998558828693362	WITHOUT_CLASSIFICATION	1.4411713066383436E-4	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9998880958572833	WITHOUT_CLASSIFICATION	1.1190414271674458E-4	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.999900078025611	WITHOUT_CLASSIFICATION	9.992197438900406E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9985652317461147	WITHOUT_CLASSIFICATION	0.0014347682538853402	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998312331362362	WITHOUT_CLASSIFICATION	1.687668637636352E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9967095239388976	WITHOUT_CLASSIFICATION	0.0032904760611024934	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9995231102099661	WITHOUT_CLASSIFICATION	4.7688979003385776E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9915047072280412	WITHOUT_CLASSIFICATION	0.008495292771958764	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999418098439118	WITHOUT_CLASSIFICATION	5.819015608819716E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9981342237659225	WITHOUT_CLASSIFICATION	0.0018657762340774447	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9992735602935088	WITHOUT_CLASSIFICATION	7.264397064911767E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9996701366579657	WITHOUT_CLASSIFICATION	3.2986334203425493E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999592363667585	WITHOUT_CLASSIFICATION	4.0763633241573526E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9998569598301961	WITHOUT_CLASSIFICATION	1.4304016980390242E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999592363667585	WITHOUT_CLASSIFICATION	4.0763633241573526E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9998530985187751	WITHOUT_CLASSIFICATION	1.469014812248103E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9988965616548926	WITHOUT_CLASSIFICATION	0.0011034383451073181	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9988965616548926	WITHOUT_CLASSIFICATION	0.0011034383451073181	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9988965616548926	WITHOUT_CLASSIFICATION	0.0011034383451073181	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999866966446718	WITHOUT_CLASSIFICATION	1.3303355328253569E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999866966446718	WITHOUT_CLASSIFICATION	1.3303355328253569E-5	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9979562147637748	WITHOUT_CLASSIFICATION	0.00204378523622515	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999501580331979	WITHOUT_CLASSIFICATION	4.984196680201893E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999792057110705	WITHOUT_CLASSIFICATION	2.079428892953383E-5	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9996361825063382	WITHOUT_CLASSIFICATION	3.6381749366175205E-4	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.999987944796753	WITHOUT_CLASSIFICATION	1.2055203246893432E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999562789204964	WITHOUT_CLASSIFICATION	4.372107950362266E-5	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9995799149051763	WITHOUT_CLASSIFICATION	4.2008509482369816E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997525855464225	WITHOUT_CLASSIFICATION	2.4741445357742714E-4	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999298552595546	WITHOUT_CLASSIFICATION	7.01447404454951E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999725156851835	WITHOUT_CLASSIFICATION	2.7484314816509114E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999734457581018	WITHOUT_CLASSIFICATION	2.6554241898122806E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9994300884124261	WITHOUT_CLASSIFICATION	5.699115875738926E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999279727316016	WITHOUT_CLASSIFICATION	7.202726839843375E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999783344317145	WITHOUT_CLASSIFICATION	2.1665568285502152E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999711286892747	WITHOUT_CLASSIFICATION	2.8871310725227082E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999738672952485	WITHOUT_CLASSIFICATION	2.6132704751507023E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998654447387134	WITHOUT_CLASSIFICATION	1.3455526128651783E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999680290275866	WITHOUT_CLASSIFICATION	3.1970972413427924E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999680290275866	WITHOUT_CLASSIFICATION	3.1970972413427924E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999765611109009	WITHOUT_CLASSIFICATION	2.343888909909387E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999681575069972	WITHOUT_CLASSIFICATION	3.184249300278337E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999681575069972	WITHOUT_CLASSIFICATION	3.184249300278337E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9998610798057653	WITHOUT_CLASSIFICATION	1.3892019423467503E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999782563108034	WITHOUT_CLASSIFICATION	2.1743689196650828E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999854373690031	WITHOUT_CLASSIFICATION	1.4562630996876798E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.999964948631259	WITHOUT_CLASSIFICATION	3.505136874112343E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999886399611757	WITHOUT_CLASSIFICATION	1.1360038824373629E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9992943975498961	WITHOUT_CLASSIFICATION	7.056024501039081E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999655992760113	WITHOUT_CLASSIFICATION	3.440072398878061E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999412819457063	WITHOUT_CLASSIFICATION	5.8718054293696976E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999736564458114	WITHOUT_CLASSIFICATION	2.634355418863708E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.999992471473176	WITHOUT_CLASSIFICATION	7.5285268239273075E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999822379363492	WITHOUT_CLASSIFICATION	1.7762063650751747E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9993422737657891	WITHOUT_CLASSIFICATION	6.577262342108387E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999976414718044	WITHOUT_CLASSIFICATION	2.3585281956258026E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9998409936707495	WITHOUT_CLASSIFICATION	1.5900632925052173E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997525855464225	WITHOUT_CLASSIFICATION	2.4741445357742714E-4	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999744462154069	WITHOUT_CLASSIFICATION	2.5553784593154993E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999956919763161	WITHOUT_CLASSIFICATION	4.3080236839535005E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999956919763161	WITHOUT_CLASSIFICATION	4.3080236839535005E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9991643864700891	WITHOUT_CLASSIFICATION	8.356135299109586E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9990691108495815	WITHOUT_CLASSIFICATION	9.308891504184837E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9998625120787415	WITHOUT_CLASSIFICATION	1.3748792125846848E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999299005006576	WITHOUT_CLASSIFICATION	7.009949934253953E-5	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9997806737720613	WITHOUT_CLASSIFICATION	2.1932622793870079E-4	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9998334755540422	WITHOUT_CLASSIFICATION	1.6652444595771008E-4	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999800436787909	WITHOUT_CLASSIFICATION	1.9956321209111267E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9989012689432267	WITHOUT_CLASSIFICATION	0.0010987310567733076	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9992957180140237	WITHOUT_CLASSIFICATION	7.042819859763252E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9993326985986447	WITHOUT_CLASSIFICATION	6.673014013551991E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9996363392003779	WITHOUT_CLASSIFICATION	3.6366079962211524E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9939917129844346	WITHOUT_CLASSIFICATION	0.006008287015565489	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9994274358179057	WITHOUT_CLASSIFICATION	5.725641820943216E-4	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9998752716802135	WITHOUT_CLASSIFICATION	1.2472831978645844E-4	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999712294573078	WITHOUT_CLASSIFICATION	2.8770542692238E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9996369271329804	WITHOUT_CLASSIFICATION	3.630728670196618E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999729747184538	WITHOUT_CLASSIFICATION	2.7025281546262283E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999766224300951	WITHOUT_CLASSIFICATION	2.3377569904848848E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999864254639812	WITHOUT_CLASSIFICATION	1.3574536018847973E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9997221581580289	WITHOUT_CLASSIFICATION	2.778418419711896E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999466770369201	WITHOUT_CLASSIFICATION	5.332296307997002E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9997880912010434	WITHOUT_CLASSIFICATION	2.1190879895668482E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999532790500264	WITHOUT_CLASSIFICATION	4.672094997345974E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999867288390902	WITHOUT_CLASSIFICATION	1.3271160909691296E-5	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9976472267536999	WITHOUT_CLASSIFICATION	0.0023527732463000488	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9991945783542718	WITHOUT_CLASSIFICATION	8.054216457280671E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999583152550212	WITHOUT_CLASSIFICATION	4.16847449787892E-5	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999728623128343	WITHOUT_CLASSIFICATION	2.7137687165622348E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999728523456085	WITHOUT_CLASSIFICATION	2.7147654391498867E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9985819837246943	WITHOUT_CLASSIFICATION	0.0014180162753056789	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9993933412936282	WITHOUT_CLASSIFICATION	6.066587063717914E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999354548858257	WITHOUT_CLASSIFICATION	6.454511417430731E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9871888269805249	WITHOUT_CLASSIFICATION	0.012811173019475095	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9997018179885073	WITHOUT_CLASSIFICATION	2.98182011492669E-4	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999583152550212	WITHOUT_CLASSIFICATION	4.16847449787892E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9829961078820153	WITHOUT_CLASSIFICATION	0.017003892117984698	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9997018179885073	WITHOUT_CLASSIFICATION	2.98182011492669E-4	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9962649042935404	WITHOUT_CLASSIFICATION	0.0037350957064597053	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999802178018097	WITHOUT_CLASSIFICATION	1.9782198190408585E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9997336970728112	WITHOUT_CLASSIFICATION	2.66302927188803E-4	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9996397939001421	WITHOUT_CLASSIFICATION	3.602060998578792E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999570360809136	WITHOUT_CLASSIFICATION	4.296391908645071E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998864302137449	WITHOUT_CLASSIFICATION	1.1356978625502446E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998864302137449	WITHOUT_CLASSIFICATION	1.1356978625502446E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999724762809359	WITHOUT_CLASSIFICATION	2.7523719064137017E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9997229328530721	WITHOUT_CLASSIFICATION	2.7706714692788683E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999472940023513	WITHOUT_CLASSIFICATION	5.270599764884939E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999472940023513	WITHOUT_CLASSIFICATION	5.270599764884939E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999358849588285	WITHOUT_CLASSIFICATION	6.411504117157944E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9995909924099532	WITHOUT_CLASSIFICATION	4.090075900467027E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999710058330328	WITHOUT_CLASSIFICATION	2.899416696724151E-5	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9955280572661046	WITHOUT_CLASSIFICATION	0.00447194273389542	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999815264961827	WITHOUT_CLASSIFICATION	1.847350381729751E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.999598395725186	WITHOUT_CLASSIFICATION	4.016042748139659E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998090385880252	WITHOUT_CLASSIFICATION	1.909614119747947E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9998919656041223	WITHOUT_CLASSIFICATION	1.0803439587769795E-4	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999773378283676	WITHOUT_CLASSIFICATION	2.266217163229599E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999741499867999	WITHOUT_CLASSIFICATION	2.5850013200187516E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9997257053972909	WITHOUT_CLASSIFICATION	2.7429460270906377E-4	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9998712921930967	WITHOUT_CLASSIFICATION	1.2870780690328273E-4	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9998368351242527	WITHOUT_CLASSIFICATION	1.6316487574735502E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998668871828219	WITHOUT_CLASSIFICATION	1.3311281717805491E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9997084462636016	WITHOUT_CLASSIFICATION	2.915537363984031E-4	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9997009791571375	WITHOUT_CLASSIFICATION	2.990208428624719E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999038468367386	WITHOUT_CLASSIFICATION	9.615316326137671E-5	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999428312605484	WITHOUT_CLASSIFICATION	5.7168739451564046E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9966755996675914	WITHOUT_CLASSIFICATION	0.003324400332408502	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9994854175822553	WITHOUT_CLASSIFICATION	5.145824177447615E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999305769269834	WITHOUT_CLASSIFICATION	6.942307301659455E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999305769269834	WITHOUT_CLASSIFICATION	6.942307301659455E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.999884489847302	WITHOUT_CLASSIFICATION	1.1551015269801105E-4	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999503088338633	WITHOUT_CLASSIFICATION	4.96911661368189E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9994846205209761	WITHOUT_CLASSIFICATION	5.153794790239954E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9997924170833902	WITHOUT_CLASSIFICATION	2.0758291660994514E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9979787666298406	WITHOUT_CLASSIFICATION	0.0020212333701593293	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9994943648849227	WITHOUT_CLASSIFICATION	5.056351150771779E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9996683314448674	WITHOUT_CLASSIFICATION	3.3166855513253437E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9987629245281358	WITHOUT_CLASSIFICATION	0.0012370754718643428	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999994090736352	WITHOUT_CLASSIFICATION	5.90926364963397E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999928217599119	WITHOUT_CLASSIFICATION	7.178240088171189E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.999995345617828	WITHOUT_CLASSIFICATION	4.654382171977899E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9998137414208544	WITHOUT_CLASSIFICATION	1.862585791454819E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.999949435615102	WITHOUT_CLASSIFICATION	5.056438489801431E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999842724306212	WITHOUT_CLASSIFICATION	1.5727569378911438E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999970215373756	WITHOUT_CLASSIFICATION	2.9784626244614774E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9992990244207371	WITHOUT_CLASSIFICATION	7.009755792628803E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9990170899695779	WITHOUT_CLASSIFICATION	9.829100304219961E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9991832339661928	WITHOUT_CLASSIFICATION	8.167660338072887E-4	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9998338244774027	WITHOUT_CLASSIFICATION	1.6617552259727924E-4	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9987985027284478	WITHOUT_CLASSIFICATION	0.0012014972715522747	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9998360496031674	WITHOUT_CLASSIFICATION	1.639503968326921E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999741583580309	WITHOUT_CLASSIFICATION	2.5841641969113027E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999984079369773	WITHOUT_CLASSIFICATION	1.5920630227026748E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9984629741953563	WITHOUT_CLASSIFICATION	0.0015370258046435662	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9908760930970486	WITHOUT_CLASSIFICATION	0.00912390690295134	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999784708706325	WITHOUT_CLASSIFICATION	2.1529129367423624E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999828604588419	WITHOUT_CLASSIFICATION	1.713954115817504E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999835651712058	WITHOUT_CLASSIFICATION	1.6434828794226413E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9996951709611592	WITHOUT_CLASSIFICATION	3.0482903884079484E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999882236088021	WITHOUT_CLASSIFICATION	1.1776391197900832E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999502334708816	WITHOUT_CLASSIFICATION	4.976652911830552E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999927418843841	WITHOUT_CLASSIFICATION	7.258115615877846E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9991810413012825	WITHOUT_CLASSIFICATION	8.189586987174805E-4	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9991847487656393	WITHOUT_CLASSIFICATION	8.152512343607269E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9997397856456175	WITHOUT_CLASSIFICATION	2.602143543825692E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9997889359187834	WITHOUT_CLASSIFICATION	2.1106408121670815E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999016999639119	WITHOUT_CLASSIFICATION	9.830003608821136E-5	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9978244634825992	WITHOUT_CLASSIFICATION	0.002175536517400813	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.977110328257997	WITHOUT_CLASSIFICATION	0.022889671742002935	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999860334469418	WITHOUT_CLASSIFICATION	1.3966553058191545E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9997682782380667	WITHOUT_CLASSIFICATION	2.317217619332963E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9997682782380667	WITHOUT_CLASSIFICATION	2.317217619332963E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999760579182871	WITHOUT_CLASSIFICATION	2.3942081712860418E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9997757117076516	WITHOUT_CLASSIFICATION	2.2428829234834795E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9998479714978243	WITHOUT_CLASSIFICATION	1.5202850217560117E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998955650446885	WITHOUT_CLASSIFICATION	1.0443495531150237E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999685611194749	WITHOUT_CLASSIFICATION	3.143888052505133E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999506176217083	WITHOUT_CLASSIFICATION	4.9382378291794824E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999894589978121	WITHOUT_CLASSIFICATION	1.0541002187892171E-4	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9928909964936333	WITHOUT_CLASSIFICATION	0.007109003506366606	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9965751302157396	WITHOUT_CLASSIFICATION	0.0034248697842604596	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999800832961608	WITHOUT_CLASSIFICATION	1.991670383921472E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999039917844592	WITHOUT_CLASSIFICATION	9.600821554091187E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999781071167976	WITHOUT_CLASSIFICATION	2.1892883202390624E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999788190487454	WITHOUT_CLASSIFICATION	2.1180951254533115E-5	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999924940318001	WITHOUT_CLASSIFICATION	7.505968199895797E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999923038830781	WITHOUT_CLASSIFICATION	7.69611692184286E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999743364837168	WITHOUT_CLASSIFICATION	2.5663516283209094E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999894428597498	WITHOUT_CLASSIFICATION	1.0557140250217113E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999643967239324	WITHOUT_CLASSIFICATION	3.560327606744113E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999502159006795	WITHOUT_CLASSIFICATION	4.9784099320482485E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998321219524724	WITHOUT_CLASSIFICATION	1.67878047527648E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999614510864067	WITHOUT_CLASSIFICATION	3.854891359335558E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999022422346905	WITHOUT_CLASSIFICATION	9.775776530949693E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.999910051285042	WITHOUT_CLASSIFICATION	8.994871495806945E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999951848792734	WITHOUT_CLASSIFICATION	4.815120726509254E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999933198765525	WITHOUT_CLASSIFICATION	6.6801234474861485E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999968498219001	WITHOUT_CLASSIFICATION	3.150178099889186E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999584652163085	WITHOUT_CLASSIFICATION	4.153478369148801E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999450572617028	WITHOUT_CLASSIFICATION	5.494273829731579E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999780982897111	WITHOUT_CLASSIFICATION	2.1901710288900436E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999474121940685	WITHOUT_CLASSIFICATION	5.258780593158229E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999529604781244	WITHOUT_CLASSIFICATION	4.703952187550379E-5	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999661544266586	WITHOUT_CLASSIFICATION	3.384557334150827E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999490582331971	WITHOUT_CLASSIFICATION	5.094176680285035E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9997889359187834	WITHOUT_CLASSIFICATION	2.1106408121670815E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9986169957981392	WITHOUT_CLASSIFICATION	0.0013830042018608479	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999317962307	WITHOUT_CLASSIFICATION	6.820376929990641E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999317962307	WITHOUT_CLASSIFICATION	6.820376929990641E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9998484954048554	WITHOUT_CLASSIFICATION	1.5150459514454268E-4	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999340612749961	WITHOUT_CLASSIFICATION	6.593872500394561E-5	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999377480603054	WITHOUT_CLASSIFICATION	6.225193969450451E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999322688327573	WITHOUT_CLASSIFICATION	6.773116724276043E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999337806962172	WITHOUT_CLASSIFICATION	6.621930378282838E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999778124772971	WITHOUT_CLASSIFICATION	2.2187522702880985E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999685901520776	WITHOUT_CLASSIFICATION	3.140984792247231E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.999855198394423	WITHOUT_CLASSIFICATION	1.4480160557691602E-4	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999514800575742	WITHOUT_CLASSIFICATION	4.851994242595951E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999313133172844	WITHOUT_CLASSIFICATION	6.868668271572508E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9998518926716694	WITHOUT_CLASSIFICATION	1.4810732833062348E-4	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999519081373821	WITHOUT_CLASSIFICATION	4.8091862617860495E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999258903117471	WITHOUT_CLASSIFICATION	7.41096882529484E-5	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9997569425527278	WITHOUT_CLASSIFICATION	2.4305744727215852E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999278849628396	WITHOUT_CLASSIFICATION	7.211503716052606E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9996600063003732	WITHOUT_CLASSIFICATION	3.3999369962689447E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9996675934605579	WITHOUT_CLASSIFICATION	3.324065394421487E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9998886037311242	WITHOUT_CLASSIFICATION	1.1139626887577692E-4	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9998423073106081	WITHOUT_CLASSIFICATION	1.5769268939191865E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9998948353676201	WITHOUT_CLASSIFICATION	1.0516463237991543E-4	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9997040252564618	WITHOUT_CLASSIFICATION	2.9597474353811845E-4	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999644953979043	WITHOUT_CLASSIFICATION	3.550460209571686E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999836296647345	WITHOUT_CLASSIFICATION	1.6370335265432117E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999189660448407	WITHOUT_CLASSIFICATION	8.103395515935083E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999898177683334	WITHOUT_CLASSIFICATION	1.0182231666600184E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999725662599813	WITHOUT_CLASSIFICATION	2.74337400187402E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999466801798946	WITHOUT_CLASSIFICATION	5.331982010526863E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999848561282947	WITHOUT_CLASSIFICATION	1.5143871705377844E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999611671731953	WITHOUT_CLASSIFICATION	3.883282680479249E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999928654620683	WITHOUT_CLASSIFICATION	7.134537931576617E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999928654620683	WITHOUT_CLASSIFICATION	7.134537931576617E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9993630952176344	WITHOUT_CLASSIFICATION	6.369047823655932E-4	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999275439793944	WITHOUT_CLASSIFICATION	7.245602060551636E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999233762300644	WITHOUT_CLASSIFICATION	7.662376993557463E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999668838993367	WITHOUT_CLASSIFICATION	3.311610066334118E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999189660448407	WITHOUT_CLASSIFICATION	8.103395515935083E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999898177683334	WITHOUT_CLASSIFICATION	1.0182231666600184E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999725662599813	WITHOUT_CLASSIFICATION	2.74337400187402E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999848561282947	WITHOUT_CLASSIFICATION	1.5143871705377844E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998852304945526	WITHOUT_CLASSIFICATION	1.147695054474114E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9994677660053364	WITHOUT_CLASSIFICATION	5.32233994663655E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999251903333204	WITHOUT_CLASSIFICATION	7.480966667964349E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999904680856943	WITHOUT_CLASSIFICATION	9.531914305629626E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999868364528549	WITHOUT_CLASSIFICATION	1.316354714516895E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999623440159658	WITHOUT_CLASSIFICATION	3.765598403412084E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999809475941176	WITHOUT_CLASSIFICATION	1.9052405882484374E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999869735494622	WITHOUT_CLASSIFICATION	1.3026450537896162E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9997378437478762	WITHOUT_CLASSIFICATION	2.6215625212386637E-4	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999991687843316	WITHOUT_CLASSIFICATION	8.312156683963312E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.999948990893942	WITHOUT_CLASSIFICATION	5.100910605808494E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999465093897892	WITHOUT_CLASSIFICATION	5.3490610210820415E-5	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999250198415119	WITHOUT_CLASSIFICATION	7.498015848796082E-5	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999268198504919	WITHOUT_CLASSIFICATION	7.318014950800561E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999815847842718	WITHOUT_CLASSIFICATION	1.841521572825755E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999942609459754	WITHOUT_CLASSIFICATION	5.739054024555542E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999062959747017	WITHOUT_CLASSIFICATION	9.370402529825601E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9995603917817909	WITHOUT_CLASSIFICATION	4.3960821820907827E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9991208065300544	WITHOUT_CLASSIFICATION	8.791934699456726E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999668838993367	WITHOUT_CLASSIFICATION	3.311610066334118E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9994677660053364	WITHOUT_CLASSIFICATION	5.32233994663655E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999251903333204	WITHOUT_CLASSIFICATION	7.480966667964349E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999868364528549	WITHOUT_CLASSIFICATION	1.316354714516895E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999623440159658	WITHOUT_CLASSIFICATION	3.765598403412084E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999809475941176	WITHOUT_CLASSIFICATION	1.9052405882484374E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999869735494622	WITHOUT_CLASSIFICATION	1.3026450537896162E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999995367348959	WITHOUT_CLASSIFICATION	4.632651040919634E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9907782097168187	WITHOUT_CLASSIFICATION	0.00922179028318129	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999742775176574	WITHOUT_CLASSIFICATION	2.572248234256153E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999958849606491	WITHOUT_CLASSIFICATION	4.11503935093526E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999157206982386	WITHOUT_CLASSIFICATION	8.427930176138148E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999157206982386	WITHOUT_CLASSIFICATION	8.427930176138148E-5	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999959181454435	WITHOUT_CLASSIFICATION	4.081854556496192E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999781284252632	WITHOUT_CLASSIFICATION	2.1871574736754243E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999688977947592	WITHOUT_CLASSIFICATION	3.1102205240882525E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999503935549074	WITHOUT_CLASSIFICATION	4.9606445092585956E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999944937236713	WITHOUT_CLASSIFICATION	5.506276328661218E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999725853762281	WITHOUT_CLASSIFICATION	2.7414623771901216E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999973089496708	WITHOUT_CLASSIFICATION	2.691050329122935E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999498744262231	WITHOUT_CLASSIFICATION	5.01255737768462E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999322012552226	WITHOUT_CLASSIFICATION	6.779874477732661E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.999875022779335	WITHOUT_CLASSIFICATION	1.2497722066505661E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9995098928263666	WITHOUT_CLASSIFICATION	4.901071736332902E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999640824940346	WITHOUT_CLASSIFICATION	3.591750596543307E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998736156062361	WITHOUT_CLASSIFICATION	1.2638439376390663E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999234597361517	WITHOUT_CLASSIFICATION	7.654026384825112E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999452713320781	WITHOUT_CLASSIFICATION	5.4728667921976864E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999682634451221	WITHOUT_CLASSIFICATION	3.173655487785974E-5	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999527824031998	WITHOUT_CLASSIFICATION	4.7217596800061646E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999827696033415	WITHOUT_CLASSIFICATION	1.7230396658465665E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999720814901312	WITHOUT_CLASSIFICATION	2.791850986885325E-5	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999754589045409	WITHOUT_CLASSIFICATION	2.454109545914438E-5	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9817125686388684	WITHOUT_CLASSIFICATION	0.018287431361131663	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9977729717402616	WITHOUT_CLASSIFICATION	0.002227028259738418	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9981303593426293	WITHOUT_CLASSIFICATION	0.0018696406573707456	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999937914037609	WITHOUT_CLASSIFICATION	6.208596239098831E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999630316467443	WITHOUT_CLASSIFICATION	3.6968353255648104E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999645992709045	WITHOUT_CLASSIFICATION	3.5400729095488187E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999937914037609	WITHOUT_CLASSIFICATION	6.208596239098831E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999234597361517	WITHOUT_CLASSIFICATION	7.654026384825112E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999297233022227	WITHOUT_CLASSIFICATION	7.027669777734172E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.999658254177848	WITHOUT_CLASSIFICATION	3.4174582215198366E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9982838178274854	WITHOUT_CLASSIFICATION	0.0017161821725145232	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9996278839513844	WITHOUT_CLASSIFICATION	3.7211604861567727E-4	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9994154759834531	WITHOUT_CLASSIFICATION	5.84524016546942E-4	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999428883345475	WITHOUT_CLASSIFICATION	5.711166545257667E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999116371197903	WITHOUT_CLASSIFICATION	8.836288020964629E-5	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999763711661908	WITHOUT_CLASSIFICATION	2.362883380918382E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9985188436700745	WITHOUT_CLASSIFICATION	0.0014811563299255604	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9984577984068395	WITHOUT_CLASSIFICATION	0.001542201593160519	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999645369996465	WITHOUT_CLASSIFICATION	3.546300035354177E-5	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999172514329574	WITHOUT_CLASSIFICATION	8.274856704270297E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9997416302509223	WITHOUT_CLASSIFICATION	2.583697490776686E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999991538826121	WITHOUT_CLASSIFICATION	8.461173880051679E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999634385295818	WITHOUT_CLASSIFICATION	3.65614704182648E-5	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9993639482473632	WITHOUT_CLASSIFICATION	6.360517526368285E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999847131703785	WITHOUT_CLASSIFICATION	1.5286829621501938E-5	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9988796294970513	WITHOUT_CLASSIFICATION	0.0011203705029486912	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999996347190926	WITHOUT_CLASSIFICATION	3.652809073435375E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998032106616184	WITHOUT_CLASSIFICATION	1.9678933838157632E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999969255141186	WITHOUT_CLASSIFICATION	3.0744858814428766E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9994436681912672	WITHOUT_CLASSIFICATION	5.563318087327492E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9997037479267774	WITHOUT_CLASSIFICATION	2.962520732225901E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9998244675158401	WITHOUT_CLASSIFICATION	1.7553248415993756E-4	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.999998665171756	WITHOUT_CLASSIFICATION	1.334828244094004E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.999312359916201	WITHOUT_CLASSIFICATION	6.876400837989422E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.989022473933089	WITHOUT_CLASSIFICATION	0.010977526066910973	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9998170256902267	WITHOUT_CLASSIFICATION	1.8297430977326065E-4	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9998432635722988	WITHOUT_CLASSIFICATION	1.5673642770116112E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9998341448169827	WITHOUT_CLASSIFICATION	1.6585518301728583E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998736156062361	WITHOUT_CLASSIFICATION	1.2638439376390663E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999820847634792	WITHOUT_CLASSIFICATION	1.7915236520849093E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.995429435155374	WITHOUT_CLASSIFICATION	0.004570564844625966	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999439364326361	WITHOUT_CLASSIFICATION	5.606356736389593E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99996358364251	WITHOUT_CLASSIFICATION	3.6416357489967294E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99996358364251	WITHOUT_CLASSIFICATION	3.6416357489967294E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999193879845304	WITHOUT_CLASSIFICATION	8.061201546959E-5	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999762014274036	WITHOUT_CLASSIFICATION	2.3798572596314627E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999894766948777	WITHOUT_CLASSIFICATION	1.052330512233329E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999408609914218	WITHOUT_CLASSIFICATION	5.9139008578271256E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999626768498109	WITHOUT_CLASSIFICATION	3.732315018912544E-5	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999925235650081	WITHOUT_CLASSIFICATION	7.4764349919362565E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9992027483119393	WITHOUT_CLASSIFICATION	7.972516880607106E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999774131432931	WITHOUT_CLASSIFICATION	2.258685670685256E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9993086987438287	WITHOUT_CLASSIFICATION	6.91301256171373E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999613022860684	WITHOUT_CLASSIFICATION	3.869771393159608E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997042097081181	WITHOUT_CLASSIFICATION	2.9579029188189223E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999493233079867	WITHOUT_CLASSIFICATION	5.0676692013261026E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.99983614403029	WITHOUT_CLASSIFICATION	1.6385596970990444E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999415361112212	WITHOUT_CLASSIFICATION	5.8463888778905825E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.999960952967961	WITHOUT_CLASSIFICATION	3.9047032039066916E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.999960952967961	WITHOUT_CLASSIFICATION	3.9047032039066916E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998996351169562	WITHOUT_CLASSIFICATION	1.0036488304370324E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998996351169562	WITHOUT_CLASSIFICATION	1.0036488304370324E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999895504901989	WITHOUT_CLASSIFICATION	1.0449509801158978E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9994183244926952	WITHOUT_CLASSIFICATION	5.816755073047772E-4	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9994873295268667	WITHOUT_CLASSIFICATION	5.126704731332561E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999835615703713	WITHOUT_CLASSIFICATION	1.6438429628667126E-5	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999495173574162	WITHOUT_CLASSIFICATION	5.0482642583731304E-5	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9996954940089394	WITHOUT_CLASSIFICATION	3.045059910604961E-4	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999932984667544	WITHOUT_CLASSIFICATION	6.701533245517038E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999493233079867	WITHOUT_CLASSIFICATION	5.0676692013261026E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.99983614403029	WITHOUT_CLASSIFICATION	1.6385596970990444E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999439377966248	WITHOUT_CLASSIFICATION	5.606220337515545E-5	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999741873335175	WITHOUT_CLASSIFICATION	2.5812666482536592E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9994106299742478	WITHOUT_CLASSIFICATION	5.893700257521232E-4	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999961541079986	WITHOUT_CLASSIFICATION	3.845892001399687E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999817517687893	WITHOUT_CLASSIFICATION	1.824823121071306E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9995511372187609	WITHOUT_CLASSIFICATION	4.4886278123905236E-4	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999127158964252	WITHOUT_CLASSIFICATION	8.728410357486536E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999127158964252	WITHOUT_CLASSIFICATION	8.728410357486536E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999645695629117	WITHOUT_CLASSIFICATION	3.543043708834851E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999881784711387	WITHOUT_CLASSIFICATION	1.1821528861314064E-5	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999354664858637	WITHOUT_CLASSIFICATION	6.453351413620856E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9993920315413962	WITHOUT_CLASSIFICATION	6.07968458603863E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.99983614403029	WITHOUT_CLASSIFICATION	1.6385596970990444E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9995215277259868	WITHOUT_CLASSIFICATION	4.784722740131365E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9979135113335754	WITHOUT_CLASSIFICATION	0.0020864886664247076	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999970614080069	WITHOUT_CLASSIFICATION	2.938591993100023E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999454150451385	WITHOUT_CLASSIFICATION	5.458495486156106E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999802697322123	WITHOUT_CLASSIFICATION	1.9730267787687945E-5	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999453778101007	WITHOUT_CLASSIFICATION	5.462218989929405E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999943464295891	WITHOUT_CLASSIFICATION	5.653570410951518E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.999940933984357	WITHOUT_CLASSIFICATION	5.9066015642948776E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999671635456111	WITHOUT_CLASSIFICATION	3.283645438882662E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999788788956846	WITHOUT_CLASSIFICATION	2.1121104315463412E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9998398603661064	WITHOUT_CLASSIFICATION	1.6013963389369988E-4	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9998859907512385	WITHOUT_CLASSIFICATION	1.1400924876148156E-4	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9997864095520224	WITHOUT_CLASSIFICATION	2.1359044797761607E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.999989880311795	WITHOUT_CLASSIFICATION	1.011968820495258E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999521829355129	WITHOUT_CLASSIFICATION	4.781706448703826E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9995240932994409	WITHOUT_CLASSIFICATION	4.759067005591099E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998739695091179	WITHOUT_CLASSIFICATION	1.260304908820795E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9994535275709691	WITHOUT_CLASSIFICATION	5.464724290309495E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999643756368831	WITHOUT_CLASSIFICATION	3.562436311696624E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.999987732245087	WITHOUT_CLASSIFICATION	1.2267754913090479E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999881607995934	WITHOUT_CLASSIFICATION	1.183920040658598E-5	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9990645586198825	WITHOUT_CLASSIFICATION	9.354413801174895E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999543760231705	WITHOUT_CLASSIFICATION	4.5623976829458575E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9997944684237772	WITHOUT_CLASSIFICATION	2.0553157622278968E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999572418928849	WITHOUT_CLASSIFICATION	4.27581071150946E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999614936366364	WITHOUT_CLASSIFICATION	3.850636336343669E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999857088478864	WITHOUT_CLASSIFICATION	1.4291152113619956E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.995429435155374	WITHOUT_CLASSIFICATION	0.004570564844625966	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999543760231705	WITHOUT_CLASSIFICATION	4.5623976829458575E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999396428288261	WITHOUT_CLASSIFICATION	6.035717117400303E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9966797211512376	WITHOUT_CLASSIFICATION	0.003320278848762385	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.999774377299591	WITHOUT_CLASSIFICATION	2.2562270040899263E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995363904309986	WITHOUT_CLASSIFICATION	4.6360956900140423E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9995363904309986	WITHOUT_CLASSIFICATION	4.6360956900140423E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999664621102327	WITHOUT_CLASSIFICATION	3.353788976739342E-5	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9998553078606934	WITHOUT_CLASSIFICATION	1.4469213930650833E-4	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999601162306168	WITHOUT_CLASSIFICATION	3.988376938321181E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999966727115507	WITHOUT_CLASSIFICATION	3.3272884491996904E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999843322617706	WITHOUT_CLASSIFICATION	1.5667738229410983E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.999921282396007	WITHOUT_CLASSIFICATION	7.871760399298995E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9994546088521681	WITHOUT_CLASSIFICATION	5.453911478318643E-4	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9993037193736112	WITHOUT_CLASSIFICATION	6.962806263889337E-4	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999013775942501	WITHOUT_CLASSIFICATION	9.862240574984849E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999013775942501	WITHOUT_CLASSIFICATION	9.862240574984849E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999684641462419	WITHOUT_CLASSIFICATION	3.153585375812407E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9993443817275567	WITHOUT_CLASSIFICATION	6.556182724433252E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999983387238383	WITHOUT_CLASSIFICATION	1.6612761618102183E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999500703831701	WITHOUT_CLASSIFICATION	4.992961682985805E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999665139094022	WITHOUT_CLASSIFICATION	3.348609059789343E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999538577162744	WITHOUT_CLASSIFICATION	4.614228372565443E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999985678072084	WITHOUT_CLASSIFICATION	1.4321927915981855E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9998331586526704	WITHOUT_CLASSIFICATION	1.6684134732963325E-4	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.999981741483006	WITHOUT_CLASSIFICATION	1.825851699408262E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9954379320913611	WITHOUT_CLASSIFICATION	0.004562067908638894	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999653477781322	WITHOUT_CLASSIFICATION	3.465222186781807E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999501428525503	WITHOUT_CLASSIFICATION	4.9857147449545555E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9998770892346835	WITHOUT_CLASSIFICATION	1.2291076531647775E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999642164199485	WITHOUT_CLASSIFICATION	3.5783580051453E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999869735494622	WITHOUT_CLASSIFICATION	1.3026450537896162E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9954379320913611	WITHOUT_CLASSIFICATION	0.004562067908638894	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999777422975988	WITHOUT_CLASSIFICATION	2.225770240118597E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9967730444902623	WITHOUT_CLASSIFICATION	0.0032269555097377577	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999170492533432	WITHOUT_CLASSIFICATION	8.295074665679314E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9998715729376318	WITHOUT_CLASSIFICATION	1.2842706236820483E-4	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999563605238346	WITHOUT_CLASSIFICATION	4.3639476165398954E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999015981393096	WITHOUT_CLASSIFICATION	9.840186069043066E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999716845608877	WITHOUT_CLASSIFICATION	2.8315439112241962E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.995429435155374	WITHOUT_CLASSIFICATION	0.004570564844625966	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999711286892747	WITHOUT_CLASSIFICATION	2.8871310725227082E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.999776727394558	WITHOUT_CLASSIFICATION	2.2327260544192958E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9997227549810948	WITHOUT_CLASSIFICATION	2.772450189051745E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999632508540476	WITHOUT_CLASSIFICATION	3.674914595249508E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999519460021596	WITHOUT_CLASSIFICATION	4.805399784047419E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999895592482483	WITHOUT_CLASSIFICATION	1.0440751751747839E-5	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9996241389398486	WITHOUT_CLASSIFICATION	3.758610601514934E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999809571799696	WITHOUT_CLASSIFICATION	1.9042820030393848E-5	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999904018610823	WITHOUT_CLASSIFICATION	9.598138917701263E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9986634223098183	WITHOUT_CLASSIFICATION	0.0013365776901817041	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999887199064414	WITHOUT_CLASSIFICATION	1.1280093558489098E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9996354017470657	WITHOUT_CLASSIFICATION	3.645982529342834E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9998829164560712	WITHOUT_CLASSIFICATION	1.1708354392886692E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9530858498784359	WITHOUT_CLASSIFICATION	0.04691415012156407	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9996119519174789	WITHOUT_CLASSIFICATION	3.880480825211151E-4	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999194242273041	WITHOUT_CLASSIFICATION	8.057577269590167E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999531838046645	WITHOUT_CLASSIFICATION	4.681619533553259E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999820428683084	WITHOUT_CLASSIFICATION	1.7957131691623265E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9978516185554696	WITHOUT_CLASSIFICATION	0.0021483814445303986	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999544220235418	WITHOUT_CLASSIFICATION	4.557797645811343E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999967882779154	WITHOUT_CLASSIFICATION	3.211722084589529E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999980028432061	WITHOUT_CLASSIFICATION	1.9971567939017395E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999664621102327	WITHOUT_CLASSIFICATION	3.353788976739342E-5	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9974610334321123	WITHOUT_CLASSIFICATION	0.002538966567887613	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9997698535158118	WITHOUT_CLASSIFICATION	2.3014648418819686E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999429875477936	WITHOUT_CLASSIFICATION	5.701245220642494E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9982337050954715	WITHOUT_CLASSIFICATION	0.0017662949045284917	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9991303042022229	WITHOUT_CLASSIFICATION	8.69695797776978E-4	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9989904604024109	WITHOUT_CLASSIFICATION	0.0010095395975891618	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999756962170206	WITHOUT_CLASSIFICATION	2.430378297930534E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9991806720824594	WITHOUT_CLASSIFICATION	8.19327917540563E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999476721902373	WITHOUT_CLASSIFICATION	5.232780976271776E-5	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999846528285162	WITHOUT_CLASSIFICATION	1.5347171483794694E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9998731723423994	WITHOUT_CLASSIFICATION	1.2682765760056418E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998720042115368	WITHOUT_CLASSIFICATION	1.2799578846318314E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999195907196828	WITHOUT_CLASSIFICATION	8.04092803171942E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996262629672021	WITHOUT_CLASSIFICATION	3.7373703279792905E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999891030865494	WITHOUT_CLASSIFICATION	1.0896913450448624E-5	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9938446884827984	WITHOUT_CLASSIFICATION	0.006155311517201704	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9996199174366104	WITHOUT_CLASSIFICATION	3.800825633896532E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.995212090241723	WITHOUT_CLASSIFICATION	0.004787909758276996	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9995882036569639	WITHOUT_CLASSIFICATION	4.1179634303611966E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9996260871483836	WITHOUT_CLASSIFICATION	3.739128516162532E-4	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9952585179672241	WITHOUT_CLASSIFICATION	0.004741482032775992	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9965912899625355	WITHOUT_CLASSIFICATION	0.0034087100374644223	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999922100212721	WITHOUT_CLASSIFICATION	7.789978727849416E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999812002447389	WITHOUT_CLASSIFICATION	1.8799755261161125E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999688491908958	WITHOUT_CLASSIFICATION	3.1150809104244505E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999688491908958	WITHOUT_CLASSIFICATION	3.1150809104244505E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999688491908958	WITHOUT_CLASSIFICATION	3.1150809104244505E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9967790057499484	WITHOUT_CLASSIFICATION	0.0032209942500515242	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999014071223037	WITHOUT_CLASSIFICATION	9.859287769636572E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9998573763040148	WITHOUT_CLASSIFICATION	1.426236959851468E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.999891158488508	WITHOUT_CLASSIFICATION	1.0884151149199395E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9997291590999215	WITHOUT_CLASSIFICATION	2.708409000784312E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999242932280461	WITHOUT_CLASSIFICATION	7.570677195393248E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9998813783353894	WITHOUT_CLASSIFICATION	1.186216646106786E-4	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.999904219973503	WITHOUT_CLASSIFICATION	9.578002649710972E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9988032885654599	WITHOUT_CLASSIFICATION	0.001196711434540183	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9998057165116206	WITHOUT_CLASSIFICATION	1.9428348837926982E-4	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9983879947802367	WITHOUT_CLASSIFICATION	0.0016120052197633448	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.999974794594856	WITHOUT_CLASSIFICATION	2.5205405143929557E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998325649539226	WITHOUT_CLASSIFICATION	1.674350460773547E-4	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998325649539226	WITHOUT_CLASSIFICATION	1.674350460773547E-4	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999268674529964	WITHOUT_CLASSIFICATION	7.313254700359985E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9998727420168962	WITHOUT_CLASSIFICATION	1.2725798310377642E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.999967092614546	WITHOUT_CLASSIFICATION	3.2907385453962E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9996262664243285	WITHOUT_CLASSIFICATION	3.737335756715336E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999900765557165	WITHOUT_CLASSIFICATION	9.923444283494634E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999696200762217	WITHOUT_CLASSIFICATION	3.037992377822264E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999696200762217	WITHOUT_CLASSIFICATION	3.037992377822264E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9997597367789007	WITHOUT_CLASSIFICATION	2.4026322109936516E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998467627425212	WITHOUT_CLASSIFICATION	1.5323725747874896E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9983095669363065	WITHOUT_CLASSIFICATION	0.0016904330636935438	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9996198743235328	WITHOUT_CLASSIFICATION	3.8012567646714796E-4	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9998727474003328	WITHOUT_CLASSIFICATION	1.272525996671376E-4	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.997363706620041	WITHOUT_CLASSIFICATION	0.002636293379958946	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9996807160278495	WITHOUT_CLASSIFICATION	3.1928397215059756E-4	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9993344061901546	WITHOUT_CLASSIFICATION	6.655938098453977E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9907697335486667	WITHOUT_CLASSIFICATION	0.009230266451333362	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999861597481665	WITHOUT_CLASSIFICATION	1.3840251833349255E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998633480584301	WITHOUT_CLASSIFICATION	1.3665194156978493E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9994929369911194	WITHOUT_CLASSIFICATION	5.07063008880624E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999648097102467	WITHOUT_CLASSIFICATION	3.519028975331236E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9998436130362056	WITHOUT_CLASSIFICATION	1.5638696379447812E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999516335405999	WITHOUT_CLASSIFICATION	4.836645940022343E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9991690895760025	WITHOUT_CLASSIFICATION	8.309104239976144E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999684615525465	WITHOUT_CLASSIFICATION	3.1538447453503056E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999320301596699	WITHOUT_CLASSIFICATION	6.796984033003285E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.999958243051953	WITHOUT_CLASSIFICATION	4.1756948046992254E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999958442509609	WITHOUT_CLASSIFICATION	4.1557490391024557E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999635482740686	WITHOUT_CLASSIFICATION	3.645172593138518E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9997924887731714	WITHOUT_CLASSIFICATION	2.0751122682850773E-4	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999451618050296	WITHOUT_CLASSIFICATION	5.483819497038999E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999081902983588	WITHOUT_CLASSIFICATION	9.180970164127821E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9994303250226937	WITHOUT_CLASSIFICATION	5.696749773063028E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.999977917179148	WITHOUT_CLASSIFICATION	2.2082820851964928E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9994544292368706	WITHOUT_CLASSIFICATION	5.455707631295271E-4	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9998756146601524	WITHOUT_CLASSIFICATION	1.243853398475562E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999198846749849	WITHOUT_CLASSIFICATION	8.011532501504186E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9998462386909301	WITHOUT_CLASSIFICATION	1.5376130906992038E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9996269358123586	WITHOUT_CLASSIFICATION	3.7306418764135297E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999274311732604	WITHOUT_CLASSIFICATION	7.256882673953421E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.999824081859608	WITHOUT_CLASSIFICATION	1.759181403919409E-4	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.997548176678912	WITHOUT_CLASSIFICATION	0.0024518233210879463	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999641502330919	WITHOUT_CLASSIFICATION	3.5849766908088936E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999262554818679	WITHOUT_CLASSIFICATION	7.374451813218809E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.999968074905736	WITHOUT_CLASSIFICATION	3.192509426395927E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999522881753938	WITHOUT_CLASSIFICATION	4.7711824606140726E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9998279521483869	WITHOUT_CLASSIFICATION	1.7204785161305903E-4	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9998283047046831	WITHOUT_CLASSIFICATION	1.71695295316976E-4	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999764544549636	WITHOUT_CLASSIFICATION	2.3545545036408434E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9991842776583622	WITHOUT_CLASSIFICATION	8.157223416377884E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999918353530493	WITHOUT_CLASSIFICATION	8.164646950763894E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999918353530493	WITHOUT_CLASSIFICATION	8.164646950763894E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9996897600441037	WITHOUT_CLASSIFICATION	3.1023995589629167E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9996500243067856	WITHOUT_CLASSIFICATION	3.499756932143134E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9948279159152144	WITHOUT_CLASSIFICATION	0.005172084084785637	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9983731725872647	WITHOUT_CLASSIFICATION	0.0016268274127353279	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999564132645441	WITHOUT_CLASSIFICATION	4.358673545595444E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9997192745721041	WITHOUT_CLASSIFICATION	2.807254278959557E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999089342881583	WITHOUT_CLASSIFICATION	9.106571184170972E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.999981394816574	WITHOUT_CLASSIFICATION	1.860518342606618E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999770155061067	WITHOUT_CLASSIFICATION	2.2984493893297356E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.999980049902368	WITHOUT_CLASSIFICATION	1.9950097631987473E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9997633549152137	WITHOUT_CLASSIFICATION	2.3664508478627358E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999832154542291	WITHOUT_CLASSIFICATION	1.6784545770908763E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9998405668631435	WITHOUT_CLASSIFICATION	1.5943313685656905E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9998370810656843	WITHOUT_CLASSIFICATION	1.6291893431579998E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9998622774514945	WITHOUT_CLASSIFICATION	1.3772254850553974E-4	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9992286430848819	WITHOUT_CLASSIFICATION	7.71356915118043E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9997528468637611	WITHOUT_CLASSIFICATION	2.471531362388666E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9976556855737558	WITHOUT_CLASSIFICATION	0.0023443144262442744	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9998370810656843	WITHOUT_CLASSIFICATION	1.6291893431579998E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9957156311135225	WITHOUT_CLASSIFICATION	0.004284368886477607	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9957156311135225	WITHOUT_CLASSIFICATION	0.004284368886477607	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9998135804237424	WITHOUT_CLASSIFICATION	1.8641957625760856E-4	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998287334633928	WITHOUT_CLASSIFICATION	1.7126653660704295E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9988208429492572	WITHOUT_CLASSIFICATION	0.001179157050742825	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999134407374555	WITHOUT_CLASSIFICATION	8.655926254445289E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9998024356731062	WITHOUT_CLASSIFICATION	1.9756432689385151E-4	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.818434557399697	WITHOUT_CLASSIFICATION	0.18156544260030305	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9973971578894034	WITHOUT_CLASSIFICATION	0.002602842110596623	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.999064303751732	WITHOUT_CLASSIFICATION	9.356962482678176E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9998885774069307	WITHOUT_CLASSIFICATION	1.1142259306931639E-4	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9991001791750924	WITHOUT_CLASSIFICATION	8.998208249076824E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.999479817205801	WITHOUT_CLASSIFICATION	5.201827941990193E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9972813724037033	WITHOUT_CLASSIFICATION	0.002718627596296604	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.997872109383279	WITHOUT_CLASSIFICATION	0.002127890616721091	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9998062929833832	WITHOUT_CLASSIFICATION	1.9370701661667827E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999206803735583	WITHOUT_CLASSIFICATION	7.931962644172991E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9983588395832081	WITHOUT_CLASSIFICATION	0.0016411604167918124	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999402291984119	WITHOUT_CLASSIFICATION	5.977080158808859E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999619311048985	WITHOUT_CLASSIFICATION	3.806889510140726E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999789479323797	WITHOUT_CLASSIFICATION	2.105206762024192E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999829321860852	WITHOUT_CLASSIFICATION	1.706781391474938E-5	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999152728385299	WITHOUT_CLASSIFICATION	8.472716147015676E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999489427969039	WITHOUT_CLASSIFICATION	5.105720309600883E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9843128751331335	WITHOUT_CLASSIFICATION	0.015687124866866554	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9970502959603978	WITHOUT_CLASSIFICATION	0.002949704039602144	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9832858517660656	WITHOUT_CLASSIFICATION	0.016714148233934387	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9941016943395659	WITHOUT_CLASSIFICATION	0.005898305660434154	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9972373653070441	WITHOUT_CLASSIFICATION	0.002762634692955789	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9972373653070441	WITHOUT_CLASSIFICATION	0.002762634692955789	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9994879136605687	WITHOUT_CLASSIFICATION	5.120863394313282E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9843636041820205	WITHOUT_CLASSIFICATION	0.015636395817979546	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9972688131928061	WITHOUT_CLASSIFICATION	0.00273118680719396	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9845787519221838	WITHOUT_CLASSIFICATION	0.015421248077816224	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998513403643694	WITHOUT_CLASSIFICATION	1.4865963563055965E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.994435807118619	WITHOUT_CLASSIFICATION	0.005564192881381078	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9972688131928061	WITHOUT_CLASSIFICATION	0.00273118680719396	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9912216455190431	WITHOUT_CLASSIFICATION	0.00877835448095685	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9993427908168944	WITHOUT_CLASSIFICATION	6.572091831055395E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998341530231274	WITHOUT_CLASSIFICATION	1.658469768725979E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999831297729955	WITHOUT_CLASSIFICATION	1.687022700446385E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999619994386055	WITHOUT_CLASSIFICATION	3.8000561394354556E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999619994386055	WITHOUT_CLASSIFICATION	3.8000561394354556E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9064862726759687	WITHOUT_CLASSIFICATION	0.09351372732403132	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9947659658135626	WITHOUT_CLASSIFICATION	0.005234034186437463	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9982159778741636	WITHOUT_CLASSIFICATION	0.0017840221258363577	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9998086439454626	WITHOUT_CLASSIFICATION	1.91356054537339E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9991216184699578	WITHOUT_CLASSIFICATION	8.783815300421408E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9994540842636117	WITHOUT_CLASSIFICATION	5.459157363881933E-4	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9994069878801588	WITHOUT_CLASSIFICATION	5.93012119841246E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.999521092728693	WITHOUT_CLASSIFICATION	4.7890727130696326E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9998804583451408	WITHOUT_CLASSIFICATION	1.1954165485914112E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9996961178277542	WITHOUT_CLASSIFICATION	3.0388217224564E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9991486428776399	WITHOUT_CLASSIFICATION	8.513571223602074E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999124074127791	WITHOUT_CLASSIFICATION	8.759258722089757E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999176207137299	WITHOUT_CLASSIFICATION	8.237928627005403E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9961857313258518	WITHOUT_CLASSIFICATION	0.003814268674148376	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9987250010650681	WITHOUT_CLASSIFICATION	0.0012749989349318876	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999658141718794	WITHOUT_CLASSIFICATION	3.418582812066606E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.999686602965093	WITHOUT_CLASSIFICATION	3.133970349069709E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9899441226562812	WITHOUT_CLASSIFICATION	0.010055877343718865	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9990147431526427	WITHOUT_CLASSIFICATION	9.852568473573148E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9899441226562812	WITHOUT_CLASSIFICATION	0.010055877343718865	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9995871658745172	WITHOUT_CLASSIFICATION	4.128341254827723E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9990147431526427	WITHOUT_CLASSIFICATION	9.852568473573148E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9905665146306316	WITHOUT_CLASSIFICATION	0.009433485369368506	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.999437427398061	WITHOUT_CLASSIFICATION	5.625726019390774E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9983427337877799	WITHOUT_CLASSIFICATION	0.0016572662122201307	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9993141855667803	WITHOUT_CLASSIFICATION	6.858144332197149E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999520564902764	WITHOUT_CLASSIFICATION	4.794350972354427E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999206803735583	WITHOUT_CLASSIFICATION	7.931962644172991E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999402291984119	WITHOUT_CLASSIFICATION	5.977080158808859E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999619311048985	WITHOUT_CLASSIFICATION	3.806889510140726E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999789479323797	WITHOUT_CLASSIFICATION	2.105206762024192E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999829321860852	WITHOUT_CLASSIFICATION	1.706781391474938E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.999913725491033	WITHOUT_CLASSIFICATION	8.627450896694694E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9998105257409813	WITHOUT_CLASSIFICATION	1.894742590187312E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9972373653070441	WITHOUT_CLASSIFICATION	0.002762634692955789	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9972373653070441	WITHOUT_CLASSIFICATION	0.002762634692955789	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9972688131928061	WITHOUT_CLASSIFICATION	0.00273118680719396	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998513403643694	WITHOUT_CLASSIFICATION	1.4865963563055965E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.994435807118619	WITHOUT_CLASSIFICATION	0.005564192881381078	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9972688131928061	WITHOUT_CLASSIFICATION	0.00273118680719396	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9912216455190431	WITHOUT_CLASSIFICATION	0.00877835448095685	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9998871998232098	WITHOUT_CLASSIFICATION	1.1280017679011218E-4	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9994028383405378	WITHOUT_CLASSIFICATION	5.971616594622892E-4	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9937354400941755	WITHOUT_CLASSIFICATION	0.006264559905824496	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9990353827590157	WITHOUT_CLASSIFICATION	9.64617240984234E-4	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998192567735017	WITHOUT_CLASSIFICATION	1.8074322649821184E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9912184481177967	WITHOUT_CLASSIFICATION	0.00878155188220334	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998341530231274	WITHOUT_CLASSIFICATION	1.658469768725979E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999619994386055	WITHOUT_CLASSIFICATION	3.8000561394354556E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999619994386055	WITHOUT_CLASSIFICATION	3.8000561394354556E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9458093725390789	WITHOUT_CLASSIFICATION	0.05419062746092109	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9985727788142461	WITHOUT_CLASSIFICATION	0.0014272211857538498	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9997966717807647	WITHOUT_CLASSIFICATION	2.0332821923527437E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9988157501286674	WITHOUT_CLASSIFICATION	0.0011842498713326146	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9989276156264687	WITHOUT_CLASSIFICATION	0.0010723843735313489	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.990331601107266	WITHOUT_CLASSIFICATION	0.009668398892733845	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999144635620449	WITHOUT_CLASSIFICATION	8.55364379551053E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999615677977328	WITHOUT_CLASSIFICATION	3.843220226720668E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999890721060394	WITHOUT_CLASSIFICATION	1.0927893960551383E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9970702748836147	WITHOUT_CLASSIFICATION	0.0029297251163852866	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9978317333886205	WITHOUT_CLASSIFICATION	0.0021682666113794504	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9998517388568331	WITHOUT_CLASSIFICATION	1.4826114316693822E-4	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.999942374153237	WITHOUT_CLASSIFICATION	5.7625846763092286E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999415323767076	WITHOUT_CLASSIFICATION	5.84676232923714E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999415323767076	WITHOUT_CLASSIFICATION	5.84676232923714E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999689582781799	WITHOUT_CLASSIFICATION	3.1041721820085355E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999085272231714	WITHOUT_CLASSIFICATION	9.147277682861249E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.999831862005722	WITHOUT_CLASSIFICATION	1.681379942780517E-4	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9998233137392942	WITHOUT_CLASSIFICATION	1.7668626070582074E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999322162751214	WITHOUT_CLASSIFICATION	6.778372487853698E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999877301428484	WITHOUT_CLASSIFICATION	1.2269857151544811E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999322162751214	WITHOUT_CLASSIFICATION	6.778372487853698E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9990840916076277	WITHOUT_CLASSIFICATION	9.159083923722958E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.997828849472426	WITHOUT_CLASSIFICATION	0.0021711505275740567	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9999130511022303	WITHOUT_CLASSIFICATION	8.694889776980101E-5	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9994934020798393	WITHOUT_CLASSIFICATION	5.065979201606731E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9994934020798393	WITHOUT_CLASSIFICATION	5.065979201606731E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9998104545240326	WITHOUT_CLASSIFICATION	1.8954547596738546E-4	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9998596935333146	WITHOUT_CLASSIFICATION	1.403064666854615E-4	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9998622855493736	WITHOUT_CLASSIFICATION	1.377144506263692E-4	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.8709817104785843	DEFECT	0.1290182895214157	WITHOUT_CLASSIFICATION
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9997664270661095	WITHOUT_CLASSIFICATION	2.3357293389044637E-4	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9994764240109439	WITHOUT_CLASSIFICATION	5.235759890560109E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9994764240109439	WITHOUT_CLASSIFICATION	5.235759890560109E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9950621724928526	WITHOUT_CLASSIFICATION	0.004937827507147445	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999750514095631	WITHOUT_CLASSIFICATION	2.4948590436949308E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999750514095631	WITHOUT_CLASSIFICATION	2.4948590436949308E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.999816816726011	WITHOUT_CLASSIFICATION	1.8318327398901823E-4	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9998614654037017	WITHOUT_CLASSIFICATION	1.3853459629828652E-4	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999224396908586	WITHOUT_CLASSIFICATION	7.756030914140827E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9991468044955111	WITHOUT_CLASSIFICATION	8.531955044888545E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999127012892071	WITHOUT_CLASSIFICATION	8.729871079290995E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999322162751214	WITHOUT_CLASSIFICATION	6.778372487853698E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999358542862399	WITHOUT_CLASSIFICATION	6.414571376006814E-5	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999976743738561	WITHOUT_CLASSIFICATION	2.3256261440026747E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9979647484549539	WITHOUT_CLASSIFICATION	0.002035251545046046	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999358542862399	WITHOUT_CLASSIFICATION	6.414571376006814E-5	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999944019646806	WITHOUT_CLASSIFICATION	5.598035319373843E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999439312376988	WITHOUT_CLASSIFICATION	5.606876230122715E-5	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999144237690378	WITHOUT_CLASSIFICATION	8.557623096217103E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9994486896346332	WITHOUT_CLASSIFICATION	5.51310365366716E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9843886755896412	WITHOUT_CLASSIFICATION	0.015611324410358755	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9997068833964176	WITHOUT_CLASSIFICATION	2.9311660358243675E-4	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999779921827852	WITHOUT_CLASSIFICATION	2.2007817214774338E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999923733680236	WITHOUT_CLASSIFICATION	7.626631976410132E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.997471024949594	WITHOUT_CLASSIFICATION	0.002528975050405901	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998949102656102	WITHOUT_CLASSIFICATION	1.0508973438982326E-4	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9835248755289427	WITHOUT_CLASSIFICATION	0.016475124471057336	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999267536039947	WITHOUT_CLASSIFICATION	7.324639600526662E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999139595006253	WITHOUT_CLASSIFICATION	8.604049937470817E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9997411982489921	WITHOUT_CLASSIFICATION	2.5880175100791153E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999574552775105	WITHOUT_CLASSIFICATION	4.254472248955592E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999973776360749	WITHOUT_CLASSIFICATION	2.622363925086859E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999706395323001	WITHOUT_CLASSIFICATION	2.9360467699775234E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9954298324193989	WITHOUT_CLASSIFICATION	0.004570167580601143	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.99998409152016	WITHOUT_CLASSIFICATION	1.590847983993643E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9997236258283705	WITHOUT_CLASSIFICATION	2.7637417162943014E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998904495564827	WITHOUT_CLASSIFICATION	1.0955044351736142E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9998983205680152	WITHOUT_CLASSIFICATION	1.0167943198474736E-4	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9998969680014229	WITHOUT_CLASSIFICATION	1.0303199857709127E-4	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9990848148539687	WITHOUT_CLASSIFICATION	9.151851460312258E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9971149291891397	WITHOUT_CLASSIFICATION	0.002885070810860297	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.999946323755977	WITHOUT_CLASSIFICATION	5.36762440230533E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999171872938163	WITHOUT_CLASSIFICATION	8.281270618371223E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999449904570636	WITHOUT_CLASSIFICATION	5.500954293624704E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9998949791518253	WITHOUT_CLASSIFICATION	1.0502084817461745E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9998666232171473	WITHOUT_CLASSIFICATION	1.3337678285263438E-4	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998536211375936	WITHOUT_CLASSIFICATION	1.4637886240636904E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999478353904265	WITHOUT_CLASSIFICATION	5.2164609573440746E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999818419573084	WITHOUT_CLASSIFICATION	1.8158042691505443E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999919090472864	WITHOUT_CLASSIFICATION	8.090952713655815E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9998952711331291	WITHOUT_CLASSIFICATION	1.04728866870825E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9988197471792812	WITHOUT_CLASSIFICATION	0.0011802528207187997	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998589438171148	WITHOUT_CLASSIFICATION	1.4105618288524482E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9998731723423994	WITHOUT_CLASSIFICATION	1.2682765760056418E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998720042115368	WITHOUT_CLASSIFICATION	1.2799578846318314E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9992981195560177	WITHOUT_CLASSIFICATION	7.018804439823666E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9978464012580603	WITHOUT_CLASSIFICATION	0.002153598741939691	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9986049425152361	WITHOUT_CLASSIFICATION	0.0013950574847638967	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999255189617602	WITHOUT_CLASSIFICATION	7.44810382398659E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999255189617602	WITHOUT_CLASSIFICATION	7.44810382398659E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9998981913857324	WITHOUT_CLASSIFICATION	1.0180861426760545E-4	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9998981913857324	WITHOUT_CLASSIFICATION	1.0180861426760545E-4	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9998981913857324	WITHOUT_CLASSIFICATION	1.0180861426760545E-4	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999976890281945	WITHOUT_CLASSIFICATION	2.3109718054979387E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999976890281945	WITHOUT_CLASSIFICATION	2.3109718054979387E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999280517407458	WITHOUT_CLASSIFICATION	7.19482592540762E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999280517407458	WITHOUT_CLASSIFICATION	7.19482592540762E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9936770762723374	WITHOUT_CLASSIFICATION	0.006322923727662565	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9897541551570219	WITHOUT_CLASSIFICATION	0.010245844842978044	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999652237137949	WITHOUT_CLASSIFICATION	3.477628620507086E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999652237137949	WITHOUT_CLASSIFICATION	3.477628620507086E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9987280454678492	WITHOUT_CLASSIFICATION	0.0012719545321508352	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999279875962108	WITHOUT_CLASSIFICATION	7.20124037891252E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9982432388355437	WITHOUT_CLASSIFICATION	0.0017567611644564165	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9998397934677526	WITHOUT_CLASSIFICATION	1.60206532247304E-4	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9986334595849606	WITHOUT_CLASSIFICATION	0.001366540415039315	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9998918769526142	WITHOUT_CLASSIFICATION	1.0812304738575027E-4	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999762839278068	WITHOUT_CLASSIFICATION	2.3716072193178195E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999457890986582	WITHOUT_CLASSIFICATION	5.421090134178254E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9996860191853119	WITHOUT_CLASSIFICATION	3.13980814688155E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999918353530493	WITHOUT_CLASSIFICATION	8.164646950763894E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999761845302202	WITHOUT_CLASSIFICATION	2.3815469779735066E-5	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999569371710951	WITHOUT_CLASSIFICATION	4.306282890481662E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9984025280170997	WITHOUT_CLASSIFICATION	0.0015974719829003705	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9997687090229316	WITHOUT_CLASSIFICATION	2.312909770683933E-4	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.999947973637636	WITHOUT_CLASSIFICATION	5.202636236413969E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999844768082523	WITHOUT_CLASSIFICATION	1.5523191747679302E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9996155092293146	WITHOUT_CLASSIFICATION	3.844907706852925E-4	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9994416930399568	WITHOUT_CLASSIFICATION	5.583069600431607E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999910864712466	WITHOUT_CLASSIFICATION	8.91352875335813E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998844761132161	WITHOUT_CLASSIFICATION	1.155238867838921E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998844761132161	WITHOUT_CLASSIFICATION	1.155238867838921E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998844761132161	WITHOUT_CLASSIFICATION	1.155238867838921E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998217673109746	WITHOUT_CLASSIFICATION	1.782326890253445E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998217673109746	WITHOUT_CLASSIFICATION	1.782326890253445E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998217673109746	WITHOUT_CLASSIFICATION	1.782326890253445E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998217673109746	WITHOUT_CLASSIFICATION	1.782326890253445E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998217673109746	WITHOUT_CLASSIFICATION	1.782326890253445E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9998324074500162	WITHOUT_CLASSIFICATION	1.6759254998390384E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999347180536536	WITHOUT_CLASSIFICATION	6.528194634635099E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999448242435005	WITHOUT_CLASSIFICATION	5.5175756499525E-5	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999424040296055	WITHOUT_CLASSIFICATION	5.759597039443592E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9995984735362814	WITHOUT_CLASSIFICATION	4.01526463718658E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999541202896153	WITHOUT_CLASSIFICATION	4.587971038480887E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9988418923943309	WITHOUT_CLASSIFICATION	0.0011581076056691275	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9996637972091197	WITHOUT_CLASSIFICATION	3.36202790880308E-4	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999916480382265	WITHOUT_CLASSIFICATION	8.351961773387102E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999898469450531	WITHOUT_CLASSIFICATION	1.015305494688244E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999449084485191	WITHOUT_CLASSIFICATION	5.509155148078836E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9998608485638923	WITHOUT_CLASSIFICATION	1.3915143610754277E-4	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9991559180003945	WITHOUT_CLASSIFICATION	8.440819996054393E-4	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999693898632304	WITHOUT_CLASSIFICATION	3.061013676960574E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9996550651435547	WITHOUT_CLASSIFICATION	3.449348564452928E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999837767573098	WITHOUT_CLASSIFICATION	1.6223242690287297E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998076554318303	WITHOUT_CLASSIFICATION	1.9234456816965501E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999449634389536	WITHOUT_CLASSIFICATION	5.503656104653056E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999877301428484	WITHOUT_CLASSIFICATION	1.2269857151544811E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9993568318141341	WITHOUT_CLASSIFICATION	6.4316818586589E-4	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9853300549515571	WITHOUT_CLASSIFICATION	0.014669945048442842	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999898678133462	WITHOUT_CLASSIFICATION	1.0132186653839016E-5	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999918717460995	WITHOUT_CLASSIFICATION	8.128253900419626E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998966522966302	WITHOUT_CLASSIFICATION	1.0334770336985929E-4	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999164979703716	WITHOUT_CLASSIFICATION	8.350202962841797E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.999604773329509	WITHOUT_CLASSIFICATION	3.9522667049089283E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999669365170343	WITHOUT_CLASSIFICATION	3.30634829657864E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9998349511137444	WITHOUT_CLASSIFICATION	1.6504888625567407E-4	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9996756964373973	WITHOUT_CLASSIFICATION	3.243035626026497E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999524799268513	WITHOUT_CLASSIFICATION	4.752007314866877E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9998715275137792	WITHOUT_CLASSIFICATION	1.284724862208168E-4	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999586905527048	WITHOUT_CLASSIFICATION	4.1309447295134214E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9997131241783799	WITHOUT_CLASSIFICATION	2.868758216200616E-4	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9996869361787616	WITHOUT_CLASSIFICATION	3.130638212384759E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999975273678505	WITHOUT_CLASSIFICATION	2.472632149534369E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999459294378427	WITHOUT_CLASSIFICATION	5.407056215722726E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997888583305509	WITHOUT_CLASSIFICATION	2.1114166944908943E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9996542083408411	WITHOUT_CLASSIFICATION	3.457916591589481E-4	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999946949625563	WITHOUT_CLASSIFICATION	5.3050374436361976E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9971759087047194	WITHOUT_CLASSIFICATION	0.0028240912952806696	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9971759087047194	WITHOUT_CLASSIFICATION	0.0028240912952806696	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9996807705398633	WITHOUT_CLASSIFICATION	3.1922946013673674E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9996807705398633	WITHOUT_CLASSIFICATION	3.1922946013673674E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999312409828161	WITHOUT_CLASSIFICATION	6.875901718389972E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999312409828161	WITHOUT_CLASSIFICATION	6.875901718389972E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9998995905395953	WITHOUT_CLASSIFICATION	1.0040946040468196E-4	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999659700501561	WITHOUT_CLASSIFICATION	3.402994984383891E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999346245513626	WITHOUT_CLASSIFICATION	6.537544863731986E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9997028558237538	WITHOUT_CLASSIFICATION	2.9714417624608294E-4	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9998507837236625	WITHOUT_CLASSIFICATION	1.4921627633749738E-4	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9952339346438906	WITHOUT_CLASSIFICATION	0.004766065356109283	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999463526088181	WITHOUT_CLASSIFICATION	5.364739118192309E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999505273614839	WITHOUT_CLASSIFICATION	4.947263851610372E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.999884102428339	WITHOUT_CLASSIFICATION	1.1589757166092905E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.999496386705644	WITHOUT_CLASSIFICATION	5.03613294355946E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9986992331026746	WITHOUT_CLASSIFICATION	0.0013007668973254725	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9995457924327351	WITHOUT_CLASSIFICATION	4.5420756726490344E-4	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.991661647980648	WITHOUT_CLASSIFICATION	0.00833835201935197	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999256648131989	WITHOUT_CLASSIFICATION	7.433518680107435E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9988905580614917	WITHOUT_CLASSIFICATION	0.0011094419385082662	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998974110370792	WITHOUT_CLASSIFICATION	1.0258896292071654E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9995042832118874	WITHOUT_CLASSIFICATION	4.957167881126528E-4	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.999766981345643	WITHOUT_CLASSIFICATION	2.330186543569996E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9994098239563484	WITHOUT_CLASSIFICATION	5.901760436515803E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9971676656236498	WITHOUT_CLASSIFICATION	0.0028323343763503404	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.999896428929389	WITHOUT_CLASSIFICATION	1.0357107061097117E-4	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999585279883247	WITHOUT_CLASSIFICATION	4.14720116752307E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999584057665253	WITHOUT_CLASSIFICATION	4.159423347465858E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9961724078083523	WITHOUT_CLASSIFICATION	0.0038275921916476707	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9961724078083523	WITHOUT_CLASSIFICATION	0.0038275921916476707	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998949102656102	WITHOUT_CLASSIFICATION	1.0508973438982326E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998949102656102	WITHOUT_CLASSIFICATION	1.0508973438982326E-4	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999931681161343	WITHOUT_CLASSIFICATION	6.831883865741024E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9999342577164249	WITHOUT_CLASSIFICATION	6.57422835751128E-5	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999463526088181	WITHOUT_CLASSIFICATION	5.364739118192309E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999475072618816	WITHOUT_CLASSIFICATION	5.249273811836234E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996323029155035	WITHOUT_CLASSIFICATION	3.6769708449637425E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9961724078083523	WITHOUT_CLASSIFICATION	0.0038275921916476707	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9961724078083523	WITHOUT_CLASSIFICATION	0.0038275921916476707	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9961724078083523	WITHOUT_CLASSIFICATION	0.0038275921916476707	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998949102656102	WITHOUT_CLASSIFICATION	1.0508973438982326E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998949102656102	WITHOUT_CLASSIFICATION	1.0508973438982326E-4	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9996101876794223	WITHOUT_CLASSIFICATION	3.898123205777071E-4	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999320159098122	WITHOUT_CLASSIFICATION	6.79840901877521E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999793949096782	WITHOUT_CLASSIFICATION	2.0605090321731363E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9954243224905592	WITHOUT_CLASSIFICATION	0.004575677509440717	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9998779655177777	WITHOUT_CLASSIFICATION	1.2203448222227741E-4	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999843681664502	WITHOUT_CLASSIFICATION	1.5631833549822627E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.999904021075733	WITHOUT_CLASSIFICATION	9.597892426714564E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9998288267443939	WITHOUT_CLASSIFICATION	1.7117325560624146E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.999956960700199	WITHOUT_CLASSIFICATION	4.3039299801031716E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999849092812232	WITHOUT_CLASSIFICATION	1.509071877672672E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.999882037382343	WITHOUT_CLASSIFICATION	1.1796261765707164E-4	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9994937595883978	WITHOUT_CLASSIFICATION	5.062404116021958E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9998988574444804	WITHOUT_CLASSIFICATION	1.0114255551970614E-4	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9979365063339819	WITHOUT_CLASSIFICATION	0.0020634936660180758	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9996972504121359	WITHOUT_CLASSIFICATION	3.027495878640705E-4	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9754656949824934	WITHOUT_CLASSIFICATION	0.024534305017506586	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999775170899395	WITHOUT_CLASSIFICATION	2.2482910060459655E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999775170899395	WITHOUT_CLASSIFICATION	2.2482910060459655E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999775170899395	WITHOUT_CLASSIFICATION	2.2482910060459655E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9967420862965696	WITHOUT_CLASSIFICATION	0.0032579137034303004	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9967420862965696	WITHOUT_CLASSIFICATION	0.0032579137034303004	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999881781037061	WITHOUT_CLASSIFICATION	1.182189629385676E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9996954149135575	WITHOUT_CLASSIFICATION	3.04585086442438E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9998201920717371	WITHOUT_CLASSIFICATION	1.7980792826290514E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9998201920717371	WITHOUT_CLASSIFICATION	1.7980792826290514E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999457928047063	WITHOUT_CLASSIFICATION	5.420719529378727E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998247300255925	WITHOUT_CLASSIFICATION	1.7526997440758083E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9998760141939373	WITHOUT_CLASSIFICATION	1.2398580606267411E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998760141939373	WITHOUT_CLASSIFICATION	1.2398580606267411E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999626231125616	WITHOUT_CLASSIFICATION	3.73768874384144E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999449634389536	WITHOUT_CLASSIFICATION	5.503656104653056E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999791796769704	WITHOUT_CLASSIFICATION	2.0820323029605337E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999791796769704	WITHOUT_CLASSIFICATION	2.0820323029605337E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999475072618816	WITHOUT_CLASSIFICATION	5.249273811836234E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999776981743617	WITHOUT_CLASSIFICATION	2.2301825638310042E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998447975605219	WITHOUT_CLASSIFICATION	1.5520243947812428E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9992230082075876	WITHOUT_CLASSIFICATION	7.769917924124135E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.999843200902086	WITHOUT_CLASSIFICATION	1.5679909791394594E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9995828949125751	WITHOUT_CLASSIFICATION	4.1710508742481795E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999752101582002	WITHOUT_CLASSIFICATION	2.4789841799706757E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999803203426054	WITHOUT_CLASSIFICATION	1.967965739458213E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999831154057249	WITHOUT_CLASSIFICATION	1.6884594275055374E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999767110634192	WITHOUT_CLASSIFICATION	2.3288936580829945E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999879924923626	WITHOUT_CLASSIFICATION	1.2007507637469468E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9995611750429612	WITHOUT_CLASSIFICATION	4.388249570388538E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9924750145134654	WITHOUT_CLASSIFICATION	0.007524985486534669	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9995996543899439	WITHOUT_CLASSIFICATION	4.0034561005607676E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9994330975607929	WITHOUT_CLASSIFICATION	5.669024392071082E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9995858770520398	WITHOUT_CLASSIFICATION	4.141229479601803E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9995145817179004	WITHOUT_CLASSIFICATION	4.854182820995202E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9994289511632268	WITHOUT_CLASSIFICATION	5.710488367732248E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9998086769216821	WITHOUT_CLASSIFICATION	1.913230783178488E-4	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.999890963484524	WITHOUT_CLASSIFICATION	1.0903651547598743E-4	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9995389362730867	WITHOUT_CLASSIFICATION	4.6106372691329003E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9246324342085418	WITHOUT_CLASSIFICATION	0.07536756579145824	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9992946709648323	WITHOUT_CLASSIFICATION	7.053290351677408E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9850816132431076	WITHOUT_CLASSIFICATION	0.014918386756892327	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9998204429625043	WITHOUT_CLASSIFICATION	1.7955703749561824E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9998537879903348	WITHOUT_CLASSIFICATION	1.4621200966516098E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.999957458135281	WITHOUT_CLASSIFICATION	4.254186471904511E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9961751456395391	WITHOUT_CLASSIFICATION	0.003824854360460948	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9963550916424869	WITHOUT_CLASSIFICATION	0.003644908357513159	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9963550916424869	WITHOUT_CLASSIFICATION	0.003644908357513159	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9998912096285781	WITHOUT_CLASSIFICATION	1.0879037142191421E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999420466857787	WITHOUT_CLASSIFICATION	5.7953314221330425E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9961751456395391	WITHOUT_CLASSIFICATION	0.003824854360460948	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999062742161599	WITHOUT_CLASSIFICATION	9.372578384008294E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9992597565455743	WITHOUT_CLASSIFICATION	7.402434544257888E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.999844286520626	WITHOUT_CLASSIFICATION	1.5571347937400388E-4	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999891338628065	WITHOUT_CLASSIFICATION	1.0866137193534466E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999239711965038	WITHOUT_CLASSIFICATION	7.602880349625239E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999954031655944	WITHOUT_CLASSIFICATION	4.596834405492037E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.999738080428316	WITHOUT_CLASSIFICATION	2.619195716839842E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998674799226147	WITHOUT_CLASSIFICATION	1.325200773853154E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998674799226147	WITHOUT_CLASSIFICATION	1.325200773853154E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998674799226147	WITHOUT_CLASSIFICATION	1.325200773853154E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998674799226147	WITHOUT_CLASSIFICATION	1.325200773853154E-4	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999888013997921	WITHOUT_CLASSIFICATION	1.1198600207837223E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999929930976121	WITHOUT_CLASSIFICATION	7.006902387840251E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.999993091595331	WITHOUT_CLASSIFICATION	6.908404668954236E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9996840289689362	WITHOUT_CLASSIFICATION	3.159710310637639E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999347965757303	WITHOUT_CLASSIFICATION	6.52034242698069E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9970828177255769	WITHOUT_CLASSIFICATION	0.0029171822744230914	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9996822572642934	WITHOUT_CLASSIFICATION	3.177427357066682E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.999964793112258	WITHOUT_CLASSIFICATION	3.5206887742007E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.999964793112258	WITHOUT_CLASSIFICATION	3.5206887742007E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9998412347931607	WITHOUT_CLASSIFICATION	1.587652068392147E-4	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999460801130934	WITHOUT_CLASSIFICATION	5.391988690664598E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999850672128684	WITHOUT_CLASSIFICATION	1.4932787131592276E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9986969715805719	WITHOUT_CLASSIFICATION	0.0013030284194281122	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9986969715805719	WITHOUT_CLASSIFICATION	0.0013030284194281122	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9995463497080241	WITHOUT_CLASSIFICATION	4.5365029197579277E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9998753576152511	WITHOUT_CLASSIFICATION	1.2464238474886718E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9998753576152511	WITHOUT_CLASSIFICATION	1.2464238474886718E-4	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9944500398196783	WITHOUT_CLASSIFICATION	0.005549960180321736	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999896489906815	WITHOUT_CLASSIFICATION	1.0351009318431978E-5	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999496457450765	WITHOUT_CLASSIFICATION	5.035425492338088E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9996339066119653	WITHOUT_CLASSIFICATION	3.6609338803478503E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9997362844049608	WITHOUT_CLASSIFICATION	2.63715595039181E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999383275890624	WITHOUT_CLASSIFICATION	6.16724109375711E-5	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9978055957835441	WITHOUT_CLASSIFICATION	0.002194404216455775	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.999964906898369	WITHOUT_CLASSIFICATION	3.509310163101869E-5	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999163449209356	WITHOUT_CLASSIFICATION	8.365507906437573E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9998736955412885	WITHOUT_CLASSIFICATION	1.2630445871152413E-4	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9955085830033504	WITHOUT_CLASSIFICATION	0.0044914169966495075	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.990364550988246	WITHOUT_CLASSIFICATION	0.009635449011753923	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999460669216613	WITHOUT_CLASSIFICATION	5.3933078338718704E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9931673282342982	WITHOUT_CLASSIFICATION	0.006832671765701734	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999596410063892	WITHOUT_CLASSIFICATION	4.0358993610879306E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9998640526051186	WITHOUT_CLASSIFICATION	1.359473948813344E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9997040340927672	WITHOUT_CLASSIFICATION	2.9596590723279196E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9996297044751016	WITHOUT_CLASSIFICATION	3.702955248984329E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9993647894209517	WITHOUT_CLASSIFICATION	6.352105790481877E-4	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9965614850385777	WITHOUT_CLASSIFICATION	0.00343851496142233	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9988968534990131	WITHOUT_CLASSIFICATION	0.0011031465009869582	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9951020890342611	WITHOUT_CLASSIFICATION	0.004897910965738931	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999922858066272	WITHOUT_CLASSIFICATION	7.714193372693063E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999335605619711	WITHOUT_CLASSIFICATION	6.643943802890238E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9991076442563871	WITHOUT_CLASSIFICATION	8.923557436129077E-4	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999167157981742	WITHOUT_CLASSIFICATION	8.328420182584653E-5	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.998825072706737	WITHOUT_CLASSIFICATION	0.001174927293262926	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9997132248247548	WITHOUT_CLASSIFICATION	2.86775175245156E-4	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.8605160070533392	WITHOUT_CLASSIFICATION	0.1394839929466609	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9991445988332963	WITHOUT_CLASSIFICATION	8.554011667036765E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9997655989919427	WITHOUT_CLASSIFICATION	2.344010080572889E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999241731630355	WITHOUT_CLASSIFICATION	7.582683696450191E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999958975855048	WITHOUT_CLASSIFICATION	4.102414495195868E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9990545699060224	WITHOUT_CLASSIFICATION	9.454300939776397E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999241731630355	WITHOUT_CLASSIFICATION	7.582683696450191E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999958975855048	WITHOUT_CLASSIFICATION	4.102414495195868E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9997171711601898	WITHOUT_CLASSIFICATION	2.828288398103213E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999195787509126	WITHOUT_CLASSIFICATION	8.042124908743013E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999195787509126	WITHOUT_CLASSIFICATION	8.042124908743013E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9997404699662336	WITHOUT_CLASSIFICATION	2.5953003376642597E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9986544469958145	WITHOUT_CLASSIFICATION	0.00134555300418549	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999714710067192	WITHOUT_CLASSIFICATION	2.8528993280768008E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999834054637803	WITHOUT_CLASSIFICATION	1.659453621972707E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9958000992719609	WITHOUT_CLASSIFICATION	0.0041999007280391866	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9997357216490789	WITHOUT_CLASSIFICATION	2.6427835092118475E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999261115413546	WITHOUT_CLASSIFICATION	7.388845864543903E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9997486072743144	WITHOUT_CLASSIFICATION	2.513927256856861E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999966330787283	WITHOUT_CLASSIFICATION	3.366921271613242E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9996849208902618	WITHOUT_CLASSIFICATION	3.150791097381784E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9992693176527662	WITHOUT_CLASSIFICATION	7.306823472337976E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9998092651148869	WITHOUT_CLASSIFICATION	1.9073488511311685E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9997772304266991	WITHOUT_CLASSIFICATION	2.2276957330083012E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999399325800311	WITHOUT_CLASSIFICATION	6.006741996885616E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999399325800311	WITHOUT_CLASSIFICATION	6.006741996885616E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999515705557267	WITHOUT_CLASSIFICATION	4.842944427330025E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999515705557267	WITHOUT_CLASSIFICATION	4.842944427330025E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9998791531274892	WITHOUT_CLASSIFICATION	1.2084687251078514E-4	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998750733416926	WITHOUT_CLASSIFICATION	1.2492665830749934E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999543095086282	WITHOUT_CLASSIFICATION	4.5690491371819445E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999714710067192	WITHOUT_CLASSIFICATION	2.8528993280768008E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999834054637803	WITHOUT_CLASSIFICATION	1.659453621972707E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999966330787283	WITHOUT_CLASSIFICATION	3.366921271613242E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9996849208902618	WITHOUT_CLASSIFICATION	3.150791097381784E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999059751840841	WITHOUT_CLASSIFICATION	9.40248159159202E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9997854685297729	WITHOUT_CLASSIFICATION	2.1453147022701286E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999791796769704	WITHOUT_CLASSIFICATION	2.0820323029605337E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998604509384864	WITHOUT_CLASSIFICATION	1.395490615136054E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999421940825107	WITHOUT_CLASSIFICATION	5.7805917489195186E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999330874475131	WITHOUT_CLASSIFICATION	6.691255248692436E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999765855152366	WITHOUT_CLASSIFICATION	2.3414484763315196E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999009913295892	WITHOUT_CLASSIFICATION	9.900867041077247E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999662128086986	WITHOUT_CLASSIFICATION	3.3787191301479154E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9896213473685888	WITHOUT_CLASSIFICATION	0.010378652631411146	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9998198496868069	WITHOUT_CLASSIFICATION	1.8015031319302706E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999953332189652	WITHOUT_CLASSIFICATION	4.66678103475161E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999074107481403	WITHOUT_CLASSIFICATION	9.258925185974816E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999397610390917	WITHOUT_CLASSIFICATION	6.0238960908374105E-5	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999736904033791	WITHOUT_CLASSIFICATION	2.6309596620968936E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998927885076461	WITHOUT_CLASSIFICATION	1.0721149235400881E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9996316463677537	WITHOUT_CLASSIFICATION	3.6835363224635843E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998498026663593	WITHOUT_CLASSIFICATION	1.5019733364081257E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9978660989706213	WITHOUT_CLASSIFICATION	0.002133901029378751	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9998927643372294	WITHOUT_CLASSIFICATION	1.0723566277051508E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9992147459624092	WITHOUT_CLASSIFICATION	7.852540375907476E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9992147459624092	WITHOUT_CLASSIFICATION	7.852540375907476E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9990274230648358	WITHOUT_CLASSIFICATION	9.725769351641917E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999847838440109	WITHOUT_CLASSIFICATION	1.5216155989024597E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999842621572194	WITHOUT_CLASSIFICATION	1.57378427805935E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9985903871631474	WITHOUT_CLASSIFICATION	0.0014096128368526301	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.999556362479371	WITHOUT_CLASSIFICATION	4.436375206290603E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9990147080303404	WITHOUT_CLASSIFICATION	9.85291969659504E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998069025549086	WITHOUT_CLASSIFICATION	1.9309744509136756E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9998516054840099	WITHOUT_CLASSIFICATION	1.4839451599023195E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999368319748587	WITHOUT_CLASSIFICATION	6.316802514131529E-5	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9994602754218492	WITHOUT_CLASSIFICATION	5.397245781507537E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9997221459935967	WITHOUT_CLASSIFICATION	2.7785400640334586E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9998722185360347	WITHOUT_CLASSIFICATION	1.2778146396524807E-4	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.998628401768438	WITHOUT_CLASSIFICATION	0.0013715982315619364	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999528206026355	WITHOUT_CLASSIFICATION	4.7179397364576705E-5	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999335368653043	WITHOUT_CLASSIFICATION	6.646313469567942E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.996194537427931	WITHOUT_CLASSIFICATION	0.0038054625720691363	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9997851083607289	WITHOUT_CLASSIFICATION	2.148916392710067E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999089012706232	WITHOUT_CLASSIFICATION	9.109872937685209E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998106294752178	WITHOUT_CLASSIFICATION	1.893705247822413E-4	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999974307974852	WITHOUT_CLASSIFICATION	2.5692025148026782E-5	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999574148347167	WITHOUT_CLASSIFICATION	4.258516528320432E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9993894376917264	WITHOUT_CLASSIFICATION	6.105623082736467E-4	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9996981707971813	WITHOUT_CLASSIFICATION	3.018292028187164E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999599918086393	WITHOUT_CLASSIFICATION	4.000819136069114E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999747166647828	WITHOUT_CLASSIFICATION	2.5283335217156315E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999747166647828	WITHOUT_CLASSIFICATION	2.5283335217156315E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9996335922296747	WITHOUT_CLASSIFICATION	3.6640777032534254E-4	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9996335922296747	WITHOUT_CLASSIFICATION	3.6640777032534254E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9998083742093233	WITHOUT_CLASSIFICATION	1.9162579067664098E-4	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9998822866139083	WITHOUT_CLASSIFICATION	1.1771338609169205E-4	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999820838405842	WITHOUT_CLASSIFICATION	1.7916159415784873E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9994951977941992	WITHOUT_CLASSIFICATION	5.048022058008113E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999089012706232	WITHOUT_CLASSIFICATION	9.109872937685209E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999089012706232	WITHOUT_CLASSIFICATION	9.109872937685209E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999089012706232	WITHOUT_CLASSIFICATION	9.109872937685209E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998106294752178	WITHOUT_CLASSIFICATION	1.893705247822413E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999820838405842	WITHOUT_CLASSIFICATION	1.7916159415784873E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999820838405842	WITHOUT_CLASSIFICATION	1.7916159415784873E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9998696732339942	WITHOUT_CLASSIFICATION	1.3032676600572012E-4	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999262228101117	WITHOUT_CLASSIFICATION	7.377718988833037E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9998287866394158	WITHOUT_CLASSIFICATION	1.7121336058430387E-4	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.6462893595914371	WITHOUT_CLASSIFICATION	0.3537106404085629	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999865126191867	WITHOUT_CLASSIFICATION	1.3487380813272666E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999273824195553	WITHOUT_CLASSIFICATION	7.261758044471483E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999273824195553	WITHOUT_CLASSIFICATION	7.261758044471483E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.999576319679664	WITHOUT_CLASSIFICATION	4.2368032033594474E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9994923352179521	WITHOUT_CLASSIFICATION	5.076647820478975E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9994923352179521	WITHOUT_CLASSIFICATION	5.076647820478975E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9994923352179521	WITHOUT_CLASSIFICATION	5.076647820478975E-4	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999407336364007	WITHOUT_CLASSIFICATION	5.9266363599313965E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9998470578625682	WITHOUT_CLASSIFICATION	1.5294213743174802E-4	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998106294752178	WITHOUT_CLASSIFICATION	1.893705247822413E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999445564552851	WITHOUT_CLASSIFICATION	5.544354471491369E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9994923352179521	WITHOUT_CLASSIFICATION	5.076647820478975E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.999576319679664	WITHOUT_CLASSIFICATION	4.2368032033594474E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9998910573001534	WITHOUT_CLASSIFICATION	1.0894269984661542E-4	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.999967687045682	WITHOUT_CLASSIFICATION	3.2312954318014984E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999380338328309	WITHOUT_CLASSIFICATION	6.196616716913205E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9998812936697186	WITHOUT_CLASSIFICATION	1.1870633028145273E-4	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999407809021837	WITHOUT_CLASSIFICATION	5.9219097816138907E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9989577690554934	WITHOUT_CLASSIFICATION	0.0010422309445065987	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999744322309131	WITHOUT_CLASSIFICATION	2.5567769086846157E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9990689404658643	WITHOUT_CLASSIFICATION	9.31059534135812E-4	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9998835865692203	WITHOUT_CLASSIFICATION	1.1641343077970307E-4	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9985521956866825	WITHOUT_CLASSIFICATION	0.001447804313317385	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9998532220406803	WITHOUT_CLASSIFICATION	1.4677795931971498E-4	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.999992026259524	WITHOUT_CLASSIFICATION	7.973740475919011E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9997641431788888	WITHOUT_CLASSIFICATION	2.3585682111112248E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999473138646088	WITHOUT_CLASSIFICATION	5.268613539122307E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999868610576865	WITHOUT_CLASSIFICATION	1.3138942313516977E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999431156582446	WITHOUT_CLASSIFICATION	5.688434175552963E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9996561069631417	WITHOUT_CLASSIFICATION	3.4389303685830786E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9996469990776914	WITHOUT_CLASSIFICATION	3.530009223086988E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9998746957889667	WITHOUT_CLASSIFICATION	1.2530421103329627E-4	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999768161036098	WITHOUT_CLASSIFICATION	2.3183896390312158E-5	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.999882069442245	WITHOUT_CLASSIFICATION	1.1793055775499038E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9995651685765558	WITHOUT_CLASSIFICATION	4.348314234442538E-4	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999662480435975	WITHOUT_CLASSIFICATION	3.3751956402528926E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9996810538368758	WITHOUT_CLASSIFICATION	3.1894616312427854E-4	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998021082997668	WITHOUT_CLASSIFICATION	1.9789170023309696E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9997975506919862	WITHOUT_CLASSIFICATION	2.0244930801390046E-4	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999934683347439	WITHOUT_CLASSIFICATION	6.53166525612931E-6	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999172018587579	WITHOUT_CLASSIFICATION	8.279814124214613E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9996747497546645	WITHOUT_CLASSIFICATION	3.252502453353748E-4	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9998355131174724	WITHOUT_CLASSIFICATION	1.644868825276303E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9998910573001534	WITHOUT_CLASSIFICATION	1.0894269984661542E-4	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999512886984145	WITHOUT_CLASSIFICATION	4.871130158540108E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9993952539602107	WITHOUT_CLASSIFICATION	6.04746039789289E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9996770509644033	WITHOUT_CLASSIFICATION	3.229490355967001E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999896105304922	WITHOUT_CLASSIFICATION	1.0389469507772804E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999896105304922	WITHOUT_CLASSIFICATION	1.0389469507772804E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999591575642374	WITHOUT_CLASSIFICATION	4.0842435762591436E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999302555768408	WITHOUT_CLASSIFICATION	6.974442315919749E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9998140308193654	WITHOUT_CLASSIFICATION	1.8596918063469464E-4	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9995826041839692	WITHOUT_CLASSIFICATION	4.1739581603088066E-4	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.999985699882473	WITHOUT_CLASSIFICATION	1.4300117526974506E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9997683857796926	WITHOUT_CLASSIFICATION	2.3161422030727456E-4	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9964366093471437	WITHOUT_CLASSIFICATION	0.0035633906528562877	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9997653945259127	WITHOUT_CLASSIFICATION	2.3460547408729195E-4	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9987874371625631	WITHOUT_CLASSIFICATION	0.001212562837436827	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9978988155058207	WITHOUT_CLASSIFICATION	0.0021011844941792187	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9996483972558313	WITHOUT_CLASSIFICATION	3.516027441686553E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999058145679961	WITHOUT_CLASSIFICATION	9.418543200390856E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999058145679961	WITHOUT_CLASSIFICATION	9.418543200390856E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9984167682676965	WITHOUT_CLASSIFICATION	0.0015832317323034716	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999633421706821	WITHOUT_CLASSIFICATION	3.665782931794058E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999246605339406	WITHOUT_CLASSIFICATION	7.533946605942443E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999246605339406	WITHOUT_CLASSIFICATION	7.533946605942443E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9998326291283932	WITHOUT_CLASSIFICATION	1.6737087160672773E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9996430275834017	WITHOUT_CLASSIFICATION	3.5697241659824553E-4	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999619775983825	WITHOUT_CLASSIFICATION	3.802240161744831E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.999714741419115	WITHOUT_CLASSIFICATION	2.8525858088498403E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9998981110869035	WITHOUT_CLASSIFICATION	1.0188891309657E-4	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9992573381931307	WITHOUT_CLASSIFICATION	7.426618068693879E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999848992730503	WITHOUT_CLASSIFICATION	1.5100726949619022E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999083023830106	WITHOUT_CLASSIFICATION	9.169761698933774E-5	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9999477943044629	WITHOUT_CLASSIFICATION	5.220569553705568E-5	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999916531610461	WITHOUT_CLASSIFICATION	8.346838953927734E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999168265276693	WITHOUT_CLASSIFICATION	8.317347233065805E-5	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999474789455542	WITHOUT_CLASSIFICATION	5.252105444571359E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999281536888769	WITHOUT_CLASSIFICATION	7.184631112316825E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.999686176978825	WITHOUT_CLASSIFICATION	3.1382302117501256E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999539314528596	WITHOUT_CLASSIFICATION	4.606854714041359E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.983262679768668	WITHOUT_CLASSIFICATION	0.016737320231332068	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9996273074439781	WITHOUT_CLASSIFICATION	3.7269255602194505E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9995027879545761	WITHOUT_CLASSIFICATION	4.972120454238275E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9997916762759385	WITHOUT_CLASSIFICATION	2.0832372406146793E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9998636219358379	WITHOUT_CLASSIFICATION	1.3637806416219418E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8411717235146098	WITHOUT_CLASSIFICATION	0.15882827648539022	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.999910219098264	WITHOUT_CLASSIFICATION	8.978090173588175E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999317062974933	WITHOUT_CLASSIFICATION	6.829370250670597E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999689952835942	WITHOUT_CLASSIFICATION	3.100471640578886E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999910403249372	WITHOUT_CLASSIFICATION	8.959675062802265E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999717345352866	WITHOUT_CLASSIFICATION	2.8265464713365985E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999645218775619	WITHOUT_CLASSIFICATION	3.5478122438120116E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999458409015417	WITHOUT_CLASSIFICATION	5.415909845824048E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999244579062527	WITHOUT_CLASSIFICATION	7.554209374729449E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.99973478055954	WITHOUT_CLASSIFICATION	2.6521944045997434E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999826414705782	WITHOUT_CLASSIFICATION	1.7358529421800247E-4	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9996629346534195	WITHOUT_CLASSIFICATION	3.3706534658052686E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998626642310854	WITHOUT_CLASSIFICATION	1.3733576891455807E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998626642310854	WITHOUT_CLASSIFICATION	1.3733576891455807E-4	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999766126192784	WITHOUT_CLASSIFICATION	2.3387380721527728E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9997172203372928	WITHOUT_CLASSIFICATION	2.8277966270723017E-4	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.99951906499966	WITHOUT_CLASSIFICATION	4.809350003399492E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9996841076459655	WITHOUT_CLASSIFICATION	3.1589235403454145E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9996845266899088	WITHOUT_CLASSIFICATION	3.1547331009116356E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999898892701554	WITHOUT_CLASSIFICATION	1.0110729844585089E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.989929502787661	WITHOUT_CLASSIFICATION	0.01007049721233909	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.989929502787661	WITHOUT_CLASSIFICATION	0.01007049721233909	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999714531615516	WITHOUT_CLASSIFICATION	2.854683844838945E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9997442055196597	WITHOUT_CLASSIFICATION	2.557944803403519E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9912210801180988	WITHOUT_CLASSIFICATION	0.00877891988190117	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.8659566738998716	WITHOUT_CLASSIFICATION	0.13404332610012848	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999263380974686	WITHOUT_CLASSIFICATION	7.36619025315179E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9994880500182812	WITHOUT_CLASSIFICATION	5.119499817188488E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999915799101124	WITHOUT_CLASSIFICATION	8.420089887557303E-6	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.999971567025341	WITHOUT_CLASSIFICATION	2.8432974659061312E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.999816046695489	WITHOUT_CLASSIFICATION	1.8395330451093987E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9998155533243543	WITHOUT_CLASSIFICATION	1.8444667564570283E-4	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.999869326167533	WITHOUT_CLASSIFICATION	1.3067383246699954E-4	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9998041150451106	WITHOUT_CLASSIFICATION	1.9588495488948086E-4	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999425467785333	WITHOUT_CLASSIFICATION	5.7453221466638316E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999007442350677	WITHOUT_CLASSIFICATION	9.925576493230037E-5	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9991174384794874	WITHOUT_CLASSIFICATION	8.825615205125264E-4	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997189086247252	WITHOUT_CLASSIFICATION	2.8109137527470673E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9933385817742721	WITHOUT_CLASSIFICATION	0.0066614182257278285	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999902090298678	WITHOUT_CLASSIFICATION	9.79097013208057E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.999678279106062	WITHOUT_CLASSIFICATION	3.217208939380183E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9996683314448674	WITHOUT_CLASSIFICATION	3.3166855513253437E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9986052780306951	WITHOUT_CLASSIFICATION	0.0013947219693048632	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.999415007544302	WITHOUT_CLASSIFICATION	5.849924556979731E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999298575273871	WITHOUT_CLASSIFICATION	7.014247261290204E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.999986281979646	WITHOUT_CLASSIFICATION	1.3718020354094E-5	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999414506523786	WITHOUT_CLASSIFICATION	5.854934762142338E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999025572286505	WITHOUT_CLASSIFICATION	9.744277134952373E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999133149648382	WITHOUT_CLASSIFICATION	8.66850351618176E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999503048250078	WITHOUT_CLASSIFICATION	4.969517499210984E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999792897624327	WITHOUT_CLASSIFICATION	2.071023756733976E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9998555958991289	WITHOUT_CLASSIFICATION	1.444041008711036E-4	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999765445877499	WITHOUT_CLASSIFICATION	2.345541225014804E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9998295779111661	WITHOUT_CLASSIFICATION	1.7042208883390973E-4	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9996500703030187	WITHOUT_CLASSIFICATION	3.499296969813454E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999662958055686	WITHOUT_CLASSIFICATION	3.370419443134447E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.998920356318479	WITHOUT_CLASSIFICATION	0.001079643681521019	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999863834461901	WITHOUT_CLASSIFICATION	1.3616553809977146E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.99998999417469	WITHOUT_CLASSIFICATION	1.0005825309922886E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9957046338017906	WITHOUT_CLASSIFICATION	0.004295366198209377	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9979205448830589	WITHOUT_CLASSIFICATION	0.0020794551169410957	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9995982302556139	WITHOUT_CLASSIFICATION	4.0176974438605004E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9998544406914287	WITHOUT_CLASSIFICATION	1.4555930857137317E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9994064659591726	WITHOUT_CLASSIFICATION	5.935340408273854E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9966797211512376	WITHOUT_CLASSIFICATION	0.003320278848762385	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998356363401656	WITHOUT_CLASSIFICATION	1.6436365983444335E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9997665048924219	WITHOUT_CLASSIFICATION	2.3349510757808423E-4	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9404388015364991	WITHOUT_CLASSIFICATION	0.05956119846350101	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998896259955233	WITHOUT_CLASSIFICATION	1.1037400447675558E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997593595304769	WITHOUT_CLASSIFICATION	2.4064046952308962E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999277148887411	WITHOUT_CLASSIFICATION	7.228511125887733E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9998622858492943	WITHOUT_CLASSIFICATION	1.3771415070570545E-4	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9993086987438287	WITHOUT_CLASSIFICATION	6.91301256171373E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999978428549909	WITHOUT_CLASSIFICATION	2.1571450090927857E-5	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9998978031285917	WITHOUT_CLASSIFICATION	1.0219687140825366E-4	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999623157450059	WITHOUT_CLASSIFICATION	3.768425499403418E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9996843174611959	WITHOUT_CLASSIFICATION	3.156825388040828E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999450873736297	WITHOUT_CLASSIFICATION	5.491262637025378E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9996843174611959	WITHOUT_CLASSIFICATION	3.156825388040828E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9998554177032448	WITHOUT_CLASSIFICATION	1.4458229675508446E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999450873736297	WITHOUT_CLASSIFICATION	5.491262637025378E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.999793935675496	WITHOUT_CLASSIFICATION	2.0606432450397057E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9988968534990131	WITHOUT_CLASSIFICATION	0.0011031465009869582	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9986383911372443	WITHOUT_CLASSIFICATION	0.0013616088627557068	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9171433402683734	WITHOUT_CLASSIFICATION	0.0828566597316266	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999589088552089	WITHOUT_CLASSIFICATION	4.109114479111701E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9932173312980798	WITHOUT_CLASSIFICATION	0.00678266870192018	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998302727885717	WITHOUT_CLASSIFICATION	1.6972721142825465E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9993841523510127	WITHOUT_CLASSIFICATION	6.158476489872023E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9986544469958145	WITHOUT_CLASSIFICATION	0.00134555300418549	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9998636219358379	WITHOUT_CLASSIFICATION	1.3637806416219418E-4	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9998287866394158	WITHOUT_CLASSIFICATION	1.7121336058430387E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9338065092543574	WITHOUT_CLASSIFICATION	0.0661934907456427	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999613849591495	WITHOUT_CLASSIFICATION	3.8615040850343286E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999787592584363	WITHOUT_CLASSIFICATION	2.124074156371408E-5	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999500721344009	WITHOUT_CLASSIFICATION	4.992786559895322E-5	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9990712300521624	WITHOUT_CLASSIFICATION	9.287699478375752E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9997477700546732	WITHOUT_CLASSIFICATION	2.522299453268056E-4	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9950588802317478	WITHOUT_CLASSIFICATION	0.004941119768252185	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9982173555461756	WITHOUT_CLASSIFICATION	0.001782644453824311	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.999976376524615	WITHOUT_CLASSIFICATION	2.3623475385019406E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999949772766772	WITHOUT_CLASSIFICATION	5.02272332277547E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999895305771264	WITHOUT_CLASSIFICATION	1.0469422873592084E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9985461584450837	WITHOUT_CLASSIFICATION	0.0014538415549163078	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999784245735773	WITHOUT_CLASSIFICATION	2.1575426422707636E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9963676048777075	WITHOUT_CLASSIFICATION	0.0036323951222925355	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999961309278343	WITHOUT_CLASSIFICATION	3.869072165586453E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998260313495522	WITHOUT_CLASSIFICATION	1.73968650447761E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998260313495522	WITHOUT_CLASSIFICATION	1.73968650447761E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998197524901629	WITHOUT_CLASSIFICATION	1.8024750983725967E-4	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999559470720473	WITHOUT_CLASSIFICATION	4.4052927952651254E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9997229328530721	WITHOUT_CLASSIFICATION	2.7706714692788683E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.999428348558488	WITHOUT_CLASSIFICATION	5.716514415120027E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9997755358583101	WITHOUT_CLASSIFICATION	2.2446414168977695E-4	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999774674944754	WITHOUT_CLASSIFICATION	2.2532505524673717E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.99506848383415	WITHOUT_CLASSIFICATION	0.004931516165850032	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999072810938112	WITHOUT_CLASSIFICATION	9.271890618879928E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9992963559165666	WITHOUT_CLASSIFICATION	7.03644083433255E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9992963559165666	WITHOUT_CLASSIFICATION	7.03644083433255E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999279778179805	WITHOUT_CLASSIFICATION	7.202218201944961E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999516489289608	WITHOUT_CLASSIFICATION	4.8351071039109963E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9976104789664245	WITHOUT_CLASSIFICATION	0.002389521033575512	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9998922754700545	WITHOUT_CLASSIFICATION	1.0772452994551045E-4	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9997755651006366	WITHOUT_CLASSIFICATION	2.244348993634584E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999243114460322	WITHOUT_CLASSIFICATION	7.568855396780853E-5	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.999529094243174	WITHOUT_CLASSIFICATION	4.709057568259925E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9998554177032448	WITHOUT_CLASSIFICATION	1.4458229675508446E-4	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999447001473372	WITHOUT_CLASSIFICATION	5.5299852662776885E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9997915412035341	WITHOUT_CLASSIFICATION	2.0845879646603946E-4	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.999938542216097	WITHOUT_CLASSIFICATION	6.145778390297564E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999819317583615	WITHOUT_CLASSIFICATION	1.8068241638560473E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998394617374916	WITHOUT_CLASSIFICATION	1.6053826250838233E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998394617374916	WITHOUT_CLASSIFICATION	1.6053826250838233E-4	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999516489289608	WITHOUT_CLASSIFICATION	4.8351071039109916E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999157407862911	WITHOUT_CLASSIFICATION	8.425921370885041E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9997040204803508	WITHOUT_CLASSIFICATION	2.959795196492052E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999380973304648	WITHOUT_CLASSIFICATION	6.19026695351559E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9998499257593281	WITHOUT_CLASSIFICATION	1.500742406719359E-4	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.996696136507745	WITHOUT_CLASSIFICATION	0.0033038634922549666	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999175672123839	WITHOUT_CLASSIFICATION	8.243278761611027E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999938606923175	WITHOUT_CLASSIFICATION	6.139307682494612E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9930663313160664	WITHOUT_CLASSIFICATION	0.006933668683933582	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9998668871828219	WITHOUT_CLASSIFICATION	1.3311281717805491E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9998471656810494	WITHOUT_CLASSIFICATION	1.528343189506165E-4	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999681649503984	WITHOUT_CLASSIFICATION	3.183504960164782E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9994278468077004	WITHOUT_CLASSIFICATION	5.721531922995934E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999785683656738	WITHOUT_CLASSIFICATION	2.1431634326211395E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9994643773386493	WITHOUT_CLASSIFICATION	5.356226613506672E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9993788046476267	WITHOUT_CLASSIFICATION	6.2119535237325E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999905062408149	WITHOUT_CLASSIFICATION	9.493759185040448E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999592363667585	WITHOUT_CLASSIFICATION	4.0763633241573526E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999592363667585	WITHOUT_CLASSIFICATION	4.0763633241573526E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9982163469581407	WITHOUT_CLASSIFICATION	0.001783653041859345	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999951527285856	WITHOUT_CLASSIFICATION	4.8472714143827335E-6	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.999950503394819	WITHOUT_CLASSIFICATION	4.9496605180931445E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999940830339318	WITHOUT_CLASSIFICATION	5.916966068134577E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9921108244813068	WITHOUT_CLASSIFICATION	0.007889175518693156	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9921108244813068	WITHOUT_CLASSIFICATION	0.007889175518693156	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9995950256812601	WITHOUT_CLASSIFICATION	4.049743187398632E-4	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999799896092342	WITHOUT_CLASSIFICATION	2.001039076583422E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.8506290971184854	WITHOUT_CLASSIFICATION	0.14937090288151456	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9994846205209761	WITHOUT_CLASSIFICATION	5.153794790239954E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9998518926716694	WITHOUT_CLASSIFICATION	1.4810732833062348E-4	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9991230116214033	WITHOUT_CLASSIFICATION	8.76988378596866E-4	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999922413519102	WITHOUT_CLASSIFICATION	7.758648089870728E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9983588395832081	WITHOUT_CLASSIFICATION	0.0016411604167918124	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999670831903785	WITHOUT_CLASSIFICATION	3.2916809621374094E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9994925211584974	WITHOUT_CLASSIFICATION	5.074788415026983E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9997967906744252	WITHOUT_CLASSIFICATION	2.0320932557482072E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993938145868194	WITHOUT_CLASSIFICATION	6.061854131805439E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9998480680866584	WITHOUT_CLASSIFICATION	1.519319133416048E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999994090736352	WITHOUT_CLASSIFICATION	5.90926364963397E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9997919186622742	WITHOUT_CLASSIFICATION	2.0808133772583532E-4	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999533061259124	WITHOUT_CLASSIFICATION	4.669387408770329E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9998865077022999	WITHOUT_CLASSIFICATION	1.1349229770007916E-4	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9996875815309274	WITHOUT_CLASSIFICATION	3.124184690725773E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999267198097722	WITHOUT_CLASSIFICATION	7.328019022768811E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999908179167045	WITHOUT_CLASSIFICATION	9.182083295375074E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998852304945526	WITHOUT_CLASSIFICATION	1.147695054474114E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999438463752848	WITHOUT_CLASSIFICATION	5.615362471515127E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9994873295268667	WITHOUT_CLASSIFICATION	5.126704731332561E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999618002571425	WITHOUT_CLASSIFICATION	3.81997428573984E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9989888335770865	WITHOUT_CLASSIFICATION	0.001011166422913481	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9979805697461673	WITHOUT_CLASSIFICATION	0.002019430253832679	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9904128905750332	WITHOUT_CLASSIFICATION	0.009587109424966744	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9995413655720075	WITHOUT_CLASSIFICATION	4.5863442799256367E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999808384949571	WITHOUT_CLASSIFICATION	1.9161505042847524E-5	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9991584238634822	WITHOUT_CLASSIFICATION	8.415761365177971E-4	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9981959558807016	WITHOUT_CLASSIFICATION	0.0018040441192984573	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999233762300644	WITHOUT_CLASSIFICATION	7.662376993557463E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999832154542291	WITHOUT_CLASSIFICATION	1.6784545770908763E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9997131602327871	WITHOUT_CLASSIFICATION	2.8683976721299154E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9778441836853218	WITHOUT_CLASSIFICATION	0.022155816314678216	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998789406968689	WITHOUT_CLASSIFICATION	1.2105930313109464E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9998569107880965	WITHOUT_CLASSIFICATION	1.4308921190350876E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9990688287684384	WITHOUT_CLASSIFICATION	9.311712315616274E-4	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9993422737657891	WITHOUT_CLASSIFICATION	6.577262342108387E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999105157152413	WITHOUT_CLASSIFICATION	8.94842847587924E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999536906147336	WITHOUT_CLASSIFICATION	4.630938526641412E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.999949405307882	WITHOUT_CLASSIFICATION	5.059469211795388E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999886298216929	WITHOUT_CLASSIFICATION	1.1370178307103182E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9998380214123134	WITHOUT_CLASSIFICATION	1.619785876865481E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9984629741953563	WITHOUT_CLASSIFICATION	0.0015370258046435662	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9984629741953563	WITHOUT_CLASSIFICATION	0.0015370258046435662	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999904680856943	WITHOUT_CLASSIFICATION	9.531914305629626E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.995429435155374	WITHOUT_CLASSIFICATION	0.004570564844625966	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9968868340567161	WITHOUT_CLASSIFICATION	0.0031131659432838553	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.999842698514361	WITHOUT_CLASSIFICATION	1.5730148563900573E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999944059557082	WITHOUT_CLASSIFICATION	5.594044291730057E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999944059557082	WITHOUT_CLASSIFICATION	5.594044291730057E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9997589810718138	WITHOUT_CLASSIFICATION	2.4101892818618822E-4	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9988451585608785	WITHOUT_CLASSIFICATION	0.0011548414391214243	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999188694254171	WITHOUT_CLASSIFICATION	8.113057458286817E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999908012332358	WITHOUT_CLASSIFICATION	9.19876676413648E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999744462154069	WITHOUT_CLASSIFICATION	2.5553784593154993E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999744462154069	WITHOUT_CLASSIFICATION	2.5553784593154993E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999921830191929	WITHOUT_CLASSIFICATION	7.816980807131263E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999921830191929	WITHOUT_CLASSIFICATION	7.816980807131263E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999995367348959	WITHOUT_CLASSIFICATION	4.632651040919634E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.99996358364251	WITHOUT_CLASSIFICATION	3.6416357489967294E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999529167092785	WITHOUT_CLASSIFICATION	4.708329072139138E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996838155198373	WITHOUT_CLASSIFICATION	3.1618448016268084E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998999107321024	WITHOUT_CLASSIFICATION	1.0008926789756501E-4	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9996697317360727	WITHOUT_CLASSIFICATION	3.302682639274477E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9998868686011929	WITHOUT_CLASSIFICATION	1.1313139880701343E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998901006701262	WITHOUT_CLASSIFICATION	1.0989932987378768E-4	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9998368485331579	WITHOUT_CLASSIFICATION	1.6315146684218337E-4	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9996457463375058	WITHOUT_CLASSIFICATION	3.5425366249411237E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9994274358179057	WITHOUT_CLASSIFICATION	5.725641820943216E-4	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999784708706325	WITHOUT_CLASSIFICATION	2.1529129367423624E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9996800771912907	WITHOUT_CLASSIFICATION	3.1992280870929494E-4	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9992027483119393	WITHOUT_CLASSIFICATION	7.972516880607106E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9979366326316036	WITHOUT_CLASSIFICATION	0.002063367368396434	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.999529720951365	WITHOUT_CLASSIFICATION	4.7027904863505544E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.99954575943397	WITHOUT_CLASSIFICATION	4.542405660300738E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9995980279741511	WITHOUT_CLASSIFICATION	4.0197202584889774E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.999811949613461	WITHOUT_CLASSIFICATION	1.88050386538993E-4	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999177500695846	WITHOUT_CLASSIFICATION	8.224993041540179E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9338065092543574	WITHOUT_CLASSIFICATION	0.0661934907456427	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999905534541571	WITHOUT_CLASSIFICATION	9.446545842793512E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.999962806474111	WITHOUT_CLASSIFICATION	3.719352588895191E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999766553038523	WITHOUT_CLASSIFICATION	2.3344696147754197E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9995542733963644	WITHOUT_CLASSIFICATION	4.4572660363560376E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999572418928849	WITHOUT_CLASSIFICATION	4.27581071150946E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999134034417194	WITHOUT_CLASSIFICATION	8.659655828054904E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9994359436260574	WITHOUT_CLASSIFICATION	5.640563739426435E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.999340437012907	WITHOUT_CLASSIFICATION	6.59562987093029E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9996647828977695	WITHOUT_CLASSIFICATION	3.3521710223050245E-4	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9995130085938906	WITHOUT_CLASSIFICATION	4.8699140610944787E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998903710219568	WITHOUT_CLASSIFICATION	1.0962897804328995E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9998029096349438	WITHOUT_CLASSIFICATION	1.970903650561751E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9993002346461555	WITHOUT_CLASSIFICATION	6.997653538445298E-4	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9815398484637843	WITHOUT_CLASSIFICATION	0.018460151536215663	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999564276478201	WITHOUT_CLASSIFICATION	4.357235217994594E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9994899256472575	WITHOUT_CLASSIFICATION	5.100743527424127E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999803773725802	WITHOUT_CLASSIFICATION	1.96226274198635E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9430093297493664	WITHOUT_CLASSIFICATION	0.05699067025063367	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9998461608412024	WITHOUT_CLASSIFICATION	1.5383915879773393E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9996951709611592	WITHOUT_CLASSIFICATION	3.0482903884079484E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9997134955788256	WITHOUT_CLASSIFICATION	2.865044211743303E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9998488228489112	WITHOUT_CLASSIFICATION	1.5117715108880196E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9359698115200503	WITHOUT_CLASSIFICATION	0.06403018847994975	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996262629672021	WITHOUT_CLASSIFICATION	3.7373703279792905E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999813414867789	WITHOUT_CLASSIFICATION	1.8658513221154678E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.999974254425705	WITHOUT_CLASSIFICATION	2.574557429506876E-5	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9998272540077312	WITHOUT_CLASSIFICATION	1.727459922688569E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999544958486302	WITHOUT_CLASSIFICATION	4.550415136987588E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999691395629061	WITHOUT_CLASSIFICATION	3.0860437093824404E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999691395629061	WITHOUT_CLASSIFICATION	3.0860437093824404E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999621645465876	WITHOUT_CLASSIFICATION	3.783545341237964E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999621645465876	WITHOUT_CLASSIFICATION	3.783545341237964E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999112330366283	WITHOUT_CLASSIFICATION	8.876696337163534E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999112330366283	WITHOUT_CLASSIFICATION	8.876696337163534E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999852484023962	WITHOUT_CLASSIFICATION	1.47515976038081E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999852484023962	WITHOUT_CLASSIFICATION	1.47515976038081E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994944676884125	WITHOUT_CLASSIFICATION	5.055323115875251E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994944676884125	WITHOUT_CLASSIFICATION	5.055323115875251E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994944676884125	WITHOUT_CLASSIFICATION	5.055323115875251E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999613022860684	WITHOUT_CLASSIFICATION	3.869771393159608E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998836759190665	WITHOUT_CLASSIFICATION	1.1632408093358063E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998164812586854	WITHOUT_CLASSIFICATION	1.8351874131469187E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998164812586854	WITHOUT_CLASSIFICATION	1.8351874131469187E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998164812586854	WITHOUT_CLASSIFICATION	1.8351874131469187E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999765543911802	WITHOUT_CLASSIFICATION	2.3445608819798307E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999004618613097	WITHOUT_CLASSIFICATION	9.953813869034413E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999788950235386	WITHOUT_CLASSIFICATION	2.110497646134495E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999788950235386	WITHOUT_CLASSIFICATION	2.110497646134495E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999778636043002	WITHOUT_CLASSIFICATION	2.2136395699743764E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9997161831515519	WITHOUT_CLASSIFICATION	2.838168484480814E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9997161831515519	WITHOUT_CLASSIFICATION	2.838168484480814E-4	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9830115001338741	WITHOUT_CLASSIFICATION	0.016988499866125883	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9988197471792812	WITHOUT_CLASSIFICATION	0.0011802528207187997	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.999627869160708	WITHOUT_CLASSIFICATION	3.721308392919534E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9900675777779991	WITHOUT_CLASSIFICATION	0.009932422222000898	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999238075560702	WITHOUT_CLASSIFICATION	7.619244392976666E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.999985294834282	WITHOUT_CLASSIFICATION	1.4705165717963473E-5	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9990016349219473	WITHOUT_CLASSIFICATION	9.98365078052745E-4	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9991039657722346	WITHOUT_CLASSIFICATION	8.960342277653894E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999320985756986	WITHOUT_CLASSIFICATION	6.79014243013684E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999864254639812	WITHOUT_CLASSIFICATION	1.3574536018847973E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9997397856456175	WITHOUT_CLASSIFICATION	2.602143543825692E-4	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9996950947264682	WITHOUT_CLASSIFICATION	3.049052735317505E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997042097081181	WITHOUT_CLASSIFICATION	2.9579029188189223E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9997233518035353	WITHOUT_CLASSIFICATION	2.7664819646462245E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997462094900877	WITHOUT_CLASSIFICATION	2.537905099121588E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9988958426390092	WITHOUT_CLASSIFICATION	0.0011041573609907717	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9994460696057346	WITHOUT_CLASSIFICATION	5.539303942653372E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999902683787684	WITHOUT_CLASSIFICATION	9.731621231663397E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.999972622195024	WITHOUT_CLASSIFICATION	2.7377804975997354E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9997221581580289	WITHOUT_CLASSIFICATION	2.778418419711896E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997593595304769	WITHOUT_CLASSIFICATION	2.4064046952308962E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999725570352298	WITHOUT_CLASSIFICATION	2.744296477014698E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999170202437319	WITHOUT_CLASSIFICATION	8.297975626814244E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9989893638448456	WITHOUT_CLASSIFICATION	0.0010106361551544384	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9190993621689918	WITHOUT_CLASSIFICATION	0.08090063783100827	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.999922587213749	WITHOUT_CLASSIFICATION	7.74127862509381E-5	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999984640702806	WITHOUT_CLASSIFICATION	1.5359297193569457E-6	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9998867256032729	WITHOUT_CLASSIFICATION	1.1327439672717668E-4	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999682849792966	WITHOUT_CLASSIFICATION	3.171502070353711E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999987059637657	WITHOUT_CLASSIFICATION	1.2940362342964503E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999349988849254	WITHOUT_CLASSIFICATION	6.500111507450187E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.99998999417469	WITHOUT_CLASSIFICATION	1.0005825309922886E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997885764580005	WITHOUT_CLASSIFICATION	2.1142354199959286E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997885764580005	WITHOUT_CLASSIFICATION	2.1142354199959286E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997885764580005	WITHOUT_CLASSIFICATION	2.1142354199959286E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997885764580005	WITHOUT_CLASSIFICATION	2.1142354199959286E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999712828178147	WITHOUT_CLASSIFICATION	2.8717182185340866E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9886825451501889	WITHOUT_CLASSIFICATION	0.011317454849811054	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9997560102928564	WITHOUT_CLASSIFICATION	2.439897071436004E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9997560102928564	WITHOUT_CLASSIFICATION	2.439897071436004E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999952072664029	WITHOUT_CLASSIFICATION	4.792733597120639E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998319829476151	WITHOUT_CLASSIFICATION	1.6801705238486802E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9829961078820153	WITHOUT_CLASSIFICATION	0.017003892117984698	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999859163518094	WITHOUT_CLASSIFICATION	1.4083648190555608E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9994183244926952	WITHOUT_CLASSIFICATION	5.816755073047772E-4	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9924067194692289	WITHOUT_CLASSIFICATION	0.007593280530771182	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.999142953628198	WITHOUT_CLASSIFICATION	8.570463718020848E-4	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999939871835174	WITHOUT_CLASSIFICATION	6.012816482572164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999939871835174	WITHOUT_CLASSIFICATION	6.012816482572164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999939871835174	WITHOUT_CLASSIFICATION	6.012816482572164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999939871835174	WITHOUT_CLASSIFICATION	6.012816482572164E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999971533302456	WITHOUT_CLASSIFICATION	2.8466697543518274E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999784266326627	WITHOUT_CLASSIFICATION	2.1573367337304896E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999784266326627	WITHOUT_CLASSIFICATION	2.1573367337304896E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999784266326627	WITHOUT_CLASSIFICATION	2.1573367337304896E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.998699935823399	WITHOUT_CLASSIFICATION	0.0013000641766009902	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.999964783365669	WITHOUT_CLASSIFICATION	3.5216634330993476E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999134811206783	WITHOUT_CLASSIFICATION	8.651887932169037E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9995055129253496	WITHOUT_CLASSIFICATION	4.944870746504057E-4	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999693187624158	WITHOUT_CLASSIFICATION	3.0681237584165937E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998693850584306	WITHOUT_CLASSIFICATION	1.3061494156936507E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9998693850584306	WITHOUT_CLASSIFICATION	1.3061494156936507E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998284706159799	WITHOUT_CLASSIFICATION	1.7152938402010322E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998284706159799	WITHOUT_CLASSIFICATION	1.7152938402010322E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999703888456313	WITHOUT_CLASSIFICATION	2.9611154368820662E-5	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999976342801398	WITHOUT_CLASSIFICATION	2.3657198602559608E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998211975355833	WITHOUT_CLASSIFICATION	1.7880246441678483E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999870827211105	WITHOUT_CLASSIFICATION	1.2917278889613684E-5	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998558795295995	WITHOUT_CLASSIFICATION	1.4412047040053303E-4	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999918770965994	WITHOUT_CLASSIFICATION	8.122903400551028E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998269422813924	WITHOUT_CLASSIFICATION	1.7305771860767164E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999378146171458	WITHOUT_CLASSIFICATION	6.218538285419088E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9996959343976575	WITHOUT_CLASSIFICATION	3.040656023425497E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999900034613505	WITHOUT_CLASSIFICATION	9.996538649485102E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999900034613505	WITHOUT_CLASSIFICATION	9.996538649485102E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999421832021599	WITHOUT_CLASSIFICATION	5.781679784015566E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999421832021599	WITHOUT_CLASSIFICATION	5.781679784015566E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.994414154552375	WITHOUT_CLASSIFICATION	0.005585845447624978	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9992149687964013	WITHOUT_CLASSIFICATION	7.850312035986915E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999574753653304	WITHOUT_CLASSIFICATION	4.252463466956099E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9994686880880341	WITHOUT_CLASSIFICATION	5.313119119659916E-4	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999734901036729	WITHOUT_CLASSIFICATION	2.650989632706698E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999427162568986	WITHOUT_CLASSIFICATION	5.728374310140136E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9993388481863232	WITHOUT_CLASSIFICATION	6.611518136767743E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9993046624061268	WITHOUT_CLASSIFICATION	6.953375938732311E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9814634984602858	WITHOUT_CLASSIFICATION	0.01853650153971419	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9998999903044086	WITHOUT_CLASSIFICATION	1.0000969559142715E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9929163348833496	WITHOUT_CLASSIFICATION	0.007083665116650468	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999907081070395	WITHOUT_CLASSIFICATION	9.291892960526854E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.997477744874706	WITHOUT_CLASSIFICATION	0.002522255125294093	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998260313495522	WITHOUT_CLASSIFICATION	1.73968650447761E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999301647105038	WITHOUT_CLASSIFICATION	6.983528949614988E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999428029237618	WITHOUT_CLASSIFICATION	5.7197076238195364E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9977121630250243	WITHOUT_CLASSIFICATION	0.0022878369749757066	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9775787265946737	WITHOUT_CLASSIFICATION	0.022421273405326295	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9963779952305075	WITHOUT_CLASSIFICATION	0.0036220047694925086	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9986282068351611	WITHOUT_CLASSIFICATION	0.0013717931648389817	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9997528468637611	WITHOUT_CLASSIFICATION	2.471531362388666E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.999750691498173	WITHOUT_CLASSIFICATION	2.493085018269492E-4	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999765055185277	WITHOUT_CLASSIFICATION	2.3494481472373776E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999489427969039	WITHOUT_CLASSIFICATION	5.105720309600883E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9832858517660656	WITHOUT_CLASSIFICATION	0.016714148233934387	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9941016943395659	WITHOUT_CLASSIFICATION	0.005898305660434154	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999496698261386	WITHOUT_CLASSIFICATION	5.033017386132815E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999844816336907	WITHOUT_CLASSIFICATION	1.551836630933491E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9899441226562812	WITHOUT_CLASSIFICATION	0.010055877343718865	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.6913228030697679	WITHOUT_CLASSIFICATION	0.3086771969302322	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999136074036942	WITHOUT_CLASSIFICATION	8.639259630577541E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9996198730687887	WITHOUT_CLASSIFICATION	3.801269312112591E-4	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999085272231714	WITHOUT_CLASSIFICATION	9.147277682861249E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9879002142575993	WITHOUT_CLASSIFICATION	0.0120997857424007	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9934726501520349	WITHOUT_CLASSIFICATION	0.006527349847965133	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9950621724928526	WITHOUT_CLASSIFICATION	0.004937827507147445	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9950621724928526	WITHOUT_CLASSIFICATION	0.004937827507147445	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9303096812439695	WITHOUT_CLASSIFICATION	0.06969031875603048	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999255189617602	WITHOUT_CLASSIFICATION	7.44810382398659E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999255189617602	WITHOUT_CLASSIFICATION	7.44810382398659E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999207108481222	WITHOUT_CLASSIFICATION	7.928915187787893E-5	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999547247698647	WITHOUT_CLASSIFICATION	4.5275230135332634E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998315346203295	WITHOUT_CLASSIFICATION	1.6846537967057422E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998966522966302	WITHOUT_CLASSIFICATION	1.0334770336985929E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998966522966302	WITHOUT_CLASSIFICATION	1.0334770336985929E-4	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999785682758937	WITHOUT_CLASSIFICATION	2.1431724106315638E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997888583305509	WITHOUT_CLASSIFICATION	2.1114166944908943E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997888583305509	WITHOUT_CLASSIFICATION	2.1114166944908943E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9421587710250698	WITHOUT_CLASSIFICATION	0.05784122897493028	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9989802139757187	WITHOUT_CLASSIFICATION	0.001019786024281247	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9991974503679502	WITHOUT_CLASSIFICATION	8.02549632049867E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9997940031756319	WITHOUT_CLASSIFICATION	2.0599682436796442E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998791434913644	WITHOUT_CLASSIFICATION	1.2085650863555662E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998447975605219	WITHOUT_CLASSIFICATION	1.5520243947812428E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9998394335073829	WITHOUT_CLASSIFICATION	1.6056649261708564E-4	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999419001599671	WITHOUT_CLASSIFICATION	5.809984003303162E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999850672128684	WITHOUT_CLASSIFICATION	1.4932787131592276E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9985559677464718	WITHOUT_CLASSIFICATION	0.0014440322535281174	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999062742161599	WITHOUT_CLASSIFICATION	9.372578384008294E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9992998780033132	WITHOUT_CLASSIFICATION	7.001219966868334E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999239711965038	WITHOUT_CLASSIFICATION	7.602880349625239E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9614424155203668	WITHOUT_CLASSIFICATION	0.03855758447963328	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9997404699662336	WITHOUT_CLASSIFICATION	2.5953003376642597E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9997589533321879	WITHOUT_CLASSIFICATION	2.410466678121039E-4	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9968630774136322	WITHOUT_CLASSIFICATION	0.0031369225863677784	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9958000992719609	WITHOUT_CLASSIFICATION	0.0041999007280391866	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999966330787283	WITHOUT_CLASSIFICATION	3.366921271613242E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999966330787283	WITHOUT_CLASSIFICATION	3.366921271613242E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9996928423859934	WITHOUT_CLASSIFICATION	3.0715761400650944E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999152837337645	WITHOUT_CLASSIFICATION	8.47162662355105E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.997517556493232	WITHOUT_CLASSIFICATION	0.0024824435067679145	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999060711580168	WITHOUT_CLASSIFICATION	9.392884198319447E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999407809021837	WITHOUT_CLASSIFICATION	5.9219097816138907E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999407809021837	WITHOUT_CLASSIFICATION	5.9219097816138907E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999407809021837	WITHOUT_CLASSIFICATION	5.9219097816138907E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9990689404658643	WITHOUT_CLASSIFICATION	9.31059534135812E-4	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9996561069631417	WITHOUT_CLASSIFICATION	3.4389303685830786E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9984007123920382	WITHOUT_CLASSIFICATION	0.0015992876079618354	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999337523819719	WITHOUT_CLASSIFICATION	6.624761802812854E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9998561889399591	WITHOUT_CLASSIFICATION	1.4381106004091593E-4	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9995672596406714	WITHOUT_CLASSIFICATION	4.327403593285736E-4	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9990166822678799	WITHOUT_CLASSIFICATION	9.833177321200797E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9978988155058207	WITHOUT_CLASSIFICATION	0.0021011844941792187	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9987874371625631	WITHOUT_CLASSIFICATION	0.001212562837436827	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.999983243516775	WITHOUT_CLASSIFICATION	1.6756483224978085E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.999952962884432	WITHOUT_CLASSIFICATION	4.70371155680345E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9996033325809118	WITHOUT_CLASSIFICATION	3.966674190881303E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8411717235146098	WITHOUT_CLASSIFICATION	0.15882827648539022	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9997144704300784	WITHOUT_CLASSIFICATION	2.855295699215937E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9998266978900506	WITHOUT_CLASSIFICATION	1.7330210994938343E-4	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.999636856480144	WITHOUT_CLASSIFICATION	3.6314351985604267E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9998305506032149	WITHOUT_CLASSIFICATION	1.6944939678515712E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999298575273871	WITHOUT_CLASSIFICATION	7.014247261290204E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999710424872956	WITHOUT_CLASSIFICATION	2.8957512704320846E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9090360743711972	WITHOUT_CLASSIFICATION	0.09096392562880282	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9635886873758615	DEFECT	0.036411312624138624	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.5024999119539406	WITHOUT_CLASSIFICATION	0.4975000880460594	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.7520605704150558	DEFECT	0.24793942958494417	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.6186139996084078	DEFECT	0.3813860003915921	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9973805259859967	WITHOUT_CLASSIFICATION	0.002619474014003414	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.877269617258214	WITHOUT_CLASSIFICATION	0.12273038274178606	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9832145236346274	WITHOUT_CLASSIFICATION	0.01678547636537262	DEFECT
// FIXME: not correct exception	DEFECT	0.9181577765864766	WITHOUT_CLASSIFICATION	0.08184222341352343	DEFECT
// XXX actually only on windows...	DEFECT	0.9988645822030655	WITHOUT_CLASSIFICATION	0.0011354177969345482	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9965432168655187	WITHOUT_CLASSIFICATION	0.0034567831344812475	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9818271666797068	WITHOUT_CLASSIFICATION	0.018172833320293163	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9611145518824646	WITHOUT_CLASSIFICATION	0.038885448117535366	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8388907700363382	DEFECT	0.1611092299636619	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9822685462114722	WITHOUT_CLASSIFICATION	0.017731453788527803	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9929744864908864	WITHOUT_CLASSIFICATION	0.007025513509113546	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9929744864908864	WITHOUT_CLASSIFICATION	0.007025513509113546	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9900069430080725	WITHOUT_CLASSIFICATION	0.009993056991927573	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9991955953820147	WITHOUT_CLASSIFICATION	8.044046179852903E-4	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9991622828613319	WITHOUT_CLASSIFICATION	8.377171386681185E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999716615274766	WITHOUT_CLASSIFICATION	2.8338472523395715E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999716615274766	WITHOUT_CLASSIFICATION	2.8338472523395715E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.986610398111915	WITHOUT_CLASSIFICATION	0.013389601888085061	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9971737310955237	WITHOUT_CLASSIFICATION	0.002826268904476322	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9892065945409526	WITHOUT_CLASSIFICATION	0.010793405459047386	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7074558869233734	WITHOUT_CLASSIFICATION	0.29254411307662676	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9323335344174792	WITHOUT_CLASSIFICATION	0.0676664655825208	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.5749942436446782	WITHOUT_CLASSIFICATION	0.4250057563553219	DEFECT
// TODO: proper sign	DEFECT	0.9875848199672168	WITHOUT_CLASSIFICATION	0.012415180032783272	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9885299430854514	DEFECT	0.011470056914548526	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.8646322675401309	WITHOUT_CLASSIFICATION	0.13536773245986908	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8190140060773501	WITHOUT_CLASSIFICATION	0.18098599392264997	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8788545355756322	WITHOUT_CLASSIFICATION	0.12114546442436777	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9724316187053899	WITHOUT_CLASSIFICATION	0.02756838129461025	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7572580317985843	DEFECT	0.24274196820141578	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.7886724993876909	WITHOUT_CLASSIFICATION	0.21132750061230904	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.7278919948617858	WITHOUT_CLASSIFICATION	0.2721080051382142	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9188930207099629	WITHOUT_CLASSIFICATION	0.08110697929003707	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9986533349505792	WITHOUT_CLASSIFICATION	0.0013466650494207858	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9957620966311262	WITHOUT_CLASSIFICATION	0.004237903368873724	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.8396106615953183	WITHOUT_CLASSIFICATION	0.16038933840468167	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9995376505924121	WITHOUT_CLASSIFICATION	4.623494075879255E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9962767071020268	WITHOUT_CLASSIFICATION	0.0037232928979732253	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9962767071020268	WITHOUT_CLASSIFICATION	0.0037232928979732253	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9874619090332784	WITHOUT_CLASSIFICATION	0.012538090966721677	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9859501526976628	WITHOUT_CLASSIFICATION	0.0140498473023372	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.7340558711428677	DEFECT	0.2659441288571322	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9870884062777222	WITHOUT_CLASSIFICATION	0.01291159372227772	DEFECT
// FIXME: This is wrong	DEFECT	0.9695246098193597	WITHOUT_CLASSIFICATION	0.03047539018064031	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9974403675491029	WITHOUT_CLASSIFICATION	0.002559632450897175	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999372181985917	WITHOUT_CLASSIFICATION	6.278180140830771E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8498849494398644	WITHOUT_CLASSIFICATION	0.1501150505601357	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9984614836079042	WITHOUT_CLASSIFICATION	0.0015385163920957979	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9980063111674259	WITHOUT_CLASSIFICATION	0.0019936888325741186	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9996682600132163	WITHOUT_CLASSIFICATION	3.3173998678362747E-4	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9708383942578522	DEFECT	0.029161605742147753	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9708383942578522	DEFECT	0.029161605742147753	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9956747303550404	WITHOUT_CLASSIFICATION	0.004325269644959661	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9986084670073678	WITHOUT_CLASSIFICATION	0.001391532992632156	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9890619953078993	WITHOUT_CLASSIFICATION	0.010938004692100708	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.7090638114865491	DEFECT	0.29093618851345093	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9870591267596819	DEFECT	0.012940873240318066	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9481308308744749	WITHOUT_CLASSIFICATION	0.05186916912552521	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9445660013021064	WITHOUT_CLASSIFICATION	0.05543399869789356	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9874619090332784	WITHOUT_CLASSIFICATION	0.012538090966721677	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9966920834425901	WITHOUT_CLASSIFICATION	0.003307916557410022	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9629840335856339	WITHOUT_CLASSIFICATION	0.03701596641436604	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9468027809386295	DEFECT	0.053197219061370545	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7074558869233734	WITHOUT_CLASSIFICATION	0.29254411307662676	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9677728548082161	DEFECT	0.03222714519178387	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.6280458401632287	DEFECT	0.3719541598367712	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9188930207099629	WITHOUT_CLASSIFICATION	0.08110697929003707	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9990390372089264	WITHOUT_CLASSIFICATION	9.609627910736072E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9996682600132163	WITHOUT_CLASSIFICATION	3.3173998678362747E-4	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.6841250839070429	WITHOUT_CLASSIFICATION	0.3158749160929571	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// TODO: don't require pop	DEFECT	0.9500804637056798	WITHOUT_CLASSIFICATION	0.04991953629432019	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8498849494398644	WITHOUT_CLASSIFICATION	0.1501150505601357	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.8870877841839209	WITHOUT_CLASSIFICATION	0.1129122158160791	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9708383942578522	DEFECT	0.029161605742147753	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9708383942578522	DEFECT	0.029161605742147753	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999760350472179	WITHOUT_CLASSIFICATION	2.3964952782177434E-5	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9323885468430646	WITHOUT_CLASSIFICATION	0.06761145315693541	DEFECT
