// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999941557978796	WITHOUT_CLASSIFICATION	5.844202120260845E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9998602537943468	WITHOUT_CLASSIFICATION	1.3974620565317843E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9994550145878326	WITHOUT_CLASSIFICATION	5.449854121675016E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999659347873506	WITHOUT_CLASSIFICATION	3.40652126494024E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999659347873506	WITHOUT_CLASSIFICATION	3.40652126494024E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996685136330314	WITHOUT_CLASSIFICATION	3.3148636696860923E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999631285131805	WITHOUT_CLASSIFICATION	3.687148681942293E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.999640516301967	WITHOUT_CLASSIFICATION	3.5948369803290965E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9996660638761069	WITHOUT_CLASSIFICATION	3.3393612389310076E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999553234320006	WITHOUT_CLASSIFICATION	4.467656799933069E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999277716143433	WITHOUT_CLASSIFICATION	7.222838565678011E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999277716143433	WITHOUT_CLASSIFICATION	7.222838565678011E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999277716143433	WITHOUT_CLASSIFICATION	7.222838565678011E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999277716143433	WITHOUT_CLASSIFICATION	7.222838565678011E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9983582982644816	WITHOUT_CLASSIFICATION	0.001641701735518377	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9997475476799966	WITHOUT_CLASSIFICATION	2.5245232000339175E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9998415227512079	WITHOUT_CLASSIFICATION	1.58477248792188E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9998032861378849	WITHOUT_CLASSIFICATION	1.9671386211509754E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.999927667768307	WITHOUT_CLASSIFICATION	7.233223169301412E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999386917866157	WITHOUT_CLASSIFICATION	6.130821338437085E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999789873607545	WITHOUT_CLASSIFICATION	2.1012639245399007E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999866762829538	WITHOUT_CLASSIFICATION	1.3323717046252204E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9998972976596432	WITHOUT_CLASSIFICATION	1.0270234035684471E-4	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9973940587886425	WITHOUT_CLASSIFICATION	0.002605941211357477	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9997749458973237	WITHOUT_CLASSIFICATION	2.2505410267630385E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.999985208453223	WITHOUT_CLASSIFICATION	1.4791546777038518E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9995994292105624	WITHOUT_CLASSIFICATION	4.005707894374964E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999543815031284	WITHOUT_CLASSIFICATION	4.561849687155711E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998782603674564	WITHOUT_CLASSIFICATION	1.2173963254351105E-4	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9979244836058853	WITHOUT_CLASSIFICATION	0.002075516394114783	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999785118802241	WITHOUT_CLASSIFICATION	2.1488119775804355E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999277716143433	WITHOUT_CLASSIFICATION	7.222838565678011E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998549840235554	WITHOUT_CLASSIFICATION	1.4501597644450248E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999915777548427	WITHOUT_CLASSIFICATION	8.422245157311508E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998395530618435	WITHOUT_CLASSIFICATION	1.6044693815657536E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9998406626398608	WITHOUT_CLASSIFICATION	1.5933736013916476E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999183502963369	WITHOUT_CLASSIFICATION	8.164970366307939E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9998882840722394	WITHOUT_CLASSIFICATION	1.1171592776053624E-4	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999517548092093	WITHOUT_CLASSIFICATION	4.824519079067135E-5	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999899442942771	WITHOUT_CLASSIFICATION	1.0055705722985895E-5	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9998839391547489	WITHOUT_CLASSIFICATION	1.1606084525116429E-4	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998128592318466	WITHOUT_CLASSIFICATION	1.8714076815336394E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9976097422085723	WITHOUT_CLASSIFICATION	0.0023902577914276814	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9998355188677764	WITHOUT_CLASSIFICATION	1.6448113222353576E-4	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9995967301500288	WITHOUT_CLASSIFICATION	4.0326984997112966E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999055608758882	WITHOUT_CLASSIFICATION	9.443912411171428E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9996997354990996	WITHOUT_CLASSIFICATION	3.002645009004187E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9996710468012983	WITHOUT_CLASSIFICATION	3.289531987016485E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9997265337846253	WITHOUT_CLASSIFICATION	2.7346621537470726E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9969240641907745	WITHOUT_CLASSIFICATION	0.003075935809225412	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.999933194329969	WITHOUT_CLASSIFICATION	6.680567003103586E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9994985879049045	WITHOUT_CLASSIFICATION	5.014120950954615E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999920028320037	WITHOUT_CLASSIFICATION	7.9971679962943E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999284534018102	WITHOUT_CLASSIFICATION	7.154659818978358E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999357560451797	WITHOUT_CLASSIFICATION	6.424395482025612E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999550597346123	WITHOUT_CLASSIFICATION	4.4940265387739664E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9990470381757571	WITHOUT_CLASSIFICATION	9.52961824242773E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9997290396540172	WITHOUT_CLASSIFICATION	2.709603459828778E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998020378816648	WITHOUT_CLASSIFICATION	1.9796211833521572E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9992945355642938	WITHOUT_CLASSIFICATION	7.054644357062717E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999166471514698	WITHOUT_CLASSIFICATION	8.3352848530181E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999902196496003	WITHOUT_CLASSIFICATION	9.780350399655058E-6	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9990991233623695	WITHOUT_CLASSIFICATION	9.008766376305109E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9997331024201463	WITHOUT_CLASSIFICATION	2.668975798536748E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9998570091507979	WITHOUT_CLASSIFICATION	1.4299084920204967E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998947480138831	WITHOUT_CLASSIFICATION	1.0525198611691306E-4	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999876284588291	WITHOUT_CLASSIFICATION	1.2371541170898927E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995659481125501	WITHOUT_CLASSIFICATION	4.3405188744993886E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.999495329092102	WITHOUT_CLASSIFICATION	5.046709078979151E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.999495329092102	WITHOUT_CLASSIFICATION	5.046709078979151E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999886534354075	WITHOUT_CLASSIFICATION	1.1346564592370803E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.999534053825901	WITHOUT_CLASSIFICATION	4.659461740989368E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999684251785154	WITHOUT_CLASSIFICATION	3.157482148460218E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.997358568337471	WITHOUT_CLASSIFICATION	0.002641431662529022	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.997574438066752	WITHOUT_CLASSIFICATION	0.002425561933248084	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9884773238240316	WITHOUT_CLASSIFICATION	0.011522676175968312	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9996819897692892	WITHOUT_CLASSIFICATION	3.1801023071077733E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9996548091844728	WITHOUT_CLASSIFICATION	3.4519081552717714E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999422775650403	WITHOUT_CLASSIFICATION	5.772243495970263E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999625108287445	WITHOUT_CLASSIFICATION	3.748917125548811E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999994158011534	WITHOUT_CLASSIFICATION	5.841988466932621E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999834019985817	WITHOUT_CLASSIFICATION	1.6598001418305556E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998803428289633	WITHOUT_CLASSIFICATION	1.1965717103665273E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998803428289633	WITHOUT_CLASSIFICATION	1.1965717103665273E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998803428289633	WITHOUT_CLASSIFICATION	1.1965717103665273E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.999947214930855	WITHOUT_CLASSIFICATION	5.2785069144861756E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999671716581723	WITHOUT_CLASSIFICATION	3.282834182769468E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999622765379631	WITHOUT_CLASSIFICATION	3.772346203692752E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9880411225636464	WITHOUT_CLASSIFICATION	0.011958877436353554	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9995218963349097	WITHOUT_CLASSIFICATION	4.781036650902792E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999949280546903	WITHOUT_CLASSIFICATION	5.071945309737072E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9990795537085678	WITHOUT_CLASSIFICATION	9.204462914321206E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.999785133258766	WITHOUT_CLASSIFICATION	2.148667412340686E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.999946219907109	WITHOUT_CLASSIFICATION	5.378009289100195E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999754216100457	WITHOUT_CLASSIFICATION	2.4578389954237643E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999220354845015	WITHOUT_CLASSIFICATION	7.796451549839952E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999220354845015	WITHOUT_CLASSIFICATION	7.796451549839952E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9996921036823472	WITHOUT_CLASSIFICATION	3.0789631765277945E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9997266072748772	WITHOUT_CLASSIFICATION	2.7339272512279846E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999106456066741	WITHOUT_CLASSIFICATION	8.935439332591161E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998192067565043	WITHOUT_CLASSIFICATION	1.8079324349578197E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.99968515232833	WITHOUT_CLASSIFICATION	3.148476716699897E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999612727804009	WITHOUT_CLASSIFICATION	3.8727219599005176E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999836642136466	WITHOUT_CLASSIFICATION	1.633578635346117E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9998464309023325	WITHOUT_CLASSIFICATION	1.5356909766756538E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999471792332919	WITHOUT_CLASSIFICATION	5.2820766708094E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998316953953122	WITHOUT_CLASSIFICATION	1.6830460468785725E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9944014214486101	WITHOUT_CLASSIFICATION	0.005598578551389997	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999892658811935	WITHOUT_CLASSIFICATION	1.0734118806485553E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9998159677045976	WITHOUT_CLASSIFICATION	1.8403229540237445E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997725159771144	WITHOUT_CLASSIFICATION	2.2748402288571138E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997890240283217	WITHOUT_CLASSIFICATION	2.1097597167824998E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9985484942208274	WITHOUT_CLASSIFICATION	0.0014515057791726978	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9997376218590283	WITHOUT_CLASSIFICATION	2.623781409716403E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9998407036923981	WITHOUT_CLASSIFICATION	1.5929630760181337E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999736439486776	WITHOUT_CLASSIFICATION	2.6356051322410304E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999632793061989	WITHOUT_CLASSIFICATION	3.672069380104956E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9996282693606646	WITHOUT_CLASSIFICATION	3.7173063933538137E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9990399904099326	WITHOUT_CLASSIFICATION	9.600095900672553E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999823433797268	WITHOUT_CLASSIFICATION	1.7656620273232606E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999527277192918	WITHOUT_CLASSIFICATION	4.727228070827716E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9989511583855373	WITHOUT_CLASSIFICATION	0.001048841614462753	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999824896942927	WITHOUT_CLASSIFICATION	1.7510305707374993E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999689014560458	WITHOUT_CLASSIFICATION	3.109854395426476E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999760250377179	WITHOUT_CLASSIFICATION	2.3974962282188423E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.999857674062224	WITHOUT_CLASSIFICATION	1.4232593777595092E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9998879600969979	WITHOUT_CLASSIFICATION	1.120399030021726E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.999947758952593	WITHOUT_CLASSIFICATION	5.224104740699505E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9995169482067148	WITHOUT_CLASSIFICATION	4.830517932852722E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9995083871411127	WITHOUT_CLASSIFICATION	4.916128588873394E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998417069379807	WITHOUT_CLASSIFICATION	1.5829306201926572E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9990121883308134	WITHOUT_CLASSIFICATION	9.87811669186672E-4	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999688443993048	WITHOUT_CLASSIFICATION	3.1155600695298335E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.999873985648003	WITHOUT_CLASSIFICATION	1.2601435199699053E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999759361430387	WITHOUT_CLASSIFICATION	2.4063856961289464E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9994725936386469	WITHOUT_CLASSIFICATION	5.274063613529682E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999696068828114	WITHOUT_CLASSIFICATION	3.0393117188487598E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9987693430195907	WITHOUT_CLASSIFICATION	0.0012306569804092996	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9997810517082317	WITHOUT_CLASSIFICATION	2.1894829176833495E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999598388578732	WITHOUT_CLASSIFICATION	4.0161142126884355E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9939820667203704	WITHOUT_CLASSIFICATION	0.006017933279629619	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999010565327127	WITHOUT_CLASSIFICATION	9.8943467287408E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998660645097067	WITHOUT_CLASSIFICATION	1.3393549029324764E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999951826080267	WITHOUT_CLASSIFICATION	4.817391973340697E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999186033717714	WITHOUT_CLASSIFICATION	8.139662822853861E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9995656395883504	WITHOUT_CLASSIFICATION	4.343604116494979E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999661512465777	WITHOUT_CLASSIFICATION	3.384875342232445E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9997641340425866	WITHOUT_CLASSIFICATION	2.3586595741332397E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999550266146768	WITHOUT_CLASSIFICATION	4.4973385323077195E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9997546982233522	WITHOUT_CLASSIFICATION	2.453017766479106E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9992088721920297	WITHOUT_CLASSIFICATION	7.91127807970278E-4	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9998876329790233	WITHOUT_CLASSIFICATION	1.12367020976661E-4	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9998984753386848	WITHOUT_CLASSIFICATION	1.0152466131525885E-4	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9998826219515949	WITHOUT_CLASSIFICATION	1.1737804840496733E-4	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.999826814237274	WITHOUT_CLASSIFICATION	1.731857627258908E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998465452947944	WITHOUT_CLASSIFICATION	1.5345470520549263E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9977109804405063	WITHOUT_CLASSIFICATION	0.0022890195594935906	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9998557236453014	WITHOUT_CLASSIFICATION	1.4427635469873207E-4	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9989840227229989	WITHOUT_CLASSIFICATION	0.001015977277001068	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9997515814075928	WITHOUT_CLASSIFICATION	2.484185924071141E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999881367623198	WITHOUT_CLASSIFICATION	1.1863237680211385E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9997432204317716	WITHOUT_CLASSIFICATION	2.567795682285234E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9997432204317716	WITHOUT_CLASSIFICATION	2.567795682285234E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.999988768634736	WITHOUT_CLASSIFICATION	1.1231365263988587E-5	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999974699525892	WITHOUT_CLASSIFICATION	2.5300474107988002E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999059665030163	WITHOUT_CLASSIFICATION	9.403349698357311E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9996534343920017	WITHOUT_CLASSIFICATION	3.465656079982824E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999825141893749	WITHOUT_CLASSIFICATION	1.7485810625109555E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9996592085475923	WITHOUT_CLASSIFICATION	3.407914524078302E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.999875242920662	WITHOUT_CLASSIFICATION	1.2475707933807148E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999848723412187	WITHOUT_CLASSIFICATION	1.5127658781365904E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999833906482811	WITHOUT_CLASSIFICATION	1.660935171892313E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999978298383037	WITHOUT_CLASSIFICATION	2.1701616963218373E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9998581383080796	WITHOUT_CLASSIFICATION	1.418616919204213E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9984650083839305	WITHOUT_CLASSIFICATION	0.0015349916160694896	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9685498188644334	WITHOUT_CLASSIFICATION	0.031450181135566725	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9998947452094277	WITHOUT_CLASSIFICATION	1.0525479057233881E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999270671698482	WITHOUT_CLASSIFICATION	7.293283015168296E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999510146867487	WITHOUT_CLASSIFICATION	4.8985313251337426E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9997059484264794	WITHOUT_CLASSIFICATION	2.940515735206434E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999951318749512	WITHOUT_CLASSIFICATION	4.8681250488011765E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999953931959195	WITHOUT_CLASSIFICATION	4.606804080505284E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999208915599107	WITHOUT_CLASSIFICATION	7.91084400893704E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999957642311132	WITHOUT_CLASSIFICATION	4.2357688867466275E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999957642311132	WITHOUT_CLASSIFICATION	4.2357688867466275E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999314713838818	WITHOUT_CLASSIFICATION	6.852861611815035E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999941248429944	WITHOUT_CLASSIFICATION	5.875157005618514E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999783264917351	WITHOUT_CLASSIFICATION	2.167350826488154E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9989879369049544	WITHOUT_CLASSIFICATION	0.0010120630950456505	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9996746618967756	WITHOUT_CLASSIFICATION	3.2533810322446787E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9998301974185045	WITHOUT_CLASSIFICATION	1.6980258149551663E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9998301974185045	WITHOUT_CLASSIFICATION	1.6980258149551663E-4	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9545651673633879	WITHOUT_CLASSIFICATION	0.04543483263661202	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999766230750136	WITHOUT_CLASSIFICATION	2.3376924986420952E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999766230750136	WITHOUT_CLASSIFICATION	2.3376924986420952E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999135843881904	WITHOUT_CLASSIFICATION	8.641561180961119E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999306942119492	WITHOUT_CLASSIFICATION	6.930578805080452E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999306942119492	WITHOUT_CLASSIFICATION	6.930578805080452E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999725459401666	WITHOUT_CLASSIFICATION	2.745405983337166E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999725459401666	WITHOUT_CLASSIFICATION	2.745405983337166E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999147275502998	WITHOUT_CLASSIFICATION	8.527244970025664E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999662803638931	WITHOUT_CLASSIFICATION	3.371963610689005E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999825441954701	WITHOUT_CLASSIFICATION	1.745580453000066E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9998463377366963	WITHOUT_CLASSIFICATION	1.5366226330372002E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9997689467536899	WITHOUT_CLASSIFICATION	2.3105324631019446E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.999935471203026	WITHOUT_CLASSIFICATION	6.452879697405061E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9998546301372342	WITHOUT_CLASSIFICATION	1.4536986276581597E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.999935471203026	WITHOUT_CLASSIFICATION	6.452879697405061E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9957326921728102	WITHOUT_CLASSIFICATION	0.004267307827189669	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.999943084156465	WITHOUT_CLASSIFICATION	5.6915843534937945E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999172942926887	WITHOUT_CLASSIFICATION	8.270570731128267E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999572747723965	WITHOUT_CLASSIFICATION	4.2725227603627746E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999404486140292	WITHOUT_CLASSIFICATION	5.95513859707681E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9976617646286773	WITHOUT_CLASSIFICATION	0.002338235371322642	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999289601147928	WITHOUT_CLASSIFICATION	7.103988520721078E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999278268376872	WITHOUT_CLASSIFICATION	7.217316231284406E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998174886721931	WITHOUT_CLASSIFICATION	1.8251132780682896E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9996816859085847	WITHOUT_CLASSIFICATION	3.1831409141522385E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9998796857038841	WITHOUT_CLASSIFICATION	1.2031429611594204E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999521225843601	WITHOUT_CLASSIFICATION	4.787741563992588E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999748487916951	WITHOUT_CLASSIFICATION	2.5151208304959257E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9998444518808699	WITHOUT_CLASSIFICATION	1.5554811913008778E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999931677533901	WITHOUT_CLASSIFICATION	6.832246609902946E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9996376214463232	WITHOUT_CLASSIFICATION	3.6237855367687936E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999013625994957	WITHOUT_CLASSIFICATION	9.863740050436177E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9998647698208488	WITHOUT_CLASSIFICATION	1.3523017915116668E-4	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9995771986731108	WITHOUT_CLASSIFICATION	4.228013268891602E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.982593952270236	WITHOUT_CLASSIFICATION	0.017406047729764056	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9997211706963977	WITHOUT_CLASSIFICATION	2.7882930360243564E-4	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999946725359686	WITHOUT_CLASSIFICATION	5.327464031458078E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999875353254033	WITHOUT_CLASSIFICATION	1.2464674596681033E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9997691180099384	WITHOUT_CLASSIFICATION	2.3088199006158472E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.99996110702667	WITHOUT_CLASSIFICATION	3.889297332992862E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9998889418744795	WITHOUT_CLASSIFICATION	1.110581255205779E-4	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999642038695328	WITHOUT_CLASSIFICATION	3.579613046727985E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999731942643862	WITHOUT_CLASSIFICATION	2.680573561377682E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999404417746915	WITHOUT_CLASSIFICATION	5.955822530838313E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999189197819897	WITHOUT_CLASSIFICATION	8.10802180104205E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999768267296024	WITHOUT_CLASSIFICATION	2.3173270397562888E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999808103388934	WITHOUT_CLASSIFICATION	1.9189661106552222E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.999582157332699	WITHOUT_CLASSIFICATION	4.178426673010921E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999188751826115	WITHOUT_CLASSIFICATION	8.1124817388629E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999260348668044	WITHOUT_CLASSIFICATION	7.396513319551301E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9998290514455644	WITHOUT_CLASSIFICATION	1.7094855443544583E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999670998970265	WITHOUT_CLASSIFICATION	3.290010297350904E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999424335680626	WITHOUT_CLASSIFICATION	5.756643193744426E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9998306462694612	WITHOUT_CLASSIFICATION	1.693537305389366E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999759555944338	WITHOUT_CLASSIFICATION	2.404440556623255E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999050739602673	WITHOUT_CLASSIFICATION	9.49260397327219E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999134515681968	WITHOUT_CLASSIFICATION	8.654843180317622E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9998339687947118	WITHOUT_CLASSIFICATION	1.6603120528821524E-4	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999782677258703	WITHOUT_CLASSIFICATION	2.17322741296593E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999080125269328	WITHOUT_CLASSIFICATION	9.198747306709014E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9998556751613984	WITHOUT_CLASSIFICATION	1.4432483860167962E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999770165164763	WITHOUT_CLASSIFICATION	2.2983483523786057E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998379576510258	WITHOUT_CLASSIFICATION	1.6204234897423264E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9998206993941875	WITHOUT_CLASSIFICATION	1.7930060581243095E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999513200909685	WITHOUT_CLASSIFICATION	4.867990903138572E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999962159206858	WITHOUT_CLASSIFICATION	3.7840793141666267E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9992961219485501	WITHOUT_CLASSIFICATION	7.038780514499277E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999914491029555	WITHOUT_CLASSIFICATION	8.55089704453874E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999987652418558	WITHOUT_CLASSIFICATION	1.2347581441477384E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999987652418558	WITHOUT_CLASSIFICATION	1.2347581441477384E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9992270224913385	WITHOUT_CLASSIFICATION	7.729775086615502E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9997823941625433	WITHOUT_CLASSIFICATION	2.176058374565621E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9949241070873824	WITHOUT_CLASSIFICATION	0.005075892912617579	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999386670412601	WITHOUT_CLASSIFICATION	6.133295873988825E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9998427771414043	WITHOUT_CLASSIFICATION	1.5722285859563593E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999770001576709	WITHOUT_CLASSIFICATION	2.2999842329099867E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9677433112660467	WITHOUT_CLASSIFICATION	0.03225668873395317	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999843978142733	WITHOUT_CLASSIFICATION	1.5602185726685507E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9998802249385882	WITHOUT_CLASSIFICATION	1.1977506141171522E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999421014354127	WITHOUT_CLASSIFICATION	5.7898564587206644E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999996233659143	WITHOUT_CLASSIFICATION	3.766340856996472E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999996233659143	WITHOUT_CLASSIFICATION	3.766340856996472E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999973619620207	WITHOUT_CLASSIFICATION	2.6380379792935326E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9997043016120584	WITHOUT_CLASSIFICATION	2.95698387941693E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9993548850353257	WITHOUT_CLASSIFICATION	6.451149646743714E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998750533384078	WITHOUT_CLASSIFICATION	1.2494666159221078E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999824606683391	WITHOUT_CLASSIFICATION	1.7539331660884658E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999946009494945	WITHOUT_CLASSIFICATION	5.3990505055005906E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999834643495956	WITHOUT_CLASSIFICATION	1.6535650404384813E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9994384054491938	WITHOUT_CLASSIFICATION	5.615945508061031E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999945891132883	WITHOUT_CLASSIFICATION	5.4108867117535424E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9997782603648998	WITHOUT_CLASSIFICATION	2.2173963510016553E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.999837205550645	WITHOUT_CLASSIFICATION	1.6279444935492974E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9998791640713309	WITHOUT_CLASSIFICATION	1.2083592866894191E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999336491948362	WITHOUT_CLASSIFICATION	6.635080516378994E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999336491948362	WITHOUT_CLASSIFICATION	6.635080516378994E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9994087886981844	WITHOUT_CLASSIFICATION	5.912113018155218E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999816600563165	WITHOUT_CLASSIFICATION	1.8339943683587452E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9997972963860978	WITHOUT_CLASSIFICATION	2.0270361390227053E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9995721346337397	WITHOUT_CLASSIFICATION	4.2786536626022114E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9998029456387381	WITHOUT_CLASSIFICATION	1.970543612620581E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998791787185222	WITHOUT_CLASSIFICATION	1.2082128147791669E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9998707261135769	WITHOUT_CLASSIFICATION	1.2927388642309447E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999359308275763	WITHOUT_CLASSIFICATION	6.406917242379158E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.998060784379631	WITHOUT_CLASSIFICATION	0.0019392156203690523	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999564297967534	WITHOUT_CLASSIFICATION	4.3570203246635394E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9993548850353257	WITHOUT_CLASSIFICATION	6.451149646743714E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9994581064146998	WITHOUT_CLASSIFICATION	5.41893585300238E-4	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9974239881360841	WITHOUT_CLASSIFICATION	0.002576011863916003	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999936051823926	WITHOUT_CLASSIFICATION	6.3948176074098845E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.99995919713193	WITHOUT_CLASSIFICATION	4.080286807005058E-5	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999389993254751	WITHOUT_CLASSIFICATION	6.1000674524950664E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999625712250275	WITHOUT_CLASSIFICATION	3.742877497258548E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999917826854856	WITHOUT_CLASSIFICATION	8.217314514331502E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9990613198885071	WITHOUT_CLASSIFICATION	9.386801114928851E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9997156600287703	WITHOUT_CLASSIFICATION	2.843399712297551E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9996990098551418	WITHOUT_CLASSIFICATION	3.009901448581904E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998814352870422	WITHOUT_CLASSIFICATION	1.1856471295786711E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999919539214431	WITHOUT_CLASSIFICATION	8.046078556942735E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999624656017632	WITHOUT_CLASSIFICATION	3.753439823692653E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999766568970936	WITHOUT_CLASSIFICATION	2.334310290640124E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999213886001677	WITHOUT_CLASSIFICATION	7.861139983236329E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9998340272972791	WITHOUT_CLASSIFICATION	1.659727027208098E-4	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.998334718969185	WITHOUT_CLASSIFICATION	0.001665281030814967	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999294078506207	WITHOUT_CLASSIFICATION	7.059214937937705E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9998380493205263	WITHOUT_CLASSIFICATION	1.619506794736971E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9990366200027697	WITHOUT_CLASSIFICATION	9.633799972301898E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999926409513725	WITHOUT_CLASSIFICATION	7.359048627429414E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9997380598825203	WITHOUT_CLASSIFICATION	2.6194011747976024E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.997619721917752	WITHOUT_CLASSIFICATION	0.002380278082248099	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999084326607458	WITHOUT_CLASSIFICATION	9.156733925418544E-5	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9997714384829383	WITHOUT_CLASSIFICATION	2.2856151706178912E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9997805037386799	WITHOUT_CLASSIFICATION	2.194962613201079E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999212276604874	WITHOUT_CLASSIFICATION	7.877233951253095E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9892683711582972	WITHOUT_CLASSIFICATION	0.010731628841702685	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998153316324019	WITHOUT_CLASSIFICATION	1.8466836759807072E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998153316324019	WITHOUT_CLASSIFICATION	1.8466836759807072E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998562289187409	WITHOUT_CLASSIFICATION	1.4377108125903962E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998632951241987	WITHOUT_CLASSIFICATION	1.3670487580122505E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999094694589327	WITHOUT_CLASSIFICATION	9.053054106731009E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9998799386501404	WITHOUT_CLASSIFICATION	1.2006134985956767E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999771301553023	WITHOUT_CLASSIFICATION	2.2869844697619486E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.999956835170202	WITHOUT_CLASSIFICATION	4.31648297980361E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999457294638053	WITHOUT_CLASSIFICATION	5.427053619473652E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9993590603875254	WITHOUT_CLASSIFICATION	6.409396124746403E-4	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998548119508592	WITHOUT_CLASSIFICATION	1.4518804914078105E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9996921036823472	WITHOUT_CLASSIFICATION	3.0789631765277945E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999925296588664	WITHOUT_CLASSIFICATION	7.470341133545336E-6	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9964629005368933	WITHOUT_CLASSIFICATION	0.003537099463106712	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998660645097067	WITHOUT_CLASSIFICATION	1.3393549029324764E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9998953383643299	WITHOUT_CLASSIFICATION	1.046616356701013E-4	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9996353333411305	WITHOUT_CLASSIFICATION	3.646666588693661E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9994425443603759	WITHOUT_CLASSIFICATION	5.574556396240675E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999990854741283	WITHOUT_CLASSIFICATION	9.145258716421049E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999080807459128	WITHOUT_CLASSIFICATION	9.191925408729802E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998141090677043	WITHOUT_CLASSIFICATION	1.85890932295671E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9998057783107762	WITHOUT_CLASSIFICATION	1.9422168922369332E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9997938487329588	WITHOUT_CLASSIFICATION	2.0615126704104516E-4	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999358639092625	WITHOUT_CLASSIFICATION	6.413609073757877E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9994104335058162	WITHOUT_CLASSIFICATION	5.895664941837613E-4	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999340370973	WITHOUT_CLASSIFICATION	6.596290270000985E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999162978995091	WITHOUT_CLASSIFICATION	8.370210049089061E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999995593977813	WITHOUT_CLASSIFICATION	4.406022187051643E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999498372548387	WITHOUT_CLASSIFICATION	5.0162745161454044E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.999967141776606	WITHOUT_CLASSIFICATION	3.285822339400223E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.99955796337617	WITHOUT_CLASSIFICATION	4.4203662383008783E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999938542609922	WITHOUT_CLASSIFICATION	6.14573900775676E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999747986409646	WITHOUT_CLASSIFICATION	2.5201359035480147E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999863753497569	WITHOUT_CLASSIFICATION	1.3624650243161924E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9997089389175126	WITHOUT_CLASSIFICATION	2.910610824874117E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999207370359802	WITHOUT_CLASSIFICATION	7.926296401984698E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999169361179694	WITHOUT_CLASSIFICATION	8.306388203059315E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999979746753788	WITHOUT_CLASSIFICATION	2.0253246212080704E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9997263974200447	WITHOUT_CLASSIFICATION	2.73602579955394E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9998161204533936	WITHOUT_CLASSIFICATION	1.8387954660633717E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999797352682981	WITHOUT_CLASSIFICATION	2.0264731701958854E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.8266623665622563	WITHOUT_CLASSIFICATION	0.17333763343774364	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9993133503879292	WITHOUT_CLASSIFICATION	6.86649612070732E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.998857844298906	WITHOUT_CLASSIFICATION	0.0011421557010939914	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999505114888301	WITHOUT_CLASSIFICATION	4.948851116977658E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9997689283717428	WITHOUT_CLASSIFICATION	2.3107162825723469E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999411664195046	WITHOUT_CLASSIFICATION	5.8833580495431364E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9972481328202104	WITHOUT_CLASSIFICATION	0.0027518671797897134	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999654009341702	WITHOUT_CLASSIFICATION	3.4599065829796764E-4	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999818828607182	WITHOUT_CLASSIFICATION	1.8117139281789623E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999178107119955	WITHOUT_CLASSIFICATION	8.218928800454603E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9996365026022075	WITHOUT_CLASSIFICATION	3.6349739779247556E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9987658834917836	WITHOUT_CLASSIFICATION	0.0012341165082163132	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999017908235941	WITHOUT_CLASSIFICATION	9.820917640580054E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999854101031295	WITHOUT_CLASSIFICATION	1.4589896870649538E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999233801532549	WITHOUT_CLASSIFICATION	7.661984674517894E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9998775862785184	WITHOUT_CLASSIFICATION	1.2241372148150777E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9997984343859138	WITHOUT_CLASSIFICATION	2.015656140861934E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9995998197720691	WITHOUT_CLASSIFICATION	4.001802279308021E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9995826049987127	WITHOUT_CLASSIFICATION	4.173950012873345E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999139099546495	WITHOUT_CLASSIFICATION	8.609004535057828E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999139099546495	WITHOUT_CLASSIFICATION	8.609004535057828E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9958319514658092	WITHOUT_CLASSIFICATION	0.004168048534190921	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.8993558298422686	WITHOUT_CLASSIFICATION	0.10064417015773143	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999722855131089	WITHOUT_CLASSIFICATION	2.7714486891108095E-5	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9698394912137697	WITHOUT_CLASSIFICATION	0.030160508786230292	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9998689217922541	WITHOUT_CLASSIFICATION	1.3107820774599708E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999695117301292	WITHOUT_CLASSIFICATION	3.048826987076007E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9997570868101694	WITHOUT_CLASSIFICATION	2.4291318983067886E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9870727611402865	WITHOUT_CLASSIFICATION	0.012927238859713338	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999991593737133	WITHOUT_CLASSIFICATION	8.40626286809516E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9984178376838079	WITHOUT_CLASSIFICATION	0.0015821623161920916	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9984796748978423	WITHOUT_CLASSIFICATION	0.0015203251021578019	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999786911095109	WITHOUT_CLASSIFICATION	2.13088904890952E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9995012706188761	WITHOUT_CLASSIFICATION	4.98729381123959E-4	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999661292226233	WITHOUT_CLASSIFICATION	3.3870777376715957E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999441754862632	WITHOUT_CLASSIFICATION	5.5824513736891406E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9742792334103321	WITHOUT_CLASSIFICATION	0.025720766589667914	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9975583604970703	WITHOUT_CLASSIFICATION	0.0024416395029297987	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998077502587099	WITHOUT_CLASSIFICATION	1.9224974129013176E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999597530268902	WITHOUT_CLASSIFICATION	4.024697310980716E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9673573527428512	WITHOUT_CLASSIFICATION	0.03264264725714874	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999722507278573	WITHOUT_CLASSIFICATION	2.7749272142625575E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9993344147748461	WITHOUT_CLASSIFICATION	6.655852251540092E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998625804066839	WITHOUT_CLASSIFICATION	1.3741959331612123E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9996939387705991	WITHOUT_CLASSIFICATION	3.060612294009829E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9997749458973237	WITHOUT_CLASSIFICATION	2.2505410267630385E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9998602279057596	WITHOUT_CLASSIFICATION	1.3977209424036972E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9998870990217282	WITHOUT_CLASSIFICATION	1.129009782717623E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999677767485794	WITHOUT_CLASSIFICATION	3.222325142058672E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9996086750144988	WITHOUT_CLASSIFICATION	3.913249855012445E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999734941929354	WITHOUT_CLASSIFICATION	2.6505807064724243E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999614932279429	WITHOUT_CLASSIFICATION	3.850677205699196E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999916193550911	WITHOUT_CLASSIFICATION	8.380644908904561E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999908419774308	WITHOUT_CLASSIFICATION	9.15802256915339E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9995712452183423	WITHOUT_CLASSIFICATION	4.2875478165780087E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998477762442625	WITHOUT_CLASSIFICATION	1.5222375573747607E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.999989189274479	WITHOUT_CLASSIFICATION	1.0810725520949164E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999670787425216	WITHOUT_CLASSIFICATION	3.2921257478385176E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999670787425216	WITHOUT_CLASSIFICATION	3.2921257478385176E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999647834583659	WITHOUT_CLASSIFICATION	3.521654163409802E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9998362491694572	WITHOUT_CLASSIFICATION	1.6375083054272883E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9970534804305301	WITHOUT_CLASSIFICATION	0.0029465195694698	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999894062169586	WITHOUT_CLASSIFICATION	1.0593783041349255E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9993444550502504	WITHOUT_CLASSIFICATION	6.555449497497133E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999710144387416	WITHOUT_CLASSIFICATION	2.8985561258483297E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9998770642850999	WITHOUT_CLASSIFICATION	1.229357149000451E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999734778674714	WITHOUT_CLASSIFICATION	2.6522132528648603E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999367633125646	WITHOUT_CLASSIFICATION	6.323668743529683E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999888858440353	WITHOUT_CLASSIFICATION	1.1114155964576844E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999711739809838	WITHOUT_CLASSIFICATION	2.8826019016225756E-5	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999727420218717	WITHOUT_CLASSIFICATION	2.725797812833335E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999489216911891	WITHOUT_CLASSIFICATION	5.1078308810823024E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999876124757861	WITHOUT_CLASSIFICATION	1.2387524213892164E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999996860043248	WITHOUT_CLASSIFICATION	3.1399567528291855E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999415914336682	WITHOUT_CLASSIFICATION	5.840856633177009E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999428020312864	WITHOUT_CLASSIFICATION	5.719796871373957E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9996640187875183	WITHOUT_CLASSIFICATION	3.359812124816528E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9995771974579487	WITHOUT_CLASSIFICATION	4.2280254205124895E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9998927195960844	WITHOUT_CLASSIFICATION	1.072804039155701E-4	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9975631708164827	WITHOUT_CLASSIFICATION	0.002436829183517325	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9918077471352355	WITHOUT_CLASSIFICATION	0.00819225286476467	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999801240297349	WITHOUT_CLASSIFICATION	1.9875970265061206E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999610142527926	WITHOUT_CLASSIFICATION	3.898574720735973E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9990606913630353	WITHOUT_CLASSIFICATION	9.393086369645495E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999790191681789	WITHOUT_CLASSIFICATION	2.098083182112802E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9993855832397879	WITHOUT_CLASSIFICATION	6.14416760212157E-4	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9996280730297018	WITHOUT_CLASSIFICATION	3.719269702982704E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9997203403946702	WITHOUT_CLASSIFICATION	2.7965960532979424E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9997999575728721	WITHOUT_CLASSIFICATION	2.0004242712791693E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.999997635082075	WITHOUT_CLASSIFICATION	2.3649179251127538E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9997912367405773	WITHOUT_CLASSIFICATION	2.0876325942269537E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999918933672849	WITHOUT_CLASSIFICATION	8.10663271499715E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999886915917597	WITHOUT_CLASSIFICATION	1.1308408240255292E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999362366553972	WITHOUT_CLASSIFICATION	6.376334460283184E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999973065011919	WITHOUT_CLASSIFICATION	2.6934988081072067E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998288062587368	WITHOUT_CLASSIFICATION	1.7119374126321323E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999827433765271	WITHOUT_CLASSIFICATION	1.725662347290842E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9997270174237192	WITHOUT_CLASSIFICATION	2.72982576280868E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998958316749208	WITHOUT_CLASSIFICATION	1.0416832507915226E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999678751528878	WITHOUT_CLASSIFICATION	3.212484711226615E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9990842915748113	WITHOUT_CLASSIFICATION	9.157084251885943E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9944493391360555	WITHOUT_CLASSIFICATION	0.005550660863944503	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9998995454043902	WITHOUT_CLASSIFICATION	1.0045459560980673E-4	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9986472344565902	WITHOUT_CLASSIFICATION	0.0013527655434098112	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9993000183713123	WITHOUT_CLASSIFICATION	6.999816286875923E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9990748445728834	WITHOUT_CLASSIFICATION	9.251554271164921E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9997135746172504	WITHOUT_CLASSIFICATION	2.8642538274951793E-4	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999677767485794	WITHOUT_CLASSIFICATION	3.222325142058672E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9997048585601273	WITHOUT_CLASSIFICATION	2.9514143987271216E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9997373551117515	WITHOUT_CLASSIFICATION	2.6264488824853617E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.999950520291022	WITHOUT_CLASSIFICATION	4.94797089779838E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999653708688059	WITHOUT_CLASSIFICATION	3.4629131194037625E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.999876117048744	WITHOUT_CLASSIFICATION	1.2388295125594282E-4	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9998803443031146	WITHOUT_CLASSIFICATION	1.1965569688531775E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9998889356043871	WITHOUT_CLASSIFICATION	1.1106439561302764E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999511216401472	WITHOUT_CLASSIFICATION	4.887835985283162E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9998840740723625	WITHOUT_CLASSIFICATION	1.1592592763749061E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998171256371778	WITHOUT_CLASSIFICATION	1.82874362822063E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999796458079854	WITHOUT_CLASSIFICATION	2.0354192014695887E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999879637615112	WITHOUT_CLASSIFICATION	1.2036238488722058E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9997044986517627	WITHOUT_CLASSIFICATION	2.9550134823733246E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999736900645957	WITHOUT_CLASSIFICATION	2.630993540430297E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999821245438981	WITHOUT_CLASSIFICATION	1.78754561018803E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998514154385021	WITHOUT_CLASSIFICATION	1.4858456149791912E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998949964807975	WITHOUT_CLASSIFICATION	1.0500351920248165E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998027912517303	WITHOUT_CLASSIFICATION	1.9720874826973194E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9996552055356698	WITHOUT_CLASSIFICATION	3.4479446433022064E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.996629245619618	WITHOUT_CLASSIFICATION	0.0033707543803820758	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.999922815385097	WITHOUT_CLASSIFICATION	7.718461490297401E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9998770709607996	WITHOUT_CLASSIFICATION	1.2292903920051515E-4	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9990559351754291	WITHOUT_CLASSIFICATION	9.440648245709965E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9991273492053058	WITHOUT_CLASSIFICATION	8.726507946942308E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999846000825096	WITHOUT_CLASSIFICATION	1.5399917490473E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999894365672203	WITHOUT_CLASSIFICATION	1.0563432779690276E-5	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999517966841615	WITHOUT_CLASSIFICATION	4.820331583850459E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9998811840025816	WITHOUT_CLASSIFICATION	1.1881599741829977E-4	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9983492809818334	WITHOUT_CLASSIFICATION	0.0016507190181666886	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999189435528194	WITHOUT_CLASSIFICATION	8.10564471805404E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999658899773683	WITHOUT_CLASSIFICATION	3.411002263158856E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9990297835190896	WITHOUT_CLASSIFICATION	9.702164809103621E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9996809480862201	WITHOUT_CLASSIFICATION	3.1905191377990937E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9995693379514289	WITHOUT_CLASSIFICATION	4.3066204857106373E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.7829610554308807	WITHOUT_CLASSIFICATION	0.21703894456911932	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999546572650915	WITHOUT_CLASSIFICATION	4.5342734908549455E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9998044584089788	WITHOUT_CLASSIFICATION	1.9554159102130837E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999283791043961	WITHOUT_CLASSIFICATION	7.162089560382878E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999283791043961	WITHOUT_CLASSIFICATION	7.162089560382878E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999189435528194	WITHOUT_CLASSIFICATION	8.10564471805404E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9994362981176896	WITHOUT_CLASSIFICATION	5.637018823103877E-4	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999899577411852	WITHOUT_CLASSIFICATION	1.0042258814877326E-5	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999264751195631	WITHOUT_CLASSIFICATION	7.352488043686356E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999430518897918	WITHOUT_CLASSIFICATION	5.694811020814636E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999721718388725	WITHOUT_CLASSIFICATION	2.7828161127420243E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9996542240465622	WITHOUT_CLASSIFICATION	3.457759534377618E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998402645094497	WITHOUT_CLASSIFICATION	1.597354905502744E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999274786479496	WITHOUT_CLASSIFICATION	7.252135205040557E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9997255478758129	WITHOUT_CLASSIFICATION	2.7445212418708467E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.999740388261231	WITHOUT_CLASSIFICATION	2.596117387690312E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9997372124199138	WITHOUT_CLASSIFICATION	2.627875800861747E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9996844391262588	WITHOUT_CLASSIFICATION	3.155608737411159E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.999721118947195	WITHOUT_CLASSIFICATION	2.7888105280512987E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999582682497056	WITHOUT_CLASSIFICATION	4.173175029432628E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9998882840722394	WITHOUT_CLASSIFICATION	1.1171592776053624E-4	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9998762077766282	WITHOUT_CLASSIFICATION	1.2379222337170482E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9998663977485884	WITHOUT_CLASSIFICATION	1.33602251411514E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999534513429205	WITHOUT_CLASSIFICATION	4.6548657079522136E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999489440646445	WITHOUT_CLASSIFICATION	5.105593535560373E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999900873577121	WITHOUT_CLASSIFICATION	9.912642287910122E-5	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999545020820125	WITHOUT_CLASSIFICATION	4.549791798750488E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9997729435618676	WITHOUT_CLASSIFICATION	2.2705643813231133E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9996302081692598	WITHOUT_CLASSIFICATION	3.6979183074020694E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998368921297075	WITHOUT_CLASSIFICATION	1.6310787029239981E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999588564395392	WITHOUT_CLASSIFICATION	4.114356046079249E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.999951934158274	WITHOUT_CLASSIFICATION	4.8065841726069936E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9975990484265548	WITHOUT_CLASSIFICATION	0.002400951573445233	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9988133436250385	WITHOUT_CLASSIFICATION	0.0011866563749615563	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998983469510772	WITHOUT_CLASSIFICATION	1.0165304892274145E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9997986217926043	WITHOUT_CLASSIFICATION	2.0137820739582216E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.999538009865167	WITHOUT_CLASSIFICATION	4.619901348329221E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999321443555614	WITHOUT_CLASSIFICATION	6.785564443849388E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999059462889089	WITHOUT_CLASSIFICATION	9.40537110911083E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999139099546495	WITHOUT_CLASSIFICATION	8.609004535057828E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9987498411449645	WITHOUT_CLASSIFICATION	0.0012501588550356062	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999807413474768	WITHOUT_CLASSIFICATION	1.9258652523210067E-5	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9991930814367807	WITHOUT_CLASSIFICATION	8.069185632192655E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999058129591128	WITHOUT_CLASSIFICATION	9.41870408872132E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999471106445693	WITHOUT_CLASSIFICATION	5.2889355430742904E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999787145169343	WITHOUT_CLASSIFICATION	2.128548306570869E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999787145169343	WITHOUT_CLASSIFICATION	2.128548306570869E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9992362016741183	WITHOUT_CLASSIFICATION	7.637983258817437E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9998084594761396	WITHOUT_CLASSIFICATION	1.9154052386037608E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9997912550394463	WITHOUT_CLASSIFICATION	2.087449605537308E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999454557287739	WITHOUT_CLASSIFICATION	5.454427122617861E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9997879946180109	WITHOUT_CLASSIFICATION	2.1200538198903857E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999949375615061	WITHOUT_CLASSIFICATION	5.062438493776506E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9998819650174995	WITHOUT_CLASSIFICATION	1.1803498250059937E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999384522416683	WITHOUT_CLASSIFICATION	6.154775833166761E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9998485341166379	WITHOUT_CLASSIFICATION	1.5146588336206637E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9998485341166379	WITHOUT_CLASSIFICATION	1.5146588336206637E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9998485341166379	WITHOUT_CLASSIFICATION	1.5146588336206637E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9998559711389701	WITHOUT_CLASSIFICATION	1.4402886102988567E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9939820667203704	WITHOUT_CLASSIFICATION	0.006017933279629619	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9997687996723192	WITHOUT_CLASSIFICATION	2.3120032768075984E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9742792334103321	WITHOUT_CLASSIFICATION	0.025720766589667914	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9997047479080206	WITHOUT_CLASSIFICATION	2.952520919793596E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9971349350783589	WITHOUT_CLASSIFICATION	0.0028650649216410305	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999880758793673	WITHOUT_CLASSIFICATION	1.1924120632704224E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999925303395598	WITHOUT_CLASSIFICATION	7.46966044023318E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9939820667203704	WITHOUT_CLASSIFICATION	0.006017933279629619	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999961456199591	WITHOUT_CLASSIFICATION	3.854380040907154E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999961456199591	WITHOUT_CLASSIFICATION	3.854380040907154E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999757391353862	WITHOUT_CLASSIFICATION	2.42608646137601E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999085456678294	WITHOUT_CLASSIFICATION	9.145433217060864E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997259410363821	WITHOUT_CLASSIFICATION	2.7405896361789786E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999917653733734	WITHOUT_CLASSIFICATION	8.234626626595242E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999662803638931	WITHOUT_CLASSIFICATION	3.371963610689005E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999494655492367	WITHOUT_CLASSIFICATION	5.053445076343109E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9996478010736485	WITHOUT_CLASSIFICATION	3.5219892635149065E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9996573286217354	WITHOUT_CLASSIFICATION	3.4267137826449407E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9997755083596094	WITHOUT_CLASSIFICATION	2.244916403906552E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999644705024505	WITHOUT_CLASSIFICATION	3.552949754951159E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999867092037228	WITHOUT_CLASSIFICATION	1.3290796277186215E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.999952264852394	WITHOUT_CLASSIFICATION	4.7735147606034156E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999201684261658	WITHOUT_CLASSIFICATION	7.983157383419314E-5	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9994426369715739	WITHOUT_CLASSIFICATION	5.573630284260473E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999968215043795	WITHOUT_CLASSIFICATION	3.1784956205672054E-6	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999884469966053	WITHOUT_CLASSIFICATION	1.1553003394807096E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9998264326341983	WITHOUT_CLASSIFICATION	1.7356736580169277E-4	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998029755897544	WITHOUT_CLASSIFICATION	1.9702441024575514E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9988890457489689	WITHOUT_CLASSIFICATION	0.0011109542510312313	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9994102449642602	WITHOUT_CLASSIFICATION	5.89755035739709E-4	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9998954507257385	WITHOUT_CLASSIFICATION	1.0454927426157611E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998625804066839	WITHOUT_CLASSIFICATION	1.3741959331612123E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999710144387416	WITHOUT_CLASSIFICATION	2.8985561258483297E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999965902855527	WITHOUT_CLASSIFICATION	3.409714447295306E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9977469577084932	WITHOUT_CLASSIFICATION	0.0022530422915067795	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999706793615609	WITHOUT_CLASSIFICATION	2.932063843903858E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9660356916909233	WITHOUT_CLASSIFICATION	0.03396430830907666	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998844572504815	WITHOUT_CLASSIFICATION	1.1554274951846014E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998844572504815	WITHOUT_CLASSIFICATION	1.1554274951846014E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9995995652892219	WITHOUT_CLASSIFICATION	4.0043471077801633E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9998772840537714	WITHOUT_CLASSIFICATION	1.2271594622851294E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999681853029273	WITHOUT_CLASSIFICATION	3.181469707264885E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999617842210959	WITHOUT_CLASSIFICATION	3.82157789040533E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9996696557883169	WITHOUT_CLASSIFICATION	3.3034421168317803E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999619216730246	WITHOUT_CLASSIFICATION	3.8078326975433386E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999039701056736	WITHOUT_CLASSIFICATION	9.602989432642688E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999685982020973	WITHOUT_CLASSIFICATION	3.1401797902647125E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999688423768737	WITHOUT_CLASSIFICATION	3.115762312627137E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999372805122699	WITHOUT_CLASSIFICATION	6.271948773006172E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999468761185228	WITHOUT_CLASSIFICATION	5.3123881477109586E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999845946612809	WITHOUT_CLASSIFICATION	1.540533871913483E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999610293985705	WITHOUT_CLASSIFICATION	3.897060142943972E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999715582164092	WITHOUT_CLASSIFICATION	2.844178359084966E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9997747649588108	WITHOUT_CLASSIFICATION	2.2523504118913067E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999059665030163	WITHOUT_CLASSIFICATION	9.403349698357311E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996769187612693	WITHOUT_CLASSIFICATION	3.230812387307542E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999887864017478	WITHOUT_CLASSIFICATION	1.1213598252073443E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999632127429633	WITHOUT_CLASSIFICATION	3.6787257036790376E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9927320844387103	WITHOUT_CLASSIFICATION	0.007267915561289688	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999295013182142	WITHOUT_CLASSIFICATION	7.049868178573975E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9997336343413425	WITHOUT_CLASSIFICATION	2.663656586575466E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.99994719899258	WITHOUT_CLASSIFICATION	5.280100741998476E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9996495165395995	WITHOUT_CLASSIFICATION	3.5048346040037273E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9998306348799182	WITHOUT_CLASSIFICATION	1.6936512008187504E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999610293985705	WITHOUT_CLASSIFICATION	3.897060142943972E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998629313025418	WITHOUT_CLASSIFICATION	1.3706869745825682E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9997747649588108	WITHOUT_CLASSIFICATION	2.2523504118913067E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999728480532369	WITHOUT_CLASSIFICATION	2.715194676309617E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9992646675356853	WITHOUT_CLASSIFICATION	7.353324643145868E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999546282059457	WITHOUT_CLASSIFICATION	4.53717940542419E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9992884433594087	WITHOUT_CLASSIFICATION	7.115566405914263E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9846208541845307	WITHOUT_CLASSIFICATION	0.015379145815469163	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9998531923644673	WITHOUT_CLASSIFICATION	1.4680763553265593E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9995819565518926	WITHOUT_CLASSIFICATION	4.180434481073043E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.999842858401298	WITHOUT_CLASSIFICATION	1.571415987020213E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9998781814144229	WITHOUT_CLASSIFICATION	1.2181858557714033E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.999737763676486	WITHOUT_CLASSIFICATION	2.6223632351396513E-4	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999960013576469	WITHOUT_CLASSIFICATION	3.998642353189177E-6	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9993730037544163	WITHOUT_CLASSIFICATION	6.269962455838137E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999528535143292	WITHOUT_CLASSIFICATION	4.714648567082115E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999719281068709	WITHOUT_CLASSIFICATION	2.807189312911433E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999920088749837	WITHOUT_CLASSIFICATION	7.99112501638113E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999419304797852	WITHOUT_CLASSIFICATION	5.806952021487138E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999671424782185	WITHOUT_CLASSIFICATION	3.2857521781510706E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999137477065553	WITHOUT_CLASSIFICATION	8.625229344466924E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9962357028354569	WITHOUT_CLASSIFICATION	0.003764297164542945	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999040624485076	WITHOUT_CLASSIFICATION	9.593755149234211E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997059484264794	WITHOUT_CLASSIFICATION	2.940515735206434E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999666601694781	WITHOUT_CLASSIFICATION	3.33398305219385E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999345912364165	WITHOUT_CLASSIFICATION	6.540876358357944E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.998598957805369	WITHOUT_CLASSIFICATION	0.0014010421946309502	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9997300615620802	WITHOUT_CLASSIFICATION	2.6993843791974534E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.999932277636209	WITHOUT_CLASSIFICATION	6.772236379104902E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9989583675608475	WITHOUT_CLASSIFICATION	0.0010416324391523603	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999961465261532	WITHOUT_CLASSIFICATION	3.853473846802124E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999961465261532	WITHOUT_CLASSIFICATION	3.853473846802124E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9984862727549294	WITHOUT_CLASSIFICATION	0.0015137272450706392	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999679118578	WITHOUT_CLASSIFICATION	3.208814219993738E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999887029274287	WITHOUT_CLASSIFICATION	1.1297072571331997E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9993255470791101	WITHOUT_CLASSIFICATION	6.744529208898455E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999854440638613	WITHOUT_CLASSIFICATION	1.455593613879278E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999899079261322	WITHOUT_CLASSIFICATION	1.0092073867805936E-5	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9998926021918116	WITHOUT_CLASSIFICATION	1.0739780818836449E-4	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999709079770109	WITHOUT_CLASSIFICATION	2.9092022989017694E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9996463691855306	WITHOUT_CLASSIFICATION	3.5363081446935363E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9998744479523302	WITHOUT_CLASSIFICATION	1.2555204766983107E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9997590614507145	WITHOUT_CLASSIFICATION	2.4093854928550047E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999076641072194	WITHOUT_CLASSIFICATION	9.233589278057229E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9997130223042159	WITHOUT_CLASSIFICATION	2.8697769578406605E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9616204147368868	WITHOUT_CLASSIFICATION	0.038379585263113344	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998935473888219	WITHOUT_CLASSIFICATION	1.0645261117814973E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999561926203007	WITHOUT_CLASSIFICATION	4.3807379699427786E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999872597436767	WITHOUT_CLASSIFICATION	1.274025632334814E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9986811356973943	WITHOUT_CLASSIFICATION	0.0013188643026057646	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999803611210526	WITHOUT_CLASSIFICATION	1.963887894743277E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999820457702089	WITHOUT_CLASSIFICATION	1.7954229791180663E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.999785843895952	WITHOUT_CLASSIFICATION	2.1415610404790136E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999803611210526	WITHOUT_CLASSIFICATION	1.963887894743277E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9982646820451552	WITHOUT_CLASSIFICATION	0.001735317954844811	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9998946282743864	WITHOUT_CLASSIFICATION	1.0537172561355098E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999937437145043	WITHOUT_CLASSIFICATION	6.256285495692455E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999937437145043	WITHOUT_CLASSIFICATION	6.256285495692455E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999861807175517	WITHOUT_CLASSIFICATION	1.381928244829555E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999953093392636	WITHOUT_CLASSIFICATION	4.690660736393664E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998657521805965	WITHOUT_CLASSIFICATION	1.342478194035866E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.999015064461105	WITHOUT_CLASSIFICATION	9.849355388950479E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999774725898334	WITHOUT_CLASSIFICATION	2.2527410166641055E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9992697787970372	WITHOUT_CLASSIFICATION	7.302212029628931E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999036591270879	WITHOUT_CLASSIFICATION	9.634087291199876E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9967735485985826	WITHOUT_CLASSIFICATION	0.003226451401417305	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999938137118141	WITHOUT_CLASSIFICATION	6.186288185955185E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999661552688368	WITHOUT_CLASSIFICATION	3.384473116320943E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9997048585601273	WITHOUT_CLASSIFICATION	2.9514143987271216E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999732949027949	WITHOUT_CLASSIFICATION	2.670509720522363E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999730253305787	WITHOUT_CLASSIFICATION	2.697466942118669E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999561926203007	WITHOUT_CLASSIFICATION	4.3807379699427786E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999774725898334	WITHOUT_CLASSIFICATION	2.2527410166641055E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9890137660972873	WITHOUT_CLASSIFICATION	0.01098623390271274	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9890137660972873	WITHOUT_CLASSIFICATION	0.01098623390271274	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9567779852195061	WITHOUT_CLASSIFICATION	0.04322201478049385	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999900230781616	WITHOUT_CLASSIFICATION	9.976921838255607E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999734495687689	WITHOUT_CLASSIFICATION	2.655043123104433E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998500932111507	WITHOUT_CLASSIFICATION	1.4990678884936641E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9998741833534375	WITHOUT_CLASSIFICATION	1.258166465625617E-4	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999780938818311	WITHOUT_CLASSIFICATION	2.1906118168943943E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9989113400819615	WITHOUT_CLASSIFICATION	0.0010886599180384784	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9995819049628508	WITHOUT_CLASSIFICATION	4.180950371491468E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999673664307314	WITHOUT_CLASSIFICATION	3.2633569268712347E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999998527817588	WITHOUT_CLASSIFICATION	1.4721824118969184E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9998476395870458	WITHOUT_CLASSIFICATION	1.523604129542127E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999997969158206	WITHOUT_CLASSIFICATION	2.0308417932414946E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999269124382734	WITHOUT_CLASSIFICATION	7.308756172667975E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999872597436767	WITHOUT_CLASSIFICATION	1.274025632334814E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999953093392636	WITHOUT_CLASSIFICATION	4.690660736393664E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998657521805965	WITHOUT_CLASSIFICATION	1.342478194035866E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998657521805965	WITHOUT_CLASSIFICATION	1.342478194035866E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999774725898334	WITHOUT_CLASSIFICATION	2.2527410166641055E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999774725898334	WITHOUT_CLASSIFICATION	2.2527410166641055E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9890137660972873	WITHOUT_CLASSIFICATION	0.01098623390271274	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999813931696883	WITHOUT_CLASSIFICATION	1.860683031175216E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.998768741391049	WITHOUT_CLASSIFICATION	0.0012312586089510446	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999967957069396	WITHOUT_CLASSIFICATION	3.2042930603778506E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997289357598658	WITHOUT_CLASSIFICATION	2.710642401343255E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9997740370637088	WITHOUT_CLASSIFICATION	2.2596293629126784E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9853786376241028	WITHOUT_CLASSIFICATION	0.01462136237589706	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9998680228376582	WITHOUT_CLASSIFICATION	1.3197716234181385E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9997513787139105	WITHOUT_CLASSIFICATION	2.4862128608951214E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999562078397874	WITHOUT_CLASSIFICATION	4.3792160212533897E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999953093392636	WITHOUT_CLASSIFICATION	4.690660736393664E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998657521805965	WITHOUT_CLASSIFICATION	1.342478194035866E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998657521805965	WITHOUT_CLASSIFICATION	1.342478194035866E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9995819049628508	WITHOUT_CLASSIFICATION	4.180950371491468E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999998527817588	WITHOUT_CLASSIFICATION	1.4721824118969184E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9995404318839834	WITHOUT_CLASSIFICATION	4.5956811601651057E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999939214486395	WITHOUT_CLASSIFICATION	6.0785513604481536E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999981847246758	WITHOUT_CLASSIFICATION	1.8152753242000787E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999981847246758	WITHOUT_CLASSIFICATION	1.8152753242000787E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998921445513383	WITHOUT_CLASSIFICATION	1.0785544866165637E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9997599798439349	WITHOUT_CLASSIFICATION	2.400201560649754E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999809142037257	WITHOUT_CLASSIFICATION	1.908579627434951E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999918254415848	WITHOUT_CLASSIFICATION	8.174558415154408E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999918254415848	WITHOUT_CLASSIFICATION	8.174558415154408E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999571868062404	WITHOUT_CLASSIFICATION	4.281319375961241E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999571868062404	WITHOUT_CLASSIFICATION	4.281319375961241E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999857678873528	WITHOUT_CLASSIFICATION	1.4232112647243738E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999857678873528	WITHOUT_CLASSIFICATION	1.4232112647243738E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999881559078935	WITHOUT_CLASSIFICATION	1.1844092106598617E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999683879035414	WITHOUT_CLASSIFICATION	3.1612096458680515E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9996128995225972	WITHOUT_CLASSIFICATION	3.8710047740267764E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999409148910023	WITHOUT_CLASSIFICATION	5.908510899772305E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999485348447446	WITHOUT_CLASSIFICATION	5.1465155255515044E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9997798620470927	WITHOUT_CLASSIFICATION	2.2013795290739443E-4	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999327572780315	WITHOUT_CLASSIFICATION	6.724272196845382E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9994270114603588	WITHOUT_CLASSIFICATION	5.729885396410531E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9989996696594157	WITHOUT_CLASSIFICATION	0.0010003303405843175	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999337046138397	WITHOUT_CLASSIFICATION	6.629538616031522E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999843648651797	WITHOUT_CLASSIFICATION	1.5635134820334393E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9988046773133152	WITHOUT_CLASSIFICATION	0.001195322686684704	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999110352197024	WITHOUT_CLASSIFICATION	8.896478029757898E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999110352197024	WITHOUT_CLASSIFICATION	8.896478029757898E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9995603747285442	WITHOUT_CLASSIFICATION	4.396252714558283E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999494655492367	WITHOUT_CLASSIFICATION	5.053445076343109E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9982538621664988	WITHOUT_CLASSIFICATION	0.0017461378335012153	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999279530239327	WITHOUT_CLASSIFICATION	7.204697606732887E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.999992719962062	WITHOUT_CLASSIFICATION	7.280037938015666E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9997726765144027	WITHOUT_CLASSIFICATION	2.2732348559727908E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9996049049881499	WITHOUT_CLASSIFICATION	3.950950118501797E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9995311368028812	WITHOUT_CLASSIFICATION	4.688631971187661E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999680480943911	WITHOUT_CLASSIFICATION	3.195190560883971E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9998948062073885	WITHOUT_CLASSIFICATION	1.0519379261163695E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999976790070426	WITHOUT_CLASSIFICATION	2.3209929574122776E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9995736144449616	WITHOUT_CLASSIFICATION	4.2638555503837154E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998003781538748	WITHOUT_CLASSIFICATION	1.9962184612516083E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999529840036228	WITHOUT_CLASSIFICATION	4.70159963772294E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9970618318203731	WITHOUT_CLASSIFICATION	0.002938168179626816	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999802772390135	WITHOUT_CLASSIFICATION	1.972276098650682E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999375238539867	WITHOUT_CLASSIFICATION	6.247614601323844E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9998525265439584	WITHOUT_CLASSIFICATION	1.4747345604166866E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999070095983289	WITHOUT_CLASSIFICATION	9.299040167119435E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999070095983289	WITHOUT_CLASSIFICATION	9.299040167119435E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999627237495591	WITHOUT_CLASSIFICATION	3.727625044099271E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9997048585601273	WITHOUT_CLASSIFICATION	2.9514143987271216E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999374876869157	WITHOUT_CLASSIFICATION	6.251231308430673E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999918414545357	WITHOUT_CLASSIFICATION	8.158545464301678E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.999918414545357	WITHOUT_CLASSIFICATION	8.158545464301678E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999782842394794	WITHOUT_CLASSIFICATION	2.1715760520587503E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999459481364937	WITHOUT_CLASSIFICATION	5.405186350628578E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999146049951733	WITHOUT_CLASSIFICATION	8.539500482673816E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9995646007651463	WITHOUT_CLASSIFICATION	4.353992348537018E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996857039826337	WITHOUT_CLASSIFICATION	3.142960173662958E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996857039826337	WITHOUT_CLASSIFICATION	3.142960173662958E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996857039826337	WITHOUT_CLASSIFICATION	3.142960173662958E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9995646007651463	WITHOUT_CLASSIFICATION	4.353992348537018E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999692678399185	WITHOUT_CLASSIFICATION	3.073216008156754E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999273540021212	WITHOUT_CLASSIFICATION	7.26459978787616E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9993745896198223	WITHOUT_CLASSIFICATION	6.254103801776026E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9997518540479272	WITHOUT_CLASSIFICATION	2.481459520727539E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9995995595319729	WITHOUT_CLASSIFICATION	4.0044046802717166E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9996874244539831	WITHOUT_CLASSIFICATION	3.1257554601686073E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999888604487571	WITHOUT_CLASSIFICATION	1.1139551242841803E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9991583317696215	WITHOUT_CLASSIFICATION	8.416682303785552E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999976790070426	WITHOUT_CLASSIFICATION	2.3209929574122776E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9984506005420642	WITHOUT_CLASSIFICATION	0.0015493994579357875	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999313602213894	WITHOUT_CLASSIFICATION	6.863977861062968E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999904970299986	WITHOUT_CLASSIFICATION	9.502970001361907E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995818166057542	WITHOUT_CLASSIFICATION	4.181833942458783E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999251346261299	WITHOUT_CLASSIFICATION	7.486537387009429E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9997467847491389	WITHOUT_CLASSIFICATION	2.532152508610145E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999793075119854	WITHOUT_CLASSIFICATION	2.069248801459289E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999288168293113	WITHOUT_CLASSIFICATION	7.118317068866996E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9994393867547207	WITHOUT_CLASSIFICATION	5.60613245279438E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999216148954563	WITHOUT_CLASSIFICATION	7.838510454375754E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997258796364379	WITHOUT_CLASSIFICATION	2.741203635620929E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999647075921759	WITHOUT_CLASSIFICATION	3.5292407823956124E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999801435556317	WITHOUT_CLASSIFICATION	1.9856444368375532E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999263820543652	WITHOUT_CLASSIFICATION	7.361794563478201E-5	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999970449390774	WITHOUT_CLASSIFICATION	2.955060922722766E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9998639343013518	WITHOUT_CLASSIFICATION	1.3606569864827578E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999266668321477	WITHOUT_CLASSIFICATION	7.33331678522839E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999790691307373	WITHOUT_CLASSIFICATION	2.0930869262785458E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9893021703995801	WITHOUT_CLASSIFICATION	0.010697829600419755	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999788747321439	WITHOUT_CLASSIFICATION	2.112526785619838E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999688138172318	WITHOUT_CLASSIFICATION	3.118618276823392E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999795000021443	WITHOUT_CLASSIFICATION	2.0499997855629046E-5	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9998638533829138	WITHOUT_CLASSIFICATION	1.3614661708609587E-4	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999695972478173	WITHOUT_CLASSIFICATION	3.0402752182744528E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9998808518903499	WITHOUT_CLASSIFICATION	1.191481096500499E-4	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999182958701924	WITHOUT_CLASSIFICATION	8.17041298075819E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9995251256454101	WITHOUT_CLASSIFICATION	4.748743545899562E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999782842394794	WITHOUT_CLASSIFICATION	2.1715760520587503E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997742569302472	WITHOUT_CLASSIFICATION	2.257430697526884E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9995646007651463	WITHOUT_CLASSIFICATION	4.353992348537018E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9996874244539831	WITHOUT_CLASSIFICATION	3.1257554601686073E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999313602213894	WITHOUT_CLASSIFICATION	6.863977861062968E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9995818166057542	WITHOUT_CLASSIFICATION	4.181833942458783E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9997467847491389	WITHOUT_CLASSIFICATION	2.532152508610145E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999904970299986	WITHOUT_CLASSIFICATION	9.502970001361907E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999793075119854	WITHOUT_CLASSIFICATION	2.069248801459289E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999216148954563	WITHOUT_CLASSIFICATION	7.838510454375754E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9994393867547207	WITHOUT_CLASSIFICATION	5.60613245279438E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999647075921759	WITHOUT_CLASSIFICATION	3.5292407823956124E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999934165581214	WITHOUT_CLASSIFICATION	6.583441878645585E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9982756399162196	WITHOUT_CLASSIFICATION	0.0017243600837803697	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9998149610463981	WITHOUT_CLASSIFICATION	1.8503895360188314E-4	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999666857154046	WITHOUT_CLASSIFICATION	3.331428459535842E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999109273904969	WITHOUT_CLASSIFICATION	8.907260950302183E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999473961147949	WITHOUT_CLASSIFICATION	5.260388520519897E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998386807673438	WITHOUT_CLASSIFICATION	1.613192326561773E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.999515184150102	WITHOUT_CLASSIFICATION	4.8481584989803063E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9994874933527685	WITHOUT_CLASSIFICATION	5.12506647231477E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9998570140960915	WITHOUT_CLASSIFICATION	1.429859039085096E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999433551658714	WITHOUT_CLASSIFICATION	5.664483412844439E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9989155941012855	WITHOUT_CLASSIFICATION	0.0010844058987145274	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998429865429742	WITHOUT_CLASSIFICATION	1.570134570258023E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999537553429503	WITHOUT_CLASSIFICATION	4.624465704982655E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998564253818827	WITHOUT_CLASSIFICATION	1.4357461811737433E-4	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999166608823162	WITHOUT_CLASSIFICATION	8.333911768378562E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998605535842047	WITHOUT_CLASSIFICATION	1.3944641579542952E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999557472045458	WITHOUT_CLASSIFICATION	4.425279545418274E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999797520162236	WITHOUT_CLASSIFICATION	2.0247983776374225E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9998160234053808	WITHOUT_CLASSIFICATION	1.83976594619308E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9996843575914016	WITHOUT_CLASSIFICATION	3.1564240859836406E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9996843575914016	WITHOUT_CLASSIFICATION	3.1564240859836406E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.998142423368501	WITHOUT_CLASSIFICATION	0.00185757663149888	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9994888681806786	WITHOUT_CLASSIFICATION	5.111318193214557E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9994888681806786	WITHOUT_CLASSIFICATION	5.111318193214557E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998831362340643	WITHOUT_CLASSIFICATION	1.1686376593564357E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998831362340643	WITHOUT_CLASSIFICATION	1.1686376593564357E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9997284914021882	WITHOUT_CLASSIFICATION	2.7150859781176537E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9997284914021882	WITHOUT_CLASSIFICATION	2.7150859781176537E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.999995292226629	WITHOUT_CLASSIFICATION	4.707773371028891E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.997793894441684	WITHOUT_CLASSIFICATION	0.0022061055583159914	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.997793894441684	WITHOUT_CLASSIFICATION	0.0022061055583159914	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999557373895526	WITHOUT_CLASSIFICATION	4.426261044743507E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999557373895526	WITHOUT_CLASSIFICATION	4.426261044743507E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9997427748019254	WITHOUT_CLASSIFICATION	2.572251980746059E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9997566007959838	WITHOUT_CLASSIFICATION	2.4339920401604583E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9997566007959838	WITHOUT_CLASSIFICATION	2.4339920401604583E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9997438809506035	WITHOUT_CLASSIFICATION	2.561190493965434E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9998986817635684	WITHOUT_CLASSIFICATION	1.01318236431608E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9997982521210822	WITHOUT_CLASSIFICATION	2.0174787891773395E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9997438809506035	WITHOUT_CLASSIFICATION	2.561190493965434E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9995750237323489	WITHOUT_CLASSIFICATION	4.249762676510459E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999979126814977	WITHOUT_CLASSIFICATION	2.087318502286677E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9996916965003776	WITHOUT_CLASSIFICATION	3.083034996224385E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999983419184851	WITHOUT_CLASSIFICATION	1.658081514977439E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999974768163591	WITHOUT_CLASSIFICATION	2.5231836410152878E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999974768163591	WITHOUT_CLASSIFICATION	2.52318364101529E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999873242904233	WITHOUT_CLASSIFICATION	1.2675709576725373E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998062505840322	WITHOUT_CLASSIFICATION	1.9374941596789577E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998062505840322	WITHOUT_CLASSIFICATION	1.9374941596789577E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998361639930141	WITHOUT_CLASSIFICATION	1.6383600698594624E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9996916965003776	WITHOUT_CLASSIFICATION	3.083034996224385E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999983419184851	WITHOUT_CLASSIFICATION	1.658081514977439E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999974768163591	WITHOUT_CLASSIFICATION	2.5231836410152878E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999974768163591	WITHOUT_CLASSIFICATION	2.52318364101529E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999873242904233	WITHOUT_CLASSIFICATION	1.2675709576725373E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9997295552376587	WITHOUT_CLASSIFICATION	2.7044476234124986E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998663931550122	WITHOUT_CLASSIFICATION	1.3360684498783774E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9985028197507944	WITHOUT_CLASSIFICATION	0.0014971802492056503	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9996997765787314	WITHOUT_CLASSIFICATION	3.002234212685729E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9998968953110835	WITHOUT_CLASSIFICATION	1.0310468891651972E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999929009906309	WITHOUT_CLASSIFICATION	7.09900936909371E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999872322255151	WITHOUT_CLASSIFICATION	1.2767774484847194E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999872322255151	WITHOUT_CLASSIFICATION	1.2767774484847194E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9989565298528129	WITHOUT_CLASSIFICATION	0.0010434701471870647	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9998041799937848	WITHOUT_CLASSIFICATION	1.9582000621516408E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9998041799937848	WITHOUT_CLASSIFICATION	1.9582000621516408E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999317775111616	WITHOUT_CLASSIFICATION	6.822248883838814E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9998044458866292	WITHOUT_CLASSIFICATION	1.9555411337082528E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9998044458866292	WITHOUT_CLASSIFICATION	1.9555411337082528E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9998415604026877	WITHOUT_CLASSIFICATION	1.5843959731244296E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9998415604026877	WITHOUT_CLASSIFICATION	1.5843959731244296E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999963934842922	WITHOUT_CLASSIFICATION	3.6065157078077116E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999963934842922	WITHOUT_CLASSIFICATION	3.6065157078077116E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9998041799937848	WITHOUT_CLASSIFICATION	1.9582000621516408E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999656959105534	WITHOUT_CLASSIFICATION	3.430408944665458E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999278201275179	WITHOUT_CLASSIFICATION	7.217987248208628E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999438040019484	WITHOUT_CLASSIFICATION	5.6195998051569985E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994900461451788	WITHOUT_CLASSIFICATION	5.099538548211804E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999525871265348	WITHOUT_CLASSIFICATION	4.741287346514021E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.999691852099591	WITHOUT_CLASSIFICATION	3.081479004089903E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999183490294196	WITHOUT_CLASSIFICATION	8.165097058045588E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9992844540311251	WITHOUT_CLASSIFICATION	7.155459688748777E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999944491883866	WITHOUT_CLASSIFICATION	5.550811613383946E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9997286797619589	WITHOUT_CLASSIFICATION	2.7132023804105163E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9997286797619589	WITHOUT_CLASSIFICATION	2.7132023804105163E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997641746883275	WITHOUT_CLASSIFICATION	2.3582531167239557E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997641746883275	WITHOUT_CLASSIFICATION	2.3582531167239557E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.999792655518125	WITHOUT_CLASSIFICATION	2.073444818748478E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993957027391098	WITHOUT_CLASSIFICATION	6.042972608901754E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993957027391098	WITHOUT_CLASSIFICATION	6.042972608901754E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993957027391098	WITHOUT_CLASSIFICATION	6.042972608901754E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999923746139917	WITHOUT_CLASSIFICATION	7.625386008341226E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999923746139917	WITHOUT_CLASSIFICATION	7.625386008341226E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998481004113512	WITHOUT_CLASSIFICATION	1.5189958864890112E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999718135331563	WITHOUT_CLASSIFICATION	2.818646684370707E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999621003883492	WITHOUT_CLASSIFICATION	3.789961165074432E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999969020147643	WITHOUT_CLASSIFICATION	3.0979852355412678E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998966888685877	WITHOUT_CLASSIFICATION	1.0331113141227235E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9997970679448288	WITHOUT_CLASSIFICATION	2.0293205517123205E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9965725370602871	WITHOUT_CLASSIFICATION	0.003427462939712897	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998481004113512	WITHOUT_CLASSIFICATION	1.5189958864890112E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999746311586607	WITHOUT_CLASSIFICATION	2.536884133932868E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.999718135331563	WITHOUT_CLASSIFICATION	2.818646684370707E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999621003883492	WITHOUT_CLASSIFICATION	3.789961165074432E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998176042020028	WITHOUT_CLASSIFICATION	1.8239579799721913E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999611522107941	WITHOUT_CLASSIFICATION	3.8847789205799944E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998591664123537	WITHOUT_CLASSIFICATION	1.4083358764621E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999275019524337	WITHOUT_CLASSIFICATION	7.24980475663002E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999600379222706	WITHOUT_CLASSIFICATION	3.996207772929289E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9997864278949256	WITHOUT_CLASSIFICATION	2.1357210507445148E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998176042020028	WITHOUT_CLASSIFICATION	1.8239579799721913E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999397583412951	WITHOUT_CLASSIFICATION	6.0241658704866356E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999397583412951	WITHOUT_CLASSIFICATION	6.0241658704866356E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9991589554233296	WITHOUT_CLASSIFICATION	8.410445766705248E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999632028501612	WITHOUT_CLASSIFICATION	3.6797149838842655E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999204381752043	WITHOUT_CLASSIFICATION	7.956182479577705E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9994400899424126	WITHOUT_CLASSIFICATION	5.599100575873168E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992537400621198	WITHOUT_CLASSIFICATION	7.462599378803023E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999945859378572	WITHOUT_CLASSIFICATION	5.414062142795485E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9997950862547956	WITHOUT_CLASSIFICATION	2.0491374520435675E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9998923501076399	WITHOUT_CLASSIFICATION	1.0764989236007642E-4	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9998839245343939	WITHOUT_CLASSIFICATION	1.1607546560600583E-4	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999771071479463	WITHOUT_CLASSIFICATION	2.2892852053695507E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998860897903884	WITHOUT_CLASSIFICATION	1.139102096116292E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9994400899424126	WITHOUT_CLASSIFICATION	5.599100575873168E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992537400621198	WITHOUT_CLASSIFICATION	7.462599378803023E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9998137760557934	WITHOUT_CLASSIFICATION	1.8622394420653857E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999653192485386	WITHOUT_CLASSIFICATION	3.468075146140253E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9998273453138193	WITHOUT_CLASSIFICATION	1.7265468618073604E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999613411398791	WITHOUT_CLASSIFICATION	3.865886012081152E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999523179538088	WITHOUT_CLASSIFICATION	4.768204619126546E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999212611215044	WITHOUT_CLASSIFICATION	7.873887849564745E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999372837377994	WITHOUT_CLASSIFICATION	6.271626220058671E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9991764795801356	WITHOUT_CLASSIFICATION	8.235204198644418E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999663252385519	WITHOUT_CLASSIFICATION	3.367476144809747E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.99995470832714	WITHOUT_CLASSIFICATION	4.529167286014819E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999692647174673	WITHOUT_CLASSIFICATION	3.073528253281799E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9996631659989528	WITHOUT_CLASSIFICATION	3.3683400104729365E-4	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999940899442937	WITHOUT_CLASSIFICATION	5.910055706299557E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.99995470832714	WITHOUT_CLASSIFICATION	4.529167286014819E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999692647174673	WITHOUT_CLASSIFICATION	3.073528253281799E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9996631659989528	WITHOUT_CLASSIFICATION	3.3683400104729365E-4	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998729163336935	WITHOUT_CLASSIFICATION	1.270836663064935E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9988163054241416	WITHOUT_CLASSIFICATION	0.0011836945758584687	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9995184971961679	WITHOUT_CLASSIFICATION	4.8150280383207385E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9979002471405702	WITHOUT_CLASSIFICATION	0.002099752859429748	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9997870644033306	WITHOUT_CLASSIFICATION	2.1293559666935968E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9998515357171994	WITHOUT_CLASSIFICATION	1.4846428280060214E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9998200326981322	WITHOUT_CLASSIFICATION	1.7996730186777712E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.999919181456987	WITHOUT_CLASSIFICATION	8.081854301308815E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999857831291824	WITHOUT_CLASSIFICATION	1.4216870817519323E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9828056935507784	WITHOUT_CLASSIFICATION	0.01719430644922161	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9997164843200137	WITHOUT_CLASSIFICATION	2.8351567998626274E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9997093160155173	WITHOUT_CLASSIFICATION	2.906839844827314E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999866094757067	WITHOUT_CLASSIFICATION	1.3390524293277737E-5	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9995176071740269	WITHOUT_CLASSIFICATION	4.823928259730818E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.999907620833226	WITHOUT_CLASSIFICATION	9.237916677394623E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9986942048386516	WITHOUT_CLASSIFICATION	0.001305795161348439	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9998657773928568	WITHOUT_CLASSIFICATION	1.342226071432668E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999885954905504	WITHOUT_CLASSIFICATION	1.1404509449607794E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9998544591959077	WITHOUT_CLASSIFICATION	1.4554080409230017E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999224488193265	WITHOUT_CLASSIFICATION	7.755118067346802E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999722116765508	WITHOUT_CLASSIFICATION	2.778832344915981E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999722116765508	WITHOUT_CLASSIFICATION	2.778832344915981E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9997319896056494	WITHOUT_CLASSIFICATION	2.680103943506141E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9997319896056494	WITHOUT_CLASSIFICATION	2.680103943506141E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999989479729107	WITHOUT_CLASSIFICATION	1.0520270892974716E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999989479729107	WITHOUT_CLASSIFICATION	1.0520270892974716E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999763991577175	WITHOUT_CLASSIFICATION	2.3600842282381785E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999991457401881	WITHOUT_CLASSIFICATION	8.54259811816516E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999920558636414	WITHOUT_CLASSIFICATION	7.944136358587456E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999889856705674	WITHOUT_CLASSIFICATION	1.1014329432692844E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999970194004815	WITHOUT_CLASSIFICATION	2.9805995186465975E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999920838070406	WITHOUT_CLASSIFICATION	7.916192959309211E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999249645189205	WITHOUT_CLASSIFICATION	7.503548107948124E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999745004775756	WITHOUT_CLASSIFICATION	2.5499522424409926E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999763991577175	WITHOUT_CLASSIFICATION	2.3600842282381785E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999991457401881	WITHOUT_CLASSIFICATION	8.54259811816516E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999920558636414	WITHOUT_CLASSIFICATION	7.944136358587456E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999970194004815	WITHOUT_CLASSIFICATION	2.9805995186465975E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999920838070406	WITHOUT_CLASSIFICATION	7.916192959309211E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9998565865778279	WITHOUT_CLASSIFICATION	1.4341342217215688E-4	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9998821136815232	WITHOUT_CLASSIFICATION	1.1788631847673322E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996875606110333	WITHOUT_CLASSIFICATION	3.124393889667799E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996875606110333	WITHOUT_CLASSIFICATION	3.124393889667799E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9998589168377555	WITHOUT_CLASSIFICATION	1.4108316224442787E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998497107842508	WITHOUT_CLASSIFICATION	1.5028921574922037E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9971814312379766	WITHOUT_CLASSIFICATION	0.0028185687620233915	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999514610090962	WITHOUT_CLASSIFICATION	4.853899090382858E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999514610090962	WITHOUT_CLASSIFICATION	4.853899090382858E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9995203496700471	WITHOUT_CLASSIFICATION	4.796503299528948E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999935025637772	WITHOUT_CLASSIFICATION	6.497436222789642E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.999733158199632	WITHOUT_CLASSIFICATION	2.6684180036795483E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999305060458403	WITHOUT_CLASSIFICATION	6.949395415969058E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9995849257311981	WITHOUT_CLASSIFICATION	4.150742688019558E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9989155941012855	WITHOUT_CLASSIFICATION	0.0010844058987145274	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998429865429742	WITHOUT_CLASSIFICATION	1.570134570258023E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999537553429503	WITHOUT_CLASSIFICATION	4.624465704982655E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998564253818827	WITHOUT_CLASSIFICATION	1.4357461811737433E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999557472045458	WITHOUT_CLASSIFICATION	4.425279545418274E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999797520162236	WITHOUT_CLASSIFICATION	2.0247983776374225E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9995203496700471	WITHOUT_CLASSIFICATION	4.796503299528948E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999935025637772	WITHOUT_CLASSIFICATION	6.497436222789642E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999305060458403	WITHOUT_CLASSIFICATION	6.949395415969058E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9998516124946373	WITHOUT_CLASSIFICATION	1.4838750536270518E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9971814312379766	WITHOUT_CLASSIFICATION	0.0028185687620233915	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9971814312379766	WITHOUT_CLASSIFICATION	0.0028185687620233915	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998860897903884	WITHOUT_CLASSIFICATION	1.139102096116292E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998860897903884	WITHOUT_CLASSIFICATION	1.139102096116292E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993882280622431	WITHOUT_CLASSIFICATION	6.117719377569563E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993882280622431	WITHOUT_CLASSIFICATION	6.117719377569563E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999392852764015	WITHOUT_CLASSIFICATION	6.071472359861385E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9994806277724628	WITHOUT_CLASSIFICATION	5.193722275371923E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999080094240719	WITHOUT_CLASSIFICATION	9.199057592806764E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999543057829128	WITHOUT_CLASSIFICATION	4.5694217087289456E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9996385686557707	WITHOUT_CLASSIFICATION	3.614313442292723E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998857808063334	WITHOUT_CLASSIFICATION	1.1421919366662745E-4	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9982212708685714	WITHOUT_CLASSIFICATION	0.001778729131428627	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999914817403716	WITHOUT_CLASSIFICATION	8.518259628445494E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9997040634818327	WITHOUT_CLASSIFICATION	2.95936518167304E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999697212501749	WITHOUT_CLASSIFICATION	3.0278749825072076E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999495678390523	WITHOUT_CLASSIFICATION	5.043216094777344E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999632652556061	WITHOUT_CLASSIFICATION	3.6734744393852315E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999608477632362	WITHOUT_CLASSIFICATION	3.9152236763772894E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999121942775338	WITHOUT_CLASSIFICATION	8.780572246625548E-5	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999607061548338	WITHOUT_CLASSIFICATION	3.929384516620264E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.99987582699992	WITHOUT_CLASSIFICATION	1.241730000800608E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999771835297852	WITHOUT_CLASSIFICATION	2.2816470214885197E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999178061344108	WITHOUT_CLASSIFICATION	8.219386558916347E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998429865429742	WITHOUT_CLASSIFICATION	1.570134570258023E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998564253818827	WITHOUT_CLASSIFICATION	1.4357461811737433E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9998516124946373	WITHOUT_CLASSIFICATION	1.4838750536270518E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9971814312379766	WITHOUT_CLASSIFICATION	0.0028185687620233915	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998860897903884	WITHOUT_CLASSIFICATION	1.139102096116292E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993882280622431	WITHOUT_CLASSIFICATION	6.117719377569563E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9996582088397805	WITHOUT_CLASSIFICATION	3.417911602194664E-4	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999096708789086	WITHOUT_CLASSIFICATION	9.03291210914418E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999816224387079	WITHOUT_CLASSIFICATION	1.8377561292046862E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9986983536386486	WITHOUT_CLASSIFICATION	0.0013016463613514599	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987845848191428	WITHOUT_CLASSIFICATION	0.0012154151808571698	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987845848191428	WITHOUT_CLASSIFICATION	0.0012154151808571698	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9998464887849067	WITHOUT_CLASSIFICATION	1.5351121509333263E-4	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999599340294528	WITHOUT_CLASSIFICATION	4.006597054717528E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999599018443732	WITHOUT_CLASSIFICATION	4.009815562677444E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999606660566416	WITHOUT_CLASSIFICATION	3.933394335851168E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999855026691523	WITHOUT_CLASSIFICATION	1.449733084778296E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999855026691523	WITHOUT_CLASSIFICATION	1.449733084778296E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999527386674896	WITHOUT_CLASSIFICATION	4.726133251037022E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.999968388196328	WITHOUT_CLASSIFICATION	3.1611803671922874E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9998884434757989	WITHOUT_CLASSIFICATION	1.1155652420115281E-4	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9996513362408788	WITHOUT_CLASSIFICATION	3.4866375912115394E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.999992575023302	WITHOUT_CLASSIFICATION	7.424976697981611E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999501139048813	WITHOUT_CLASSIFICATION	4.988609511875383E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.999952602525295	WITHOUT_CLASSIFICATION	4.7397474704863885E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9997238229865771	WITHOUT_CLASSIFICATION	2.761770134229629E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9900854574208013	WITHOUT_CLASSIFICATION	0.009914542579198667	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9998027235528217	WITHOUT_CLASSIFICATION	1.9727644717821297E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9992678578091092	WITHOUT_CLASSIFICATION	7.321421908908538E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999402941191822	WITHOUT_CLASSIFICATION	5.970588081778565E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999925668651272	WITHOUT_CLASSIFICATION	7.43313487282605E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999064969952064	WITHOUT_CLASSIFICATION	9.350300479349174E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9993606975702652	WITHOUT_CLASSIFICATION	6.393024297348175E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9995635696198415	WITHOUT_CLASSIFICATION	4.36430380158415E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9997745127898698	WITHOUT_CLASSIFICATION	2.254872101302487E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.999858677562031	WITHOUT_CLASSIFICATION	1.4132243796907167E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9993935599405073	WITHOUT_CLASSIFICATION	6.064400594928563E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999736625034193	WITHOUT_CLASSIFICATION	2.6337496580689135E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.999844860496459	WITHOUT_CLASSIFICATION	1.5513950354098047E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999639928068812	WITHOUT_CLASSIFICATION	3.6007193118738946E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999639928068812	WITHOUT_CLASSIFICATION	3.6007193118738946E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9995503320593574	WITHOUT_CLASSIFICATION	4.496679406425925E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.999872388486527	WITHOUT_CLASSIFICATION	1.2761151347285462E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9995311368028812	WITHOUT_CLASSIFICATION	4.688631971187661E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9995311368028812	WITHOUT_CLASSIFICATION	4.688631971187661E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.6395210218206764	DEFECT	0.3604789781793238	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9980211292081639	WITHOUT_CLASSIFICATION	0.001978870791836143	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999176630729685	WITHOUT_CLASSIFICATION	8.233692703149668E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9998642194371712	WITHOUT_CLASSIFICATION	1.357805628288201E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9998642194371712	WITHOUT_CLASSIFICATION	1.357805628288201E-4	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9996239488914599	WITHOUT_CLASSIFICATION	3.7605110854007734E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999849124359602	WITHOUT_CLASSIFICATION	1.5087564039818938E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999774738657797	WITHOUT_CLASSIFICATION	2.252613422031255E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999523834523971	WITHOUT_CLASSIFICATION	4.761654760286349E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9953603424250004	WITHOUT_CLASSIFICATION	0.004639657574999676	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999673891091639	WITHOUT_CLASSIFICATION	3.261089083602178E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999558602616145	WITHOUT_CLASSIFICATION	4.413973838542611E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999440884464081	WITHOUT_CLASSIFICATION	5.5911553591818E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.999980240286911	WITHOUT_CLASSIFICATION	1.975971308903493E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9997767927367214	WITHOUT_CLASSIFICATION	2.2320726327875715E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999750415293064	WITHOUT_CLASSIFICATION	2.4958470693629456E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999906155323653	WITHOUT_CLASSIFICATION	9.3844676346319E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999944291542178	WITHOUT_CLASSIFICATION	5.570845782246051E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9979177397761431	WITHOUT_CLASSIFICATION	0.0020822602238568916	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999066779615021	WITHOUT_CLASSIFICATION	9.332203849788703E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9998573063789472	WITHOUT_CLASSIFICATION	1.426936210528362E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999859431562026	WITHOUT_CLASSIFICATION	1.405684379745992E-5	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999640930814546	WITHOUT_CLASSIFICATION	3.5906918545388546E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999513830420949	WITHOUT_CLASSIFICATION	4.8616957905127625E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999545820089792	WITHOUT_CLASSIFICATION	4.541799102078621E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999740766245582	WITHOUT_CLASSIFICATION	2.5923375441874783E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999781655187777	WITHOUT_CLASSIFICATION	2.1834481222202062E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999480693096165	WITHOUT_CLASSIFICATION	5.193069038340296E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998354251510516	WITHOUT_CLASSIFICATION	1.6457484894845918E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999826660696044	WITHOUT_CLASSIFICATION	1.7333930395586334E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9987069015348722	WITHOUT_CLASSIFICATION	0.0012930984651277951	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9504974726393131	WITHOUT_CLASSIFICATION	0.049502527360687054	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998467349445024	WITHOUT_CLASSIFICATION	1.5326505549771727E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999602674416853	WITHOUT_CLASSIFICATION	3.973255831466661E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999308647377971	WITHOUT_CLASSIFICATION	6.913526220286572E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999762510131478	WITHOUT_CLASSIFICATION	2.374898685216961E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9979177397761431	WITHOUT_CLASSIFICATION	0.0020822602238568916	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998467349445024	WITHOUT_CLASSIFICATION	1.5326505549771727E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999602674416853	WITHOUT_CLASSIFICATION	3.973255831466661E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999762510131478	WITHOUT_CLASSIFICATION	2.374898685216961E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999430368651029	WITHOUT_CLASSIFICATION	5.69631348971454E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999825633638726	WITHOUT_CLASSIFICATION	1.7436636127323265E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999508875704582	WITHOUT_CLASSIFICATION	4.9112429541771354E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999743990319514	WITHOUT_CLASSIFICATION	2.5600968048608026E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999908735322157	WITHOUT_CLASSIFICATION	9.126467784317176E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9994582781442484	WITHOUT_CLASSIFICATION	5.417218557515796E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999736625034193	WITHOUT_CLASSIFICATION	2.6337496580689135E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9997946507476522	WITHOUT_CLASSIFICATION	2.0534925234772623E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.999983933145123	WITHOUT_CLASSIFICATION	1.6066854877007496E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.991614719895417	WITHOUT_CLASSIFICATION	0.008385280104582865	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9990906826210264	WITHOUT_CLASSIFICATION	9.093173789735156E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9990906826210264	WITHOUT_CLASSIFICATION	9.093173789735156E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999603468108637	WITHOUT_CLASSIFICATION	3.965318913635994E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.999974889936078	WITHOUT_CLASSIFICATION	2.5110063922015584E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999467200164128	WITHOUT_CLASSIFICATION	5.327998358722497E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9994074566716045	WITHOUT_CLASSIFICATION	5.925433283955371E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998450970656785	WITHOUT_CLASSIFICATION	1.5490293432144647E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998520878738891	WITHOUT_CLASSIFICATION	1.4791212611080774E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9301713487279678	WITHOUT_CLASSIFICATION	0.0698286512720322	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.99997726381778	WITHOUT_CLASSIFICATION	2.2736182220085304E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999351476300764	WITHOUT_CLASSIFICATION	6.485236992357847E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.99980185896721	WITHOUT_CLASSIFICATION	1.9814103279005597E-4	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999228016520477	WITHOUT_CLASSIFICATION	7.71983479523458E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9998705784448255	WITHOUT_CLASSIFICATION	1.2942155517441933E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999125425875042	WITHOUT_CLASSIFICATION	8.74574124957913E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999676245324726	WITHOUT_CLASSIFICATION	3.237546752739186E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9994637561381071	WITHOUT_CLASSIFICATION	5.362438618929668E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.999931248559156	WITHOUT_CLASSIFICATION	6.87514408439424E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9998698304360821	WITHOUT_CLASSIFICATION	1.3016956391781606E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999556674906794	WITHOUT_CLASSIFICATION	4.433250932049419E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998631851658139	WITHOUT_CLASSIFICATION	1.3681483418623988E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9996553296175018	WITHOUT_CLASSIFICATION	3.4467038249813987E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999608716663075	WITHOUT_CLASSIFICATION	3.9128333692509885E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9997699017639263	WITHOUT_CLASSIFICATION	2.3009823607367412E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999194123757496	WITHOUT_CLASSIFICATION	8.058762425042068E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999304910597484	WITHOUT_CLASSIFICATION	6.950894025156842E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.7467040337941652	WITHOUT_CLASSIFICATION	0.2532959662058349	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9995157210745786	WITHOUT_CLASSIFICATION	4.8427892542140405E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9996617126702987	WITHOUT_CLASSIFICATION	3.382873297013391E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999605864231994	WITHOUT_CLASSIFICATION	3.9413576800670076E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9998995548903274	WITHOUT_CLASSIFICATION	1.0044510967251341E-4	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999463092258913	WITHOUT_CLASSIFICATION	5.369077410857031E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999764260037686	WITHOUT_CLASSIFICATION	2.357399623139925E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999648066955432	WITHOUT_CLASSIFICATION	3.51933044568467E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999643777613458	WITHOUT_CLASSIFICATION	3.5622238654228086E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.999374569837098	WITHOUT_CLASSIFICATION	6.254301629020008E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9998969239935694	WITHOUT_CLASSIFICATION	1.0307600643052477E-4	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9994148598024655	WITHOUT_CLASSIFICATION	5.851401975345475E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999863850317334	WITHOUT_CLASSIFICATION	1.3614968266521409E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999775356211885	WITHOUT_CLASSIFICATION	2.2464378811459245E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9920804476904302	WITHOUT_CLASSIFICATION	0.007919552309569755	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9988925628039375	WITHOUT_CLASSIFICATION	0.0011074371960625156	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9998507483742936	WITHOUT_CLASSIFICATION	1.4925162570631907E-4	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9959611225799457	WITHOUT_CLASSIFICATION	0.004038877420054214	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9918064454615536	WITHOUT_CLASSIFICATION	0.008193554538446295	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9994020206201911	WITHOUT_CLASSIFICATION	5.979793798088841E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9986203042947889	WITHOUT_CLASSIFICATION	0.0013796957052111317	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998356223889442	WITHOUT_CLASSIFICATION	1.6437761105575442E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.99981522905363	WITHOUT_CLASSIFICATION	1.847709463699825E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998036226896506	WITHOUT_CLASSIFICATION	1.9637731034933084E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999064341834979	WITHOUT_CLASSIFICATION	9.356581650215346E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9930618850248155	WITHOUT_CLASSIFICATION	0.006938114975184437	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9995228441499129	WITHOUT_CLASSIFICATION	4.771558500871207E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.996784842685903	WITHOUT_CLASSIFICATION	0.003215157314097063	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9991931907534173	WITHOUT_CLASSIFICATION	8.068092465825942E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9996462620397906	WITHOUT_CLASSIFICATION	3.5373796020949895E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9994009895118077	WITHOUT_CLASSIFICATION	5.990104881923203E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9991587554968818	WITHOUT_CLASSIFICATION	8.412445031181525E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9977800462480494	WITHOUT_CLASSIFICATION	0.002219953751950532	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9977800462480494	WITHOUT_CLASSIFICATION	0.002219953751950532	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9991371415097503	WITHOUT_CLASSIFICATION	8.628584902496227E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9998665242641962	WITHOUT_CLASSIFICATION	1.3347573580382537E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9991557067383187	WITHOUT_CLASSIFICATION	8.442932616814408E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9994605118267648	WITHOUT_CLASSIFICATION	5.394881732352397E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9997482261067075	WITHOUT_CLASSIFICATION	2.5177389329253E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998318208440615	WITHOUT_CLASSIFICATION	1.6817915593853584E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997059484264794	WITHOUT_CLASSIFICATION	2.940515735206434E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9995395826298491	WITHOUT_CLASSIFICATION	4.6041737015087595E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999737001423844	WITHOUT_CLASSIFICATION	2.6299857615650168E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.999993298974069	WITHOUT_CLASSIFICATION	6.701025931042834E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997682971385842	WITHOUT_CLASSIFICATION	2.3170286141580538E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999350122580215	WITHOUT_CLASSIFICATION	6.498774197843298E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.999940340634169	WITHOUT_CLASSIFICATION	5.965936583087937E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998243853022935	WITHOUT_CLASSIFICATION	1.7561469770667088E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999759070856762	WITHOUT_CLASSIFICATION	2.4092914323736303E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999214840389358	WITHOUT_CLASSIFICATION	7.851596106425943E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999551270557291	WITHOUT_CLASSIFICATION	4.487294427088994E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998848797159032	WITHOUT_CLASSIFICATION	1.1512028409682909E-4	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9987030029324434	WITHOUT_CLASSIFICATION	0.001296997067556631	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9992112464865004	WITHOUT_CLASSIFICATION	7.887535134996395E-4	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998730289509203	WITHOUT_CLASSIFICATION	1.2697104907967582E-4	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.999955014329638	WITHOUT_CLASSIFICATION	4.498567036200382E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9998669849404929	WITHOUT_CLASSIFICATION	1.330150595071137E-4	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999407973170166	WITHOUT_CLASSIFICATION	5.9202682983408036E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9997929499895539	WITHOUT_CLASSIFICATION	2.070500104461347E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.999496579376915	WITHOUT_CLASSIFICATION	5.0342062308495E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999587019927544	WITHOUT_CLASSIFICATION	4.1298007245611E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9993359152180104	WITHOUT_CLASSIFICATION	6.640847819896237E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999662342881831	WITHOUT_CLASSIFICATION	3.3765711816851955E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9988639367151362	WITHOUT_CLASSIFICATION	0.0011360632848638225	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9994685762492644	WITHOUT_CLASSIFICATION	5.314237507355308E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9998371370805436	WITHOUT_CLASSIFICATION	1.6286291945635345E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999578723646597	WITHOUT_CLASSIFICATION	4.2127635340311636E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999352706408822	WITHOUT_CLASSIFICATION	6.472935911777368E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999578723646597	WITHOUT_CLASSIFICATION	4.2127635340311636E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9997702219985176	WITHOUT_CLASSIFICATION	2.297780014824101E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998839730637302	WITHOUT_CLASSIFICATION	0.0011602693626980248	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998839730637302	WITHOUT_CLASSIFICATION	0.0011602693626980248	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998839730637302	WITHOUT_CLASSIFICATION	0.0011602693626980248	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999939529940923	WITHOUT_CLASSIFICATION	6.047005907751518E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999939529940923	WITHOUT_CLASSIFICATION	6.047005907751518E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9982881094432727	WITHOUT_CLASSIFICATION	0.00171189055672719	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9998610814035448	WITHOUT_CLASSIFICATION	1.3891859645528132E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9998654913453826	WITHOUT_CLASSIFICATION	1.3450865461737407E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999691663901858	WITHOUT_CLASSIFICATION	3.08336098141262E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999898029203433	WITHOUT_CLASSIFICATION	1.019707965665797E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999902236553448	WITHOUT_CLASSIFICATION	9.776344655164191E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9995651677930153	WITHOUT_CLASSIFICATION	4.348322069847081E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997604906980248	WITHOUT_CLASSIFICATION	2.3950930197536014E-4	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999615055779626	WITHOUT_CLASSIFICATION	3.8494422037313186E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999524408367613	WITHOUT_CLASSIFICATION	4.7559163238708795E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999752679575742	WITHOUT_CLASSIFICATION	2.473204242588797E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.999670198710624	WITHOUT_CLASSIFICATION	3.2980128937593154E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999497408423844	WITHOUT_CLASSIFICATION	5.0259157615580006E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999575376758186	WITHOUT_CLASSIFICATION	4.2462324181390094E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999484170265146	WITHOUT_CLASSIFICATION	5.158297348545208E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999776724490346	WITHOUT_CLASSIFICATION	2.2327550965519134E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998155971160871	WITHOUT_CLASSIFICATION	1.8440288391280839E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999432691543351	WITHOUT_CLASSIFICATION	5.673084566502467E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999432691543351	WITHOUT_CLASSIFICATION	5.673084566502467E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999544763422944	WITHOUT_CLASSIFICATION	4.552365770559507E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999595979823144	WITHOUT_CLASSIFICATION	4.040201768558913E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999595979823144	WITHOUT_CLASSIFICATION	4.040201768558913E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9997594974560673	WITHOUT_CLASSIFICATION	2.4050254393266358E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999598573719329	WITHOUT_CLASSIFICATION	4.014262806712499E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999808237055942	WITHOUT_CLASSIFICATION	1.917629440576259E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999405748352439	WITHOUT_CLASSIFICATION	5.942516475612177E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.999979886333914	WITHOUT_CLASSIFICATION	2.0113666086008742E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9997530694684249	WITHOUT_CLASSIFICATION	2.4693053157509104E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999634386003059	WITHOUT_CLASSIFICATION	3.656139969397115E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999795237687676	WITHOUT_CLASSIFICATION	2.0476231232377455E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999805254791057	WITHOUT_CLASSIFICATION	1.947452089442859E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999909173580694	WITHOUT_CLASSIFICATION	9.082641930482439E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999854515125914	WITHOUT_CLASSIFICATION	1.4548487408549372E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.99912799085025	WITHOUT_CLASSIFICATION	8.720091497500641E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999965902855527	WITHOUT_CLASSIFICATION	3.409714447295306E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999755557816907	WITHOUT_CLASSIFICATION	2.4444218309262037E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997604906980248	WITHOUT_CLASSIFICATION	2.3950930197536014E-4	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999505224285228	WITHOUT_CLASSIFICATION	4.947757147727902E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999979485643594	WITHOUT_CLASSIFICATION	2.051435640542126E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999979485643594	WITHOUT_CLASSIFICATION	2.051435640542126E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9998230321062327	WITHOUT_CLASSIFICATION	1.769678937673901E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9987070844395294	WITHOUT_CLASSIFICATION	0.0012929155604705796	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9998551543886564	WITHOUT_CLASSIFICATION	1.4484561134365823E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9998618999147032	WITHOUT_CLASSIFICATION	1.3810008529682063E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999787332436032	WITHOUT_CLASSIFICATION	2.126675639671527E-5	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999480981574218	WITHOUT_CLASSIFICATION	5.1901842578285304E-5	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9991036413652158	WITHOUT_CLASSIFICATION	8.963586347842285E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9897983953768938	WITHOUT_CLASSIFICATION	0.01020160462310602	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9991116588572653	WITHOUT_CLASSIFICATION	8.883411427348401E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.999442259077654	WITHOUT_CLASSIFICATION	5.577409223459372E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9998793949981118	WITHOUT_CLASSIFICATION	1.2060500188812888E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9983688153974561	WITHOUT_CLASSIFICATION	0.0016311846025438446	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.998514933267084	WITHOUT_CLASSIFICATION	0.0014850667329160828	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.999928258971214	WITHOUT_CLASSIFICATION	7.174102878605387E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999899528273721	WITHOUT_CLASSIFICATION	1.0047172627818963E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9998759474754326	WITHOUT_CLASSIFICATION	1.2405252456745917E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999598394038796	WITHOUT_CLASSIFICATION	4.016059612040149E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999565935576559	WITHOUT_CLASSIFICATION	4.340644234412065E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999943278129929	WITHOUT_CLASSIFICATION	5.672187007048607E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998861492630176	WITHOUT_CLASSIFICATION	1.138507369824753E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999120378056505	WITHOUT_CLASSIFICATION	8.796219434949949E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9997503392135157	WITHOUT_CLASSIFICATION	2.4966078648425524E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999336040706633	WITHOUT_CLASSIFICATION	6.639592933664727E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999976664956646	WITHOUT_CLASSIFICATION	2.333504335346571E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9995477841824129	WITHOUT_CLASSIFICATION	4.522158175871101E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9981816430047725	WITHOUT_CLASSIFICATION	0.0018183569952273672	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9991577316096256	WITHOUT_CLASSIFICATION	8.422683903744778E-4	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999890364476499	WITHOUT_CLASSIFICATION	1.0963552350142673E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9997675375737731	WITHOUT_CLASSIFICATION	2.32462426226818E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9995577480719997	WITHOUT_CLASSIFICATION	4.422519280003343E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.999069709286036	WITHOUT_CLASSIFICATION	9.30290713963853E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9997804488427692	WITHOUT_CLASSIFICATION	2.1955115723090214E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9248654093670313	WITHOUT_CLASSIFICATION	0.07513459063296873	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999167430971223	WITHOUT_CLASSIFICATION	8.325690287768234E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9991577316096256	WITHOUT_CLASSIFICATION	8.422683903744778E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9994457036659488	WITHOUT_CLASSIFICATION	5.542963340512512E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999167430971223	WITHOUT_CLASSIFICATION	8.325690287768234E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9991684412723719	WITHOUT_CLASSIFICATION	8.315587276281704E-4	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999749211478485	WITHOUT_CLASSIFICATION	2.5078852151529102E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999343141404324	WITHOUT_CLASSIFICATION	6.568585956757733E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9997140690108243	WITHOUT_CLASSIFICATION	2.859309891757501E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999052657706017	WITHOUT_CLASSIFICATION	9.473422939832642E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998214108427282	WITHOUT_CLASSIFICATION	1.7858915727178188E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998214108427282	WITHOUT_CLASSIFICATION	1.7858915727178188E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999849621182245	WITHOUT_CLASSIFICATION	1.5037881775477171E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998706462149137	WITHOUT_CLASSIFICATION	1.293537850862279E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999421795420416	WITHOUT_CLASSIFICATION	5.782045795853038E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999421795420416	WITHOUT_CLASSIFICATION	5.782045795853038E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999796782812219	WITHOUT_CLASSIFICATION	2.0321718778169868E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9998074580454681	WITHOUT_CLASSIFICATION	1.9254195453196544E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9998600604535276	WITHOUT_CLASSIFICATION	1.3993954647240628E-4	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9945309334580266	WITHOUT_CLASSIFICATION	0.00546906654197341	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999511835384802	WITHOUT_CLASSIFICATION	4.881646151977313E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9996975842964023	WITHOUT_CLASSIFICATION	3.0241570359770456E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998541684852912	WITHOUT_CLASSIFICATION	1.4583151470869843E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999658416517917	WITHOUT_CLASSIFICATION	3.415834820830561E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999752133417036	WITHOUT_CLASSIFICATION	2.4786658296489426E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999349089539061	WITHOUT_CLASSIFICATION	6.509104609386248E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999055505353436	WITHOUT_CLASSIFICATION	9.444946465639222E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.999918257115656	WITHOUT_CLASSIFICATION	8.174288434402668E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9998104792235177	WITHOUT_CLASSIFICATION	1.8952077648221104E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9995849491442214	WITHOUT_CLASSIFICATION	4.1505085577868926E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999390381492073	WITHOUT_CLASSIFICATION	6.0961850792705236E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9997631626048176	WITHOUT_CLASSIFICATION	2.3683739518228454E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9998385122062852	WITHOUT_CLASSIFICATION	1.614877937148079E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999729077321357	WITHOUT_CLASSIFICATION	2.7092267864409308E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9991521656321345	WITHOUT_CLASSIFICATION	8.478343678654636E-4	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9997461306112965	WITHOUT_CLASSIFICATION	2.5386938870349104E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998171256371778	WITHOUT_CLASSIFICATION	1.82874362822063E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998171256371778	WITHOUT_CLASSIFICATION	1.82874362822063E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999866917763787	WITHOUT_CLASSIFICATION	1.3308223621318344E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999503872278339	WITHOUT_CLASSIFICATION	4.9612772166033213E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997258796364379	WITHOUT_CLASSIFICATION	2.741203635620929E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9997412894700459	WITHOUT_CLASSIFICATION	2.5871052995410983E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9998414446462945	WITHOUT_CLASSIFICATION	1.5855535370546935E-4	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9998812629155506	WITHOUT_CLASSIFICATION	1.187370844494262E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9997052436406428	WITHOUT_CLASSIFICATION	2.9475635935711613E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.999733019262101	WITHOUT_CLASSIFICATION	2.669807378990579E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999576225747	WITHOUT_CLASSIFICATION	4.237742524799054E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999988610724195	WITHOUT_CLASSIFICATION	1.138927580491291E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999942192027407	WITHOUT_CLASSIFICATION	5.780797259336178E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9996801355912571	WITHOUT_CLASSIFICATION	3.198644087428442E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999689953055163	WITHOUT_CLASSIFICATION	3.1004694483600093E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.999971269327176	WITHOUT_CLASSIFICATION	2.873067282405419E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999980137208014	WITHOUT_CLASSIFICATION	1.986279198609789E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9994853514264648	WITHOUT_CLASSIFICATION	5.146485735352359E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9989400398053654	WITHOUT_CLASSIFICATION	0.001059960194634584	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9983055070767353	WITHOUT_CLASSIFICATION	0.0016944929232646738	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999840490638441	WITHOUT_CLASSIFICATION	1.5950936155981956E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9996502178800137	WITHOUT_CLASSIFICATION	3.4978211998622097E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9998927480936544	WITHOUT_CLASSIFICATION	1.072519063456807E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999665314269217	WITHOUT_CLASSIFICATION	3.346857307823898E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999910150221659	WITHOUT_CLASSIFICATION	8.98497783409272E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9990260171776919	WITHOUT_CLASSIFICATION	9.73982822308144E-4	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9918762734988308	WITHOUT_CLASSIFICATION	0.008123726501169173	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999829108808036	WITHOUT_CLASSIFICATION	1.7089119196391345E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.999972681496084	WITHOUT_CLASSIFICATION	2.7318503916028583E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999715863949121	WITHOUT_CLASSIFICATION	2.8413605087823024E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9996705955094727	WITHOUT_CLASSIFICATION	3.294044905272888E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9997130914821706	WITHOUT_CLASSIFICATION	2.869085178294773E-4	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999550628493609	WITHOUT_CLASSIFICATION	4.4937150639125895E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.999979682882487	WITHOUT_CLASSIFICATION	2.0317117513052473E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9998183919034719	WITHOUT_CLASSIFICATION	1.816080965282199E-4	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9993898162592868	WITHOUT_CLASSIFICATION	6.101837407131391E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9998860791803161	WITHOUT_CLASSIFICATION	1.139208196838741E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998139651481642	WITHOUT_CLASSIFICATION	1.8603485183567726E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9998760855007638	WITHOUT_CLASSIFICATION	1.2391449923618658E-4	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9975530555244965	WITHOUT_CLASSIFICATION	0.0024469444755035566	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9829831812378927	WITHOUT_CLASSIFICATION	0.017016818762107228	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.999992636649833	WITHOUT_CLASSIFICATION	7.363350167128279E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9972561358902474	WITHOUT_CLASSIFICATION	0.002743864109752486	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9972561358902474	WITHOUT_CLASSIFICATION	0.002743864109752486	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999632048296446	WITHOUT_CLASSIFICATION	3.67951703552941E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9998656965893183	WITHOUT_CLASSIFICATION	1.3430341068167587E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999434732158043	WITHOUT_CLASSIFICATION	5.6526784195610555E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9997810299815443	WITHOUT_CLASSIFICATION	2.18970018455694E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999885954905504	WITHOUT_CLASSIFICATION	1.1404509449607794E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9998544591959077	WITHOUT_CLASSIFICATION	1.4554080409230017E-4	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999363790451693	WITHOUT_CLASSIFICATION	6.362095483080622E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9982372490979309	WITHOUT_CLASSIFICATION	0.0017627509020692249	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9996167588109915	WITHOUT_CLASSIFICATION	3.832411890084415E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999527674955263	WITHOUT_CLASSIFICATION	4.7232504473654336E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.999938615618991	WITHOUT_CLASSIFICATION	6.138438100897211E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999907725294828	WITHOUT_CLASSIFICATION	9.227470517303745E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999915307416205	WITHOUT_CLASSIFICATION	8.469258379396373E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999971428559584	WITHOUT_CLASSIFICATION	2.857144041595502E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999960240071007	WITHOUT_CLASSIFICATION	3.975992899318137E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999853373985126	WITHOUT_CLASSIFICATION	1.4662601487407271E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999732685453588	WITHOUT_CLASSIFICATION	2.67314546410627E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998932404883699	WITHOUT_CLASSIFICATION	1.0675951163009453E-4	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999727987917555	WITHOUT_CLASSIFICATION	2.7201208244390762E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998913645492615	WITHOUT_CLASSIFICATION	1.0863545073848174E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999744738369516	WITHOUT_CLASSIFICATION	2.5526163048448382E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999847556402142	WITHOUT_CLASSIFICATION	1.5244359785904059E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999593271342977	WITHOUT_CLASSIFICATION	4.067286570237078E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999966558436026	WITHOUT_CLASSIFICATION	3.3441563973561234E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999756492128913	WITHOUT_CLASSIFICATION	2.4350787108633553E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999752212938778	WITHOUT_CLASSIFICATION	2.477870612213993E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999828937956173	WITHOUT_CLASSIFICATION	1.7106204382738762E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999103875992589	WITHOUT_CLASSIFICATION	8.96124007411264E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999690107035595	WITHOUT_CLASSIFICATION	3.0989296440472603E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999325739473586	WITHOUT_CLASSIFICATION	6.742605264149772E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999875675613165	WITHOUT_CLASSIFICATION	1.243243868360309E-5	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999529289636486	WITHOUT_CLASSIFICATION	4.7071036351334984E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999712943754275	WITHOUT_CLASSIFICATION	2.870562457244177E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998139651481642	WITHOUT_CLASSIFICATION	1.8603485183567726E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9998409529164984	WITHOUT_CLASSIFICATION	1.5904708350158084E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999683115574837	WITHOUT_CLASSIFICATION	3.1688442516339516E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999683115574837	WITHOUT_CLASSIFICATION	3.1688442516339516E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999712121390829	WITHOUT_CLASSIFICATION	2.8787860917119984E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9997838320450568	WITHOUT_CLASSIFICATION	2.1616795494330387E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999714286716507	WITHOUT_CLASSIFICATION	2.8571328349271148E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999842042438234	WITHOUT_CLASSIFICATION	1.579575617655491E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.999990092307073	WITHOUT_CLASSIFICATION	9.90769292696277E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999949687569935	WITHOUT_CLASSIFICATION	5.031243006490327E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.99996297720832	WITHOUT_CLASSIFICATION	3.702279167995363E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999763696395596	WITHOUT_CLASSIFICATION	2.363036044050549E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999880001439694	WITHOUT_CLASSIFICATION	1.1999856030733682E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.999911702041725	WITHOUT_CLASSIFICATION	8.829795827506676E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999623266111903	WITHOUT_CLASSIFICATION	3.767338880972536E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999645057674925	WITHOUT_CLASSIFICATION	3.549423250737476E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999930056087343	WITHOUT_CLASSIFICATION	6.994391265629747E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9998213244911127	WITHOUT_CLASSIFICATION	1.7867550888736052E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.999788799229704	WITHOUT_CLASSIFICATION	2.1120077029593032E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9997850884814294	WITHOUT_CLASSIFICATION	2.1491151857063503E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9998651893987255	WITHOUT_CLASSIFICATION	1.3481060127450677E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999315373821456	WITHOUT_CLASSIFICATION	6.846261785443119E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9994964156327414	WITHOUT_CLASSIFICATION	5.035843672586564E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999153474183388	WITHOUT_CLASSIFICATION	8.465258166121496E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999339483998314	WITHOUT_CLASSIFICATION	6.605160016863999E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999003839439515	WITHOUT_CLASSIFICATION	9.961605604855503E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999795320447988	WITHOUT_CLASSIFICATION	2.046795520116937E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9998887106066744	WITHOUT_CLASSIFICATION	1.1128939332565855E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999871304764434	WITHOUT_CLASSIFICATION	1.2869523556606992E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999801453068007	WITHOUT_CLASSIFICATION	1.9854693199250944E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9998935988936775	WITHOUT_CLASSIFICATION	1.0640110632249839E-4	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999752319269722	WITHOUT_CLASSIFICATION	2.476807302784551E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999570855680417	WITHOUT_CLASSIFICATION	4.291443195820881E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.999983933145123	WITHOUT_CLASSIFICATION	1.6066854877007496E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999983933145123	WITHOUT_CLASSIFICATION	1.6066854877007496E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999010524757467	WITHOUT_CLASSIFICATION	9.894752425336048E-5	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9998735692680037	WITHOUT_CLASSIFICATION	1.2643073199625345E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999652088955026	WITHOUT_CLASSIFICATION	3.479110449745498E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999229211730992	WITHOUT_CLASSIFICATION	7.707882690081202E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9998887106066744	WITHOUT_CLASSIFICATION	1.1128939332565855E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999871304764434	WITHOUT_CLASSIFICATION	1.2869523556606992E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999801453068007	WITHOUT_CLASSIFICATION	1.9854693199250944E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999752319269722	WITHOUT_CLASSIFICATION	2.476807302784551E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998471046573648	WITHOUT_CLASSIFICATION	1.528953426351969E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9998177128333999	WITHOUT_CLASSIFICATION	1.8228716660013362E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999969761502983	WITHOUT_CLASSIFICATION	3.023849701706287E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999852568321362	WITHOUT_CLASSIFICATION	1.4743167863707048E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999748500576033	WITHOUT_CLASSIFICATION	2.5149942396563254E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999321021054374	WITHOUT_CLASSIFICATION	6.789789456259509E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999539239559924	WITHOUT_CLASSIFICATION	4.607604400763566E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.99982969112799	WITHOUT_CLASSIFICATION	1.7030887200991787E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999523508329463	WITHOUT_CLASSIFICATION	4.764916705374622E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999854065754037	WITHOUT_CLASSIFICATION	1.4593424596240597E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999393323995728	WITHOUT_CLASSIFICATION	6.0667600427189325E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999958933631047	WITHOUT_CLASSIFICATION	4.106636895239159E-6	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9997540955121614	WITHOUT_CLASSIFICATION	2.4590448783849483E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999858708836609	WITHOUT_CLASSIFICATION	1.4129116339193499E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999703582042827	WITHOUT_CLASSIFICATION	2.964179571718909E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999954245153785	WITHOUT_CLASSIFICATION	4.575484621456666E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999800703633018	WITHOUT_CLASSIFICATION	1.9929636698117513E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9997830372807425	WITHOUT_CLASSIFICATION	2.16962719257537E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9997478415035823	WITHOUT_CLASSIFICATION	2.5215849641770826E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999229211730992	WITHOUT_CLASSIFICATION	7.707882690081202E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9998177128333999	WITHOUT_CLASSIFICATION	1.8228716660013362E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.999969761502983	WITHOUT_CLASSIFICATION	3.023849701706287E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999748500576033	WITHOUT_CLASSIFICATION	2.5149942396563254E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999321021054374	WITHOUT_CLASSIFICATION	6.789789456259509E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999539239559924	WITHOUT_CLASSIFICATION	4.607604400763566E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.99982969112799	WITHOUT_CLASSIFICATION	1.7030887200991787E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999377365939222	WITHOUT_CLASSIFICATION	6.226340607794929E-5	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9905354995155293	WITHOUT_CLASSIFICATION	0.009464500484470628	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999504730139263	WITHOUT_CLASSIFICATION	4.9526986073762845E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999532504494243	WITHOUT_CLASSIFICATION	4.674955057574404E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9996156026542808	WITHOUT_CLASSIFICATION	3.843973457191518E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9996156026542808	WITHOUT_CLASSIFICATION	3.843973457191518E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.999923159434778	WITHOUT_CLASSIFICATION	7.684056522187579E-5	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9998617138512387	WITHOUT_CLASSIFICATION	1.3828614876141567E-4	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999548898416448	WITHOUT_CLASSIFICATION	4.511015835511536E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999579235521975	WITHOUT_CLASSIFICATION	4.207644780248197E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999969359943857	WITHOUT_CLASSIFICATION	3.0640056142936808E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9998571885585106	WITHOUT_CLASSIFICATION	1.4281144148939792E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999894916177179	WITHOUT_CLASSIFICATION	1.0508382282192757E-5	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999520958759351	WITHOUT_CLASSIFICATION	4.790412406481156E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9998475004655664	WITHOUT_CLASSIFICATION	1.5249953443353422E-4	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9996630937655859	WITHOUT_CLASSIFICATION	3.3690623441411723E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9994966399821201	WITHOUT_CLASSIFICATION	5.033600178798498E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999391985282309	WITHOUT_CLASSIFICATION	6.080147176900635E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9996473570095002	WITHOUT_CLASSIFICATION	3.5264299049981543E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9997924689653677	WITHOUT_CLASSIFICATION	2.0753103463228302E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999947728029665	WITHOUT_CLASSIFICATION	5.227197033505601E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.999854308346163	WITHOUT_CLASSIFICATION	1.4569165383698744E-4	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999523767456086	WITHOUT_CLASSIFICATION	4.762325439133542E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999640313445561	WITHOUT_CLASSIFICATION	3.596865544392124E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9994768740409484	WITHOUT_CLASSIFICATION	5.231259590515974E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999997104755001	WITHOUT_CLASSIFICATION	2.895244998985396E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9967041818846674	WITHOUT_CLASSIFICATION	0.003295818115332684	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999717392415944	WITHOUT_CLASSIFICATION	2.8260758405624895E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999577784679774	WITHOUT_CLASSIFICATION	4.222153202252297E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999911478957217	WITHOUT_CLASSIFICATION	8.852104278326799E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999313193059302	WITHOUT_CLASSIFICATION	6.868069406993117E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9994911262984656	WITHOUT_CLASSIFICATION	5.088737015344044E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999911478957217	WITHOUT_CLASSIFICATION	8.852104278326799E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9997924689653677	WITHOUT_CLASSIFICATION	2.0753103463228302E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999134764109964	WITHOUT_CLASSIFICATION	8.652358900365146E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998199415619258	WITHOUT_CLASSIFICATION	1.8005843807415565E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999528506889869	WITHOUT_CLASSIFICATION	4.714931101315771E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9981122922774124	WITHOUT_CLASSIFICATION	0.0018877077225875891	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.999994014852414	WITHOUT_CLASSIFICATION	5.985147586016954E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999622449598946	WITHOUT_CLASSIFICATION	3.7755040105334384E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9998824007207181	WITHOUT_CLASSIFICATION	1.1759927928182002E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999918716295508	WITHOUT_CLASSIFICATION	8.128370449108649E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9640515080154145	WITHOUT_CLASSIFICATION	0.03594849198458552	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.998405976370139	WITHOUT_CLASSIFICATION	0.0015940236298611031	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9982910206954851	WITHOUT_CLASSIFICATION	0.0017089793045148348	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999572830046951	WITHOUT_CLASSIFICATION	4.2716995304955264E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9992265735024614	WITHOUT_CLASSIFICATION	7.734264975386117E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999142576894949	WITHOUT_CLASSIFICATION	8.574231050506709E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9998486252470914	WITHOUT_CLASSIFICATION	1.5137475290857893E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9994559379435329	WITHOUT_CLASSIFICATION	5.440620564670652E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998225886006703	WITHOUT_CLASSIFICATION	1.7741139932978898E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9983563403286925	WITHOUT_CLASSIFICATION	0.001643659671307547	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999998704943897	WITHOUT_CLASSIFICATION	1.2950561032080942E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998505478611966	WITHOUT_CLASSIFICATION	1.4945213880334884E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999963168073186	WITHOUT_CLASSIFICATION	3.6831926814358338E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9996062507794842	WITHOUT_CLASSIFICATION	3.9374922051577923E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9997336133245718	WITHOUT_CLASSIFICATION	2.663866754281928E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999638660140981	WITHOUT_CLASSIFICATION	3.61339859018854E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999978687101245	WITHOUT_CLASSIFICATION	2.1312898755222285E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9994854721815531	WITHOUT_CLASSIFICATION	5.14527818446896E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9971702585685953	WITHOUT_CLASSIFICATION	0.0028297414314046457	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999263977805771	WITHOUT_CLASSIFICATION	7.360221942286603E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999450406980029	WITHOUT_CLASSIFICATION	5.495930199702214E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999079769763202	WITHOUT_CLASSIFICATION	9.202302367983683E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9996473570095002	WITHOUT_CLASSIFICATION	3.5264299049981543E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999132243606862	WITHOUT_CLASSIFICATION	8.677563931375247E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993023741308967	WITHOUT_CLASSIFICATION	6.976258691032777E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999603649766559	WITHOUT_CLASSIFICATION	3.963502334416764E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999820624592179	WITHOUT_CLASSIFICATION	1.7937540782094334E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999820624592179	WITHOUT_CLASSIFICATION	1.7937540782094334E-4	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9998690169719677	WITHOUT_CLASSIFICATION	1.3098302803216764E-4	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999931584561126	WITHOUT_CLASSIFICATION	6.84154388743137E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999559560201886	WITHOUT_CLASSIFICATION	4.404397981131982E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999606079806052	WITHOUT_CLASSIFICATION	3.93920193949072E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9988080699667148	WITHOUT_CLASSIFICATION	0.0011919300332852729	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999286658767569	WITHOUT_CLASSIFICATION	7.133412324314185E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9997017544217905	WITHOUT_CLASSIFICATION	2.982455782094528E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999757532529343	WITHOUT_CLASSIFICATION	2.4246747065716965E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9992827087327968	WITHOUT_CLASSIFICATION	7.172912672032139E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999390572901328	WITHOUT_CLASSIFICATION	6.094270986726864E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997638553758649	WITHOUT_CLASSIFICATION	2.361446241350789E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999935957206767	WITHOUT_CLASSIFICATION	6.404279323303345E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998374063706693	WITHOUT_CLASSIFICATION	1.6259362933072254E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999188632298538	WITHOUT_CLASSIFICATION	8.113677014630046E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999901532771474	WITHOUT_CLASSIFICATION	9.846722852780744E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999901532771474	WITHOUT_CLASSIFICATION	9.846722852780744E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9997883435259378	WITHOUT_CLASSIFICATION	2.116564740622898E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9997883435259378	WITHOUT_CLASSIFICATION	2.116564740622898E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999910906503402	WITHOUT_CLASSIFICATION	8.909349659849854E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9970066662931164	WITHOUT_CLASSIFICATION	0.0029933337068837195	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998923832494405	WITHOUT_CLASSIFICATION	1.076167505595107E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999955919319261	WITHOUT_CLASSIFICATION	4.408068073833121E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9996993383595647	WITHOUT_CLASSIFICATION	3.0066164043535864E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.999895235484356	WITHOUT_CLASSIFICATION	1.0476451564394406E-4	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999919635441208	WITHOUT_CLASSIFICATION	8.036455879232919E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999935957206767	WITHOUT_CLASSIFICATION	6.404279323303345E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998374063706693	WITHOUT_CLASSIFICATION	1.6259362933072254E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9991583937167517	WITHOUT_CLASSIFICATION	8.416062832482517E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999017379815598	WITHOUT_CLASSIFICATION	9.826201844021241E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.992542006121176	WITHOUT_CLASSIFICATION	0.00745799387882397	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9988340110415156	WITHOUT_CLASSIFICATION	0.0011659889584843429	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999910703442986	WITHOUT_CLASSIFICATION	8.929655701391204E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.997754580117905	WITHOUT_CLASSIFICATION	0.002245419882095054	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9998931562846626	WITHOUT_CLASSIFICATION	1.0684371533740804E-4	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9998931562846626	WITHOUT_CLASSIFICATION	1.0684371533740804E-4	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999692404880934	WITHOUT_CLASSIFICATION	3.075951190661993E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.99999439155447	WITHOUT_CLASSIFICATION	5.608445529950678E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999321454397286	WITHOUT_CLASSIFICATION	6.785456027141754E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9992470612021724	WITHOUT_CLASSIFICATION	7.529387978275587E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998374063706693	WITHOUT_CLASSIFICATION	1.6259362933072254E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.998172363162549	WITHOUT_CLASSIFICATION	0.0018276368374509988	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999812659880132	WITHOUT_CLASSIFICATION	1.8734011986902953E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999685845046133	WITHOUT_CLASSIFICATION	3.141549538654139E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9996007991667755	WITHOUT_CLASSIFICATION	3.992008332245099E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999972032760452	WITHOUT_CLASSIFICATION	2.796723954889153E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999899837385122	WITHOUT_CLASSIFICATION	1.0016261487650621E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9997904883251949	WITHOUT_CLASSIFICATION	2.0951167480498997E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999803783595049	WITHOUT_CLASSIFICATION	1.9621640495133727E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9998352191965104	WITHOUT_CLASSIFICATION	1.6478080348964654E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999688541914176	WITHOUT_CLASSIFICATION	3.114580858239686E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999591386190729	WITHOUT_CLASSIFICATION	4.086138092703575E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999709784977806	WITHOUT_CLASSIFICATION	2.9021502219358598E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9997080584488784	WITHOUT_CLASSIFICATION	2.9194155112148535E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9990770701582534	WITHOUT_CLASSIFICATION	9.229298417466555E-4	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999582362970284	WITHOUT_CLASSIFICATION	4.176370297166596E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9859779756735846	WITHOUT_CLASSIFICATION	0.014022024326415436	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998595461748849	WITHOUT_CLASSIFICATION	1.4045382511508538E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9997597400448806	WITHOUT_CLASSIFICATION	2.4025995511941443E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999479642711009	WITHOUT_CLASSIFICATION	5.203572889905845E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999241964195434	WITHOUT_CLASSIFICATION	7.580358045658352E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9997868987676675	WITHOUT_CLASSIFICATION	2.1310123233259765E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.999524570629843	WITHOUT_CLASSIFICATION	4.754293701569942E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998972371818121	WITHOUT_CLASSIFICATION	1.0276281818778662E-4	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9996900161453539	WITHOUT_CLASSIFICATION	3.0998385464607256E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999620809701274	WITHOUT_CLASSIFICATION	3.7919029872669375E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999149978340208	WITHOUT_CLASSIFICATION	8.500216597916681E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998436366711594	WITHOUT_CLASSIFICATION	1.5636332884057887E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993023741308967	WITHOUT_CLASSIFICATION	6.976258691032777E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998972371818121	WITHOUT_CLASSIFICATION	1.0276281818778662E-4	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999899012190158	WITHOUT_CLASSIFICATION	1.0098780984293584E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9996601532712885	WITHOUT_CLASSIFICATION	3.3984672871140457E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9988349446426331	WITHOUT_CLASSIFICATION	0.0011650553573669346	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.998572961996478	WITHOUT_CLASSIFICATION	0.001427038003521989	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.998572961996478	WITHOUT_CLASSIFICATION	0.001427038003521989	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999972102646109	WITHOUT_CLASSIFICATION	2.7897353891768347E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999942373966549	WITHOUT_CLASSIFICATION	5.762603345096683E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999190732791019	WITHOUT_CLASSIFICATION	8.09267208981075E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.999996024562781	WITHOUT_CLASSIFICATION	3.975437219046664E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9998339481152967	WITHOUT_CLASSIFICATION	1.660518847033041E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9997763890043853	WITHOUT_CLASSIFICATION	2.2361099561463464E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999939513226601	WITHOUT_CLASSIFICATION	6.048677339895492E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9977537264663594	WITHOUT_CLASSIFICATION	0.002246273533640643	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999289379340496	WITHOUT_CLASSIFICATION	7.106206595036906E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999289379340496	WITHOUT_CLASSIFICATION	7.106206595036906E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999698625346767	WITHOUT_CLASSIFICATION	3.0137465323284817E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999056599470468	WITHOUT_CLASSIFICATION	9.434005295309599E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999826018894218	WITHOUT_CLASSIFICATION	1.7398110578226353E-5	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999474619778598	WITHOUT_CLASSIFICATION	5.253802214027706E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9998170349429659	WITHOUT_CLASSIFICATION	1.8296505703404358E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999869701010949	WITHOUT_CLASSIFICATION	1.302989890515042E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999994248503856	WITHOUT_CLASSIFICATION	5.751496143798867E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999843805955723	WITHOUT_CLASSIFICATION	1.5619404427758485E-5	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999784719465051	WITHOUT_CLASSIFICATION	2.1528053494856942E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9841047853952288	WITHOUT_CLASSIFICATION	0.015895214604771193	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999757112172418	WITHOUT_CLASSIFICATION	2.428878275816187E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999636314214619	WITHOUT_CLASSIFICATION	3.6368578538094935E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999236051076209	WITHOUT_CLASSIFICATION	7.639489237906229E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998684813503672	WITHOUT_CLASSIFICATION	1.3151864963285452E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998684813503672	WITHOUT_CLASSIFICATION	1.3151864963285452E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998921445513383	WITHOUT_CLASSIFICATION	1.0785544866165637E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.99982969112799	WITHOUT_CLASSIFICATION	1.7030887200991787E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9841047853952288	WITHOUT_CLASSIFICATION	0.015895214604771193	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999854550788396	WITHOUT_CLASSIFICATION	1.4544921160433364E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9992554519100555	WITHOUT_CLASSIFICATION	7.445480899446093E-4	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999724102842091	WITHOUT_CLASSIFICATION	2.7589715790847214E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999179264612935	WITHOUT_CLASSIFICATION	8.207353870646791E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9994586601255496	WITHOUT_CLASSIFICATION	5.413398744504001E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999023040810538	WITHOUT_CLASSIFICATION	9.769591894610255E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999531737205981	WITHOUT_CLASSIFICATION	4.6826279401844856E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9993023741308967	WITHOUT_CLASSIFICATION	6.976258691032777E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999484170265146	WITHOUT_CLASSIFICATION	5.158297348545208E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999008549848893	WITHOUT_CLASSIFICATION	9.914501511072008E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9997614110424969	WITHOUT_CLASSIFICATION	2.3858895750305083E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999645931817026	WITHOUT_CLASSIFICATION	3.5406818297414325E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999684097936915	WITHOUT_CLASSIFICATION	3.159020630855474E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999827694483759	WITHOUT_CLASSIFICATION	1.723055162404086E-5	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.999717086128929	WITHOUT_CLASSIFICATION	2.8291387107106324E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9998399103257363	WITHOUT_CLASSIFICATION	1.6008967426373255E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9988805304612653	WITHOUT_CLASSIFICATION	0.0011194695387346187	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9994194337796228	WITHOUT_CLASSIFICATION	5.805662203771866E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.999900905490144	WITHOUT_CLASSIFICATION	9.909450985597508E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998453214433684	WITHOUT_CLASSIFICATION	1.546785566315765E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.999587045315955	WITHOUT_CLASSIFICATION	4.1295468404505583E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8169932703724238	WITHOUT_CLASSIFICATION	0.18300672962757628	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9962437638265723	WITHOUT_CLASSIFICATION	0.0037562361734276694	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.999940282478497	WITHOUT_CLASSIFICATION	5.9717521503077516E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999748410382843	WITHOUT_CLASSIFICATION	2.5158961715727266E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999841123091008	WITHOUT_CLASSIFICATION	1.5887690899268903E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9986654163815157	WITHOUT_CLASSIFICATION	0.0013345836184843075	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999141078546915	WITHOUT_CLASSIFICATION	8.58921453085123E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999842441515641	WITHOUT_CLASSIFICATION	1.5755848435960272E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999737304897336	WITHOUT_CLASSIFICATION	2.6269510266459632E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999972102646109	WITHOUT_CLASSIFICATION	2.7897353891768347E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9997781003823502	WITHOUT_CLASSIFICATION	2.218996176498373E-4	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9997126412872478	WITHOUT_CLASSIFICATION	2.8735871275222436E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999780451917588	WITHOUT_CLASSIFICATION	2.1954808241191036E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9959737316850944	WITHOUT_CLASSIFICATION	0.004026268314905545	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9987702240985614	WITHOUT_CLASSIFICATION	0.0012297759014386694	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9970822852129552	WITHOUT_CLASSIFICATION	0.0029177147870448976	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.999992163449543	WITHOUT_CLASSIFICATION	7.836550457054125E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9994021802555685	WITHOUT_CLASSIFICATION	5.978197444315451E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999977765388781	WITHOUT_CLASSIFICATION	2.2234611218068928E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999200998108013	WITHOUT_CLASSIFICATION	7.990018919866179E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997259410363821	WITHOUT_CLASSIFICATION	2.7405896361789786E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999917653733734	WITHOUT_CLASSIFICATION	8.234626626595242E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999673664307314	WITHOUT_CLASSIFICATION	3.2633569268712347E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997289357598658	WITHOUT_CLASSIFICATION	2.710642401343255E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999990824523397	WITHOUT_CLASSIFICATION	9.17547660180265E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9984293920346703	WITHOUT_CLASSIFICATION	0.0015706079653296798	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9997224112583885	WITHOUT_CLASSIFICATION	2.7758874161154225E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9814815453029128	WITHOUT_CLASSIFICATION	0.018518454697087284	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.999749849665458	WITHOUT_CLASSIFICATION	2.501503345419832E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9990142308704744	WITHOUT_CLASSIFICATION	9.857691295256212E-4	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9996398196941318	WITHOUT_CLASSIFICATION	3.601803058681874E-4	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9996830041372574	WITHOUT_CLASSIFICATION	3.1699586274258325E-4	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.999995269949265	WITHOUT_CLASSIFICATION	4.730050735081423E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999898119376468	WITHOUT_CLASSIFICATION	1.0188062353234238E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998540840174331	WITHOUT_CLASSIFICATION	1.4591598256686082E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998540840174331	WITHOUT_CLASSIFICATION	1.4591598256686082E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998540840174331	WITHOUT_CLASSIFICATION	1.4591598256686082E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999252822325182	WITHOUT_CLASSIFICATION	7.471776748178054E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9998619640832601	WITHOUT_CLASSIFICATION	1.3803591673995882E-4	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999366834227758	WITHOUT_CLASSIFICATION	6.331657722427099E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998286840283637	WITHOUT_CLASSIFICATION	1.713159716363948E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998286840283637	WITHOUT_CLASSIFICATION	1.713159716363948E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9992338225728385	WITHOUT_CLASSIFICATION	7.661774271614563E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9997819539661955	WITHOUT_CLASSIFICATION	2.1804603380449656E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999776651471453	WITHOUT_CLASSIFICATION	2.2334852854680666E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999647957843877	WITHOUT_CLASSIFICATION	3.520421561220229E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999661582221979	WITHOUT_CLASSIFICATION	3.384177780204546E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9997376306108003	WITHOUT_CLASSIFICATION	2.623693891996673E-4	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9998819596553324	WITHOUT_CLASSIFICATION	1.1804034466760637E-4	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9998440166161516	WITHOUT_CLASSIFICATION	1.5598338384834913E-4	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999916052198589	WITHOUT_CLASSIFICATION	8.394780141104822E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999463509603935	WITHOUT_CLASSIFICATION	5.3649039606496435E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999463509603935	WITHOUT_CLASSIFICATION	5.3649039606496435E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999796045074882	WITHOUT_CLASSIFICATION	2.039549251182366E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9998052014225387	WITHOUT_CLASSIFICATION	1.947985774613783E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999549951045315	WITHOUT_CLASSIFICATION	4.500489546862166E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9998662141199743	WITHOUT_CLASSIFICATION	1.3378588002572081E-4	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9997205960904615	WITHOUT_CLASSIFICATION	2.794039095384889E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999910290201309	WITHOUT_CLASSIFICATION	8.970979868981104E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9998910275974087	WITHOUT_CLASSIFICATION	1.0897240259126913E-4	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9998915424300236	WITHOUT_CLASSIFICATION	1.0845756997624819E-4	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9996560942109562	WITHOUT_CLASSIFICATION	3.43905789043742E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998332557178501	WITHOUT_CLASSIFICATION	1.6674428214986389E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9989235235009869	WITHOUT_CLASSIFICATION	0.0010764764990130662	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9998970404597143	WITHOUT_CLASSIFICATION	1.0295954028573464E-4	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999812729900367	WITHOUT_CLASSIFICATION	1.8727009963302436E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9994394783738405	WITHOUT_CLASSIFICATION	5.605216261595879E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999298184419765	WITHOUT_CLASSIFICATION	7.018155802356526E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9998854576792833	WITHOUT_CLASSIFICATION	1.1454232071673608E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9991777955055431	WITHOUT_CLASSIFICATION	8.222044944569119E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999743670398213	WITHOUT_CLASSIFICATION	2.5632960178636637E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998500136373449	WITHOUT_CLASSIFICATION	1.499863626551612E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9997360440580064	WITHOUT_CLASSIFICATION	2.639559419935948E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999344132661779	WITHOUT_CLASSIFICATION	6.558673382207563E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9998704814793312	WITHOUT_CLASSIFICATION	1.295185206688586E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999489859377532	WITHOUT_CLASSIFICATION	5.101406224676951E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9994216508805706	WITHOUT_CLASSIFICATION	5.783491194294835E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9996736548040185	WITHOUT_CLASSIFICATION	3.26345195981492E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999544417007535	WITHOUT_CLASSIFICATION	4.555829924636594E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999418549133833	WITHOUT_CLASSIFICATION	5.814508661671946E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999479299909501	WITHOUT_CLASSIFICATION	5.207000905000637E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999876166108654	WITHOUT_CLASSIFICATION	1.2383389134604155E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999941380455114	WITHOUT_CLASSIFICATION	5.861954488659726E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9998859576757537	WITHOUT_CLASSIFICATION	1.140423242463201E-4	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.999945713982367	WITHOUT_CLASSIFICATION	5.428601763308842E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9998702476046697	WITHOUT_CLASSIFICATION	1.2975239533039856E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9987454496051452	WITHOUT_CLASSIFICATION	0.0012545503948548761	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999385503958252	WITHOUT_CLASSIFICATION	6.144960417480891E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999350549590369	WITHOUT_CLASSIFICATION	6.494504096308836E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999284339712551	WITHOUT_CLASSIFICATION	7.156602874489915E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999067399596271	WITHOUT_CLASSIFICATION	9.32600403729093E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.999983229194074	WITHOUT_CLASSIFICATION	1.6770805926074937E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999499308830506	WITHOUT_CLASSIFICATION	5.006911694928556E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9998545886048646	WITHOUT_CLASSIFICATION	1.4541139513534978E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999654486062302	WITHOUT_CLASSIFICATION	3.4551393769821805E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999477355298791	WITHOUT_CLASSIFICATION	5.226447012098181E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9996810952777122	WITHOUT_CLASSIFICATION	3.1890472228781767E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999941707836165	WITHOUT_CLASSIFICATION	5.829216383503787E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999221668756815	WITHOUT_CLASSIFICATION	7.783312431858003E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999927915366621	WITHOUT_CLASSIFICATION	7.208463337917823E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999632159398868	WITHOUT_CLASSIFICATION	3.678406011314186E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999660610409868	WITHOUT_CLASSIFICATION	3.393895901316483E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999766007702087	WITHOUT_CLASSIFICATION	2.339922979129361E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999538983668131	WITHOUT_CLASSIFICATION	4.6101633186950664E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9991713509745572	WITHOUT_CLASSIFICATION	8.286490254427447E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999915821150192	WITHOUT_CLASSIFICATION	8.417884980923138E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999915821150192	WITHOUT_CLASSIFICATION	8.417884980923138E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9996733152679332	WITHOUT_CLASSIFICATION	3.266847320667249E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9998267917622337	WITHOUT_CLASSIFICATION	1.732082377664212E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9979369618638734	WITHOUT_CLASSIFICATION	0.0020630381361265476	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9918523395811394	WITHOUT_CLASSIFICATION	0.008147660418860595	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999273717868631	WITHOUT_CLASSIFICATION	7.262821313680524E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9996897094214623	WITHOUT_CLASSIFICATION	3.1029057853764646E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9996986313338362	WITHOUT_CLASSIFICATION	3.0136866616377626E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999754890984398	WITHOUT_CLASSIFICATION	2.451090156016556E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999553699189372	WITHOUT_CLASSIFICATION	4.463008106286474E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9991876764045875	WITHOUT_CLASSIFICATION	8.12323595412648E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999729580221934	WITHOUT_CLASSIFICATION	2.7041977806550454E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999657740363985	WITHOUT_CLASSIFICATION	3.4225963601440324E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.999972863089368	WITHOUT_CLASSIFICATION	2.7136910632055902E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9997472666538428	WITHOUT_CLASSIFICATION	2.527333461571658E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999315688122958	WITHOUT_CLASSIFICATION	6.843118770412897E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9998920214720124	WITHOUT_CLASSIFICATION	1.0797852798753324E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9997978980709098	WITHOUT_CLASSIFICATION	2.021019290901573E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9998793688240654	WITHOUT_CLASSIFICATION	1.2063117593463638E-4	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9995616932211184	WITHOUT_CLASSIFICATION	4.383067788815274E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999730306576166	WITHOUT_CLASSIFICATION	2.696934238346737E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9994831354937588	WITHOUT_CLASSIFICATION	5.168645062412311E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9997978980709098	WITHOUT_CLASSIFICATION	2.021019290901573E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9919551068623903	WITHOUT_CLASSIFICATION	0.00804489313760974	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9919551068623903	WITHOUT_CLASSIFICATION	0.00804489313760974	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.999917901609739	WITHOUT_CLASSIFICATION	8.209839026100239E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998243893393042	WITHOUT_CLASSIFICATION	1.7561066069574476E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9998360316026972	WITHOUT_CLASSIFICATION	1.63968397302889E-4	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999514314613941	WITHOUT_CLASSIFICATION	4.856853860591493E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999776408148191	WITHOUT_CLASSIFICATION	2.235918518081879E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7783389867990771	WITHOUT_CLASSIFICATION	0.22166101320092288	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9981116386851313	WITHOUT_CLASSIFICATION	0.0018883613148687132	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9831085427999325	WITHOUT_CLASSIFICATION	0.016891457200067503	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999595635414913	WITHOUT_CLASSIFICATION	4.04364585088082E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9995784112395019	WITHOUT_CLASSIFICATION	4.2158876049806267E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.99963010141235	WITHOUT_CLASSIFICATION	3.6989858765006654E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999573970263611	WITHOUT_CLASSIFICATION	4.2602973638911513E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998099756310427	WITHOUT_CLASSIFICATION	1.900243689573085E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9997936093809522	WITHOUT_CLASSIFICATION	2.0639061904780052E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988157771806703	WITHOUT_CLASSIFICATION	0.0011842228193297292	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998738789817553	WITHOUT_CLASSIFICATION	1.2612101824473567E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9986492233237728	WITHOUT_CLASSIFICATION	0.0013507766762271573	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999472643007113	WITHOUT_CLASSIFICATION	5.273569928872171E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999694079870105	WITHOUT_CLASSIFICATION	3.059201298954537E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999573210796048	WITHOUT_CLASSIFICATION	4.267892039511373E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997222365689429	WITHOUT_CLASSIFICATION	2.777634310571162E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999025414476388	WITHOUT_CLASSIFICATION	9.745855236117225E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999016901313751	WITHOUT_CLASSIFICATION	9.830986862487819E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999444304258597	WITHOUT_CLASSIFICATION	5.5569574140408646E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9900639257040978	WITHOUT_CLASSIFICATION	0.009936074295902098	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.997171514794368	WITHOUT_CLASSIFICATION	0.0028284852056319073	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9886828499997984	WITHOUT_CLASSIFICATION	0.011317150000201656	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9976013225074445	WITHOUT_CLASSIFICATION	0.0023986774925555234	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9991563720383368	WITHOUT_CLASSIFICATION	8.436279616632061E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9991563720383368	WITHOUT_CLASSIFICATION	8.436279616632061E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999744619038519	WITHOUT_CLASSIFICATION	2.5538096148108554E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9841117053436275	WITHOUT_CLASSIFICATION	0.015888294656372495	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9969656001027876	WITHOUT_CLASSIFICATION	0.0030343998972123935	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9857804135160875	WITHOUT_CLASSIFICATION	0.014219586483912465	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9997569464619864	WITHOUT_CLASSIFICATION	2.4305353801346745E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9968429286982681	WITHOUT_CLASSIFICATION	0.0031570713017318153	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9969656001027876	WITHOUT_CLASSIFICATION	0.0030343998972123935	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.992331236080195	WITHOUT_CLASSIFICATION	0.0076687639198049495	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9995982879886904	WITHOUT_CLASSIFICATION	4.017120113095382E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998562644102331	WITHOUT_CLASSIFICATION	1.4373558976690416E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999020909701697	WITHOUT_CLASSIFICATION	9.790902983038426E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999874113463405	WITHOUT_CLASSIFICATION	1.2588653659366831E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999394246049842	WITHOUT_CLASSIFICATION	6.0575395015863046E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999394246049842	WITHOUT_CLASSIFICATION	6.0575395015863046E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9995976156503806	WITHOUT_CLASSIFICATION	4.023843496194129E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9948190034615186	WITHOUT_CLASSIFICATION	0.005180996538481393	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9989485263072033	WITHOUT_CLASSIFICATION	0.0010514736927966775	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9990450115599793	WITHOUT_CLASSIFICATION	9.549884400207024E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.999679158708204	WITHOUT_CLASSIFICATION	3.208412917959473E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999321104179392	WITHOUT_CLASSIFICATION	6.788958206089902E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9547924269131531	WITHOUT_CLASSIFICATION	0.04520757308684673	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9995823311817079	WITHOUT_CLASSIFICATION	4.176688182920961E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9970333706841797	WITHOUT_CLASSIFICATION	0.0029666293158202234	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9997193890308046	WITHOUT_CLASSIFICATION	2.80610969195397E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9998614426613043	WITHOUT_CLASSIFICATION	1.3855733869573875E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9997933351100705	WITHOUT_CLASSIFICATION	2.06664889929441E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999734437349664	WITHOUT_CLASSIFICATION	2.6556265033585364E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9990367267912704	WITHOUT_CLASSIFICATION	9.632732087296506E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9998874382809577	WITHOUT_CLASSIFICATION	1.1256171904224916E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999201166518877	WITHOUT_CLASSIFICATION	7.988334811224263E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9996575456850072	WITHOUT_CLASSIFICATION	3.42454314992832E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9862293410425634	WITHOUT_CLASSIFICATION	0.01377065895743658	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9994659202205528	WITHOUT_CLASSIFICATION	5.340797794471617E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9862293410425634	WITHOUT_CLASSIFICATION	0.01377065895743658	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9995647739965938	WITHOUT_CLASSIFICATION	4.3522600340621784E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9994659202205528	WITHOUT_CLASSIFICATION	5.340797794471617E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.936951531878943	WITHOUT_CLASSIFICATION	0.06304846812105708	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9990957129844538	WITHOUT_CLASSIFICATION	9.042870155461757E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9992465477781819	WITHOUT_CLASSIFICATION	7.534522218181961E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999373973985233	WITHOUT_CLASSIFICATION	6.260260147669966E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999480640075454	WITHOUT_CLASSIFICATION	5.193599245454354E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998738789817553	WITHOUT_CLASSIFICATION	1.2612101824473567E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999472643007113	WITHOUT_CLASSIFICATION	5.273569928872171E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999694079870105	WITHOUT_CLASSIFICATION	3.059201298954537E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999573210796048	WITHOUT_CLASSIFICATION	4.267892039511373E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997222365689429	WITHOUT_CLASSIFICATION	2.777634310571162E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999013688414011	WITHOUT_CLASSIFICATION	9.863115859891915E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999025414476388	WITHOUT_CLASSIFICATION	9.745855236117225E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9997223543160819	WITHOUT_CLASSIFICATION	2.776456839181384E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9991563720383368	WITHOUT_CLASSIFICATION	8.436279616632061E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9991563720383368	WITHOUT_CLASSIFICATION	8.436279616632061E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9969656001027876	WITHOUT_CLASSIFICATION	0.0030343998972123935	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9997569464619864	WITHOUT_CLASSIFICATION	2.4305353801346745E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9968429286982681	WITHOUT_CLASSIFICATION	0.0031570713017318153	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9969656001027876	WITHOUT_CLASSIFICATION	0.0030343998972123935	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.992331236080195	WITHOUT_CLASSIFICATION	0.0076687639198049495	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9997922823163843	WITHOUT_CLASSIFICATION	2.0771768361582769E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999763250643785	WITHOUT_CLASSIFICATION	2.3674935621510705E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9991682051328843	WITHOUT_CLASSIFICATION	8.317948671155919E-4	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9969085306418736	WITHOUT_CLASSIFICATION	0.0030914693581262816	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9985952383382907	WITHOUT_CLASSIFICATION	0.0014047616617093492	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998382261784025	WITHOUT_CLASSIFICATION	1.61773821597581E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9934017886686324	WITHOUT_CLASSIFICATION	0.006598211331367565	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998562644102331	WITHOUT_CLASSIFICATION	1.4373558976690416E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999394246049842	WITHOUT_CLASSIFICATION	6.0575395015863046E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999394246049842	WITHOUT_CLASSIFICATION	6.0575395015863046E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9874886539095511	WITHOUT_CLASSIFICATION	0.01251134609044886	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9989467517013745	WITHOUT_CLASSIFICATION	0.0010532482986255086	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998417497093209	WITHOUT_CLASSIFICATION	1.582502906790581E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999020909701697	WITHOUT_CLASSIFICATION	9.790902983038426E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9983386458689663	WITHOUT_CLASSIFICATION	0.001661354131033818	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999027283677885	WITHOUT_CLASSIFICATION	9.727163221144663E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9972063494693582	WITHOUT_CLASSIFICATION	0.0027936505306419357	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999612150489339	WITHOUT_CLASSIFICATION	3.8784951066130296E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999465760699696	WITHOUT_CLASSIFICATION	5.342393003040248E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999875331736959	WITHOUT_CLASSIFICATION	1.2466826304058142E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9979467721796564	WITHOUT_CLASSIFICATION	0.002053227820343587	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9996333718181714	WITHOUT_CLASSIFICATION	3.6662818182864744E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999066921024696	WITHOUT_CLASSIFICATION	9.330789753038043E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999921598209685	WITHOUT_CLASSIFICATION	7.84017903148906E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999970435876748	WITHOUT_CLASSIFICATION	2.9564123251956886E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999970435876748	WITHOUT_CLASSIFICATION	2.9564123251956886E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999671391240678	WITHOUT_CLASSIFICATION	3.2860875932330745E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9995137313990476	WITHOUT_CLASSIFICATION	4.8626860095237466E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9998213460032302	WITHOUT_CLASSIFICATION	1.786539967696984E-4	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9995512696298716	WITHOUT_CLASSIFICATION	4.487303701284237E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999986109262707	WITHOUT_CLASSIFICATION	1.3890737292858721E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999828660250711	WITHOUT_CLASSIFICATION	1.713397492887415E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999986109262707	WITHOUT_CLASSIFICATION	1.3890737292858721E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999600257122273	WITHOUT_CLASSIFICATION	3.99742877727338E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9982609824892544	WITHOUT_CLASSIFICATION	0.001739017510745555	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9992161567413362	WITHOUT_CLASSIFICATION	7.838432586637433E-4	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9993339958941257	WITHOUT_CLASSIFICATION	6.660041058742618E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9993339958941257	WITHOUT_CLASSIFICATION	6.660041058742618E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999853269971151	WITHOUT_CLASSIFICATION	1.4673002884968543E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999401562779174	WITHOUT_CLASSIFICATION	5.984372208269226E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999419160254539	WITHOUT_CLASSIFICATION	5.8083974546126414E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.6870599242061518	WITHOUT_CLASSIFICATION	0.31294007579384825	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9998924904890606	WITHOUT_CLASSIFICATION	1.07509510939426E-4	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996684841303988	WITHOUT_CLASSIFICATION	3.315158696012116E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996684841303988	WITHOUT_CLASSIFICATION	3.315158696012116E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996034112959631	WITHOUT_CLASSIFICATION	3.9658870403694367E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999874094054665	WITHOUT_CLASSIFICATION	1.2590594533523768E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999874094054665	WITHOUT_CLASSIFICATION	1.2590594533523768E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9998598155250824	WITHOUT_CLASSIFICATION	1.4018447491755346E-4	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999739034828742	WITHOUT_CLASSIFICATION	2.6096517125862628E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999217773074854	WITHOUT_CLASSIFICATION	7.822269251452927E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9995413681691209	WITHOUT_CLASSIFICATION	4.5863183087912693E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9995042684874497	WITHOUT_CLASSIFICATION	4.957315125504172E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999986109262707	WITHOUT_CLASSIFICATION	1.3890737292858721E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9996523539081882	WITHOUT_CLASSIFICATION	3.4764609181177727E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999963609669258	WITHOUT_CLASSIFICATION	3.6390330742096933E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9988728559091704	WITHOUT_CLASSIFICATION	0.0011271440908296267	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9996523539081882	WITHOUT_CLASSIFICATION	3.4764609181177727E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999957720353381	WITHOUT_CLASSIFICATION	4.227964661911927E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999959988989897	WITHOUT_CLASSIFICATION	4.001101010242908E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.999960888425735	WITHOUT_CLASSIFICATION	3.9111574265055565E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9997940379369574	WITHOUT_CLASSIFICATION	2.059620630425633E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9997887855495754	WITHOUT_CLASSIFICATION	2.1121445042465305E-4	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9998572355346824	WITHOUT_CLASSIFICATION	1.427644653176191E-4	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999869425176168	WITHOUT_CLASSIFICATION	1.305748238321766E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999915134531315	WITHOUT_CLASSIFICATION	8.486546868540772E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9992239465247303	WITHOUT_CLASSIFICATION	7.760534752696312E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999402351475916	WITHOUT_CLASSIFICATION	5.976485240852831E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9961328691504971	WITHOUT_CLASSIFICATION	0.0038671308495029	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999046248716243	WITHOUT_CLASSIFICATION	9.53751283756006E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9991463518629161	WITHOUT_CLASSIFICATION	8.53648137083813E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9996780888260298	WITHOUT_CLASSIFICATION	3.21911173970098E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999517295855872	WITHOUT_CLASSIFICATION	4.827041441286042E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999983243701576	WITHOUT_CLASSIFICATION	1.675629842475517E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999834172895153	WITHOUT_CLASSIFICATION	1.6582710484714388E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9951062693023258	WITHOUT_CLASSIFICATION	0.004893730697674169	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999597028438997	WITHOUT_CLASSIFICATION	4.0297156100404186E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9996839766044808	WITHOUT_CLASSIFICATION	3.1602339551920134E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998133659160142	WITHOUT_CLASSIFICATION	1.8663408398580272E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999833578269687	WITHOUT_CLASSIFICATION	1.6642173031372776E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999151661036065	WITHOUT_CLASSIFICATION	8.483389639344563E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9993688484161606	WITHOUT_CLASSIFICATION	6.311515838394626E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.998298443272365	WITHOUT_CLASSIFICATION	0.0017015567276349747	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999329942522063	WITHOUT_CLASSIFICATION	6.700574779373291E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.999939879093357	WITHOUT_CLASSIFICATION	6.012090664301804E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999914480090516	WITHOUT_CLASSIFICATION	8.551990948366992E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999522598117472	WITHOUT_CLASSIFICATION	4.7740188252748656E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999719796246225	WITHOUT_CLASSIFICATION	2.802037537748511E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9997798701889526	WITHOUT_CLASSIFICATION	2.2012981104738296E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998441558540629	WITHOUT_CLASSIFICATION	1.558441459371444E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999703945667501	WITHOUT_CLASSIFICATION	2.9605433249881885E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999943941739743	WITHOUT_CLASSIFICATION	5.6058260257082115E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.999979199380415	WITHOUT_CLASSIFICATION	2.0800619585067846E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998915439229471	WITHOUT_CLASSIFICATION	1.0845607705289669E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999085456678294	WITHOUT_CLASSIFICATION	9.145433217060864E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997259410363821	WITHOUT_CLASSIFICATION	2.7405896361789786E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.999917653733734	WITHOUT_CLASSIFICATION	8.234626626595242E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9997072372205844	WITHOUT_CLASSIFICATION	2.927627794155989E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999097199334605	WITHOUT_CLASSIFICATION	9.028006653944921E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9848392434516731	WITHOUT_CLASSIFICATION	0.015160756548326874	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999975425657923	WITHOUT_CLASSIFICATION	2.4574342077005308E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999975425657923	WITHOUT_CLASSIFICATION	2.4574342077005308E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999710359705664	WITHOUT_CLASSIFICATION	2.8964029433578173E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999710359705664	WITHOUT_CLASSIFICATION	2.8964029433578173E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999710359705664	WITHOUT_CLASSIFICATION	2.8964029433578173E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999768351944487	WITHOUT_CLASSIFICATION	2.3164805551346E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999768351944487	WITHOUT_CLASSIFICATION	2.3164805551346E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998836367051892	WITHOUT_CLASSIFICATION	1.1636329481074332E-4	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998836367051892	WITHOUT_CLASSIFICATION	1.1636329481074332E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9988059935639001	WITHOUT_CLASSIFICATION	0.0011940064360998557	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9979601476078108	WITHOUT_CLASSIFICATION	0.0020398523921892468	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999670787425216	WITHOUT_CLASSIFICATION	3.2921257478385176E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999670787425216	WITHOUT_CLASSIFICATION	3.2921257478385176E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.998713896334436	WITHOUT_CLASSIFICATION	0.0012861036655640165	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999069700808018	WITHOUT_CLASSIFICATION	9.302991919818272E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9991767740732987	WITHOUT_CLASSIFICATION	8.232259267013149E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999153865491718	WITHOUT_CLASSIFICATION	8.461345082825633E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9988220142820156	WITHOUT_CLASSIFICATION	0.0011779857179844693	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999721431857642	WITHOUT_CLASSIFICATION	2.785681423582957E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999903112689296	WITHOUT_CLASSIFICATION	9.68873107039338E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999426989617888	WITHOUT_CLASSIFICATION	5.730103821126421E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9998134835264454	WITHOUT_CLASSIFICATION	1.86516473554603E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999915821150192	WITHOUT_CLASSIFICATION	8.417884980923138E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9997084030214086	WITHOUT_CLASSIFICATION	2.915969785913734E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999794330981673	WITHOUT_CLASSIFICATION	2.0566901832723055E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.998949806080165	WITHOUT_CLASSIFICATION	0.0010501939198348967	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999534042059898	WITHOUT_CLASSIFICATION	4.659579401019097E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999439957036567	WITHOUT_CLASSIFICATION	5.6004296343366615E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999653618564135	WITHOUT_CLASSIFICATION	3.4638143586517895E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999085509503434	WITHOUT_CLASSIFICATION	9.144904965668061E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9996234236293536	WITHOUT_CLASSIFICATION	3.765763706463115E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999899920825592	WITHOUT_CLASSIFICATION	1.0007917440713956E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998714524111467	WITHOUT_CLASSIFICATION	1.2854758885325223E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998714524111467	WITHOUT_CLASSIFICATION	1.2854758885325223E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998714524111467	WITHOUT_CLASSIFICATION	1.2854758885325223E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998152279174886	WITHOUT_CLASSIFICATION	1.8477208251146428E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998152279174886	WITHOUT_CLASSIFICATION	1.8477208251146428E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998152279174886	WITHOUT_CLASSIFICATION	1.8477208251146428E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998152279174886	WITHOUT_CLASSIFICATION	1.8477208251146428E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998152279174886	WITHOUT_CLASSIFICATION	1.8477208251146428E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9997766624944887	WITHOUT_CLASSIFICATION	2.2333750551118835E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9982987017861793	WITHOUT_CLASSIFICATION	0.001701298213820732	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.999991760107009	WITHOUT_CLASSIFICATION	8.239892991053448E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999565999131486	WITHOUT_CLASSIFICATION	4.3400086851386906E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9997950425931318	WITHOUT_CLASSIFICATION	2.0495740686811434E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999063619541614	WITHOUT_CLASSIFICATION	9.363804583856205E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9995437859530784	WITHOUT_CLASSIFICATION	4.562140469215912E-4	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999086710061726	WITHOUT_CLASSIFICATION	9.132899382730618E-5	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999868489744749	WITHOUT_CLASSIFICATION	1.3151025525154335E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999774384304008	WITHOUT_CLASSIFICATION	2.2561569599200563E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999693511765212	WITHOUT_CLASSIFICATION	3.064882347885322E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999431451621146	WITHOUT_CLASSIFICATION	5.685483788542545E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9089708794624266	WITHOUT_CLASSIFICATION	0.09102912053757349	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9997968766905433	WITHOUT_CLASSIFICATION	2.0312330945674009E-4	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9998305305556813	WITHOUT_CLASSIFICATION	1.6946944431869113E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999545822486652	WITHOUT_CLASSIFICATION	4.541775133481735E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998881094984389	WITHOUT_CLASSIFICATION	1.1189050156119446E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999352178571301	WITHOUT_CLASSIFICATION	6.478214286983772E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999828660250711	WITHOUT_CLASSIFICATION	1.713397492887415E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9973847435686838	WITHOUT_CLASSIFICATION	0.0026152564313162625	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9980876441942882	WITHOUT_CLASSIFICATION	0.0019123558057118272	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9994642834629595	WITHOUT_CLASSIFICATION	5.35716537040528E-4	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999745195974602	WITHOUT_CLASSIFICATION	2.548040253975547E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999539845386665	WITHOUT_CLASSIFICATION	4.6015461333627386E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9998987056929447	WITHOUT_CLASSIFICATION	1.0129430705541454E-4	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9998849263816035	WITHOUT_CLASSIFICATION	1.1507361839637709E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999568108766967	WITHOUT_CLASSIFICATION	4.318912330327746E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9998973778004743	WITHOUT_CLASSIFICATION	1.026221995257872E-4	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9998788824067827	WITHOUT_CLASSIFICATION	1.2111759321740754E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999422590904118	WITHOUT_CLASSIFICATION	5.774090958814073E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999179104511358	WITHOUT_CLASSIFICATION	8.208954886412844E-5	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999698306213399	WITHOUT_CLASSIFICATION	3.0169378660087337E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999790138319636	WITHOUT_CLASSIFICATION	2.0986168036462215E-5	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9998308351818735	WITHOUT_CLASSIFICATION	1.691648181265076E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999167602263	WITHOUT_CLASSIFICATION	8.323977369991034E-5	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999064353206574	WITHOUT_CLASSIFICATION	9.356467934270907E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997112017856751	WITHOUT_CLASSIFICATION	2.887982143249056E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9998735941290823	WITHOUT_CLASSIFICATION	1.2640587091773518E-4	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999973191393255	WITHOUT_CLASSIFICATION	2.680860674372723E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996235599788552	WITHOUT_CLASSIFICATION	3.764400211447111E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996235599788552	WITHOUT_CLASSIFICATION	3.764400211447111E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999378387083637	WITHOUT_CLASSIFICATION	6.216129163631922E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999378387083637	WITHOUT_CLASSIFICATION	6.216129163631922E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9998092043002194	WITHOUT_CLASSIFICATION	1.9079569978058296E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9998092043002194	WITHOUT_CLASSIFICATION	1.9079569978058296E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9998968699845401	WITHOUT_CLASSIFICATION	1.0313001546003504E-4	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.999949037451094	WITHOUT_CLASSIFICATION	5.096254890616024E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999759057986127	WITHOUT_CLASSIFICATION	2.409420138728775E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.999933943416919	WITHOUT_CLASSIFICATION	6.605658308105739E-5	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999136129552002	WITHOUT_CLASSIFICATION	8.63870447997292E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9980072286954977	WITHOUT_CLASSIFICATION	0.0019927713045022194	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999453544635479	WITHOUT_CLASSIFICATION	5.4645536451994855E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999816658833396	WITHOUT_CLASSIFICATION	1.8334116660369676E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9997957077948363	WITHOUT_CLASSIFICATION	2.04292205163677E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9997507417938396	WITHOUT_CLASSIFICATION	2.492582061604919E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999446301607218	WITHOUT_CLASSIFICATION	5.5369839278197156E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999472473867914	WITHOUT_CLASSIFICATION	5.2752613208519734E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9979673582532437	WITHOUT_CLASSIFICATION	0.0020326417467563056	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999258500471968	WITHOUT_CLASSIFICATION	7.414995280315559E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.998564191656311	WITHOUT_CLASSIFICATION	0.001435808343688933	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998837395954101	WITHOUT_CLASSIFICATION	1.1626040458994437E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999572674006674	WITHOUT_CLASSIFICATION	4.273259933263612E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9998944798723243	WITHOUT_CLASSIFICATION	1.0552012767569497E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9997917460661729	WITHOUT_CLASSIFICATION	2.0825393382696051E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9984138705023666	WITHOUT_CLASSIFICATION	0.0015861294976334728	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999545431673346	WITHOUT_CLASSIFICATION	4.545683266545108E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999521217842026	WITHOUT_CLASSIFICATION	4.787821579752383E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999567284494651	WITHOUT_CLASSIFICATION	4.327155053481941E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999773807635112	WITHOUT_CLASSIFICATION	2.261923648887913E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999142890905369	WITHOUT_CLASSIFICATION	8.571090946307617E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999142890905369	WITHOUT_CLASSIFICATION	8.571090946307617E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999402351475916	WITHOUT_CLASSIFICATION	5.976485240852831E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999402351475916	WITHOUT_CLASSIFICATION	5.976485240852831E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999960546374378	WITHOUT_CLASSIFICATION	3.945362562172584E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9988622545118859	WITHOUT_CLASSIFICATION	0.001137745488114049	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999430973084517	WITHOUT_CLASSIFICATION	5.6902691548445555E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999407296544294	WITHOUT_CLASSIFICATION	5.9270345570690404E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998207070866519	WITHOUT_CLASSIFICATION	1.7929291334801124E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999142890905369	WITHOUT_CLASSIFICATION	8.571090946307617E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999142890905369	WITHOUT_CLASSIFICATION	8.571090946307617E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999142890905369	WITHOUT_CLASSIFICATION	8.571090946307617E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999402351475916	WITHOUT_CLASSIFICATION	5.976485240852831E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999402351475916	WITHOUT_CLASSIFICATION	5.976485240852831E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999052395311891	WITHOUT_CLASSIFICATION	9.476046881087076E-5	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999762735507622	WITHOUT_CLASSIFICATION	2.3726449237719354E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999728265689918	WITHOUT_CLASSIFICATION	2.7173431008292315E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.991234668968094	WITHOUT_CLASSIFICATION	0.008765331031905936	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999607453222298	WITHOUT_CLASSIFICATION	3.925467777016403E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999713787051314	WITHOUT_CLASSIFICATION	2.862129486850542E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999728482372212	WITHOUT_CLASSIFICATION	2.7151762778767847E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9998763754433162	WITHOUT_CLASSIFICATION	1.2362455668378492E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999922825019572	WITHOUT_CLASSIFICATION	7.717498042778416E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999783650330173	WITHOUT_CLASSIFICATION	2.1634966982713947E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999274317872613	WITHOUT_CLASSIFICATION	7.256821273872013E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9993090624337686	WITHOUT_CLASSIFICATION	6.909375662314351E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.999966342897234	WITHOUT_CLASSIFICATION	3.365710276611634E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.999809444087747	WITHOUT_CLASSIFICATION	1.905559122530725E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9998837040220552	WITHOUT_CLASSIFICATION	1.1629597794486976E-4	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9971092454005822	WITHOUT_CLASSIFICATION	0.002890754599417717	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999602768294004	WITHOUT_CLASSIFICATION	3.972317059960269E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999602768294004	WITHOUT_CLASSIFICATION	3.972317059960269E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999602768294004	WITHOUT_CLASSIFICATION	3.972317059960269E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9968259677754023	WITHOUT_CLASSIFICATION	0.0031740322245975487	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9968259677754023	WITHOUT_CLASSIFICATION	0.0031740322245975487	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999861075825931	WITHOUT_CLASSIFICATION	1.3892417406819905E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9998346614393216	WITHOUT_CLASSIFICATION	1.6533856067833236E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.999857922587687	WITHOUT_CLASSIFICATION	1.4207741231304688E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9998579250742005	WITHOUT_CLASSIFICATION	1.4207492579960398E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999527961348824	WITHOUT_CLASSIFICATION	4.720386511750962E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998801544052689	WITHOUT_CLASSIFICATION	1.1984559473105515E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999874242168661	WITHOUT_CLASSIFICATION	1.2575783133901767E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998742443695995	WITHOUT_CLASSIFICATION	1.257556304005516E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999582186153859	WITHOUT_CLASSIFICATION	4.1781384614132974E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999352167232628	WITHOUT_CLASSIFICATION	6.478327673720121E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999715425527583	WITHOUT_CLASSIFICATION	2.8457447241662076E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999703670747969	WITHOUT_CLASSIFICATION	2.9632925203069143E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.999927811134635	WITHOUT_CLASSIFICATION	7.218886536492662E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999549049409652	WITHOUT_CLASSIFICATION	4.5095059034836746E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999442959976507	WITHOUT_CLASSIFICATION	5.570400234921853E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999626933314396	WITHOUT_CLASSIFICATION	3.7306668560354815E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998838036309048	WITHOUT_CLASSIFICATION	1.1619636909529865E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9998021033025757	WITHOUT_CLASSIFICATION	1.9789669742435297E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9998256703433643	WITHOUT_CLASSIFICATION	1.743296566356472E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9873809025142617	WITHOUT_CLASSIFICATION	0.012619097485738282	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999293114179743	WITHOUT_CLASSIFICATION	7.068858202577485E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999479537737762	WITHOUT_CLASSIFICATION	5.204622622387822E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999693504013484	WITHOUT_CLASSIFICATION	3.064959865158961E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999701904092171	WITHOUT_CLASSIFICATION	2.980959078288075E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999553807589182	WITHOUT_CLASSIFICATION	4.461924108189714E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999829877245544	WITHOUT_CLASSIFICATION	1.7012275445641436E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9996844436459196	WITHOUT_CLASSIFICATION	3.1555635408043927E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9924835244638789	WITHOUT_CLASSIFICATION	0.0075164755361210814	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9997564116674784	WITHOUT_CLASSIFICATION	2.4358833252157355E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9992071813968835	WITHOUT_CLASSIFICATION	7.92818603116479E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.999547266876734	WITHOUT_CLASSIFICATION	4.527331232659179E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9979405603612365	WITHOUT_CLASSIFICATION	0.0020594396387635626	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9994578775264717	WITHOUT_CLASSIFICATION	5.421224735283498E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999677166559882	WITHOUT_CLASSIFICATION	3.2283344011962894E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999778160771917	WITHOUT_CLASSIFICATION	2.2183922808281993E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999008987118893	WITHOUT_CLASSIFICATION	9.910128811073465E-5	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.997209216757605	WITHOUT_CLASSIFICATION	0.002790783242395037	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9998803650719186	WITHOUT_CLASSIFICATION	1.1963492808141661E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9968602044468159	WITHOUT_CLASSIFICATION	0.003139795553184217	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9993186819281886	WITHOUT_CLASSIFICATION	6.813180718114381E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9993559558303626	WITHOUT_CLASSIFICATION	6.440441696373615E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999448867432025	WITHOUT_CLASSIFICATION	5.511325679763021E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9993853814903355	WITHOUT_CLASSIFICATION	6.146185096643627E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9992403261470176	WITHOUT_CLASSIFICATION	7.596738529823366E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9992403261470176	WITHOUT_CLASSIFICATION	7.596738529823366E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9987822258797115	WITHOUT_CLASSIFICATION	0.001217774120288548	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9998240904957886	WITHOUT_CLASSIFICATION	1.7590950421141985E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9993816290751304	WITHOUT_CLASSIFICATION	6.183709248696075E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9988478176242749	WITHOUT_CLASSIFICATION	0.001152182375725069	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9996184267703819	WITHOUT_CLASSIFICATION	3.8157322961805505E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999267089744961	WITHOUT_CLASSIFICATION	7.329102550385992E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999826815895738	WITHOUT_CLASSIFICATION	1.7318410426179563E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999491351289312	WITHOUT_CLASSIFICATION	5.08648710688019E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999868173862414	WITHOUT_CLASSIFICATION	1.3182613758582183E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9998225835477786	WITHOUT_CLASSIFICATION	1.774164522213582E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998971177974076	WITHOUT_CLASSIFICATION	1.028822025924573E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998971177974076	WITHOUT_CLASSIFICATION	1.028822025924573E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998971177974076	WITHOUT_CLASSIFICATION	1.028822025924573E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998971177974076	WITHOUT_CLASSIFICATION	1.028822025924573E-4	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999748266266237	WITHOUT_CLASSIFICATION	2.5173373376366525E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999918161669221	WITHOUT_CLASSIFICATION	8.183833077863558E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999927698640838	WITHOUT_CLASSIFICATION	7.2301359162693945E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9996577974487258	WITHOUT_CLASSIFICATION	3.422025512741142E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9993845194267188	WITHOUT_CLASSIFICATION	6.154805732812263E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9987841010939135	WITHOUT_CLASSIFICATION	0.0012158989060865506	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9997733754356951	WITHOUT_CLASSIFICATION	2.2662456430500448E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999733679049028	WITHOUT_CLASSIFICATION	2.663209509724536E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999733679049028	WITHOUT_CLASSIFICATION	2.663209509724536E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999584387794483	WITHOUT_CLASSIFICATION	4.1561220551791806E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999003923243166	WITHOUT_CLASSIFICATION	9.960767568344086E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999230626239887	WITHOUT_CLASSIFICATION	7.693737601131278E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9959924855983548	WITHOUT_CLASSIFICATION	0.00400751440164509	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9959924855983548	WITHOUT_CLASSIFICATION	0.00400751440164509	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9993698606521353	WITHOUT_CLASSIFICATION	6.30139347864689E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999780055918738	WITHOUT_CLASSIFICATION	2.1994408126263904E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999780055918738	WITHOUT_CLASSIFICATION	2.1994408126263904E-5	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9982164548473441	WITHOUT_CLASSIFICATION	0.0017835451526557902	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.999996455806256	WITHOUT_CLASSIFICATION	3.5441937441215383E-6	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.999996644425946	WITHOUT_CLASSIFICATION	3.355574054045381E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9976383093186574	WITHOUT_CLASSIFICATION	0.002361690681342592	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9988437742527858	WITHOUT_CLASSIFICATION	0.0011562257472141734	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999960381366757	WITHOUT_CLASSIFICATION	3.961863324218535E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9737208257270605	WITHOUT_CLASSIFICATION	0.026279174272939496	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999917104773407	WITHOUT_CLASSIFICATION	8.289522659354779E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999559116703529	WITHOUT_CLASSIFICATION	4.408832964701731E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999791206502008	WITHOUT_CLASSIFICATION	2.087934979917641E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.990095691492161	WITHOUT_CLASSIFICATION	0.009904308507838966	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9957502882975118	WITHOUT_CLASSIFICATION	0.004249711702488247	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999781949656096	WITHOUT_CLASSIFICATION	2.1805034390438595E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9976374432850557	WITHOUT_CLASSIFICATION	0.00236255671494435	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.999655055113268	WITHOUT_CLASSIFICATION	3.449448867319935E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999481440482214	WITHOUT_CLASSIFICATION	5.185595177848003E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.999876923089919	WITHOUT_CLASSIFICATION	1.230769100808888E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9997072280630387	WITHOUT_CLASSIFICATION	2.927719369613259E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9948989134812501	WITHOUT_CLASSIFICATION	0.0051010865187499374	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9954350304196671	WITHOUT_CLASSIFICATION	0.004564969580332893	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9982018678172357	WITHOUT_CLASSIFICATION	0.001798132182764337	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998860759310491	WITHOUT_CLASSIFICATION	1.1392406895092905E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9540627222873446	WITHOUT_CLASSIFICATION	0.0459372777126555	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999709204002598	WITHOUT_CLASSIFICATION	2.9079599740282522E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999270299571457	WITHOUT_CLASSIFICATION	7.297004285444098E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999010644041744	WITHOUT_CLASSIFICATION	9.89355958256811E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9998498627755217	WITHOUT_CLASSIFICATION	1.5013722447832027E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9985923444592855	WITHOUT_CLASSIFICATION	0.0014076555407145778	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999027928254993	WITHOUT_CLASSIFICATION	9.72071745007586E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.6549855957672381	WITHOUT_CLASSIFICATION	0.3450144042327618	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9991660192001133	WITHOUT_CLASSIFICATION	8.33980799886621E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999139269835384	WITHOUT_CLASSIFICATION	8.607301646153873E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9995995754221736	WITHOUT_CLASSIFICATION	4.0042457782634566E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999426764486193	WITHOUT_CLASSIFICATION	5.732355138067121E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9996177642659457	WITHOUT_CLASSIFICATION	3.8223573405428136E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9995995754221736	WITHOUT_CLASSIFICATION	4.0042457782634566E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999426764486193	WITHOUT_CLASSIFICATION	5.732355138067121E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9998847910867412	WITHOUT_CLASSIFICATION	1.1520891325873956E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999386055096886	WITHOUT_CLASSIFICATION	6.139449031139931E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999386055096886	WITHOUT_CLASSIFICATION	6.139449031139931E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998047486475977	WITHOUT_CLASSIFICATION	1.952513524022667E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.997780010493819	WITHOUT_CLASSIFICATION	0.002219989506180952	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999647229122399	WITHOUT_CLASSIFICATION	3.52770877601549E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999613966307673	WITHOUT_CLASSIFICATION	3.860336923273421E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9937866603247021	WITHOUT_CLASSIFICATION	0.006213339675297914	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9987045226229411	WITHOUT_CLASSIFICATION	0.0012954773770589558	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9998920182547197	WITHOUT_CLASSIFICATION	1.0798174528022812E-4	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9998489880969639	WITHOUT_CLASSIFICATION	1.5101190303618703E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999683929792835	WITHOUT_CLASSIFICATION	3.160702071647297E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9996565303842133	WITHOUT_CLASSIFICATION	3.434696157866515E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9994251144844162	WITHOUT_CLASSIFICATION	5.748855155838573E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.999836594533343	WITHOUT_CLASSIFICATION	1.634054666570007E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.999721663993601	WITHOUT_CLASSIFICATION	2.7833600639896124E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999619626491374	WITHOUT_CLASSIFICATION	3.803735086264614E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999619626491374	WITHOUT_CLASSIFICATION	3.803735086264614E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999838825014442	WITHOUT_CLASSIFICATION	1.6117498555803434E-4	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999838825014442	WITHOUT_CLASSIFICATION	1.6117498555803434E-4	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9998882247598331	WITHOUT_CLASSIFICATION	1.1177524016699508E-4	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998293723155087	WITHOUT_CLASSIFICATION	1.7062768449133768E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999211200190442	WITHOUT_CLASSIFICATION	7.887998095582503E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999647229122399	WITHOUT_CLASSIFICATION	3.52770877601549E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999613966307673	WITHOUT_CLASSIFICATION	3.860336923273421E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999683929792835	WITHOUT_CLASSIFICATION	3.160702071647297E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9996565303842133	WITHOUT_CLASSIFICATION	3.434696157866515E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999129858761535	WITHOUT_CLASSIFICATION	8.701412384643347E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9998673186807877	WITHOUT_CLASSIFICATION	1.3268131921228497E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999685005975584	WITHOUT_CLASSIFICATION	3.149940244161525E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.999929482963202	WITHOUT_CLASSIFICATION	7.051703679797976E-5	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999686722703985	WITHOUT_CLASSIFICATION	3.132772960144122E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9998298235929789	WITHOUT_CLASSIFICATION	1.7017640702112375E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999551289112114	WITHOUT_CLASSIFICATION	4.487108878859344E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9998631948236901	WITHOUT_CLASSIFICATION	1.368051763098194E-4	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999174037149445	WITHOUT_CLASSIFICATION	8.259628505538318E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9972615222171388	WITHOUT_CLASSIFICATION	0.002738477782861204	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999867603308233	WITHOUT_CLASSIFICATION	1.3239669176694254E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999947115786509	WITHOUT_CLASSIFICATION	5.288421349098058E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.999913137098247	WITHOUT_CLASSIFICATION	8.686290175300885E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999902863075915	WITHOUT_CLASSIFICATION	9.713692408433444E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999893073212804	WITHOUT_CLASSIFICATION	1.0692678719611802E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998507610589221	WITHOUT_CLASSIFICATION	1.4923894107777958E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9995110249284624	WITHOUT_CLASSIFICATION	4.889750715376484E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998398329084937	WITHOUT_CLASSIFICATION	1.601670915063745E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999269493703733	WITHOUT_CLASSIFICATION	7.305062962672211E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999269493703733	WITHOUT_CLASSIFICATION	7.305062962672211E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999269493703733	WITHOUT_CLASSIFICATION	7.305062962672211E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9990512331100819	WITHOUT_CLASSIFICATION	9.487668899180757E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.999984959568379	WITHOUT_CLASSIFICATION	1.5040431620972196E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9996416958134242	WITHOUT_CLASSIFICATION	3.583041865757181E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9996416958134242	WITHOUT_CLASSIFICATION	3.583041865757181E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9996035829633052	WITHOUT_CLASSIFICATION	3.964170366947711E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.999988584707104	WITHOUT_CLASSIFICATION	1.1415292895968799E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999651979606756	WITHOUT_CLASSIFICATION	3.480203932434692E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9996297397571806	WITHOUT_CLASSIFICATION	3.7026024281932207E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998082897483956	WITHOUT_CLASSIFICATION	1.917102516043443E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9990987781556196	WITHOUT_CLASSIFICATION	9.012218443804136E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.999878876076482	WITHOUT_CLASSIFICATION	1.2112392351807446E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9997338636177886	WITHOUT_CLASSIFICATION	2.661363822113676E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9998624969962994	WITHOUT_CLASSIFICATION	1.3750300370068136E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998322027630054	WITHOUT_CLASSIFICATION	1.6779723699463143E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9997035921673878	WITHOUT_CLASSIFICATION	2.9640783261219284E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999289107024717	WITHOUT_CLASSIFICATION	7.108929752829356E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9995709786388897	WITHOUT_CLASSIFICATION	4.2902136111040923E-4	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999855992045658	WITHOUT_CLASSIFICATION	1.440079543435277E-5	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999749605466656	WITHOUT_CLASSIFICATION	2.5039453334418245E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9993068242464141	WITHOUT_CLASSIFICATION	6.931757535858723E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999458205683788	WITHOUT_CLASSIFICATION	5.417943162116792E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999884126396903	WITHOUT_CLASSIFICATION	1.1587360309565876E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998815296462461	WITHOUT_CLASSIFICATION	1.1847035375396244E-4	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999896536982957	WITHOUT_CLASSIFICATION	1.0346301704306363E-5	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999512560884641	WITHOUT_CLASSIFICATION	4.8743911535902326E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999678235375893	WITHOUT_CLASSIFICATION	3.217646241071958E-5	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9998586496790844	WITHOUT_CLASSIFICATION	1.4135032091553123E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999944827819683	WITHOUT_CLASSIFICATION	5.517218031680445E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999697728463764	WITHOUT_CLASSIFICATION	3.0227153623555273E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999697728463764	WITHOUT_CLASSIFICATION	3.0227153623555273E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999956533899784	WITHOUT_CLASSIFICATION	4.34661002159669E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999956533899784	WITHOUT_CLASSIFICATION	4.34661002159669E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999610588593835	WITHOUT_CLASSIFICATION	3.894114061657454E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999913574716052	WITHOUT_CLASSIFICATION	8.642528394807241E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999715536073991	WITHOUT_CLASSIFICATION	2.8446392600950097E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9998354525633905	WITHOUT_CLASSIFICATION	1.6454743660950755E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999884126396903	WITHOUT_CLASSIFICATION	1.1587360309565876E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999884126396903	WITHOUT_CLASSIFICATION	1.1587360309565876E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999884126396903	WITHOUT_CLASSIFICATION	1.1587360309565876E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998815296462461	WITHOUT_CLASSIFICATION	1.1847035375396244E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999715536073991	WITHOUT_CLASSIFICATION	2.8446392600950097E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999715536073991	WITHOUT_CLASSIFICATION	2.8446392600950097E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999048489277368	WITHOUT_CLASSIFICATION	9.515107226319528E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999957927693729	WITHOUT_CLASSIFICATION	4.2072306270509935E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999953918136159	WITHOUT_CLASSIFICATION	4.6081863841331035E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7963199051969121	WITHOUT_CLASSIFICATION	0.203680094803088	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999948610144943	WITHOUT_CLASSIFICATION	5.138985505629811E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999107649936254	WITHOUT_CLASSIFICATION	8.923500637459498E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999107649936254	WITHOUT_CLASSIFICATION	8.923500637459498E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998511465087484	WITHOUT_CLASSIFICATION	1.4885349125147053E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998961332938785	WITHOUT_CLASSIFICATION	1.0386670612145285E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998961332938785	WITHOUT_CLASSIFICATION	1.0386670612145285E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998961332938785	WITHOUT_CLASSIFICATION	1.0386670612145285E-4	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999846629139282	WITHOUT_CLASSIFICATION	1.533708607185318E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999908352316031	WITHOUT_CLASSIFICATION	9.16476839688295E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998815296462461	WITHOUT_CLASSIFICATION	1.1847035375396244E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999605031111096	WITHOUT_CLASSIFICATION	3.9496888890383834E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998961332938785	WITHOUT_CLASSIFICATION	1.0386670612145285E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998511465087484	WITHOUT_CLASSIFICATION	1.4885349125147053E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999440979710449	WITHOUT_CLASSIFICATION	5.5902028955073624E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999567647732789	WITHOUT_CLASSIFICATION	4.3235226721217235E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999531190724866	WITHOUT_CLASSIFICATION	4.6880927513336045E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999207758912695	WITHOUT_CLASSIFICATION	7.92241087306016E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999263730930747	WITHOUT_CLASSIFICATION	7.362690692525847E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9995087233114924	WITHOUT_CLASSIFICATION	4.912766885074751E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999940776376848	WITHOUT_CLASSIFICATION	5.922362315272344E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999808691352622	WITHOUT_CLASSIFICATION	1.9130864737824517E-5	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999629286274263	WITHOUT_CLASSIFICATION	3.707137257364487E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9998971667504596	WITHOUT_CLASSIFICATION	1.0283324954034976E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999035994310622	WITHOUT_CLASSIFICATION	9.640056893781914E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999775810329898	WITHOUT_CLASSIFICATION	2.2418967010181055E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9998255463434146	WITHOUT_CLASSIFICATION	1.7445365658543766E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999857553737109	WITHOUT_CLASSIFICATION	1.4244626289154858E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999701678147106	WITHOUT_CLASSIFICATION	2.9832185289323284E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999881288586202	WITHOUT_CLASSIFICATION	1.1871141379793957E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9995234783379084	WITHOUT_CLASSIFICATION	4.765216620916433E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999160083964962	WITHOUT_CLASSIFICATION	8.399160350383895E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999860531678388	WITHOUT_CLASSIFICATION	1.3946832161138463E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999894045703377	WITHOUT_CLASSIFICATION	1.0595429662247673E-5	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999316887779406	WITHOUT_CLASSIFICATION	6.831122205932945E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999504957849258	WITHOUT_CLASSIFICATION	4.9504215074261907E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999495351642004	WITHOUT_CLASSIFICATION	5.046483579954949E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999680102376495	WITHOUT_CLASSIFICATION	3.1989762350543975E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998804905921576	WITHOUT_CLASSIFICATION	1.1950940784240015E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.999968421139405	WITHOUT_CLASSIFICATION	3.1578860594952074E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999993658231981	WITHOUT_CLASSIFICATION	6.341768018191889E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999665870295008	WITHOUT_CLASSIFICATION	3.3412970499254905E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999245292883092	WITHOUT_CLASSIFICATION	7.547071169081913E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999461053140896	WITHOUT_CLASSIFICATION	5.389468591050198E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999440979710449	WITHOUT_CLASSIFICATION	5.5902028955073624E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999867560494162	WITHOUT_CLASSIFICATION	1.3243950583855603E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9996946990232732	WITHOUT_CLASSIFICATION	3.0530097672669003E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9986249573599375	WITHOUT_CLASSIFICATION	0.0013750426400625333	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999264210976964	WITHOUT_CLASSIFICATION	7.357890230356928E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999264210976964	WITHOUT_CLASSIFICATION	7.357890230356928E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999361741948681	WITHOUT_CLASSIFICATION	6.382580513187917E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.999982294760324	WITHOUT_CLASSIFICATION	1.770523967602695E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999665385910756	WITHOUT_CLASSIFICATION	3.346140892435075E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999628755385391	WITHOUT_CLASSIFICATION	3.712446146091083E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999512250170638	WITHOUT_CLASSIFICATION	4.8774982936117764E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999058318080961	WITHOUT_CLASSIFICATION	9.416819190380524E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9975924775765734	WITHOUT_CLASSIFICATION	0.002407522423426549	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999876249506394	WITHOUT_CLASSIFICATION	1.2375049360548071E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999114519280935	WITHOUT_CLASSIFICATION	8.854807190653317E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9985271954174053	WITHOUT_CLASSIFICATION	0.0014728045825946794	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9995386985673322	WITHOUT_CLASSIFICATION	4.613014326678401E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999816150858456	WITHOUT_CLASSIFICATION	1.838491415438247E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999816150858456	WITHOUT_CLASSIFICATION	1.838491415438247E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9990959499383842	WITHOUT_CLASSIFICATION	9.040500616159088E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999947132180307	WITHOUT_CLASSIFICATION	5.286781969364832E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999498959146067	WITHOUT_CLASSIFICATION	5.0104085393290434E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999498959146067	WITHOUT_CLASSIFICATION	5.0104085393290434E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999821268380504	WITHOUT_CLASSIFICATION	1.7873161949658673E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999590101396106	WITHOUT_CLASSIFICATION	4.0989860389371975E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9998631707191014	WITHOUT_CLASSIFICATION	1.3682928089875428E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9998127829873916	WITHOUT_CLASSIFICATION	1.8721701260829903E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9998770101018088	WITHOUT_CLASSIFICATION	1.2298989819115947E-4	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9996462295319073	WITHOUT_CLASSIFICATION	3.53770468092766E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999762793808696	WITHOUT_CLASSIFICATION	2.3720619130283713E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999906256186238	WITHOUT_CLASSIFICATION	9.374381376192942E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9986866212736085	WITHOUT_CLASSIFICATION	0.001313378726391545	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999913118382492	WITHOUT_CLASSIFICATION	8.688161750879157E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9997771400678309	WITHOUT_CLASSIFICATION	2.228599321690059E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.999952311813139	WITHOUT_CLASSIFICATION	4.76881868610091E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.999976790137554	WITHOUT_CLASSIFICATION	2.3209862445958638E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9997791410564261	WITHOUT_CLASSIFICATION	2.2085894357402815E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999810556280285	WITHOUT_CLASSIFICATION	1.894437197151455E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9943909042402682	WITHOUT_CLASSIFICATION	0.005609095759731764	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9998419603887915	WITHOUT_CLASSIFICATION	1.5803961120859918E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9998930111626712	WITHOUT_CLASSIFICATION	1.0698883732880555E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9995230935057996	WITHOUT_CLASSIFICATION	4.7690649420031666E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999637172562299	WITHOUT_CLASSIFICATION	3.628274377012362E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9583341775519288	WITHOUT_CLASSIFICATION	0.041665822448071065	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999553730885318	WITHOUT_CLASSIFICATION	4.462691146825549E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999778482828652	WITHOUT_CLASSIFICATION	2.2151717134872734E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999795152752803	WITHOUT_CLASSIFICATION	2.0484724719635204E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999801822904587	WITHOUT_CLASSIFICATION	1.981770954132539E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.999438103709757	WITHOUT_CLASSIFICATION	5.618962902428369E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9997820160151571	WITHOUT_CLASSIFICATION	2.179839848429371E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9996526296880981	WITHOUT_CLASSIFICATION	3.4737031190189386E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.999915876651116	WITHOUT_CLASSIFICATION	8.412334888405146E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999449619568083	WITHOUT_CLASSIFICATION	5.503804319176706E-5	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999035134137434	WITHOUT_CLASSIFICATION	9.648658625657409E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9995990873381463	WITHOUT_CLASSIFICATION	4.0091266185370673E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998451109413412	WITHOUT_CLASSIFICATION	1.5488905865869418E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998451109413412	WITHOUT_CLASSIFICATION	1.5488905865869418E-4	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999816381297493	WITHOUT_CLASSIFICATION	1.8361870250727105E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999749882291096	WITHOUT_CLASSIFICATION	2.501177089044125E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9996716137280449	WITHOUT_CLASSIFICATION	3.2838627195511116E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9997013823360229	WITHOUT_CLASSIFICATION	2.9861766397713265E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9996546632369542	WITHOUT_CLASSIFICATION	3.4533676304586636E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999854714820958	WITHOUT_CLASSIFICATION	1.4528517904050399E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9833788914072562	WITHOUT_CLASSIFICATION	0.0166211085927438	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9833788914072562	WITHOUT_CLASSIFICATION	0.0166211085927438	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9997063264381025	WITHOUT_CLASSIFICATION	2.9367356189748914E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9997559997139214	WITHOUT_CLASSIFICATION	2.4400028607870903E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9997350641507311	WITHOUT_CLASSIFICATION	2.649358492689181E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9534734876497604	WITHOUT_CLASSIFICATION	0.046526512350239545	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999053301401758	WITHOUT_CLASSIFICATION	9.466985982415358E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999008840711823	WITHOUT_CLASSIFICATION	9.911592881768334E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999857446303059	WITHOUT_CLASSIFICATION	1.4255369694157049E-5	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999843250784094	WITHOUT_CLASSIFICATION	1.5674921590618773E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9997615122342279	WITHOUT_CLASSIFICATION	2.3848776577201815E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999193932586642	WITHOUT_CLASSIFICATION	8.06067413358054E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999509468188762	WITHOUT_CLASSIFICATION	4.905318112388233E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999389845798271	WITHOUT_CLASSIFICATION	6.101542017285797E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9997985270326097	WITHOUT_CLASSIFICATION	2.01472967390309E-4	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999953931959195	WITHOUT_CLASSIFICATION	4.606804080505284E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9998898336452002	WITHOUT_CLASSIFICATION	1.1016635479980357E-4	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9995500131746015	WITHOUT_CLASSIFICATION	4.499868253985408E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9992959294690886	WITHOUT_CLASSIFICATION	7.040705309114798E-4	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.999990368439972	WITHOUT_CLASSIFICATION	9.631560027995503E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9997590614507145	WITHOUT_CLASSIFICATION	2.4093854928550047E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9997048585601273	WITHOUT_CLASSIFICATION	2.9514143987271216E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9984263605210969	WITHOUT_CLASSIFICATION	0.0015736394789031222	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9978730577648796	WITHOUT_CLASSIFICATION	0.002126942235120444	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999874690905151	WITHOUT_CLASSIFICATION	1.253090948504039E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999918002261984	WITHOUT_CLASSIFICATION	8.199773801616193E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9998626772764723	WITHOUT_CLASSIFICATION	1.3732272352769527E-4	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997438778805906	WITHOUT_CLASSIFICATION	2.561221194093104E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.999969011626631	WITHOUT_CLASSIFICATION	3.098837336903882E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998744391967682	WITHOUT_CLASSIFICATION	1.2556080323175014E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999380597732151	WITHOUT_CLASSIFICATION	6.194022678480143E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999621374632204	WITHOUT_CLASSIFICATION	3.78625367795028E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998157239675647	WITHOUT_CLASSIFICATION	1.8427603243536639E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999550152184482	WITHOUT_CLASSIFICATION	4.498478155175413E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999180569180827	WITHOUT_CLASSIFICATION	8.194308191728053E-5	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999545460381931	WITHOUT_CLASSIFICATION	4.5453961806914596E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999318752957417	WITHOUT_CLASSIFICATION	6.812470425836659E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998721132654694	WITHOUT_CLASSIFICATION	1.278867345304627E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9996253485526378	WITHOUT_CLASSIFICATION	3.7465144736208405E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9984137834327635	WITHOUT_CLASSIFICATION	0.001586216567236405	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999871670453723	WITHOUT_CLASSIFICATION	1.2832954627780625E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999960511651674	WITHOUT_CLASSIFICATION	3.94883483258264E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.99966421448553	WITHOUT_CLASSIFICATION	3.3578551446998046E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.998142423368501	WITHOUT_CLASSIFICATION	0.00185757663149888	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9982061718773608	WITHOUT_CLASSIFICATION	0.0017938281226391845	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9997479966581977	WITHOUT_CLASSIFICATION	2.520033418023419E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9998083013742378	WITHOUT_CLASSIFICATION	1.9169862576209085E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9992997267032167	WITHOUT_CLASSIFICATION	7.002732967833513E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9996601532712885	WITHOUT_CLASSIFICATION	3.3984672871140457E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998677260578518	WITHOUT_CLASSIFICATION	1.3227394214824207E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999628709712928	WITHOUT_CLASSIFICATION	3.712902870729526E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9634024583485525	WITHOUT_CLASSIFICATION	0.03659754165144736	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999262375642821	WITHOUT_CLASSIFICATION	7.376243571795467E-5	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996695121490454	WITHOUT_CLASSIFICATION	3.3048785095467746E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999858017551848	WITHOUT_CLASSIFICATION	1.4198244815202704E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999968768808015	WITHOUT_CLASSIFICATION	3.1231191985426705E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9992827087327968	WITHOUT_CLASSIFICATION	7.172912672032139E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999856311492838	WITHOUT_CLASSIFICATION	1.4368850716087448E-5	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999740373228528	WITHOUT_CLASSIFICATION	2.596267714719117E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999290732268806	WITHOUT_CLASSIFICATION	7.092677311936859E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998613749788431	WITHOUT_CLASSIFICATION	1.3862502115697845E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999363432826642	WITHOUT_CLASSIFICATION	6.36567173358669E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998613749788431	WITHOUT_CLASSIFICATION	1.3862502115697845E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999034428988929	WITHOUT_CLASSIFICATION	9.655710110702579E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999363432826642	WITHOUT_CLASSIFICATION	6.36567173358669E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999910510822303	WITHOUT_CLASSIFICATION	8.948917769742061E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998860759310491	WITHOUT_CLASSIFICATION	1.1392406895092905E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9994739681593912	WITHOUT_CLASSIFICATION	5.260318406087619E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9754966409208986	WITHOUT_CLASSIFICATION	0.024503359079101367	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999577196100834	WITHOUT_CLASSIFICATION	4.228038991659621E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9971791176387101	WITHOUT_CLASSIFICATION	0.0028208823612897427	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998596408257742	WITHOUT_CLASSIFICATION	1.4035917422582965E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9998073488466162	WITHOUT_CLASSIFICATION	1.9265115338390623E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.997780010493819	WITHOUT_CLASSIFICATION	0.002219989506180952	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999637172562299	WITHOUT_CLASSIFICATION	3.628274377012362E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999953918136159	WITHOUT_CLASSIFICATION	4.6081863841331035E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9890137660972873	WITHOUT_CLASSIFICATION	0.01098623390271274	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999753433410304	WITHOUT_CLASSIFICATION	2.4656658969563045E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999976179975708	WITHOUT_CLASSIFICATION	2.3820024291833132E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.999920843439699	WITHOUT_CLASSIFICATION	7.91565603010794E-5	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.999414570417627	WITHOUT_CLASSIFICATION	5.854295823729389E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999961017957818	WITHOUT_CLASSIFICATION	3.898204218181951E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9976147686077689	WITHOUT_CLASSIFICATION	0.0023852313922310877	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.990837240755564	WITHOUT_CLASSIFICATION	0.009162759244436028	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999760756515571	WITHOUT_CLASSIFICATION	2.3924348442893953E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999943308699779	WITHOUT_CLASSIFICATION	5.6691300220681696E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999837539309615	WITHOUT_CLASSIFICATION	1.6246069038433722E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9992721749110791	WITHOUT_CLASSIFICATION	7.278250889209508E-4	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.999982947164936	WITHOUT_CLASSIFICATION	1.705283506410899E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9983564482662592	WITHOUT_CLASSIFICATION	0.0016435517337406408	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999995593977813	WITHOUT_CLASSIFICATION	4.406022187051643E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999511216401472	WITHOUT_CLASSIFICATION	4.887835985283162E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999511216401472	WITHOUT_CLASSIFICATION	4.887835985283162E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999070095983289	WITHOUT_CLASSIFICATION	9.299040167119435E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999492321698205	WITHOUT_CLASSIFICATION	5.076783017946714E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998706462149137	WITHOUT_CLASSIFICATION	1.293537850862279E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9998751670016245	WITHOUT_CLASSIFICATION	1.2483299837549806E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999263820543652	WITHOUT_CLASSIFICATION	7.361794563478201E-5	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999449643539077	WITHOUT_CLASSIFICATION	5.5035646092467535E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9962575717836367	WITHOUT_CLASSIFICATION	0.0037424282163633226	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999689883794296	WITHOUT_CLASSIFICATION	3.101162057039355E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9994725936386469	WITHOUT_CLASSIFICATION	5.274063613529682E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9994725936386469	WITHOUT_CLASSIFICATION	5.274063613529682E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9998656726650503	WITHOUT_CLASSIFICATION	1.3432733494966387E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999329041923991	WITHOUT_CLASSIFICATION	6.709580760085005E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9836636005604305	WITHOUT_CLASSIFICATION	0.016336399439569518	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999801435556317	WITHOUT_CLASSIFICATION	1.9856444368375532E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9996213733746384	WITHOUT_CLASSIFICATION	3.7862662536162275E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9993927864360889	WITHOUT_CLASSIFICATION	6.072135639111265E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.999758837734713	WITHOUT_CLASSIFICATION	2.4116226528694498E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999034428988929	WITHOUT_CLASSIFICATION	9.655710110702579E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999269163466455	WITHOUT_CLASSIFICATION	7.308365335449257E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999942084446835	WITHOUT_CLASSIFICATION	5.791555316552359E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.99998414048311	WITHOUT_CLASSIFICATION	1.585951688993753E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999556081117729	WITHOUT_CLASSIFICATION	4.4391888227197775E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999224488193265	WITHOUT_CLASSIFICATION	7.755118067346802E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999224488193265	WITHOUT_CLASSIFICATION	7.755118067346802E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999329041923991	WITHOUT_CLASSIFICATION	6.709580760085005E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999937833711818	WITHOUT_CLASSIFICATION	6.216628818093867E-6	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.929525809323399	WITHOUT_CLASSIFICATION	0.070474190676601	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999722116765508	WITHOUT_CLASSIFICATION	2.778832344915981E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9998883159028775	WITHOUT_CLASSIFICATION	1.1168409712249643E-4	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998935473888219	WITHOUT_CLASSIFICATION	1.0645261117814973E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998802356137594	WITHOUT_CLASSIFICATION	1.1976438624055781E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9998642194371712	WITHOUT_CLASSIFICATION	1.357805628288201E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9985253295817645	WITHOUT_CLASSIFICATION	0.001474670418235475	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9995849491442214	WITHOUT_CLASSIFICATION	4.1505085577868926E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.999966471837783	WITHOUT_CLASSIFICATION	3.3528162217062816E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999942267138581	WITHOUT_CLASSIFICATION	5.7732861418329416E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9994512798157323	WITHOUT_CLASSIFICATION	5.487201842676998E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999561926203007	WITHOUT_CLASSIFICATION	4.3807379699427786E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998186795136317	WITHOUT_CLASSIFICATION	1.813204863682915E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998497107842508	WITHOUT_CLASSIFICATION	1.5028921574922037E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999078661741102	WITHOUT_CLASSIFICATION	9.213382588975508E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999578723646597	WITHOUT_CLASSIFICATION	4.2127635340311636E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999578723646597	WITHOUT_CLASSIFICATION	4.2127635340311636E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985090342762424	WITHOUT_CLASSIFICATION	0.0014909657237575484	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999671111610751	WITHOUT_CLASSIFICATION	3.2888838925031414E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999942438999175	WITHOUT_CLASSIFICATION	5.756100082521252E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999872597436767	WITHOUT_CLASSIFICATION	1.274025632334814E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9989155941012855	WITHOUT_CLASSIFICATION	0.0010844058987145274	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9989155941012855	WITHOUT_CLASSIFICATION	0.0010844058987145274	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999514610090962	WITHOUT_CLASSIFICATION	4.853899090382858E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999990823325158	WITHOUT_CLASSIFICATION	9.176674843056167E-7	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.999305036127287	WITHOUT_CLASSIFICATION	6.949638727129435E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9997397430266379	WITHOUT_CLASSIFICATION	2.602569733620303E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999623266111903	WITHOUT_CLASSIFICATION	3.767338880972536E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999696119399144	WITHOUT_CLASSIFICATION	3.0388060085647162E-5	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999711539007463	WITHOUT_CLASSIFICATION	2.884609925366007E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9986492233237728	WITHOUT_CLASSIFICATION	0.0013507766762271573	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999848723412187	WITHOUT_CLASSIFICATION	1.5127658781365904E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9998556923248586	WITHOUT_CLASSIFICATION	1.4430767514133472E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998429865429742	WITHOUT_CLASSIFICATION	1.570134570258023E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993882280622431	WITHOUT_CLASSIFICATION	6.117719377569563E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999858902510891	WITHOUT_CLASSIFICATION	1.4109748910901926E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999576225747	WITHOUT_CLASSIFICATION	4.237742524799054E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.99998409867715	WITHOUT_CLASSIFICATION	1.5901322850058586E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998197689928662	WITHOUT_CLASSIFICATION	1.8023100713384705E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999684076092787	WITHOUT_CLASSIFICATION	3.159239072120436E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998605535842047	WITHOUT_CLASSIFICATION	1.3944641579542952E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9995127813919998	WITHOUT_CLASSIFICATION	4.872186080000701E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999308647377971	WITHOUT_CLASSIFICATION	6.913526220286572E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998471046573648	WITHOUT_CLASSIFICATION	1.528953426351969E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999701945548589	WITHOUT_CLASSIFICATION	2.9805445141070014E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998923832494405	WITHOUT_CLASSIFICATION	1.076167505595107E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999542171400692	WITHOUT_CLASSIFICATION	4.5782859930906034E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9996312141633279	WITHOUT_CLASSIFICATION	3.6878583667206117E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9958319514658092	WITHOUT_CLASSIFICATION	0.004168048534190921	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9994400656885626	WITHOUT_CLASSIFICATION	5.599343114374683E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9997779796137231	WITHOUT_CLASSIFICATION	2.2202038627709377E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999888023591121	WITHOUT_CLASSIFICATION	1.1197640887853398E-5	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9998282689203565	WITHOUT_CLASSIFICATION	1.717310796434936E-4	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9992244389894297	WITHOUT_CLASSIFICATION	7.755610105703153E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999652088955026	WITHOUT_CLASSIFICATION	3.479110449745498E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999312439661434	WITHOUT_CLASSIFICATION	6.875603385662835E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9998353787206256	WITHOUT_CLASSIFICATION	1.6462127937433066E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9685498188644334	WITHOUT_CLASSIFICATION	0.031450181135566725	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9995693379514289	WITHOUT_CLASSIFICATION	4.3066204857106373E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9993833550545682	WITHOUT_CLASSIFICATION	6.166449454317885E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987845848191428	WITHOUT_CLASSIFICATION	0.0012154151808571698	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.99912799085025	WITHOUT_CLASSIFICATION	8.720091497500641E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999951318749512	WITHOUT_CLASSIFICATION	4.8681250488011765E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999695117301292	WITHOUT_CLASSIFICATION	3.048826987076007E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999599018443732	WITHOUT_CLASSIFICATION	4.009815562677444E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999908735322157	WITHOUT_CLASSIFICATION	9.126467784317176E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.999896933456654	WITHOUT_CLASSIFICATION	1.0306654334592315E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9990260171776919	WITHOUT_CLASSIFICATION	9.73982822308144E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9990260171776919	WITHOUT_CLASSIFICATION	9.73982822308144E-4	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999852568321362	WITHOUT_CLASSIFICATION	1.4743167863707048E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993023741308967	WITHOUT_CLASSIFICATION	6.976258691032777E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9987625005552857	WITHOUT_CLASSIFICATION	0.0012374994447142491	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9990121377881946	WITHOUT_CLASSIFICATION	9.878622118053364E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999957642311132	WITHOUT_CLASSIFICATION	4.2357688867466275E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999957642311132	WITHOUT_CLASSIFICATION	4.2357688867466275E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9980666763074355	WITHOUT_CLASSIFICATION	0.0019333236925644615	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9996075229649988	WITHOUT_CLASSIFICATION	3.92477035001244E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.999953093392636	WITHOUT_CLASSIFICATION	4.690660736393664E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999855026691523	WITHOUT_CLASSIFICATION	1.449733084778296E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999505224285228	WITHOUT_CLASSIFICATION	4.947757147727902E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999505224285228	WITHOUT_CLASSIFICATION	4.947757147727902E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999885919737977	WITHOUT_CLASSIFICATION	1.1408026202333953E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999885919737977	WITHOUT_CLASSIFICATION	1.1408026202333953E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999377365939222	WITHOUT_CLASSIFICATION	6.226340607794929E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999820624592179	WITHOUT_CLASSIFICATION	1.7937540782094334E-4	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999673571258724	WITHOUT_CLASSIFICATION	3.264287412758979E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9996537293190308	WITHOUT_CLASSIFICATION	3.46270680969182E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998841689857788	WITHOUT_CLASSIFICATION	1.1583101422117073E-4	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9998682150729956	WITHOUT_CLASSIFICATION	1.317849270042906E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999513614986464	WITHOUT_CLASSIFICATION	4.863850135359407E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999361385948983	WITHOUT_CLASSIFICATION	6.386140510168063E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999442172240695	WITHOUT_CLASSIFICATION	5.5782775930509944E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9996892997129696	WITHOUT_CLASSIFICATION	3.1070028703048273E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.998514933267084	WITHOUT_CLASSIFICATION	0.0014850667329160828	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999829108808036	WITHOUT_CLASSIFICATION	1.7089119196391345E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999447142457678	WITHOUT_CLASSIFICATION	5.5285754232122385E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9997017544217905	WITHOUT_CLASSIFICATION	2.982455782094528E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999983150986744	WITHOUT_CLASSIFICATION	1.6849013255962705E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998371129771776	WITHOUT_CLASSIFICATION	1.6288702282230786E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9997280751261378	WITHOUT_CLASSIFICATION	2.719248738622283E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998174886721931	WITHOUT_CLASSIFICATION	1.8251132780682896E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999239068925447	WITHOUT_CLASSIFICATION	7.609310745525263E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999462636529416	WITHOUT_CLASSIFICATION	5.373634705842277E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9890137660972873	WITHOUT_CLASSIFICATION	0.01098623390271274	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999894617385857	WITHOUT_CLASSIFICATION	1.053826141434104E-5	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999198890837061	WITHOUT_CLASSIFICATION	8.011091629390265E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999675795121881	WITHOUT_CLASSIFICATION	3.242048781187634E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997855458244354	WITHOUT_CLASSIFICATION	2.144541755647149E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999620809701274	WITHOUT_CLASSIFICATION	3.7919029872669375E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999323597067734	WITHOUT_CLASSIFICATION	6.76402932265728E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9996746005237037	WITHOUT_CLASSIFICATION	3.253994762961901E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9987625224707434	WITHOUT_CLASSIFICATION	0.0012374775292566178	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999733172369316	WITHOUT_CLASSIFICATION	2.6682763068367804E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.999685246419386	WITHOUT_CLASSIFICATION	3.1475358061396237E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998663931550122	WITHOUT_CLASSIFICATION	1.3360684498783774E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9985850734917575	WITHOUT_CLASSIFICATION	0.0014149265082424927	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9997211706963977	WITHOUT_CLASSIFICATION	2.7882930360243564E-4	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9976085333414285	WITHOUT_CLASSIFICATION	0.002391466658571477	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999866773126224	WITHOUT_CLASSIFICATION	1.3322687377550811E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9997900385044546	WITHOUT_CLASSIFICATION	2.099614955454317E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999929009906309	WITHOUT_CLASSIFICATION	7.09900936909371E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9301713487279678	WITHOUT_CLASSIFICATION	0.0698286512720322	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999931284541153	WITHOUT_CLASSIFICATION	6.871545884785307E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9996705955094727	WITHOUT_CLASSIFICATION	3.294044905272888E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9997242759089275	WITHOUT_CLASSIFICATION	2.7572409107247116E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9998601874909748	WITHOUT_CLASSIFICATION	1.398125090251611E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9975477776576174	WITHOUT_CLASSIFICATION	0.002452222342382723	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997289357598658	WITHOUT_CLASSIFICATION	2.710642401343255E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999655337637315	WITHOUT_CLASSIFICATION	3.446623626837024E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998596071329493	WITHOUT_CLASSIFICATION	1.4039286705063946E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9998696263169811	WITHOUT_CLASSIFICATION	1.3037368301897182E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.999863051476175	WITHOUT_CLASSIFICATION	1.3694852382498305E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999809142037257	WITHOUT_CLASSIFICATION	1.908579627434951E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999809142037257	WITHOUT_CLASSIFICATION	1.908579627434951E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999438040019484	WITHOUT_CLASSIFICATION	5.6195998051569985E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999438040019484	WITHOUT_CLASSIFICATION	5.6195998051569985E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9988925628039375	WITHOUT_CLASSIFICATION	0.0011074371960625156	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9988925628039375	WITHOUT_CLASSIFICATION	0.0011074371960625156	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998947480138831	WITHOUT_CLASSIFICATION	1.0525198611691306E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998947480138831	WITHOUT_CLASSIFICATION	1.0525198611691306E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994900461451788	WITHOUT_CLASSIFICATION	5.099538548211804E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994900461451788	WITHOUT_CLASSIFICATION	5.099538548211804E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9994900461451788	WITHOUT_CLASSIFICATION	5.099538548211804E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999390572901328	WITHOUT_CLASSIFICATION	6.094270986726864E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999239894192201	WITHOUT_CLASSIFICATION	7.601058077986475E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998379576510258	WITHOUT_CLASSIFICATION	1.6204234897423264E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998379576510258	WITHOUT_CLASSIFICATION	1.6204234897423264E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998379576510258	WITHOUT_CLASSIFICATION	1.6204234897423264E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999546690302364	WITHOUT_CLASSIFICATION	4.5330969763593926E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998908818363652	WITHOUT_CLASSIFICATION	1.0911816363485974E-4	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.999971114021734	WITHOUT_CLASSIFICATION	2.888597826610074E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.999971114021734	WITHOUT_CLASSIFICATION	2.888597826610074E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995659481125501	WITHOUT_CLASSIFICATION	4.3405188744993886E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999998672632966	WITHOUT_CLASSIFICATION	1.3273670340057622E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999998672632966	WITHOUT_CLASSIFICATION	1.3273670340057622E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.811535397257466	DEFECT	0.1884646027425339	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998915439229471	WITHOUT_CLASSIFICATION	1.0845607705289669E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9998610648404305	WITHOUT_CLASSIFICATION	1.3893515956965713E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.997574438066752	WITHOUT_CLASSIFICATION	0.002425561933248084	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999829988696542	WITHOUT_CLASSIFICATION	1.7001130345775472E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999983295902866	WITHOUT_CLASSIFICATION	1.6704097135159397E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9919705480255481	WITHOUT_CLASSIFICATION	0.008029451974452014	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9992642329356003	WITHOUT_CLASSIFICATION	7.357670643997853E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999572507603317	WITHOUT_CLASSIFICATION	4.27492396682238E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999943278129929	WITHOUT_CLASSIFICATION	5.672187007048607E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9998860791803161	WITHOUT_CLASSIFICATION	1.139208196838741E-4	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.999658456723452	WITHOUT_CLASSIFICATION	3.4154327654804296E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997638553758649	WITHOUT_CLASSIFICATION	2.361446241350789E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9997327174759629	WITHOUT_CLASSIFICATION	2.6728252403704204E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997648253418133	WITHOUT_CLASSIFICATION	2.3517465818668053E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.6815096227139096	WITHOUT_CLASSIFICATION	0.3184903772860905	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9660356916909233	WITHOUT_CLASSIFICATION	0.03396430830907666	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999746311586607	WITHOUT_CLASSIFICATION	2.536884133932868E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999736625034193	WITHOUT_CLASSIFICATION	2.6337496580689135E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998861492630176	WITHOUT_CLASSIFICATION	1.138507369824753E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996695121490454	WITHOUT_CLASSIFICATION	3.3048785095467746E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999431142749144	WITHOUT_CLASSIFICATION	5.688572508560169E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999754216100457	WITHOUT_CLASSIFICATION	2.4578389954237643E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9973062068654166	WITHOUT_CLASSIFICATION	0.0026937931345832706	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9262729002376763	WITHOUT_CLASSIFICATION	0.07372709976232367	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9998611049563321	WITHOUT_CLASSIFICATION	1.3889504366796954E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999999297335486	WITHOUT_CLASSIFICATION	7.026645139650836E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.999908260395798	WITHOUT_CLASSIFICATION	9.173960420196827E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999834643495956	WITHOUT_CLASSIFICATION	1.6535650404384813E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9995978186307451	WITHOUT_CLASSIFICATION	4.0218136925489044E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999372805122699	WITHOUT_CLASSIFICATION	6.271948773006172E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999960511651674	WITHOUT_CLASSIFICATION	3.94883483258264E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998591664123537	WITHOUT_CLASSIFICATION	1.4083358764621E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998591664123537	WITHOUT_CLASSIFICATION	1.4083358764621E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998591664123537	WITHOUT_CLASSIFICATION	1.4083358764621E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998591664123537	WITHOUT_CLASSIFICATION	1.4083358764621E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999956444658666	WITHOUT_CLASSIFICATION	4.355534133448113E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9996564287502676	WITHOUT_CLASSIFICATION	3.43571249732373E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999215862673221	WITHOUT_CLASSIFICATION	7.841373267792373E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999215862673221	WITHOUT_CLASSIFICATION	7.841373267792373E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999663252385519	WITHOUT_CLASSIFICATION	3.367476144809747E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998100748510554	WITHOUT_CLASSIFICATION	1.899251489446406E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9994457036659488	WITHOUT_CLASSIFICATION	5.542963340512512E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999934835307901	WITHOUT_CLASSIFICATION	6.516469209797389E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9970066662931164	WITHOUT_CLASSIFICATION	0.0029933337068837195	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9987345632211765	WITHOUT_CLASSIFICATION	0.001265436778823527	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999187415388114	WITHOUT_CLASSIFICATION	8.125846118857286E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999870234709939	WITHOUT_CLASSIFICATION	1.2976529006164973E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999870234709939	WITHOUT_CLASSIFICATION	1.2976529006164973E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999870234709939	WITHOUT_CLASSIFICATION	1.2976529006164973E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999870234709939	WITHOUT_CLASSIFICATION	1.2976529006164973E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999936162726082	WITHOUT_CLASSIFICATION	6.383727391809129E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9993855832397879	WITHOUT_CLASSIFICATION	6.14416760212157E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9993855832397879	WITHOUT_CLASSIFICATION	6.14416760212157E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9993855832397879	WITHOUT_CLASSIFICATION	6.14416760212157E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9996049049881499	WITHOUT_CLASSIFICATION	3.950950118501797E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999747008392686	WITHOUT_CLASSIFICATION	2.529916073131686E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999935526127116	WITHOUT_CLASSIFICATION	6.447387288390635E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9985733231912205	WITHOUT_CLASSIFICATION	0.001426676808779585	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9992238098839786	WITHOUT_CLASSIFICATION	7.761901160213445E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9992160729483325	WITHOUT_CLASSIFICATION	7.839270516675896E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9992160729483325	WITHOUT_CLASSIFICATION	7.839270516675896E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996769187612693	WITHOUT_CLASSIFICATION	3.230812387307542E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9996769187612693	WITHOUT_CLASSIFICATION	3.230812387307542E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999983240454872	WITHOUT_CLASSIFICATION	1.6759545129253522E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999991050095672	WITHOUT_CLASSIFICATION	8.949904328338844E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998144557644008	WITHOUT_CLASSIFICATION	1.8554423559921852E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9864599508383456	WITHOUT_CLASSIFICATION	0.013540049161654362	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998949964807975	WITHOUT_CLASSIFICATION	1.0500351920248165E-4	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.999993249239192	WITHOUT_CLASSIFICATION	6.7507608080358066E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998316953953122	WITHOUT_CLASSIFICATION	1.6830460468785725E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999133625019968	WITHOUT_CLASSIFICATION	8.663749800326797E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9992084430885018	WITHOUT_CLASSIFICATION	7.915569114982917E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999920088749837	WITHOUT_CLASSIFICATION	7.99112501638113E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999920088749837	WITHOUT_CLASSIFICATION	7.99112501638113E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999632793061989	WITHOUT_CLASSIFICATION	3.672069380104956E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999632793061989	WITHOUT_CLASSIFICATION	3.672069380104956E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9994711260754294	WITHOUT_CLASSIFICATION	5.288739245706181E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9993000183713123	WITHOUT_CLASSIFICATION	6.999816286875923E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999276400399384	WITHOUT_CLASSIFICATION	7.235996006155371E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988157771806703	WITHOUT_CLASSIFICATION	0.0011842228193297292	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988157771806703	WITHOUT_CLASSIFICATION	0.0011842228193297292	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988157771806703	WITHOUT_CLASSIFICATION	0.0011842228193297292	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999591309063052	WITHOUT_CLASSIFICATION	4.086909369482071E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9994267898027659	WITHOUT_CLASSIFICATION	5.732101972341316E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9988163054241416	WITHOUT_CLASSIFICATION	0.0011836945758584687	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9996884883947948	WITHOUT_CLASSIFICATION	3.115116052051357E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.997674056041487	WITHOUT_CLASSIFICATION	0.0023259439585129995	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999704024125838	WITHOUT_CLASSIFICATION	2.9597587416170784E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9837762452490505	WITHOUT_CLASSIFICATION	0.016223754750949552	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998600749691096	WITHOUT_CLASSIFICATION	1.3992503089041292E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998141090677043	WITHOUT_CLASSIFICATION	1.85890932295671E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999511216401472	WITHOUT_CLASSIFICATION	4.887835985283162E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999173675866765	WITHOUT_CLASSIFICATION	8.263241332357508E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9993867044557309	WITHOUT_CLASSIFICATION	6.132955442692612E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999737088136098	WITHOUT_CLASSIFICATION	2.629118639018213E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9992806371453591	WITHOUT_CLASSIFICATION	7.193628546409089E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.8941920317642422	WITHOUT_CLASSIFICATION	0.10580796823575786	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9974066354620681	WITHOUT_CLASSIFICATION	0.0025933645379318756	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9995245841343282	WITHOUT_CLASSIFICATION	4.7541586567176146E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999730306576166	WITHOUT_CLASSIFICATION	2.696934238346737E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.999946864672573	WITHOUT_CLASSIFICATION	5.313532742698951E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.999908269126579	WITHOUT_CLASSIFICATION	9.173087342096362E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999543451689128	WITHOUT_CLASSIFICATION	4.5654831087167E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999444304258597	WITHOUT_CLASSIFICATION	5.5569574140408646E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9886828499997984	WITHOUT_CLASSIFICATION	0.011317150000201656	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9976013225074445	WITHOUT_CLASSIFICATION	0.0023986774925555234	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999501038776112	WITHOUT_CLASSIFICATION	4.9896122388855376E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999848542303459	WITHOUT_CLASSIFICATION	1.514576965407062E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9862293410425634	WITHOUT_CLASSIFICATION	0.01377065895743658	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.8872111360025441	WITHOUT_CLASSIFICATION	0.11278886399745594	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9996972164683733	WITHOUT_CLASSIFICATION	3.027835316267919E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.999901139024707	WITHOUT_CLASSIFICATION	9.886097529295574E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999021594776876	WITHOUT_CLASSIFICATION	9.784052231240617E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999299461281613	WITHOUT_CLASSIFICATION	7.005387183861809E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9995137313990476	WITHOUT_CLASSIFICATION	4.8626860095237466E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9979348133910249	WITHOUT_CLASSIFICATION	0.002065186608975105	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9857395541476751	WITHOUT_CLASSIFICATION	0.014260445852324836	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996034112959631	WITHOUT_CLASSIFICATION	3.9658870403694367E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996034112959631	WITHOUT_CLASSIFICATION	3.9658870403694367E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9935431772571116	WITHOUT_CLASSIFICATION	0.006456822742888452	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999975425657923	WITHOUT_CLASSIFICATION	2.4574342077005308E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.999975425657923	WITHOUT_CLASSIFICATION	2.4574342077005308E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9996302289852463	WITHOUT_CLASSIFICATION	3.6977101475365985E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999826098370753	WITHOUT_CLASSIFICATION	1.739016292465227E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999835490344008	WITHOUT_CLASSIFICATION	1.6450965599193232E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999539845386665	WITHOUT_CLASSIFICATION	4.6015461333627386E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999539845386665	WITHOUT_CLASSIFICATION	4.6015461333627386E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999916878678857	WITHOUT_CLASSIFICATION	8.31213211422089E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997112017856751	WITHOUT_CLASSIFICATION	2.887982143249056E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997112017856751	WITHOUT_CLASSIFICATION	2.887982143249056E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9990152190688067	WITHOUT_CLASSIFICATION	9.847809311932148E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9477892456266682	WITHOUT_CLASSIFICATION	0.052210754373331766	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9993213622154395	WITHOUT_CLASSIFICATION	6.786377845604094E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999637370585034	WITHOUT_CLASSIFICATION	3.626294149654712E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998939206215048	WITHOUT_CLASSIFICATION	1.0607937849513705E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998838036309048	WITHOUT_CLASSIFICATION	1.1619636909529865E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999789435554504	WITHOUT_CLASSIFICATION	2.1056444549559815E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999456081437783	WITHOUT_CLASSIFICATION	5.4391856221736844E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999230626239887	WITHOUT_CLASSIFICATION	7.693737601131278E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9990640754963225	WITHOUT_CLASSIFICATION	9.359245036775307E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9988478176242749	WITHOUT_CLASSIFICATION	0.001152182375725069	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9998947411716429	WITHOUT_CLASSIFICATION	1.0525882835712835E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999491351289312	WITHOUT_CLASSIFICATION	5.08648710688019E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9998273736280676	WITHOUT_CLASSIFICATION	1.726263719322787E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998047486475977	WITHOUT_CLASSIFICATION	1.952513524022667E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999648961304268	WITHOUT_CLASSIFICATION	3.510386957325457E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9996366343043191	WITHOUT_CLASSIFICATION	3.6336569568082516E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9937866603247021	WITHOUT_CLASSIFICATION	0.006213339675297914	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999683929792835	WITHOUT_CLASSIFICATION	3.160702071647297E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999683929792835	WITHOUT_CLASSIFICATION	3.160702071647297E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9997333335112703	WITHOUT_CLASSIFICATION	2.6666648872982515E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999444480762475	WITHOUT_CLASSIFICATION	5.5551923752539235E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9993735076454492	WITHOUT_CLASSIFICATION	6.264923545507397E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9993734241046306	WITHOUT_CLASSIFICATION	6.265758953694378E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999263730930747	WITHOUT_CLASSIFICATION	7.362690692525847E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999263730930747	WITHOUT_CLASSIFICATION	7.362690692525847E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999263730930747	WITHOUT_CLASSIFICATION	7.362690692525847E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999808691352622	WITHOUT_CLASSIFICATION	1.9130864737824517E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9995234783379084	WITHOUT_CLASSIFICATION	4.765216620916433E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999488681457286	WITHOUT_CLASSIFICATION	5.113185427138555E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999881633120076	WITHOUT_CLASSIFICATION	1.1836687992536813E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999966226284045	WITHOUT_CLASSIFICATION	3.3773715953879775E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999384095152449	WITHOUT_CLASSIFICATION	6.159048475502923E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9995389570394144	WITHOUT_CLASSIFICATION	4.610429605856802E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9985271954174053	WITHOUT_CLASSIFICATION	0.0014728045825946794	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999114519280935	WITHOUT_CLASSIFICATION	8.854807190653317E-5	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999836597343695	WITHOUT_CLASSIFICATION	1.6340265630383052E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999582894606749	WITHOUT_CLASSIFICATION	4.171053932501484E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999767192209087	WITHOUT_CLASSIFICATION	2.3280779091260195E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9583341775519288	WITHOUT_CLASSIFICATION	0.041665822448071065	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999194042475036	WITHOUT_CLASSIFICATION	8.059575249639953E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999869267824866	WITHOUT_CLASSIFICATION	1.307321751335218E-5	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9997993086429056	WITHOUT_CLASSIFICATION	2.006913570944443E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999849599916196	WITHOUT_CLASSIFICATION	1.5040008380259255E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999874690905151	WITHOUT_CLASSIFICATION	1.253090948504039E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999578636505029	WITHOUT_CLASSIFICATION	4.2136349497153485E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9667666796106889	WITHOUT_CLASSIFICATION	0.03323332038931113	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9693233464102601	DEFECT	0.03067665358974001	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9411879418257649	WITHOUT_CLASSIFICATION	0.05881205817423497	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9932975324315004	DEFECT	0.006702467568499541	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.8766689456629124	DEFECT	0.12333105433708753	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9815356170329974	WITHOUT_CLASSIFICATION	0.018464382967002625	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9775593151538026	WITHOUT_CLASSIFICATION	0.022440684846197365	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9213661933406985	WITHOUT_CLASSIFICATION	0.07863380665930149	DEFECT
// FIXME: not correct exception	DEFECT	0.8125979639380444	WITHOUT_CLASSIFICATION	0.18740203606195563	DEFECT
// XXX actually only on windows...	DEFECT	0.9981236216331653	WITHOUT_CLASSIFICATION	0.0018763783668348116	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9880786555952112	WITHOUT_CLASSIFICATION	0.011921344404788712	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9146990121073962	WITHOUT_CLASSIFICATION	0.08530098789260372	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9917905992662478	WITHOUT_CLASSIFICATION	0.008209400733752226	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9010950614183731	DEFECT	0.09890493858162676	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9405805128354552	WITHOUT_CLASSIFICATION	0.05941948716454481	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9829918509399528	WITHOUT_CLASSIFICATION	0.01700814906004723	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9829918509399528	WITHOUT_CLASSIFICATION	0.01700814906004723	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9495996581596916	WITHOUT_CLASSIFICATION	0.05040034184030839	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9979424262346729	WITHOUT_CLASSIFICATION	0.002057573765327135	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9938137962690512	WITHOUT_CLASSIFICATION	0.006186203730948765	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998476674552628	WITHOUT_CLASSIFICATION	1.5233254473718673E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998476674552628	WITHOUT_CLASSIFICATION	1.5233254473718673E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.8800498760740494	WITHOUT_CLASSIFICATION	0.11995012392595061	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9914564997314885	WITHOUT_CLASSIFICATION	0.008543500268511568	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.986937125685629	WITHOUT_CLASSIFICATION	0.013062874314371139	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7892255568832985	WITHOUT_CLASSIFICATION	0.21077444311670154	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.7903073174695312	WITHOUT_CLASSIFICATION	0.20969268253046883	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6835457001171745	WITHOUT_CLASSIFICATION	0.31645429988282536	DEFECT
// TODO: proper sign	DEFECT	0.9620225447336493	WITHOUT_CLASSIFICATION	0.03797745526635067	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.6132283850804686	WITHOUT_CLASSIFICATION	0.3867716149195315	DEFECT
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.8109006231222746	WITHOUT_CLASSIFICATION	0.18909937687772538	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8980300390086451	WITHOUT_CLASSIFICATION	0.10196996099135487	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9372912312125244	WITHOUT_CLASSIFICATION	0.06270876878747564	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.7612129508071724	WITHOUT_CLASSIFICATION	0.2387870491928276	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7536886887993551	DEFECT	0.2463113112006449	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9870543691577143	WITHOUT_CLASSIFICATION	0.012945630842285779	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9639795183408463	WITHOUT_CLASSIFICATION	0.03602048165915365	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9924726791027447	WITHOUT_CLASSIFICATION	0.007527320897255313	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9976247788358948	WITHOUT_CLASSIFICATION	0.0023752211641052245	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9598994763843692	WITHOUT_CLASSIFICATION	0.040100523615630705	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.989613587332005	WITHOUT_CLASSIFICATION	0.010386412667995074	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9997660921239776	WITHOUT_CLASSIFICATION	2.3390787602252047E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9816068156728516	WITHOUT_CLASSIFICATION	0.018393184327148423	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9816068156728516	WITHOUT_CLASSIFICATION	0.018393184327148423	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9938713229004018	WITHOUT_CLASSIFICATION	0.00612867709959813	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9902947771482714	WITHOUT_CLASSIFICATION	0.009705222851728526	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.5025937011216883	WITHOUT_CLASSIFICATION	0.4974062988783118	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9984649785117921	WITHOUT_CLASSIFICATION	0.0015350214882079844	DEFECT
// FIXME: This is wrong	DEFECT	0.9307735337640548	WITHOUT_CLASSIFICATION	0.06922646623594517	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9902980945398785	WITHOUT_CLASSIFICATION	0.009701905460121557	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999438236654216	WITHOUT_CLASSIFICATION	5.6176334578329443E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.6269997668329712	WITHOUT_CLASSIFICATION	0.37300023316702874	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9988184748774517	WITHOUT_CLASSIFICATION	0.0011815251225482674	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9949267931612417	WITHOUT_CLASSIFICATION	0.005073206838758449	DEFECT
// FIXME: Broken but behaving	DEFECT	0.896020381075071	DEFECT	0.10397961892492902	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9158360994950449	DEFECT	0.08416390050495515	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9158360994950449	DEFECT	0.08416390050495515	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.8785981135365852	WITHOUT_CLASSIFICATION	0.12140188646341475	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9990885126035419	WITHOUT_CLASSIFICATION	9.114873964580569E-4	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9974806767153369	WITHOUT_CLASSIFICATION	0.002519323284663129	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.924969846377897	DEFECT	0.07503015362210294	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9794765621029287	DEFECT	0.020523437897071277	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9512374403527718	WITHOUT_CLASSIFICATION	0.048762559647228296	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9113063484038337	WITHOUT_CLASSIFICATION	0.08869365159616624	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9938713229004018	WITHOUT_CLASSIFICATION	0.00612867709959813	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9989209256272349	WITHOUT_CLASSIFICATION	0.0010790743727651533	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9463027652527263	WITHOUT_CLASSIFICATION	0.05369723474727377	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.7911260340909898	WITHOUT_CLASSIFICATION	0.2088739659090101	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7892255568832985	WITHOUT_CLASSIFICATION	0.21077444311670154	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9165843654404284	DEFECT	0.08341563455957157	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.703508842076234	DEFECT	0.29649115792376607	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9924726791027447	WITHOUT_CLASSIFICATION	0.007527320897255313	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9998168294639806	WITHOUT_CLASSIFICATION	1.8317053601937084E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// FIXME: Broken but behaving	DEFECT	0.896020381075071	DEFECT	0.10397961892492902	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.6011534841100034	DEFECT	0.39884651588999676	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// TODO: don't require pop	DEFECT	0.9339173098140992	WITHOUT_CLASSIFICATION	0.06608269018590078	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.6269997668329712	WITHOUT_CLASSIFICATION	0.37300023316702874	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9870058996438726	WITHOUT_CLASSIFICATION	0.012994100356127239	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9158360994950449	DEFECT	0.08416390050495515	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9158360994950449	DEFECT	0.08416390050495515	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999959804028858	WITHOUT_CLASSIFICATION	4.01959711420546E-5	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9709984201651389	WITHOUT_CLASSIFICATION	0.029001579834861072	DEFECT
