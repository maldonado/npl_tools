// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999958298814524	WITHOUT_CLASSIFICATION	4.170118547529992E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999260923891301	WITHOUT_CLASSIFICATION	7.390761086996106E-5	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9997803054640428	WITHOUT_CLASSIFICATION	2.1969453595706962E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999790517956485	WITHOUT_CLASSIFICATION	2.0948204351514924E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999790517956485	WITHOUT_CLASSIFICATION	2.0948204351514924E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998450547157083	WITHOUT_CLASSIFICATION	1.5494528429165172E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999738928430878	WITHOUT_CLASSIFICATION	2.6107156912103E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9998433047142607	WITHOUT_CLASSIFICATION	1.5669528573926232E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9997918346762162	WITHOUT_CLASSIFICATION	2.0816532378369445E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999702163449773	WITHOUT_CLASSIFICATION	2.978365502259468E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999435800544643	WITHOUT_CLASSIFICATION	5.641994553574833E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999435800544643	WITHOUT_CLASSIFICATION	5.641994553574833E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999435800544643	WITHOUT_CLASSIFICATION	5.641994553574833E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999435800544643	WITHOUT_CLASSIFICATION	5.641994553574833E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9994504884269139	WITHOUT_CLASSIFICATION	5.495115730862006E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999237231895921	WITHOUT_CLASSIFICATION	7.62768104078856E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999370752245688	WITHOUT_CLASSIFICATION	6.292477543122946E-5	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999921929831736	WITHOUT_CLASSIFICATION	7.807016826393018E-5	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999113680086396	WITHOUT_CLASSIFICATION	8.863199136045026E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999838557479264	WITHOUT_CLASSIFICATION	1.6144252073625143E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999841960958779	WITHOUT_CLASSIFICATION	1.5803904122107098E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999768065200493	WITHOUT_CLASSIFICATION	2.3193479950837845E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999872755721049	WITHOUT_CLASSIFICATION	1.272442789521713E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9973381273926236	WITHOUT_CLASSIFICATION	0.0026618726073763996	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999062091063964	WITHOUT_CLASSIFICATION	9.37908936036863E-5	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.999985405701747	WITHOUT_CLASSIFICATION	1.4594298252945281E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9993102743963149	WITHOUT_CLASSIFICATION	6.897256036851356E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999779303415476	WITHOUT_CLASSIFICATION	2.2069658452320244E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999342796351001	WITHOUT_CLASSIFICATION	6.572036489990175E-5	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9995238995265557	WITHOUT_CLASSIFICATION	4.7610047344424727E-4	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999961803638274	WITHOUT_CLASSIFICATION	3.819636172601142E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999435800544643	WITHOUT_CLASSIFICATION	5.641994553574833E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999192156794201	WITHOUT_CLASSIFICATION	8.078432057996288E-5	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999979815934964	WITHOUT_CLASSIFICATION	2.0184065035698634E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999145669871773	WITHOUT_CLASSIFICATION	8.543301282266294E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999331189775187	WITHOUT_CLASSIFICATION	6.688102248134898E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999595542203347	WITHOUT_CLASSIFICATION	4.044577966530634E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999261308119132	WITHOUT_CLASSIFICATION	7.386918808676211E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999167382991577	WITHOUT_CLASSIFICATION	8.326170084228311E-5	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999935875444608	WITHOUT_CLASSIFICATION	6.4124555391352955E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999633636168707	WITHOUT_CLASSIFICATION	3.663638312932079E-5	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998320389555961	WITHOUT_CLASSIFICATION	1.6796104440389714E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9986999298545486	WITHOUT_CLASSIFICATION	0.0013000701454514252	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999424780044411	WITHOUT_CLASSIFICATION	5.752199555875688E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9997563516236347	WITHOUT_CLASSIFICATION	2.436483763651853E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999372069793596	WITHOUT_CLASSIFICATION	6.279302064038932E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9997883792702537	WITHOUT_CLASSIFICATION	2.116207297463022E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999024368531951	WITHOUT_CLASSIFICATION	9.756314680480302E-5	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999354686436025	WITHOUT_CLASSIFICATION	6.453135639745661E-5	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9972220920791226	WITHOUT_CLASSIFICATION	0.002777907920877378	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999152254330281	WITHOUT_CLASSIFICATION	8.477456697192412E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9996366944247352	WITHOUT_CLASSIFICATION	3.633055752648013E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999948558207997	WITHOUT_CLASSIFICATION	5.144179200315761E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9995511506452465	WITHOUT_CLASSIFICATION	4.488493547534609E-4	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999784337082002	WITHOUT_CLASSIFICATION	2.1566291799748406E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999387597694873	WITHOUT_CLASSIFICATION	6.124023051267071E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9994268754525681	WITHOUT_CLASSIFICATION	5.731245474318958E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9996258573285245	WITHOUT_CLASSIFICATION	3.741426714754771E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998265031512239	WITHOUT_CLASSIFICATION	1.7349684877613318E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9995101816095046	WITHOUT_CLASSIFICATION	4.898183904955072E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.999963060656538	WITHOUT_CLASSIFICATION	3.6939343462087594E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999954702307571	WITHOUT_CLASSIFICATION	4.529769242928698E-6	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9991919078988857	WITHOUT_CLASSIFICATION	8.080921011142889E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.999948772341305	WITHOUT_CLASSIFICATION	5.122765869514814E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.999898846306105	WITHOUT_CLASSIFICATION	1.0115369389497333E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999237362914792	WITHOUT_CLASSIFICATION	7.626370852079927E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999817186576482	WITHOUT_CLASSIFICATION	1.828134235191734E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997549096523483	WITHOUT_CLASSIFICATION	2.450903476517519E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.999318063237487	WITHOUT_CLASSIFICATION	6.819367625130514E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.999318063237487	WITHOUT_CLASSIFICATION	6.819367625130514E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999871963034581	WITHOUT_CLASSIFICATION	1.280369654196368E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9997466763923403	WITHOUT_CLASSIFICATION	2.5332360765972745E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999703847578095	WITHOUT_CLASSIFICATION	2.9615242190396634E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9989723258090627	WITHOUT_CLASSIFICATION	0.0010276741909372585	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9995712197440821	WITHOUT_CLASSIFICATION	4.2878025591797526E-4	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9900788178948119	WITHOUT_CLASSIFICATION	0.009921182105188204	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998375678437643	WITHOUT_CLASSIFICATION	1.624321562356005E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9998241597812223	WITHOUT_CLASSIFICATION	1.7584021877772922E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999388391445071	WITHOUT_CLASSIFICATION	6.116085549290434E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999729859136895	WITHOUT_CLASSIFICATION	2.7014086310482862E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999997270931872	WITHOUT_CLASSIFICATION	2.7290681275730283E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999936955153546	WITHOUT_CLASSIFICATION	6.304484645434194E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999439839401776	WITHOUT_CLASSIFICATION	5.6016059822449065E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999439839401776	WITHOUT_CLASSIFICATION	5.6016059822449065E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999439839401776	WITHOUT_CLASSIFICATION	5.6016059822449065E-5	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999613764907573	WITHOUT_CLASSIFICATION	3.862350924257182E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999861798737726	WITHOUT_CLASSIFICATION	1.3820126227418132E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999874267653522	WITHOUT_CLASSIFICATION	1.257323464784639E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9951315734456143	WITHOUT_CLASSIFICATION	0.004868426554385716	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9996822173243132	WITHOUT_CLASSIFICATION	3.177826756868463E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999968234043546	WITHOUT_CLASSIFICATION	3.1765956455598917E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9994508033519051	WITHOUT_CLASSIFICATION	5.491966480948889E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999009414091667	WITHOUT_CLASSIFICATION	9.905859083325523E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999655847338473	WITHOUT_CLASSIFICATION	3.4415266152645396E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.999987959822398	WITHOUT_CLASSIFICATION	1.204017760203514E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999105716287624	WITHOUT_CLASSIFICATION	8.942837123754602E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999105716287624	WITHOUT_CLASSIFICATION	8.942837123754602E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9998457299858661	WITHOUT_CLASSIFICATION	1.5427001413387514E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9998365134209107	WITHOUT_CLASSIFICATION	1.6348657908924873E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999631282277426	WITHOUT_CLASSIFICATION	3.6871772257406115E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998829209287996	WITHOUT_CLASSIFICATION	1.170790712003921E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9997958375938887	WITHOUT_CLASSIFICATION	2.0416240611123449E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999714190012653	WITHOUT_CLASSIFICATION	2.8580998734789312E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999889384314267	WITHOUT_CLASSIFICATION	1.1061568573299017E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999381520387602	WITHOUT_CLASSIFICATION	6.184796123975434E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999792978327858	WITHOUT_CLASSIFICATION	2.07021672141363E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.999893488219092	WITHOUT_CLASSIFICATION	1.0651178090806418E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9970368606009201	WITHOUT_CLASSIFICATION	0.0029631393990799367	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999941905193158	WITHOUT_CLASSIFICATION	5.809480684100735E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9998387265014232	WITHOUT_CLASSIFICATION	1.6127349857683485E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9996674776280962	WITHOUT_CLASSIFICATION	3.3252237190391313E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997058695092035	WITHOUT_CLASSIFICATION	2.94130490796478E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9988736931890237	WITHOUT_CLASSIFICATION	0.0011263068109762017	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9996536752670749	WITHOUT_CLASSIFICATION	3.463247329250337E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.999872988524084	WITHOUT_CLASSIFICATION	1.2701147591602586E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999655079777243	WITHOUT_CLASSIFICATION	3.4492022275799526E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.999981755462499	WITHOUT_CLASSIFICATION	1.824453750097449E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9996759479612004	WITHOUT_CLASSIFICATION	3.240520387995963E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9992165043318704	WITHOUT_CLASSIFICATION	7.834956681297254E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999906929151103	WITHOUT_CLASSIFICATION	9.307084889667272E-6	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.999731688544164	WITHOUT_CLASSIFICATION	2.6831145583597E-4	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9996944485002724	WITHOUT_CLASSIFICATION	3.055514997276319E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999948096588589	WITHOUT_CLASSIFICATION	5.190341141171224E-6	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999804123024678	WITHOUT_CLASSIFICATION	1.958769753217071E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999919706116965	WITHOUT_CLASSIFICATION	8.02938830338067E-6	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9997749486942274	WITHOUT_CLASSIFICATION	2.2505130577245557E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.999847706894133	WITHOUT_CLASSIFICATION	1.5229310586692464E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999775835450982	WITHOUT_CLASSIFICATION	2.241645490173797E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9997209463826301	WITHOUT_CLASSIFICATION	2.7905361736990306E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999419861735206	WITHOUT_CLASSIFICATION	5.801382647939831E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999044742001464	WITHOUT_CLASSIFICATION	9.552579985369077E-5	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9998032325960409	WITHOUT_CLASSIFICATION	1.9676740395909028E-4	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999824765561071	WITHOUT_CLASSIFICATION	1.7523443892967754E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.999911330244189	WITHOUT_CLASSIFICATION	8.866975581091718E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999776706726021	WITHOUT_CLASSIFICATION	2.2329327397912467E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997968087714857	WITHOUT_CLASSIFICATION	2.0319122851425732E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999858226646211	WITHOUT_CLASSIFICATION	1.4177335378965105E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9994501950461324	WITHOUT_CLASSIFICATION	5.498049538675E-4	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998766981396406	WITHOUT_CLASSIFICATION	1.233018603593686E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999973196119788	WITHOUT_CLASSIFICATION	2.6803880212024887E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9957553462034151	WITHOUT_CLASSIFICATION	0.0042446537965849475	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999369081651044	WITHOUT_CLASSIFICATION	6.309183489559623E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998557660356356	WITHOUT_CLASSIFICATION	1.442339643643241E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999955944263016	WITHOUT_CLASSIFICATION	4.405573698422108E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.999948233314523	WITHOUT_CLASSIFICATION	5.1766685476926684E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9998082005318082	WITHOUT_CLASSIFICATION	1.9179946819177285E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999779186636036	WITHOUT_CLASSIFICATION	2.2081336396332896E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.999871582018488	WITHOUT_CLASSIFICATION	1.2841798151191759E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999668093022881	WITHOUT_CLASSIFICATION	3.319069771196775E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9997024719560874	WITHOUT_CLASSIFICATION	2.9752804391249276E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9990631596970664	WITHOUT_CLASSIFICATION	9.368403029335836E-4	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999277384496282	WITHOUT_CLASSIFICATION	7.226155037175076E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.999951075588341	WITHOUT_CLASSIFICATION	4.8924411658942626E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999507174096579	WITHOUT_CLASSIFICATION	4.928259034199979E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999569842098822	WITHOUT_CLASSIFICATION	4.301579011779291E-5	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998989123861305	WITHOUT_CLASSIFICATION	1.0108761386952162E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9991346705034991	WITHOUT_CLASSIFICATION	8.653294965009729E-4	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999735897247131	WITHOUT_CLASSIFICATION	2.6410275286935808E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9988579789855597	WITHOUT_CLASSIFICATION	0.001142021014440258	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999288535777513	WITHOUT_CLASSIFICATION	7.114642224873077E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999924624334933	WITHOUT_CLASSIFICATION	7.537566506837621E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998592389538685	WITHOUT_CLASSIFICATION	1.4076104613147385E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998592389538685	WITHOUT_CLASSIFICATION	1.4076104613147385E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999962613551345	WITHOUT_CLASSIFICATION	3.738644865408476E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999810097801027	WITHOUT_CLASSIFICATION	1.8990219897202616E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999932291723414	WITHOUT_CLASSIFICATION	6.770827658600244E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9996985889883542	WITHOUT_CLASSIFICATION	3.0141101164577914E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999652450279045	WITHOUT_CLASSIFICATION	3.4754972095440324E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9995692084270085	WITHOUT_CLASSIFICATION	4.3079157299156964E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999290298137712	WITHOUT_CLASSIFICATION	7.097018622872632E-5	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.999995860085019	WITHOUT_CLASSIFICATION	4.139914980991149E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999936104698446	WITHOUT_CLASSIFICATION	6.389530155425835E-6	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999999379545516	WITHOUT_CLASSIFICATION	6.204544840455871E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999052234472775	WITHOUT_CLASSIFICATION	9.477655272249734E-5	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9993630583516072	WITHOUT_CLASSIFICATION	6.369416483928289E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9824681363271505	WITHOUT_CLASSIFICATION	0.01753186367284953	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9996262602292092	WITHOUT_CLASSIFICATION	3.737397707907638E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999090301942344	WITHOUT_CLASSIFICATION	9.096980576554779E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999722113791617	WITHOUT_CLASSIFICATION	2.7788620838324115E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9998529269434713	WITHOUT_CLASSIFICATION	1.4707305652865538E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999775077269671	WITHOUT_CLASSIFICATION	2.249227303285364E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999984201668	WITHOUT_CLASSIFICATION	1.5798332000408035E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999567733601419	WITHOUT_CLASSIFICATION	4.322663985823487E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999979333306038	WITHOUT_CLASSIFICATION	2.0666693961325924E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999979333306038	WITHOUT_CLASSIFICATION	2.0666693961325924E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999383416878146	WITHOUT_CLASSIFICATION	6.165831218534779E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.999993570238277	WITHOUT_CLASSIFICATION	6.429761723099246E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999887546188542	WITHOUT_CLASSIFICATION	1.124538114584575E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9990967525958278	WITHOUT_CLASSIFICATION	9.03247404172187E-4	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9996624975217209	WITHOUT_CLASSIFICATION	3.375024782791391E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999300800983951	WITHOUT_CLASSIFICATION	6.991990160498663E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999300800983951	WITHOUT_CLASSIFICATION	6.991990160498663E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9425583529168786	WITHOUT_CLASSIFICATION	0.05744164708312138	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999898911811252	WITHOUT_CLASSIFICATION	1.0108818874788238E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999898911811252	WITHOUT_CLASSIFICATION	1.0108818874788238E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9997427312992638	WITHOUT_CLASSIFICATION	2.5726870073617254E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996035927131569	WITHOUT_CLASSIFICATION	3.964072868431522E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996035927131569	WITHOUT_CLASSIFICATION	3.964072868431522E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999806434548653	WITHOUT_CLASSIFICATION	1.9356545134767495E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999806434548653	WITHOUT_CLASSIFICATION	1.9356545134767495E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999419631612524	WITHOUT_CLASSIFICATION	5.8036838747494125E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999607831313799	WITHOUT_CLASSIFICATION	3.921686862001168E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999888144523112	WITHOUT_CLASSIFICATION	1.1185547688825833E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999221163634457	WITHOUT_CLASSIFICATION	7.788363655427916E-5	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9998806588381227	WITHOUT_CLASSIFICATION	1.1934116187722642E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999527696734186	WITHOUT_CLASSIFICATION	4.723032658146428E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999370053411765	WITHOUT_CLASSIFICATION	6.299465882354239E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999527696734186	WITHOUT_CLASSIFICATION	4.723032658146428E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9958338790602488	WITHOUT_CLASSIFICATION	0.004166120939751226	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999725224541356	WITHOUT_CLASSIFICATION	2.7477545864297666E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999589754433426	WITHOUT_CLASSIFICATION	4.102455665748625E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.999966446728777	WITHOUT_CLASSIFICATION	3.355327122299033E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999300503239578	WITHOUT_CLASSIFICATION	6.994967604220895E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9987020982358189	WITHOUT_CLASSIFICATION	0.0012979017641811654	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999582104565472	WITHOUT_CLASSIFICATION	4.1789543452852614E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999100103260862	WITHOUT_CLASSIFICATION	8.998967391380793E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998627912380256	WITHOUT_CLASSIFICATION	1.3720876197447252E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9998617150596188	WITHOUT_CLASSIFICATION	1.382849403811092E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9998864709488028	WITHOUT_CLASSIFICATION	1.1352905119716542E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999596219443149	WITHOUT_CLASSIFICATION	4.037805568500841E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999586260203648	WITHOUT_CLASSIFICATION	4.137397963519578E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.99988032723981	WITHOUT_CLASSIFICATION	1.1967276018996576E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999970709393435	WITHOUT_CLASSIFICATION	2.9290606564871965E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9998049366328232	WITHOUT_CLASSIFICATION	1.95063367176821E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999498458263859	WITHOUT_CLASSIFICATION	5.015417361412057E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999696173005208	WITHOUT_CLASSIFICATION	3.03826994791935E-5	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9996491547144214	WITHOUT_CLASSIFICATION	3.5084528557863465E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9900088039515514	WITHOUT_CLASSIFICATION	0.009991196048448576	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999439433186539	WITHOUT_CLASSIFICATION	5.6056681346050496E-5	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999975809509406	WITHOUT_CLASSIFICATION	2.419049059421654E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.999967040290893	WITHOUT_CLASSIFICATION	3.295970910701798E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9998755851353859	WITHOUT_CLASSIFICATION	1.244148646140994E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999798799952503	WITHOUT_CLASSIFICATION	2.0120004749797015E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999485754554778	WITHOUT_CLASSIFICATION	5.1424544522148E-5	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999825950548273	WITHOUT_CLASSIFICATION	1.7404945172650454E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999900273212388	WITHOUT_CLASSIFICATION	9.972678761249404E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999751455184809	WITHOUT_CLASSIFICATION	2.485448151912293E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999523370814907	WITHOUT_CLASSIFICATION	4.766291850931396E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999951033614135	WITHOUT_CLASSIFICATION	4.8966385865198545E-6	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999946204185227	WITHOUT_CLASSIFICATION	5.379581477310736E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9998213515477634	WITHOUT_CLASSIFICATION	1.7864845223661637E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999780492658541	WITHOUT_CLASSIFICATION	2.1950734145886927E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.99998231292356	WITHOUT_CLASSIFICATION	1.7687076440027E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999934146927485	WITHOUT_CLASSIFICATION	6.585307251511075E-5	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999887475266451	WITHOUT_CLASSIFICATION	1.1252473354777592E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999902201037331	WITHOUT_CLASSIFICATION	9.779896266890737E-6	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999342680127897	WITHOUT_CLASSIFICATION	6.573198721025226E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999900459705794	WITHOUT_CLASSIFICATION	9.954029420567883E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999751100612088	WITHOUT_CLASSIFICATION	2.488993879120987E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999799446114924	WITHOUT_CLASSIFICATION	2.0055388507590987E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999647490028459	WITHOUT_CLASSIFICATION	3.52509971541585E-5	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999881715555338	WITHOUT_CLASSIFICATION	1.1828444466293884E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999562122706076	WITHOUT_CLASSIFICATION	4.3787729392366505E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999462704126334	WITHOUT_CLASSIFICATION	5.372958736667307E-5	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999833482330841	WITHOUT_CLASSIFICATION	1.6651766915911694E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998215171718262	WITHOUT_CLASSIFICATION	1.784828281736847E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9997077347494031	WITHOUT_CLASSIFICATION	2.922652505968356E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999486890894496	WITHOUT_CLASSIFICATION	5.131091055040333E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999978025714845	WITHOUT_CLASSIFICATION	2.1974285154234895E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9995398433540595	WITHOUT_CLASSIFICATION	4.601566459403404E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999966408148493	WITHOUT_CLASSIFICATION	3.3591851506422823E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999988464205459	WITHOUT_CLASSIFICATION	1.1535794541042031E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999988464205459	WITHOUT_CLASSIFICATION	1.1535794541042031E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.999771383729359	WITHOUT_CLASSIFICATION	2.2861627064091342E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999241318630424	WITHOUT_CLASSIFICATION	7.586813695768708E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9982275525113771	WITHOUT_CLASSIFICATION	0.0017724474886229176	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999690533174712	WITHOUT_CLASSIFICATION	3.094668252876506E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999770649076472	WITHOUT_CLASSIFICATION	2.2935092352798938E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999859037067547	WITHOUT_CLASSIFICATION	1.409629324534318E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9938762857035027	WITHOUT_CLASSIFICATION	0.006123714296497359	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999947036377069	WITHOUT_CLASSIFICATION	5.296362293089426E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9998830603019074	WITHOUT_CLASSIFICATION	1.1693969809255985E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999795624743867	WITHOUT_CLASSIFICATION	2.0437525613323154E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999809174633514	WITHOUT_CLASSIFICATION	1.908253664862263E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999809174633514	WITHOUT_CLASSIFICATION	1.908253664862263E-5	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999854171837312	WITHOUT_CLASSIFICATION	1.458281626874504E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9997175024484308	WITHOUT_CLASSIFICATION	2.8249755156918626E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998467109692816	WITHOUT_CLASSIFICATION	1.5328903071846366E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998848464712429	WITHOUT_CLASSIFICATION	1.151535287571188E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999945273783469	WITHOUT_CLASSIFICATION	5.472621653078726E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999956663386101	WITHOUT_CLASSIFICATION	4.333661389821951E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999881022761541	WITHOUT_CLASSIFICATION	1.1897723845857495E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.999537800926139	WITHOUT_CLASSIFICATION	4.621990738609613E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999982662172079	WITHOUT_CLASSIFICATION	1.733782792149825E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9995956292439466	WITHOUT_CLASSIFICATION	4.0437075605334626E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9997503931522209	WITHOUT_CLASSIFICATION	2.4960684777902985E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999361626263629	WITHOUT_CLASSIFICATION	6.383737363719291E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999436473172701	WITHOUT_CLASSIFICATION	5.635268272985047E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999436473172701	WITHOUT_CLASSIFICATION	5.635268272985047E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9991824401509222	WITHOUT_CLASSIFICATION	8.175598490778772E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999739404932915	WITHOUT_CLASSIFICATION	2.605950670855638E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9998164695715958	WITHOUT_CLASSIFICATION	1.8353042840423266E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9998264335109641	WITHOUT_CLASSIFICATION	1.7356648903580236E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999093643708209	WITHOUT_CLASSIFICATION	9.063562917913559E-5	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998493652370485	WITHOUT_CLASSIFICATION	1.5063476295146434E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9998674505330482	WITHOUT_CLASSIFICATION	1.3254946695179947E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999270582428673	WITHOUT_CLASSIFICATION	7.294175713261332E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9975962360219014	WITHOUT_CLASSIFICATION	0.002403763978098536	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.999944938778319	WITHOUT_CLASSIFICATION	5.506122168102012E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998467109692816	WITHOUT_CLASSIFICATION	1.5328903071846366E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9996962361136003	WITHOUT_CLASSIFICATION	3.037638863998472E-4	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9957324904883433	WITHOUT_CLASSIFICATION	0.004267509511656696	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999779039004855	WITHOUT_CLASSIFICATION	2.2096099514605998E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999787672207561	WITHOUT_CLASSIFICATION	2.12327792439573E-5	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999255581437532	WITHOUT_CLASSIFICATION	7.444185624681432E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999905606339621	WITHOUT_CLASSIFICATION	9.43936603795943E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999943759907801	WITHOUT_CLASSIFICATION	5.624009219857607E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9995320831395799	WITHOUT_CLASSIFICATION	4.679168604200641E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9998954967434099	WITHOUT_CLASSIFICATION	1.0450325659003553E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998444982741366	WITHOUT_CLASSIFICATION	1.555017258633521E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998795344920142	WITHOUT_CLASSIFICATION	1.204655079857971E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.999987114089855	WITHOUT_CLASSIFICATION	1.2885910145060237E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999664606801714	WITHOUT_CLASSIFICATION	3.35393198285547E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9994826788277196	WITHOUT_CLASSIFICATION	5.17321172280388E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999696524655391	WITHOUT_CLASSIFICATION	3.0347534460868397E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999235691735182	WITHOUT_CLASSIFICATION	7.643082648178169E-5	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9983573590928861	WITHOUT_CLASSIFICATION	0.0016426409071137501	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999651573842656	WITHOUT_CLASSIFICATION	3.484261573444273E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9997437350991504	WITHOUT_CLASSIFICATION	2.5626490084965136E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.999713626057999	WITHOUT_CLASSIFICATION	2.863739420010796E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.999992127608142	WITHOUT_CLASSIFICATION	7.87239185797689E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9998427526309948	WITHOUT_CLASSIFICATION	1.572473690053246E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9990125543351573	WITHOUT_CLASSIFICATION	9.874456648426228E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999746683978511	WITHOUT_CLASSIFICATION	2.5331602148912745E-5	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999340533187797	WITHOUT_CLASSIFICATION	6.594668122031212E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999014111772805	WITHOUT_CLASSIFICATION	9.858882271954004E-5	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999441893184936	WITHOUT_CLASSIFICATION	5.581068150641563E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9952379450003473	WITHOUT_CLASSIFICATION	0.004762054999652612	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998828752774931	WITHOUT_CLASSIFICATION	1.1712472250696921E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998828752774931	WITHOUT_CLASSIFICATION	1.1712472250696921E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998008268482479	WITHOUT_CLASSIFICATION	1.9917315175207762E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998134947940253	WITHOUT_CLASSIFICATION	1.865052059747478E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999519959840169	WITHOUT_CLASSIFICATION	4.800401598316398E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.999807399683799	WITHOUT_CLASSIFICATION	1.9260031620099417E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999404657398625	WITHOUT_CLASSIFICATION	5.9534260137523064E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999673215561015	WITHOUT_CLASSIFICATION	3.267844389844532E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999682597854423	WITHOUT_CLASSIFICATION	3.17402145575255E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9975004477291404	WITHOUT_CLASSIFICATION	0.002499552270859692	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999033031346131	WITHOUT_CLASSIFICATION	9.669686538696262E-5	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9998457299858661	WITHOUT_CLASSIFICATION	1.5427001413387514E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999775101521879	WITHOUT_CLASSIFICATION	2.2489847812075465E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9991232720050799	WITHOUT_CLASSIFICATION	8.767279949201542E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998557660356356	WITHOUT_CLASSIFICATION	1.442339643643241E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999571133016627	WITHOUT_CLASSIFICATION	4.2886698337262924E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9998922977882005	WITHOUT_CLASSIFICATION	1.077022117994742E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.999792529607848	WITHOUT_CLASSIFICATION	2.0747039215198628E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.999998989718863	WITHOUT_CLASSIFICATION	1.0102811370114413E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9998841447094063	WITHOUT_CLASSIFICATION	1.1585529059366215E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998954980029965	WITHOUT_CLASSIFICATION	1.0450199700350275E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9998881053041407	WITHOUT_CLASSIFICATION	1.118946958591578E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999038692961069	WITHOUT_CLASSIFICATION	9.613070389307111E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999397356613692	WITHOUT_CLASSIFICATION	6.026433863083792E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9996515452933529	WITHOUT_CLASSIFICATION	3.484547066471888E-4	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999225724560777	WITHOUT_CLASSIFICATION	7.742754392226754E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999650528391076	WITHOUT_CLASSIFICATION	3.494716089227141E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999980013877884	WITHOUT_CLASSIFICATION	1.9986122116608443E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.999954322938644	WITHOUT_CLASSIFICATION	4.567706135600342E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999878305312412	WITHOUT_CLASSIFICATION	1.2169468758842022E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9997969808078722	WITHOUT_CLASSIFICATION	2.0301919212788104E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999973929401075	WITHOUT_CLASSIFICATION	2.6070598925063235E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999864140500213	WITHOUT_CLASSIFICATION	1.3585949978726625E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999930862819947	WITHOUT_CLASSIFICATION	6.913718005373612E-6	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9995818636839167	WITHOUT_CLASSIFICATION	4.1813631608334255E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999493121041623	WITHOUT_CLASSIFICATION	5.0687895837774436E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999370300707046	WITHOUT_CLASSIFICATION	6.29699292954433E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999993024921675	WITHOUT_CLASSIFICATION	6.975078324894283E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9997217414576572	WITHOUT_CLASSIFICATION	2.782585423427136E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9998960885882885	WITHOUT_CLASSIFICATION	1.0391141171163401E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999777575868465	WITHOUT_CLASSIFICATION	2.224241315352397E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9203111568292658	WITHOUT_CLASSIFICATION	0.07968884317073421	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9996838257606624	WITHOUT_CLASSIFICATION	3.161742393375556E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9954711018872316	WITHOUT_CLASSIFICATION	0.004528898112768351	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999559845319647	WITHOUT_CLASSIFICATION	4.401546803525685E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998345926369538	WITHOUT_CLASSIFICATION	1.6540736304618563E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999361476963898	WITHOUT_CLASSIFICATION	6.38523036101925E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9974260311128197	WITHOUT_CLASSIFICATION	0.0025739688871803047	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9997803076045725	WITHOUT_CLASSIFICATION	2.196923954275781E-4	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999839234176917	WITHOUT_CLASSIFICATION	1.6076582308276867E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999643801984042	WITHOUT_CLASSIFICATION	3.5619801595781464E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9997010993642896	WITHOUT_CLASSIFICATION	2.9890063571033057E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9996836859465132	WITHOUT_CLASSIFICATION	3.16314053486764E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999559752440997	WITHOUT_CLASSIFICATION	4.402475590019763E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999901821732667	WITHOUT_CLASSIFICATION	9.817826733351697E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999508244881093	WITHOUT_CLASSIFICATION	4.917551189056805E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999461843235896	WITHOUT_CLASSIFICATION	5.381567641037468E-5	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9997023729935377	WITHOUT_CLASSIFICATION	2.9762700646224124E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9995656857785405	WITHOUT_CLASSIFICATION	4.3431422145949586E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9995005096652605	WITHOUT_CLASSIFICATION	4.994903347394576E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999087766904032	WITHOUT_CLASSIFICATION	9.12233095967885E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999087766904032	WITHOUT_CLASSIFICATION	9.12233095967885E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9969196683052215	WITHOUT_CLASSIFICATION	0.0030803316947785107	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.8968678566048809	WITHOUT_CLASSIFICATION	0.1031321433951191	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999652813595025	WITHOUT_CLASSIFICATION	3.4718640497619015E-5	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9369553953130495	WITHOUT_CLASSIFICATION	0.06304460468695039	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999020586773447	WITHOUT_CLASSIFICATION	9.794132265536354E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999676235783616	WITHOUT_CLASSIFICATION	3.2376421638407406E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.999884188285761	WITHOUT_CLASSIFICATION	1.1581171423899048E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9930426502882999	WITHOUT_CLASSIFICATION	0.006957349711700091	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999994228876466	WITHOUT_CLASSIFICATION	5.771123533585947E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.995090142326995	WITHOUT_CLASSIFICATION	0.0049098576730049965	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9979501795606757	WITHOUT_CLASSIFICATION	0.0020498204393243295	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999869722577084	WITHOUT_CLASSIFICATION	1.302774229162712E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.999883002112225	WITHOUT_CLASSIFICATION	1.169978877749277E-4	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999874937342152	WITHOUT_CLASSIFICATION	1.250626578480062E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999825065794894	WITHOUT_CLASSIFICATION	1.7493420510601885E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9370402594414453	WITHOUT_CLASSIFICATION	0.0629597405585548	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9993495277696621	WITHOUT_CLASSIFICATION	6.504722303378362E-4	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998017833017065	WITHOUT_CLASSIFICATION	1.982166982934912E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999800923159912	WITHOUT_CLASSIFICATION	1.9907684008926347E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9803105742365466	WITHOUT_CLASSIFICATION	0.019689425763453408	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999774080490821	WITHOUT_CLASSIFICATION	2.2591950917893433E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9995330180911509	WITHOUT_CLASSIFICATION	4.669819088490441E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9997789753704145	WITHOUT_CLASSIFICATION	2.210246295856343E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9994028496541575	WITHOUT_CLASSIFICATION	5.971503458424799E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999062091063964	WITHOUT_CLASSIFICATION	9.37908936036863E-5	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9995435893724892	WITHOUT_CLASSIFICATION	4.5641062751077574E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999372680426086	WITHOUT_CLASSIFICATION	6.27319573914113E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999742763503113	WITHOUT_CLASSIFICATION	2.5723649688628878E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9997903490948163	WITHOUT_CLASSIFICATION	2.0965090518367286E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999685457784787	WITHOUT_CLASSIFICATION	3.145422152124931E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999789022143224	WITHOUT_CLASSIFICATION	2.109778567753179E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999979825692767	WITHOUT_CLASSIFICATION	2.017430723176456E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999959873818446	WITHOUT_CLASSIFICATION	4.012618155416369E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9997399950384047	WITHOUT_CLASSIFICATION	2.600049615952714E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998974529315212	WITHOUT_CLASSIFICATION	1.0254706847873193E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999920370222326	WITHOUT_CLASSIFICATION	7.962977767432886E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999856129314236	WITHOUT_CLASSIFICATION	1.4387068576356819E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999856129314236	WITHOUT_CLASSIFICATION	1.4387068576356819E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999803939121975	WITHOUT_CLASSIFICATION	1.9606087802472E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9998596307218279	WITHOUT_CLASSIFICATION	1.4036927817205128E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9968201192616616	WITHOUT_CLASSIFICATION	0.0031798807383385066	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.99999147350971	WITHOUT_CLASSIFICATION	8.526490290032778E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9997789933063347	WITHOUT_CLASSIFICATION	2.210066936652927E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999953703303714	WITHOUT_CLASSIFICATION	4.62966962860396E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999246529682188	WITHOUT_CLASSIFICATION	7.534703178134445E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999716547439315	WITHOUT_CLASSIFICATION	2.8345256068516808E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999687691601602	WITHOUT_CLASSIFICATION	3.123083983970077E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999923018293654	WITHOUT_CLASSIFICATION	7.698170634682965E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.999990854670006	WITHOUT_CLASSIFICATION	9.145329994030046E-6	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999844580589734	WITHOUT_CLASSIFICATION	1.554194102658564E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9998720902216901	WITHOUT_CLASSIFICATION	1.279097783098465E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999167774124985	WITHOUT_CLASSIFICATION	8.322258750143435E-5	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999998024049089	WITHOUT_CLASSIFICATION	1.9759509113136422E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999754404507524	WITHOUT_CLASSIFICATION	2.455954924761373E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999132351779388	WITHOUT_CLASSIFICATION	8.676482206109889E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9996772074206385	WITHOUT_CLASSIFICATION	3.2279257936158797E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9996880133921838	WITHOUT_CLASSIFICATION	3.119866078161075E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.999876812578899	WITHOUT_CLASSIFICATION	1.2318742110095548E-4	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9975711599903515	WITHOUT_CLASSIFICATION	0.0024288400096484255	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9331360809415572	WITHOUT_CLASSIFICATION	0.06686391905844279	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.999987396925967	WITHOUT_CLASSIFICATION	1.2603074032905108E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999813755905511	WITHOUT_CLASSIFICATION	1.8624409448901386E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9997001695328982	WITHOUT_CLASSIFICATION	2.9983046710172834E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999900545162793	WITHOUT_CLASSIFICATION	9.945483720689821E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9989726171489474	WITHOUT_CLASSIFICATION	0.0010273828510526744	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9998192031821622	WITHOUT_CLASSIFICATION	1.807968178377059E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.999864264634944	WITHOUT_CLASSIFICATION	1.357353650560256E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9998166903486464	WITHOUT_CLASSIFICATION	1.833096513536506E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999982616425326	WITHOUT_CLASSIFICATION	1.7383574673245986E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9993833627658189	WITHOUT_CLASSIFICATION	6.166372341811034E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999977695171098	WITHOUT_CLASSIFICATION	2.230482890062117E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999978755102069	WITHOUT_CLASSIFICATION	2.124489793024173E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999731420892284	WITHOUT_CLASSIFICATION	2.685791077162168E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999736430719283	WITHOUT_CLASSIFICATION	2.6356928071761534E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998906840210726	WITHOUT_CLASSIFICATION	1.093159789273821E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998899869776313	WITHOUT_CLASSIFICATION	1.1001302236868235E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9978190816915784	WITHOUT_CLASSIFICATION	0.002180918308421531	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999402234698664	WITHOUT_CLASSIFICATION	5.97765301334855E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999859412697748	WITHOUT_CLASSIFICATION	1.4058730225229803E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9993997453027721	WITHOUT_CLASSIFICATION	6.002546972278744E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9989663154199339	WITHOUT_CLASSIFICATION	0.001033684580066129	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999757408443227	WITHOUT_CLASSIFICATION	2.4259155677299735E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9996495378697923	WITHOUT_CLASSIFICATION	3.504621302076877E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998839787574352	WITHOUT_CLASSIFICATION	1.1602124256484797E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998762560568145	WITHOUT_CLASSIFICATION	1.2374394318546522E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9989342988967296	WITHOUT_CLASSIFICATION	0.001065701103270354	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999742763503113	WITHOUT_CLASSIFICATION	2.5723649688628878E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9997920393921174	WITHOUT_CLASSIFICATION	2.0796060788269192E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9998591923272969	WITHOUT_CLASSIFICATION	1.408076727031046E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999803057629089	WITHOUT_CLASSIFICATION	1.9694237091221427E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999946613481261	WITHOUT_CLASSIFICATION	5.338651873872573E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999031491698974	WITHOUT_CLASSIFICATION	9.685083010267926E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999882554545378	WITHOUT_CLASSIFICATION	1.1744545462078998E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999700744586221	WITHOUT_CLASSIFICATION	2.992554137786402E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999966568233443	WITHOUT_CLASSIFICATION	3.34317665570625E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999309479036449	WITHOUT_CLASSIFICATION	6.905209635511589E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9994670857871584	WITHOUT_CLASSIFICATION	5.329142128417045E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999912448579532	WITHOUT_CLASSIFICATION	8.755142046825936E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999930978734531	WITHOUT_CLASSIFICATION	6.902126546879812E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9998230991063216	WITHOUT_CLASSIFICATION	1.7690089367850196E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999845432130907	WITHOUT_CLASSIFICATION	1.5456786909300282E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999917730143457	WITHOUT_CLASSIFICATION	8.226985654354148E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999193177182675	WITHOUT_CLASSIFICATION	8.068228173251344E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999398422912298	WITHOUT_CLASSIFICATION	6.015770877016732E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998909710166206	WITHOUT_CLASSIFICATION	1.0902898337936938E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9998290548306907	WITHOUT_CLASSIFICATION	1.7094516930931116E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9874040515354524	WITHOUT_CLASSIFICATION	0.01259594846454746	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999215127937369	WITHOUT_CLASSIFICATION	7.848720626309625E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999842205892727	WITHOUT_CLASSIFICATION	1.5779410727273795E-5	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9972045173621872	WITHOUT_CLASSIFICATION	0.002795482637812836	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996102686436177	WITHOUT_CLASSIFICATION	3.8973135638222764E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999893917316388	WITHOUT_CLASSIFICATION	1.0608268361173235E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999968209488024	WITHOUT_CLASSIFICATION	3.1790511976997166E-6	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999637916468117	WITHOUT_CLASSIFICATION	3.620835318833379E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999318612504927	WITHOUT_CLASSIFICATION	6.813874950728095E-5	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9987012250404583	WITHOUT_CLASSIFICATION	0.0012987749595416217	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.999917114401129	WITHOUT_CLASSIFICATION	8.288559887105664E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999730166516408	WITHOUT_CLASSIFICATION	2.6983348359144976E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.999811340137589	WITHOUT_CLASSIFICATION	1.8865986241098102E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999884339960169	WITHOUT_CLASSIFICATION	1.1566003983087937E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998493991682921	WITHOUT_CLASSIFICATION	1.5060083170800808E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.786489291028598	WITHOUT_CLASSIFICATION	0.213510708971402	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999661080170795	WITHOUT_CLASSIFICATION	3.389198292050455E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9998955492295648	WITHOUT_CLASSIFICATION	1.0445077043520963E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999109192667983	WITHOUT_CLASSIFICATION	8.908073320169835E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999109192667983	WITHOUT_CLASSIFICATION	8.908073320169835E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.999917114401129	WITHOUT_CLASSIFICATION	8.288559887105664E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9988730115200954	WITHOUT_CLASSIFICATION	0.0011269884799045293	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999983730136246	WITHOUT_CLASSIFICATION	1.6269863754255734E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999167691773474	WITHOUT_CLASSIFICATION	8.323082265260549E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999781705374233	WITHOUT_CLASSIFICATION	2.1829462576689898E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999811728655561	WITHOUT_CLASSIFICATION	1.8827134443876545E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9998250988683861	WITHOUT_CLASSIFICATION	1.7490113161380046E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999235514839022	WITHOUT_CLASSIFICATION	7.644851609775245E-5	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999220794097727	WITHOUT_CLASSIFICATION	7.792059022723745E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9998806256672345	WITHOUT_CLASSIFICATION	1.1937433276563087E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9996107538972339	WITHOUT_CLASSIFICATION	3.892461027660944E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999524557965721	WITHOUT_CLASSIFICATION	4.754420342789676E-5	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9997790106043585	WITHOUT_CLASSIFICATION	2.2098939564159804E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9998140241929268	WITHOUT_CLASSIFICATION	1.8597580707323749E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999506862173755	WITHOUT_CLASSIFICATION	4.9313782624494996E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999261308119132	WITHOUT_CLASSIFICATION	7.386918808676211E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9998925935784105	WITHOUT_CLASSIFICATION	1.0740642158952582E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999018349058864	WITHOUT_CLASSIFICATION	9.816509411372021E-5	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999886289476835	WITHOUT_CLASSIFICATION	1.1371052316533492E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999859023019055	WITHOUT_CLASSIFICATION	1.4097698094403603E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999993658529402	WITHOUT_CLASSIFICATION	6.341470598012936E-6	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999661318796136	WITHOUT_CLASSIFICATION	3.386812038643159E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999143693587823	WITHOUT_CLASSIFICATION	8.563064121775404E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9998252886953977	WITHOUT_CLASSIFICATION	1.7471130460238132E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998935166650913	WITHOUT_CLASSIFICATION	1.064833349087167E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999514105825622	WITHOUT_CLASSIFICATION	4.8589417437760884E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999861378291209	WITHOUT_CLASSIFICATION	1.3862170879112296E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9993070788312006	WITHOUT_CLASSIFICATION	6.929211687993388E-4	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9993322846271483	WITHOUT_CLASSIFICATION	6.677153728517236E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998752836754244	WITHOUT_CLASSIFICATION	1.2471632457561807E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998738904499345	WITHOUT_CLASSIFICATION	1.2610955006548793E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9997415401422332	WITHOUT_CLASSIFICATION	2.584598577667738E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999174205829768	WITHOUT_CLASSIFICATION	8.25794170231446E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999322392396853	WITHOUT_CLASSIFICATION	6.776076031462113E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999087766904032	WITHOUT_CLASSIFICATION	9.12233095967885E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9989685272613111	WITHOUT_CLASSIFICATION	0.0010314727386889042	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999948232095602	WITHOUT_CLASSIFICATION	5.176790439729534E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.999430161412801	WITHOUT_CLASSIFICATION	5.698385871989823E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999413400343815	WITHOUT_CLASSIFICATION	5.8659965618401375E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.999972595780267	WITHOUT_CLASSIFICATION	2.7404219733107744E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999851632583683	WITHOUT_CLASSIFICATION	1.4836741631628756E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999851632583683	WITHOUT_CLASSIFICATION	1.4836741631628756E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.999681764950246	WITHOUT_CLASSIFICATION	3.1823504975412963E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999477198954266	WITHOUT_CLASSIFICATION	5.228010457345383E-5	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999299051452534	WITHOUT_CLASSIFICATION	7.009485474670765E-5	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999168959102215	WITHOUT_CLASSIFICATION	8.310408977849781E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9996820934333394	WITHOUT_CLASSIFICATION	3.179065666606611E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999962830941075	WITHOUT_CLASSIFICATION	3.716905892569332E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999124412755864	WITHOUT_CLASSIFICATION	8.755872441358175E-5	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999300712127382	WITHOUT_CLASSIFICATION	6.992878726170549E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9998711855779668	WITHOUT_CLASSIFICATION	1.288144220331452E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9998711855779668	WITHOUT_CLASSIFICATION	1.288144220331452E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9998711855779668	WITHOUT_CLASSIFICATION	1.288144220331452E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9998251535775733	WITHOUT_CLASSIFICATION	1.7484642242673472E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9957553462034151	WITHOUT_CLASSIFICATION	0.0042446537965849475	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9998654190676624	WITHOUT_CLASSIFICATION	1.3458093233759762E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9370402594414453	WITHOUT_CLASSIFICATION	0.0629597405585548	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.999613538515115	WITHOUT_CLASSIFICATION	3.864614848850317E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9979460119297323	WITHOUT_CLASSIFICATION	0.0020539880702677054	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9998647341571482	WITHOUT_CLASSIFICATION	1.352658428518609E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999971039847022	WITHOUT_CLASSIFICATION	2.8960152977842773E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9957553462034151	WITHOUT_CLASSIFICATION	0.0042446537965849475	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999723579600205	WITHOUT_CLASSIFICATION	2.7642039979476002E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999723579600205	WITHOUT_CLASSIFICATION	2.7642039979476002E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999696674952379	WITHOUT_CLASSIFICATION	3.0332504762141864E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998874393645507	WITHOUT_CLASSIFICATION	1.1256063544931382E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997303892832909	WITHOUT_CLASSIFICATION	2.696107167089758E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999292523058632	WITHOUT_CLASSIFICATION	7.074769413681078E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999607831313799	WITHOUT_CLASSIFICATION	3.921686862001168E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999569182703935	WITHOUT_CLASSIFICATION	4.3081729606560535E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9995982702823973	WITHOUT_CLASSIFICATION	4.0172971760268103E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9998245875968443	WITHOUT_CLASSIFICATION	1.754124031556618E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9998789456976359	WITHOUT_CLASSIFICATION	1.2105430236403208E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999901675028354	WITHOUT_CLASSIFICATION	9.832497164534201E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999666903343939	WITHOUT_CLASSIFICATION	3.330966560623838E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999737545930492	WITHOUT_CLASSIFICATION	2.624540695084451E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999504222314651	WITHOUT_CLASSIFICATION	4.957776853490766E-5	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9993921152965447	WITHOUT_CLASSIFICATION	6.078847034552961E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999837739796006	WITHOUT_CLASSIFICATION	1.622602039942123E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999905200114102	WITHOUT_CLASSIFICATION	9.479988589754629E-6	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999503517200411	WITHOUT_CLASSIFICATION	4.9648279958956316E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998099346511284	WITHOUT_CLASSIFICATION	1.9006534887153228E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.999659666400587	WITHOUT_CLASSIFICATION	3.4033359941304097E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9995595474084447	WITHOUT_CLASSIFICATION	4.40452591555404E-4	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999659503369531	WITHOUT_CLASSIFICATION	3.4049663046893636E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9997789753704145	WITHOUT_CLASSIFICATION	2.210246295856343E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999953703303714	WITHOUT_CLASSIFICATION	4.62966962860396E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999923310101868	WITHOUT_CLASSIFICATION	7.668989813244517E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9987559987100116	WITHOUT_CLASSIFICATION	0.0012440012899883463	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999793266997214	WITHOUT_CLASSIFICATION	2.0673300278501334E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9754871089063866	WITHOUT_CLASSIFICATION	0.024512891093613473	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998835379866065	WITHOUT_CLASSIFICATION	1.1646201339345415E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998835379866065	WITHOUT_CLASSIFICATION	1.1646201339345415E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9998347996757524	WITHOUT_CLASSIFICATION	1.6520032424759332E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9998779499057224	WITHOUT_CLASSIFICATION	1.2205009427755211E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999984409886165	WITHOUT_CLASSIFICATION	1.559011383507266E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999635392474515	WITHOUT_CLASSIFICATION	3.646075254849054E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9998179305006171	WITHOUT_CLASSIFICATION	1.820694993828596E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999611682267809	WITHOUT_CLASSIFICATION	3.883177321907383E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999342626149669	WITHOUT_CLASSIFICATION	6.573738503307992E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999910484896963	WITHOUT_CLASSIFICATION	8.951510303623029E-6	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999751417738763	WITHOUT_CLASSIFICATION	2.4858226123810433E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999442470865624	WITHOUT_CLASSIFICATION	5.575291343756563E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999527407812359	WITHOUT_CLASSIFICATION	4.72592187642119E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999839045602611	WITHOUT_CLASSIFICATION	1.6095439738895556E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999511244545383	WITHOUT_CLASSIFICATION	4.887554546183434E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999672446787656	WITHOUT_CLASSIFICATION	3.275532123441522E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.999907193435433	WITHOUT_CLASSIFICATION	9.280656456702784E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.999932291723414	WITHOUT_CLASSIFICATION	6.770827658600244E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998584654814247	WITHOUT_CLASSIFICATION	1.4153451857525155E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999946726453449	WITHOUT_CLASSIFICATION	5.327354655079192E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999814187885605	WITHOUT_CLASSIFICATION	1.8581211439566773E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9981994204361861	WITHOUT_CLASSIFICATION	0.0018005795638138854	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999794915551126	WITHOUT_CLASSIFICATION	2.0508444887449198E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998899833794657	WITHOUT_CLASSIFICATION	1.1001662053434115E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999640772892864	WITHOUT_CLASSIFICATION	3.5922710713595485E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9997750860347088	WITHOUT_CLASSIFICATION	2.249139652912143E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999480236602708	WITHOUT_CLASSIFICATION	5.1976339729221715E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999511244545383	WITHOUT_CLASSIFICATION	4.887554546183434E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998471763211466	WITHOUT_CLASSIFICATION	1.528236788534725E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.999907193435433	WITHOUT_CLASSIFICATION	9.280656456702784E-5	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9998610450778441	WITHOUT_CLASSIFICATION	1.3895492215584786E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.999601745964664	WITHOUT_CLASSIFICATION	3.9825403533601754E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999658624548738	WITHOUT_CLASSIFICATION	3.413754512618887E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9992024042429333	WITHOUT_CLASSIFICATION	7.975957570666623E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9942731861851956	WITHOUT_CLASSIFICATION	0.005726813814804455	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.999935267884801	WITHOUT_CLASSIFICATION	6.473211519889402E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9993413406533536	WITHOUT_CLASSIFICATION	6.586593466464155E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999236912009661	WITHOUT_CLASSIFICATION	7.63087990338533E-5	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997665770796662	WITHOUT_CLASSIFICATION	2.3342292033376314E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.999947835355403	WITHOUT_CLASSIFICATION	5.216464459702649E-5	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999999082580865	WITHOUT_CLASSIFICATION	9.17419134971895E-7	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9993904260980893	WITHOUT_CLASSIFICATION	6.095739019108E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999735465205968	WITHOUT_CLASSIFICATION	2.645347940323425E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999423966349276	WITHOUT_CLASSIFICATION	5.7603365072487964E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999976520488321	WITHOUT_CLASSIFICATION	2.3479511679308475E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999703682794081	WITHOUT_CLASSIFICATION	2.963172059188955E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999856272748224	WITHOUT_CLASSIFICATION	1.4372725177565454E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999071206973146	WITHOUT_CLASSIFICATION	9.287930268542245E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9981354579143717	WITHOUT_CLASSIFICATION	0.0018645420856282834	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999641751953969	WITHOUT_CLASSIFICATION	3.582480460301165E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998529269434713	WITHOUT_CLASSIFICATION	1.4707305652865538E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999783819082507	WITHOUT_CLASSIFICATION	2.1618091749206453E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999697782833954	WITHOUT_CLASSIFICATION	3.0221716604530812E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9993300354656875	WITHOUT_CLASSIFICATION	6.699645343125201E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9998701388781109	WITHOUT_CLASSIFICATION	1.2986112188909124E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999310512076967	WITHOUT_CLASSIFICATION	6.894879230335871E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9979142916365309	WITHOUT_CLASSIFICATION	0.00208570836346915	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999770505683043	WITHOUT_CLASSIFICATION	2.294943169573347E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999770505683043	WITHOUT_CLASSIFICATION	2.294943169573347E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9992321792808385	WITHOUT_CLASSIFICATION	7.678207191613519E-4	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999748555611899	WITHOUT_CLASSIFICATION	2.5144438810054907E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.999983800504276	WITHOUT_CLASSIFICATION	1.6199495723968055E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9993737820264319	WITHOUT_CLASSIFICATION	6.262179735682275E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999924171096441	WITHOUT_CLASSIFICATION	7.5828903558681526E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999983102864892	WITHOUT_CLASSIFICATION	1.6897135107765943E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999630180656872	WITHOUT_CLASSIFICATION	3.698193431282702E-5	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999767553901637	WITHOUT_CLASSIFICATION	2.3244609836229427E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999412009047696	WITHOUT_CLASSIFICATION	5.8799095230311013E-5	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999435313918911	WITHOUT_CLASSIFICATION	5.646860810891695E-5	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9997721840848321	WITHOUT_CLASSIFICATION	2.2781591516774053E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999255105514376	WITHOUT_CLASSIFICATION	7.448944856231899E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9998591016263383	WITHOUT_CLASSIFICATION	1.4089837366170084E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9866195169145021	WITHOUT_CLASSIFICATION	0.013380483085498003	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999944539553723	WITHOUT_CLASSIFICATION	5.5460446277128934E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999797731288552	WITHOUT_CLASSIFICATION	2.0226871144778648E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901140870936	WITHOUT_CLASSIFICATION	9.885912906459655E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.999692526208435	WITHOUT_CLASSIFICATION	3.07473791564976E-4	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999889761326901	WITHOUT_CLASSIFICATION	1.1023867309863578E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999922910899219	WITHOUT_CLASSIFICATION	7.708910078009308E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9998035437587477	WITHOUT_CLASSIFICATION	1.9645624125239468E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999889761326901	WITHOUT_CLASSIFICATION	1.1023867309863578E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.998839479736359	WITHOUT_CLASSIFICATION	0.0011605202636409144	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999724672197301	WITHOUT_CLASSIFICATION	2.7532780269946988E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999675440004085	WITHOUT_CLASSIFICATION	3.2455999591333324E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999675440004085	WITHOUT_CLASSIFICATION	3.2455999591333324E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.999989849631522	WITHOUT_CLASSIFICATION	1.015036847789928E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999677703349622	WITHOUT_CLASSIFICATION	3.2229665037873545E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998662857618388	WITHOUT_CLASSIFICATION	1.3371423816118286E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9994794376367299	WITHOUT_CLASSIFICATION	5.205623632700305E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999797499661789	WITHOUT_CLASSIFICATION	2.0250033821118318E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9996250677310703	WITHOUT_CLASSIFICATION	3.7493226892965515E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9998591438955475	WITHOUT_CLASSIFICATION	1.4085610445243335E-4	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9990242361972709	WITHOUT_CLASSIFICATION	9.757638027291688E-4	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999973598886757	WITHOUT_CLASSIFICATION	2.6401113243425777E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999862806907134	WITHOUT_CLASSIFICATION	1.371930928663328E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9997920393921174	WITHOUT_CLASSIFICATION	2.0796060788269192E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999819008633819	WITHOUT_CLASSIFICATION	1.8099136618085935E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999723900968638	WITHOUT_CLASSIFICATION	2.760990313626063E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999797731288552	WITHOUT_CLASSIFICATION	2.0226871144778648E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999797499661789	WITHOUT_CLASSIFICATION	2.0250033821118318E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9956545748644973	WITHOUT_CLASSIFICATION	0.004345425135502733	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9956545748644973	WITHOUT_CLASSIFICATION	0.004345425135502733	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9704460232204047	WITHOUT_CLASSIFICATION	0.02955397677959518	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999960526681959	WITHOUT_CLASSIFICATION	3.9473318040015755E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999877357754408	WITHOUT_CLASSIFICATION	1.2264224559111284E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998876737474329	WITHOUT_CLASSIFICATION	1.1232625256702226E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999529740027443	WITHOUT_CLASSIFICATION	4.7025997255725595E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.999992922850249	WITHOUT_CLASSIFICATION	7.077149750961905E-6	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9991418298383492	WITHOUT_CLASSIFICATION	8.581701616508079E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9994520275244381	WITHOUT_CLASSIFICATION	5.479724755618955E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.999986759316916	WITHOUT_CLASSIFICATION	1.3240683084004459E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999967876695508	WITHOUT_CLASSIFICATION	3.2123304491742406E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9998087273105059	WITHOUT_CLASSIFICATION	1.912726894941629E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999473254221	WITHOUT_CLASSIFICATION	5.267457782713521E-8	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999115930096232	WITHOUT_CLASSIFICATION	8.840699037680759E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901140870936	WITHOUT_CLASSIFICATION	9.885912906459655E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999677703349622	WITHOUT_CLASSIFICATION	3.2229665037873545E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998662857618388	WITHOUT_CLASSIFICATION	1.3371423816118286E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998662857618388	WITHOUT_CLASSIFICATION	1.3371423816118286E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999797499661789	WITHOUT_CLASSIFICATION	2.0250033821118318E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999797499661789	WITHOUT_CLASSIFICATION	2.0250033821118318E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9956545748644973	WITHOUT_CLASSIFICATION	0.004345425135502733	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999744442769695	WITHOUT_CLASSIFICATION	2.5555723030489923E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9984492195076159	WITHOUT_CLASSIFICATION	0.0015507804923840316	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999986024560206	WITHOUT_CLASSIFICATION	1.3975439793940538E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9998960518793492	WITHOUT_CLASSIFICATION	1.03948120650766E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999829705713374	WITHOUT_CLASSIFICATION	1.7029428662551407E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9827576650443891	WITHOUT_CLASSIFICATION	0.017242334955610863	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9998966253368318	WITHOUT_CLASSIFICATION	1.0337466316824326E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999274264219729	WITHOUT_CLASSIFICATION	7.257357802712178E-5	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999688685157014	WITHOUT_CLASSIFICATION	3.1131484298643707E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999677703349622	WITHOUT_CLASSIFICATION	3.2229665037873545E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998662857618388	WITHOUT_CLASSIFICATION	1.3371423816118286E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998662857618388	WITHOUT_CLASSIFICATION	1.3371423816118286E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9994520275244381	WITHOUT_CLASSIFICATION	5.479724755618955E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999967876695508	WITHOUT_CLASSIFICATION	3.2123304491742406E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9995002643321285	WITHOUT_CLASSIFICATION	4.997356678715819E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999983540773943	WITHOUT_CLASSIFICATION	1.6459226056023204E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999896601944056	WITHOUT_CLASSIFICATION	1.0339805594389488E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999896601944056	WITHOUT_CLASSIFICATION	1.0339805594389488E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9997579426735385	WITHOUT_CLASSIFICATION	2.420573264615955E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.999853838766208	WITHOUT_CLASSIFICATION	1.4616123379207198E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999745568187328	WITHOUT_CLASSIFICATION	2.544318126725293E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999948783433366	WITHOUT_CLASSIFICATION	5.121656663453258E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999948783433366	WITHOUT_CLASSIFICATION	5.121656663453258E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999776018126921	WITHOUT_CLASSIFICATION	2.2398187307889046E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999776018126921	WITHOUT_CLASSIFICATION	2.2398187307889046E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999845334641236	WITHOUT_CLASSIFICATION	1.546653587636588E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999845334641236	WITHOUT_CLASSIFICATION	1.546653587636588E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999853988057599	WITHOUT_CLASSIFICATION	1.4601194240006969E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999924089217521	WITHOUT_CLASSIFICATION	7.591078247963112E-6	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9997661310149685	WITHOUT_CLASSIFICATION	2.338689850316231E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999586053446149	WITHOUT_CLASSIFICATION	4.139465538501804E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999801557509156	WITHOUT_CLASSIFICATION	1.9844249084434676E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999172224525674	WITHOUT_CLASSIFICATION	8.27775474325797E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999722777807186	WITHOUT_CLASSIFICATION	2.772221928142303E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9998805468586573	WITHOUT_CLASSIFICATION	1.1945314134270445E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9997448746305541	WITHOUT_CLASSIFICATION	2.551253694459914E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999699071014169	WITHOUT_CLASSIFICATION	3.0092898583156745E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999558580849609	WITHOUT_CLASSIFICATION	4.4141915039180443E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9992531542279895	WITHOUT_CLASSIFICATION	7.468457720103843E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998730500480139	WITHOUT_CLASSIFICATION	1.2694995198614373E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998730500480139	WITHOUT_CLASSIFICATION	1.2694995198614373E-4	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9998050186708248	WITHOUT_CLASSIFICATION	1.949813291750685E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999569182703935	WITHOUT_CLASSIFICATION	4.3081729606560535E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9983669619332805	WITHOUT_CLASSIFICATION	0.0016330380667195807	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999713986851593	WITHOUT_CLASSIFICATION	2.8601314840686697E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999943459737154	WITHOUT_CLASSIFICATION	5.654026284703514E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999105998786617	WITHOUT_CLASSIFICATION	8.940012133823081E-5	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998739794179242	WITHOUT_CLASSIFICATION	1.2602058207572902E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998690371095286	WITHOUT_CLASSIFICATION	1.3096289047140618E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.999924228229213	WITHOUT_CLASSIFICATION	7.577177078689516E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999738842506923	WITHOUT_CLASSIFICATION	2.6115749307628453E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9998936249073033	WITHOUT_CLASSIFICATION	1.0637509269685167E-4	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9950906172792481	WITHOUT_CLASSIFICATION	0.00490938272075181	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9996649414070796	WITHOUT_CLASSIFICATION	3.3505859292035306E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9997321208474522	WITHOUT_CLASSIFICATION	2.6787915254785933E-4	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.997688798583532	WITHOUT_CLASSIFICATION	0.0023112014164680746	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999757527095832	WITHOUT_CLASSIFICATION	2.4247290416788996E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9998777188183485	WITHOUT_CLASSIFICATION	1.2228118165151644E-4	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999340861806766	WITHOUT_CLASSIFICATION	6.591381932336689E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9996106893749217	WITHOUT_CLASSIFICATION	3.893106250783281E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9996106893749217	WITHOUT_CLASSIFICATION	3.893106250783281E-4	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999837782163771	WITHOUT_CLASSIFICATION	1.6221783622948004E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9997920393921174	WITHOUT_CLASSIFICATION	2.0796060788269192E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999385281179537	WITHOUT_CLASSIFICATION	6.147188204633638E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999161424552145	WITHOUT_CLASSIFICATION	8.385754478546004E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999161424552145	WITHOUT_CLASSIFICATION	8.385754478546004E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999653112233755	WITHOUT_CLASSIFICATION	3.468877662449797E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.999941192229682	WITHOUT_CLASSIFICATION	5.8807770317873536E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999215235565174	WITHOUT_CLASSIFICATION	7.847644348262992E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997946560514749	WITHOUT_CLASSIFICATION	2.0534394852510362E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.998558350577589	WITHOUT_CLASSIFICATION	0.0014416494224109475	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.998558350577589	WITHOUT_CLASSIFICATION	0.0014416494224109475	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.998558350577589	WITHOUT_CLASSIFICATION	0.0014416494224109475	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997946560514749	WITHOUT_CLASSIFICATION	2.0534394852510362E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999902206695378	WITHOUT_CLASSIFICATION	9.779330462328828E-6	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9998348489905355	WITHOUT_CLASSIFICATION	1.6515100946456118E-4	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9991313140593688	WITHOUT_CLASSIFICATION	8.68685940631099E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9998760859545863	WITHOUT_CLASSIFICATION	1.2391404541362317E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9993986495637907	WITHOUT_CLASSIFICATION	6.013504362093699E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998580208659137	WITHOUT_CLASSIFICATION	1.4197913408632495E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999911102735091	WITHOUT_CLASSIFICATION	8.88972649080683E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9996290385232832	WITHOUT_CLASSIFICATION	3.7096147671686303E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9998936249073033	WITHOUT_CLASSIFICATION	1.0637509269685167E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9980727283367212	WITHOUT_CLASSIFICATION	0.0019272716632787313	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999551814990874	WITHOUT_CLASSIFICATION	4.481850091274044E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999838428108139	WITHOUT_CLASSIFICATION	1.6157189186206548E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998102684015189	WITHOUT_CLASSIFICATION	1.8973159848120172E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999665403561587	WITHOUT_CLASSIFICATION	3.3459643841324526E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9994511112144286	WITHOUT_CLASSIFICATION	5.4888878557139E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999705664556021	WITHOUT_CLASSIFICATION	2.9433544397872337E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999800166088074	WITHOUT_CLASSIFICATION	1.9983391192508164E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9998214475947588	WITHOUT_CLASSIFICATION	1.7855240524119426E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999548026424278	WITHOUT_CLASSIFICATION	4.519735757236421E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997604824438835	WITHOUT_CLASSIFICATION	2.3951755611637348E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999378673009118	WITHOUT_CLASSIFICATION	6.213269908818068E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999805248168477	WITHOUT_CLASSIFICATION	1.9475183152244743E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999471976953603	WITHOUT_CLASSIFICATION	5.28023046396307E-5	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999970220233882	WITHOUT_CLASSIFICATION	2.9779766117240786E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9994000805682168	WITHOUT_CLASSIFICATION	5.999194317832298E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9998248446442269	WITHOUT_CLASSIFICATION	1.7515535577302565E-4	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999595517561524	WITHOUT_CLASSIFICATION	4.044824384762945E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9761568733314462	WITHOUT_CLASSIFICATION	0.023843126668553757	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999904972922462	WITHOUT_CLASSIFICATION	9.50270775375852E-6	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999913483171383	WITHOUT_CLASSIFICATION	8.651682861736939E-6	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999976888595555	WITHOUT_CLASSIFICATION	2.3111404445836925E-6	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999448209209839	WITHOUT_CLASSIFICATION	5.517907901613728E-5	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999475586460305	WITHOUT_CLASSIFICATION	5.24413539694175E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9998958482717727	WITHOUT_CLASSIFICATION	1.041517282273304E-4	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999355478682266	WITHOUT_CLASSIFICATION	6.445213177343733E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.999770213089445	WITHOUT_CLASSIFICATION	2.2978691055499425E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999653112233755	WITHOUT_CLASSIFICATION	3.468877662449797E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999432518439123	WITHOUT_CLASSIFICATION	5.674815608756751E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997946560514749	WITHOUT_CLASSIFICATION	2.0534394852510362E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998580208659137	WITHOUT_CLASSIFICATION	1.4197913408632495E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999551814990874	WITHOUT_CLASSIFICATION	4.481850091274044E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998102684015189	WITHOUT_CLASSIFICATION	1.8973159848120172E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9994511112144286	WITHOUT_CLASSIFICATION	5.4888878557139E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999838428108139	WITHOUT_CLASSIFICATION	1.6157189186206548E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999705664556021	WITHOUT_CLASSIFICATION	2.9433544397872337E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999548026424278	WITHOUT_CLASSIFICATION	4.519735757236421E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9998214475947588	WITHOUT_CLASSIFICATION	1.7855240524119426E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999378673009118	WITHOUT_CLASSIFICATION	6.213269908818068E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999912870433664	WITHOUT_CLASSIFICATION	8.712956633551806E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9994053019853182	WITHOUT_CLASSIFICATION	5.946980146818035E-4	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999211495234431	WITHOUT_CLASSIFICATION	7.885047655690419E-5	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999606785989144	WITHOUT_CLASSIFICATION	3.932140108572081E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999510827335134	WITHOUT_CLASSIFICATION	4.891726648668418E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999422314666621	WITHOUT_CLASSIFICATION	5.776853333788931E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998946264979878	WITHOUT_CLASSIFICATION	1.0537350201225373E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9997759218873582	WITHOUT_CLASSIFICATION	2.2407811264194097E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9997360128908697	WITHOUT_CLASSIFICATION	2.639871091303481E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999698615362295	WITHOUT_CLASSIFICATION	3.0138463770496963E-5	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999730911936342	WITHOUT_CLASSIFICATION	2.6908806365830926E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997880258463168	WITHOUT_CLASSIFICATION	2.119741536832798E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999709014670536	WITHOUT_CLASSIFICATION	2.9098532946373588E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9998991307878183	WITHOUT_CLASSIFICATION	1.0086921218171287E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999234056119858	WITHOUT_CLASSIFICATION	7.659438801419158E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999190355945587	WITHOUT_CLASSIFICATION	8.096440544127374E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997279737175351	WITHOUT_CLASSIFICATION	2.720262824648499E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999821477719082	WITHOUT_CLASSIFICATION	1.785222809186608E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999938968304738	WITHOUT_CLASSIFICATION	6.103169526204321E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999323462163776	WITHOUT_CLASSIFICATION	6.765378362242613E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9998663401563048	WITHOUT_CLASSIFICATION	1.3365984369509713E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9998663401563048	WITHOUT_CLASSIFICATION	1.3365984369509713E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9991847780931361	WITHOUT_CLASSIFICATION	8.152219068638136E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997782244339605	WITHOUT_CLASSIFICATION	2.217755660394565E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997782244339605	WITHOUT_CLASSIFICATION	2.217755660394565E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999460633017786	WITHOUT_CLASSIFICATION	5.393669822133978E-5	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999460633017786	WITHOUT_CLASSIFICATION	5.393669822133978E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998573127186899	WITHOUT_CLASSIFICATION	1.4268728131015273E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998573127186899	WITHOUT_CLASSIFICATION	1.4268728131015273E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999943490356947	WITHOUT_CLASSIFICATION	5.650964305303024E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9990761228054613	WITHOUT_CLASSIFICATION	9.238771945387202E-4	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9990761228054613	WITHOUT_CLASSIFICATION	9.238771945387202E-4	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999832919368894	WITHOUT_CLASSIFICATION	1.6708063110593784E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999832919368894	WITHOUT_CLASSIFICATION	1.6708063110593784E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998501635931245	WITHOUT_CLASSIFICATION	1.4983640687550042E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9998480773997782	WITHOUT_CLASSIFICATION	1.5192260022186928E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9998480773997782	WITHOUT_CLASSIFICATION	1.5192260022186928E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998970307954294	WITHOUT_CLASSIFICATION	1.029692045705511E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9998485900421462	WITHOUT_CLASSIFICATION	1.5140995785381355E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.99989026879543	WITHOUT_CLASSIFICATION	1.0973120457004883E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998970307954294	WITHOUT_CLASSIFICATION	1.029692045705511E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9998451011070864	WITHOUT_CLASSIFICATION	1.5489889291359508E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999994040210689	WITHOUT_CLASSIFICATION	5.959789311164564E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998430775731943	WITHOUT_CLASSIFICATION	1.5692242680573402E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999988970623561	WITHOUT_CLASSIFICATION	1.1029376438538729E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999957270505784	WITHOUT_CLASSIFICATION	4.272949421626656E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999957270505784	WITHOUT_CLASSIFICATION	4.2729494216266526E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999771196730449	WITHOUT_CLASSIFICATION	2.288032695505782E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999192008680964	WITHOUT_CLASSIFICATION	8.079913190365915E-5	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999192008680964	WITHOUT_CLASSIFICATION	8.079913190365915E-5	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998941515953773	WITHOUT_CLASSIFICATION	1.0584840462273402E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998430775731943	WITHOUT_CLASSIFICATION	1.5692242680573402E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999988970623561	WITHOUT_CLASSIFICATION	1.1029376438538729E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999957270505784	WITHOUT_CLASSIFICATION	4.272949421626656E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999957270505784	WITHOUT_CLASSIFICATION	4.2729494216266526E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999771196730449	WITHOUT_CLASSIFICATION	2.288032695505782E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9998841025941684	WITHOUT_CLASSIFICATION	1.1589740583173961E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998768630381556	WITHOUT_CLASSIFICATION	1.2313696184440545E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9994476185280449	WITHOUT_CLASSIFICATION	5.523814719551334E-4	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9998723700632398	WITHOUT_CLASSIFICATION	1.2762993676011846E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9998417489727737	WITHOUT_CLASSIFICATION	1.5825102722629044E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999845461419435	WITHOUT_CLASSIFICATION	1.545385805646031E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999802799039195	WITHOUT_CLASSIFICATION	1.972009608060547E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999802799039195	WITHOUT_CLASSIFICATION	1.972009608060547E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9972139448172265	WITHOUT_CLASSIFICATION	0.0027860551827734235	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9993771119441347	WITHOUT_CLASSIFICATION	6.228880558653792E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.999376874934264	WITHOUT_CLASSIFICATION	6.231250657360622E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9997987803333662	WITHOUT_CLASSIFICATION	2.0121966663373122E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9993776328043437	WITHOUT_CLASSIFICATION	6.223671956564051E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9993776328043437	WITHOUT_CLASSIFICATION	6.223671956564051E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9994424862519026	WITHOUT_CLASSIFICATION	5.575137480974876E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9994357765477901	WITHOUT_CLASSIFICATION	5.642234522098696E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998916254763377	WITHOUT_CLASSIFICATION	1.0837452366227427E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998916254763377	WITHOUT_CLASSIFICATION	1.0837452366227427E-4	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999376874934264	WITHOUT_CLASSIFICATION	6.231250657360622E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9998877619594629	WITHOUT_CLASSIFICATION	1.1223804053709924E-4	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999559846855451	WITHOUT_CLASSIFICATION	4.401531445494579E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999977612233892	WITHOUT_CLASSIFICATION	2.238776610793181E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9998662703718991	WITHOUT_CLASSIFICATION	1.3372962810088513E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999681776691268	WITHOUT_CLASSIFICATION	3.182233087315673E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9994697662899182	WITHOUT_CLASSIFICATION	5.302337100818291E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.999951726029524	WITHOUT_CLASSIFICATION	4.8273970475985086E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9996640034974733	WITHOUT_CLASSIFICATION	3.359965025267289E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999983618249961	WITHOUT_CLASSIFICATION	1.6381750038423536E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998586562721204	WITHOUT_CLASSIFICATION	1.413437278795167E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998586562721204	WITHOUT_CLASSIFICATION	1.413437278795167E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999842290603941	WITHOUT_CLASSIFICATION	1.5770939605894748E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999842290603941	WITHOUT_CLASSIFICATION	1.5770939605894748E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999396112035759	WITHOUT_CLASSIFICATION	6.0388796424243725E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9992818076029445	WITHOUT_CLASSIFICATION	7.1819239705554E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9992818076029445	WITHOUT_CLASSIFICATION	7.1819239705554E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9992818076029445	WITHOUT_CLASSIFICATION	7.1819239705554E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999971258479852	WITHOUT_CLASSIFICATION	2.8741520148305473E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999971258479852	WITHOUT_CLASSIFICATION	2.8741520148305473E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999487375680164	WITHOUT_CLASSIFICATION	5.1262431983577786E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.998923429288493	WITHOUT_CLASSIFICATION	0.001076570711507053	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999563918459504	WITHOUT_CLASSIFICATION	4.3608154049600075E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999982684313612	WITHOUT_CLASSIFICATION	1.7315686387759432E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999708502517566	WITHOUT_CLASSIFICATION	2.914974824347077E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9998918165491828	WITHOUT_CLASSIFICATION	1.0818345081720279E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9985578519281213	WITHOUT_CLASSIFICATION	0.0014421480718786906	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999487375680164	WITHOUT_CLASSIFICATION	5.1262431983577786E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999811643728401	WITHOUT_CLASSIFICATION	1.8835627159775788E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.998923429288493	WITHOUT_CLASSIFICATION	0.001076570711507053	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999563918459504	WITHOUT_CLASSIFICATION	4.3608154049600075E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998997512551945	WITHOUT_CLASSIFICATION	1.002487448056304E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999748679984225	WITHOUT_CLASSIFICATION	2.5132001577520313E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998602972862769	WITHOUT_CLASSIFICATION	1.3970271372302226E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999475496130714	WITHOUT_CLASSIFICATION	5.24503869286974E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999627908075305	WITHOUT_CLASSIFICATION	3.720919246942692E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9998925795391478	WITHOUT_CLASSIFICATION	1.0742046085223608E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998997512551945	WITHOUT_CLASSIFICATION	1.002487448056304E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999818715290978	WITHOUT_CLASSIFICATION	1.8128470902157142E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999818715290978	WITHOUT_CLASSIFICATION	1.8128470902157142E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999793064078407	WITHOUT_CLASSIFICATION	2.0693592159306878E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999802723518907	WITHOUT_CLASSIFICATION	1.972764810927435E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.999899024135794	WITHOUT_CLASSIFICATION	1.0097586420596154E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9996623124776283	WITHOUT_CLASSIFICATION	3.376875223716708E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9996358096457166	WITHOUT_CLASSIFICATION	3.641903542833573E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999956839693058	WITHOUT_CLASSIFICATION	4.31603069423825E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999027618901501	WITHOUT_CLASSIFICATION	9.723810984986444E-5	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999933518255335	WITHOUT_CLASSIFICATION	6.648174466492757E-5	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999742176596312	WITHOUT_CLASSIFICATION	2.5782340368787288E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999742184656423	WITHOUT_CLASSIFICATION	2.5781534357675373E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999412268218301	WITHOUT_CLASSIFICATION	5.8773178169949586E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9996623124776283	WITHOUT_CLASSIFICATION	3.376875223716708E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9996358096457166	WITHOUT_CLASSIFICATION	3.641903542833573E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999138288100305	WITHOUT_CLASSIFICATION	8.617118996948108E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999549751094445	WITHOUT_CLASSIFICATION	4.502489055546895E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.999888185311133	WITHOUT_CLASSIFICATION	1.1181468886705011E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999675491402031	WITHOUT_CLASSIFICATION	3.2450859796967634E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999545005250892	WITHOUT_CLASSIFICATION	4.5499474910745284E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999687384028308	WITHOUT_CLASSIFICATION	3.12615971691579E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999469338076813	WITHOUT_CLASSIFICATION	5.306619231879221E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9984877582942857	WITHOUT_CLASSIFICATION	0.00151224170571427	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999691444208755	WITHOUT_CLASSIFICATION	3.085557912458042E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999659051963501	WITHOUT_CLASSIFICATION	3.4094803649961834E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999780080048768	WITHOUT_CLASSIFICATION	2.1991995123182055E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999579274267919	WITHOUT_CLASSIFICATION	4.207257320804274E-5	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999968226940984	WITHOUT_CLASSIFICATION	3.17730590166293E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999659051963501	WITHOUT_CLASSIFICATION	3.4094803649961834E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999780080048768	WITHOUT_CLASSIFICATION	2.1991995123182055E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999579274267919	WITHOUT_CLASSIFICATION	4.207257320804274E-5	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998001553144732	WITHOUT_CLASSIFICATION	1.9984468552682497E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9995714298520133	WITHOUT_CLASSIFICATION	4.285701479867065E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9998844554788054	WITHOUT_CLASSIFICATION	1.1554452119461372E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9989009650502024	WITHOUT_CLASSIFICATION	0.001099034949797621	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9998714001735945	WITHOUT_CLASSIFICATION	1.285998264055618E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999548609283266	WITHOUT_CLASSIFICATION	4.513907167331412E-5	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999112949561209	WITHOUT_CLASSIFICATION	8.870504387917552E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999794134214799	WITHOUT_CLASSIFICATION	2.0586578520076688E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999887598754406	WITHOUT_CLASSIFICATION	1.1240124559461912E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9785128494547046	WITHOUT_CLASSIFICATION	0.02148715054529538	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9997212865751053	WITHOUT_CLASSIFICATION	2.787134248946639E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9998594815488205	WITHOUT_CLASSIFICATION	1.4051845117946094E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999976208145317	WITHOUT_CLASSIFICATION	2.3791854683117846E-6	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9997823555851464	WITHOUT_CLASSIFICATION	2.1764441485364885E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999783493949579	WITHOUT_CLASSIFICATION	2.1650605042018312E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999521800048238	WITHOUT_CLASSIFICATION	4.7819995176194465E-4	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9996015318041781	WITHOUT_CLASSIFICATION	3.984681958219501E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999949327189378	WITHOUT_CLASSIFICATION	5.067281062242596E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999466877944184	WITHOUT_CLASSIFICATION	5.331220558165874E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999561975950583	WITHOUT_CLASSIFICATION	4.380240494175833E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999795234546124	WITHOUT_CLASSIFICATION	2.0476545387597224E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999795234546124	WITHOUT_CLASSIFICATION	2.0476545387597224E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999243841531192	WITHOUT_CLASSIFICATION	7.561584688073533E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999243841531192	WITHOUT_CLASSIFICATION	7.561584688073533E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999934127538636	WITHOUT_CLASSIFICATION	6.587246136441948E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999934127538636	WITHOUT_CLASSIFICATION	6.587246136441948E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999944629135474	WITHOUT_CLASSIFICATION	5.53708645249272E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999731755555	WITHOUT_CLASSIFICATION	2.682444449779316E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999803220893086	WITHOUT_CLASSIFICATION	1.967791069131411E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999938740446623	WITHOUT_CLASSIFICATION	6.12595533756894E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999976790032274	WITHOUT_CLASSIFICATION	2.320996772547053E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999962312617462	WITHOUT_CLASSIFICATION	3.768738253870071E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999583699548429	WITHOUT_CLASSIFICATION	4.163004515710525E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999696701888855	WITHOUT_CLASSIFICATION	3.0329811114509583E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999944629135474	WITHOUT_CLASSIFICATION	5.53708645249272E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999731755555	WITHOUT_CLASSIFICATION	2.682444449779316E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999803220893086	WITHOUT_CLASSIFICATION	1.967791069131411E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999976790032274	WITHOUT_CLASSIFICATION	2.320996772547053E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999962312617462	WITHOUT_CLASSIFICATION	3.768738253870071E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999338835211502	WITHOUT_CLASSIFICATION	6.61164788497692E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9998529847837812	WITHOUT_CLASSIFICATION	1.47015216218861E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9995974630770836	WITHOUT_CLASSIFICATION	4.02536922916272E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9995974630770836	WITHOUT_CLASSIFICATION	4.02536922916272E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999083318622227	WITHOUT_CLASSIFICATION	9.166813777722903E-5	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999077859718193	WITHOUT_CLASSIFICATION	9.221402818071207E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9993481953164924	WITHOUT_CLASSIFICATION	6.518046835076185E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999968562335704	WITHOUT_CLASSIFICATION	3.143766429603989E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999968562335704	WITHOUT_CLASSIFICATION	3.143766429603989E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9998081070649574	WITHOUT_CLASSIFICATION	1.9189293504264827E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999994764126979	WITHOUT_CLASSIFICATION	5.235873020966078E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998665220474156	WITHOUT_CLASSIFICATION	1.3347795258451968E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999714469291406	WITHOUT_CLASSIFICATION	2.8553070859309383E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9998342484390518	WITHOUT_CLASSIFICATION	1.6575156094817716E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997880258463168	WITHOUT_CLASSIFICATION	2.119741536832798E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999709014670536	WITHOUT_CLASSIFICATION	2.9098532946373588E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9998991307878183	WITHOUT_CLASSIFICATION	1.0086921218171287E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999234056119858	WITHOUT_CLASSIFICATION	7.659438801419158E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999821477719082	WITHOUT_CLASSIFICATION	1.785222809186608E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999938968304738	WITHOUT_CLASSIFICATION	6.103169526204321E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9998081070649574	WITHOUT_CLASSIFICATION	1.9189293504264827E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999994764126979	WITHOUT_CLASSIFICATION	5.235873020966078E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999714469291406	WITHOUT_CLASSIFICATION	2.8553070859309383E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999289057626012	WITHOUT_CLASSIFICATION	7.109423739879864E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9993481953164924	WITHOUT_CLASSIFICATION	6.518046835076185E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9993481953164924	WITHOUT_CLASSIFICATION	6.518046835076185E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999412268218301	WITHOUT_CLASSIFICATION	5.8773178169949586E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999412268218301	WITHOUT_CLASSIFICATION	5.8773178169949586E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9985839632263608	WITHOUT_CLASSIFICATION	0.0014160367736392465	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9985839632263608	WITHOUT_CLASSIFICATION	0.0014160367736392465	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999679363313282	WITHOUT_CLASSIFICATION	3.2063668671888836E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9998877581618162	WITHOUT_CLASSIFICATION	1.1224183818379448E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999248846087224	WITHOUT_CLASSIFICATION	7.511539127766553E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999733666346552	WITHOUT_CLASSIFICATION	2.663336534489985E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9998906760701579	WITHOUT_CLASSIFICATION	1.0932392984215359E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999486058266343	WITHOUT_CLASSIFICATION	5.139417336573107E-5	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9973463317295751	WITHOUT_CLASSIFICATION	0.0026536682704249607	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999953785727552	WITHOUT_CLASSIFICATION	4.621427244764547E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9998855678131041	WITHOUT_CLASSIFICATION	1.1443218689596401E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999856362141718	WITHOUT_CLASSIFICATION	1.4363785828278071E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.99996816638517	WITHOUT_CLASSIFICATION	3.183361482999812E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999877003655548	WITHOUT_CLASSIFICATION	1.2299634445283277E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999714713453052	WITHOUT_CLASSIFICATION	2.852865469481449E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999748929390634	WITHOUT_CLASSIFICATION	2.5107060936537926E-5	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999675385991494	WITHOUT_CLASSIFICATION	3.246140085054475E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9998992496259088	WITHOUT_CLASSIFICATION	1.0075037409124738E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999816409229524	WITHOUT_CLASSIFICATION	1.8359077047638965E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.999963839831382	WITHOUT_CLASSIFICATION	3.6160168617961844E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999709014670536	WITHOUT_CLASSIFICATION	2.9098532946373588E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999234056119858	WITHOUT_CLASSIFICATION	7.659438801419158E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999289057626012	WITHOUT_CLASSIFICATION	7.109423739879864E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9993481953164924	WITHOUT_CLASSIFICATION	6.518046835076185E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999412268218301	WITHOUT_CLASSIFICATION	5.8773178169949586E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9985839632263608	WITHOUT_CLASSIFICATION	0.0014160367736392465	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999958079421371	WITHOUT_CLASSIFICATION	4.19205786290166E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999726363133057	WITHOUT_CLASSIFICATION	2.736368669432839E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999895976825518	WITHOUT_CLASSIFICATION	1.04023174482906E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9990070428224023	WITHOUT_CLASSIFICATION	9.92957177597749E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9989579966999805	WITHOUT_CLASSIFICATION	0.0010420033000195137	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9989579966999805	WITHOUT_CLASSIFICATION	0.0010420033000195137	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999778229054016	WITHOUT_CLASSIFICATION	2.2177094598388894E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999593971467287	WITHOUT_CLASSIFICATION	4.060285327137421E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999490899917945	WITHOUT_CLASSIFICATION	5.091000820549773E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999606370341321	WITHOUT_CLASSIFICATION	3.9362965867941874E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999991408123319	WITHOUT_CLASSIFICATION	8.59187668110109E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999991408123319	WITHOUT_CLASSIFICATION	8.59187668110109E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999868238709307	WITHOUT_CLASSIFICATION	1.3176129069215082E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999768329929958	WITHOUT_CLASSIFICATION	2.316700700416804E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999183480614886	WITHOUT_CLASSIFICATION	8.165193851140358E-5	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9998991317253693	WITHOUT_CLASSIFICATION	1.0086827463074207E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999978109066634	WITHOUT_CLASSIFICATION	2.1890933365206295E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999717698559369	WITHOUT_CLASSIFICATION	2.8230144063107803E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999694389293041	WITHOUT_CLASSIFICATION	3.056107069588839E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9997131699623214	WITHOUT_CLASSIFICATION	2.868300376785904E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9916008747594933	WITHOUT_CLASSIFICATION	0.00839912524050657	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9996672022365722	WITHOUT_CLASSIFICATION	3.3279776342781274E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9995344471693294	WITHOUT_CLASSIFICATION	4.6555283067055815E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.999968879883069	WITHOUT_CLASSIFICATION	3.112011693097224E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999973424334156	WITHOUT_CLASSIFICATION	2.6575665844233035E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999838824564642	WITHOUT_CLASSIFICATION	1.6117543535874032E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9996566335363309	WITHOUT_CLASSIFICATION	3.433664636691011E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9997316547015447	WITHOUT_CLASSIFICATION	2.6834529845538353E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9998714056300902	WITHOUT_CLASSIFICATION	1.2859436990977604E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999345438187567	WITHOUT_CLASSIFICATION	6.54561812433613E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9998652601351253	WITHOUT_CLASSIFICATION	1.3473986487464574E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999819168741234	WITHOUT_CLASSIFICATION	1.8083125876575052E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9997191411999667	WITHOUT_CLASSIFICATION	2.8085880003325014E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999971943941859	WITHOUT_CLASSIFICATION	2.805605814106522E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999971943941859	WITHOUT_CLASSIFICATION	2.805605814106522E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9998561256850862	WITHOUT_CLASSIFICATION	1.438743149138249E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998698470678664	WITHOUT_CLASSIFICATION	1.3015293213355312E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998690371095286	WITHOUT_CLASSIFICATION	1.3096289047140618E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998690371095286	WITHOUT_CLASSIFICATION	1.3096289047140618E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.8367013086342575	DEFECT	0.1632986913657425	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9991709535727284	WITHOUT_CLASSIFICATION	8.290464272715787E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999276334625965	WITHOUT_CLASSIFICATION	7.236653740353127E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999827558385454	WITHOUT_CLASSIFICATION	1.724416145459638E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999827558385454	WITHOUT_CLASSIFICATION	1.724416145459638E-4	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9998842445503603	WITHOUT_CLASSIFICATION	1.1575544963977727E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999952639298093	WITHOUT_CLASSIFICATION	4.736070190687319E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999863631714164	WITHOUT_CLASSIFICATION	1.3636828583479323E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999807930572632	WITHOUT_CLASSIFICATION	1.9206942736783138E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9974963885705647	WITHOUT_CLASSIFICATION	0.0025036114294353187	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999817445239952	WITHOUT_CLASSIFICATION	1.8255476004743638E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999582884034756	WITHOUT_CLASSIFICATION	4.1711596524386955E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999786471403588	WITHOUT_CLASSIFICATION	2.1352859641261517E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999897775490991	WITHOUT_CLASSIFICATION	1.0222450900865439E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.999870472220191	WITHOUT_CLASSIFICATION	1.2952777980892327E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999870626417612	WITHOUT_CLASSIFICATION	1.2937358238774001E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999902923382296	WITHOUT_CLASSIFICATION	9.70766177045087E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999976601900514	WITHOUT_CLASSIFICATION	2.3398099486751794E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9989445006655582	WITHOUT_CLASSIFICATION	0.0010554993344417728	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999448898960074	WITHOUT_CLASSIFICATION	5.511010399254937E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999431013311318	WITHOUT_CLASSIFICATION	5.6898668868099196E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999950363000495	WITHOUT_CLASSIFICATION	4.96369995045909E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999797587036942	WITHOUT_CLASSIFICATION	2.0241296305821965E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999726153487135	WITHOUT_CLASSIFICATION	2.7384651286410793E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999902132388704	WITHOUT_CLASSIFICATION	9.78676112958976E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999836585346741	WITHOUT_CLASSIFICATION	1.634146532597641E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999866768758129	WITHOUT_CLASSIFICATION	1.3323124187015407E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999286581537798	WITHOUT_CLASSIFICATION	7.13418462201616E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999101884879411	WITHOUT_CLASSIFICATION	8.981151205893885E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999911851787522	WITHOUT_CLASSIFICATION	8.814821247910203E-6	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9998232851013807	WITHOUT_CLASSIFICATION	1.7671489861919906E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9129364403932624	WITHOUT_CLASSIFICATION	0.0870635596067376	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.999925097537199	WITHOUT_CLASSIFICATION	7.490246280092609E-5	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999700033868133	WITHOUT_CLASSIFICATION	2.9996613186788453E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999968412436055	WITHOUT_CLASSIFICATION	3.1587563944911644E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999923903271412	WITHOUT_CLASSIFICATION	7.609672858931824E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9989445006655582	WITHOUT_CLASSIFICATION	0.0010554993344417728	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.999925097537199	WITHOUT_CLASSIFICATION	7.490246280092609E-5	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999700033868133	WITHOUT_CLASSIFICATION	2.9996613186788453E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999923903271412	WITHOUT_CLASSIFICATION	7.609672858931824E-6	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.999973771028681	WITHOUT_CLASSIFICATION	2.6228971318936788E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999808782783594	WITHOUT_CLASSIFICATION	1.912172164064739E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999401613372924	WITHOUT_CLASSIFICATION	5.9838662707672286E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999870319584657	WITHOUT_CLASSIFICATION	1.2968041534223489E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999878428416189	WITHOUT_CLASSIFICATION	1.215715838104269E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9997904540861097	WITHOUT_CLASSIFICATION	2.0954591389044214E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999819168741234	WITHOUT_CLASSIFICATION	1.8083125876575052E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9998650312013251	WITHOUT_CLASSIFICATION	1.3496879867485066E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999883211835338	WITHOUT_CLASSIFICATION	1.1678816466241935E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.997811932217851	WITHOUT_CLASSIFICATION	0.0021880677821489156	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9988808479010036	WITHOUT_CLASSIFICATION	0.0011191520989963701	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9988808479010036	WITHOUT_CLASSIFICATION	0.0011191520989963701	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.999956564381835	WITHOUT_CLASSIFICATION	4.343561816507137E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999901715933612	WITHOUT_CLASSIFICATION	9.828406638698794E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999721113548656	WITHOUT_CLASSIFICATION	2.7888645134407523E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9995927031424711	WITHOUT_CLASSIFICATION	4.0729685752891466E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.999920415929683	WITHOUT_CLASSIFICATION	7.95840703171062E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998704575673542	WITHOUT_CLASSIFICATION	1.2954243264581058E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9899628873750295	WITHOUT_CLASSIFICATION	0.010037112624970528	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999915627250041	WITHOUT_CLASSIFICATION	8.4372749959315E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999733675632734	WITHOUT_CLASSIFICATION	2.6632436726605832E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999350884116812	WITHOUT_CLASSIFICATION	6.491158831875687E-5	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999727577498182	WITHOUT_CLASSIFICATION	2.7242250181719153E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999355117088577	WITHOUT_CLASSIFICATION	6.448829114231498E-5	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999782619575233	WITHOUT_CLASSIFICATION	2.173804247672993E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999756700802997	WITHOUT_CLASSIFICATION	2.4329919700266008E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9997146479873805	WITHOUT_CLASSIFICATION	2.853520126194618E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999144481723429	WITHOUT_CLASSIFICATION	8.555182765718048E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9998921295256166	WITHOUT_CLASSIFICATION	1.0787047438352414E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999664313065791	WITHOUT_CLASSIFICATION	3.356869342090709E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998527290505679	WITHOUT_CLASSIFICATION	1.4727094943221665E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9998241720050252	WITHOUT_CLASSIFICATION	1.75827994974913E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999603292306624	WITHOUT_CLASSIFICATION	3.9670769337665444E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9998872067848903	WITHOUT_CLASSIFICATION	1.127932151096354E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999087252382064	WITHOUT_CLASSIFICATION	9.127476179361762E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999116380782421	WITHOUT_CLASSIFICATION	8.836192175791224E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.7214272787851089	WITHOUT_CLASSIFICATION	0.2785727212148911	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9998625326537869	WITHOUT_CLASSIFICATION	1.3746734621308197E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9998279917543116	WITHOUT_CLASSIFICATION	1.7200824568852792E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999962731452501	WITHOUT_CLASSIFICATION	3.726854749896851E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999521562525903	WITHOUT_CLASSIFICATION	4.784374740970759E-5	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.999941470736332	WITHOUT_CLASSIFICATION	5.852926366794884E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999955139179866	WITHOUT_CLASSIFICATION	4.486082013322678E-6	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999876137227718	WITHOUT_CLASSIFICATION	1.2386277228175081E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999875264287412	WITHOUT_CLASSIFICATION	1.247357125868611E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9998864461101639	WITHOUT_CLASSIFICATION	1.1355388983610645E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999547811996149	WITHOUT_CLASSIFICATION	4.5218800385151866E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9993379519556274	WITHOUT_CLASSIFICATION	6.620480443727102E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999988094567084	WITHOUT_CLASSIFICATION	1.1905432915965958E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999655100974434	WITHOUT_CLASSIFICATION	3.44899025566419E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9965578431209285	WITHOUT_CLASSIFICATION	0.0034421568790715218	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995946056554003	WITHOUT_CLASSIFICATION	4.053943445996967E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999450918177553	WITHOUT_CLASSIFICATION	5.4908182244710144E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9992632118218595	WITHOUT_CLASSIFICATION	7.367881781404655E-4	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.998828721397437	WITHOUT_CLASSIFICATION	0.0011712786025630394	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9993338766613516	WITHOUT_CLASSIFICATION	6.661233386484199E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9995127770314299	WITHOUT_CLASSIFICATION	4.872229685700408E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999948309196865	WITHOUT_CLASSIFICATION	5.1690803135032615E-5	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999009259647027	WITHOUT_CLASSIFICATION	9.907403529735454E-5	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998412445670302	WITHOUT_CLASSIFICATION	1.5875543296985076E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999627909338903	WITHOUT_CLASSIFICATION	3.7209066109774375E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9970246654222258	WITHOUT_CLASSIFICATION	0.0029753345777742547	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9997980536543527	WITHOUT_CLASSIFICATION	2.019463456473358E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9969826569128903	WITHOUT_CLASSIFICATION	0.0030173430871097114	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996070330766517	WITHOUT_CLASSIFICATION	3.9296692334839066E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.999853991320125	WITHOUT_CLASSIFICATION	1.460086798749405E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9996002753408657	WITHOUT_CLASSIFICATION	3.9972465913421125E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9996379233252305	WITHOUT_CLASSIFICATION	3.620766747694975E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9987289371368353	WITHOUT_CLASSIFICATION	0.001271062863164682	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9987289371368353	WITHOUT_CLASSIFICATION	0.001271062863164682	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999583341105564	WITHOUT_CLASSIFICATION	4.166588944360062E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999523999986433	WITHOUT_CLASSIFICATION	4.7600001356628736E-5	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995932074771549	WITHOUT_CLASSIFICATION	4.0679252284521206E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9997506968791773	WITHOUT_CLASSIFICATION	2.493031208227278E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9998937250907387	WITHOUT_CLASSIFICATION	1.0627490926135835E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999012987017196	WITHOUT_CLASSIFICATION	9.870129828032221E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998837038038412	WITHOUT_CLASSIFICATION	1.1629619615886873E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9996440734730038	WITHOUT_CLASSIFICATION	3.5592652699625046E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999875847955185	WITHOUT_CLASSIFICATION	1.241520448142185E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999935275246716	WITHOUT_CLASSIFICATION	6.472475328326805E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998745424169294	WITHOUT_CLASSIFICATION	1.2545758307063972E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999506106016719	WITHOUT_CLASSIFICATION	4.9389398328131476E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999002094582611	WITHOUT_CLASSIFICATION	9.979054173889547E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998906794551962	WITHOUT_CLASSIFICATION	1.0932054480383265E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999674562831535	WITHOUT_CLASSIFICATION	3.254371684639117E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.999924814174684	WITHOUT_CLASSIFICATION	7.518582531592296E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999660652372192	WITHOUT_CLASSIFICATION	3.393476278079173E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999625881292415	WITHOUT_CLASSIFICATION	3.741187075843348E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9987754253766914	WITHOUT_CLASSIFICATION	0.0012245746233085306	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9989229647320794	WITHOUT_CLASSIFICATION	0.0010770352679205484	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999374106609039	WITHOUT_CLASSIFICATION	6.258933909610064E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999545002581149	WITHOUT_CLASSIFICATION	4.549974188509138E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999587768999312	WITHOUT_CLASSIFICATION	4.122310006890309E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999531768114823	WITHOUT_CLASSIFICATION	4.6823188517728035E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998900791190621	WITHOUT_CLASSIFICATION	1.0992088093788525E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9998017019263572	WITHOUT_CLASSIFICATION	1.982980736428266E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999861425102824	WITHOUT_CLASSIFICATION	1.3857489717580869E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999009556015019	WITHOUT_CLASSIFICATION	9.904439849815908E-5	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999795619864529	WITHOUT_CLASSIFICATION	2.043801354704965E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.996718141014398	WITHOUT_CLASSIFICATION	0.0032818589856019615	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.999682386295534	WITHOUT_CLASSIFICATION	3.176137044661114E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999448741719574	WITHOUT_CLASSIFICATION	5.512582804253766E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999632409125156	WITHOUT_CLASSIFICATION	3.675908748433038E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999634186674079	WITHOUT_CLASSIFICATION	3.658133259201307E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999632409125156	WITHOUT_CLASSIFICATION	3.675908748433038E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9998817571579361	WITHOUT_CLASSIFICATION	1.1824284206377113E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9994223293073544	WITHOUT_CLASSIFICATION	5.776706926456574E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9994223293073544	WITHOUT_CLASSIFICATION	5.776706926456574E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9994223293073544	WITHOUT_CLASSIFICATION	5.776706926456574E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999964571946358	WITHOUT_CLASSIFICATION	3.5428053642784335E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999964571946358	WITHOUT_CLASSIFICATION	3.5428053642784335E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9995780704549718	WITHOUT_CLASSIFICATION	4.219295450281107E-4	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.999857993419911	WITHOUT_CLASSIFICATION	1.4200658008910405E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9998874677499426	WITHOUT_CLASSIFICATION	1.1253225005727485E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999881267730834	WITHOUT_CLASSIFICATION	1.1873226916684414E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999929212986285	WITHOUT_CLASSIFICATION	7.0787013714753495E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999951759609863	WITHOUT_CLASSIFICATION	4.824039013773689E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9997411950895702	WITHOUT_CLASSIFICATION	2.5880491042990964E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999217023631876	WITHOUT_CLASSIFICATION	7.829763681241806E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.999963524906188	WITHOUT_CLASSIFICATION	3.6475093811953864E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999765309918609	WITHOUT_CLASSIFICATION	2.3469008139062654E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999728322069816	WITHOUT_CLASSIFICATION	2.716779301834521E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9995307495392807	WITHOUT_CLASSIFICATION	4.692504607193386E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999857688094251	WITHOUT_CLASSIFICATION	1.4231190575008729E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999772241600309	WITHOUT_CLASSIFICATION	2.2775839969116853E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999318142676215	WITHOUT_CLASSIFICATION	6.818573237861889E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999579689904728	WITHOUT_CLASSIFICATION	4.203100952722906E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998398550926704	WITHOUT_CLASSIFICATION	1.601449073296169E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999642508013097	WITHOUT_CLASSIFICATION	3.5749198690341035E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999642508013097	WITHOUT_CLASSIFICATION	3.5749198690341035E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999657949795185	WITHOUT_CLASSIFICATION	3.420502048152143E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999747311085728	WITHOUT_CLASSIFICATION	2.5268891427169113E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999747311085728	WITHOUT_CLASSIFICATION	2.5268891427169113E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9998406654953921	WITHOUT_CLASSIFICATION	1.593345046079322E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999696753508601	WITHOUT_CLASSIFICATION	3.032464913976439E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999904195383073	WITHOUT_CLASSIFICATION	9.580461692702037E-6	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999613890995764	WITHOUT_CLASSIFICATION	3.861090042354392E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999831700937801	WITHOUT_CLASSIFICATION	1.6829906219901E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.999838248597995	WITHOUT_CLASSIFICATION	1.6175140200497918E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999118691547592	WITHOUT_CLASSIFICATION	8.813084524082573E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999795080298205	WITHOUT_CLASSIFICATION	2.049197017954289E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999577073814724	WITHOUT_CLASSIFICATION	4.229261852751007E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999935902008358	WITHOUT_CLASSIFICATION	6.4097991641846896E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999829873812354	WITHOUT_CLASSIFICATION	1.7012618764683682E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999236647748016	WITHOUT_CLASSIFICATION	7.633522519839756E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999923310101868	WITHOUT_CLASSIFICATION	7.668989813244517E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999816397891175	WITHOUT_CLASSIFICATION	1.836021088246179E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999217023631876	WITHOUT_CLASSIFICATION	7.829763681241806E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999443145366012	WITHOUT_CLASSIFICATION	5.5685463398963516E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999967155844097	WITHOUT_CLASSIFICATION	3.2844155903287016E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999967155844097	WITHOUT_CLASSIFICATION	3.2844155903287016E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999283947646066	WITHOUT_CLASSIFICATION	7.160523539335885E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9992740133544938	WITHOUT_CLASSIFICATION	7.259866455061925E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.999943567047591	WITHOUT_CLASSIFICATION	5.643295240899434E-5	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9998783625992087	WITHOUT_CLASSIFICATION	1.2163740079129357E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999950247614328	WITHOUT_CLASSIFICATION	4.975238567320597E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999820293626936	WITHOUT_CLASSIFICATION	1.7970637306371334E-5	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9996872470372251	WITHOUT_CLASSIFICATION	3.127529627748488E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9885174120295804	WITHOUT_CLASSIFICATION	0.011482587970419665	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9993347100753384	WITHOUT_CLASSIFICATION	6.652899246615893E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9995837522961181	WITHOUT_CLASSIFICATION	4.162477038819976E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9998418455058995	WITHOUT_CLASSIFICATION	1.5815449410055583E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9992252147550826	WITHOUT_CLASSIFICATION	7.747852449173078E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9965167670358754	WITHOUT_CLASSIFICATION	0.0034832329641246544	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999727807180356	WITHOUT_CLASSIFICATION	2.7219281964375972E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999945725188216	WITHOUT_CLASSIFICATION	5.427481178387129E-6	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9998701183481964	WITHOUT_CLASSIFICATION	1.2988165180362985E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999441633479595	WITHOUT_CLASSIFICATION	5.5836652040434773E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.999966757878695	WITHOUT_CLASSIFICATION	3.3242121304843325E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999878281228203	WITHOUT_CLASSIFICATION	1.2171877179673943E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998614966762451	WITHOUT_CLASSIFICATION	1.3850332375493584E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999741599910031	WITHOUT_CLASSIFICATION	2.584000899691396E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999150758526837	WITHOUT_CLASSIFICATION	8.49241473163474E-5	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999185044740269	WITHOUT_CLASSIFICATION	8.149552597310462E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.999997960985774	WITHOUT_CLASSIFICATION	2.0390142259751413E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999568938546409	WITHOUT_CLASSIFICATION	4.3106145359060147E-5	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9994026357590099	WITHOUT_CLASSIFICATION	5.973642409901303E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9982014302213958	WITHOUT_CLASSIFICATION	0.0017985697786042105	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999921641309194	WITHOUT_CLASSIFICATION	7.835869080586954E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999020348563387	WITHOUT_CLASSIFICATION	9.796514366141852E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9996539211484352	WITHOUT_CLASSIFICATION	3.4607885156483746E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.999817724084265	WITHOUT_CLASSIFICATION	1.8227591573520262E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9997955631942868	WITHOUT_CLASSIFICATION	2.044368057131806E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.830325964034047	WITHOUT_CLASSIFICATION	0.16967403596595287	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999739146100886	WITHOUT_CLASSIFICATION	2.6085389911469894E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9982014302213958	WITHOUT_CLASSIFICATION	0.0017985697786042105	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998978455990719	WITHOUT_CLASSIFICATION	1.0215440092810914E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999739146100886	WITHOUT_CLASSIFICATION	2.6085389911469894E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9995262060313385	WITHOUT_CLASSIFICATION	4.7379396866150205E-4	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999872581609615	WITHOUT_CLASSIFICATION	1.2741839038578267E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999759517783903	WITHOUT_CLASSIFICATION	2.4048221609686545E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9998566141504232	WITHOUT_CLASSIFICATION	1.4338584957683794E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9998762842678445	WITHOUT_CLASSIFICATION	1.2371573215551898E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999863957373299	WITHOUT_CLASSIFICATION	1.3604262670098395E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999863957373299	WITHOUT_CLASSIFICATION	1.3604262670098395E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999374853731032	WITHOUT_CLASSIFICATION	6.251462689679777E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999161028201421	WITHOUT_CLASSIFICATION	8.389717985784325E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999705877647225	WITHOUT_CLASSIFICATION	2.941223527759844E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999705877647225	WITHOUT_CLASSIFICATION	2.941223527759844E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999948953370916	WITHOUT_CLASSIFICATION	5.104662908313384E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999068723100685	WITHOUT_CLASSIFICATION	9.312768993158951E-5	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999454100053554	WITHOUT_CLASSIFICATION	5.458999464466098E-5	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9975791528566136	WITHOUT_CLASSIFICATION	0.0024208471433863495	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999938287818715	WITHOUT_CLASSIFICATION	6.171218128499073E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9998841681693653	WITHOUT_CLASSIFICATION	1.1583183063476789E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998882037398917	WITHOUT_CLASSIFICATION	1.1179626010820807E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999787470905698	WITHOUT_CLASSIFICATION	2.1252909430211787E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999807166117308	WITHOUT_CLASSIFICATION	1.9283388269143075E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999521614826592	WITHOUT_CLASSIFICATION	4.7838517340819406E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999518710861255	WITHOUT_CLASSIFICATION	4.812891387455228E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999191830569352	WITHOUT_CLASSIFICATION	8.081694306485037E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9997924091207595	WITHOUT_CLASSIFICATION	2.0759087924047232E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997094998987829	WITHOUT_CLASSIFICATION	2.90500101217123E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999669065243294	WITHOUT_CLASSIFICATION	3.3093475670527973E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.999812707974433	WITHOUT_CLASSIFICATION	1.8729202556688854E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999397515789746	WITHOUT_CLASSIFICATION	6.024842102535546E-5	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999824132893411	WITHOUT_CLASSIFICATION	1.75867106589824E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9986888158681281	WITHOUT_CLASSIFICATION	0.0013111841318719868	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9998117019609185	WITHOUT_CLASSIFICATION	1.8829803908144359E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9994670857871584	WITHOUT_CLASSIFICATION	5.329142128417045E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9994670857871584	WITHOUT_CLASSIFICATION	5.329142128417045E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999945585217009	WITHOUT_CLASSIFICATION	5.441478299080323E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999518028976506	WITHOUT_CLASSIFICATION	4.8197102349371673E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997604824438835	WITHOUT_CLASSIFICATION	2.3951755611637348E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998682705822245	WITHOUT_CLASSIFICATION	1.3172941777556262E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999570407573412	WITHOUT_CLASSIFICATION	4.29592426588282E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999484373244834	WITHOUT_CLASSIFICATION	5.156267551661071E-5	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9997926949492405	WITHOUT_CLASSIFICATION	2.0730505075960016E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.99994487070426	WITHOUT_CLASSIFICATION	5.512929574008191E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.99999989058249	WITHOUT_CLASSIFICATION	1.0941751004314958E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999994066434558	WITHOUT_CLASSIFICATION	5.933565442326244E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999942526558578	WITHOUT_CLASSIFICATION	5.7473441421735006E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9997962976799075	WITHOUT_CLASSIFICATION	2.037023200925406E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999882853063186	WITHOUT_CLASSIFICATION	1.1714693681486001E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.999924324255063	WITHOUT_CLASSIFICATION	7.567574493703444E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.999999065502133	WITHOUT_CLASSIFICATION	9.344978670374084E-7	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9997183393106159	WITHOUT_CLASSIFICATION	2.8166068938407314E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9995051483397965	WITHOUT_CLASSIFICATION	4.948516602033623E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9988596119573865	WITHOUT_CLASSIFICATION	0.0011403880426134562	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999910268800986	WITHOUT_CLASSIFICATION	8.973119901438113E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9997783090842447	WITHOUT_CLASSIFICATION	2.216909157552828E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999197847748788	WITHOUT_CLASSIFICATION	8.021522512129584E-5	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999672905916078	WITHOUT_CLASSIFICATION	3.270940839212466E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999995187151869	WITHOUT_CLASSIFICATION	4.812848131136376E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9994118049249153	WITHOUT_CLASSIFICATION	5.881950750848101E-4	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9900234263772852	WITHOUT_CLASSIFICATION	0.009976573622714778	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999977754630305	WITHOUT_CLASSIFICATION	2.224536969491874E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999793064522954	WITHOUT_CLASSIFICATION	2.069354770464558E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999716988050319	WITHOUT_CLASSIFICATION	2.8301194968098827E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998397081742624	WITHOUT_CLASSIFICATION	1.602918257377389E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999083276332246	WITHOUT_CLASSIFICATION	9.167236677537102E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999483778763169	WITHOUT_CLASSIFICATION	5.1622123683274466E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999861808364323	WITHOUT_CLASSIFICATION	1.3819163567634115E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999737786859534	WITHOUT_CLASSIFICATION	2.6221314046607545E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9998791955330223	WITHOUT_CLASSIFICATION	1.2080446697761324E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999585503532245	WITHOUT_CLASSIFICATION	4.144964677549044E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998766032913241	WITHOUT_CLASSIFICATION	1.2339670867592324E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9995412753620018	WITHOUT_CLASSIFICATION	4.5872463799827767E-4	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9987745507541005	WITHOUT_CLASSIFICATION	0.0012254492458995488	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9971499533843385	WITHOUT_CLASSIFICATION	0.0028500466156614313	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999943653123795	WITHOUT_CLASSIFICATION	5.63468762046425E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9988237601406308	WITHOUT_CLASSIFICATION	0.001176239859369253	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9988237601406308	WITHOUT_CLASSIFICATION	0.001176239859369253	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999620546080354	WITHOUT_CLASSIFICATION	3.794539196463214E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9997551697497036	WITHOUT_CLASSIFICATION	2.448302502964216E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999657721130165	WITHOUT_CLASSIFICATION	3.4227886983560137E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999064823721876	WITHOUT_CLASSIFICATION	9.351762781245862E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999949327189378	WITHOUT_CLASSIFICATION	5.067281062242596E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999466877944184	WITHOUT_CLASSIFICATION	5.331220558165874E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999665205844813	WITHOUT_CLASSIFICATION	3.347941551874527E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9994532769587522	WITHOUT_CLASSIFICATION	5.46723041247772E-4	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.999593343643245	WITHOUT_CLASSIFICATION	4.066563567548703E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999699010966561	WITHOUT_CLASSIFICATION	3.0098903344020652E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999706912100945	WITHOUT_CLASSIFICATION	2.930878990547268E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999813075027534	WITHOUT_CLASSIFICATION	1.8692497246575092E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999925114379942	WITHOUT_CLASSIFICATION	7.4885620058852925E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999875781069487	WITHOUT_CLASSIFICATION	1.2421893051200775E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999929860292531	WITHOUT_CLASSIFICATION	7.013970746941577E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999929071432982	WITHOUT_CLASSIFICATION	7.092856701795627E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999531433515051	WITHOUT_CLASSIFICATION	4.6856648494864484E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999485039389054	WITHOUT_CLASSIFICATION	5.149606109467492E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999496068261159	WITHOUT_CLASSIFICATION	5.039317388426162E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999446172712789	WITHOUT_CLASSIFICATION	5.538272872106383E-5	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999912707533594	WITHOUT_CLASSIFICATION	8.729246640507795E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999845918907019	WITHOUT_CLASSIFICATION	1.540810929818409E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999831334545567	WITHOUT_CLASSIFICATION	1.6866545443312486E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999981969127634	WITHOUT_CLASSIFICATION	1.8030872365711893E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999869086646822	WITHOUT_CLASSIFICATION	1.3091335317712079E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999859205547225	WITHOUT_CLASSIFICATION	1.4079445277586594E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999843036193433	WITHOUT_CLASSIFICATION	1.569638065674147E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999787212201111	WITHOUT_CLASSIFICATION	2.127877988890839E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999767228177322	WITHOUT_CLASSIFICATION	2.3277182267716596E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999211629091922	WITHOUT_CLASSIFICATION	7.883709080782809E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999971384913035	WITHOUT_CLASSIFICATION	2.8615086966219808E-6	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999626722004057	WITHOUT_CLASSIFICATION	3.732779959429887E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999806915719973	WITHOUT_CLASSIFICATION	1.930842800265135E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998766032913241	WITHOUT_CLASSIFICATION	1.2339670867592324E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9998487972973757	WITHOUT_CLASSIFICATION	1.5120270262413717E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999846981977231	WITHOUT_CLASSIFICATION	1.530180227692953E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999846981977231	WITHOUT_CLASSIFICATION	1.530180227692953E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999680554620565	WITHOUT_CLASSIFICATION	3.194453794343091E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999173249004816	WITHOUT_CLASSIFICATION	8.267509951849069E-5	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999788634672776	WITHOUT_CLASSIFICATION	2.113653272244837E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999841149229464	WITHOUT_CLASSIFICATION	1.5885077053561666E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999912965627155	WITHOUT_CLASSIFICATION	8.703437284569043E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999950903243737	WITHOUT_CLASSIFICATION	4.909675626281644E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.999963918705562	WITHOUT_CLASSIFICATION	3.608129443794502E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999786842531834	WITHOUT_CLASSIFICATION	2.1315746816648072E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999879755578709	WITHOUT_CLASSIFICATION	1.2024442129192912E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999116361502033	WITHOUT_CLASSIFICATION	8.836384979676584E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999610959732664	WITHOUT_CLASSIFICATION	3.890402673364638E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999516064076018	WITHOUT_CLASSIFICATION	4.8393592398086656E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999984451378227	WITHOUT_CLASSIFICATION	1.5548621774490537E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999310207605249	WITHOUT_CLASSIFICATION	6.897923947514562E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9998581149864033	WITHOUT_CLASSIFICATION	1.418850135967876E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9998474072494055	WITHOUT_CLASSIFICATION	1.525927505944907E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.999916174958953	WITHOUT_CLASSIFICATION	8.382504104698609E-5	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999527121039307	WITHOUT_CLASSIFICATION	4.7287896069356224E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9996525738806595	WITHOUT_CLASSIFICATION	3.474261193405371E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9998814851877271	WITHOUT_CLASSIFICATION	1.1851481227279206E-4	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999700872532316	WITHOUT_CLASSIFICATION	2.9912746768401894E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999738360137846	WITHOUT_CLASSIFICATION	2.616398621530494E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999898355884428	WITHOUT_CLASSIFICATION	1.0164411557150045E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999404532320998	WITHOUT_CLASSIFICATION	5.9546767900061364E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9998990764917025	WITHOUT_CLASSIFICATION	1.0092350829750474E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999829351686489	WITHOUT_CLASSIFICATION	1.70648313511338E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999407935117306	WITHOUT_CLASSIFICATION	5.920648826931972E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999681175735096	WITHOUT_CLASSIFICATION	3.188242649033026E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999674956410224	WITHOUT_CLASSIFICATION	3.250435897753608E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999883211835338	WITHOUT_CLASSIFICATION	1.1678816466241935E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999883211835338	WITHOUT_CLASSIFICATION	1.1678816466241935E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999737213044244	WITHOUT_CLASSIFICATION	2.6278695575681212E-5	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.999965047537341	WITHOUT_CLASSIFICATION	3.49524626590577E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999448744400011	WITHOUT_CLASSIFICATION	5.512555999890341E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999416856410662	WITHOUT_CLASSIFICATION	5.8314358933856816E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999404532320998	WITHOUT_CLASSIFICATION	5.9546767900061364E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9998990764917025	WITHOUT_CLASSIFICATION	1.0092350829750474E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999829351686489	WITHOUT_CLASSIFICATION	1.70648313511338E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999681175735096	WITHOUT_CLASSIFICATION	3.188242649033026E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999646095220205	WITHOUT_CLASSIFICATION	3.539047797949252E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999117969687542	WITHOUT_CLASSIFICATION	8.820303124582638E-5	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999597245459503	WITHOUT_CLASSIFICATION	4.027545404973598E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999847515135929	WITHOUT_CLASSIFICATION	1.524848640699213E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999835160275093	WITHOUT_CLASSIFICATION	1.6483972490647928E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999626352295221	WITHOUT_CLASSIFICATION	3.736477047793619E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.999956081273291	WITHOUT_CLASSIFICATION	4.3918726708860394E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998185616183746	WITHOUT_CLASSIFICATION	1.814383816253925E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999869620394337	WITHOUT_CLASSIFICATION	1.3037960566199692E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999905794471855	WITHOUT_CLASSIFICATION	9.42055281449123E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999154590832832	WITHOUT_CLASSIFICATION	8.454091671686084E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999994082677206	WITHOUT_CLASSIFICATION	5.917322794294244E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999338770939592	WITHOUT_CLASSIFICATION	6.612290604081952E-5	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999912505910071	WITHOUT_CLASSIFICATION	8.749408992965741E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999797864577702	WITHOUT_CLASSIFICATION	2.0213542229779134E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999958680382796	WITHOUT_CLASSIFICATION	4.131961720494612E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999935669397136	WITHOUT_CLASSIFICATION	6.433060286304746E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999489438650984	WITHOUT_CLASSIFICATION	5.1056134901705163E-5	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9998344161985563	WITHOUT_CLASSIFICATION	1.6558380144367636E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999416856410662	WITHOUT_CLASSIFICATION	5.8314358933856816E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999117969687542	WITHOUT_CLASSIFICATION	8.820303124582638E-5	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999597245459503	WITHOUT_CLASSIFICATION	4.027545404973598E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999835160275093	WITHOUT_CLASSIFICATION	1.6483972490647928E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999626352295221	WITHOUT_CLASSIFICATION	3.736477047793619E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.999956081273291	WITHOUT_CLASSIFICATION	4.3918726708860394E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998185616183746	WITHOUT_CLASSIFICATION	1.814383816253925E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999751501659259	WITHOUT_CLASSIFICATION	2.4849834074053465E-5	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9962403553225024	WITHOUT_CLASSIFICATION	0.003759644677497545	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999429659545217	WITHOUT_CLASSIFICATION	5.703404547832241E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999947067766843	WITHOUT_CLASSIFICATION	5.293223315668856E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998361591101924	WITHOUT_CLASSIFICATION	1.6384088980755777E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998361591101924	WITHOUT_CLASSIFICATION	1.6384088980755777E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999559963874343	WITHOUT_CLASSIFICATION	4.4003612565799685E-5	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999394769527236	WITHOUT_CLASSIFICATION	6.0523047276467215E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999786431713231	WITHOUT_CLASSIFICATION	2.1356828676901455E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999598799685332	WITHOUT_CLASSIFICATION	4.01200314667707E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999975878905776	WITHOUT_CLASSIFICATION	2.412109422467471E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999196710167363	WITHOUT_CLASSIFICATION	8.032898326366773E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999942302208507	WITHOUT_CLASSIFICATION	5.769779149384735E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999540070144701	WITHOUT_CLASSIFICATION	4.5992985529811916E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.999961458092375	WITHOUT_CLASSIFICATION	3.8541907624998056E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9998782542912504	WITHOUT_CLASSIFICATION	1.2174570874949115E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999158572557568	WITHOUT_CLASSIFICATION	8.414274424324789E-5	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999832610163895	WITHOUT_CLASSIFICATION	1.67389836105226E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997857945859198	WITHOUT_CLASSIFICATION	2.142054140802058E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9997759849936015	WITHOUT_CLASSIFICATION	2.2401500639844809E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999989297510959	WITHOUT_CLASSIFICATION	1.0702489040935127E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999555104243574	WITHOUT_CLASSIFICATION	4.448957564265096E-5	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.99996600375632	WITHOUT_CLASSIFICATION	3.399624368000348E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999726422690307	WITHOUT_CLASSIFICATION	2.7357730969313354E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9998652464503522	WITHOUT_CLASSIFICATION	1.3475354964770378E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999997195493964	WITHOUT_CLASSIFICATION	2.8045060360518187E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9979278818223692	WITHOUT_CLASSIFICATION	0.002072118177630683	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999910378544556	WITHOUT_CLASSIFICATION	8.962145544370272E-6	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999841012348487	WITHOUT_CLASSIFICATION	1.589876515126634E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999994905604615	WITHOUT_CLASSIFICATION	5.094395384959173E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999715007750397	WITHOUT_CLASSIFICATION	2.849922496027362E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9997353305331683	WITHOUT_CLASSIFICATION	2.64669466831677E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999994905604615	WITHOUT_CLASSIFICATION	5.094395384959173E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9997759849936015	WITHOUT_CLASSIFICATION	2.2401500639844809E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.999958338550052	WITHOUT_CLASSIFICATION	4.1661449948052375E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998389988319258	WITHOUT_CLASSIFICATION	1.6100116807420803E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999887737378559	WITHOUT_CLASSIFICATION	1.1226262144120471E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9992227842576026	WITHOUT_CLASSIFICATION	7.772157423973515E-4	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999980291322912	WITHOUT_CLASSIFICATION	1.9708677086973773E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.999983987691596	WITHOUT_CLASSIFICATION	1.601230840390474E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9998854130551211	WITHOUT_CLASSIFICATION	1.1458694487889262E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999954048500738	WITHOUT_CLASSIFICATION	4.595149926303258E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9665839230107512	WITHOUT_CLASSIFICATION	0.0334160769892487	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.998667281337608	WITHOUT_CLASSIFICATION	0.0013327186623920445	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9993722067644016	WITHOUT_CLASSIFICATION	6.277932355984545E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999671728655903	WITHOUT_CLASSIFICATION	3.2827134409725194E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9997928743257773	WITHOUT_CLASSIFICATION	2.0712567422262611E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999741424762841	WITHOUT_CLASSIFICATION	2.5857523715891018E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999296175045552	WITHOUT_CLASSIFICATION	7.038249544478313E-5	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9997953746032255	WITHOUT_CLASSIFICATION	2.0462539677460216E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998669921568536	WITHOUT_CLASSIFICATION	1.330078431464403E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9988880471919098	WITHOUT_CLASSIFICATION	0.001111952808090171	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999212717435	WITHOUT_CLASSIFICATION	7.872825644312517E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.999917784499017	WITHOUT_CLASSIFICATION	8.221550098298971E-5	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999986152237547	WITHOUT_CLASSIFICATION	1.3847762452617927E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9997260457685078	WITHOUT_CLASSIFICATION	2.739542314922714E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999350480088686	WITHOUT_CLASSIFICATION	6.495199113138032E-5	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999858195582692	WITHOUT_CLASSIFICATION	1.4180441730921736E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.999999508441321	WITHOUT_CLASSIFICATION	4.915586790020968E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9998030258820252	WITHOUT_CLASSIFICATION	1.9697411797492908E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.998512371215631	WITHOUT_CLASSIFICATION	0.0014876287843690408	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999810255348	WITHOUT_CLASSIFICATION	1.897446520011242E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9998310784670696	WITHOUT_CLASSIFICATION	1.689215329304375E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999621879808688	WITHOUT_CLASSIFICATION	3.781201913116846E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997857945859198	WITHOUT_CLASSIFICATION	2.142054140802058E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999512381500392	WITHOUT_CLASSIFICATION	4.8761849960744036E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9994039546503612	WITHOUT_CLASSIFICATION	5.96045349638766E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999433399310517	WITHOUT_CLASSIFICATION	5.66600689483855E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999447229363104	WITHOUT_CLASSIFICATION	5.527706368950579E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999447229363104	WITHOUT_CLASSIFICATION	5.527706368950579E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999641526622429	WITHOUT_CLASSIFICATION	3.584733775714357E-5	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999892794176516	WITHOUT_CLASSIFICATION	1.0720582348416338E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999874358047675	WITHOUT_CLASSIFICATION	1.2564195232570372E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999625595295085	WITHOUT_CLASSIFICATION	3.7440470491484206E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9995641748284337	WITHOUT_CLASSIFICATION	4.358251715662746E-4	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999849329494074	WITHOUT_CLASSIFICATION	1.5067050592537072E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999227509129661	WITHOUT_CLASSIFICATION	7.724908703388603E-5	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999943651625092	WITHOUT_CLASSIFICATION	5.634837490827701E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9996531695278302	WITHOUT_CLASSIFICATION	3.468304721697539E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999373263768184	WITHOUT_CLASSIFICATION	6.267362318150672E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999834725789806	WITHOUT_CLASSIFICATION	1.6527421019396914E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999220983659473	WITHOUT_CLASSIFICATION	7.790163405272142E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998999306532718	WITHOUT_CLASSIFICATION	1.0006934672824104E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999763836869087	WITHOUT_CLASSIFICATION	2.3616313091236733E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999959407805699	WITHOUT_CLASSIFICATION	4.059219430069579E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999959407805699	WITHOUT_CLASSIFICATION	4.059219430069579E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998788287451745	WITHOUT_CLASSIFICATION	1.211712548253896E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998788287451745	WITHOUT_CLASSIFICATION	1.211712548253896E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999965819545352	WITHOUT_CLASSIFICATION	3.418045464915481E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9988997915444744	WITHOUT_CLASSIFICATION	0.0011002084555256212	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999186770643528	WITHOUT_CLASSIFICATION	8.132293564721192E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999983892896	WITHOUT_CLASSIFICATION	1.610710399971607E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9997803499005986	WITHOUT_CLASSIFICATION	2.1965009940129451E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999310387517658	WITHOUT_CLASSIFICATION	6.896124823419109E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999926806211996	WITHOUT_CLASSIFICATION	7.319378800387658E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999220983659473	WITHOUT_CLASSIFICATION	7.790163405272142E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998999306532718	WITHOUT_CLASSIFICATION	1.0006934672824104E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9998146083844909	WITHOUT_CLASSIFICATION	1.853916155091082E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999578889302784	WITHOUT_CLASSIFICATION	4.211106972165262E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9981991202657414	WITHOUT_CLASSIFICATION	0.001800879734258528	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999496224138664	WITHOUT_CLASSIFICATION	5.037758613360176E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999943324722782	WITHOUT_CLASSIFICATION	5.667527721852119E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9982989218427184	WITHOUT_CLASSIFICATION	0.001701078157281561	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9998850823121992	WITHOUT_CLASSIFICATION	1.1491768780087067E-4	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9998850823121992	WITHOUT_CLASSIFICATION	1.1491768780087067E-4	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999676529371679	WITHOUT_CLASSIFICATION	3.234706283205481E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999911074698189	WITHOUT_CLASSIFICATION	8.892530181124154E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9997324495962314	WITHOUT_CLASSIFICATION	2.6755040376853046E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.999282127102135	WITHOUT_CLASSIFICATION	7.178728978648861E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998994401905912	WITHOUT_CLASSIFICATION	1.0055980940881653E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9991342659028282	WITHOUT_CLASSIFICATION	8.657340971717971E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999774174620437	WITHOUT_CLASSIFICATION	2.258253795621011E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999887584048236	WITHOUT_CLASSIFICATION	1.1241595176346145E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9997253711935109	WITHOUT_CLASSIFICATION	2.746288064890571E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999979131762057	WITHOUT_CLASSIFICATION	2.0868237943246205E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999985616893448	WITHOUT_CLASSIFICATION	1.4383106553322358E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9995427825303689	WITHOUT_CLASSIFICATION	4.572174696310637E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999914655007371	WITHOUT_CLASSIFICATION	8.534499262784621E-6	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.999910218762185	WITHOUT_CLASSIFICATION	8.97812378150708E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999865643687932	WITHOUT_CLASSIFICATION	1.3435631206747282E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999881598911976	WITHOUT_CLASSIFICATION	1.184010880241289E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999781471701084	WITHOUT_CLASSIFICATION	2.1852829891560122E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9998962916864149	WITHOUT_CLASSIFICATION	1.0370831358507543E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9995382976406324	WITHOUT_CLASSIFICATION	4.617023593675723E-4	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999730876775822	WITHOUT_CLASSIFICATION	2.6912322417814654E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9911619305018659	WITHOUT_CLASSIFICATION	0.008838069498134215	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999219248947505	WITHOUT_CLASSIFICATION	7.807510524957994E-5	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9997205341390191	WITHOUT_CLASSIFICATION	2.794658609809298E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999427819688558	WITHOUT_CLASSIFICATION	5.721803114428524E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.99996908479713	WITHOUT_CLASSIFICATION	3.09152028699339E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9998590015848605	WITHOUT_CLASSIFICATION	1.4099841513943466E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.99988532469238	WITHOUT_CLASSIFICATION	1.1467530762006955E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999545479198974	WITHOUT_CLASSIFICATION	4.545208010265849E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.999874252243425	WITHOUT_CLASSIFICATION	1.257477565749904E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999768517827776	WITHOUT_CLASSIFICATION	2.314821722237226E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999787341922507	WITHOUT_CLASSIFICATION	2.126580774929585E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999161015467322	WITHOUT_CLASSIFICATION	8.389845326789967E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9994039546503612	WITHOUT_CLASSIFICATION	5.96045349638766E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999545479198974	WITHOUT_CLASSIFICATION	4.545208010265849E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999890768088029	WITHOUT_CLASSIFICATION	1.092319119714586E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999462878984394	WITHOUT_CLASSIFICATION	5.371210156057981E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9992891464559311	WITHOUT_CLASSIFICATION	7.108535440687609E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9992143215567865	WITHOUT_CLASSIFICATION	7.856784432136166E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9992143215567865	WITHOUT_CLASSIFICATION	7.856784432136166E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999960266714955	WITHOUT_CLASSIFICATION	3.973328504556394E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999958103990707	WITHOUT_CLASSIFICATION	4.189600929291662E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.999969391639797	WITHOUT_CLASSIFICATION	3.0608360203007614E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999994040666196	WITHOUT_CLASSIFICATION	5.95933380467549E-7	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.999918053502148	WITHOUT_CLASSIFICATION	8.194649785192118E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9998577423752512	WITHOUT_CLASSIFICATION	1.422576247488699E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999986846942183	WITHOUT_CLASSIFICATION	1.315305781710056E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.99808215129868	WITHOUT_CLASSIFICATION	0.0019178487013199923	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999638709274513	WITHOUT_CLASSIFICATION	3.612907254866406E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999638709274513	WITHOUT_CLASSIFICATION	3.612907254866406E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999596884859836	WITHOUT_CLASSIFICATION	4.031151401631463E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999454781989033	WITHOUT_CLASSIFICATION	5.452180109663214E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999970067440901	WITHOUT_CLASSIFICATION	2.993255909816704E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999145236460175	WITHOUT_CLASSIFICATION	8.54763539825227E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9996898740478286	WITHOUT_CLASSIFICATION	3.101259521713377E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999596046189718	WITHOUT_CLASSIFICATION	4.039538102814371E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999996512009032	WITHOUT_CLASSIFICATION	3.4879909676001646E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999949041631092	WITHOUT_CLASSIFICATION	5.095836890810964E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999760032948672	WITHOUT_CLASSIFICATION	2.3996705132751825E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9852872409018881	WITHOUT_CLASSIFICATION	0.014712759098111965	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999830138483295	WITHOUT_CLASSIFICATION	1.6986151670450955E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999825345910749	WITHOUT_CLASSIFICATION	1.7465408925141503E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999695875397615	WITHOUT_CLASSIFICATION	3.04124602384505E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999831793945105	WITHOUT_CLASSIFICATION	1.6820605489506536E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999831793945105	WITHOUT_CLASSIFICATION	1.6820605489506536E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9997579426735385	WITHOUT_CLASSIFICATION	2.420573264615955E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998185616183746	WITHOUT_CLASSIFICATION	1.814383816253925E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9852872409018881	WITHOUT_CLASSIFICATION	0.014712759098111965	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.999989413555516	WITHOUT_CLASSIFICATION	1.0586444483969123E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9997755314836954	WITHOUT_CLASSIFICATION	2.2446851630477323E-4	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999828667823824	WITHOUT_CLASSIFICATION	1.7133217617678062E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999341420433103	WITHOUT_CLASSIFICATION	6.585795668965288E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9997459648427804	WITHOUT_CLASSIFICATION	2.5403515721957574E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999571550605173	WITHOUT_CLASSIFICATION	4.284493948264533E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999800943666758	WITHOUT_CLASSIFICATION	1.990563332429143E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9994039546503612	WITHOUT_CLASSIFICATION	5.96045349638766E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999318142676215	WITHOUT_CLASSIFICATION	6.818573237861889E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9998047622460167	WITHOUT_CLASSIFICATION	1.952377539833739E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9998977266697325	WITHOUT_CLASSIFICATION	1.0227333026745874E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999843910226728	WITHOUT_CLASSIFICATION	1.560897732720958E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999673853296297	WITHOUT_CLASSIFICATION	3.261467037029919E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999954375796926	WITHOUT_CLASSIFICATION	4.562420307462558E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9998512445342143	WITHOUT_CLASSIFICATION	1.487554657857718E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.999820995082836	WITHOUT_CLASSIFICATION	1.790049171640859E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9996613872138868	WITHOUT_CLASSIFICATION	3.3861278611327887E-4	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9991991580833528	WITHOUT_CLASSIFICATION	8.008419166470888E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999493366961215	WITHOUT_CLASSIFICATION	5.066330387846493E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998188011292699	WITHOUT_CLASSIFICATION	1.8119887073018477E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9995891380071865	WITHOUT_CLASSIFICATION	4.1086199281350577E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8686612145866554	WITHOUT_CLASSIFICATION	0.13133878541334462	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9972028102261005	WITHOUT_CLASSIFICATION	0.002797189773899465	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.999985437676289	WITHOUT_CLASSIFICATION	1.4562323710862436E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.999981808396697	WITHOUT_CLASSIFICATION	1.819160330299349E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999870509643891	WITHOUT_CLASSIFICATION	1.2949035611028992E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9992699357912248	WITHOUT_CLASSIFICATION	7.300642087752148E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999571863806147	WITHOUT_CLASSIFICATION	4.2813619385344966E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999887656507721	WITHOUT_CLASSIFICATION	1.123434922791174E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999629470450485	WITHOUT_CLASSIFICATION	3.70529549514412E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999960266714955	WITHOUT_CLASSIFICATION	3.973328504556394E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999436684856167	WITHOUT_CLASSIFICATION	5.633151438341916E-5	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.999922808574272	WITHOUT_CLASSIFICATION	7.719142572798856E-5	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.999988841293249	WITHOUT_CLASSIFICATION	1.115870675098895E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9953230773699573	WITHOUT_CLASSIFICATION	0.004676922630042684	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9979346120593702	WITHOUT_CLASSIFICATION	0.002065387940629792	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9966185384825463	WITHOUT_CLASSIFICATION	0.003381461517453609	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999850047447503	WITHOUT_CLASSIFICATION	1.4995255249750558E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9996704951804213	WITHOUT_CLASSIFICATION	3.295048195787047E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999969326648146	WITHOUT_CLASSIFICATION	3.0673351854496994E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999637386662544	WITHOUT_CLASSIFICATION	3.626133374557532E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997303892832909	WITHOUT_CLASSIFICATION	2.696107167089758E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999292523058632	WITHOUT_CLASSIFICATION	7.074769413681078E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.999986759316916	WITHOUT_CLASSIFICATION	1.3240683084004459E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9998960518793492	WITHOUT_CLASSIFICATION	1.03948120650766E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999995433768162	WITHOUT_CLASSIFICATION	4.5662318386536917E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.998789255684584	WITHOUT_CLASSIFICATION	0.0012107443154159565	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.99986681742229	WITHOUT_CLASSIFICATION	1.3318257771010035E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9729249124660718	WITHOUT_CLASSIFICATION	0.027075087533928156	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9996478805948719	WITHOUT_CLASSIFICATION	3.521194051281226E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9986322835227732	WITHOUT_CLASSIFICATION	0.0013677164772268181	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9992738729549189	WITHOUT_CLASSIFICATION	7.261270450811999E-4	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9977829583400631	WITHOUT_CLASSIFICATION	0.0022170416599367896	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999987089567987	WITHOUT_CLASSIFICATION	1.291043201405297E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999917575328173	WITHOUT_CLASSIFICATION	8.242467182733795E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9996343435803432	WITHOUT_CLASSIFICATION	3.656564196568037E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9996343435803432	WITHOUT_CLASSIFICATION	3.656564196568037E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9996343435803432	WITHOUT_CLASSIFICATION	3.656564196568037E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999370988471942	WITHOUT_CLASSIFICATION	6.290115280572792E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999088279182784	WITHOUT_CLASSIFICATION	9.117208172163953E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999360945068472	WITHOUT_CLASSIFICATION	6.390549315285334E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998891716650179	WITHOUT_CLASSIFICATION	1.1082833498219085E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998891716650179	WITHOUT_CLASSIFICATION	1.1082833498219085E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9996055999978644	WITHOUT_CLASSIFICATION	3.9440000213563205E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9998181785890768	WITHOUT_CLASSIFICATION	1.8182141092307717E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999728157667944	WITHOUT_CLASSIFICATION	2.718423320569451E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999840650718952	WITHOUT_CLASSIFICATION	1.5934928104762064E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999533873134651	WITHOUT_CLASSIFICATION	4.661268653480549E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999519711856943	WITHOUT_CLASSIFICATION	4.802881430561103E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9998682276788206	WITHOUT_CLASSIFICATION	1.317723211793523E-4	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.999936387674296	WITHOUT_CLASSIFICATION	6.361232570399458E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.99999347539042	WITHOUT_CLASSIFICATION	6.524609579913127E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999969713494216	WITHOUT_CLASSIFICATION	3.0286505783958804E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.999969713494216	WITHOUT_CLASSIFICATION	3.0286505783958804E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999729502472067	WITHOUT_CLASSIFICATION	2.7049752793373713E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9994950252554932	WITHOUT_CLASSIFICATION	5.049747445068465E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999488057911013	WITHOUT_CLASSIFICATION	5.119420889856012E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9998676136313525	WITHOUT_CLASSIFICATION	1.3238636864763799E-4	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9998833879253067	WITHOUT_CLASSIFICATION	1.1661207469323353E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999971092388582	WITHOUT_CLASSIFICATION	2.8907611418678673E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999382573209771	WITHOUT_CLASSIFICATION	6.174267902291849E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.999943799518261	WITHOUT_CLASSIFICATION	5.620048173892703E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9998936899131287	WITHOUT_CLASSIFICATION	1.063100868713109E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998973632700076	WITHOUT_CLASSIFICATION	1.026367299924367E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9991652825935313	WITHOUT_CLASSIFICATION	8.347174064687782E-4	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.999965715533592	WITHOUT_CLASSIFICATION	3.428446640799478E-5	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999892873041831	WITHOUT_CLASSIFICATION	1.071269581680593E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9998452435062849	WITHOUT_CLASSIFICATION	1.5475649371509198E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999502220154625	WITHOUT_CLASSIFICATION	4.977798453752964E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999666318146602	WITHOUT_CLASSIFICATION	3.3368185339753124E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9996687999567655	WITHOUT_CLASSIFICATION	3.3120004323444817E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.999976988778396	WITHOUT_CLASSIFICATION	2.301122160396263E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998538374378723	WITHOUT_CLASSIFICATION	1.4616256212764215E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9998469112551565	WITHOUT_CLASSIFICATION	1.5308874484347873E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999591787731493	WITHOUT_CLASSIFICATION	4.082122685055277E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999275327383346	WITHOUT_CLASSIFICATION	7.246726166545894E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.999943861445293	WITHOUT_CLASSIFICATION	5.613855470706752E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9993116326569763	WITHOUT_CLASSIFICATION	6.883673430237327E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9998881767799632	WITHOUT_CLASSIFICATION	1.1182322003678254E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999657217590465	WITHOUT_CLASSIFICATION	3.427824095351743E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999437588378192	WITHOUT_CLASSIFICATION	5.6241162180806225E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999689150706849	WITHOUT_CLASSIFICATION	3.108492931508886E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999325090196223	WITHOUT_CLASSIFICATION	6.74909803777635E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999889916951954	WITHOUT_CLASSIFICATION	1.100830480451988E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999650069194731	WITHOUT_CLASSIFICATION	3.4993080526985134E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999340148076854	WITHOUT_CLASSIFICATION	6.598519231458644E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9998596694324013	WITHOUT_CLASSIFICATION	1.403305675985751E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9996342759104496	WITHOUT_CLASSIFICATION	3.6572408955036874E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.999951506949774	WITHOUT_CLASSIFICATION	4.849305022614421E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999559304691504	WITHOUT_CLASSIFICATION	4.4069530849596175E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999573482395948	WITHOUT_CLASSIFICATION	4.265176040515302E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999357410431422	WITHOUT_CLASSIFICATION	6.425895685782491E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999667703901404	WITHOUT_CLASSIFICATION	3.3229609859547604E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999571511647923	WITHOUT_CLASSIFICATION	4.2848835207722685E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999424226779688	WITHOUT_CLASSIFICATION	5.757732203111391E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999669910895723	WITHOUT_CLASSIFICATION	3.3008910427611426E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999829212929329	WITHOUT_CLASSIFICATION	1.7078707067112276E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9998841946196607	WITHOUT_CLASSIFICATION	1.1580538033928907E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999733167772961	WITHOUT_CLASSIFICATION	2.6683222703910362E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999247728694959	WITHOUT_CLASSIFICATION	7.522713050402157E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999902830005086	WITHOUT_CLASSIFICATION	9.716999491443098E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999863343097888	WITHOUT_CLASSIFICATION	1.3665690211120666E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999979193917159	WITHOUT_CLASSIFICATION	2.0806082841102475E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999882233250432	WITHOUT_CLASSIFICATION	1.177667495669844E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999724223333618	WITHOUT_CLASSIFICATION	2.7577666638184383E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9996776224980667	WITHOUT_CLASSIFICATION	3.2237750193328155E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999687649296308	WITHOUT_CLASSIFICATION	3.123507036922455E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999940208427229	WITHOUT_CLASSIFICATION	5.979157277001624E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999940208427229	WITHOUT_CLASSIFICATION	5.979157277001624E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9998331910182809	WITHOUT_CLASSIFICATION	1.668089817191172E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9998653075300421	WITHOUT_CLASSIFICATION	1.3469246995794266E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9964236941510592	WITHOUT_CLASSIFICATION	0.003576305848940793	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.992860363324861	WITHOUT_CLASSIFICATION	0.007139636675138893	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999393658531668	WITHOUT_CLASSIFICATION	6.0634146833294915E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9998454673423676	WITHOUT_CLASSIFICATION	1.5453265763248005E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9998378309011444	WITHOUT_CLASSIFICATION	1.6216909885554643E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999681824687877	WITHOUT_CLASSIFICATION	3.181753121231538E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.999966435996915	WITHOUT_CLASSIFICATION	3.356400308491287E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9996776739412476	WITHOUT_CLASSIFICATION	3.223260587524424E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999815139708457	WITHOUT_CLASSIFICATION	1.848602915434851E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999750404979112	WITHOUT_CLASSIFICATION	2.495950208880047E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999910370020807	WITHOUT_CLASSIFICATION	8.962997919339607E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9998667627894106	WITHOUT_CLASSIFICATION	1.332372105895099E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999550678949638	WITHOUT_CLASSIFICATION	4.493210503622058E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9998144448224385	WITHOUT_CLASSIFICATION	1.855551775613813E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999456790806931	WITHOUT_CLASSIFICATION	5.4320919306950987E-5	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999426054553773	WITHOUT_CLASSIFICATION	5.739454462257404E-5	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9997485596269103	WITHOUT_CLASSIFICATION	2.514403730897387E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999506280484861	WITHOUT_CLASSIFICATION	4.9371951513990604E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999445606235123	WITHOUT_CLASSIFICATION	5.5439376487567205E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999456790806931	WITHOUT_CLASSIFICATION	5.4320919306950987E-5	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9856900380818672	WITHOUT_CLASSIFICATION	0.014309961918132767	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9856900380818672	WITHOUT_CLASSIFICATION	0.014309961918132767	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999316104501925	WITHOUT_CLASSIFICATION	6.838954980742482E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998892247647397	WITHOUT_CLASSIFICATION	1.1077523526021086E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999223359010719	WITHOUT_CLASSIFICATION	7.766409892814165E-5	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999759323635015	WITHOUT_CLASSIFICATION	2.4067636498494012E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999926535640095	WITHOUT_CLASSIFICATION	7.346435990577465E-6	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7730306784730924	WITHOUT_CLASSIFICATION	0.22696932152690766	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.999139502676664	WITHOUT_CLASSIFICATION	8.604973233361381E-4	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9855429241393329	WITHOUT_CLASSIFICATION	0.01445707586066721	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999720697668312	WITHOUT_CLASSIFICATION	2.7930233168812036E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9996008307634932	WITHOUT_CLASSIFICATION	3.991692365068858E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9996006514410424	WITHOUT_CLASSIFICATION	3.993485589576477E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9996978943654923	WITHOUT_CLASSIFICATION	3.0210563450775016E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998573184415583	WITHOUT_CLASSIFICATION	1.42681558441533E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9998886666354819	WITHOUT_CLASSIFICATION	1.1133336451804278E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9991213093832797	WITHOUT_CLASSIFICATION	8.786906167202828E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998871582843463	WITHOUT_CLASSIFICATION	1.1284171565370719E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9991331719367289	WITHOUT_CLASSIFICATION	8.66828063271157E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999507665856002	WITHOUT_CLASSIFICATION	4.9233414399696945E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.999978339234039	WITHOUT_CLASSIFICATION	2.1660765960895292E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999669530260092	WITHOUT_CLASSIFICATION	3.304697399069763E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9998079585429861	WITHOUT_CLASSIFICATION	1.9204145701384354E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999929965273451	WITHOUT_CLASSIFICATION	7.003472654893336E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999292875244945	WITHOUT_CLASSIFICATION	7.07124755055844E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999295007784407	WITHOUT_CLASSIFICATION	7.049922155931959E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999294306726585	WITHOUT_CLASSIFICATION	7.05693273415555E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999929754766421	WITHOUT_CLASSIFICATION	7.024523357898278E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999294463836385	WITHOUT_CLASSIFICATION	7.055361636151071E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999746227808882	WITHOUT_CLASSIFICATION	2.537721911182355E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9996883686388884	WITHOUT_CLASSIFICATION	3.116313611115679E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.99020990074112	WITHOUT_CLASSIFICATION	0.009790099258880013	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9966190483021574	WITHOUT_CLASSIFICATION	0.0033809516978425256	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9954439135978272	WITHOUT_CLASSIFICATION	0.004556086402172712	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9988381789746434	WITHOUT_CLASSIFICATION	0.0011618210253565404	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9995849597887685	WITHOUT_CLASSIFICATION	4.1504021123147045E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9995849597887685	WITHOUT_CLASSIFICATION	4.1504021123147045E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999034810114062	WITHOUT_CLASSIFICATION	9.651898859366445E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9864340193017328	WITHOUT_CLASSIFICATION	0.01356598069826732	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9960628254848949	WITHOUT_CLASSIFICATION	0.00393717451510505	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9924115595135394	WITHOUT_CLASSIFICATION	0.007588440486460568	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998463094490901	WITHOUT_CLASSIFICATION	1.536905509098898E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9979129304576413	WITHOUT_CLASSIFICATION	0.0020870695423587313	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9960628254848949	WITHOUT_CLASSIFICATION	0.00393717451510505	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9949233726858393	WITHOUT_CLASSIFICATION	0.005076627314160715	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9997576716681296	WITHOUT_CLASSIFICATION	2.4232833187046054E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999158097284723	WITHOUT_CLASSIFICATION	8.419027152782173E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999309139301091	WITHOUT_CLASSIFICATION	6.908606989093207E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999913445236972	WITHOUT_CLASSIFICATION	8.655476302858854E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999774217383287	WITHOUT_CLASSIFICATION	2.2578261671263453E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999774217383287	WITHOUT_CLASSIFICATION	2.2578261671263453E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9998867079240064	WITHOUT_CLASSIFICATION	1.1329207599362526E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9979963730841954	WITHOUT_CLASSIFICATION	0.0020036269158045317	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9992618577929132	WITHOUT_CLASSIFICATION	7.381422070868336E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9996253662383615	WITHOUT_CLASSIFICATION	3.7463376163845963E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9995224150289087	WITHOUT_CLASSIFICATION	4.7758497109137124E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999158465680096	WITHOUT_CLASSIFICATION	8.415343199040916E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9916175847404192	WITHOUT_CLASSIFICATION	0.008382415259580837	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9995382444097758	WITHOUT_CLASSIFICATION	4.61755590224204E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9985852776831002	WITHOUT_CLASSIFICATION	0.0014147223168998065	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9998487456273014	WITHOUT_CLASSIFICATION	1.512543726985892E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999662465422275	WITHOUT_CLASSIFICATION	3.3753457772348464E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9994187444375641	WITHOUT_CLASSIFICATION	5.812555624360312E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.999392779115367	WITHOUT_CLASSIFICATION	6.072208846329899E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999869943332744	WITHOUT_CLASSIFICATION	1.3005666725693096E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9996132474534006	WITHOUT_CLASSIFICATION	3.867525465994366E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999360737101374	WITHOUT_CLASSIFICATION	6.392628986255973E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.999957501672107	WITHOUT_CLASSIFICATION	4.249832789302637E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.999824954572811	WITHOUT_CLASSIFICATION	1.7504542718906537E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.97914151178189	WITHOUT_CLASSIFICATION	0.020858488218110077	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9996133443167858	WITHOUT_CLASSIFICATION	3.866556832142117E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.97914151178189	WITHOUT_CLASSIFICATION	0.020858488218110077	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9997030670787207	WITHOUT_CLASSIFICATION	2.9693292127929577E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9996133443167858	WITHOUT_CLASSIFICATION	3.866556832142117E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8883876638459998	WITHOUT_CLASSIFICATION	0.11161233615400028	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9997397981092359	WITHOUT_CLASSIFICATION	2.6020189076415894E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9985227519332803	WITHOUT_CLASSIFICATION	0.0014772480667196279	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.999888453399303	WITHOUT_CLASSIFICATION	1.115466006970078E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999364240904022	WITHOUT_CLASSIFICATION	6.357590959787719E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998871582843463	WITHOUT_CLASSIFICATION	1.1284171565370719E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999507665856002	WITHOUT_CLASSIFICATION	4.9233414399696945E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.999978339234039	WITHOUT_CLASSIFICATION	2.1660765960895292E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999669530260092	WITHOUT_CLASSIFICATION	3.304697399069763E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9998079585429861	WITHOUT_CLASSIFICATION	1.9204145701384354E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999292151054107	WITHOUT_CLASSIFICATION	7.078489458940167E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.999929853130989	WITHOUT_CLASSIFICATION	7.014686901099966E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999929754766421	WITHOUT_CLASSIFICATION	7.024523357898278E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.999838684132726	WITHOUT_CLASSIFICATION	1.6131586727402813E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9995849597887685	WITHOUT_CLASSIFICATION	4.1504021123147045E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9995849597887685	WITHOUT_CLASSIFICATION	4.1504021123147045E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9960628254848949	WITHOUT_CLASSIFICATION	0.00393717451510505	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998463094490901	WITHOUT_CLASSIFICATION	1.536905509098898E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9979129304576413	WITHOUT_CLASSIFICATION	0.0020870695423587313	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9960628254848949	WITHOUT_CLASSIFICATION	0.00393717451510505	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9949233726858393	WITHOUT_CLASSIFICATION	0.005076627314160715	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9998601775450188	WITHOUT_CLASSIFICATION	1.3982245498124734E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999293953385973	WITHOUT_CLASSIFICATION	7.060466140270129E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.99998471099733	WITHOUT_CLASSIFICATION	1.5289002670025536E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9986011132139787	WITHOUT_CLASSIFICATION	0.001398886786021369	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.991882198454001	WITHOUT_CLASSIFICATION	0.008117801545999006	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9987151217949566	WITHOUT_CLASSIFICATION	0.0012848782050433464	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998931030425809	WITHOUT_CLASSIFICATION	1.0689695741903435E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9970520954784629	WITHOUT_CLASSIFICATION	0.002947904521537105	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999158097284723	WITHOUT_CLASSIFICATION	8.419027152782173E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999774217383287	WITHOUT_CLASSIFICATION	2.2578261671263453E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999774217383287	WITHOUT_CLASSIFICATION	2.2578261671263453E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9925348124465312	WITHOUT_CLASSIFICATION	0.007465187553468783	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9988815245405025	WITHOUT_CLASSIFICATION	0.0011184754594975174	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998122671846738	WITHOUT_CLASSIFICATION	1.8773281532624323E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999309139301091	WITHOUT_CLASSIFICATION	6.908606989093207E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9987520278355556	WITHOUT_CLASSIFICATION	0.0012479721644444485	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999002083367348	WITHOUT_CLASSIFICATION	9.979166326520072E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9980399711649499	WITHOUT_CLASSIFICATION	0.0019600288350500473	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999399327622298	WITHOUT_CLASSIFICATION	6.006723777023709E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999667533022936	WITHOUT_CLASSIFICATION	3.324669770649169E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999849450290432	WITHOUT_CLASSIFICATION	1.5054970956784243E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9985026214341339	WITHOUT_CLASSIFICATION	0.0014973785658660508	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9997049609969658	WITHOUT_CLASSIFICATION	2.9503900303425436E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999393529649668	WITHOUT_CLASSIFICATION	6.064703503313143E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999527013033793	WITHOUT_CLASSIFICATION	4.7298696620651145E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999614058708597	WITHOUT_CLASSIFICATION	3.859412914039328E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999614058708597	WITHOUT_CLASSIFICATION	3.859412914039328E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999917755675463	WITHOUT_CLASSIFICATION	8.22443245373755E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9998871365148003	WITHOUT_CLASSIFICATION	1.1286348519968529E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999655952090776	WITHOUT_CLASSIFICATION	3.440479092240558E-5	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9998768500665643	WITHOUT_CLASSIFICATION	1.2314993343559162E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999901444771712	WITHOUT_CLASSIFICATION	9.855522828912198E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999866759658324	WITHOUT_CLASSIFICATION	1.3324034167562857E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999901444771712	WITHOUT_CLASSIFICATION	9.855522828912198E-6	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999872942081129	WITHOUT_CLASSIFICATION	1.2705791887155065E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.995333500112075	WITHOUT_CLASSIFICATION	0.004666499887925067	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9973551257823932	WITHOUT_CLASSIFICATION	0.0026448742176069548	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9996940891377089	WITHOUT_CLASSIFICATION	3.059108622911272E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9996940891377089	WITHOUT_CLASSIFICATION	3.059108622911272E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999860920094807	WITHOUT_CLASSIFICATION	1.3907990519191283E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999489142383002	WITHOUT_CLASSIFICATION	5.1085761699807635E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999502179155504	WITHOUT_CLASSIFICATION	4.9782084449681804E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.777555025446245	WITHOUT_CLASSIFICATION	0.222444974553755	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999875372650903	WITHOUT_CLASSIFICATION	1.2462734909733836E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997831956498101	WITHOUT_CLASSIFICATION	2.1680435018996637E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997831956498101	WITHOUT_CLASSIFICATION	2.1680435018996637E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996391359981086	WITHOUT_CLASSIFICATION	3.608640018914125E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999832209865036	WITHOUT_CLASSIFICATION	1.6779013496414066E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999832209865036	WITHOUT_CLASSIFICATION	1.6779013496414066E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999518908554041	WITHOUT_CLASSIFICATION	4.8109144595875824E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999905648988934	WITHOUT_CLASSIFICATION	9.435101106699685E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999727597094681	WITHOUT_CLASSIFICATION	2.7240290531936227E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9971232737923693	WITHOUT_CLASSIFICATION	0.0028767262076306835	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9996475613590019	WITHOUT_CLASSIFICATION	3.524386409980541E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999901444771712	WITHOUT_CLASSIFICATION	9.855522828912198E-6	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9998689619886341	WITHOUT_CLASSIFICATION	1.3103801136592154E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999968747562483	WITHOUT_CLASSIFICATION	3.125243751685763E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9985113500870499	WITHOUT_CLASSIFICATION	0.001488649912950022	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9998689845900987	WITHOUT_CLASSIFICATION	1.3101540990145678E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999981038768282	WITHOUT_CLASSIFICATION	1.8961231717392487E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999991084093707	WITHOUT_CLASSIFICATION	8.915906292249558E-7	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999841853220478	WITHOUT_CLASSIFICATION	1.5814677952233382E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9998732877120481	WITHOUT_CLASSIFICATION	1.2671228795190702E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999886506538749	WITHOUT_CLASSIFICATION	1.1349346125083492E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999519155448106	WITHOUT_CLASSIFICATION	4.8084455189343414E-5	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999692203389038	WITHOUT_CLASSIFICATION	3.077966109620908E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999975295474376	WITHOUT_CLASSIFICATION	2.4704525624368233E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9995941351425758	WITHOUT_CLASSIFICATION	4.0586485742429837E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998147415180847	WITHOUT_CLASSIFICATION	1.8525848191536503E-4	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9989245899010647	WITHOUT_CLASSIFICATION	0.001075410098935291	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9996842347558184	WITHOUT_CLASSIFICATION	3.1576524418169534E-4	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9992531396990857	WITHOUT_CLASSIFICATION	7.468603009143224E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.997159643971199	WITHOUT_CLASSIFICATION	0.0028403560288009343	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999667180897043	WITHOUT_CLASSIFICATION	3.328191029567177E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999988833950881	WITHOUT_CLASSIFICATION	1.1166049118798698E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999720085701627	WITHOUT_CLASSIFICATION	2.7991429837293393E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9948397045337922	WITHOUT_CLASSIFICATION	0.005160295466207822	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999859706338649	WITHOUT_CLASSIFICATION	1.4029366135061996E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9998163953902809	WITHOUT_CLASSIFICATION	1.8360460971915085E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998896242506697	WITHOUT_CLASSIFICATION	1.1037574933023921E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999919376649913	WITHOUT_CLASSIFICATION	8.062335008791107E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.999917965249503	WITHOUT_CLASSIFICATION	8.20347504969478E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9997793141839317	WITHOUT_CLASSIFICATION	2.206858160683418E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.99938657353131	WITHOUT_CLASSIFICATION	6.134264686899578E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999139342909092	WITHOUT_CLASSIFICATION	8.606570909079399E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.999946222287798	WITHOUT_CLASSIFICATION	5.377771220212655E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999921203709881	WITHOUT_CLASSIFICATION	7.879629011911446E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999416800984153	WITHOUT_CLASSIFICATION	5.831990158460013E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999771832271908	WITHOUT_CLASSIFICATION	2.2816772809229313E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998982481857125	WITHOUT_CLASSIFICATION	1.0175181428754116E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9997861408893025	WITHOUT_CLASSIFICATION	2.1385911069758285E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999854120703526	WITHOUT_CLASSIFICATION	1.4587929647365109E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.999997596603986	WITHOUT_CLASSIFICATION	2.403396013980119E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999913092649078	WITHOUT_CLASSIFICATION	8.690735092161883E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9990988069832171	WITHOUT_CLASSIFICATION	9.011930167828954E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998874393645507	WITHOUT_CLASSIFICATION	1.1256063544931382E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997303892832909	WITHOUT_CLASSIFICATION	2.696107167089758E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999292523058632	WITHOUT_CLASSIFICATION	7.074769413681078E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999551640236775	WITHOUT_CLASSIFICATION	4.483597632253303E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.999982934872164	WITHOUT_CLASSIFICATION	1.7065127835935102E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9896618787412059	WITHOUT_CLASSIFICATION	0.010338121258794122	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868287450483	WITHOUT_CLASSIFICATION	1.317125495182271E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868287450483	WITHOUT_CLASSIFICATION	1.317125495182271E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999867944407289	WITHOUT_CLASSIFICATION	1.3205559271048258E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999867944407289	WITHOUT_CLASSIFICATION	1.3205559271048258E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999867944407289	WITHOUT_CLASSIFICATION	1.3205559271048258E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999870042387945	WITHOUT_CLASSIFICATION	1.2995761205532526E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999870042387945	WITHOUT_CLASSIFICATION	1.2995761205532526E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999304143481068	WITHOUT_CLASSIFICATION	6.958565189326061E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999304143481068	WITHOUT_CLASSIFICATION	6.958565189326061E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9996630396163483	WITHOUT_CLASSIFICATION	3.369603836516756E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.998821575001972	WITHOUT_CLASSIFICATION	0.0011784249980280527	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999856129314236	WITHOUT_CLASSIFICATION	1.4387068576356819E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999856129314236	WITHOUT_CLASSIFICATION	1.4387068576356819E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9996138459004124	WITHOUT_CLASSIFICATION	3.8615409958769333E-4	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999572547668065	WITHOUT_CLASSIFICATION	4.2745233193553746E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9989379922926365	WITHOUT_CLASSIFICATION	0.0010620077073635879	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999636715890522	WITHOUT_CLASSIFICATION	3.632841094777189E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9995976512208332	WITHOUT_CLASSIFICATION	4.023487791667577E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999856697432709	WITHOUT_CLASSIFICATION	1.4330256729187415E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999968888670315	WITHOUT_CLASSIFICATION	3.111132968512543E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999262346488652	WITHOUT_CLASSIFICATION	7.376535113484173E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999018143519196	WITHOUT_CLASSIFICATION	9.81856480804725E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999940208427229	WITHOUT_CLASSIFICATION	5.979157277001624E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9998872642974126	WITHOUT_CLASSIFICATION	1.1273570258741273E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999516111759252	WITHOUT_CLASSIFICATION	4.8388824074814286E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9996618353881185	WITHOUT_CLASSIFICATION	3.381646118815743E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999657924836248	WITHOUT_CLASSIFICATION	3.420751637517855E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.999931152855891	WITHOUT_CLASSIFICATION	6.884714410897328E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999812734721373	WITHOUT_CLASSIFICATION	1.8726527862751485E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999699676909627	WITHOUT_CLASSIFICATION	3.0032309037349252E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9998443458660914	WITHOUT_CLASSIFICATION	1.5565413390865334E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.999994122859687	WITHOUT_CLASSIFICATION	5.8771403130333545E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999925641905552	WITHOUT_CLASSIFICATION	7.435809444803343E-5	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999925641905552	WITHOUT_CLASSIFICATION	7.435809444803343E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999925641905552	WITHOUT_CLASSIFICATION	7.435809444803343E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998839635972077	WITHOUT_CLASSIFICATION	1.1603640279232174E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998839635972077	WITHOUT_CLASSIFICATION	1.1603640279232174E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998839635972077	WITHOUT_CLASSIFICATION	1.1603640279232174E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998839635972077	WITHOUT_CLASSIFICATION	1.1603640279232174E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998839635972077	WITHOUT_CLASSIFICATION	1.1603640279232174E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.999965542793573	WITHOUT_CLASSIFICATION	3.4457206427084735E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9993279070044443	WITHOUT_CLASSIFICATION	6.720929955556646E-4	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999983412146016	WITHOUT_CLASSIFICATION	1.6587853983342602E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999868456970318	WITHOUT_CLASSIFICATION	1.3154302968302096E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.999754376496783	WITHOUT_CLASSIFICATION	2.4562350321703953E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999269163765168	WITHOUT_CLASSIFICATION	7.308362348331994E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9990967690753678	WITHOUT_CLASSIFICATION	9.032309246321729E-4	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999882245413624	WITHOUT_CLASSIFICATION	1.1775458637537174E-5	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999896694750153	WITHOUT_CLASSIFICATION	1.0330524984712348E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999948855885245	WITHOUT_CLASSIFICATION	5.114411475560216E-6	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999763473006362	WITHOUT_CLASSIFICATION	2.3652699363826755E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999755995915978	WITHOUT_CLASSIFICATION	2.440040840232252E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9586628256750765	WITHOUT_CLASSIFICATION	0.041337174324923384	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999347845075653	WITHOUT_CLASSIFICATION	6.521549243468109E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999083657873701	WITHOUT_CLASSIFICATION	9.163421262993353E-5	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999768745401633	WITHOUT_CLASSIFICATION	2.3125459836760533E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998599876339174	WITHOUT_CLASSIFICATION	1.4001236608265647E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999143399075536	WITHOUT_CLASSIFICATION	8.566009244633972E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999866759658324	WITHOUT_CLASSIFICATION	1.3324034167562857E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9959598272703002	WITHOUT_CLASSIFICATION	0.0040401727296997605	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9984990121236834	WITHOUT_CLASSIFICATION	0.0015009878763165253	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.999945591964203	WITHOUT_CLASSIFICATION	5.440803579715476E-5	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999661090283851	WITHOUT_CLASSIFICATION	3.3890971614863194E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999978467511597	WITHOUT_CLASSIFICATION	2.1532488402974442E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9998735272626725	WITHOUT_CLASSIFICATION	1.2647273732752757E-4	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999444109747959	WITHOUT_CLASSIFICATION	5.558902520417291E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999625980016352	WITHOUT_CLASSIFICATION	3.7401998364671455E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999635000896993	WITHOUT_CLASSIFICATION	3.649991030060718E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999627031904262	WITHOUT_CLASSIFICATION	3.7296809573656096E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999660077105903	WITHOUT_CLASSIFICATION	3.399228940959046E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999452735621377	WITHOUT_CLASSIFICATION	5.472643786238154E-5	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999501622269841	WITHOUT_CLASSIFICATION	4.9837773015919766E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999925511173873	WITHOUT_CLASSIFICATION	7.448882612706649E-6	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9998949540173626	WITHOUT_CLASSIFICATION	1.0504598263739643E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9998750562684616	WITHOUT_CLASSIFICATION	1.2494373153841556E-4	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.999972839335855	WITHOUT_CLASSIFICATION	2.716066414497332E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9994243331601934	WITHOUT_CLASSIFICATION	5.756668398065079E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999745361001976	WITHOUT_CLASSIFICATION	2.546389980239903E-5	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999996834925787	WITHOUT_CLASSIFICATION	3.1650742124855534E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996619513705836	WITHOUT_CLASSIFICATION	3.3804862941643035E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996619513705836	WITHOUT_CLASSIFICATION	3.3804862941643035E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999461667650218	WITHOUT_CLASSIFICATION	5.3833234978204935E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999461667650218	WITHOUT_CLASSIFICATION	5.3833234978204935E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999350441023754	WITHOUT_CLASSIFICATION	6.495589762462444E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999350441023754	WITHOUT_CLASSIFICATION	6.495589762462444E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999122769731102	WITHOUT_CLASSIFICATION	8.772302688977676E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999759139787502	WITHOUT_CLASSIFICATION	2.4086021249819178E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999857234366166	WITHOUT_CLASSIFICATION	1.4276563383421924E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999938956933098	WITHOUT_CLASSIFICATION	6.104306690244734E-6	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999789185348109	WITHOUT_CLASSIFICATION	2.1081465189023055E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9988159844088481	WITHOUT_CLASSIFICATION	0.0011840155911518946	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.999887827279369	WITHOUT_CLASSIFICATION	1.1217272063102605E-4	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999900704563327	WITHOUT_CLASSIFICATION	9.929543667250448E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9997764764924709	WITHOUT_CLASSIFICATION	2.235235075290299E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9997581754721682	WITHOUT_CLASSIFICATION	2.4182452783181E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9997298705509663	WITHOUT_CLASSIFICATION	2.7012944903371025E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999716366004024	WITHOUT_CLASSIFICATION	2.8363399597640736E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9996500043679298	WITHOUT_CLASSIFICATION	3.4999563207016967E-4	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999899764848371	WITHOUT_CLASSIFICATION	1.0023515162990993E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9990932173196494	WITHOUT_CLASSIFICATION	9.067826803506325E-4	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998388932580364	WITHOUT_CLASSIFICATION	1.6110674196356253E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999508730109435	WITHOUT_CLASSIFICATION	4.912698905644373E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9996471831028851	WITHOUT_CLASSIFICATION	3.5281689711487684E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9998508336807275	WITHOUT_CLASSIFICATION	1.491663192725584E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9990818436123282	WITHOUT_CLASSIFICATION	9.181563876718834E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999657290758376	WITHOUT_CLASSIFICATION	3.42709241623793E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999745336947885	WITHOUT_CLASSIFICATION	2.546630521147962E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999623007382703	WITHOUT_CLASSIFICATION	3.7699261729733135E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999888878837121	WITHOUT_CLASSIFICATION	1.1112116287960043E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.99998651853226	WITHOUT_CLASSIFICATION	1.3481467740000039E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.99998651853226	WITHOUT_CLASSIFICATION	1.3481467740000039E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998147415180847	WITHOUT_CLASSIFICATION	1.8525848191536503E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998147415180847	WITHOUT_CLASSIFICATION	1.8525848191536503E-4	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.999996994887528	WITHOUT_CLASSIFICATION	3.0051124719537564E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9975954157601825	WITHOUT_CLASSIFICATION	0.0024045842398175	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9998869479924637	WITHOUT_CLASSIFICATION	1.1305200753631507E-4	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9998848385041527	WITHOUT_CLASSIFICATION	1.1516149584730225E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999951876082049	WITHOUT_CLASSIFICATION	4.8123917950916E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.99998651853226	WITHOUT_CLASSIFICATION	1.3481467740000039E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.99998651853226	WITHOUT_CLASSIFICATION	1.3481467740000039E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.99998651853226	WITHOUT_CLASSIFICATION	1.3481467740000039E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998147415180847	WITHOUT_CLASSIFICATION	1.8525848191536503E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998147415180847	WITHOUT_CLASSIFICATION	1.8525848191536503E-4	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999665315523675	WITHOUT_CLASSIFICATION	3.346844763249374E-5	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999785788272477	WITHOUT_CLASSIFICATION	2.1421172752220773E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999658397759257	WITHOUT_CLASSIFICATION	3.416022407432882E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9981732282646554	WITHOUT_CLASSIFICATION	0.0018267717353445557	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999981323364251	WITHOUT_CLASSIFICATION	1.8676635748961886E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999488278623896	WITHOUT_CLASSIFICATION	5.117213761038574E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999780688221739	WITHOUT_CLASSIFICATION	2.1931177826073843E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999086290312917	WITHOUT_CLASSIFICATION	9.137096870831063E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999937137474111	WITHOUT_CLASSIFICATION	6.286252588874112E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999877156529994	WITHOUT_CLASSIFICATION	1.2284347000631467E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999443556476021	WITHOUT_CLASSIFICATION	5.564435239789736E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9996159432266796	WITHOUT_CLASSIFICATION	3.8405677332044996E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999740838155693	WITHOUT_CLASSIFICATION	2.5916184430608203E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998191211461228	WITHOUT_CLASSIFICATION	1.8087885387718577E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999279961672578	WITHOUT_CLASSIFICATION	7.20038327422179E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.994949516349768	WITHOUT_CLASSIFICATION	0.005050483650232061	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999972264341406	WITHOUT_CLASSIFICATION	2.7735658594015042E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999972264341406	WITHOUT_CLASSIFICATION	2.7735658594015042E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.999972264341406	WITHOUT_CLASSIFICATION	2.7735658594015042E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9963413764142633	WITHOUT_CLASSIFICATION	0.0036586235857365636	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9962914726155244	WITHOUT_CLASSIFICATION	0.0037085273844755973	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.999989029527943	WITHOUT_CLASSIFICATION	1.0970472056992047E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999216485054714	WITHOUT_CLASSIFICATION	7.835149452860941E-5	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999074696978766	WITHOUT_CLASSIFICATION	9.253030212339379E-5	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999074762167118	WITHOUT_CLASSIFICATION	9.252378328808971E-5	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999061389698002	WITHOUT_CLASSIFICATION	9.386103019990505E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998788394671535	WITHOUT_CLASSIFICATION	1.2116053284658582E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999526838658083	WITHOUT_CLASSIFICATION	4.731613419182794E-5	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999526871994191	WITHOUT_CLASSIFICATION	4.73128005808336E-5	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999520033558031	WITHOUT_CLASSIFICATION	4.799664419680989E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999143338722636	WITHOUT_CLASSIFICATION	8.566612773638404E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999794810193356	WITHOUT_CLASSIFICATION	2.05189806644075E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999979320162599	WITHOUT_CLASSIFICATION	2.0679837401056744E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999099274993868	WITHOUT_CLASSIFICATION	9.007250061324894E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999660213110807	WITHOUT_CLASSIFICATION	3.397868891931098E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.999889329008415	WITHOUT_CLASSIFICATION	1.106709915849667E-4	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999563279636399	WITHOUT_CLASSIFICATION	4.367203636021977E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998749623681502	WITHOUT_CLASSIFICATION	1.2503763184973325E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9998365247836336	WITHOUT_CLASSIFICATION	1.6347521636640906E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999445394872055	WITHOUT_CLASSIFICATION	5.546051279449998E-5	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9942669656553967	WITHOUT_CLASSIFICATION	0.005733034344603308	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999104130274292	WITHOUT_CLASSIFICATION	8.958697257077337E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999648124580622	WITHOUT_CLASSIFICATION	3.518754193771724E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999768555319077	WITHOUT_CLASSIFICATION	2.3144468092254035E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999759280852734	WITHOUT_CLASSIFICATION	2.4071914726620133E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999665429299218	WITHOUT_CLASSIFICATION	3.345707007818026E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999896786579214	WITHOUT_CLASSIFICATION	1.0321342078558439E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.99987412674099	WITHOUT_CLASSIFICATION	1.2587325901008566E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9984687767673514	WITHOUT_CLASSIFICATION	0.0015312232326486028	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999001795813397	WITHOUT_CLASSIFICATION	9.982041866037777E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9997636404343596	WITHOUT_CLASSIFICATION	2.363595656403318E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998400248550272	WITHOUT_CLASSIFICATION	1.599751449726951E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9992866253069327	WITHOUT_CLASSIFICATION	7.133746930673718E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9998069545834247	WITHOUT_CLASSIFICATION	1.9304541657520592E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999676613423046	WITHOUT_CLASSIFICATION	3.233865769527669E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.999937318063034	WITHOUT_CLASSIFICATION	6.268193696599868E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999100219758339	WITHOUT_CLASSIFICATION	8.997802416614158E-5	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9965022588850164	WITHOUT_CLASSIFICATION	0.0034977411149835587	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999181810993969	WITHOUT_CLASSIFICATION	8.181890060316712E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9975972555373368	WITHOUT_CLASSIFICATION	0.002402744462663128	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9988171445417908	WITHOUT_CLASSIFICATION	0.0011828554582091562	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.999609841562032	WITHOUT_CLASSIFICATION	3.9015843796802674E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.999962852429441	WITHOUT_CLASSIFICATION	3.7147570558982176E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9989943723661632	WITHOUT_CLASSIFICATION	0.001005627633836779	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9997618060022262	WITHOUT_CLASSIFICATION	2.3819399777374163E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9997618060022262	WITHOUT_CLASSIFICATION	2.3819399777374163E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9991254625370423	WITHOUT_CLASSIFICATION	8.745374629577048E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.999937283196877	WITHOUT_CLASSIFICATION	6.271680312294453E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9989921338278986	WITHOUT_CLASSIFICATION	0.0010078661721013597	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9992974369188949	WITHOUT_CLASSIFICATION	7.025630811050541E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9996066826783603	WITHOUT_CLASSIFICATION	3.933173216397576E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999148022462622	WITHOUT_CLASSIFICATION	8.51977537378314E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999710010007458	WITHOUT_CLASSIFICATION	2.8998999254279798E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999848999250545	WITHOUT_CLASSIFICATION	1.5100074945475776E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999910470718408	WITHOUT_CLASSIFICATION	8.952928159142478E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999519397259471	WITHOUT_CLASSIFICATION	4.8060274052822174E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999452253902384	WITHOUT_CLASSIFICATION	5.4774609761557714E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999452253902384	WITHOUT_CLASSIFICATION	5.4774609761557714E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999452253902384	WITHOUT_CLASSIFICATION	5.4774609761557714E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999452253902384	WITHOUT_CLASSIFICATION	5.4774609761557714E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999831922300234	WITHOUT_CLASSIFICATION	1.6807769976595148E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999948551333349	WITHOUT_CLASSIFICATION	5.144866665151507E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999957262038286	WITHOUT_CLASSIFICATION	4.2737961714193485E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9998255529787943	WITHOUT_CLASSIFICATION	1.7444702120563097E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.999402094512996	WITHOUT_CLASSIFICATION	5.979054870039078E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9993258976039849	WITHOUT_CLASSIFICATION	6.741023960150197E-4	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999242535568534	WITHOUT_CLASSIFICATION	7.574644314666687E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999657869803631	WITHOUT_CLASSIFICATION	3.4213019636912416E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999657869803631	WITHOUT_CLASSIFICATION	3.4213019636912416E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999966179925132	WITHOUT_CLASSIFICATION	3.3820074867719962E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999539277612496	WITHOUT_CLASSIFICATION	4.6072238750410516E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9996714888661875	WITHOUT_CLASSIFICATION	3.2851113381243837E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9979169315282479	WITHOUT_CLASSIFICATION	0.0020830684717522137	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9979169315282479	WITHOUT_CLASSIFICATION	0.0020830684717522137	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9997317625780957	WITHOUT_CLASSIFICATION	2.682374219043339E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999927022186946	WITHOUT_CLASSIFICATION	7.2977813053735645E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999927022186946	WITHOUT_CLASSIFICATION	7.2977813053735645E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9992817848144351	WITHOUT_CLASSIFICATION	7.182151855650128E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999190120351	WITHOUT_CLASSIFICATION	8.098796485238077E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999996072753943	WITHOUT_CLASSIFICATION	3.9272460562283176E-7	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9996157506092791	WITHOUT_CLASSIFICATION	3.842493907209042E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9994404617101359	WITHOUT_CLASSIFICATION	5.595382898641893E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999975318929362	WITHOUT_CLASSIFICATION	2.4681070638816707E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9966402607606143	WITHOUT_CLASSIFICATION	0.0033597392393856793	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999979359438511	WITHOUT_CLASSIFICATION	2.0640561489452977E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999781613230492	WITHOUT_CLASSIFICATION	2.183867695076895E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999908976599171	WITHOUT_CLASSIFICATION	9.1023400828521E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.993358888898065	WITHOUT_CLASSIFICATION	0.006641111101935056	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9970653478479123	WITHOUT_CLASSIFICATION	0.002934652152087739	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999946079593323	WITHOUT_CLASSIFICATION	5.392040667742575E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9992491038765928	WITHOUT_CLASSIFICATION	7.508961234071108E-4	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9998258176157037	WITHOUT_CLASSIFICATION	1.7418238429636526E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999441013003194	WITHOUT_CLASSIFICATION	5.589869968056381E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999360577824005	WITHOUT_CLASSIFICATION	6.39422175995262E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999157831690368	WITHOUT_CLASSIFICATION	8.421683096324881E-5	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9987822591912542	WITHOUT_CLASSIFICATION	0.00121774080874586	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9992001541731408	WITHOUT_CLASSIFICATION	7.998458268593594E-4	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9990671135394278	WITHOUT_CLASSIFICATION	9.328864605722062E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999513163975093	WITHOUT_CLASSIFICATION	4.8683602490653106E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.975295318855707	WITHOUT_CLASSIFICATION	0.024704681144293066	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999587326165998	WITHOUT_CLASSIFICATION	4.126738340015374E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999332500873278	WITHOUT_CLASSIFICATION	6.674991267214654E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999450606017432	WITHOUT_CLASSIFICATION	5.493939825691017E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999369859768995	WITHOUT_CLASSIFICATION	6.301402310048628E-5	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9992589724928446	WITHOUT_CLASSIFICATION	7.410275071554519E-4	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999523023195869	WITHOUT_CLASSIFICATION	4.7697680413130475E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.75733597745625	DEFECT	0.24266402254374986	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9995363471775468	WITHOUT_CLASSIFICATION	4.6365282245325903E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999350079311167	WITHOUT_CLASSIFICATION	6.499206888331182E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.999828490308713	WITHOUT_CLASSIFICATION	1.7150969128698227E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999551644545301	WITHOUT_CLASSIFICATION	4.483554546984666E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9997561922444378	WITHOUT_CLASSIFICATION	2.4380775556229168E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.999828490308713	WITHOUT_CLASSIFICATION	1.7150969128698227E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999551644545301	WITHOUT_CLASSIFICATION	4.483554546984666E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999455848181793	WITHOUT_CLASSIFICATION	5.4415181820694575E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9998917657173454	WITHOUT_CLASSIFICATION	1.0823428265460185E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9998917657173454	WITHOUT_CLASSIFICATION	1.0823428265460185E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.999815876565506	WITHOUT_CLASSIFICATION	1.8412343449392046E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9996514037438176	WITHOUT_CLASSIFICATION	3.4859625618239686E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999827683637852	WITHOUT_CLASSIFICATION	1.7231636214823173E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999903948463732	WITHOUT_CLASSIFICATION	9.60515362687838E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.995674900660203	WITHOUT_CLASSIFICATION	0.004325099339796913	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9992060777315914	WITHOUT_CLASSIFICATION	7.939222684084683E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999176055149989	WITHOUT_CLASSIFICATION	8.239448500114478E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999128841981401	WITHOUT_CLASSIFICATION	8.711580185985432E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971295419434	WITHOUT_CLASSIFICATION	2.870458056605633E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998579662387208	WITHOUT_CLASSIFICATION	1.4203376127923143E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9996763678423395	WITHOUT_CLASSIFICATION	3.236321576605723E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999314178830931	WITHOUT_CLASSIFICATION	6.858211690686182E-5	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998987382191913	WITHOUT_CLASSIFICATION	1.01261780808772E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999850434829226	WITHOUT_CLASSIFICATION	1.4956517077443575E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999850434829226	WITHOUT_CLASSIFICATION	1.4956517077443575E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9998546093418307	WITHOUT_CLASSIFICATION	1.4539065816937725E-4	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9998546093418307	WITHOUT_CLASSIFICATION	1.4539065816937725E-4	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999456372540432	WITHOUT_CLASSIFICATION	5.436274595687951E-5	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998266548693979	WITHOUT_CLASSIFICATION	1.7334513060200993E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999329097013868	WITHOUT_CLASSIFICATION	6.70902986131508E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999827683637852	WITHOUT_CLASSIFICATION	1.7231636214823173E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999903948463732	WITHOUT_CLASSIFICATION	9.60515362687838E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971295419434	WITHOUT_CLASSIFICATION	2.870458056605633E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998579662387208	WITHOUT_CLASSIFICATION	1.4203376127923143E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999484541431967	WITHOUT_CLASSIFICATION	5.154585680332558E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999492006288325	WITHOUT_CLASSIFICATION	5.079937116741075E-5	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999784670274366	WITHOUT_CLASSIFICATION	2.153297256328799E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999377422552661	WITHOUT_CLASSIFICATION	6.225774473389038E-5	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999826908076738	WITHOUT_CLASSIFICATION	1.73091923262436E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9998092617591058	WITHOUT_CLASSIFICATION	1.9073824089419254E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999660390798797	WITHOUT_CLASSIFICATION	3.3960920120429284E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999587379754395	WITHOUT_CLASSIFICATION	4.126202456056645E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999435356467016	WITHOUT_CLASSIFICATION	5.646435329846357E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9979690354397087	WITHOUT_CLASSIFICATION	0.0020309645602913265	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999947103754058	WITHOUT_CLASSIFICATION	5.2896245941987455E-5	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999964029104476	WITHOUT_CLASSIFICATION	3.5970895524800865E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999209702026164	WITHOUT_CLASSIFICATION	7.902979738354178E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999953518289824	WITHOUT_CLASSIFICATION	4.6481710176848855E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999978867688334	WITHOUT_CLASSIFICATION	2.1132311666813636E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998739886439353	WITHOUT_CLASSIFICATION	1.2601135606474004E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9997157312113306	WITHOUT_CLASSIFICATION	2.8426878866943115E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998698204821531	WITHOUT_CLASSIFICATION	1.3017951784695175E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999089408414462	WITHOUT_CLASSIFICATION	9.105915855367777E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999089408414462	WITHOUT_CLASSIFICATION	9.105915855367777E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999089408414462	WITHOUT_CLASSIFICATION	9.105915855367777E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9994591892772059	WITHOUT_CLASSIFICATION	5.408107227940415E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999949263516051	WITHOUT_CLASSIFICATION	5.073648394885853E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997623526468379	WITHOUT_CLASSIFICATION	2.3764735316217155E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997623526468379	WITHOUT_CLASSIFICATION	2.3764735316217155E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9997474415635185	WITHOUT_CLASSIFICATION	2.525584364815923E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999908705779138	WITHOUT_CLASSIFICATION	9.129422086227486E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999733556976919	WITHOUT_CLASSIFICATION	2.6644302308135913E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9996483032884329	WITHOUT_CLASSIFICATION	3.516967115671572E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9997485049799926	WITHOUT_CLASSIFICATION	2.5149502000742607E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9991234874595752	WITHOUT_CLASSIFICATION	8.765125404247039E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998889223360319	WITHOUT_CLASSIFICATION	1.1107766396815455E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9998557627360187	WITHOUT_CLASSIFICATION	1.4423726398115814E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9996628364635824	WITHOUT_CLASSIFICATION	3.3716353641750983E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998444521016087	WITHOUT_CLASSIFICATION	1.555478983912228E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9998519849470954	WITHOUT_CLASSIFICATION	1.480150529046089E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999870953630016	WITHOUT_CLASSIFICATION	1.2904636998312227E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999179862715811	WITHOUT_CLASSIFICATION	8.201372841892647E-5	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999954100300908	WITHOUT_CLASSIFICATION	4.589969909206122E-6	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999742971225443	WITHOUT_CLASSIFICATION	2.5702877455770737E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9997007112740961	WITHOUT_CLASSIFICATION	2.992887259038688E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999718301462032	WITHOUT_CLASSIFICATION	2.816985379690079E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999761952299515	WITHOUT_CLASSIFICATION	2.3804770048576554E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999576033225727	WITHOUT_CLASSIFICATION	4.2396677427458616E-5	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999966711471548	WITHOUT_CLASSIFICATION	3.3288528452435766E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999626505218773	WITHOUT_CLASSIFICATION	3.734947812269771E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999969769505027	WITHOUT_CLASSIFICATION	3.02304949734117E-6	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9998886114259576	WITHOUT_CLASSIFICATION	1.1138857404247062E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.99999788288824	WITHOUT_CLASSIFICATION	2.1171117600085795E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999865724604456	WITHOUT_CLASSIFICATION	1.3427539554314364E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999865724604456	WITHOUT_CLASSIFICATION	1.3427539554314364E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999613159555337	WITHOUT_CLASSIFICATION	3.868404446622472E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999613159555337	WITHOUT_CLASSIFICATION	3.868404446622472E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999335985333325	WITHOUT_CLASSIFICATION	6.640146666747012E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999992793897196	WITHOUT_CLASSIFICATION	7.206102804036425E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999859548364863	WITHOUT_CLASSIFICATION	1.4045163513655849E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999106201388996	WITHOUT_CLASSIFICATION	8.937986110024216E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999761952299515	WITHOUT_CLASSIFICATION	2.3804770048576554E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999761952299515	WITHOUT_CLASSIFICATION	2.3804770048576554E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999761952299515	WITHOUT_CLASSIFICATION	2.3804770048576554E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999576033225727	WITHOUT_CLASSIFICATION	4.2396677427458616E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999859548364863	WITHOUT_CLASSIFICATION	1.4045163513655849E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999859548364863	WITHOUT_CLASSIFICATION	1.4045163513655849E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999445462307537	WITHOUT_CLASSIFICATION	5.5453769246236025E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999956145174281	WITHOUT_CLASSIFICATION	4.385482571795418E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999980860815941	WITHOUT_CLASSIFICATION	1.913918405921733E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.711247572212937	WITHOUT_CLASSIFICATION	0.28875242778706306	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999965509541918	WITHOUT_CLASSIFICATION	3.44904580824538E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999485302506407	WITHOUT_CLASSIFICATION	5.146974935938357E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999485302506407	WITHOUT_CLASSIFICATION	5.146974935938357E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998400936195041	WITHOUT_CLASSIFICATION	1.599063804958973E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999903312229846	WITHOUT_CLASSIFICATION	9.668777015363795E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999903312229846	WITHOUT_CLASSIFICATION	9.668777015363795E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999903312229846	WITHOUT_CLASSIFICATION	9.668777015363795E-6	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999485605335678	WITHOUT_CLASSIFICATION	5.14394664321245E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999977096349769	WITHOUT_CLASSIFICATION	2.290365023052184E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999576033225727	WITHOUT_CLASSIFICATION	4.2396677427458616E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999796081551938	WITHOUT_CLASSIFICATION	2.0391844806196768E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999903312229846	WITHOUT_CLASSIFICATION	9.668777015363795E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998400936195041	WITHOUT_CLASSIFICATION	1.599063804958973E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999736155211333	WITHOUT_CLASSIFICATION	2.6384478866703933E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999699647552602	WITHOUT_CLASSIFICATION	3.00352447397712E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999690461823854	WITHOUT_CLASSIFICATION	3.095381761475649E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999683015805084	WITHOUT_CLASSIFICATION	3.169841949153216E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999397052794606	WITHOUT_CLASSIFICATION	6.029472053930003E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9992735787187677	WITHOUT_CLASSIFICATION	7.264212812324222E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999962020400797	WITHOUT_CLASSIFICATION	3.7979599203272937E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999952903225953	WITHOUT_CLASSIFICATION	4.709677404716903E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999745962367533	WITHOUT_CLASSIFICATION	2.5403763246757754E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9996909097295058	WITHOUT_CLASSIFICATION	3.090902704941675E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999311784522266	WITHOUT_CLASSIFICATION	6.882154777345738E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999841867435108	WITHOUT_CLASSIFICATION	1.581325648922668E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999391420843391	WITHOUT_CLASSIFICATION	6.0857915661021734E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999833696099114	WITHOUT_CLASSIFICATION	1.6630390088594647E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999855399756178	WITHOUT_CLASSIFICATION	1.446002438216951E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999901533460422	WITHOUT_CLASSIFICATION	9.846653957788705E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997586370036294	WITHOUT_CLASSIFICATION	2.4136299637054844E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999523852878043	WITHOUT_CLASSIFICATION	4.761471219574034E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999913179894798	WITHOUT_CLASSIFICATION	8.682010520286982E-6	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999976674979985	WITHOUT_CLASSIFICATION	2.3325020016199287E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.999854769987296	WITHOUT_CLASSIFICATION	1.4523001270398393E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999762890713938	WITHOUT_CLASSIFICATION	2.371092860616072E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999638498824501	WITHOUT_CLASSIFICATION	3.6150117549955045E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999815022370718	WITHOUT_CLASSIFICATION	1.849776292825379E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999130668302779	WITHOUT_CLASSIFICATION	8.693316972207774E-5	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999845721706876	WITHOUT_CLASSIFICATION	1.542782931234244E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999531894631	WITHOUT_CLASSIFICATION	4.681053689869261E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999807979581894	WITHOUT_CLASSIFICATION	1.9202041810608015E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999494620394616	WITHOUT_CLASSIFICATION	5.0537960538432126E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999609064451289	WITHOUT_CLASSIFICATION	3.909355487115912E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999736155211333	WITHOUT_CLASSIFICATION	2.6384478866703933E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999909414491133	WITHOUT_CLASSIFICATION	9.058550886790473E-6	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9996470255777323	WITHOUT_CLASSIFICATION	3.5297442226771357E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9994203654267569	WITHOUT_CLASSIFICATION	5.79634573243144E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999497451950173	WITHOUT_CLASSIFICATION	5.025480498279803E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999497451950173	WITHOUT_CLASSIFICATION	5.025480498279803E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.999972229652198	WITHOUT_CLASSIFICATION	2.7770347801920212E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999931031536998	WITHOUT_CLASSIFICATION	6.896846300087793E-6	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999651459829143	WITHOUT_CLASSIFICATION	3.485401708558201E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999839502630404	WITHOUT_CLASSIFICATION	1.6049736959574093E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999857562618375	WITHOUT_CLASSIFICATION	1.424373816237228E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999599102900346	WITHOUT_CLASSIFICATION	4.008970996532786E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9991294968499422	WITHOUT_CLASSIFICATION	8.705031500576655E-4	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999943169803023	WITHOUT_CLASSIFICATION	5.6830196976706445E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998905879514932	WITHOUT_CLASSIFICATION	1.0941204850678826E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9990356630799997	WITHOUT_CLASSIFICATION	9.643369200002939E-4	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9996334896256919	WITHOUT_CLASSIFICATION	3.6651037430815626E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999899414288349	WITHOUT_CLASSIFICATION	1.0058571165067927E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999899414288349	WITHOUT_CLASSIFICATION	1.0058571165067927E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.999495364544077	WITHOUT_CLASSIFICATION	5.046354559231061E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999946439254487	WITHOUT_CLASSIFICATION	5.3560745512182575E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999742166194933	WITHOUT_CLASSIFICATION	2.5783380506658503E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999742166194933	WITHOUT_CLASSIFICATION	2.5783380506658503E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999921668208301	WITHOUT_CLASSIFICATION	7.833179169907326E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999714662319197	WITHOUT_CLASSIFICATION	2.8533768080424474E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9997327468730776	WITHOUT_CLASSIFICATION	2.6725312692248956E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9998957371528924	WITHOUT_CLASSIFICATION	1.0426284710769834E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999674865645677	WITHOUT_CLASSIFICATION	3.251343543220996E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9998506179706576	WITHOUT_CLASSIFICATION	1.4938202934255038E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999852692024301	WITHOUT_CLASSIFICATION	1.4730797569973686E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999915823800269	WITHOUT_CLASSIFICATION	8.417619973162148E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9980074762291139	WITHOUT_CLASSIFICATION	0.0019925237708861804	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999907372359043	WITHOUT_CLASSIFICATION	9.262764095784954E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.999880531102211	WITHOUT_CLASSIFICATION	1.1946889778895952E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999719693510022	WITHOUT_CLASSIFICATION	2.8030648997843786E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999914480047746	WITHOUT_CLASSIFICATION	8.551995225504447E-6	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.999890471192189	WITHOUT_CLASSIFICATION	1.0952880781100137E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999905242541957	WITHOUT_CLASSIFICATION	9.475745804375161E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9963002644418438	WITHOUT_CLASSIFICATION	0.0036997355581561025	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9998702814694173	WITHOUT_CLASSIFICATION	1.2971853058278777E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999222523241482	WITHOUT_CLASSIFICATION	7.774767585177506E-5	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9996049938276319	WITHOUT_CLASSIFICATION	3.9500617236809695E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999879402298982	WITHOUT_CLASSIFICATION	1.205977010184111E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8967222713780126	WITHOUT_CLASSIFICATION	0.10327772862198731	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999613651715276	WITHOUT_CLASSIFICATION	3.863482847249434E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.999980691510307	WITHOUT_CLASSIFICATION	1.930848969305155E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999847621133235	WITHOUT_CLASSIFICATION	1.5237886676494815E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999820696094893	WITHOUT_CLASSIFICATION	1.7930390510632135E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9997652210693303	WITHOUT_CLASSIFICATION	2.3477893066966917E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9996759559426946	WITHOUT_CLASSIFICATION	3.2404405730540646E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9998622601443709	WITHOUT_CLASSIFICATION	1.377398556292022E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999520688739927	WITHOUT_CLASSIFICATION	4.7931126007339775E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999238625058418	WITHOUT_CLASSIFICATION	7.613749415822732E-5	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999979342282504	WITHOUT_CLASSIFICATION	2.065771749600161E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9997119673260731	WITHOUT_CLASSIFICATION	2.880326739268906E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999003010469184	WITHOUT_CLASSIFICATION	9.969895308169289E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999003010469184	WITHOUT_CLASSIFICATION	9.969895308169289E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999721701177557	WITHOUT_CLASSIFICATION	2.7829882244132097E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.999984148704485	WITHOUT_CLASSIFICATION	1.5851295514937896E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9997882306441028	WITHOUT_CLASSIFICATION	2.1176935589729124E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9998423343757026	WITHOUT_CLASSIFICATION	1.576656242973887E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998281057804136	WITHOUT_CLASSIFICATION	1.7189421958633497E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999880362283968	WITHOUT_CLASSIFICATION	1.1963771603220666E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.989714053686059	WITHOUT_CLASSIFICATION	0.010285946313940947	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.989714053686059	WITHOUT_CLASSIFICATION	0.010285946313940947	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9997079627037064	WITHOUT_CLASSIFICATION	2.920372962934935E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9998607307828923	WITHOUT_CLASSIFICATION	1.392692171076609E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9997448066909814	WITHOUT_CLASSIFICATION	2.551933090186114E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9513221978091855	WITHOUT_CLASSIFICATION	0.04867780219081456	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9998875910539461	WITHOUT_CLASSIFICATION	1.124089460539516E-4	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999355402432905	WITHOUT_CLASSIFICATION	6.445975670954007E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.999993624381699	WITHOUT_CLASSIFICATION	6.37561830098286E-6	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999883487631682	WITHOUT_CLASSIFICATION	1.1651236831777506E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9998593704266485	WITHOUT_CLASSIFICATION	1.406295733514591E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999553650754368	WITHOUT_CLASSIFICATION	4.46349245631559E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999550656041124	WITHOUT_CLASSIFICATION	4.493439588753578E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999654349795021	WITHOUT_CLASSIFICATION	3.456502049795522E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999588920328024	WITHOUT_CLASSIFICATION	4.110796719759378E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999984201668	WITHOUT_CLASSIFICATION	1.5798332000408035E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.999946522638488	WITHOUT_CLASSIFICATION	5.347736151194418E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997832154109648	WITHOUT_CLASSIFICATION	2.1678458903518988E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9996941943296249	WITHOUT_CLASSIFICATION	3.058056703750751E-4	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999921512506195	WITHOUT_CLASSIFICATION	7.848749380519423E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9997721840848321	WITHOUT_CLASSIFICATION	2.2781591516774053E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9997920393921174	WITHOUT_CLASSIFICATION	2.0796060788269192E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.997259851239512	WITHOUT_CLASSIFICATION	0.0027401487604879625	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9989839638727828	WITHOUT_CLASSIFICATION	0.0010160361272172303	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999927872535539	WITHOUT_CLASSIFICATION	7.212746446089133E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999986992941142	WITHOUT_CLASSIFICATION	1.3007058856935577E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999373375618802	WITHOUT_CLASSIFICATION	6.266243811984882E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9995557692344206	WITHOUT_CLASSIFICATION	4.442307655793644E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999564855616685	WITHOUT_CLASSIFICATION	4.351443833147525E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998401112096088	WITHOUT_CLASSIFICATION	1.598887903910957E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999736592568652	WITHOUT_CLASSIFICATION	2.634074313486311E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999727903905561	WITHOUT_CLASSIFICATION	2.7209609443873354E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998836524087192	WITHOUT_CLASSIFICATION	1.163475912806993E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999662361783294	WITHOUT_CLASSIFICATION	3.37638216706425E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999742112989766	WITHOUT_CLASSIFICATION	2.5788701023445945E-5	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999659025008928	WITHOUT_CLASSIFICATION	3.4097499107207944E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999690992517898	WITHOUT_CLASSIFICATION	3.090074821027162E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998773626169668	WITHOUT_CLASSIFICATION	1.2263738303320526E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.999914997553831	WITHOUT_CLASSIFICATION	8.500244616894112E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9989817944285125	WITHOUT_CLASSIFICATION	0.0010182055714875401	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999935639404427	WITHOUT_CLASSIFICATION	6.4360595572221435E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.999992062715882	WITHOUT_CLASSIFICATION	7.937284117956855E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997813573852257	WITHOUT_CLASSIFICATION	2.1864261477426878E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9991847780931361	WITHOUT_CLASSIFICATION	8.152219068638136E-4	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9994189984981247	WITHOUT_CLASSIFICATION	5.810015018753069E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9998834023209434	WITHOUT_CLASSIFICATION	1.1659767905661768E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.999914244825843	WITHOUT_CLASSIFICATION	8.575517415689857E-5	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9993134479581608	WITHOUT_CLASSIFICATION	6.865520418392394E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999462878984394	WITHOUT_CLASSIFICATION	5.371210156057981E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998306175170782	WITHOUT_CLASSIFICATION	1.6938248292186722E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.999977276684788	WITHOUT_CLASSIFICATION	2.2723315211934356E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.8977580005831324	WITHOUT_CLASSIFICATION	0.10224199941686767	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998433575925711	WITHOUT_CLASSIFICATION	1.566424074289229E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9998310000928236	WITHOUT_CLASSIFICATION	1.689999071764686E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999875671157173	WITHOUT_CLASSIFICATION	1.243288428272486E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999974604642905	WITHOUT_CLASSIFICATION	2.539535709436913E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9996531695278302	WITHOUT_CLASSIFICATION	3.468304721697539E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999983433229825	WITHOUT_CLASSIFICATION	1.6566770175177388E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999922419408642	WITHOUT_CLASSIFICATION	7.758059135698285E-6	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.999965542911849	WITHOUT_CLASSIFICATION	3.445708815094557E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999236926576065	WITHOUT_CLASSIFICATION	7.630734239347743E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999273258263556	WITHOUT_CLASSIFICATION	7.267417364441517E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999236926576065	WITHOUT_CLASSIFICATION	7.630734239347743E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999966553248506	WITHOUT_CLASSIFICATION	3.3446751494007523E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999273258263556	WITHOUT_CLASSIFICATION	7.267417364441517E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999937974250367	WITHOUT_CLASSIFICATION	6.20257496330449E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999513163975093	WITHOUT_CLASSIFICATION	4.8683602490653106E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9902146991300065	WITHOUT_CLASSIFICATION	0.009785300869993447	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.973302543857364	WITHOUT_CLASSIFICATION	0.026697456142635936	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999223191143316	WITHOUT_CLASSIFICATION	7.768088566842802E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9988353694176783	WITHOUT_CLASSIFICATION	0.0011646305823217469	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998578773178504	WITHOUT_CLASSIFICATION	1.4212268214965545E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.999909794588946	WITHOUT_CLASSIFICATION	9.020541105395203E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9996514037438176	WITHOUT_CLASSIFICATION	3.4859625618239686E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999879402298982	WITHOUT_CLASSIFICATION	1.205977010184111E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999980860815941	WITHOUT_CLASSIFICATION	1.913918405921733E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9956545748644973	WITHOUT_CLASSIFICATION	0.004345425135502733	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999847750347036	WITHOUT_CLASSIFICATION	1.522496529640372E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999923464313255	WITHOUT_CLASSIFICATION	7.653568674443298E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9998954159707393	WITHOUT_CLASSIFICATION	1.045840292608237E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9990079712523279	WITHOUT_CLASSIFICATION	9.920287476721352E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999951453826162	WITHOUT_CLASSIFICATION	4.854617383804207E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9993942816585721	WITHOUT_CLASSIFICATION	6.057183414278719E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9906031478098669	WITHOUT_CLASSIFICATION	0.00939685219013307	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999814931971703	WITHOUT_CLASSIFICATION	1.850680282970044E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999970649704536	WITHOUT_CLASSIFICATION	2.9350295464847223E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999870208271471	WITHOUT_CLASSIFICATION	1.2979172852911382E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9998031031598599	WITHOUT_CLASSIFICATION	1.9689684014012387E-4	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999959034020305	WITHOUT_CLASSIFICATION	4.0965979695745725E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9990073602577453	WITHOUT_CLASSIFICATION	9.926397422546811E-4	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999980013877884	WITHOUT_CLASSIFICATION	1.9986122116608443E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999966568233443	WITHOUT_CLASSIFICATION	3.34317665570625E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999966568233443	WITHOUT_CLASSIFICATION	3.34317665570625E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9996106893749217	WITHOUT_CLASSIFICATION	3.893106250783281E-4	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999862409098934	WITHOUT_CLASSIFICATION	1.3759090106529266E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999161028201421	WITHOUT_CLASSIFICATION	8.389717985784325E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999822649802418	WITHOUT_CLASSIFICATION	1.773501975826007E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999471976953603	WITHOUT_CLASSIFICATION	5.28023046396307E-5	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999585938325379	WITHOUT_CLASSIFICATION	4.1406167462089154E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9789249079920298	WITHOUT_CLASSIFICATION	0.021075092007970274	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999783675699295	WITHOUT_CLASSIFICATION	2.163243007042457E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997968087714857	WITHOUT_CLASSIFICATION	2.0319122851425732E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997968087714857	WITHOUT_CLASSIFICATION	2.0319122851425732E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9996244054765235	WITHOUT_CLASSIFICATION	3.755945234764678E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999480426574255	WITHOUT_CLASSIFICATION	5.195734257451515E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9647534940588047	WITHOUT_CLASSIFICATION	0.03524650594119518	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999805248168477	WITHOUT_CLASSIFICATION	1.9475183152244743E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9998144440875832	WITHOUT_CLASSIFICATION	1.8555591241672673E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9998401744704679	WITHOUT_CLASSIFICATION	1.5982552953197436E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9997896784869402	WITHOUT_CLASSIFICATION	2.1032151305987526E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999966553248506	WITHOUT_CLASSIFICATION	3.3446751494007523E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999089077244763	WITHOUT_CLASSIFICATION	9.109227552382546E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999925891568082	WITHOUT_CLASSIFICATION	7.410843191697636E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999699606321371	WITHOUT_CLASSIFICATION	3.003936786292821E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999841085980563	WITHOUT_CLASSIFICATION	1.589140194368779E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999561975950583	WITHOUT_CLASSIFICATION	4.380240494175833E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999561975950583	WITHOUT_CLASSIFICATION	4.380240494175833E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999480426574255	WITHOUT_CLASSIFICATION	5.195734257451515E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.999993790825326	WITHOUT_CLASSIFICATION	6.2091746739215995E-6	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9839280026757314	WITHOUT_CLASSIFICATION	0.01607199732426866	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999795234546124	WITHOUT_CLASSIFICATION	2.0476545387597224E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999621077052868	WITHOUT_CLASSIFICATION	3.7892294713229795E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999944539553723	WITHOUT_CLASSIFICATION	5.5460446277128934E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999357453502237	WITHOUT_CLASSIFICATION	6.425464977630859E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999827558385454	WITHOUT_CLASSIFICATION	1.724416145459638E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9998909998332572	WITHOUT_CLASSIFICATION	1.0900016674282344E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997094998987829	WITHOUT_CLASSIFICATION	2.90500101217123E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999932408499107	WITHOUT_CLASSIFICATION	6.75915008924755E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999791227012038	WITHOUT_CLASSIFICATION	2.0877298796178792E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997796178862863	WITHOUT_CLASSIFICATION	2.2038211371370523E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999797731288552	WITHOUT_CLASSIFICATION	2.0226871144778648E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999185113671811	WITHOUT_CLASSIFICATION	8.148863281886842E-5	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999077859718193	WITHOUT_CLASSIFICATION	9.221402818071207E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999814474699468	WITHOUT_CLASSIFICATION	1.855253005327258E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999632409125156	WITHOUT_CLASSIFICATION	3.675908748433038E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999632409125156	WITHOUT_CLASSIFICATION	3.675908748433038E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996618161917706	WITHOUT_CLASSIFICATION	3.3818380822934715E-4	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999909548155224	WITHOUT_CLASSIFICATION	9.045184477630277E-6	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999965065452748	WITHOUT_CLASSIFICATION	3.493454725097166E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901140870936	WITHOUT_CLASSIFICATION	9.885912906459655E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997880258463168	WITHOUT_CLASSIFICATION	2.119741536832798E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997880258463168	WITHOUT_CLASSIFICATION	2.119741536832798E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999968562335704	WITHOUT_CLASSIFICATION	3.143766429603989E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.999999845105288	WITHOUT_CLASSIFICATION	1.5489471189678334E-7	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999070399043797	WITHOUT_CLASSIFICATION	9.29600956203065E-5	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9997843005854291	WITHOUT_CLASSIFICATION	2.156994145709369E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999611954230234	WITHOUT_CLASSIFICATION	3.880457697667704E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999909027785344	WITHOUT_CLASSIFICATION	9.097221465562214E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999818131504458	WITHOUT_CLASSIFICATION	1.8186849554148464E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9991331719367289	WITHOUT_CLASSIFICATION	8.66828063271157E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.999995860085019	WITHOUT_CLASSIFICATION	4.139914980991149E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999362663300704	WITHOUT_CLASSIFICATION	6.373366992959634E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999709014670536	WITHOUT_CLASSIFICATION	2.9098532946373588E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9985839632263608	WITHOUT_CLASSIFICATION	0.0014160367736392465	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999870867705866	WITHOUT_CLASSIFICATION	1.2913229413332417E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.99999989058249	WITHOUT_CLASSIFICATION	1.0941751004314958E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999933971613963	WITHOUT_CLASSIFICATION	6.602838603660097E-6	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999803947104808	WITHOUT_CLASSIFICATION	1.960528951910519E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999666173366726	WITHOUT_CLASSIFICATION	3.338266332737875E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997279737175351	WITHOUT_CLASSIFICATION	2.720262824648499E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.999713738891048	WITHOUT_CLASSIFICATION	2.8626110895205826E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.999968412436055	WITHOUT_CLASSIFICATION	3.1587563944911644E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999646095220205	WITHOUT_CLASSIFICATION	3.539047797949252E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999655973734732	WITHOUT_CLASSIFICATION	3.440262652669619E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999186770643528	WITHOUT_CLASSIFICATION	8.132293564721192E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999769239825445	WITHOUT_CLASSIFICATION	2.3076017455481827E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9991594207158265	WITHOUT_CLASSIFICATION	8.405792841735666E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9969196683052215	WITHOUT_CLASSIFICATION	0.0030803316947785107	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997079908805608	WITHOUT_CLASSIFICATION	2.920091194390868E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9998824208377219	WITHOUT_CLASSIFICATION	1.1757916227814651E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999954025390259	WITHOUT_CLASSIFICATION	4.597460974139293E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999585349301435	WITHOUT_CLASSIFICATION	4.1465069856465193E-5	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.999324922715123	WITHOUT_CLASSIFICATION	6.750772848770208E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999448744400011	WITHOUT_CLASSIFICATION	5.512555999890341E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999506368711403	WITHOUT_CLASSIFICATION	4.936312885965649E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999219235920385	WITHOUT_CLASSIFICATION	7.807640796162773E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9824681363271505	WITHOUT_CLASSIFICATION	0.01753186367284953	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998493991682921	WITHOUT_CLASSIFICATION	1.5060083170800808E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9996923612881511	WITHOUT_CLASSIFICATION	3.076387118488956E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9989579966999805	WITHOUT_CLASSIFICATION	0.0010420033000195137	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999236647748016	WITHOUT_CLASSIFICATION	7.633522519839756E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999775077269671	WITHOUT_CLASSIFICATION	2.249227303285364E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999676235783616	WITHOUT_CLASSIFICATION	3.2376421638407406E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999490899917945	WITHOUT_CLASSIFICATION	5.091000820549773E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999878428416189	WITHOUT_CLASSIFICATION	1.215715838104269E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9998861242421953	WITHOUT_CLASSIFICATION	1.1387575780478475E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9994118049249153	WITHOUT_CLASSIFICATION	5.881950750848101E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9994118049249153	WITHOUT_CLASSIFICATION	5.881950750848101E-4	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999847515135929	WITHOUT_CLASSIFICATION	1.524848640699213E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9994039546503612	WITHOUT_CLASSIFICATION	5.96045349638766E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9997994190996436	WITHOUT_CLASSIFICATION	2.0058090035640007E-4	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9995410697777805	WITHOUT_CLASSIFICATION	4.589302222195771E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999979333306038	WITHOUT_CLASSIFICATION	2.0666693961325924E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999979333306038	WITHOUT_CLASSIFICATION	2.0666693961325924E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9987749588724327	WITHOUT_CLASSIFICATION	0.0012250411275672817	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9996278067056431	WITHOUT_CLASSIFICATION	3.7219329435684163E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999677703349622	WITHOUT_CLASSIFICATION	3.2229665037873545E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999991408123319	WITHOUT_CLASSIFICATION	8.59187668110109E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999443145366012	WITHOUT_CLASSIFICATION	5.5685463398963516E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999443145366012	WITHOUT_CLASSIFICATION	5.5685463398963516E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999741156962879	WITHOUT_CLASSIFICATION	2.588430371203907E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999741156962879	WITHOUT_CLASSIFICATION	2.588430371203907E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999751501659259	WITHOUT_CLASSIFICATION	2.4849834074053465E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999447229363104	WITHOUT_CLASSIFICATION	5.527706368950579E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999674147994337	WITHOUT_CLASSIFICATION	3.2585200566199886E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998237994057139	WITHOUT_CLASSIFICATION	1.7620059428612294E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998860643075442	WITHOUT_CLASSIFICATION	1.1393569245581155E-4	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9998652789253217	WITHOUT_CLASSIFICATION	1.3472107467830523E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.999967937737213	WITHOUT_CLASSIFICATION	3.206226278693929E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999693400524122	WITHOUT_CLASSIFICATION	3.06599475877891E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999734280301734	WITHOUT_CLASSIFICATION	2.6571969826572234E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999593209690935	WITHOUT_CLASSIFICATION	4.0679030906574346E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9965167670358754	WITHOUT_CLASSIFICATION	0.0034832329641246544	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.999977754630305	WITHOUT_CLASSIFICATION	2.224536969491874E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.999959162756388	WITHOUT_CLASSIFICATION	4.083724361214837E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999227509129661	WITHOUT_CLASSIFICATION	7.724908703388603E-5	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999994389444011	WITHOUT_CLASSIFICATION	5.610555987370364E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998961504721111	WITHOUT_CLASSIFICATION	1.0384952788880823E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999207965286944	WITHOUT_CLASSIFICATION	7.920347130553115E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998627912380256	WITHOUT_CLASSIFICATION	1.3720876197447252E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999390234723249	WITHOUT_CLASSIFICATION	6.0976527675183124E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999542243893437	WITHOUT_CLASSIFICATION	4.5775610656403686E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9956545748644973	WITHOUT_CLASSIFICATION	0.004345425135502733	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999974806274288	WITHOUT_CLASSIFICATION	2.5193725711947364E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999678329743782	WITHOUT_CLASSIFICATION	3.216702562192469E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999758226033257	WITHOUT_CLASSIFICATION	2.417739667427058E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9996844570036393	WITHOUT_CLASSIFICATION	3.155429963607102E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999768517827776	WITHOUT_CLASSIFICATION	2.314821722237226E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999780496625214	WITHOUT_CLASSIFICATION	2.195033747871135E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9998929869349029	WITHOUT_CLASSIFICATION	1.0701306509697122E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9998023170860482	WITHOUT_CLASSIFICATION	1.9768291395188086E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999902443418758	WITHOUT_CLASSIFICATION	9.75565812421709E-6	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9997931427576576	WITHOUT_CLASSIFICATION	2.0685724234243325E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998768630381556	WITHOUT_CLASSIFICATION	1.2313696184440545E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9997344668419259	WITHOUT_CLASSIFICATION	2.655331580741049E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999439433186539	WITHOUT_CLASSIFICATION	5.6056681346050496E-5	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9985829077144337	WITHOUT_CLASSIFICATION	0.001417092285566286	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999897357045363	WITHOUT_CLASSIFICATION	1.0264295463725083E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999280171333564	WITHOUT_CLASSIFICATION	7.198286664360061E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999845461419435	WITHOUT_CLASSIFICATION	1.545385805646031E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9899628873750295	WITHOUT_CLASSIFICATION	0.010037112624970528	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999978479680967	WITHOUT_CLASSIFICATION	2.1520319033961193E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998397081742624	WITHOUT_CLASSIFICATION	1.602918257377389E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9994485275786767	WITHOUT_CLASSIFICATION	5.514724213233171E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.999951002700307	WITHOUT_CLASSIFICATION	4.899729969293204E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9964277372789395	WITHOUT_CLASSIFICATION	0.0035722627210603964	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9998960518793492	WITHOUT_CLASSIFICATION	1.03948120650766E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999765277959294	WITHOUT_CLASSIFICATION	2.347220407065646E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998849780965098	WITHOUT_CLASSIFICATION	1.1502190349024967E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999624664426463	WITHOUT_CLASSIFICATION	3.75335573536799E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999648033893708	WITHOUT_CLASSIFICATION	3.519661062921528E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999745568187328	WITHOUT_CLASSIFICATION	2.544318126725293E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999745568187328	WITHOUT_CLASSIFICATION	2.544318126725293E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999977612233892	WITHOUT_CLASSIFICATION	2.238776610793181E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999977612233892	WITHOUT_CLASSIFICATION	2.238776610793181E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995946056554003	WITHOUT_CLASSIFICATION	4.053943445996967E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995946056554003	WITHOUT_CLASSIFICATION	4.053943445996967E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999237362914792	WITHOUT_CLASSIFICATION	7.626370852079927E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999237362914792	WITHOUT_CLASSIFICATION	7.626370852079927E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9998662703718991	WITHOUT_CLASSIFICATION	1.3372962810088513E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9998662703718991	WITHOUT_CLASSIFICATION	1.3372962810088513E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9998662703718991	WITHOUT_CLASSIFICATION	1.3372962810088513E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999373263768184	WITHOUT_CLASSIFICATION	6.267362318150672E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999456028100295	WITHOUT_CLASSIFICATION	5.439718997035337E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998215171718262	WITHOUT_CLASSIFICATION	1.784828281736847E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998215171718262	WITHOUT_CLASSIFICATION	1.784828281736847E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998215171718262	WITHOUT_CLASSIFICATION	1.784828281736847E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998852795818072	WITHOUT_CLASSIFICATION	1.1472041819275393E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999658331874675	WITHOUT_CLASSIFICATION	3.4166812532435206E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998909150998639	WITHOUT_CLASSIFICATION	1.0908490013603444E-4	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999815509205371	WITHOUT_CLASSIFICATION	1.8449079462930918E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999815509205371	WITHOUT_CLASSIFICATION	1.8449079462930918E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997549096523483	WITHOUT_CLASSIFICATION	2.450903476517519E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999981760452585	WITHOUT_CLASSIFICATION	1.8239547415730437E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999981760452585	WITHOUT_CLASSIFICATION	1.8239547415730437E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8561304881801892	DEFECT	0.14386951181981084	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9990988069832171	WITHOUT_CLASSIFICATION	9.011930167828954E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999418438424001	WITHOUT_CLASSIFICATION	5.8156157599855756E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9995712197440821	WITHOUT_CLASSIFICATION	4.2878025591797526E-4	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999871604829842	WITHOUT_CLASSIFICATION	1.2839517015709694E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999989023055315	WITHOUT_CLASSIFICATION	1.0976944685121192E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9985162579693386	WITHOUT_CLASSIFICATION	0.0014837420306613807	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9993298560995284	WITHOUT_CLASSIFICATION	6.701439004717074E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999510248400887	WITHOUT_CLASSIFICATION	4.897515991121512E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999878281228203	WITHOUT_CLASSIFICATION	1.2171877179673943E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999585503532245	WITHOUT_CLASSIFICATION	4.144964677549044E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9993289004334482	WITHOUT_CLASSIFICATION	6.710995665518689E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999834725789806	WITHOUT_CLASSIFICATION	1.6527421019396914E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999343824479109	WITHOUT_CLASSIFICATION	6.561755208915135E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9998024631413445	WITHOUT_CLASSIFICATION	1.9753685865551206E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.8577991800206901	DEFECT	0.14220081997930997	WITHOUT_CLASSIFICATION
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9754871089063866	WITHOUT_CLASSIFICATION	0.024512891093613473	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999811643728401	WITHOUT_CLASSIFICATION	1.8835627159775788E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999819168741234	WITHOUT_CLASSIFICATION	1.8083125876575052E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998614966762451	WITHOUT_CLASSIFICATION	1.3850332375493584E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9998310000928236	WITHOUT_CLASSIFICATION	1.689999071764686E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999557221135872	WITHOUT_CLASSIFICATION	4.4277886412679765E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.999987959822398	WITHOUT_CLASSIFICATION	1.204017760203514E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9984067053182125	WITHOUT_CLASSIFICATION	0.0015932946817874781	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9680148993510336	WITHOUT_CLASSIFICATION	0.03198510064896652	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9998729098436888	WITHOUT_CLASSIFICATION	1.270901563111346E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999996574748581	WITHOUT_CLASSIFICATION	3.4252514188306153E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999489206596772	WITHOUT_CLASSIFICATION	5.107934032273746E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999881022761541	WITHOUT_CLASSIFICATION	1.1897723845857495E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9992613945484048	WITHOUT_CLASSIFICATION	7.386054515953345E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999442470865624	WITHOUT_CLASSIFICATION	5.575291343756563E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.999992062715882	WITHOUT_CLASSIFICATION	7.937284117956855E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998602972862769	WITHOUT_CLASSIFICATION	1.3970271372302226E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998602972862769	WITHOUT_CLASSIFICATION	1.3970271372302226E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998602972862769	WITHOUT_CLASSIFICATION	1.3970271372302226E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998602972862769	WITHOUT_CLASSIFICATION	1.3970271372302226E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999967115987751	WITHOUT_CLASSIFICATION	3.2884012249250615E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9998359507176612	WITHOUT_CLASSIFICATION	1.6404928233880028E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999380299148727	WITHOUT_CLASSIFICATION	6.197008512738786E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999380299148727	WITHOUT_CLASSIFICATION	6.197008512738786E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999691444208755	WITHOUT_CLASSIFICATION	3.085557912458042E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999013322125142	WITHOUT_CLASSIFICATION	9.866778748583688E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998978455990719	WITHOUT_CLASSIFICATION	1.0215440092810914E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999996842196766	WITHOUT_CLASSIFICATION	3.157803234080464E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9988997915444744	WITHOUT_CLASSIFICATION	0.0011002084555256212	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.999511289579021	WITHOUT_CLASSIFICATION	4.88710420978937E-4	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999679163917072	WITHOUT_CLASSIFICATION	3.208360829270122E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999908692139444	WITHOUT_CLASSIFICATION	9.130786055627182E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999908692139444	WITHOUT_CLASSIFICATION	9.130786055627182E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999908692139444	WITHOUT_CLASSIFICATION	9.130786055627182E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999908692139444	WITHOUT_CLASSIFICATION	9.130786055627182E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999963547552881	WITHOUT_CLASSIFICATION	3.645244711838545E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9989726171489474	WITHOUT_CLASSIFICATION	0.0010273828510526744	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9989726171489474	WITHOUT_CLASSIFICATION	0.0010273828510526744	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9989726171489474	WITHOUT_CLASSIFICATION	0.0010273828510526744	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998739794179242	WITHOUT_CLASSIFICATION	1.2602058207572902E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999626732105197	WITHOUT_CLASSIFICATION	3.732678948034727E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999968440452045	WITHOUT_CLASSIFICATION	3.1559547954039872E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9987912296137549	WITHOUT_CLASSIFICATION	0.0012087703862450913	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9931626876508001	WITHOUT_CLASSIFICATION	0.006837312349199894	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9995965141906379	WITHOUT_CLASSIFICATION	4.0348580936217383E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9995965141906379	WITHOUT_CLASSIFICATION	4.0348580936217383E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998584654814247	WITHOUT_CLASSIFICATION	1.4153451857525155E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998584654814247	WITHOUT_CLASSIFICATION	1.4153451857525155E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999993309866665	WITHOUT_CLASSIFICATION	6.690133335391497E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999994371573523	WITHOUT_CLASSIFICATION	5.628426477140188E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998824134200758	WITHOUT_CLASSIFICATION	1.1758657992415028E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9873687841928803	WITHOUT_CLASSIFICATION	0.012631215807119784	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999398422912298	WITHOUT_CLASSIFICATION	6.015770877016732E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999978765367743	WITHOUT_CLASSIFICATION	2.1234632256724294E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.999893488219092	WITHOUT_CLASSIFICATION	1.0651178090806418E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999308000397618	WITHOUT_CLASSIFICATION	6.919996023827294E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9995636095988039	WITHOUT_CLASSIFICATION	4.3639040119614064E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999976520488321	WITHOUT_CLASSIFICATION	2.3479511679308475E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999976520488321	WITHOUT_CLASSIFICATION	2.3479511679308475E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.999981755462499	WITHOUT_CLASSIFICATION	1.824453750097449E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.999981755462499	WITHOUT_CLASSIFICATION	1.824453750097449E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9993826413923643	WITHOUT_CLASSIFICATION	6.173586076356084E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998839787574352	WITHOUT_CLASSIFICATION	1.1602124256484797E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999957015562546	WITHOUT_CLASSIFICATION	4.298443745402525E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9991213093832797	WITHOUT_CLASSIFICATION	8.786906167202828E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9991213093832797	WITHOUT_CLASSIFICATION	8.786906167202828E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9991213093832797	WITHOUT_CLASSIFICATION	8.786906167202828E-4	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999584666449024	WITHOUT_CLASSIFICATION	4.153335509758605E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9997441790639366	WITHOUT_CLASSIFICATION	2.55820936063322E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9995714298520133	WITHOUT_CLASSIFICATION	4.285701479867065E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9997656572339169	WITHOUT_CLASSIFICATION	2.343427660830451E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9957257339357716	WITHOUT_CLASSIFICATION	0.004274266064228465	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999875935051175	WITHOUT_CLASSIFICATION	1.240649488267588E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9752796576962667	WITHOUT_CLASSIFICATION	0.024720342303733312	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999217950226283	WITHOUT_CLASSIFICATION	7.820497737160444E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998954980029965	WITHOUT_CLASSIFICATION	1.0450199700350275E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.999966568233443	WITHOUT_CLASSIFICATION	3.34317665570625E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999360949846511	WITHOUT_CLASSIFICATION	6.390501534891399E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996763519944197	WITHOUT_CLASSIFICATION	3.2364800558030434E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999803021740928	WITHOUT_CLASSIFICATION	1.9697825907231597E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9995970676130009	WITHOUT_CLASSIFICATION	4.029323869990757E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9801225099711955	WITHOUT_CLASSIFICATION	0.019877490028804432	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9977791365580845	WITHOUT_CLASSIFICATION	0.0022208634419156	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9996690813194093	WITHOUT_CLASSIFICATION	3.309186805906537E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999506280484861	WITHOUT_CLASSIFICATION	4.9371951513990604E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999868633977316	WITHOUT_CLASSIFICATION	1.3136602268310933E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999309401638073	WITHOUT_CLASSIFICATION	6.905983619269868E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999656341710839	WITHOUT_CLASSIFICATION	3.4365828916139234E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999746227808882	WITHOUT_CLASSIFICATION	2.537721911182355E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9954439135978272	WITHOUT_CLASSIFICATION	0.004556086402172712	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9988381789746434	WITHOUT_CLASSIFICATION	0.0011618210253565404	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.999974708279282	WITHOUT_CLASSIFICATION	2.5291720717904626E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999807175471789	WITHOUT_CLASSIFICATION	1.9282452821138383E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.97914151178189	WITHOUT_CLASSIFICATION	0.020858488218110077	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.8814065102634496	WITHOUT_CLASSIFICATION	0.11859348973655039	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9997696622879988	WITHOUT_CLASSIFICATION	2.3033771200125762E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999291709192464	WITHOUT_CLASSIFICATION	7.08290807536655E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999307264600229	WITHOUT_CLASSIFICATION	6.927353997715366E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999654045548563	WITHOUT_CLASSIFICATION	3.459544514376867E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9998871365148003	WITHOUT_CLASSIFICATION	1.1286348519968529E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9988829832746668	WITHOUT_CLASSIFICATION	0.0011170167253332255	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9954359430748646	WITHOUT_CLASSIFICATION	0.004564056925135461	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996391359981086	WITHOUT_CLASSIFICATION	3.608640018914125E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996391359981086	WITHOUT_CLASSIFICATION	3.608640018914125E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9991250870798731	WITHOUT_CLASSIFICATION	8.74912920126784E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868287450483	WITHOUT_CLASSIFICATION	1.317125495182271E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868287450483	WITHOUT_CLASSIFICATION	1.317125495182271E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9998493620737088	WITHOUT_CLASSIFICATION	1.5063792629122332E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999769241059105	WITHOUT_CLASSIFICATION	2.3075894089460436E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998966598602177	WITHOUT_CLASSIFICATION	1.0334013978223437E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999978467511597	WITHOUT_CLASSIFICATION	2.1532488402974442E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999978467511597	WITHOUT_CLASSIFICATION	2.1532488402974442E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999973531273757	WITHOUT_CLASSIFICATION	2.646872624298867E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9994243331601934	WITHOUT_CLASSIFICATION	5.756668398065079E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9994243331601934	WITHOUT_CLASSIFICATION	5.756668398065079E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9997517172648315	WITHOUT_CLASSIFICATION	2.482827351684807E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.7640542366541409	DEFECT	0.23594576334585923	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9998927784643311	WITHOUT_CLASSIFICATION	1.0722153566893314E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999903639210672	WITHOUT_CLASSIFICATION	9.636078932753316E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999380426940145	WITHOUT_CLASSIFICATION	6.195730598544726E-5	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998749623681502	WITHOUT_CLASSIFICATION	1.2503763184973325E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999892398124609	WITHOUT_CLASSIFICATION	1.0760187539079608E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.999978467233562	WITHOUT_CLASSIFICATION	2.1532766437961786E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9996714888661875	WITHOUT_CLASSIFICATION	3.2851113381243837E-4	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9996161197922818	WITHOUT_CLASSIFICATION	3.838802077181709E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9992974369188949	WITHOUT_CLASSIFICATION	7.025630811050541E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999740496866636	WITHOUT_CLASSIFICATION	2.5950313336377814E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999848999250545	WITHOUT_CLASSIFICATION	1.5100074945475776E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999731804750474	WITHOUT_CLASSIFICATION	2.681952495255781E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.999815876565506	WITHOUT_CLASSIFICATION	1.8412343449392046E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999552429192935	WITHOUT_CLASSIFICATION	4.4757080706633805E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999869320227695	WITHOUT_CLASSIFICATION	1.3067977230497307E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.995674900660203	WITHOUT_CLASSIFICATION	0.004325099339796913	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971295419434	WITHOUT_CLASSIFICATION	2.870458056605633E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971295419434	WITHOUT_CLASSIFICATION	2.870458056605633E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9998671612144238	WITHOUT_CLASSIFICATION	1.3283878557628984E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999582182225749	WITHOUT_CLASSIFICATION	4.178177742505558E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9996232852030444	WITHOUT_CLASSIFICATION	3.767147969556373E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996723859312876	WITHOUT_CLASSIFICATION	3.2761406871229686E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999397052794606	WITHOUT_CLASSIFICATION	6.029472053930003E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999397052794606	WITHOUT_CLASSIFICATION	6.029472053930003E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999397052794606	WITHOUT_CLASSIFICATION	6.029472053930003E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999952903225953	WITHOUT_CLASSIFICATION	4.709677404716903E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997586370036294	WITHOUT_CLASSIFICATION	2.4136299637054844E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999752421705143	WITHOUT_CLASSIFICATION	2.4757829485639586E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999931737490154	WITHOUT_CLASSIFICATION	6.8262509845015784E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999967034834433	WITHOUT_CLASSIFICATION	3.2965165567540783E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999546561032007	WITHOUT_CLASSIFICATION	4.534389679942378E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9998993895687357	WITHOUT_CLASSIFICATION	1.0061043126418418E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9990356630799997	WITHOUT_CLASSIFICATION	9.643369200002939E-4	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998905879514932	WITHOUT_CLASSIFICATION	1.0941204850678826E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999941811184427	WITHOUT_CLASSIFICATION	5.818881557263703E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999515211110702	WITHOUT_CLASSIFICATION	4.84788889298086E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999929315291135	WITHOUT_CLASSIFICATION	7.068470886377217E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8967222713780126	WITHOUT_CLASSIFICATION	0.10327772862198731	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998761570272378	WITHOUT_CLASSIFICATION	1.2384297276221413E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999941420556383	WITHOUT_CLASSIFICATION	5.8579443617172825E-6	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999030372141414	WITHOUT_CLASSIFICATION	9.696278585859717E-5	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999927799668494	WITHOUT_CLASSIFICATION	7.220033150616545E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999927872535539	WITHOUT_CLASSIFICATION	7.212746446089133E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999806425247745	WITHOUT_CLASSIFICATION	1.9357475225414963E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9440064012130424	WITHOUT_CLASSIFICATION	0.05599359878695751	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9974605901107074	DEFECT	0.0025394098892926225	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9228870524964239	WITHOUT_CLASSIFICATION	0.07711294750357618	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9998086017012532	DEFECT	1.9139829874674093E-4	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9898040445436377	DEFECT	0.010195955456362241	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9968222351414401	WITHOUT_CLASSIFICATION	0.003177764858559885	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9604253372323822	WITHOUT_CLASSIFICATION	0.039574662767617855	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9542642865230844	WITHOUT_CLASSIFICATION	0.04573571347691572	DEFECT
// FIXME: not correct exception	DEFECT	0.5426698378022559	DEFECT	0.4573301621977442	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9988558664430746	WITHOUT_CLASSIFICATION	0.0011441335569253935	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9955429864251598	WITHOUT_CLASSIFICATION	0.004457013574840229	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.5070411740695723	DEFECT	0.4929588259304277	WITHOUT_CLASSIFICATION
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9844137362750623	WITHOUT_CLASSIFICATION	0.015586263724937573	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9778964628115272	DEFECT	0.022103537188472768	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9186350762658574	WITHOUT_CLASSIFICATION	0.08136492373414257	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9733421971312766	WITHOUT_CLASSIFICATION	0.026657802868723456	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9733421971312766	WITHOUT_CLASSIFICATION	0.026657802868723456	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.7553207914017714	WITHOUT_CLASSIFICATION	0.24467920859822853	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9988070030197451	WITHOUT_CLASSIFICATION	0.0011929969802547868	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9868000963280247	WITHOUT_CLASSIFICATION	0.013199903671975276	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998967125743509	WITHOUT_CLASSIFICATION	1.0328742564920848E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998967125743509	WITHOUT_CLASSIFICATION	1.0328742564920848E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.736607068674407	WITHOUT_CLASSIFICATION	0.26339293132559316	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9538135060332361	WITHOUT_CLASSIFICATION	0.04618649396676397	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9620505550319675	WITHOUT_CLASSIFICATION	0.03794944496803251	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7723544827345975	WITHOUT_CLASSIFICATION	0.2276455172654026	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.6404920299658193	WITHOUT_CLASSIFICATION	0.35950797003418067	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6217795823584558	WITHOUT_CLASSIFICATION	0.3782204176415442	DEFECT
// TODO: proper sign	DEFECT	0.9395262591338485	WITHOUT_CLASSIFICATION	0.06047374086615156	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.8046272058889682	DEFECT	0.1953727941110319	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.8051881240776572	WITHOUT_CLASSIFICATION	0.19481187592234275	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.5976730733072069	DEFECT	0.402326926692793	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8949633260270192	WITHOUT_CLASSIFICATION	0.1050366739729808	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.6541277632367913	WITHOUT_CLASSIFICATION	0.34587223676320866	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.742273826617883	DEFECT	0.25772617338211695	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.7061288423873618	WITHOUT_CLASSIFICATION	0.2938711576126381	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9064074974124171	WITHOUT_CLASSIFICATION	0.09359250258758296	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9758267234320627	WITHOUT_CLASSIFICATION	0.02417327656793743	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9908193850854319	WITHOUT_CLASSIFICATION	0.009180614914568067	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.79894779927066	WITHOUT_CLASSIFICATION	0.20105220072934	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9979853534274655	WITHOUT_CLASSIFICATION	0.0020146465725344406	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9997174188954967	WITHOUT_CLASSIFICATION	2.8258110450333547E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9200847781513506	WITHOUT_CLASSIFICATION	0.07991522184864941	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9200847781513506	WITHOUT_CLASSIFICATION	0.07991522184864941	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9857265777860852	WITHOUT_CLASSIFICATION	0.014273422213914885	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9748756369903181	WITHOUT_CLASSIFICATION	0.025124363009681946	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.685438930625799	DEFECT	0.3145610693742011	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9975347147130543	WITHOUT_CLASSIFICATION	0.002465285286945558	DEFECT
// FIXME: This is wrong	DEFECT	0.7702802403766125	WITHOUT_CLASSIFICATION	0.22971975962338748	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9900479435020673	WITHOUT_CLASSIFICATION	0.009952056497932774	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999381172120507	WITHOUT_CLASSIFICATION	6.188278794927981E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8831682897957117	WITHOUT_CLASSIFICATION	0.11683171020428822	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9986621159800376	WITHOUT_CLASSIFICATION	0.0013378840199623234	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9975399180034344	WITHOUT_CLASSIFICATION	0.002460081996565672	DEFECT
// FIXME: Broken but behaving	DEFECT	0.982992105149209	DEFECT	0.017007894850791024	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9050892721606081	DEFECT	0.09491072783939195	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9050892721606081	DEFECT	0.09491072783939195	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.7671616712872087	WITHOUT_CLASSIFICATION	0.23283832871279128	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.979736158613399	WITHOUT_CLASSIFICATION	0.02026384138660107	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.998419181289352	WITHOUT_CLASSIFICATION	0.001580818710647905	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9660434716552655	DEFECT	0.03395652834473459	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9725991005038019	DEFECT	0.027400899496198134	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9646598152006386	WITHOUT_CLASSIFICATION	0.035340184799361324	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.7548788987588296	WITHOUT_CLASSIFICATION	0.24512110124117034	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9857265777860852	WITHOUT_CLASSIFICATION	0.014273422213914885	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9990120166107108	WITHOUT_CLASSIFICATION	9.87983389289195E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.758272152042931	WITHOUT_CLASSIFICATION	0.2417278479570691	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.8143912809381011	WITHOUT_CLASSIFICATION	0.18560871906189894	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7723544827345975	WITHOUT_CLASSIFICATION	0.2276455172654026	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9394407607043392	DEFECT	0.06055923929566078	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.6217004150239877	DEFECT	0.37829958497601224	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9758267234320627	WITHOUT_CLASSIFICATION	0.02417327656793743	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9996676435452361	WITHOUT_CLASSIFICATION	3.3235645476388385E-4	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// FIXME: Broken but behaving	DEFECT	0.982992105149209	DEFECT	0.017007894850791024	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.947610021407875	DEFECT	0.05238997859212494	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// TODO: don't require pop	DEFECT	0.8768203425119772	WITHOUT_CLASSIFICATION	0.12317965748802287	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8831682897957117	WITHOUT_CLASSIFICATION	0.11683171020428822	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9766282336833971	WITHOUT_CLASSIFICATION	0.023371766316602788	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9050892721606081	DEFECT	0.09491072783939195	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9050892721606081	DEFECT	0.09491072783939195	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9996371646495295	WITHOUT_CLASSIFICATION	3.628353504705752E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9928532936956117	WITHOUT_CLASSIFICATION	0.007146706304388312	DEFECT
