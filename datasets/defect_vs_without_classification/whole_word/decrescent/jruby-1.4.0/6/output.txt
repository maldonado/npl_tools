// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999927853193674	WITHOUT_CLASSIFICATION	7.214680632650559E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9998935691059011	WITHOUT_CLASSIFICATION	1.0643089409894807E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.99954037023806	WITHOUT_CLASSIFICATION	4.5962976194001946E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999732677631306	WITHOUT_CLASSIFICATION	2.6732236869424436E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999732677631306	WITHOUT_CLASSIFICATION	2.6732236869424436E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9997117734280846	WITHOUT_CLASSIFICATION	2.882265719154572E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999696692344723	WITHOUT_CLASSIFICATION	3.0330765527646552E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9996930912294301	WITHOUT_CLASSIFICATION	3.069087705699057E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9996960132561887	WITHOUT_CLASSIFICATION	3.039867438112125E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999598892357687	WITHOUT_CLASSIFICATION	4.0110764231303024E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999945841586436	WITHOUT_CLASSIFICATION	5.415841356406181E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999945841586436	WITHOUT_CLASSIFICATION	5.415841356406181E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999945841586436	WITHOUT_CLASSIFICATION	5.415841356406181E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999945841586436	WITHOUT_CLASSIFICATION	5.415841356406181E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9989014751999525	WITHOUT_CLASSIFICATION	0.0010985248000474168	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9998347895519724	WITHOUT_CLASSIFICATION	1.652104480275688E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9998653129407414	WITHOUT_CLASSIFICATION	1.346870592586054E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9998746866762749	WITHOUT_CLASSIFICATION	1.2531332372517625E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999367413665788	WITHOUT_CLASSIFICATION	6.325863342120257E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999595795078142	WITHOUT_CLASSIFICATION	4.042049218587952E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999786727869631	WITHOUT_CLASSIFICATION	2.132721303699111E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999908661498922	WITHOUT_CLASSIFICATION	9.133850107800994E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999783328227565	WITHOUT_CLASSIFICATION	2.166717724353913E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9974972070790282	WITHOUT_CLASSIFICATION	0.002502792920971698	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9998427549987923	WITHOUT_CLASSIFICATION	1.5724500120768576E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999831052761559	WITHOUT_CLASSIFICATION	1.6894723844227366E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.99961108834803	WITHOUT_CLASSIFICATION	3.88911651969969E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999593431053241	WITHOUT_CLASSIFICATION	4.0656894675862636E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999050968665827	WITHOUT_CLASSIFICATION	9.490313341733422E-5	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9989138668439485	WITHOUT_CLASSIFICATION	0.0010861331560515438	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999910762032955	WITHOUT_CLASSIFICATION	8.923796704596571E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999945841586436	WITHOUT_CLASSIFICATION	5.415841356406181E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998885886764873	WITHOUT_CLASSIFICATION	1.1141132351267857E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999952743368103	WITHOUT_CLASSIFICATION	4.725663189712672E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998886658130233	WITHOUT_CLASSIFICATION	1.1133418697671296E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9998138526881333	WITHOUT_CLASSIFICATION	1.8614731186683783E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998995144418646	WITHOUT_CLASSIFICATION	1.004855581354224E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999073729200215	WITHOUT_CLASSIFICATION	9.262707997843886E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.999958309008598	WITHOUT_CLASSIFICATION	4.16909914021572E-5	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999915355950365	WITHOUT_CLASSIFICATION	8.464404963443085E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999216453438612	WITHOUT_CLASSIFICATION	7.83546561388167E-5	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998316912976156	WITHOUT_CLASSIFICATION	1.6830870238431528E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.997888536509052	WITHOUT_CLASSIFICATION	0.002111463490947967	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.999874124834238	WITHOUT_CLASSIFICATION	1.2587516576205934E-4	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9996286834981274	WITHOUT_CLASSIFICATION	3.713165018726419E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999083043925806	WITHOUT_CLASSIFICATION	9.16956074194166E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.999684698053858	WITHOUT_CLASSIFICATION	3.1530194614200826E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.999743578887215	WITHOUT_CLASSIFICATION	2.5642111278500074E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9998207906099921	WITHOUT_CLASSIFICATION	1.7920939000792754E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9970549734405192	WITHOUT_CLASSIFICATION	0.002945026559480838	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999416139450062	WITHOUT_CLASSIFICATION	5.838605499371086E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9995393751553152	WITHOUT_CLASSIFICATION	4.6062484468482136E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999928228509793	WITHOUT_CLASSIFICATION	7.177149020597563E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999322664859995	WITHOUT_CLASSIFICATION	6.773351400049803E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999441069236502	WITHOUT_CLASSIFICATION	5.589307634982152E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.999962884001543	WITHOUT_CLASSIFICATION	3.7115998456924554E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9991558054279573	WITHOUT_CLASSIFICATION	8.441945720426462E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.99972549776446	WITHOUT_CLASSIFICATION	2.745022355399767E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998450984970917	WITHOUT_CLASSIFICATION	1.5490150290820023E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9992731950969806	WITHOUT_CLASSIFICATION	7.268049030193835E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9998772048706204	WITHOUT_CLASSIFICATION	1.227951293795398E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999884838840755	WITHOUT_CLASSIFICATION	1.1516115924531257E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9992023400886774	WITHOUT_CLASSIFICATION	7.976599113225908E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.999765682925487	WITHOUT_CLASSIFICATION	2.3431707451314693E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9998805211260609	WITHOUT_CLASSIFICATION	1.1947887393927735E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999046961092672	WITHOUT_CLASSIFICATION	9.530389073271453E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999448559187529	WITHOUT_CLASSIFICATION	5.5144081246950986E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995708218334743	WITHOUT_CLASSIFICATION	4.2917816652570236E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9994706267631677	WITHOUT_CLASSIFICATION	5.293732368323441E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9994706267631677	WITHOUT_CLASSIFICATION	5.293732368323441E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999899117917328	WITHOUT_CLASSIFICATION	1.0088208267209447E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9994352520888565	WITHOUT_CLASSIFICATION	5.647479111434317E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999722822956676	WITHOUT_CLASSIFICATION	2.7717704332446644E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9983436963268668	WITHOUT_CLASSIFICATION	0.0016563036731332456	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9985127296423517	WITHOUT_CLASSIFICATION	0.0014872703576482545	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.991265673737012	WITHOUT_CLASSIFICATION	0.008734326262988007	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9997147402808245	WITHOUT_CLASSIFICATION	2.852597191754841E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9996915299024327	WITHOUT_CLASSIFICATION	3.084700975673666E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999591741862481	WITHOUT_CLASSIFICATION	4.08258137518027E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999642411037133	WITHOUT_CLASSIFICATION	3.575889628672036E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999995001842751	WITHOUT_CLASSIFICATION	4.998157249506173E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999846932458442	WITHOUT_CLASSIFICATION	1.5306754155830418E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998810417005384	WITHOUT_CLASSIFICATION	1.1895829946159081E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998810417005384	WITHOUT_CLASSIFICATION	1.1895829946159081E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998810417005384	WITHOUT_CLASSIFICATION	1.1895829946159081E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999485858655285	WITHOUT_CLASSIFICATION	5.141413447151218E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999743977852744	WITHOUT_CLASSIFICATION	2.560221472559287E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999689174968246	WITHOUT_CLASSIFICATION	3.108250317547938E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9885470834712028	WITHOUT_CLASSIFICATION	0.011452916528797128	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9992939025619778	WITHOUT_CLASSIFICATION	7.0609743802229E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999936201902079	WITHOUT_CLASSIFICATION	6.379809792196455E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9989058108333545	WITHOUT_CLASSIFICATION	0.0010941891666454843	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9997767267780372	WITHOUT_CLASSIFICATION	2.2327322196286753E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999547489732555	WITHOUT_CLASSIFICATION	4.5251026744438875E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999615888546762	WITHOUT_CLASSIFICATION	3.841114532371484E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999251205111483	WITHOUT_CLASSIFICATION	7.487948885171068E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999251205111483	WITHOUT_CLASSIFICATION	7.487948885171068E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9997831129730856	WITHOUT_CLASSIFICATION	2.1688702691430789E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9997710884359924	WITHOUT_CLASSIFICATION	2.2891156400772607E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999293809285583	WITHOUT_CLASSIFICATION	7.06190714417354E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998057896120065	WITHOUT_CLASSIFICATION	1.9421038799355482E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9996928467883458	WITHOUT_CLASSIFICATION	3.071532116542364E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999670886622982	WITHOUT_CLASSIFICATION	3.291133770175462E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999862247105347	WITHOUT_CLASSIFICATION	1.3775289465392132E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9998698485321572	WITHOUT_CLASSIFICATION	1.301514678427365E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999613928681587	WITHOUT_CLASSIFICATION	3.860713184125438E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998458440183748	WITHOUT_CLASSIFICATION	1.5415598162516655E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9949838220147958	WITHOUT_CLASSIFICATION	0.005016177985204169	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.999987232436013	WITHOUT_CLASSIFICATION	1.2767563987160701E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9998541243552275	WITHOUT_CLASSIFICATION	1.4587564477255719E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998109773820479	WITHOUT_CLASSIFICATION	1.8902261795195394E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998292378233439	WITHOUT_CLASSIFICATION	1.7076217665602184E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9984648041481929	WITHOUT_CLASSIFICATION	0.0015351958518070303	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9996371267335284	WITHOUT_CLASSIFICATION	3.6287326647158703E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9997485933894129	WITHOUT_CLASSIFICATION	2.5140661058709746E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999976342948452	WITHOUT_CLASSIFICATION	2.3657051548046644E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999818722746768	WITHOUT_CLASSIFICATION	1.812772532317396E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9997044937380427	WITHOUT_CLASSIFICATION	2.9550626195720307E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9991171572292545	WITHOUT_CLASSIFICATION	8.828427707454955E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999848769582294	WITHOUT_CLASSIFICATION	1.5123041770755272E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999594316975259	WITHOUT_CLASSIFICATION	4.056830247418997E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9993428426394446	WITHOUT_CLASSIFICATION	6.571573605553743E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999876240909192	WITHOUT_CLASSIFICATION	1.2375909080819563E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999487704011004	WITHOUT_CLASSIFICATION	5.1229598899661126E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999827193028052	WITHOUT_CLASSIFICATION	1.7280697194776206E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.99987549302096	WITHOUT_CLASSIFICATION	1.2450697903991503E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999077820541459	WITHOUT_CLASSIFICATION	9.221794585409096E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999367560885235	WITHOUT_CLASSIFICATION	6.32439114765409E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9996656137866277	WITHOUT_CLASSIFICATION	3.3438621337235315E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9996502513221979	WITHOUT_CLASSIFICATION	3.497486778020791E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998571576335463	WITHOUT_CLASSIFICATION	1.4284236645359705E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9997315159978288	WITHOUT_CLASSIFICATION	2.684840021712424E-4	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999762515567563	WITHOUT_CLASSIFICATION	2.3748443243778714E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9998667547171801	WITHOUT_CLASSIFICATION	1.3324528281983438E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999769992369416	WITHOUT_CLASSIFICATION	2.300076305848934E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995279650260157	WITHOUT_CLASSIFICATION	4.720349739842713E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999771583192458	WITHOUT_CLASSIFICATION	2.2841680754156364E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9989626798733825	WITHOUT_CLASSIFICATION	0.0010373201266175127	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998175105534564	WITHOUT_CLASSIFICATION	1.8248944654369607E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999649216827762	WITHOUT_CLASSIFICATION	3.507831722375756E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9939038610285504	WITHOUT_CLASSIFICATION	0.006096138971449621	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999208009378949	WITHOUT_CLASSIFICATION	7.919906210509525E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998657532097753	WITHOUT_CLASSIFICATION	1.3424679022461667E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999933783636075	WITHOUT_CLASSIFICATION	6.621636392541019E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999308230128915	WITHOUT_CLASSIFICATION	6.917698710850992E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9995761836071664	WITHOUT_CLASSIFICATION	4.2381639283356546E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.999955937215575	WITHOUT_CLASSIFICATION	4.4062784424970284E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9998397279877987	WITHOUT_CLASSIFICATION	1.6027201220117463E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999597568784366	WITHOUT_CLASSIFICATION	4.024312156346334E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9998086780770536	WITHOUT_CLASSIFICATION	1.9132192294640045E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9993433076926033	WITHOUT_CLASSIFICATION	6.566923073967451E-4	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.999909045638731	WITHOUT_CLASSIFICATION	9.095436126909301E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999136636771461	WITHOUT_CLASSIFICATION	8.633632285397265E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999076398605478	WITHOUT_CLASSIFICATION	9.236013945232763E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9998464162269847	WITHOUT_CLASSIFICATION	1.535837730152666E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998304900252137	WITHOUT_CLASSIFICATION	1.695099747863161E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9984227363059681	WITHOUT_CLASSIFICATION	0.001577263694031825	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999155466742213	WITHOUT_CLASSIFICATION	8.445332577856806E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9991097818210241	WITHOUT_CLASSIFICATION	8.902181789758951E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9998365456314602	WITHOUT_CLASSIFICATION	1.6345436853972516E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999900718149964	WITHOUT_CLASSIFICATION	9.928185003494588E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9997652045345293	WITHOUT_CLASSIFICATION	2.3479546547058657E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9997652045345293	WITHOUT_CLASSIFICATION	2.3479546547058657E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999907933634158	WITHOUT_CLASSIFICATION	9.206636584271065E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999979431627335	WITHOUT_CLASSIFICATION	2.05683726649647E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999151683657849	WITHOUT_CLASSIFICATION	8.483163421505215E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9995728611967902	WITHOUT_CLASSIFICATION	4.271388032098553E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.999952642229646	WITHOUT_CLASSIFICATION	4.7357770354001625E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9993666048803926	WITHOUT_CLASSIFICATION	6.333951196073285E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998834503614517	WITHOUT_CLASSIFICATION	1.1654963854832511E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999870504000187	WITHOUT_CLASSIFICATION	1.2949599981385345E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999831983336812	WITHOUT_CLASSIFICATION	1.6801666318763976E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999984666956853	WITHOUT_CLASSIFICATION	1.533304314805969E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9998227025311162	WITHOUT_CLASSIFICATION	1.7729746888386707E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9988925838335106	WITHOUT_CLASSIFICATION	0.0011074161664893398	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9706560083748202	WITHOUT_CLASSIFICATION	0.029343991625179727	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9998513743789763	WITHOUT_CLASSIFICATION	1.486256210236482E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999343354578192	WITHOUT_CLASSIFICATION	6.566454218092315E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999593266593046	WITHOUT_CLASSIFICATION	4.067334069533462E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9997456421684202	WITHOUT_CLASSIFICATION	2.5435783157983904E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999538761831414	WITHOUT_CLASSIFICATION	4.612381685866562E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999972132457601	WITHOUT_CLASSIFICATION	2.7867542400201536E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999377565044658	WITHOUT_CLASSIFICATION	6.224349553420446E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999961724739815	WITHOUT_CLASSIFICATION	3.8275260184698055E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999961724739815	WITHOUT_CLASSIFICATION	3.8275260184698055E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999438278166449	WITHOUT_CLASSIFICATION	5.617218335502561E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999911315744314	WITHOUT_CLASSIFICATION	8.868425568552746E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999802767807363	WITHOUT_CLASSIFICATION	1.9723219263660123E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.999046868723757	WITHOUT_CLASSIFICATION	9.531312762430573E-4	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9994706454868344	WITHOUT_CLASSIFICATION	5.293545131656315E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9998582012716972	WITHOUT_CLASSIFICATION	1.4179872830276868E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9998582012716972	WITHOUT_CLASSIFICATION	1.4179872830276868E-4	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9558275446511129	WITHOUT_CLASSIFICATION	0.04417245534888718	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999806329711721	WITHOUT_CLASSIFICATION	1.936702882782456E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999806329711721	WITHOUT_CLASSIFICATION	1.936702882782456E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9992653261435301	WITHOUT_CLASSIFICATION	7.346738564698143E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9994125135033141	WITHOUT_CLASSIFICATION	5.874864966858598E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9994125135033141	WITHOUT_CLASSIFICATION	5.874864966858598E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999744805573283	WITHOUT_CLASSIFICATION	2.5519442671684967E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999744805573283	WITHOUT_CLASSIFICATION	2.5519442671684967E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999257822761064	WITHOUT_CLASSIFICATION	7.421772389359231E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999714738554201	WITHOUT_CLASSIFICATION	2.8526144579921187E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999815279078881	WITHOUT_CLASSIFICATION	1.8472092111923322E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9998627589118556	WITHOUT_CLASSIFICATION	1.3724108814436574E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9997729250859781	WITHOUT_CLASSIFICATION	2.270749140218783E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999556367471533	WITHOUT_CLASSIFICATION	4.436325284677846E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9998888664959207	WITHOUT_CLASSIFICATION	1.1113350407929903E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999556367471533	WITHOUT_CLASSIFICATION	4.436325284677846E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9959739339370913	WITHOUT_CLASSIFICATION	0.004026066062908656	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999461954744191	WITHOUT_CLASSIFICATION	5.380452558089314E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999286799195767	WITHOUT_CLASSIFICATION	7.13200804232583E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.999940733324895	WITHOUT_CLASSIFICATION	5.926667510495405E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999477116526267	WITHOUT_CLASSIFICATION	5.228834737324503E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9982009429544887	WITHOUT_CLASSIFICATION	0.0017990570455112516	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999445038100157	WITHOUT_CLASSIFICATION	5.549618998445079E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999353126923745	WITHOUT_CLASSIFICATION	6.468730762554799E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998795866573881	WITHOUT_CLASSIFICATION	1.2041334261200673E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9997059173951942	WITHOUT_CLASSIFICATION	2.940826048058445E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9998941027165801	WITHOUT_CLASSIFICATION	1.058972834198999E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999632314854837	WITHOUT_CLASSIFICATION	3.6768514516262824E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999623312137568	WITHOUT_CLASSIFICATION	3.7668786243228956E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9998945947226827	WITHOUT_CLASSIFICATION	1.0540527731718857E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999522185820888	WITHOUT_CLASSIFICATION	4.778141791114838E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9996790665211899	WITHOUT_CLASSIFICATION	3.2093347881016813E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999160066161733	WITHOUT_CLASSIFICATION	8.399338382664398E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999173833751968	WITHOUT_CLASSIFICATION	8.261662480324776E-5	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9996949634760756	WITHOUT_CLASSIFICATION	3.050365239244432E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9859755430486933	WITHOUT_CLASSIFICATION	0.01402445695130686	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999870694891683	WITHOUT_CLASSIFICATION	1.2930510831693409E-4	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999942261208205	WITHOUT_CLASSIFICATION	5.773879179500601E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999816542048401	WITHOUT_CLASSIFICATION	1.8345795159813646E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9997837781709608	WITHOUT_CLASSIFICATION	2.1622182903933753E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999696122231745	WITHOUT_CLASSIFICATION	3.0387776825532783E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.999916104492586	WITHOUT_CLASSIFICATION	8.389550741396007E-5	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999659362838652	WITHOUT_CLASSIFICATION	3.4063716134757915E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999796047478259	WITHOUT_CLASSIFICATION	2.039525217416885E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999536637464683	WITHOUT_CLASSIFICATION	4.6336253531638085E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999617873992331	WITHOUT_CLASSIFICATION	3.821260076682846E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999864862042734	WITHOUT_CLASSIFICATION	1.351379572650532E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999906952636358	WITHOUT_CLASSIFICATION	9.304736364236859E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9996420960126369	WITHOUT_CLASSIFICATION	3.579039873630868E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.999948182151576	WITHOUT_CLASSIFICATION	5.181784842411192E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999511030877768	WITHOUT_CLASSIFICATION	4.8896912223145946E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.999888102454191	WITHOUT_CLASSIFICATION	1.118975458090121E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999788192598608	WITHOUT_CLASSIFICATION	2.11807401392187E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.999971817147495	WITHOUT_CLASSIFICATION	2.8182852505108338E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9998889735379931	WITHOUT_CLASSIFICATION	1.1102646200685125E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999853303807941	WITHOUT_CLASSIFICATION	1.4669619206006413E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999392959541714	WITHOUT_CLASSIFICATION	6.070404582862193E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999427177704663	WITHOUT_CLASSIFICATION	5.728222953360352E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999185432623638	WITHOUT_CLASSIFICATION	8.145673763613769E-5	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999819017455962	WITHOUT_CLASSIFICATION	1.8098254403802175E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999355330278751	WITHOUT_CLASSIFICATION	6.44669721249369E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9998972766067141	WITHOUT_CLASSIFICATION	1.0272339328583586E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999778992964948	WITHOUT_CLASSIFICATION	2.210070350526511E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998411990345377	WITHOUT_CLASSIFICATION	1.5880096546226627E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.999844439975435	WITHOUT_CLASSIFICATION	1.5556002456496249E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999542009247421	WITHOUT_CLASSIFICATION	4.5799075257890665E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999945705055979	WITHOUT_CLASSIFICATION	5.4294944019900635E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9992818177314982	WITHOUT_CLASSIFICATION	7.181822685019754E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999938621119604	WITHOUT_CLASSIFICATION	6.137888039608839E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999989842066274	WITHOUT_CLASSIFICATION	1.0157933725778334E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999989842066274	WITHOUT_CLASSIFICATION	1.0157933725778334E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9994560995201794	WITHOUT_CLASSIFICATION	5.439004798205406E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9997920362860002	WITHOUT_CLASSIFICATION	2.07963713999719E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9958927951021402	WITHOUT_CLASSIFICATION	0.00410720489785981	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999462697791565	WITHOUT_CLASSIFICATION	5.373022084364402E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9998430289942797	WITHOUT_CLASSIFICATION	1.5697100572040475E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999761155857868	WITHOUT_CLASSIFICATION	2.388441421323475E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9826457898505019	WITHOUT_CLASSIFICATION	0.017354210149498086	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999872679524147	WITHOUT_CLASSIFICATION	1.2732047585294569E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.999889994483671	WITHOUT_CLASSIFICATION	1.1000551632908643E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.999944672818614	WITHOUT_CLASSIFICATION	5.53271813858611E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999956851605458	WITHOUT_CLASSIFICATION	4.314839454164438E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999956851605458	WITHOUT_CLASSIFICATION	4.314839454164438E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999127437880071	WITHOUT_CLASSIFICATION	8.725621199296406E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9998255665062713	WITHOUT_CLASSIFICATION	1.7443349372867756E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9995917294625108	WITHOUT_CLASSIFICATION	4.082705374891044E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998966015872829	WITHOUT_CLASSIFICATION	1.0339841271707966E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999830781929098	WITHOUT_CLASSIFICATION	1.6921807090273892E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999923945168322	WITHOUT_CLASSIFICATION	7.6054831677782E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999850729333533	WITHOUT_CLASSIFICATION	1.4927066646632226E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.999449289326794	WITHOUT_CLASSIFICATION	5.507106732060233E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.999997661890557	WITHOUT_CLASSIFICATION	2.3381094430033315E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9997832688877478	WITHOUT_CLASSIFICATION	2.167311122521571E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9997862259217093	WITHOUT_CLASSIFICATION	2.137740782906893E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9998705649918883	WITHOUT_CLASSIFICATION	1.2943500811173886E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998974306004775	WITHOUT_CLASSIFICATION	1.0256939952240835E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998974306004775	WITHOUT_CLASSIFICATION	1.0256939952240835E-4	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.999296339305739	WITHOUT_CLASSIFICATION	7.036606942608945E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999846228985285	WITHOUT_CLASSIFICATION	1.5377101471515135E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9998560142721198	WITHOUT_CLASSIFICATION	1.4398572788022705E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9996849173706864	WITHOUT_CLASSIFICATION	3.150826293135816E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9998490804614415	WITHOUT_CLASSIFICATION	1.5091953855848704E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998826014624985	WITHOUT_CLASSIFICATION	1.1739853750156563E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9998980516934008	WITHOUT_CLASSIFICATION	1.0194830659905187E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999453676109789	WITHOUT_CLASSIFICATION	5.463238902104097E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9982352498038813	WITHOUT_CLASSIFICATION	0.0017647501961185505	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999605699597546	WITHOUT_CLASSIFICATION	3.9430040245387745E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9995917294625108	WITHOUT_CLASSIFICATION	4.082705374891044E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9995062318043677	WITHOUT_CLASSIFICATION	4.937681956323128E-4	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9976402982420339	WITHOUT_CLASSIFICATION	0.002359701757966064	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999890980871471	WITHOUT_CLASSIFICATION	1.0901912852829308E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999506724294687	WITHOUT_CLASSIFICATION	4.932757053126001E-5	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.99994927000702	WITHOUT_CLASSIFICATION	5.07299929798936E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999628620076711	WITHOUT_CLASSIFICATION	3.713799232890904E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999861034547435	WITHOUT_CLASSIFICATION	1.3896545256625004E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.999343738078024	WITHOUT_CLASSIFICATION	6.562619219758572E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9997905428247406	WITHOUT_CLASSIFICATION	2.0945717525941497E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9997344827256794	WITHOUT_CLASSIFICATION	2.6551727432061126E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998974561543174	WITHOUT_CLASSIFICATION	1.0254384568270566E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999852459041633	WITHOUT_CLASSIFICATION	1.475409583678969E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999468386748882	WITHOUT_CLASSIFICATION	5.316132511168806E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998764996695494	WITHOUT_CLASSIFICATION	1.2350033045062196E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999229640272864	WITHOUT_CLASSIFICATION	7.703597271363141E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999219183341683	WITHOUT_CLASSIFICATION	7.808166583172809E-5	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9983990163213873	WITHOUT_CLASSIFICATION	0.001600983678612801	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999459911219264	WITHOUT_CLASSIFICATION	5.4008878073699615E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9998403044606828	WITHOUT_CLASSIFICATION	1.5969553931726455E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.999517062447633	WITHOUT_CLASSIFICATION	4.8293755236689155E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999925223945325	WITHOUT_CLASSIFICATION	7.4776054675592965E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9997794622004008	WITHOUT_CLASSIFICATION	2.2053779959912384E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9982084033651908	WITHOUT_CLASSIFICATION	0.001791596634809206	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999322036181569	WITHOUT_CLASSIFICATION	6.779638184303176E-5	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.999805927133334	WITHOUT_CLASSIFICATION	1.94072866665994E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9998036163431107	WITHOUT_CLASSIFICATION	1.9638365688933826E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999212881380871	WITHOUT_CLASSIFICATION	7.871186191289465E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9911602483296003	WITHOUT_CLASSIFICATION	0.008839751670399732	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998304895682604	WITHOUT_CLASSIFICATION	1.695104317395138E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998304895682604	WITHOUT_CLASSIFICATION	1.695104317395138E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.999869157279274	WITHOUT_CLASSIFICATION	1.3084272072597553E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998815836795587	WITHOUT_CLASSIFICATION	1.1841632044139876E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999322028992977	WITHOUT_CLASSIFICATION	6.779710070228752E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9998850024841591	WITHOUT_CLASSIFICATION	1.1499751584090879E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999737266040959	WITHOUT_CLASSIFICATION	2.6273395904169122E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.999963491521858	WITHOUT_CLASSIFICATION	3.6508478141927795E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999961544631097	WITHOUT_CLASSIFICATION	3.845536890301626E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.999472308595375	WITHOUT_CLASSIFICATION	5.276914046250892E-4	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998660159716675	WITHOUT_CLASSIFICATION	1.3398402833261354E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9997831129730856	WITHOUT_CLASSIFICATION	2.1688702691430789E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999874790993073	WITHOUT_CLASSIFICATION	1.2520900692585186E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9984774356392065	WITHOUT_CLASSIFICATION	0.0015225643607934306	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998657532097753	WITHOUT_CLASSIFICATION	1.3424679022461667E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999201595158149	WITHOUT_CLASSIFICATION	7.984048418511418E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9996011786183064	WITHOUT_CLASSIFICATION	3.9882138169367606E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9997411036925161	WITHOUT_CLASSIFICATION	2.588963074838597E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999987380130863	WITHOUT_CLASSIFICATION	1.2619869137590677E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999391054684403	WITHOUT_CLASSIFICATION	6.089453155970127E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998371809726264	WITHOUT_CLASSIFICATION	1.6281902737364914E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9998294266357107	WITHOUT_CLASSIFICATION	1.705733642892707E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9998293623855204	WITHOUT_CLASSIFICATION	1.7063761447964237E-4	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999439063919314	WITHOUT_CLASSIFICATION	5.6093608068598355E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9994440102684065	WITHOUT_CLASSIFICATION	5.559897315934375E-4	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999577483657804	WITHOUT_CLASSIFICATION	4.2251634219574535E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999267728661364	WITHOUT_CLASSIFICATION	7.322713386359418E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999961689083342	WITHOUT_CLASSIFICATION	3.831091665795807E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999659598859584	WITHOUT_CLASSIFICATION	3.404011404162689E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999786578519217	WITHOUT_CLASSIFICATION	2.1342148078238653E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.999618838349249	WITHOUT_CLASSIFICATION	3.8116165075100894E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999946022891163	WITHOUT_CLASSIFICATION	5.39771088378472E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999798434071295	WITHOUT_CLASSIFICATION	2.0156592870500155E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999835327977282	WITHOUT_CLASSIFICATION	1.646720227173898E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9996162389653238	WITHOUT_CLASSIFICATION	3.8376103467626277E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999344936846729	WITHOUT_CLASSIFICATION	6.550631532703242E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999445975447545	WITHOUT_CLASSIFICATION	5.540245524540382E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999971063125527	WITHOUT_CLASSIFICATION	2.893687447305921E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9995404599961304	WITHOUT_CLASSIFICATION	4.595400038695951E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999853022243611	WITHOUT_CLASSIFICATION	1.4697775638899033E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999831787847245	WITHOUT_CLASSIFICATION	1.6821215275450234E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.884976185519163	WITHOUT_CLASSIFICATION	0.11502381448083691	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9994964245063443	WITHOUT_CLASSIFICATION	5.035754936557417E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9975130963460861	WITHOUT_CLASSIFICATION	0.0024869036539139386	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.999955345644245	WITHOUT_CLASSIFICATION	4.465435575501106E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998567019055266	WITHOUT_CLASSIFICATION	1.432980944734202E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999377895461752	WITHOUT_CLASSIFICATION	6.221045382485872E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9973501136208924	WITHOUT_CLASSIFICATION	0.0026498863791074587	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9997207505072583	WITHOUT_CLASSIFICATION	2.792494927416568E-4	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.99998836921193	WITHOUT_CLASSIFICATION	1.1630788070007535E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999403628905205	WITHOUT_CLASSIFICATION	5.9637109479599816E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9994804519214949	WITHOUT_CLASSIFICATION	5.195480785050715E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9995038513974048	WITHOUT_CLASSIFICATION	4.961486025950904E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999371000474944	WITHOUT_CLASSIFICATION	6.28999525056313E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.999986409391912	WITHOUT_CLASSIFICATION	1.3590608088021906E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999129821326472	WITHOUT_CLASSIFICATION	8.701786735270097E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9998954204637841	WITHOUT_CLASSIFICATION	1.0457953621585688E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9997669219976545	WITHOUT_CLASSIFICATION	2.3307800234548568E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9995934926921783	WITHOUT_CLASSIFICATION	4.065073078215744E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9995778463196259	WITHOUT_CLASSIFICATION	4.2215368037418883E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999276104468923	WITHOUT_CLASSIFICATION	7.238955310776899E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999276104468923	WITHOUT_CLASSIFICATION	7.238955310776899E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.994932782135598	WITHOUT_CLASSIFICATION	0.005067217864402051	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.8916718871024625	WITHOUT_CLASSIFICATION	0.10832811289753753	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999582850718696	WITHOUT_CLASSIFICATION	4.1714928130418726E-5	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9718814828737742	WITHOUT_CLASSIFICATION	0.02811851712622579	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999007223785797	WITHOUT_CLASSIFICATION	9.927762142025632E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999688828571058	WITHOUT_CLASSIFICATION	3.111714289412599E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9997994042996406	WITHOUT_CLASSIFICATION	2.0059570035922843E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.986970496318707	WITHOUT_CLASSIFICATION	0.013029503681292954	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999989377558479	WITHOUT_CLASSIFICATION	1.0622441520953152E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9960462985764339	WITHOUT_CLASSIFICATION	0.0039537014235660785	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9987683563931574	WITHOUT_CLASSIFICATION	0.0012316436068425744	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999853195290819	WITHOUT_CLASSIFICATION	1.4680470918140197E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9996598019613434	WITHOUT_CLASSIFICATION	3.401980386565859E-4	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999704238055404	WITHOUT_CLASSIFICATION	2.9576194459588842E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999555337041753	WITHOUT_CLASSIFICATION	4.446629582475711E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9744001957170314	WITHOUT_CLASSIFICATION	0.02559980428296863	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9979768467866188	WITHOUT_CLASSIFICATION	0.0020231532133811185	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998461962118714	WITHOUT_CLASSIFICATION	1.5380378812848385E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999660430584276	WITHOUT_CLASSIFICATION	3.39569415723243E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9693943545820207	WITHOUT_CLASSIFICATION	0.030605645417979194	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999772916178021	WITHOUT_CLASSIFICATION	2.27083821978633E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9993452449022123	WITHOUT_CLASSIFICATION	6.547550977876479E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999053511585289	WITHOUT_CLASSIFICATION	9.4648841471226E-5	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9997739655610343	WITHOUT_CLASSIFICATION	2.2603443896575224E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9998427549987923	WITHOUT_CLASSIFICATION	1.5724500120768576E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9997901272467778	WITHOUT_CLASSIFICATION	2.0987275322221913E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999092493738473	WITHOUT_CLASSIFICATION	9.075062615273804E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999709832119708	WITHOUT_CLASSIFICATION	2.9016788029223846E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9996522555079616	WITHOUT_CLASSIFICATION	3.4774449203840046E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999750520220091	WITHOUT_CLASSIFICATION	2.494797799094533E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.999960803385895	WITHOUT_CLASSIFICATION	3.919661410502978E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.999993376531034	WITHOUT_CLASSIFICATION	6.623468966032458E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999943135266599	WITHOUT_CLASSIFICATION	5.686473340104576E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9996525438422539	WITHOUT_CLASSIFICATION	3.474561577461671E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998537066308478	WITHOUT_CLASSIFICATION	1.462933691521417E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999901847693009	WITHOUT_CLASSIFICATION	9.815230698964698E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999714871727595	WITHOUT_CLASSIFICATION	2.8512827240402218E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999714871727595	WITHOUT_CLASSIFICATION	2.8512827240402218E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999724099371765	WITHOUT_CLASSIFICATION	2.759006282355703E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9998669453249817	WITHOUT_CLASSIFICATION	1.3305467501820888E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9978587333777068	WITHOUT_CLASSIFICATION	0.002141266622293106	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.999987891237204	WITHOUT_CLASSIFICATION	1.2108762795942587E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9995878116022604	WITHOUT_CLASSIFICATION	4.1218839773959464E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999710509061027	WITHOUT_CLASSIFICATION	2.894909389728904E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9998868968132267	WITHOUT_CLASSIFICATION	1.1310318677337151E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999784272455677	WITHOUT_CLASSIFICATION	2.1572754432207613E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999402190441913	WITHOUT_CLASSIFICATION	5.978095580863444E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999827531065792	WITHOUT_CLASSIFICATION	1.724689342077132E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999776905782891	WITHOUT_CLASSIFICATION	2.230942171093183E-5	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999709834560029	WITHOUT_CLASSIFICATION	2.9016543997106792E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999457245081511	WITHOUT_CLASSIFICATION	5.427549184900296E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9998525675703084	WITHOUT_CLASSIFICATION	1.4743242969153013E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999996137957392	WITHOUT_CLASSIFICATION	3.862042608188602E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999468661073522	WITHOUT_CLASSIFICATION	5.313389264781152E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999481144367097	WITHOUT_CLASSIFICATION	5.1885563290181415E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9997379839285366	WITHOUT_CLASSIFICATION	2.6201607146338735E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9996221723621987	WITHOUT_CLASSIFICATION	3.7782763780126424E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999060066012949	WITHOUT_CLASSIFICATION	9.399339870505104E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9975493767289723	WITHOUT_CLASSIFICATION	0.002450623271027825	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9553043824553967	WITHOUT_CLASSIFICATION	0.04469561754460326	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999872811792839	WITHOUT_CLASSIFICATION	1.2718820716181887E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999626002125565	WITHOUT_CLASSIFICATION	3.7399787443523024E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9990626826852759	WITHOUT_CLASSIFICATION	9.373173147242332E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999845218405112	WITHOUT_CLASSIFICATION	1.5478159488833046E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995280724979575	WITHOUT_CLASSIFICATION	4.7192750204242784E-4	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9995438797534539	WITHOUT_CLASSIFICATION	4.561202465460182E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9997525653349446	WITHOUT_CLASSIFICATION	2.4743466505539285E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999843635803744	WITHOUT_CLASSIFICATION	1.5636419625593228E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999956271548914	WITHOUT_CLASSIFICATION	4.372845108499362E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9998200046998416	WITHOUT_CLASSIFICATION	1.7999530015836858E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999932529421591	WITHOUT_CLASSIFICATION	6.747057840782993E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999931193414517	WITHOUT_CLASSIFICATION	6.880658548268609E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999946929974875	WITHOUT_CLASSIFICATION	5.307002512495975E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999783212544463	WITHOUT_CLASSIFICATION	2.1678745553655493E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998422145574519	WITHOUT_CLASSIFICATION	1.5778544254815738E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999840938649347	WITHOUT_CLASSIFICATION	1.5906135065295275E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9998093114452054	WITHOUT_CLASSIFICATION	1.906885547946235E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999153943203289	WITHOUT_CLASSIFICATION	8.460567967108888E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999723096808377	WITHOUT_CLASSIFICATION	2.769031916230102E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9990494690809616	WITHOUT_CLASSIFICATION	9.505309190384651E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9964780633672837	WITHOUT_CLASSIFICATION	0.0035219366327162707	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999302729184993	WITHOUT_CLASSIFICATION	6.972708150067004E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9990417133877367	WITHOUT_CLASSIFICATION	9.582866122633176E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9996228039170686	WITHOUT_CLASSIFICATION	3.771960829314371E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9995569280669855	WITHOUT_CLASSIFICATION	4.4307193301455197E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.999653856125563	WITHOUT_CLASSIFICATION	3.461438744369752E-4	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999709832119708	WITHOUT_CLASSIFICATION	2.9016788029223846E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9997303481082457	WITHOUT_CLASSIFICATION	2.696518917543781E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9998381794675993	WITHOUT_CLASSIFICATION	1.618205324005663E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999733908532074	WITHOUT_CLASSIFICATION	2.6609146792523705E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999777721286102	WITHOUT_CLASSIFICATION	2.2227871389838246E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999081659120578	WITHOUT_CLASSIFICATION	9.183408794214267E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999409559529491	WITHOUT_CLASSIFICATION	5.9044047050771264E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999338748790821	WITHOUT_CLASSIFICATION	6.612512091780347E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999671643251186	WITHOUT_CLASSIFICATION	3.283567488150181E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.999917408407942	WITHOUT_CLASSIFICATION	8.259159205806774E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998672629708236	WITHOUT_CLASSIFICATION	1.3273702917629892E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999818229664643	WITHOUT_CLASSIFICATION	1.817703353569839E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999868896756523	WITHOUT_CLASSIFICATION	1.3110324347641256E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9997455981095615	WITHOUT_CLASSIFICATION	2.5440189043844706E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9997888496177686	WITHOUT_CLASSIFICATION	2.1115038223143897E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999904144447782	WITHOUT_CLASSIFICATION	9.58555522190914E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998589208057428	WITHOUT_CLASSIFICATION	1.4107919425712068E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999147101188242	WITHOUT_CLASSIFICATION	8.528988117592495E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998153424472319	WITHOUT_CLASSIFICATION	1.8465755276812028E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9996938778687388	WITHOUT_CLASSIFICATION	3.061221312612314E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9882369062506553	WITHOUT_CLASSIFICATION	0.01176309374934478	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999348668997171	WITHOUT_CLASSIFICATION	6.513310028285506E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9998991065408622	WITHOUT_CLASSIFICATION	1.0089345913773635E-4	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9962777058774306	WITHOUT_CLASSIFICATION	0.0037222941225694244	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9992678764955742	WITHOUT_CLASSIFICATION	7.321235044256723E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999856333839798	WITHOUT_CLASSIFICATION	1.4366616020170104E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999895520056703	WITHOUT_CLASSIFICATION	1.0447994329682065E-5	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999562122144768	WITHOUT_CLASSIFICATION	4.378778552327274E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9998967766222274	WITHOUT_CLASSIFICATION	1.0322337777263113E-4	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9984843669509271	WITHOUT_CLASSIFICATION	0.0015156330490727903	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.999926938608335	WITHOUT_CLASSIFICATION	7.306139166502167E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999716411388928	WITHOUT_CLASSIFICATION	2.8358861107272735E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9996063854650322	WITHOUT_CLASSIFICATION	3.936145349677557E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9997596506363265	WITHOUT_CLASSIFICATION	2.4034936367359E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9997270075615863	WITHOUT_CLASSIFICATION	2.7299243841376976E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.7557848032761113	WITHOUT_CLASSIFICATION	0.2442151967238888	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999590924081805	WITHOUT_CLASSIFICATION	4.090759181953657E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9997820856944398	WITHOUT_CLASSIFICATION	2.1791430556031562E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999350331128917	WITHOUT_CLASSIFICATION	6.496688710833554E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999350331128917	WITHOUT_CLASSIFICATION	6.496688710833554E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.999926938608335	WITHOUT_CLASSIFICATION	7.306139166502167E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9994609809851747	WITHOUT_CLASSIFICATION	5.390190148254597E-4	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999932557567522	WITHOUT_CLASSIFICATION	6.74424324772748E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999295762215873	WITHOUT_CLASSIFICATION	7.042377841267928E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999488795708708	WITHOUT_CLASSIFICATION	5.112042912923189E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999679581786303	WITHOUT_CLASSIFICATION	3.204182136977099E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9996910751271748	WITHOUT_CLASSIFICATION	3.089248728252348E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998821744109712	WITHOUT_CLASSIFICATION	1.1782558902881867E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.999946017690729	WITHOUT_CLASSIFICATION	5.398230927111089E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9997767164776049	WITHOUT_CLASSIFICATION	2.2328352239508467E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9994172411109203	WITHOUT_CLASSIFICATION	5.827588890797106E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9998101683509537	WITHOUT_CLASSIFICATION	1.8983164904620643E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9996819403444612	WITHOUT_CLASSIFICATION	3.180596555388492E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9997661190610574	WITHOUT_CLASSIFICATION	2.3388093894250985E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999628671392923	WITHOUT_CLASSIFICATION	3.7132860707757165E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999073729200215	WITHOUT_CLASSIFICATION	9.262707997843886E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9998591108259287	WITHOUT_CLASSIFICATION	1.4088917407125987E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9998340905926901	WITHOUT_CLASSIFICATION	1.6590940730990323E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999628360236038	WITHOUT_CLASSIFICATION	3.71639763961033E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999585545870968	WITHOUT_CLASSIFICATION	4.144541290315366E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999455943331783	WITHOUT_CLASSIFICATION	5.440566682174995E-5	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999590032146287	WITHOUT_CLASSIFICATION	4.099678537129581E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9998746382399437	WITHOUT_CLASSIFICATION	1.2536176005628822E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9997459267812748	WITHOUT_CLASSIFICATION	2.5407321872513946E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998518123253021	WITHOUT_CLASSIFICATION	1.4818767469787738E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999701601697497	WITHOUT_CLASSIFICATION	2.9839830250207902E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999661934799311	WITHOUT_CLASSIFICATION	3.380652006879967E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9980953331077378	WITHOUT_CLASSIFICATION	0.001904666892262101	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9990832469823634	WITHOUT_CLASSIFICATION	9.167530176366638E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999074724693033	WITHOUT_CLASSIFICATION	9.252753069662226E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998065918877206	WITHOUT_CLASSIFICATION	1.9340811227946595E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9996588650261143	WITHOUT_CLASSIFICATION	3.411349738856131E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999428386392746	WITHOUT_CLASSIFICATION	5.7161360725478104E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999151539673221	WITHOUT_CLASSIFICATION	8.484603267796444E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999276104468923	WITHOUT_CLASSIFICATION	7.238955310776899E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9975262054142764	WITHOUT_CLASSIFICATION	0.0024737945857236467	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999877621758441	WITHOUT_CLASSIFICATION	1.2237824155940692E-5	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.999388219854293	WITHOUT_CLASSIFICATION	6.117801457070287E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999233948230576	WITHOUT_CLASSIFICATION	7.660517694238517E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999331143227417	WITHOUT_CLASSIFICATION	6.688567725823896E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999846888770618	WITHOUT_CLASSIFICATION	1.5311122938147543E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999846888770618	WITHOUT_CLASSIFICATION	1.5311122938147543E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.999392559481288	WITHOUT_CLASSIFICATION	6.074405187119926E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9998678673559654	WITHOUT_CLASSIFICATION	1.3213264403451466E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9998418075784864	WITHOUT_CLASSIFICATION	1.5819242151373617E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999684380766575	WITHOUT_CLASSIFICATION	3.1561923342583454E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9998212556150807	WITHOUT_CLASSIFICATION	1.7874438491932135E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999938319920915	WITHOUT_CLASSIFICATION	6.168007908526461E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9998880076675799	WITHOUT_CLASSIFICATION	1.1199233242007654E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999423231555759	WITHOUT_CLASSIFICATION	5.767684442405707E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9998604687577772	WITHOUT_CLASSIFICATION	1.3953124222281513E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9998604687577772	WITHOUT_CLASSIFICATION	1.3953124222281513E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9998604687577772	WITHOUT_CLASSIFICATION	1.3953124222281513E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9998012859470474	WITHOUT_CLASSIFICATION	1.9871405295265526E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9939038610285504	WITHOUT_CLASSIFICATION	0.006096138971449621	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.999795438490423	WITHOUT_CLASSIFICATION	2.0456150957709522E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9744001957170314	WITHOUT_CLASSIFICATION	0.02559980428296863	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9996445206882181	WITHOUT_CLASSIFICATION	3.554793117819717E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.996538832248465	WITHOUT_CLASSIFICATION	0.0034611677515351187	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999149709764797	WITHOUT_CLASSIFICATION	8.50290235202915E-5	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999921845843674	WITHOUT_CLASSIFICATION	7.81541563258419E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9939038610285504	WITHOUT_CLASSIFICATION	0.006096138971449621	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999670922461236	WITHOUT_CLASSIFICATION	3.2907753876429044E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999670922461236	WITHOUT_CLASSIFICATION	3.2907753876429044E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999596881782393	WITHOUT_CLASSIFICATION	4.031182176066253E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999218584134554	WITHOUT_CLASSIFICATION	7.814158654460112E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995499337805511	WITHOUT_CLASSIFICATION	4.5006621944883285E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999240806406239	WITHOUT_CLASSIFICATION	7.591935937621743E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999714738554201	WITHOUT_CLASSIFICATION	2.8526144579921187E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999955693578763	WITHOUT_CLASSIFICATION	4.4306421237017556E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9995873112522458	WITHOUT_CLASSIFICATION	4.126887477542588E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.999693008179281	WITHOUT_CLASSIFICATION	3.069918207190276E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9998088909748629	WITHOUT_CLASSIFICATION	1.9110902513709742E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999768981720475	WITHOUT_CLASSIFICATION	2.3101827952479347E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999797399489183	WITHOUT_CLASSIFICATION	2.026005108170391E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999653957183299	WITHOUT_CLASSIFICATION	3.460428167021508E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9998867725791267	WITHOUT_CLASSIFICATION	1.1322742087322363E-4	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.999273636761649	WITHOUT_CLASSIFICATION	7.263632383510436E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.999994687841424	WITHOUT_CLASSIFICATION	5.312158575949954E-6	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999899927963216	WITHOUT_CLASSIFICATION	1.0007203678420232E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9998898314811138	WITHOUT_CLASSIFICATION	1.1016851888625312E-4	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998198468617885	WITHOUT_CLASSIFICATION	1.8015313821160309E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9992818522825044	WITHOUT_CLASSIFICATION	7.181477174955958E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9992387919045078	WITHOUT_CLASSIFICATION	7.612080954921688E-4	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999137933242087	WITHOUT_CLASSIFICATION	8.620667579133283E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999053511585289	WITHOUT_CLASSIFICATION	9.4648841471226E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999710509061027	WITHOUT_CLASSIFICATION	2.894909389728904E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999968389811933	WITHOUT_CLASSIFICATION	3.1610188067564327E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9980099342288243	WITHOUT_CLASSIFICATION	0.0019900657711756755	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999597806478293	WITHOUT_CLASSIFICATION	4.021935217071202E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9691504352687026	WITHOUT_CLASSIFICATION	0.030849564731297307	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998983886714965	WITHOUT_CLASSIFICATION	1.0161132850341608E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998983886714965	WITHOUT_CLASSIFICATION	1.0161132850341608E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9997761225963061	WITHOUT_CLASSIFICATION	2.238774036938459E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9997023660900267	WITHOUT_CLASSIFICATION	2.976339099733038E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999938567473156	WITHOUT_CLASSIFICATION	6.143252684399418E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.999963686273718	WITHOUT_CLASSIFICATION	3.6313726281913445E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9997548073509721	WITHOUT_CLASSIFICATION	2.4519264902789364E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999693895798294	WITHOUT_CLASSIFICATION	3.061042017063059E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999118065181477	WITHOUT_CLASSIFICATION	8.819348185227302E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999794664490169	WITHOUT_CLASSIFICATION	2.0533550983168387E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999701633835815	WITHOUT_CLASSIFICATION	2.9836616418577674E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999415605763391	WITHOUT_CLASSIFICATION	5.843942366086924E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999578727938553	WITHOUT_CLASSIFICATION	4.21272061448009E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999872593360073	WITHOUT_CLASSIFICATION	1.2740663992766279E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999694165002582	WITHOUT_CLASSIFICATION	3.0583499741770774E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999773539655368	WITHOUT_CLASSIFICATION	2.26460344631594E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9998483386158848	WITHOUT_CLASSIFICATION	1.5166138411512112E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999151683657849	WITHOUT_CLASSIFICATION	8.483163421505215E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9997837832899895	WITHOUT_CLASSIFICATION	2.162167100105128E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999877216514881	WITHOUT_CLASSIFICATION	1.2278348511816828E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999535681297111	WITHOUT_CLASSIFICATION	4.6431870288844554E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9957452607599029	WITHOUT_CLASSIFICATION	0.004254739240097091	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999396003443249	WITHOUT_CLASSIFICATION	6.0399655675037473E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9997709969715525	WITHOUT_CLASSIFICATION	2.2900302844761764E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.999956295046389	WITHOUT_CLASSIFICATION	4.370495361095943E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9996050704707725	WITHOUT_CLASSIFICATION	3.9492952922754566E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9998750849552847	WITHOUT_CLASSIFICATION	1.249150447153254E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999694165002582	WITHOUT_CLASSIFICATION	3.0583499741770774E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998446481990766	WITHOUT_CLASSIFICATION	1.5535180092333403E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9998483386158848	WITHOUT_CLASSIFICATION	1.5166138411512112E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9997221914579308	WITHOUT_CLASSIFICATION	2.7780854206919183E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9992105914319132	WITHOUT_CLASSIFICATION	7.894085680868426E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999591293485175	WITHOUT_CLASSIFICATION	4.087065148263235E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9992800962942845	WITHOUT_CLASSIFICATION	7.199037057153725E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9888067439439866	WITHOUT_CLASSIFICATION	0.01119325605601336	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9998904620765128	WITHOUT_CLASSIFICATION	1.0953792348719579E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.999666055118212	WITHOUT_CLASSIFICATION	3.339448817879207E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9998653781662465	WITHOUT_CLASSIFICATION	1.3462183375335748E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997007044025354	WITHOUT_CLASSIFICATION	2.992955974645451E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9997964655189874	WITHOUT_CLASSIFICATION	2.0353448101267393E-4	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999975925774582	WITHOUT_CLASSIFICATION	2.4074225416995306E-6	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9989462135851094	WITHOUT_CLASSIFICATION	0.0010537864148906025	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999426484675217	WITHOUT_CLASSIFICATION	5.7351532478322963E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.999961758721442	WITHOUT_CLASSIFICATION	3.8241278558014405E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999945254734334	WITHOUT_CLASSIFICATION	5.474526566631147E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999450941672701	WITHOUT_CLASSIFICATION	5.4905832729930764E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999715311790873	WITHOUT_CLASSIFICATION	2.846882091255282E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999244134817572	WITHOUT_CLASSIFICATION	7.558651824280154E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9960770866842305	WITHOUT_CLASSIFICATION	0.003922913315769548	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999220290120823	WITHOUT_CLASSIFICATION	7.797098791767434E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997456421684202	WITHOUT_CLASSIFICATION	2.5435783157983904E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999728497144263	WITHOUT_CLASSIFICATION	2.715028557360818E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999473323872098	WITHOUT_CLASSIFICATION	5.266761279015684E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9986185257507019	WITHOUT_CLASSIFICATION	0.0013814742492982072	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9997253419442839	WITHOUT_CLASSIFICATION	2.746580557160712E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999418062813906	WITHOUT_CLASSIFICATION	5.819371860939824E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9990760088414228	WITHOUT_CLASSIFICATION	9.239911585771252E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999616526611196	WITHOUT_CLASSIFICATION	3.834733888041473E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999616526611196	WITHOUT_CLASSIFICATION	3.834733888041473E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9982957004202386	WITHOUT_CLASSIFICATION	0.0017042995797613945	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999767553018366	WITHOUT_CLASSIFICATION	2.3244698163417486E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999893531405591	WITHOUT_CLASSIFICATION	1.0646859440748406E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9992677588572411	WITHOUT_CLASSIFICATION	7.322411427590075E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999869066754375	WITHOUT_CLASSIFICATION	1.3093324562558937E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999922186853836	WITHOUT_CLASSIFICATION	7.781314616455039E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999055774547825	WITHOUT_CLASSIFICATION	9.442254521752419E-5	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999767797944071	WITHOUT_CLASSIFICATION	2.322020559288101E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.999795013670865	WITHOUT_CLASSIFICATION	2.0498632913510724E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9998906552036357	WITHOUT_CLASSIFICATION	1.0934479636429455E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.999778957814105	WITHOUT_CLASSIFICATION	2.2104218589511027E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999154260578456	WITHOUT_CLASSIFICATION	8.45739421543839E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9997621317448877	WITHOUT_CLASSIFICATION	2.3786825511220563E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9719942341179774	WITHOUT_CLASSIFICATION	0.0280057658820227	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998912188432434	WITHOUT_CLASSIFICATION	1.0878115675659714E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999714479716978	WITHOUT_CLASSIFICATION	2.8552028302089483E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901177139523	WITHOUT_CLASSIFICATION	9.882286047721384E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9989847148961086	WITHOUT_CLASSIFICATION	0.0010152851038913765	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999851657827853	WITHOUT_CLASSIFICATION	1.4834217214690005E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999860116888585	WITHOUT_CLASSIFICATION	1.3988311141530018E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9998097259220429	WITHOUT_CLASSIFICATION	1.902740779571358E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999851657827853	WITHOUT_CLASSIFICATION	1.4834217214690005E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.998877981875559	WITHOUT_CLASSIFICATION	0.0011220181244410705	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999254161133754	WITHOUT_CLASSIFICATION	7.458388662462536E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999562929474486	WITHOUT_CLASSIFICATION	4.370705255139084E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999562929474486	WITHOUT_CLASSIFICATION	4.370705255139084E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999880675296544	WITHOUT_CLASSIFICATION	1.1932470345553641E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999528417298231	WITHOUT_CLASSIFICATION	4.71582701768867E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998566388878378	WITHOUT_CLASSIFICATION	1.4336111216214155E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9991588390307907	WITHOUT_CLASSIFICATION	8.411609692092469E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999824936614804	WITHOUT_CLASSIFICATION	1.750633851961887E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9992046834605416	WITHOUT_CLASSIFICATION	7.953165394583708E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999101815956485	WITHOUT_CLASSIFICATION	8.981840435153832E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9979699632837141	WITHOUT_CLASSIFICATION	0.0020300367162858803	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999945722497678	WITHOUT_CLASSIFICATION	5.427750232179886E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999703966588764	WITHOUT_CLASSIFICATION	2.9603341123578194E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9997303481082457	WITHOUT_CLASSIFICATION	2.696518917543781E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999662260740325	WITHOUT_CLASSIFICATION	3.377392596759636E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999808290665082	WITHOUT_CLASSIFICATION	1.9170933491796257E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999714479716978	WITHOUT_CLASSIFICATION	2.8552028302089483E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999824936614804	WITHOUT_CLASSIFICATION	1.750633851961887E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9928420865450683	WITHOUT_CLASSIFICATION	0.007157913454931636	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9928420865450683	WITHOUT_CLASSIFICATION	0.007157913454931636	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.952381646801933	WITHOUT_CLASSIFICATION	0.047618353198067016	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999902631491482	WITHOUT_CLASSIFICATION	9.736850851778825E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999755692106015	WITHOUT_CLASSIFICATION	2.4430789398542463E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998686395515178	WITHOUT_CLASSIFICATION	1.3136044848205183E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999075764020503	WITHOUT_CLASSIFICATION	9.242359794973433E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.999965721634734	WITHOUT_CLASSIFICATION	3.427836526602922E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9988425299907117	WITHOUT_CLASSIFICATION	0.0011574700092883657	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996556423999532	WITHOUT_CLASSIFICATION	3.4435760004686137E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999776719726935	WITHOUT_CLASSIFICATION	2.2328027306516976E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999978417825388	WITHOUT_CLASSIFICATION	2.1582174611915625E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9998675260297823	WITHOUT_CLASSIFICATION	1.324739702176542E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999998294742758	WITHOUT_CLASSIFICATION	1.7052572411958674E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999302719668821	WITHOUT_CLASSIFICATION	6.972803311782267E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901177139523	WITHOUT_CLASSIFICATION	9.882286047721384E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999528417298231	WITHOUT_CLASSIFICATION	4.71582701768867E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998566388878378	WITHOUT_CLASSIFICATION	1.4336111216214155E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998566388878378	WITHOUT_CLASSIFICATION	1.4336111216214155E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999824936614804	WITHOUT_CLASSIFICATION	1.750633851961887E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999824936614804	WITHOUT_CLASSIFICATION	1.750633851961887E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9928420865450683	WITHOUT_CLASSIFICATION	0.007157913454931636	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.999983545264793	WITHOUT_CLASSIFICATION	1.645473520696996E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9988070701619354	WITHOUT_CLASSIFICATION	0.0011929298380646165	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999976808785468	WITHOUT_CLASSIFICATION	2.3191214531500737E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997565035831496	WITHOUT_CLASSIFICATION	2.4349641685044506E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999349008661076	WITHOUT_CLASSIFICATION	6.509913389232927E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9820194782614974	WITHOUT_CLASSIFICATION	0.017980521738502665	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9998586071489033	WITHOUT_CLASSIFICATION	1.4139285109661056E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9998526010293775	WITHOUT_CLASSIFICATION	1.4739897062255474E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999771337366555	WITHOUT_CLASSIFICATION	2.2866263344412338E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999528417298231	WITHOUT_CLASSIFICATION	4.71582701768867E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998566388878378	WITHOUT_CLASSIFICATION	1.4336111216214155E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9998566388878378	WITHOUT_CLASSIFICATION	1.4336111216214155E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996556423999532	WITHOUT_CLASSIFICATION	3.4435760004686137E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999978417825388	WITHOUT_CLASSIFICATION	2.1582174611915625E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.999561241527701	WITHOUT_CLASSIFICATION	4.387584722990824E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999946819255382	WITHOUT_CLASSIFICATION	5.318074461790954E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999986197941528	WITHOUT_CLASSIFICATION	1.3802058472058293E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999986197941528	WITHOUT_CLASSIFICATION	1.3802058472058293E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998217738174141	WITHOUT_CLASSIFICATION	1.782261825858538E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9997433476386809	WITHOUT_CLASSIFICATION	2.566523613191278E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999829204378925	WITHOUT_CLASSIFICATION	1.7079562107582313E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999993131870087	WITHOUT_CLASSIFICATION	6.868129913014809E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.999993131870087	WITHOUT_CLASSIFICATION	6.868129913014809E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.999958002755797	WITHOUT_CLASSIFICATION	4.1997244202993E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.999958002755797	WITHOUT_CLASSIFICATION	4.1997244202993E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999861796301733	WITHOUT_CLASSIFICATION	1.3820369826652492E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999861796301733	WITHOUT_CLASSIFICATION	1.3820369826652492E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999889229861965	WITHOUT_CLASSIFICATION	1.1077013803639239E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999705752168894	WITHOUT_CLASSIFICATION	2.9424783110532982E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9996922566129566	WITHOUT_CLASSIFICATION	3.077433870433733E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999558390019148	WITHOUT_CLASSIFICATION	4.4160998085206873E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.999956653342162	WITHOUT_CLASSIFICATION	4.3346657837928466E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9998632847852033	WITHOUT_CLASSIFICATION	1.3671521479663998E-4	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999377923357164	WITHOUT_CLASSIFICATION	6.220766428353086E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9995587285217478	WITHOUT_CLASSIFICATION	4.4127147825232736E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9991602295219327	WITHOUT_CLASSIFICATION	8.397704780672904E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999432281552307	WITHOUT_CLASSIFICATION	5.677184476936803E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999853653422938	WITHOUT_CLASSIFICATION	1.4634657706303173E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9989092422152539	WITHOUT_CLASSIFICATION	0.001090757784746043	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999261045279108	WITHOUT_CLASSIFICATION	7.389547208917664E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999261045279108	WITHOUT_CLASSIFICATION	7.389547208917664E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9995664460467386	WITHOUT_CLASSIFICATION	4.335539532613085E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999955693578763	WITHOUT_CLASSIFICATION	4.4306421237017556E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9985473511659094	WITHOUT_CLASSIFICATION	0.0014526488340906192	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999421552215144	WITHOUT_CLASSIFICATION	5.784477848547379E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999909166259442	WITHOUT_CLASSIFICATION	9.08337405581471E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9998321560001394	WITHOUT_CLASSIFICATION	1.6784399986060597E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9997134376001311	WITHOUT_CLASSIFICATION	2.865623998688791E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996450043888946	WITHOUT_CLASSIFICATION	3.549956111054675E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999671010340018	WITHOUT_CLASSIFICATION	3.289896599827431E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9998875765464348	WITHOUT_CLASSIFICATION	1.1242345356528021E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999729595843877	WITHOUT_CLASSIFICATION	2.7040415612239996E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9996947649729332	WITHOUT_CLASSIFICATION	3.052350270667179E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998645607445645	WITHOUT_CLASSIFICATION	1.354392554354405E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999166533563641	WITHOUT_CLASSIFICATION	8.334664363588481E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9963346900173055	WITHOUT_CLASSIFICATION	0.0036653099826946295	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999981605068404	WITHOUT_CLASSIFICATION	1.8394931595956522E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999512878139227	WITHOUT_CLASSIFICATION	4.8712186077322615E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9998717674193938	WITHOUT_CLASSIFICATION	1.2823258060622777E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999139159978611	WITHOUT_CLASSIFICATION	8.608400213889794E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999139159978611	WITHOUT_CLASSIFICATION	8.608400213889794E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999570771567257	WITHOUT_CLASSIFICATION	4.292284327423917E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9997303481082457	WITHOUT_CLASSIFICATION	2.696518917543781E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999649664056711	WITHOUT_CLASSIFICATION	3.503359432891936E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999430865182207	WITHOUT_CLASSIFICATION	5.691348177927341E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999430865182207	WITHOUT_CLASSIFICATION	5.691348177927341E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999798271756961	WITHOUT_CLASSIFICATION	2.0172824303878254E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999670614688315	WITHOUT_CLASSIFICATION	3.293853116847519E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999248213342435	WITHOUT_CLASSIFICATION	7.51786657564466E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997309900675136	WITHOUT_CLASSIFICATION	2.690099324862886E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996912125710546	WITHOUT_CLASSIFICATION	3.0878742894535594E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996912125710546	WITHOUT_CLASSIFICATION	3.0878742894535594E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9996912125710546	WITHOUT_CLASSIFICATION	3.0878742894535594E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997309900675136	WITHOUT_CLASSIFICATION	2.690099324862886E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999821290880083	WITHOUT_CLASSIFICATION	1.787091199163591E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.99988214767088	WITHOUT_CLASSIFICATION	1.1785232911995221E-4	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9992894096513176	WITHOUT_CLASSIFICATION	7.10590348682267E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9997721943428852	WITHOUT_CLASSIFICATION	2.2780565711477961E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.999737331452268	WITHOUT_CLASSIFICATION	2.626685477320653E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9997595910092038	WITHOUT_CLASSIFICATION	2.4040899079619545E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999908405342907	WITHOUT_CLASSIFICATION	9.159465709282593E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.999151379168695	WITHOUT_CLASSIFICATION	8.486208313049471E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999729595843877	WITHOUT_CLASSIFICATION	2.7040415612239996E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.998297282976472	WITHOUT_CLASSIFICATION	0.0017027170235279624	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999434639121403	WITHOUT_CLASSIFICATION	5.653608785971778E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999891130435475	WITHOUT_CLASSIFICATION	1.0886956452517478E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997277336775381	WITHOUT_CLASSIFICATION	2.722663224619621E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.999943407832871	WITHOUT_CLASSIFICATION	5.6592167129017504E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996673447190421	WITHOUT_CLASSIFICATION	3.3265528095792837E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999760877639198	WITHOUT_CLASSIFICATION	2.391223608014905E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999501924439248	WITHOUT_CLASSIFICATION	4.980755607527532E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9994818467792844	WITHOUT_CLASSIFICATION	5.18153220715532E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999388471960252	WITHOUT_CLASSIFICATION	6.11528039746922E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997646827926362	WITHOUT_CLASSIFICATION	2.353172073638579E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999585164914012	WITHOUT_CLASSIFICATION	4.14835085988645E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999754838929494	WITHOUT_CLASSIFICATION	2.451610705052013E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999228945320174	WITHOUT_CLASSIFICATION	7.71054679825629E-5	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999978008087012	WITHOUT_CLASSIFICATION	2.199191298892224E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.999856599374789	WITHOUT_CLASSIFICATION	1.4340062521100028E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999291374339887	WITHOUT_CLASSIFICATION	7.086256601127421E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999829811856442	WITHOUT_CLASSIFICATION	1.7018814355879672E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9919959022207283	WITHOUT_CLASSIFICATION	0.008004097779271645	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999847176655937	WITHOUT_CLASSIFICATION	1.5282334406228637E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999808410509329	WITHOUT_CLASSIFICATION	1.9158949067140417E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999890470934844	WITHOUT_CLASSIFICATION	1.095290651562689E-5	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9998613692210345	WITHOUT_CLASSIFICATION	1.3863077896539768E-4	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999758620124478	WITHOUT_CLASSIFICATION	2.4137987552166253E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9998967743948174	WITHOUT_CLASSIFICATION	1.032256051825039E-4	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9998944667926416	WITHOUT_CLASSIFICATION	1.0553320735836248E-4	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9996182045159704	WITHOUT_CLASSIFICATION	3.8179548402963624E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999798271756961	WITHOUT_CLASSIFICATION	2.0172824303878254E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9998752459630508	WITHOUT_CLASSIFICATION	1.2475403694925174E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997309900675136	WITHOUT_CLASSIFICATION	2.690099324862886E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9997595910092038	WITHOUT_CLASSIFICATION	2.4040899079619545E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999434639121403	WITHOUT_CLASSIFICATION	5.653608785971778E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9997277336775381	WITHOUT_CLASSIFICATION	2.722663224619621E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996673447190421	WITHOUT_CLASSIFICATION	3.3265528095792837E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999891130435475	WITHOUT_CLASSIFICATION	1.0886956452517478E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999760877639198	WITHOUT_CLASSIFICATION	2.391223608014905E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999388471960252	WITHOUT_CLASSIFICATION	6.11528039746922E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9994818467792844	WITHOUT_CLASSIFICATION	5.18153220715532E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999585164914012	WITHOUT_CLASSIFICATION	4.14835085988645E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.999995497894037	WITHOUT_CLASSIFICATION	4.502105962966577E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9987509976249237	WITHOUT_CLASSIFICATION	0.0012490023750763842	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9998618537558837	WITHOUT_CLASSIFICATION	1.381462441164198E-4	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999701152929271	WITHOUT_CLASSIFICATION	2.9884707072953763E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999396240220298	WITHOUT_CLASSIFICATION	6.037597797024319E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999545071603997	WITHOUT_CLASSIFICATION	4.549283960027534E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998960384029325	WITHOUT_CLASSIFICATION	1.0396159706739226E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9997230428259541	WITHOUT_CLASSIFICATION	2.769571740457819E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9995143665361743	WITHOUT_CLASSIFICATION	4.856334638256934E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999134059864955	WITHOUT_CLASSIFICATION	8.659401350448764E-5	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999574208558192	WITHOUT_CLASSIFICATION	4.257914418088397E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992139824249495	WITHOUT_CLASSIFICATION	7.860175750504958E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998935143525637	WITHOUT_CLASSIFICATION	1.064856474363661E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999549252423157	WITHOUT_CLASSIFICATION	4.507475768443733E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998551508662105	WITHOUT_CLASSIFICATION	1.448491337895171E-4	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999337229046394	WITHOUT_CLASSIFICATION	6.627709536061603E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998831120668729	WITHOUT_CLASSIFICATION	1.1688793312721034E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999674850608523	WITHOUT_CLASSIFICATION	3.251493914780086E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999844738567077	WITHOUT_CLASSIFICATION	1.552614329219932E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9997872928177564	WITHOUT_CLASSIFICATION	2.1270718224368406E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9996406778257287	WITHOUT_CLASSIFICATION	3.5932217427125354E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9996406778257287	WITHOUT_CLASSIFICATION	3.5932217427125354E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9978947988224506	WITHOUT_CLASSIFICATION	0.002105201177549302	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9996420552513553	WITHOUT_CLASSIFICATION	3.5794474864474354E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9996420552513553	WITHOUT_CLASSIFICATION	3.5794474864474354E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998968351769778	WITHOUT_CLASSIFICATION	1.0316482302219786E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998968351769778	WITHOUT_CLASSIFICATION	1.0316482302219786E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9997562132603064	WITHOUT_CLASSIFICATION	2.437867396935844E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9997562132603064	WITHOUT_CLASSIFICATION	2.437867396935844E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999955717923696	WITHOUT_CLASSIFICATION	4.428207630403749E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9983329156017243	WITHOUT_CLASSIFICATION	0.0016670843982756773	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9983329156017243	WITHOUT_CLASSIFICATION	0.0016670843982756773	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999742772519532	WITHOUT_CLASSIFICATION	2.5722748046858023E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999742772519532	WITHOUT_CLASSIFICATION	2.5722748046858023E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998157826261861	WITHOUT_CLASSIFICATION	1.8421737381386216E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999797606901416	WITHOUT_CLASSIFICATION	2.023930985840587E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999797606901416	WITHOUT_CLASSIFICATION	2.023930985840587E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998467299672086	WITHOUT_CLASSIFICATION	1.532700327914747E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999024106500061	WITHOUT_CLASSIFICATION	9.758934999398459E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998554285278609	WITHOUT_CLASSIFICATION	1.445714721390985E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998467299672086	WITHOUT_CLASSIFICATION	1.532700327914747E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9996569610265718	WITHOUT_CLASSIFICATION	3.4303897342818955E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999984061508453	WITHOUT_CLASSIFICATION	1.5938491547038752E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9997331469830374	WITHOUT_CLASSIFICATION	2.668530169626326E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999984446017243	WITHOUT_CLASSIFICATION	1.5553982757944038E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999973045442312	WITHOUT_CLASSIFICATION	2.695455768785395E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999973045442312	WITHOUT_CLASSIFICATION	2.6954557687853977E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.99998709773233	WITHOUT_CLASSIFICATION	1.2902267669980349E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999862371199767	WITHOUT_CLASSIFICATION	1.3762880023298238E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999862371199767	WITHOUT_CLASSIFICATION	1.3762880023298238E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.999844151744408	WITHOUT_CLASSIFICATION	1.5584825559190437E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9997331469830374	WITHOUT_CLASSIFICATION	2.668530169626326E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999984446017243	WITHOUT_CLASSIFICATION	1.5553982757944038E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999973045442312	WITHOUT_CLASSIFICATION	2.695455768785395E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999973045442312	WITHOUT_CLASSIFICATION	2.6954557687853977E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.99998709773233	WITHOUT_CLASSIFICATION	1.2902267669980349E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9997712113417943	WITHOUT_CLASSIFICATION	2.2878865820578163E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998847857695375	WITHOUT_CLASSIFICATION	1.152142304624915E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.998834290765179	WITHOUT_CLASSIFICATION	0.0011657092348209685	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9997294218988102	WITHOUT_CLASSIFICATION	2.705781011898733E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999175904329299	WITHOUT_CLASSIFICATION	8.240956707005215E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999908737889418	WITHOUT_CLASSIFICATION	9.126211058150099E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999876058975674	WITHOUT_CLASSIFICATION	1.2394102432672742E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999876058975674	WITHOUT_CLASSIFICATION	1.2394102432672742E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9985345553196082	WITHOUT_CLASSIFICATION	0.0014654446803917067	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9997078166973038	WITHOUT_CLASSIFICATION	2.921833026962348E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9997078166973038	WITHOUT_CLASSIFICATION	2.921833026962348E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9998942629989322	WITHOUT_CLASSIFICATION	1.057370010676818E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9997082263314824	WITHOUT_CLASSIFICATION	2.917736685176642E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9997082263314824	WITHOUT_CLASSIFICATION	2.917736685176642E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9997507488037591	WITHOUT_CLASSIFICATION	2.492511962408281E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9997482924121255	WITHOUT_CLASSIFICATION	2.517075878745432E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.99994662853721	WITHOUT_CLASSIFICATION	5.337146279004483E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.99994662853721	WITHOUT_CLASSIFICATION	5.337146279004483E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9997078166973038	WITHOUT_CLASSIFICATION	2.921833026962348E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999475696853942	WITHOUT_CLASSIFICATION	5.243031460580034E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999364816175504	WITHOUT_CLASSIFICATION	6.351838244955623E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999644371684571	WITHOUT_CLASSIFICATION	3.55628315429239E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999515970713225	WITHOUT_CLASSIFICATION	4.840292867751082E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999512940533769	WITHOUT_CLASSIFICATION	4.87059466231311E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9997119905332386	WITHOUT_CLASSIFICATION	2.8800946676146063E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9998875612677469	WITHOUT_CLASSIFICATION	1.1243873225311063E-4	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9993398139242249	WITHOUT_CLASSIFICATION	6.601860757751242E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999976770745919	WITHOUT_CLASSIFICATION	2.322925408245E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998047236612528	WITHOUT_CLASSIFICATION	1.952763387471175E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998047236612528	WITHOUT_CLASSIFICATION	1.952763387471175E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997861402814728	WITHOUT_CLASSIFICATION	2.1385971852710327E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997861402814728	WITHOUT_CLASSIFICATION	2.1385971852710327E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9998499813869437	WITHOUT_CLASSIFICATION	1.500186130563512E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995051206819325	WITHOUT_CLASSIFICATION	4.948793180675737E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995051206819325	WITHOUT_CLASSIFICATION	4.948793180675737E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995051206819325	WITHOUT_CLASSIFICATION	4.948793180675737E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999914508025879	WITHOUT_CLASSIFICATION	8.549197412127858E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999914508025879	WITHOUT_CLASSIFICATION	8.549197412127858E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998639629517176	WITHOUT_CLASSIFICATION	1.36037048282419E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9997307431165372	WITHOUT_CLASSIFICATION	2.6925688346279624E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999668105663704	WITHOUT_CLASSIFICATION	3.318943362959919E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999975307494836	WITHOUT_CLASSIFICATION	2.4692505164276706E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999198708893396	WITHOUT_CLASSIFICATION	8.012911066038029E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9997937340767894	WITHOUT_CLASSIFICATION	2.0626592321066906E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9979065699670744	WITHOUT_CLASSIFICATION	0.002093430032925677	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9998639629517176	WITHOUT_CLASSIFICATION	1.36037048282419E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999826338086829	WITHOUT_CLASSIFICATION	1.7366191317035784E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9997307431165372	WITHOUT_CLASSIFICATION	2.6925688346279624E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999668105663704	WITHOUT_CLASSIFICATION	3.318943362959919E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998682778841603	WITHOUT_CLASSIFICATION	1.317221158397554E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999621592333219	WITHOUT_CLASSIFICATION	3.7840766678185256E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998512524033534	WITHOUT_CLASSIFICATION	1.487475966466593E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999363035372144	WITHOUT_CLASSIFICATION	6.36964627856701E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999642078834186	WITHOUT_CLASSIFICATION	3.579211658139951E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9997870334364537	WITHOUT_CLASSIFICATION	2.1296656354622507E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998682778841603	WITHOUT_CLASSIFICATION	1.317221158397554E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999562790976569	WITHOUT_CLASSIFICATION	4.3720902342965635E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999562790976569	WITHOUT_CLASSIFICATION	4.3720902342965635E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9991536125368303	WITHOUT_CLASSIFICATION	8.463874631697356E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999691518772562	WITHOUT_CLASSIFICATION	3.084812274367475E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999224758140896	WITHOUT_CLASSIFICATION	7.752418591040473E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9995212386978284	WITHOUT_CLASSIFICATION	4.7876130217154415E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994707146123426	WITHOUT_CLASSIFICATION	5.292853876574786E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999953426303009	WITHOUT_CLASSIFICATION	4.65736969906892E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9998234015516476	WITHOUT_CLASSIFICATION	1.7659844835251522E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999084720716608	WITHOUT_CLASSIFICATION	9.152792833926299E-5	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999195471861332	WITHOUT_CLASSIFICATION	8.045281386676719E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999583808363183	WITHOUT_CLASSIFICATION	4.161916368177122E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998642395129659	WITHOUT_CLASSIFICATION	1.3576048703420966E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9995212386978284	WITHOUT_CLASSIFICATION	4.7876130217154415E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994707146123426	WITHOUT_CLASSIFICATION	5.292853876574786E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9998590507855241	WITHOUT_CLASSIFICATION	1.4094921447590738E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999394126634383	WITHOUT_CLASSIFICATION	6.058733656168441E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9998508693841951	WITHOUT_CLASSIFICATION	1.4913061580486237E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999654130658169	WITHOUT_CLASSIFICATION	3.4586934183197437E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999607564362661	WITHOUT_CLASSIFICATION	3.9243563733848756E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999317495052161	WITHOUT_CLASSIFICATION	6.825049478391579E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999298243268584	WITHOUT_CLASSIFICATION	7.017567314160333E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9982334262255597	WITHOUT_CLASSIFICATION	0.0017665737744403723	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999975766284631	WITHOUT_CLASSIFICATION	2.4233715368987724E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999593424989672	WITHOUT_CLASSIFICATION	4.065750103280867E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999727761135275	WITHOUT_CLASSIFICATION	2.7223886472367832E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9997490111603735	WITHOUT_CLASSIFICATION	2.5098883962647404E-4	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999952928826678	WITHOUT_CLASSIFICATION	4.70711733216627E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999593424989672	WITHOUT_CLASSIFICATION	4.065750103280867E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999727761135275	WITHOUT_CLASSIFICATION	2.7223886472367832E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9997490111603735	WITHOUT_CLASSIFICATION	2.5098883962647404E-4	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.99987417179965	WITHOUT_CLASSIFICATION	1.2582820035003756E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9990913810129245	WITHOUT_CLASSIFICATION	9.086189870755138E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9996502578142973	WITHOUT_CLASSIFICATION	3.4974218570280096E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9985300870458896	WITHOUT_CLASSIFICATION	0.0014699129541103238	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9997981527779263	WITHOUT_CLASSIFICATION	2.0184722207383004E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9998765707996946	WITHOUT_CLASSIFICATION	1.2342920030539034E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9998455201485857	WITHOUT_CLASSIFICATION	1.5447985141421112E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999444621102694	WITHOUT_CLASSIFICATION	5.553788973057461E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999852098659443	WITHOUT_CLASSIFICATION	1.479013405582148E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9833054031614286	WITHOUT_CLASSIFICATION	0.01669459683857141	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9997423900083006	WITHOUT_CLASSIFICATION	2.5760999169943254E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9998125524800123	WITHOUT_CLASSIFICATION	1.8744751998755506E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999899438453714	WITHOUT_CLASSIFICATION	1.005615462853342E-5	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9995972215248374	WITHOUT_CLASSIFICATION	4.027784751625118E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999398046803569	WITHOUT_CLASSIFICATION	6.019531964314026E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9987035869373927	WITHOUT_CLASSIFICATION	0.001296413062607239	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9998362895089327	WITHOUT_CLASSIFICATION	1.6371049106724485E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999897991347003	WITHOUT_CLASSIFICATION	1.0200865299712983E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999213181536423	WITHOUT_CLASSIFICATION	7.868184635772109E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999455736010107	WITHOUT_CLASSIFICATION	5.4426398989411765E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999760097920778	WITHOUT_CLASSIFICATION	2.3990207922164172E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999760097920778	WITHOUT_CLASSIFICATION	2.3990207922164172E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9998043737904497	WITHOUT_CLASSIFICATION	1.9562620955031085E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9998043737904497	WITHOUT_CLASSIFICATION	1.9562620955031085E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999849030413904	WITHOUT_CLASSIFICATION	1.509695860960848E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999849030413904	WITHOUT_CLASSIFICATION	1.509695860960848E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999764218351663	WITHOUT_CLASSIFICATION	2.357816483361553E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999993424501545	WITHOUT_CLASSIFICATION	6.575498455272253E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999337224906985	WITHOUT_CLASSIFICATION	6.627750930158211E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999927582143209	WITHOUT_CLASSIFICATION	7.241785679123016E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999975325545819	WITHOUT_CLASSIFICATION	2.4674454181598653E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999935343796378	WITHOUT_CLASSIFICATION	6.465620362262047E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999273719339298	WITHOUT_CLASSIFICATION	7.262806607025541E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999765280574842	WITHOUT_CLASSIFICATION	2.3471942515815245E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999764218351663	WITHOUT_CLASSIFICATION	2.357816483361553E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999993424501545	WITHOUT_CLASSIFICATION	6.575498455272253E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999337224906985	WITHOUT_CLASSIFICATION	6.627750930158211E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999975325545819	WITHOUT_CLASSIFICATION	2.4674454181598653E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999935343796378	WITHOUT_CLASSIFICATION	6.465620362262047E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9998979298749632	WITHOUT_CLASSIFICATION	1.0207012503688401E-4	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999030600315135	WITHOUT_CLASSIFICATION	9.693996848652482E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996620561453339	WITHOUT_CLASSIFICATION	3.379438546662006E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9996620561453339	WITHOUT_CLASSIFICATION	3.379438546662006E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9998573817492251	WITHOUT_CLASSIFICATION	1.426182507748724E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998555517805691	WITHOUT_CLASSIFICATION	1.444482194309874E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9977092510084847	WITHOUT_CLASSIFICATION	0.0022907489915152384	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999307856068003	WITHOUT_CLASSIFICATION	6.92143931998123E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999307856068003	WITHOUT_CLASSIFICATION	6.92143931998123E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996019410301192	WITHOUT_CLASSIFICATION	3.9805896988078394E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999915061509712	WITHOUT_CLASSIFICATION	8.49384902877736E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.999779817195956	WITHOUT_CLASSIFICATION	2.2018280404387589E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999331385310756	WITHOUT_CLASSIFICATION	6.686146892441966E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9997332207381934	WITHOUT_CLASSIFICATION	2.667792618065812E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992139824249495	WITHOUT_CLASSIFICATION	7.860175750504958E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998935143525637	WITHOUT_CLASSIFICATION	1.064856474363661E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999549252423157	WITHOUT_CLASSIFICATION	4.507475768443733E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998551508662105	WITHOUT_CLASSIFICATION	1.448491337895171E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999674850608523	WITHOUT_CLASSIFICATION	3.251493914780086E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999844738567077	WITHOUT_CLASSIFICATION	1.552614329219932E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996019410301192	WITHOUT_CLASSIFICATION	3.9805896988078394E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999915061509712	WITHOUT_CLASSIFICATION	8.49384902877736E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999331385310756	WITHOUT_CLASSIFICATION	6.686146892441966E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999076795794497	WITHOUT_CLASSIFICATION	9.232042055031987E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9977092510084847	WITHOUT_CLASSIFICATION	0.0022907489915152384	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9977092510084847	WITHOUT_CLASSIFICATION	0.0022907489915152384	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998642395129659	WITHOUT_CLASSIFICATION	1.3576048703420966E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998642395129659	WITHOUT_CLASSIFICATION	1.3576048703420966E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993929653276553	WITHOUT_CLASSIFICATION	6.070346723447679E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993929653276553	WITHOUT_CLASSIFICATION	6.070346723447679E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999435617170115	WITHOUT_CLASSIFICATION	5.643828298839496E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9995849947966868	WITHOUT_CLASSIFICATION	4.150052033131658E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9998729736536317	WITHOUT_CLASSIFICATION	1.27026346368298E-4	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.999953570182307	WITHOUT_CLASSIFICATION	4.642981769311807E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9997120825290475	WITHOUT_CLASSIFICATION	2.8791747095247103E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999110583825123	WITHOUT_CLASSIFICATION	8.894161748770681E-5	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9985905016365726	WITHOUT_CLASSIFICATION	0.0014094983634273498	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999928571860545	WITHOUT_CLASSIFICATION	7.142813945635853E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999728469098429	WITHOUT_CLASSIFICATION	2.715309015709563E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999709274419772	WITHOUT_CLASSIFICATION	2.9072558022831518E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999612265893318	WITHOUT_CLASSIFICATION	3.8773410668075266E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999840458476466	WITHOUT_CLASSIFICATION	1.5954152353497755E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999704332510242	WITHOUT_CLASSIFICATION	2.9566748975887805E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9998949335220685	WITHOUT_CLASSIFICATION	1.0506647793145135E-4	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999625997352957	WITHOUT_CLASSIFICATION	3.7400264704274485E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9998943840199966	WITHOUT_CLASSIFICATION	1.056159800032863E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999805312894077	WITHOUT_CLASSIFICATION	1.946871059231526E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999462367389651	WITHOUT_CLASSIFICATION	5.376326103482463E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998935143525637	WITHOUT_CLASSIFICATION	1.064856474363661E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998551508662105	WITHOUT_CLASSIFICATION	1.448491337895171E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999076795794497	WITHOUT_CLASSIFICATION	9.232042055031987E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9977092510084847	WITHOUT_CLASSIFICATION	0.0022907489915152384	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998642395129659	WITHOUT_CLASSIFICATION	1.3576048703420966E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993929653276553	WITHOUT_CLASSIFICATION	6.070346723447679E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9998939143898115	WITHOUT_CLASSIFICATION	1.0608561018856742E-4	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.999941998854895	WITHOUT_CLASSIFICATION	5.8001145105158455E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999857771868688	WITHOUT_CLASSIFICATION	1.4222813131188228E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9985270873321648	WITHOUT_CLASSIFICATION	0.0014729126678352175	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9988611322773511	WITHOUT_CLASSIFICATION	0.0011388677226489483	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9988611322773511	WITHOUT_CLASSIFICATION	0.0011388677226489483	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999208684469069	WITHOUT_CLASSIFICATION	7.913155309320655E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999662964520147	WITHOUT_CLASSIFICATION	3.370354798519653E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999644712343768	WITHOUT_CLASSIFICATION	3.5528765623170856E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999668373280695	WITHOUT_CLASSIFICATION	3.316267193048716E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999875784293062	WITHOUT_CLASSIFICATION	1.2421570693839516E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999875784293062	WITHOUT_CLASSIFICATION	1.2421570693839516E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999724991589689	WITHOUT_CLASSIFICATION	2.750084103110558E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999707393733039	WITHOUT_CLASSIFICATION	2.9260626696138958E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.999897744266081	WITHOUT_CLASSIFICATION	1.022557339190282E-4	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9996950506117203	WITHOUT_CLASSIFICATION	3.0494938827978056E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999946452816204	WITHOUT_CLASSIFICATION	5.354718379631743E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999644909512047	WITHOUT_CLASSIFICATION	3.550904879530797E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999592334490138	WITHOUT_CLASSIFICATION	4.076655098621532E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9997607312941231	WITHOUT_CLASSIFICATION	2.3926870587685087E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.990477563030371	WITHOUT_CLASSIFICATION	0.009522436969628886	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9995273679953277	WITHOUT_CLASSIFICATION	4.7263200467223695E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9987634458524633	WITHOUT_CLASSIFICATION	0.0012365541475367438	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999448928266722	WITHOUT_CLASSIFICATION	5.5107173327867744E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999945029480072	WITHOUT_CLASSIFICATION	5.497051992891652E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999426005290185	WITHOUT_CLASSIFICATION	5.7399470981384356E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9994466675111835	WITHOUT_CLASSIFICATION	5.53332488816499E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9996256303536655	WITHOUT_CLASSIFICATION	3.7436964633451834E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9998450904313074	WITHOUT_CLASSIFICATION	1.5490956869261676E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.999881472733757	WITHOUT_CLASSIFICATION	1.1852726624296698E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9996704354038414	WITHOUT_CLASSIFICATION	3.295645961586965E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999779305291364	WITHOUT_CLASSIFICATION	2.2069470863536728E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9996107987666162	WITHOUT_CLASSIFICATION	3.892012333838018E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999667946372595	WITHOUT_CLASSIFICATION	3.3205362740574365E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999667946372595	WITHOUT_CLASSIFICATION	3.3205362740574365E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9996130196360251	WITHOUT_CLASSIFICATION	3.869803639748677E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998981387170569	WITHOUT_CLASSIFICATION	1.0186128294303691E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996450043888946	WITHOUT_CLASSIFICATION	3.549956111054675E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996450043888946	WITHOUT_CLASSIFICATION	3.549956111054675E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.8344824428935903	DEFECT	0.16551755710640975	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.998890437302755	WITHOUT_CLASSIFICATION	0.0011095626972450776	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.999902772264622	WITHOUT_CLASSIFICATION	9.722773537793149E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999184772980894	WITHOUT_CLASSIFICATION	8.152270191065797E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999184772980894	WITHOUT_CLASSIFICATION	8.152270191065797E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9996778576726056	WITHOUT_CLASSIFICATION	3.221423273944029E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999925970167555	WITHOUT_CLASSIFICATION	7.40298324449249E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999666088892633	WITHOUT_CLASSIFICATION	3.339111073679808E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999598235971088	WITHOUT_CLASSIFICATION	4.017640289121629E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9952290602245053	WITHOUT_CLASSIFICATION	0.004770939775494713	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999777755022888	WITHOUT_CLASSIFICATION	2.222449771118115E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999605324313764	WITHOUT_CLASSIFICATION	3.9467568623674974E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999567052889723	WITHOUT_CLASSIFICATION	4.329471102760856E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999857654018377	WITHOUT_CLASSIFICATION	1.4234598162236099E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9997679560308885	WITHOUT_CLASSIFICATION	2.3204396911147195E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999852635898735	WITHOUT_CLASSIFICATION	1.4736410126522174E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999877125358829	WITHOUT_CLASSIFICATION	1.2287464117195296E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999954718562365	WITHOUT_CLASSIFICATION	4.528143763464772E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9983823783758722	WITHOUT_CLASSIFICATION	0.0016176216241277177	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999273808845452	WITHOUT_CLASSIFICATION	7.261911545476904E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9998944296144048	WITHOUT_CLASSIFICATION	1.055703855951949E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999830564945054	WITHOUT_CLASSIFICATION	1.6943505494604115E-5	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999695427285105	WITHOUT_CLASSIFICATION	3.0457271489646733E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999593986358944	WITHOUT_CLASSIFICATION	4.06013641054164E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999776191375191	WITHOUT_CLASSIFICATION	2.2380862480918237E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999786030685478	WITHOUT_CLASSIFICATION	2.139693145212356E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999817180326928	WITHOUT_CLASSIFICATION	1.8281967307241976E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999542254424308	WITHOUT_CLASSIFICATION	4.577455756915807E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998602904594606	WITHOUT_CLASSIFICATION	1.397095405394881E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999863506444553	WITHOUT_CLASSIFICATION	1.3649355544797741E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9992614651705415	WITHOUT_CLASSIFICATION	7.38534829458542E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9259069696441181	WITHOUT_CLASSIFICATION	0.07409303035588193	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998746456390332	WITHOUT_CLASSIFICATION	1.2535436096685137E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.999965244526829	WITHOUT_CLASSIFICATION	3.475547317099795E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999609692285772	WITHOUT_CLASSIFICATION	3.903077142287544E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999984961212803	WITHOUT_CLASSIFICATION	1.5038787197007902E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9983823783758722	WITHOUT_CLASSIFICATION	0.0016176216241277177	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998746456390332	WITHOUT_CLASSIFICATION	1.2535436096685137E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.999965244526829	WITHOUT_CLASSIFICATION	3.475547317099795E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999984961212803	WITHOUT_CLASSIFICATION	1.5038787197007902E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999524336342106	WITHOUT_CLASSIFICATION	4.756636578929213E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999852426618049	WITHOUT_CLASSIFICATION	1.4757338195038436E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999579869283374	WITHOUT_CLASSIFICATION	4.2013071662644E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.999988749903055	WITHOUT_CLASSIFICATION	1.1250096945064868E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999923898678353	WITHOUT_CLASSIFICATION	7.610132164592685E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9995539040708269	WITHOUT_CLASSIFICATION	4.460959291732247E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999779305291364	WITHOUT_CLASSIFICATION	2.2069470863536728E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9998240823664168	WITHOUT_CLASSIFICATION	1.7591763358318105E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999873843911663	WITHOUT_CLASSIFICATION	1.2615608833621588E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9927672167755837	WITHOUT_CLASSIFICATION	0.007232783224416418	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9992797654234402	WITHOUT_CLASSIFICATION	7.20234576559776E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9992797654234402	WITHOUT_CLASSIFICATION	7.20234576559776E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999490463914262	WITHOUT_CLASSIFICATION	5.095360857384217E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999809385469723	WITHOUT_CLASSIFICATION	1.906145302768533E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999547295703256	WITHOUT_CLASSIFICATION	4.527042967426556E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9995810425946964	WITHOUT_CLASSIFICATION	4.189574053037157E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998615680936378	WITHOUT_CLASSIFICATION	1.3843190636230184E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998824170192722	WITHOUT_CLASSIFICATION	1.1758298072783479E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9517551158757052	WITHOUT_CLASSIFICATION	0.048244884124294764	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999845618905152	WITHOUT_CLASSIFICATION	1.5438109484783693E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999612879997929	WITHOUT_CLASSIFICATION	3.871200020709769E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9998537591224691	WITHOUT_CLASSIFICATION	1.462408775308686E-4	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999498743518619	WITHOUT_CLASSIFICATION	5.012564813817642E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9998771464252298	WITHOUT_CLASSIFICATION	1.228535747700927E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999405475104982	WITHOUT_CLASSIFICATION	5.9452489501712804E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999692985544626	WITHOUT_CLASSIFICATION	3.070144553741944E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.999703980191886	WITHOUT_CLASSIFICATION	2.960198081139621E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999378222130861	WITHOUT_CLASSIFICATION	6.217778691379061E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9998863304563381	WITHOUT_CLASSIFICATION	1.1366954366182656E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999599743784663	WITHOUT_CLASSIFICATION	4.002562153369547E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998787372716732	WITHOUT_CLASSIFICATION	1.2126272832683444E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9996918655155134	WITHOUT_CLASSIFICATION	3.0813448448662476E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999662638048238	WITHOUT_CLASSIFICATION	3.373619517621984E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.999809953182102	WITHOUT_CLASSIFICATION	1.900468178979804E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999337808844566	WITHOUT_CLASSIFICATION	6.6219115543421E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.999936693128733	WITHOUT_CLASSIFICATION	6.330687126692061E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.6481295092706649	WITHOUT_CLASSIFICATION	0.3518704907293351	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9996169188499894	WITHOUT_CLASSIFICATION	3.8308115001067816E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.999698179287864	WITHOUT_CLASSIFICATION	3.0182071213598626E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999705349234058	WITHOUT_CLASSIFICATION	2.9465076594206594E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999267803150641	WITHOUT_CLASSIFICATION	7.321968493588453E-5	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999594563972023	WITHOUT_CLASSIFICATION	4.054360279778336E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999872436733783	WITHOUT_CLASSIFICATION	1.2756326621556947E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999743374035092	WITHOUT_CLASSIFICATION	2.5662596490881796E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999530408529218	WITHOUT_CLASSIFICATION	4.695914707818841E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9995901811807655	WITHOUT_CLASSIFICATION	4.0981881923453817E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999200839355941	WITHOUT_CLASSIFICATION	7.991606440597564E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9992645766101257	WITHOUT_CLASSIFICATION	7.354233898744093E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999838444765292	WITHOUT_CLASSIFICATION	1.6155523470728505E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999617017663389	WITHOUT_CLASSIFICATION	3.829823366113062E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9957791358492523	WITHOUT_CLASSIFICATION	0.004220864150747681	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994085871080983	WITHOUT_CLASSIFICATION	5.914128919017286E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9998877267345263	WITHOUT_CLASSIFICATION	1.1227326547369044E-4	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9981405374811906	WITHOUT_CLASSIFICATION	0.0018594625188094406	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9937200729576846	WITHOUT_CLASSIFICATION	0.006279927042315315	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9996129430758254	WITHOUT_CLASSIFICATION	3.870569241746291E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9991439208066114	WITHOUT_CLASSIFICATION	8.560791933886782E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998438846913761	WITHOUT_CLASSIFICATION	1.5611530862393526E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9998395904812386	WITHOUT_CLASSIFICATION	1.6040951876146863E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998225611472518	WITHOUT_CLASSIFICATION	1.7743885274825193E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999547557220336	WITHOUT_CLASSIFICATION	4.524427796626271E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9921543633717945	WITHOUT_CLASSIFICATION	0.00784563662820546	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9995956895785387	WITHOUT_CLASSIFICATION	4.0431042146137324E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9962960875346943	WITHOUT_CLASSIFICATION	0.003703912465305735	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9994363593360099	WITHOUT_CLASSIFICATION	5.636406639900033E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9997883932413238	WITHOUT_CLASSIFICATION	2.1160675867615847E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9994657504886422	WITHOUT_CLASSIFICATION	5.342495113578833E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9993034136467278	WITHOUT_CLASSIFICATION	6.965863532722225E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9980759362473919	WITHOUT_CLASSIFICATION	0.001924063752608163	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9980759362473919	WITHOUT_CLASSIFICATION	0.001924063752608163	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9994001452984129	WITHOUT_CLASSIFICATION	5.998547015871322E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9998995772735271	WITHOUT_CLASSIFICATION	1.0042272647293393E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9994127090217961	WITHOUT_CLASSIFICATION	5.872909782037772E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996222060615706	WITHOUT_CLASSIFICATION	3.777939384294228E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9997683636268099	WITHOUT_CLASSIFICATION	2.316363731900407E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.999852663119242	WITHOUT_CLASSIFICATION	1.4733688075785147E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997889573871662	WITHOUT_CLASSIFICATION	2.110426128337789E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9995364545908413	WITHOUT_CLASSIFICATION	4.635454091586805E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999762408961759	WITHOUT_CLASSIFICATION	2.3759103824130802E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999954816646625	WITHOUT_CLASSIFICATION	4.518335337563103E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997934454853303	WITHOUT_CLASSIFICATION	2.0655451466955729E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999423717946366	WITHOUT_CLASSIFICATION	5.762820536333671E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999461166375719	WITHOUT_CLASSIFICATION	5.388336242811243E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998489255784517	WITHOUT_CLASSIFICATION	1.5107442154821665E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999256258595938	WITHOUT_CLASSIFICATION	7.437414040626347E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999184943876138	WITHOUT_CLASSIFICATION	8.150561238611153E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999622553913392	WITHOUT_CLASSIFICATION	3.7744608660794336E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999011700423586	WITHOUT_CLASSIFICATION	9.882995764146035E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9970966529777436	WITHOUT_CLASSIFICATION	0.0029033470222562595	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9982478856323793	WITHOUT_CLASSIFICATION	0.0017521143676207645	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999889424483624	WITHOUT_CLASSIFICATION	1.1057551637602613E-4	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999527202207237	WITHOUT_CLASSIFICATION	4.727977927629092E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999112912117069	WITHOUT_CLASSIFICATION	8.870878829309854E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.99997375911025	WITHOUT_CLASSIFICATION	2.6240889750071735E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998207786603468	WITHOUT_CLASSIFICATION	1.792213396531197E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9996157695654626	WITHOUT_CLASSIFICATION	3.842304345373929E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999695579483059	WITHOUT_CLASSIFICATION	3.0442051694146462E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9997752124546189	WITHOUT_CLASSIFICATION	2.247875453811205E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.99996841095681	WITHOUT_CLASSIFICATION	3.158904318997974E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.998624449845688	WITHOUT_CLASSIFICATION	0.0013755501543119644	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9995995946828431	WITHOUT_CLASSIFICATION	4.0040531715701143E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9998743691704349	WITHOUT_CLASSIFICATION	1.2563082956501304E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999445381601596	WITHOUT_CLASSIFICATION	5.546183984046917E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999535742570779	WITHOUT_CLASSIFICATION	4.6425742922261724E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999445381601596	WITHOUT_CLASSIFICATION	5.546183984046917E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9997379128093627	WITHOUT_CLASSIFICATION	2.6208719063729045E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998692923424363	WITHOUT_CLASSIFICATION	0.0013070765756370212	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998692923424363	WITHOUT_CLASSIFICATION	0.0013070765756370212	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.998692923424363	WITHOUT_CLASSIFICATION	0.0013070765756370212	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999954087480281	WITHOUT_CLASSIFICATION	4.591251971958543E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999954087480281	WITHOUT_CLASSIFICATION	4.591251971958543E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9989878390023319	WITHOUT_CLASSIFICATION	0.001012160997668166	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.99981375498133	WITHOUT_CLASSIFICATION	1.8624501866998106E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999002299408697	WITHOUT_CLASSIFICATION	9.977005913027847E-5	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.999970407655249	WITHOUT_CLASSIFICATION	2.9592344750981032E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999931956602404	WITHOUT_CLASSIFICATION	6.80433975953901E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999909379364329	WITHOUT_CLASSIFICATION	9.062063567035693E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9996148090757739	WITHOUT_CLASSIFICATION	3.85190924226107E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998730114125935	WITHOUT_CLASSIFICATION	1.2698858740647174E-4	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999648987330154	WITHOUT_CLASSIFICATION	3.510126698462377E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999529302873995	WITHOUT_CLASSIFICATION	4.7069712600512404E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999804148590121	WITHOUT_CLASSIFICATION	1.958514098787385E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.999707883377004	WITHOUT_CLASSIFICATION	2.9211662299605436E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.999965377738933	WITHOUT_CLASSIFICATION	3.4622261067006177E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999640634257564	WITHOUT_CLASSIFICATION	3.5936574243695695E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999535804395762	WITHOUT_CLASSIFICATION	4.641956042382248E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999629127688343	WITHOUT_CLASSIFICATION	3.708723116578603E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998380702025847	WITHOUT_CLASSIFICATION	1.619297974152582E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999387769404716	WITHOUT_CLASSIFICATION	6.122305952836071E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999387769404716	WITHOUT_CLASSIFICATION	6.122305952836071E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999590029360073	WITHOUT_CLASSIFICATION	4.099706399266668E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999554371909309	WITHOUT_CLASSIFICATION	4.456280906893316E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999554371909309	WITHOUT_CLASSIFICATION	4.456280906893316E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9997854998783914	WITHOUT_CLASSIFICATION	2.1450012160857996E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999649219452329	WITHOUT_CLASSIFICATION	3.507805476703636E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999819199499723	WITHOUT_CLASSIFICATION	1.8080050027705167E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999475471710982	WITHOUT_CLASSIFICATION	5.2452828901684E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999797998706982	WITHOUT_CLASSIFICATION	2.0200129301814023E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9998108410294042	WITHOUT_CLASSIFICATION	1.8915897059580968E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999659003734294	WITHOUT_CLASSIFICATION	3.4099626570687045E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999809935224618	WITHOUT_CLASSIFICATION	1.90064775380838E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999820784474139	WITHOUT_CLASSIFICATION	1.7921552586058752E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.999991429627929	WITHOUT_CLASSIFICATION	8.570372070988312E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999862664353469	WITHOUT_CLASSIFICATION	1.3733564653025999E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9991573488830567	WITHOUT_CLASSIFICATION	8.426511169432987E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999968389811933	WITHOUT_CLASSIFICATION	3.1610188067564327E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999730476320066	WITHOUT_CLASSIFICATION	2.695236799351318E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998730114125935	WITHOUT_CLASSIFICATION	1.2698858740647174E-4	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999581973845633	WITHOUT_CLASSIFICATION	4.180261543673739E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999979706900405	WITHOUT_CLASSIFICATION	2.0293099594771985E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999979706900405	WITHOUT_CLASSIFICATION	2.0293099594771985E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9998453695337844	WITHOUT_CLASSIFICATION	1.546304662154929E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9988678150516724	WITHOUT_CLASSIFICATION	0.0011321849483276357	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9998646546212202	WITHOUT_CLASSIFICATION	1.353453787797526E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9998739303497506	WITHOUT_CLASSIFICATION	1.2606965024933965E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999837624471517	WITHOUT_CLASSIFICATION	1.6237552848281034E-5	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999552171663801	WITHOUT_CLASSIFICATION	4.478283361981203E-5	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9993797661413722	WITHOUT_CLASSIFICATION	6.202338586278463E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9893706537635023	WITHOUT_CLASSIFICATION	0.010629346236497672	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9991960639090384	WITHOUT_CLASSIFICATION	8.039360909616923E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9998068764394862	WITHOUT_CLASSIFICATION	1.9312356051374687E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9998813576428185	WITHOUT_CLASSIFICATION	1.1864235718153215E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9982982979799634	WITHOUT_CLASSIFICATION	0.0017017020200366792	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9957640348375405	WITHOUT_CLASSIFICATION	0.004235965162459515	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999452978904632	WITHOUT_CLASSIFICATION	5.470210953690914E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999889618002629	WITHOUT_CLASSIFICATION	1.1038199737230912E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9997682274204944	WITHOUT_CLASSIFICATION	2.3177257950566014E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999625596464589	WITHOUT_CLASSIFICATION	3.7440353541125575E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999611391664489	WITHOUT_CLASSIFICATION	3.886083355115674E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999951848301007	WITHOUT_CLASSIFICATION	4.815169899252135E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998959382490458	WITHOUT_CLASSIFICATION	1.0406175095418087E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999442135210619	WITHOUT_CLASSIFICATION	5.578647893806973E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9998394638857152	WITHOUT_CLASSIFICATION	1.60536114284771E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999408524083339	WITHOUT_CLASSIFICATION	5.914759166613132E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999986466503478	WITHOUT_CLASSIFICATION	1.3533496522296331E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9998192664443416	WITHOUT_CLASSIFICATION	1.8073355565839213E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.998898184005175	WITHOUT_CLASSIFICATION	0.0011018159948249975	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9992475781461747	WITHOUT_CLASSIFICATION	7.524218538253425E-4	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999987855147348	WITHOUT_CLASSIFICATION	1.214485265193534E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9997614956864238	WITHOUT_CLASSIFICATION	2.3850431357617347E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9995552349251154	WITHOUT_CLASSIFICATION	4.4476507488452053E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9992393860892266	WITHOUT_CLASSIFICATION	7.606139107734499E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.999793152314875	WITHOUT_CLASSIFICATION	2.068476851248977E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.937923412963306	WITHOUT_CLASSIFICATION	0.062076587036694185	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999300948091628	WITHOUT_CLASSIFICATION	6.990519083715355E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9992475781461747	WITHOUT_CLASSIFICATION	7.524218538253425E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9996683888172456	WITHOUT_CLASSIFICATION	3.316111827544065E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999300948091628	WITHOUT_CLASSIFICATION	6.990519083715355E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.999147475443471	WITHOUT_CLASSIFICATION	8.525245565289921E-4	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999791160789387	WITHOUT_CLASSIFICATION	2.0883921061305442E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999512410628211	WITHOUT_CLASSIFICATION	4.8758937178844006E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9997455949159015	WITHOUT_CLASSIFICATION	2.544050840984019E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999171617798162	WITHOUT_CLASSIFICATION	8.283822018386804E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998661473720405	WITHOUT_CLASSIFICATION	1.338526279594184E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998661473720405	WITHOUT_CLASSIFICATION	1.338526279594184E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.999985379504487	WITHOUT_CLASSIFICATION	1.462049551310241E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998110306743825	WITHOUT_CLASSIFICATION	1.889693256176205E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999501011515158	WITHOUT_CLASSIFICATION	4.989884848422258E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999501011515158	WITHOUT_CLASSIFICATION	4.989884848422258E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999738127249664	WITHOUT_CLASSIFICATION	2.6187275033579863E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9997999638592695	WITHOUT_CLASSIFICATION	2.000361407305003E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9998553517365097	WITHOUT_CLASSIFICATION	1.4464826349032888E-4	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9965374520155307	WITHOUT_CLASSIFICATION	0.0034625479844693848	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999574577129838	WITHOUT_CLASSIFICATION	4.254228701613938E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9997221536817228	WITHOUT_CLASSIFICATION	2.7784631827720775E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998447535927287	WITHOUT_CLASSIFICATION	1.5524640727134824E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999647209922048	WITHOUT_CLASSIFICATION	3.527900779522353E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999800389809076	WITHOUT_CLASSIFICATION	1.996101909243347E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999400660686388	WITHOUT_CLASSIFICATION	5.993393136122481E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999388034164867	WITHOUT_CLASSIFICATION	6.119658351329653E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999106752028634	WITHOUT_CLASSIFICATION	8.932479713668975E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9998402797744443	WITHOUT_CLASSIFICATION	1.5972022555558484E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9996787473153769	WITHOUT_CLASSIFICATION	3.21252684623202E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999470371737558	WITHOUT_CLASSIFICATION	5.296282624428641E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9997323313522952	WITHOUT_CLASSIFICATION	2.6766864770470973E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9998900533500301	WITHOUT_CLASSIFICATION	1.0994664996996611E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999740462763556	WITHOUT_CLASSIFICATION	2.5953723644382966E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9993211592859562	WITHOUT_CLASSIFICATION	6.788407140437884E-4	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9997833881491026	WITHOUT_CLASSIFICATION	2.1661185089740184E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998672629708236	WITHOUT_CLASSIFICATION	1.3273702917629892E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998672629708236	WITHOUT_CLASSIFICATION	1.3273702917629892E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999931390381915	WITHOUT_CLASSIFICATION	6.860961808545006E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999398208664992	WITHOUT_CLASSIFICATION	6.01791335007992E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997646827926362	WITHOUT_CLASSIFICATION	2.353172073638579E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998127685217498	WITHOUT_CLASSIFICATION	1.8723147825003639E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9998791701236484	WITHOUT_CLASSIFICATION	1.2082987635172252E-4	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9998931591672683	WITHOUT_CLASSIFICATION	1.0684083273169817E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9997306635095325	WITHOUT_CLASSIFICATION	2.6933649046736405E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9998463487381032	WITHOUT_CLASSIFICATION	1.53651261896902E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.999999957238585	WITHOUT_CLASSIFICATION	4.276141490911882E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999988524695053	WITHOUT_CLASSIFICATION	1.147530494716707E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999960256056203	WITHOUT_CLASSIFICATION	3.974394379751247E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9997505639649068	WITHOUT_CLASSIFICATION	2.4943603509321486E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999788849178016	WITHOUT_CLASSIFICATION	2.1115082198299982E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999750610901419	WITHOUT_CLASSIFICATION	2.493890985817208E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999977347437327	WITHOUT_CLASSIFICATION	2.2652562673322516E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.99963263123148	WITHOUT_CLASSIFICATION	3.673687685199322E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9991442530503575	WITHOUT_CLASSIFICATION	8.557469496425371E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9982821111945693	WITHOUT_CLASSIFICATION	0.001717888805430624	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999866221192036	WITHOUT_CLASSIFICATION	1.337788079636151E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9996256969385517	WITHOUT_CLASSIFICATION	3.743030614481769E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9998996729155772	WITHOUT_CLASSIFICATION	1.003270844227523E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999738882534446	WITHOUT_CLASSIFICATION	2.611174655535254E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999910369867322	WITHOUT_CLASSIFICATION	8.963013267838278E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9991498857049639	WITHOUT_CLASSIFICATION	8.501142950362597E-4	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9920243394202531	WITHOUT_CLASSIFICATION	0.007975660579746871	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999852623763343	WITHOUT_CLASSIFICATION	1.4737623665639434E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999776863363606	WITHOUT_CLASSIFICATION	2.2313663639339406E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999763619926023	WITHOUT_CLASSIFICATION	2.3638007397709716E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9997101555231743	WITHOUT_CLASSIFICATION	2.898444768257181E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.999785392511005	WITHOUT_CLASSIFICATION	2.146074889949267E-4	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999578992287614	WITHOUT_CLASSIFICATION	4.210077123864327E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999821883612118	WITHOUT_CLASSIFICATION	1.781163878814877E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999069127042469	WITHOUT_CLASSIFICATION	9.308729575310259E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9995729289401758	WITHOUT_CLASSIFICATION	4.270710598241836E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999111967017765	WITHOUT_CLASSIFICATION	8.880329822347692E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998545727046768	WITHOUT_CLASSIFICATION	1.4542729532315165E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999214634021376	WITHOUT_CLASSIFICATION	7.853659786243429E-5	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9978101977849199	WITHOUT_CLASSIFICATION	0.0021898022150800282	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9859437266049902	WITHOUT_CLASSIFICATION	0.014056273395009911	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999951914306828	WITHOUT_CLASSIFICATION	4.808569317230423E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9982292438563272	WITHOUT_CLASSIFICATION	0.0017707561436727877	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9982292438563272	WITHOUT_CLASSIFICATION	0.0017707561436727877	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999685111987158	WITHOUT_CLASSIFICATION	3.14888012842954E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9998817989269982	WITHOUT_CLASSIFICATION	1.1820107300175341E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.999942849983799	WITHOUT_CLASSIFICATION	5.7150016201100527E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998292616381546	WITHOUT_CLASSIFICATION	1.707383618454462E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999897991347003	WITHOUT_CLASSIFICATION	1.0200865299712983E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999213181536423	WITHOUT_CLASSIFICATION	7.868184635772109E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999393426643023	WITHOUT_CLASSIFICATION	6.0657335697766364E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9978616783321514	WITHOUT_CLASSIFICATION	0.002138321667848542	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9997138970250828	WITHOUT_CLASSIFICATION	2.861029749170959E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999595204117194	WITHOUT_CLASSIFICATION	4.047958828054774E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999442396440196	WITHOUT_CLASSIFICATION	5.5760355980386E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999903205361569	WITHOUT_CLASSIFICATION	9.679463843092887E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999891064456071	WITHOUT_CLASSIFICATION	1.0893554392819835E-5	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999655708743984	WITHOUT_CLASSIFICATION	3.442912560161371E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999965043232634	WITHOUT_CLASSIFICATION	3.4956767364814033E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999852280129484	WITHOUT_CLASSIFICATION	1.477198705167287E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.999975553449165	WITHOUT_CLASSIFICATION	2.4446550834950436E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998854014996094	WITHOUT_CLASSIFICATION	1.1459850039067969E-4	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999751946058028	WITHOUT_CLASSIFICATION	2.480539419727624E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998837194975281	WITHOUT_CLASSIFICATION	1.1628050247184162E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999767530589759	WITHOUT_CLASSIFICATION	2.3246941024119583E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999828833168717	WITHOUT_CLASSIFICATION	1.711668312826358E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999714278381322	WITHOUT_CLASSIFICATION	2.857216186784661E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999976901086657	WITHOUT_CLASSIFICATION	2.3098913343409725E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999820787564149	WITHOUT_CLASSIFICATION	1.7921243585147807E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999818156942787	WITHOUT_CLASSIFICATION	1.8184305721369577E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999816404857119	WITHOUT_CLASSIFICATION	1.8359514288091044E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999192754098851	WITHOUT_CLASSIFICATION	8.07245901149007E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999725546777675	WITHOUT_CLASSIFICATION	2.7445322232592916E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999388627246595	WITHOUT_CLASSIFICATION	6.113727534045014E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999882425188038	WITHOUT_CLASSIFICATION	1.175748119616719E-5	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999674986528934	WITHOUT_CLASSIFICATION	3.250134710666345E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999756923805712	WITHOUT_CLASSIFICATION	2.430761942876999E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998545727046768	WITHOUT_CLASSIFICATION	1.4542729532315165E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9998400188046779	WITHOUT_CLASSIFICATION	1.599811953221792E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999722553206617	WITHOUT_CLASSIFICATION	2.774467933819879E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999722553206617	WITHOUT_CLASSIFICATION	2.774467933819879E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999192446504471	WITHOUT_CLASSIFICATION	8.075534955294405E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9998666032010648	WITHOUT_CLASSIFICATION	1.3339679893520988E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999731315243611	WITHOUT_CLASSIFICATION	2.6868475638983377E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999826958158752	WITHOUT_CLASSIFICATION	1.7304184124805526E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999886824596429	WITHOUT_CLASSIFICATION	1.1317540357195174E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999951864367478	WITHOUT_CLASSIFICATION	4.8135632522333864E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999623271595028	WITHOUT_CLASSIFICATION	3.767284049712597E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999749987979311	WITHOUT_CLASSIFICATION	2.5001202068957314E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999893664338608	WITHOUT_CLASSIFICATION	1.0633566139084253E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999167808326012	WITHOUT_CLASSIFICATION	8.321916739885796E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999617741789448	WITHOUT_CLASSIFICATION	3.8225821055123014E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999662577353077	WITHOUT_CLASSIFICATION	3.374226469235296E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999970613790252	WITHOUT_CLASSIFICATION	2.938620974746097E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9997719046270636	WITHOUT_CLASSIFICATION	2.2809537293642433E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9998097843164475	WITHOUT_CLASSIFICATION	1.9021568355247646E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9998069926688828	WITHOUT_CLASSIFICATION	1.9300733111709786E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9998737587952543	WITHOUT_CLASSIFICATION	1.2624120474574144E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999463036895608	WITHOUT_CLASSIFICATION	5.369631043915154E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.999579891728933	WITHOUT_CLASSIFICATION	4.201082710670691E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999254631060165	WITHOUT_CLASSIFICATION	7.453689398351741E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999439786607283	WITHOUT_CLASSIFICATION	5.602133927177977E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9998827780272393	WITHOUT_CLASSIFICATION	1.1722197276057273E-4	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999854371895304	WITHOUT_CLASSIFICATION	1.4562810469745295E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9998915378526366	WITHOUT_CLASSIFICATION	1.0846214736346866E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999017717204792	WITHOUT_CLASSIFICATION	9.822827952076197E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999845657945632	WITHOUT_CLASSIFICATION	1.5434205436773236E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999190332182859	WITHOUT_CLASSIFICATION	8.096678171407154E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999730863247284	WITHOUT_CLASSIFICATION	2.6913675271645988E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999665842471697	WITHOUT_CLASSIFICATION	3.341575283041269E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999873843911663	WITHOUT_CLASSIFICATION	1.2615608833621588E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999873843911663	WITHOUT_CLASSIFICATION	1.2615608833621588E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999356921172001	WITHOUT_CLASSIFICATION	6.430788279983157E-5	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.999926669626508	WITHOUT_CLASSIFICATION	7.333037349196835E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999689272780815	WITHOUT_CLASSIFICATION	3.107272191839954E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999318109672359	WITHOUT_CLASSIFICATION	6.818903276408145E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9998915378526366	WITHOUT_CLASSIFICATION	1.0846214736346866E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999017717204792	WITHOUT_CLASSIFICATION	9.822827952076197E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999845657945632	WITHOUT_CLASSIFICATION	1.5434205436773236E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999730863247284	WITHOUT_CLASSIFICATION	2.6913675271645988E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999920073511964	WITHOUT_CLASSIFICATION	7.992648803600548E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9997532060711363	WITHOUT_CLASSIFICATION	2.467939288637416E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999698297982863	WITHOUT_CLASSIFICATION	3.017020171373976E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999828133622686	WITHOUT_CLASSIFICATION	1.718663773138966E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999789353655139	WITHOUT_CLASSIFICATION	2.106463448608381E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999590347840174	WITHOUT_CLASSIFICATION	4.096521598254334E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999550827422885	WITHOUT_CLASSIFICATION	4.4917257711393015E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998360566825616	WITHOUT_CLASSIFICATION	1.639433174384044E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999642026832207	WITHOUT_CLASSIFICATION	3.5797316779216956E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999883319158369	WITHOUT_CLASSIFICATION	1.1668084162951459E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999440762450073	WITHOUT_CLASSIFICATION	5.592375499270302E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999978344675702	WITHOUT_CLASSIFICATION	2.1655324298918123E-6	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9998099814029173	WITHOUT_CLASSIFICATION	1.9001859708267247E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999872452454747	WITHOUT_CLASSIFICATION	1.2754754525302667E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999768416034511	WITHOUT_CLASSIFICATION	2.3158396548874867E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999957365048777	WITHOUT_CLASSIFICATION	4.263495122249873E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999813065533567	WITHOUT_CLASSIFICATION	1.8693446643277493E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9998150227819202	WITHOUT_CLASSIFICATION	1.8497721807971337E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9997661837256927	WITHOUT_CLASSIFICATION	2.3381627430742985E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999318109672359	WITHOUT_CLASSIFICATION	6.818903276408145E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9997532060711363	WITHOUT_CLASSIFICATION	2.467939288637416E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999698297982863	WITHOUT_CLASSIFICATION	3.017020171373976E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999789353655139	WITHOUT_CLASSIFICATION	2.106463448608381E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999590347840174	WITHOUT_CLASSIFICATION	4.096521598254334E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999550827422885	WITHOUT_CLASSIFICATION	4.4917257711393015E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998360566825616	WITHOUT_CLASSIFICATION	1.639433174384044E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999958796055431	WITHOUT_CLASSIFICATION	4.12039445688686E-5	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9908006972483276	WITHOUT_CLASSIFICATION	0.009199302751672436	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999565023094916	WITHOUT_CLASSIFICATION	4.349769050838658E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.999975493646617	WITHOUT_CLASSIFICATION	2.4506353383004688E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9996732406794449	WITHOUT_CLASSIFICATION	3.26759320555048E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9996732406794449	WITHOUT_CLASSIFICATION	3.26759320555048E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999383538631054	WITHOUT_CLASSIFICATION	6.164613689459055E-5	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9998871417080888	WITHOUT_CLASSIFICATION	1.1285829191120179E-4	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999702282501847	WITHOUT_CLASSIFICATION	2.977174981538831E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.999973144227908	WITHOUT_CLASSIFICATION	2.6855772091995908E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999965464293789	WITHOUT_CLASSIFICATION	3.4535706211915543E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9998324171867496	WITHOUT_CLASSIFICATION	1.675828132504098E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999923499605758	WITHOUT_CLASSIFICATION	7.650039424170264E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999595465056077	WITHOUT_CLASSIFICATION	4.045349439230609E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999024202268153	WITHOUT_CLASSIFICATION	9.757977318464766E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9996386033420284	WITHOUT_CLASSIFICATION	3.6139665797159295E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9994307361211826	WITHOUT_CLASSIFICATION	5.692638788174169E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999500689429363	WITHOUT_CLASSIFICATION	4.993105706362186E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997030625234475	WITHOUT_CLASSIFICATION	2.969374765525147E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998069528003878	WITHOUT_CLASSIFICATION	1.9304719961214507E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999793793120078	WITHOUT_CLASSIFICATION	2.062068799217688E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9998868364005934	WITHOUT_CLASSIFICATION	1.1316359940655606E-4	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.999949118745591	WITHOUT_CLASSIFICATION	5.0881254409079154E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999521594527959	WITHOUT_CLASSIFICATION	4.784054720409175E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9996703347972957	WITHOUT_CLASSIFICATION	3.296652027042716E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999996149094845	WITHOUT_CLASSIFICATION	3.850905155466791E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9970990386474023	WITHOUT_CLASSIFICATION	0.002900961352597525	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999676513852334	WITHOUT_CLASSIFICATION	3.23486147665709E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999536433627043	WITHOUT_CLASSIFICATION	4.635663729575861E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999937833193333	WITHOUT_CLASSIFICATION	6.216680666614687E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999583334649083	WITHOUT_CLASSIFICATION	4.166653509183509E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9995821174478244	WITHOUT_CLASSIFICATION	4.178825521755653E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999937833193333	WITHOUT_CLASSIFICATION	6.216680666614687E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998069528003878	WITHOUT_CLASSIFICATION	1.9304719961214507E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.999922995886848	WITHOUT_CLASSIFICATION	7.700411315198259E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998292097225158	WITHOUT_CLASSIFICATION	1.7079027748422945E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999716369111961	WITHOUT_CLASSIFICATION	2.836308880394419E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9983981029956779	WITHOUT_CLASSIFICATION	0.0016018970043220435	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999955038403108	WITHOUT_CLASSIFICATION	4.496159689237545E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999659168056204	WITHOUT_CLASSIFICATION	3.4083194379525875E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9998495167427177	WITHOUT_CLASSIFICATION	1.504832572823311E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999911253641915	WITHOUT_CLASSIFICATION	8.874635808421845E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9181608972757386	WITHOUT_CLASSIFICATION	0.08183910272426154	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9985911746558848	WITHOUT_CLASSIFICATION	0.001408825344115261	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9989707504014239	WITHOUT_CLASSIFICATION	0.0010292495985761057	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999648011071639	WITHOUT_CLASSIFICATION	3.519889283606578E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9996201453475557	WITHOUT_CLASSIFICATION	3.79854652444282E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999034896676199	WITHOUT_CLASSIFICATION	9.651033238017046E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9998655261775584	WITHOUT_CLASSIFICATION	1.3447382244160573E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9994520382473909	WITHOUT_CLASSIFICATION	5.479617526091756E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998380845162506	WITHOUT_CLASSIFICATION	1.6191548374934706E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9986292293936604	WITHOUT_CLASSIFICATION	0.0013707706063395733	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999998496982705	WITHOUT_CLASSIFICATION	1.5030172938767484E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998565563435915	WITHOUT_CLASSIFICATION	1.4344365640847054E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999974437777222	WITHOUT_CLASSIFICATION	2.5562222777137206E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9997329819192743	WITHOUT_CLASSIFICATION	2.6701808072575214E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9997778818451267	WITHOUT_CLASSIFICATION	2.2211815487332712E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999785693227696	WITHOUT_CLASSIFICATION	2.143067723029907E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999979783206455	WITHOUT_CLASSIFICATION	2.021679354548738E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9997039535577497	WITHOUT_CLASSIFICATION	2.9604644225032393E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9974633931964313	WITHOUT_CLASSIFICATION	0.0025366068035686568	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999291604112033	WITHOUT_CLASSIFICATION	7.083958879669019E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999447682261118	WITHOUT_CLASSIFICATION	5.523177388830837E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9998996789868347	WITHOUT_CLASSIFICATION	1.0032101316535556E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997030625234475	WITHOUT_CLASSIFICATION	2.969374765525147E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999062250459615	WITHOUT_CLASSIFICATION	9.37749540385552E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9990865824363404	WITHOUT_CLASSIFICATION	9.134175636596038E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999630546359219	WITHOUT_CLASSIFICATION	3.6945364078122345E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998533248266089	WITHOUT_CLASSIFICATION	1.4667517339104772E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998533248266089	WITHOUT_CLASSIFICATION	1.4667517339104772E-4	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.999899855730635	WITHOUT_CLASSIFICATION	1.0014426936496119E-4	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999912562731823	WITHOUT_CLASSIFICATION	8.743726817770985E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999681830420815	WITHOUT_CLASSIFICATION	3.181695791858739E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999646480269465	WITHOUT_CLASSIFICATION	3.535197305351493E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9990072621643019	WITHOUT_CLASSIFICATION	9.92737835698038E-4	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9998679921118355	WITHOUT_CLASSIFICATION	1.3200788816440935E-4	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9998048191503622	WITHOUT_CLASSIFICATION	1.9518084963782983E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999760465163302	WITHOUT_CLASSIFICATION	2.3953483669715528E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999218471713192	WITHOUT_CLASSIFICATION	7.815282868081324E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999450935683597	WITHOUT_CLASSIFICATION	5.4906431640229194E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997802600948437	WITHOUT_CLASSIFICATION	2.197399051563689E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999941803960383	WITHOUT_CLASSIFICATION	5.8196039617073785E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.99985116523299	WITHOUT_CLASSIFICATION	1.4883476700997973E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999312862882155	WITHOUT_CLASSIFICATION	6.871371178451547E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999837115008188	WITHOUT_CLASSIFICATION	1.6288499181292466E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999837115008188	WITHOUT_CLASSIFICATION	1.6288499181292466E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9997115574307532	WITHOUT_CLASSIFICATION	2.8844256924678483E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9997115574307532	WITHOUT_CLASSIFICATION	2.8844256924678483E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999910950277612	WITHOUT_CLASSIFICATION	8.904972238787258E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.99701866515777	WITHOUT_CLASSIFICATION	0.0029813348422299654	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998655796454178	WITHOUT_CLASSIFICATION	1.3442035458230753E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999958670425199	WITHOUT_CLASSIFICATION	4.132957480076631E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9995931990365571	WITHOUT_CLASSIFICATION	4.068009634429942E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999252758749575	WITHOUT_CLASSIFICATION	7.472412504252658E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.999989427684876	WITHOUT_CLASSIFICATION	1.0572315124053018E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.999941803960383	WITHOUT_CLASSIFICATION	5.8196039617073785E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.99985116523299	WITHOUT_CLASSIFICATION	1.4883476700997973E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9994246822799958	WITHOUT_CLASSIFICATION	5.75317720004109E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999263866692216	WITHOUT_CLASSIFICATION	7.361333077837199E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9953682959002851	WITHOUT_CLASSIFICATION	0.0046317040997149	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9988449641828319	WITHOUT_CLASSIFICATION	0.001155035817168173	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.999983908845626	WITHOUT_CLASSIFICATION	1.6091154373949173E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9971363343290824	WITHOUT_CLASSIFICATION	0.0028636656709174727	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999027230675257	WITHOUT_CLASSIFICATION	9.727693247429934E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999027230675257	WITHOUT_CLASSIFICATION	9.727693247429934E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999720669379658	WITHOUT_CLASSIFICATION	2.7933062034234335E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999909189551411	WITHOUT_CLASSIFICATION	9.08104485887282E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9998965908514036	WITHOUT_CLASSIFICATION	1.0340914859652686E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9995224416393549	WITHOUT_CLASSIFICATION	4.775583606451222E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998493020912621	WITHOUT_CLASSIFICATION	1.506979087378956E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9972293161048339	WITHOUT_CLASSIFICATION	0.0027706838951660935	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999779775095656	WITHOUT_CLASSIFICATION	2.202249043433639E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999676875056264	WITHOUT_CLASSIFICATION	3.231249437370817E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9996819294909489	WITHOUT_CLASSIFICATION	3.180705090511246E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999974909233392	WITHOUT_CLASSIFICATION	2.509076660817045E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999965478463402	WITHOUT_CLASSIFICATION	3.452153659791413E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9998052647052598	WITHOUT_CLASSIFICATION	1.9473529474028684E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999866175643054	WITHOUT_CLASSIFICATION	1.3382435694521151E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9998302480977351	WITHOUT_CLASSIFICATION	1.6975190226478653E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.999958755003383	WITHOUT_CLASSIFICATION	4.124499661700923E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999673557679314	WITHOUT_CLASSIFICATION	3.264423206866817E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.999953704027392	WITHOUT_CLASSIFICATION	4.629597260794907E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9996730662316116	WITHOUT_CLASSIFICATION	3.2693376838844094E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9987506900220489	WITHOUT_CLASSIFICATION	0.0012493099779510737	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999654290467012	WITHOUT_CLASSIFICATION	3.457095329886233E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9855773637213285	WITHOUT_CLASSIFICATION	0.014422636278671472	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998869366626344	WITHOUT_CLASSIFICATION	1.1306333736554796E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9994869767770256	WITHOUT_CLASSIFICATION	5.130232229744545E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.999873462035306	WITHOUT_CLASSIFICATION	1.2653796469405944E-4	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999385071339381	WITHOUT_CLASSIFICATION	6.149286606196906E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9997366375275752	WITHOUT_CLASSIFICATION	2.6336247242471643E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9995221867650473	WITHOUT_CLASSIFICATION	4.7781323495261596E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998821346544037	WITHOUT_CLASSIFICATION	1.1786534559640957E-4	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9997125957109253	WITHOUT_CLASSIFICATION	2.874042890747592E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999691345308565	WITHOUT_CLASSIFICATION	3.086546914358459E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999482941725882	WITHOUT_CLASSIFICATION	5.1705827411780544E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998260206421146	WITHOUT_CLASSIFICATION	1.7397935788543754E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9990865824363404	WITHOUT_CLASSIFICATION	9.134175636596038E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998821346544037	WITHOUT_CLASSIFICATION	1.1786534559640957E-4	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999753953968933	WITHOUT_CLASSIFICATION	2.4604603106773866E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9994836620363909	WITHOUT_CLASSIFICATION	5.163379636089487E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9991680994044146	WITHOUT_CLASSIFICATION	8.319005955853755E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9987277075471438	WITHOUT_CLASSIFICATION	0.0012722924528562095	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9987277075471438	WITHOUT_CLASSIFICATION	0.0012722924528562095	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999951188776879	WITHOUT_CLASSIFICATION	4.881122312120046E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.999993308920211	WITHOUT_CLASSIFICATION	6.691079789002396E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999637471499181	WITHOUT_CLASSIFICATION	3.625285008186994E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999978328060911	WITHOUT_CLASSIFICATION	2.167193908884188E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9998628568099107	WITHOUT_CLASSIFICATION	1.3714319008917327E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9998214954911672	WITHOUT_CLASSIFICATION	1.785045088328207E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999950884924437	WITHOUT_CLASSIFICATION	4.9115075563807805E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9982286454872293	WITHOUT_CLASSIFICATION	0.001771354512770746	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999203284909937	WITHOUT_CLASSIFICATION	7.967150900642013E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999203284909937	WITHOUT_CLASSIFICATION	7.967150900642013E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.999968165183959	WITHOUT_CLASSIFICATION	3.183481604107401E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9998723653617912	WITHOUT_CLASSIFICATION	1.2763463820870098E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999883987269053	WITHOUT_CLASSIFICATION	1.1601273094622807E-5	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999469677128272	WITHOUT_CLASSIFICATION	5.30322871728776E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.999816250792421	WITHOUT_CLASSIFICATION	1.8374920757911975E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999770343167804	WITHOUT_CLASSIFICATION	2.2965683219589225E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999987994571323	WITHOUT_CLASSIFICATION	1.2005428676104547E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.999989361683897	WITHOUT_CLASSIFICATION	1.0638316103086857E-5	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999789879441503	WITHOUT_CLASSIFICATION	2.10120558497135E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9860218636079311	WITHOUT_CLASSIFICATION	0.013978136392068853	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999752263399349	WITHOUT_CLASSIFICATION	2.477366006521094E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999738900857137	WITHOUT_CLASSIFICATION	2.6109914286237794E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999525433505478	WITHOUT_CLASSIFICATION	4.745664945219216E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998897116800587	WITHOUT_CLASSIFICATION	1.1028831994140696E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998897116800587	WITHOUT_CLASSIFICATION	1.1028831994140696E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998217738174141	WITHOUT_CLASSIFICATION	1.782261825858538E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998360566825616	WITHOUT_CLASSIFICATION	1.639433174384044E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9860218636079311	WITHOUT_CLASSIFICATION	0.013978136392068853	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999740923012472	WITHOUT_CLASSIFICATION	2.5907698752733393E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9996003632618076	WITHOUT_CLASSIFICATION	3.99636738192395E-4	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999737625691457	WITHOUT_CLASSIFICATION	2.6237430854321855E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999165049081375	WITHOUT_CLASSIFICATION	8.349509186249237E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9996205192727018	WITHOUT_CLASSIFICATION	3.794807272982083E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999175816725404	WITHOUT_CLASSIFICATION	8.241832745957783E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999615565143221	WITHOUT_CLASSIFICATION	3.8443485677925426E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9990865824363404	WITHOUT_CLASSIFICATION	9.134175636596038E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999535804395762	WITHOUT_CLASSIFICATION	4.641956042382248E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999193966370602	WITHOUT_CLASSIFICATION	8.060336293974378E-5	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9998071548713543	WITHOUT_CLASSIFICATION	1.928451286457426E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999768705964525	WITHOUT_CLASSIFICATION	2.312940354746116E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999778501497391	WITHOUT_CLASSIFICATION	2.214985026095819E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.999990029994776	WITHOUT_CLASSIFICATION	9.970005223912954E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9997478243105565	WITHOUT_CLASSIFICATION	2.521756894435149E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9998657406778304	WITHOUT_CLASSIFICATION	1.3425932216969496E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9991042343776695	WITHOUT_CLASSIFICATION	8.957656223305533E-4	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9993942319715668	WITHOUT_CLASSIFICATION	6.057680284332338E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999237560150348	WITHOUT_CLASSIFICATION	7.62439849651595E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998680582150233	WITHOUT_CLASSIFICATION	1.319417849765572E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9996729325284414	WITHOUT_CLASSIFICATION	3.270674715586104E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.7675981009887362	WITHOUT_CLASSIFICATION	0.2324018990112638	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9969986916420135	WITHOUT_CLASSIFICATION	0.003001308357986583	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999607469244053	WITHOUT_CLASSIFICATION	3.925307559481518E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999740573287549	WITHOUT_CLASSIFICATION	2.594267124512268E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999845312900779	WITHOUT_CLASSIFICATION	1.546870992205607E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9991510716271526	WITHOUT_CLASSIFICATION	8.489283728475063E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.999929633052892	WITHOUT_CLASSIFICATION	7.036694710804901E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999897159546138	WITHOUT_CLASSIFICATION	1.0284045386130911E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999760788969568	WITHOUT_CLASSIFICATION	2.3921103043206465E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999951188776879	WITHOUT_CLASSIFICATION	4.881122312120046E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9998316514685951	WITHOUT_CLASSIFICATION	1.6834853140498026E-4	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9997655956210576	WITHOUT_CLASSIFICATION	2.3440437894240885E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999808905524104	WITHOUT_CLASSIFICATION	1.9109447589710412E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9965141017611017	WITHOUT_CLASSIFICATION	0.0034858982388983107	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9984021913164911	WITHOUT_CLASSIFICATION	0.0015978086835087898	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9978983032056516	WITHOUT_CLASSIFICATION	0.0021016967943483598	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999938401174646	WITHOUT_CLASSIFICATION	6.159882535346827E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9992484449881476	WITHOUT_CLASSIFICATION	7.515550118523911E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999977772583643	WITHOUT_CLASSIFICATION	2.2227416357203417E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.999919922036971	WITHOUT_CLASSIFICATION	8.007796302891594E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995499337805511	WITHOUT_CLASSIFICATION	4.5006621944883285E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999240806406239	WITHOUT_CLASSIFICATION	7.591935937621743E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999776719726935	WITHOUT_CLASSIFICATION	2.2328027306516976E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997565035831496	WITHOUT_CLASSIFICATION	2.4349641685044506E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999981990489609	WITHOUT_CLASSIFICATION	1.8009510390255992E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9985681416553341	WITHOUT_CLASSIFICATION	0.0014318583446659059	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.999808195653503	WITHOUT_CLASSIFICATION	1.918043464969219E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9829713667222758	WITHOUT_CLASSIFICATION	0.01702863327772419	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9998402817876397	WITHOUT_CLASSIFICATION	1.5971821236030335E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9993109241994862	WITHOUT_CLASSIFICATION	6.89075800513824E-4	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.999670040670813	WITHOUT_CLASSIFICATION	3.299593291870067E-4	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9994317061702891	WITHOUT_CLASSIFICATION	5.682938297109686E-4	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999973505578627	WITHOUT_CLASSIFICATION	2.649442137420624E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999914023888807	WITHOUT_CLASSIFICATION	8.59761111928598E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998296466692187	WITHOUT_CLASSIFICATION	1.7035333078132417E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998296466692187	WITHOUT_CLASSIFICATION	1.7035333078132417E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998296466692187	WITHOUT_CLASSIFICATION	1.7035333078132417E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999212082222391	WITHOUT_CLASSIFICATION	7.879177776093897E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9998649546289069	WITHOUT_CLASSIFICATION	1.350453710930444E-4	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999441078698019	WITHOUT_CLASSIFICATION	5.5892130198030884E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998399417307714	WITHOUT_CLASSIFICATION	1.600582692285948E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998399417307714	WITHOUT_CLASSIFICATION	1.600582692285948E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9995004525406954	WITHOUT_CLASSIFICATION	4.995474593045532E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9997996987438844	WITHOUT_CLASSIFICATION	2.0030125611555103E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.999970164403183	WITHOUT_CLASSIFICATION	2.983559681694248E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999741453429563	WITHOUT_CLASSIFICATION	2.5854657043789046E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999294249327392	WITHOUT_CLASSIFICATION	7.05750672608825E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9998345811967878	WITHOUT_CLASSIFICATION	1.654188032122647E-4	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999028189933103	WITHOUT_CLASSIFICATION	9.718100668962785E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.999854147023049	WITHOUT_CLASSIFICATION	1.4585297695111034E-4	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999927209623695	WITHOUT_CLASSIFICATION	7.2790376305432865E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999559497057108	WITHOUT_CLASSIFICATION	4.40502942892566E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999559497057108	WITHOUT_CLASSIFICATION	4.40502942892566E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999722887207617	WITHOUT_CLASSIFICATION	2.7711279238286112E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9995953351020543	WITHOUT_CLASSIFICATION	4.0466489794556036E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999626447015503	WITHOUT_CLASSIFICATION	3.735529844980347E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9998957315576815	WITHOUT_CLASSIFICATION	1.0426844231853791E-4	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9998233602759682	WITHOUT_CLASSIFICATION	1.7663972403188555E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999957615901424	WITHOUT_CLASSIFICATION	4.238409857569711E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999045419668162	WITHOUT_CLASSIFICATION	9.545803318372E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999079894336794	WITHOUT_CLASSIFICATION	9.201056632052945E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9998183527010962	WITHOUT_CLASSIFICATION	1.8164729890391567E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998468916807316	WITHOUT_CLASSIFICATION	1.5310831926842948E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9989156472722982	WITHOUT_CLASSIFICATION	0.0010843527277018812	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999372311717201	WITHOUT_CLASSIFICATION	6.276882827997224E-5	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999845236055066	WITHOUT_CLASSIFICATION	1.5476394493358355E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9996234882341569	WITHOUT_CLASSIFICATION	3.765117658431527E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999421084168042	WITHOUT_CLASSIFICATION	5.789158319576026E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999300469231605	WITHOUT_CLASSIFICATION	6.995307683952048E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9993599014858734	WITHOUT_CLASSIFICATION	6.400985141266465E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999654054293537	WITHOUT_CLASSIFICATION	3.4594570646315684E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998388219779148	WITHOUT_CLASSIFICATION	1.6117802208520226E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9997920273674631	WITHOUT_CLASSIFICATION	2.0797263253701317E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999404406774367	WITHOUT_CLASSIFICATION	5.955932256337027E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9998801724332246	WITHOUT_CLASSIFICATION	1.1982756677546894E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999537262479347	WITHOUT_CLASSIFICATION	4.6273752065262716E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.999395044957033	WITHOUT_CLASSIFICATION	6.049550429670007E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9997272623246231	WITHOUT_CLASSIFICATION	2.727376753770059E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999589935360388	WITHOUT_CLASSIFICATION	4.100646396131466E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999498294765521	WITHOUT_CLASSIFICATION	5.0170523447863887E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999531233579064	WITHOUT_CLASSIFICATION	4.687664209348101E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9998820321441575	WITHOUT_CLASSIFICATION	1.1796785584248406E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.999993125411302	WITHOUT_CLASSIFICATION	6.874588697989825E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999372692186466	WITHOUT_CLASSIFICATION	6.273078135345166E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999498440860304	WITHOUT_CLASSIFICATION	5.0155913969701656E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9998873471343647	WITHOUT_CLASSIFICATION	1.1265286563535993E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9988436512598349	WITHOUT_CLASSIFICATION	0.0011563487401650818	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999487702333817	WITHOUT_CLASSIFICATION	5.12297666181826E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999116441461778	WITHOUT_CLASSIFICATION	8.835585382219233E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999392992645282	WITHOUT_CLASSIFICATION	6.070073547190034E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999075679698877	WITHOUT_CLASSIFICATION	9.243203011236224E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999763501505922	WITHOUT_CLASSIFICATION	2.364984940773744E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999600757533991	WITHOUT_CLASSIFICATION	3.992424660103822E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9998750629728294	WITHOUT_CLASSIFICATION	1.2493702717068737E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999722844510455	WITHOUT_CLASSIFICATION	2.7715548954499982E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999713672698227	WITHOUT_CLASSIFICATION	2.863273017735483E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9997256741464527	WITHOUT_CLASSIFICATION	2.7432585354728966E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999945658058751	WITHOUT_CLASSIFICATION	5.434194124901811E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999376770165656	WITHOUT_CLASSIFICATION	6.232298343446955E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999913924216292	WITHOUT_CLASSIFICATION	8.607578370890762E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999702280357116	WITHOUT_CLASSIFICATION	2.9771964288493405E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999509883047554	WITHOUT_CLASSIFICATION	4.901169524465006E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999682045639957	WITHOUT_CLASSIFICATION	3.1795436004251044E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999554382034515	WITHOUT_CLASSIFICATION	4.456179654851086E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9993624282000666	WITHOUT_CLASSIFICATION	6.375717999333514E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999589177626634	WITHOUT_CLASSIFICATION	4.108223733663225E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999924881147344	WITHOUT_CLASSIFICATION	7.511885265558313E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999924881147344	WITHOUT_CLASSIFICATION	7.511885265558313E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9997085841842669	WITHOUT_CLASSIFICATION	2.9141581573314634E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9997633831157212	WITHOUT_CLASSIFICATION	2.3661688427873166E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9939077849917356	WITHOUT_CLASSIFICATION	0.006092215008264443	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9936522490468592	WITHOUT_CLASSIFICATION	0.0063477509531407565	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999349002822443	WITHOUT_CLASSIFICATION	6.509971775572979E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9997250617915107	WITHOUT_CLASSIFICATION	2.7493820848938186E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9997252583197251	WITHOUT_CLASSIFICATION	2.747416802747749E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999779536019766	WITHOUT_CLASSIFICATION	2.2046398023366987E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999600108326708	WITHOUT_CLASSIFICATION	3.998916732916547E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9993690023496911	WITHOUT_CLASSIFICATION	6.30997650308865E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999757207218394	WITHOUT_CLASSIFICATION	2.4279278160708387E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999694621856017	WITHOUT_CLASSIFICATION	3.053781439828674E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999756910219161	WITHOUT_CLASSIFICATION	2.4308978083922764E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9997741325542079	WITHOUT_CLASSIFICATION	2.258674457920441E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999384289140097	WITHOUT_CLASSIFICATION	6.157108599025722E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.99990912122741	WITHOUT_CLASSIFICATION	9.087877258999814E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9998726218558391	WITHOUT_CLASSIFICATION	1.2737814416092315E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9998916375252326	WITHOUT_CLASSIFICATION	1.083624747674362E-4	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9996800216159982	WITHOUT_CLASSIFICATION	3.199783840017152E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999581938467184	WITHOUT_CLASSIFICATION	4.180615328169003E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9997273481350282	WITHOUT_CLASSIFICATION	2.726518649718308E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9998726218558391	WITHOUT_CLASSIFICATION	1.2737814416092315E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9780765103482115	WITHOUT_CLASSIFICATION	0.021923489651788457	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9780765103482115	WITHOUT_CLASSIFICATION	0.021923489651788457	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999074791116708	WITHOUT_CLASSIFICATION	9.252088832913633E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998386197411702	WITHOUT_CLASSIFICATION	1.613802588298317E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9998547290181222	WITHOUT_CLASSIFICATION	1.452709818778409E-4	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999499393047979	WITHOUT_CLASSIFICATION	5.006069520211826E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.999981016801427	WITHOUT_CLASSIFICATION	1.898319857291678E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7378261328706386	WITHOUT_CLASSIFICATION	0.26217386712936147	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9987146262843214	WITHOUT_CLASSIFICATION	0.001285373715678651	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9844980805161678	WITHOUT_CLASSIFICATION	0.015501919483832083	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999470149588922	WITHOUT_CLASSIFICATION	5.298504110782567E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9997572284305035	WITHOUT_CLASSIFICATION	2.427715694964E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9997000138028241	WITHOUT_CLASSIFICATION	2.999861971758949E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999761927953478	WITHOUT_CLASSIFICATION	2.380720465220406E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998958140593067	WITHOUT_CLASSIFICATION	1.041859406932845E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9998695010362281	WITHOUT_CLASSIFICATION	1.3049896377204456E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9989828911680446	WITHOUT_CLASSIFICATION	0.0010171088319554608	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998928179579247	WITHOUT_CLASSIFICATION	1.0718204207536319E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.998842554650215	WITHOUT_CLASSIFICATION	0.0011574453497850262	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999543410022554	WITHOUT_CLASSIFICATION	4.565899774451559E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999710218679408	WITHOUT_CLASSIFICATION	2.8978132059115053E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999612423886247	WITHOUT_CLASSIFICATION	3.875761137520688E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997528288815691	WITHOUT_CLASSIFICATION	2.471711184309068E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999200548545177	WITHOUT_CLASSIFICATION	7.99451454823155E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999210942627259	WITHOUT_CLASSIFICATION	7.890573727403562E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999201317596192	WITHOUT_CLASSIFICATION	7.986824038074787E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999569953376979	WITHOUT_CLASSIFICATION	4.300466230203096E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9899099814676857	WITHOUT_CLASSIFICATION	0.010090018532314178	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9972906984790773	WITHOUT_CLASSIFICATION	0.0027093015209228195	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9881391131652507	WITHOUT_CLASSIFICATION	0.01186088683474932	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9984782678015677	WITHOUT_CLASSIFICATION	0.0015217321984324153	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9992476431938604	WITHOUT_CLASSIFICATION	7.523568061395279E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9992476431938604	WITHOUT_CLASSIFICATION	7.523568061395279E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9997850433768453	WITHOUT_CLASSIFICATION	2.14956623154692E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9839343198776729	WITHOUT_CLASSIFICATION	0.016065680122327078	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9969783904642208	WITHOUT_CLASSIFICATION	0.0030216095357792094	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9859342708827353	WITHOUT_CLASSIFICATION	0.014065729117264773	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998164844235579	WITHOUT_CLASSIFICATION	1.8351557644207675E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9967483359615875	WITHOUT_CLASSIFICATION	0.0032516640384124976	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9969783904642208	WITHOUT_CLASSIFICATION	0.0030216095357792094	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9922122650805536	WITHOUT_CLASSIFICATION	0.0077877349194464315	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9996674035911525	WITHOUT_CLASSIFICATION	3.325964088475325E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998840369660035	WITHOUT_CLASSIFICATION	1.1596303399654728E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999202656024088	WITHOUT_CLASSIFICATION	7.973439759130528E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999826568164016	WITHOUT_CLASSIFICATION	1.7343183598384322E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999536186754354	WITHOUT_CLASSIFICATION	4.6381324564471594E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999536186754354	WITHOUT_CLASSIFICATION	4.6381324564471594E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9997740060107165	WITHOUT_CLASSIFICATION	2.2599398928352025E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.995356771342254	WITHOUT_CLASSIFICATION	0.004643228657745956	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9990381149508889	WITHOUT_CLASSIFICATION	9.61885049111085E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.998880539978726	WITHOUT_CLASSIFICATION	0.0011194600212741498	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.999232466175301	WITHOUT_CLASSIFICATION	7.675338246989916E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999158979237901	WITHOUT_CLASSIFICATION	8.41020762099366E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9637908598449656	WITHOUT_CLASSIFICATION	0.03620914015503443	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.999653274109877	WITHOUT_CLASSIFICATION	3.467258901229184E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9962842523062414	WITHOUT_CLASSIFICATION	0.003715747693758508	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9997395803117477	WITHOUT_CLASSIFICATION	2.6041968825235817E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.999959282198581	WITHOUT_CLASSIFICATION	4.0717801418995115E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.99972156885023	WITHOUT_CLASSIFICATION	2.7843114976991434E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9996238020457805	WITHOUT_CLASSIFICATION	3.761979542195332E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999758690865843	WITHOUT_CLASSIFICATION	2.4130913415628593E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9992464826393865	WITHOUT_CLASSIFICATION	7.5351736061345E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999024175669213	WITHOUT_CLASSIFICATION	9.758243307868027E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999398860628105	WITHOUT_CLASSIFICATION	6.011393718957237E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9996934652755636	WITHOUT_CLASSIFICATION	3.0653472443648185E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9702174335679805	WITHOUT_CLASSIFICATION	0.029782566432019483	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9995452770234033	WITHOUT_CLASSIFICATION	4.547229765967233E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9702174335679805	WITHOUT_CLASSIFICATION	0.029782566432019483	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999638267596265	WITHOUT_CLASSIFICATION	3.617324037349477E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9995452770234033	WITHOUT_CLASSIFICATION	4.547229765967233E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.83558855209542	WITHOUT_CLASSIFICATION	0.16441144790458004	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.999559725212115	WITHOUT_CLASSIFICATION	4.402747878849999E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9991238811372494	WITHOUT_CLASSIFICATION	8.761188627505944E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9998746792317537	WITHOUT_CLASSIFICATION	1.253207682463072E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.999952558930837	WITHOUT_CLASSIFICATION	4.744106916303443E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998928179579247	WITHOUT_CLASSIFICATION	1.0718204207536319E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999543410022554	WITHOUT_CLASSIFICATION	4.565899774451559E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999710218679408	WITHOUT_CLASSIFICATION	2.8978132059115053E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999612423886247	WITHOUT_CLASSIFICATION	3.875761137520688E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997528288815691	WITHOUT_CLASSIFICATION	2.471711184309068E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999197865002601	WITHOUT_CLASSIFICATION	8.021349973990645E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999207824071455	WITHOUT_CLASSIFICATION	7.92175928543802E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999210942627259	WITHOUT_CLASSIFICATION	7.890573727403562E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9997700065983101	WITHOUT_CLASSIFICATION	2.2999340168985418E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9992476431938604	WITHOUT_CLASSIFICATION	7.523568061395279E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9992476431938604	WITHOUT_CLASSIFICATION	7.523568061395279E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9969783904642208	WITHOUT_CLASSIFICATION	0.0030216095357792094	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998164844235579	WITHOUT_CLASSIFICATION	1.8351557644207675E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9967483359615875	WITHOUT_CLASSIFICATION	0.0032516640384124976	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9969783904642208	WITHOUT_CLASSIFICATION	0.0030216095357792094	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9922122650805536	WITHOUT_CLASSIFICATION	0.0077877349194464315	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9998510355185316	WITHOUT_CLASSIFICATION	1.4896448146846912E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999636847987091	WITHOUT_CLASSIFICATION	3.631520129089828E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.998204846623269	WITHOUT_CLASSIFICATION	0.0017951533767310466	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9967684593338969	WITHOUT_CLASSIFICATION	0.0032315406661032045	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.99885272571285	WITHOUT_CLASSIFICATION	0.0011472742871499614	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998696712808341	WITHOUT_CLASSIFICATION	1.303287191657827E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9937278844423412	WITHOUT_CLASSIFICATION	0.006272115557658893	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998840369660035	WITHOUT_CLASSIFICATION	1.1596303399654728E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999536186754354	WITHOUT_CLASSIFICATION	4.6381324564471594E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999536186754354	WITHOUT_CLASSIFICATION	4.6381324564471594E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9877126382674183	WITHOUT_CLASSIFICATION	0.012287361732581667	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9988807396725805	WITHOUT_CLASSIFICATION	0.0011192603274195762	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998715446308615	WITHOUT_CLASSIFICATION	1.284553691385343E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999202656024088	WITHOUT_CLASSIFICATION	7.973439759130528E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9990983690210682	WITHOUT_CLASSIFICATION	9.016309789318509E-4	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999229552168903	WITHOUT_CLASSIFICATION	7.704478310967616E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9985273902101213	WITHOUT_CLASSIFICATION	0.0014726097898786802	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999598104356746	WITHOUT_CLASSIFICATION	4.018956432532454E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999526073580045	WITHOUT_CLASSIFICATION	4.739264199549572E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.999978983490261	WITHOUT_CLASSIFICATION	2.101650973902022E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9986505518603646	WITHOUT_CLASSIFICATION	0.0013494481396354415	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9996991788112204	WITHOUT_CLASSIFICATION	3.008211887796625E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999271173459356	WITHOUT_CLASSIFICATION	7.288265406436893E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.999985066697756	WITHOUT_CLASSIFICATION	1.4933302244042612E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999752424713163	WITHOUT_CLASSIFICATION	2.475752868366177E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999752424713163	WITHOUT_CLASSIFICATION	2.475752868366177E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999714596550728	WITHOUT_CLASSIFICATION	2.8540344927113738E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9996935541627132	WITHOUT_CLASSIFICATION	3.064458372867822E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999340714721136	WITHOUT_CLASSIFICATION	6.592852788643659E-5	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9996865996099207	WITHOUT_CLASSIFICATION	3.1340039007932526E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999882015321527	WITHOUT_CLASSIFICATION	1.179846784727028E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999794942021998	WITHOUT_CLASSIFICATION	2.0505797800305434E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999882015321527	WITHOUT_CLASSIFICATION	1.179846784727028E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999631676962049	WITHOUT_CLASSIFICATION	3.683230379518491E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9966499689493395	WITHOUT_CLASSIFICATION	0.0033500310506603976	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9983324924216416	WITHOUT_CLASSIFICATION	0.0016675075783584691	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9995152831107504	WITHOUT_CLASSIFICATION	4.847168892495911E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9995152831107504	WITHOUT_CLASSIFICATION	4.847168892495911E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.999988580073946	WITHOUT_CLASSIFICATION	1.1419926053901308E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999336357963424	WITHOUT_CLASSIFICATION	6.636420365749232E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999289832452358	WITHOUT_CLASSIFICATION	7.101675476415138E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.7533015193955965	WITHOUT_CLASSIFICATION	0.24669848060440347	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999682875417124	WITHOUT_CLASSIFICATION	3.171245828754806E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997161861272136	WITHOUT_CLASSIFICATION	2.838138727864835E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997161861272136	WITHOUT_CLASSIFICATION	2.838138727864835E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9994537931353947	WITHOUT_CLASSIFICATION	5.462068646053087E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999889580984427	WITHOUT_CLASSIFICATION	1.1041901557316889E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999889580984427	WITHOUT_CLASSIFICATION	1.1041901557316889E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9998944405182234	WITHOUT_CLASSIFICATION	1.0555948177660869E-4	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999768014037888	WITHOUT_CLASSIFICATION	2.31985962111744E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999390652196429	WITHOUT_CLASSIFICATION	6.093478035711784E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9992932592888294	WITHOUT_CLASSIFICATION	7.067407111705683E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9997029728268859	WITHOUT_CLASSIFICATION	2.970271731140505E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999882015321527	WITHOUT_CLASSIFICATION	1.179846784727028E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9997383243290113	WITHOUT_CLASSIFICATION	2.6167567098872135E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999980875399277	WITHOUT_CLASSIFICATION	1.9124600723519717E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.999052804125804	WITHOUT_CLASSIFICATION	9.471958741959136E-4	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9997383899950305	WITHOUT_CLASSIFICATION	2.616100049695129E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999977089220943	WITHOUT_CLASSIFICATION	2.2910779056989023E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999967583525419	WITHOUT_CLASSIFICATION	3.241647458080012E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999763859048049	WITHOUT_CLASSIFICATION	2.3614095195122965E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9998144809426504	WITHOUT_CLASSIFICATION	1.855190573496998E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9998359834880992	WITHOUT_CLASSIFICATION	1.640165119006926E-4	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999332345128391	WITHOUT_CLASSIFICATION	6.676548716097136E-5	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.99998803197052	WITHOUT_CLASSIFICATION	1.1968029480084064E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999950090172202	WITHOUT_CLASSIFICATION	4.9909827799195445E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9991273922112669	WITHOUT_CLASSIFICATION	8.726077887331793E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999327580531758	WITHOUT_CLASSIFICATION	6.724194682415263E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9965333085792262	WITHOUT_CLASSIFICATION	0.003466691420773879	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999123013073478	WITHOUT_CLASSIFICATION	8.769869265222331E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9994363736153836	WITHOUT_CLASSIFICATION	5.636263846163475E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9995532808373754	WITHOUT_CLASSIFICATION	4.467191626246252E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999669486849347	WITHOUT_CLASSIFICATION	3.305131506518293E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999984306736887	WITHOUT_CLASSIFICATION	1.569326311322229E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999843840730323	WITHOUT_CLASSIFICATION	1.5615926967719335E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9912660208595357	WITHOUT_CLASSIFICATION	0.008733979140464341	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999730797821859	WITHOUT_CLASSIFICATION	2.6920217814174825E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9997223419485414	WITHOUT_CLASSIFICATION	2.7765805145867295E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.99985117632518	WITHOUT_CLASSIFICATION	1.4882367482007893E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999840045582336	WITHOUT_CLASSIFICATION	1.5995441766442822E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999103425884439	WITHOUT_CLASSIFICATION	8.96574115560425E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9995480297323369	WITHOUT_CLASSIFICATION	4.5197026766303637E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9988372631409206	WITHOUT_CLASSIFICATION	0.0011627368590793991	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999389609114898	WITHOUT_CLASSIFICATION	6.103908851027543E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.999952975131595	WITHOUT_CLASSIFICATION	4.702486840510297E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999927606848781	WITHOUT_CLASSIFICATION	7.239315121937836E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.999950661419892	WITHOUT_CLASSIFICATION	4.9338580108020805E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999769367236934	WITHOUT_CLASSIFICATION	2.3063276306618372E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998300759838027	WITHOUT_CLASSIFICATION	1.6992401619733255E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998570357337103	WITHOUT_CLASSIFICATION	1.429642662896779E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999838834836539	WITHOUT_CLASSIFICATION	1.6116516346135858E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999953787366974	WITHOUT_CLASSIFICATION	4.621263302650208E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999795589442037	WITHOUT_CLASSIFICATION	2.0441055796289006E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998104377794741	WITHOUT_CLASSIFICATION	1.8956222052597479E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999218584134554	WITHOUT_CLASSIFICATION	7.814158654460112E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995499337805511	WITHOUT_CLASSIFICATION	4.5006621944883285E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999240806406239	WITHOUT_CLASSIFICATION	7.591935937621743E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9998135565816079	WITHOUT_CLASSIFICATION	1.864434183920404E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999460226202144	WITHOUT_CLASSIFICATION	5.3977379785490134E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9830816017056772	WITHOUT_CLASSIFICATION	0.016918398294322828	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999768440309944	WITHOUT_CLASSIFICATION	2.3155969005633218E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999768440309944	WITHOUT_CLASSIFICATION	2.3155969005633218E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999726341770754	WITHOUT_CLASSIFICATION	2.7365822924661672E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999726341770754	WITHOUT_CLASSIFICATION	2.7365822924661672E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999726341770754	WITHOUT_CLASSIFICATION	2.7365822924661672E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999980924194629	WITHOUT_CLASSIFICATION	1.9075805370973527E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999980924194629	WITHOUT_CLASSIFICATION	1.9075805370973527E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999908696004399	WITHOUT_CLASSIFICATION	9.130399560098375E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999908696004399	WITHOUT_CLASSIFICATION	9.130399560098375E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9991587984047696	WITHOUT_CLASSIFICATION	8.412015952303559E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9981166091980783	WITHOUT_CLASSIFICATION	0.0018833908019216508	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999714871727595	WITHOUT_CLASSIFICATION	2.8512827240402218E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999714871727595	WITHOUT_CLASSIFICATION	2.8512827240402218E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9988941271242131	WITHOUT_CLASSIFICATION	0.001105872875786894	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999241471493979	WITHOUT_CLASSIFICATION	7.585285060205703E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9992360498529463	WITHOUT_CLASSIFICATION	7.639501470535827E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999313170118204	WITHOUT_CLASSIFICATION	6.86829881796548E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9991584185141463	WITHOUT_CLASSIFICATION	8.41581485853657E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999643977932197	WITHOUT_CLASSIFICATION	3.560220678022045E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999934484481033	WITHOUT_CLASSIFICATION	6.55155189671945E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999481997588984	WITHOUT_CLASSIFICATION	5.180024110175641E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9998317876900433	WITHOUT_CLASSIFICATION	1.6821230995675237E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999924881147344	WITHOUT_CLASSIFICATION	7.511885265558313E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.999735900630636	WITHOUT_CLASSIFICATION	2.640993693639817E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999767127278126	WITHOUT_CLASSIFICATION	2.3287272187335604E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9991868213835498	WITHOUT_CLASSIFICATION	8.131786164502689E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999511048503068	WITHOUT_CLASSIFICATION	4.8895149693223466E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999499695393536	WITHOUT_CLASSIFICATION	5.003046064636384E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999588235633547	WITHOUT_CLASSIFICATION	4.117643664522189E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999368435361764	WITHOUT_CLASSIFICATION	6.3156463823605E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9996973888427155	WITHOUT_CLASSIFICATION	3.0261115728451055E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999899148003807	WITHOUT_CLASSIFICATION	1.0085199619272249E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998798115888825	WITHOUT_CLASSIFICATION	1.20188411117492E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998798115888825	WITHOUT_CLASSIFICATION	1.20188411117492E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998798115888825	WITHOUT_CLASSIFICATION	1.20188411117492E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998304987121057	WITHOUT_CLASSIFICATION	1.695012878943261E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998304987121057	WITHOUT_CLASSIFICATION	1.695012878943261E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998304987121057	WITHOUT_CLASSIFICATION	1.695012878943261E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998304987121057	WITHOUT_CLASSIFICATION	1.695012878943261E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998304987121057	WITHOUT_CLASSIFICATION	1.695012878943261E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9998142121186252	WITHOUT_CLASSIFICATION	1.8578788137472044E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9991083004250735	WITHOUT_CLASSIFICATION	8.916995749264813E-4	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999887973930862	WITHOUT_CLASSIFICATION	1.1202606913798427E-5	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999763474078461	WITHOUT_CLASSIFICATION	2.3652592153948834E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9998073224776839	WITHOUT_CLASSIFICATION	1.926775223160772E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999043576733585	WITHOUT_CLASSIFICATION	9.564232664145641E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9987081499271159	WITHOUT_CLASSIFICATION	0.00129185007288416	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999644390716934	WITHOUT_CLASSIFICATION	3.556092830660566E-5	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.999988281815045	WITHOUT_CLASSIFICATION	1.1718184954993632E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999777748732772	WITHOUT_CLASSIFICATION	2.22251267227759E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999575242568167	WITHOUT_CLASSIFICATION	4.247574318326645E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999521436413201	WITHOUT_CLASSIFICATION	4.785635867983288E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9002731442869443	WITHOUT_CLASSIFICATION	0.09972685571305566	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9997881434673115	WITHOUT_CLASSIFICATION	2.1185653268844268E-4	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9997029941313544	WITHOUT_CLASSIFICATION	2.9700586864560665E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999075701392836	WITHOUT_CLASSIFICATION	9.242986071648317E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998681891643664	WITHOUT_CLASSIFICATION	1.3181083563370272E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999413573316116	WITHOUT_CLASSIFICATION	5.8642668388285235E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999794942021998	WITHOUT_CLASSIFICATION	2.0505797800305434E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9970125384493375	WITHOUT_CLASSIFICATION	0.0029874615506625497	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9980942412128767	WITHOUT_CLASSIFICATION	0.0019057587871233956	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9997714627831749	WITHOUT_CLASSIFICATION	2.285372168251829E-4	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999699640989217	WITHOUT_CLASSIFICATION	3.0035901078314343E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999570552574594	WITHOUT_CLASSIFICATION	4.294474254064242E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999080941841522	WITHOUT_CLASSIFICATION	9.190581584789153E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999095759084836	WITHOUT_CLASSIFICATION	9.042409151633093E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999577941020722	WITHOUT_CLASSIFICATION	4.22058979278922E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9998854327551728	WITHOUT_CLASSIFICATION	1.1456724482715229E-4	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999166428280218	WITHOUT_CLASSIFICATION	8.335717197812577E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999534077271801	WITHOUT_CLASSIFICATION	4.6592272819882974E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9998465865218138	WITHOUT_CLASSIFICATION	1.5341347818611958E-4	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999501983348368	WITHOUT_CLASSIFICATION	4.9801665163201686E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999812043408985	WITHOUT_CLASSIFICATION	1.8795659101515948E-5	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9998667727575111	WITHOUT_CLASSIFICATION	1.3322724248882834E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999669053890096	WITHOUT_CLASSIFICATION	3.309461099047129E-5	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999611309014395	WITHOUT_CLASSIFICATION	3.886909856055129E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997061526601166	WITHOUT_CLASSIFICATION	2.938473398833156E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999213120037596	WITHOUT_CLASSIFICATION	7.868799624047389E-5	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999981833438425	WITHOUT_CLASSIFICATION	1.8166561575019507E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996754701009642	WITHOUT_CLASSIFICATION	3.2452989903582056E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996754701009642	WITHOUT_CLASSIFICATION	3.2452989903582056E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999486503278496	WITHOUT_CLASSIFICATION	5.134967215032088E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999486503278496	WITHOUT_CLASSIFICATION	5.134967215032088E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9998688183876447	WITHOUT_CLASSIFICATION	1.311816123553483E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9998688183876447	WITHOUT_CLASSIFICATION	1.311816123553483E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999107111942521	WITHOUT_CLASSIFICATION	8.928880574789667E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999601037179836	WITHOUT_CLASSIFICATION	3.989628201633376E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999825160381914	WITHOUT_CLASSIFICATION	1.74839618086362E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999722368131595	WITHOUT_CLASSIFICATION	2.7763186840484502E-5	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999441427716025	WITHOUT_CLASSIFICATION	5.585722839748478E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9984817638220106	WITHOUT_CLASSIFICATION	0.0015182361779892916	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999215882603678	WITHOUT_CLASSIFICATION	7.841173963227419E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999839231606753	WITHOUT_CLASSIFICATION	1.6076839324728107E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9998824049106286	WITHOUT_CLASSIFICATION	1.175950893713458E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9996990645024958	WITHOUT_CLASSIFICATION	3.0093549750420044E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999578178849531	WITHOUT_CLASSIFICATION	4.21821150469204E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999466743238467	WITHOUT_CLASSIFICATION	5.33256761533357E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9988821345928665	WITHOUT_CLASSIFICATION	0.001117865407133531	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999719678026745	WITHOUT_CLASSIFICATION	2.8032197325423547E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9988401094642739	WITHOUT_CLASSIFICATION	0.001159890535726014	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998958590839746	WITHOUT_CLASSIFICATION	1.041409160253806E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999115637899398	WITHOUT_CLASSIFICATION	8.843621006009107E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9998641912482426	WITHOUT_CLASSIFICATION	1.3580875175752733E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9998228306163711	WITHOUT_CLASSIFICATION	1.7716938362876086E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9982206893102206	WITHOUT_CLASSIFICATION	0.001779310689779482	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999590752358226	WITHOUT_CLASSIFICATION	4.0924764177352205E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999519660825291	WITHOUT_CLASSIFICATION	4.8033917470796336E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999602319778358	WITHOUT_CLASSIFICATION	3.976802216417542E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999714797616164	WITHOUT_CLASSIFICATION	2.852023838356949E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999461081567409	WITHOUT_CLASSIFICATION	5.389184325900392E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999461081567409	WITHOUT_CLASSIFICATION	5.389184325900392E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999327580531758	WITHOUT_CLASSIFICATION	6.724194682415263E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999327580531758	WITHOUT_CLASSIFICATION	6.724194682415263E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999936114275345	WITHOUT_CLASSIFICATION	6.388572465482084E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9987313466193906	WITHOUT_CLASSIFICATION	0.0012686533806094112	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.999918502355837	WITHOUT_CLASSIFICATION	8.149764416289134E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999153558584783	WITHOUT_CLASSIFICATION	8.464414152169852E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998387298189702	WITHOUT_CLASSIFICATION	1.612701810299337E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999461081567409	WITHOUT_CLASSIFICATION	5.389184325900392E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999461081567409	WITHOUT_CLASSIFICATION	5.389184325900392E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999461081567409	WITHOUT_CLASSIFICATION	5.389184325900392E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999327580531758	WITHOUT_CLASSIFICATION	6.724194682415263E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999327580531758	WITHOUT_CLASSIFICATION	6.724194682415263E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999136064845939	WITHOUT_CLASSIFICATION	8.639351540603328E-5	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999757075418052	WITHOUT_CLASSIFICATION	2.429245819475983E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999742097275776	WITHOUT_CLASSIFICATION	2.5790272422450953E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9919315210379854	WITHOUT_CLASSIFICATION	0.008068478962014477	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999641832574284	WITHOUT_CLASSIFICATION	3.581674257151021E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999634129733509	WITHOUT_CLASSIFICATION	3.6587026649193025E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999765718667066	WITHOUT_CLASSIFICATION	2.3428133293418407E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9998891256306345	WITHOUT_CLASSIFICATION	1.1087436936560347E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999936640290424	WITHOUT_CLASSIFICATION	6.335970957567225E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999827079069156	WITHOUT_CLASSIFICATION	1.729209308437169E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999298523589287	WITHOUT_CLASSIFICATION	7.014764107134367E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9993218125889838	WITHOUT_CLASSIFICATION	6.78187411016243E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999719984054428	WITHOUT_CLASSIFICATION	2.8001594557208867E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998335053796052	WITHOUT_CLASSIFICATION	1.6649462039483405E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999067230618235	WITHOUT_CLASSIFICATION	9.327693817659752E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.997460687509728	WITHOUT_CLASSIFICATION	0.002539312490272027	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999616191291212	WITHOUT_CLASSIFICATION	3.838087087887221E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999616191291212	WITHOUT_CLASSIFICATION	3.838087087887221E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999616191291212	WITHOUT_CLASSIFICATION	3.838087087887221E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9970353408037302	WITHOUT_CLASSIFICATION	0.002964659196269621	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9970353408037302	WITHOUT_CLASSIFICATION	0.002964659196269621	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999840158228006	WITHOUT_CLASSIFICATION	1.5984177199463434E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9998525939609038	WITHOUT_CLASSIFICATION	1.4740603909631266E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9998726797775069	WITHOUT_CLASSIFICATION	1.2732022249316652E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.999872683201981	WITHOUT_CLASSIFICATION	1.2731679801906713E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999342592836277	WITHOUT_CLASSIFICATION	6.574071637232817E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.99982976728778	WITHOUT_CLASSIFICATION	1.7023271222002054E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9998900086032457	WITHOUT_CLASSIFICATION	1.0999139675436398E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998900115616854	WITHOUT_CLASSIFICATION	1.0998843831453612E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999432073517885	WITHOUT_CLASSIFICATION	5.679264821133092E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999413557541758	WITHOUT_CLASSIFICATION	5.86442458242201E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999764203186369	WITHOUT_CLASSIFICATION	2.3579681363179757E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999754922842242	WITHOUT_CLASSIFICATION	2.4507715775887997E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999350381809492	WITHOUT_CLASSIFICATION	6.496181905077468E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999593932877413	WITHOUT_CLASSIFICATION	4.0606712258749285E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999202315865071	WITHOUT_CLASSIFICATION	7.976841349279148E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999467267483918	WITHOUT_CLASSIFICATION	5.3273251608147474E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.999825222517978	WITHOUT_CLASSIFICATION	1.7477748202202896E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.999845988004819	WITHOUT_CLASSIFICATION	1.5401199518086373E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9998816188353944	WITHOUT_CLASSIFICATION	1.1838116460560182E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9890522922483038	WITHOUT_CLASSIFICATION	0.0109477077516961	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999360576937245	WITHOUT_CLASSIFICATION	6.39423062755419E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999566968160025	WITHOUT_CLASSIFICATION	4.330318399748107E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999725145083145	WITHOUT_CLASSIFICATION	2.748549168550397E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999730937702667	WITHOUT_CLASSIFICATION	2.6906229733371174E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999595701378438	WITHOUT_CLASSIFICATION	4.0429862156284355E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999903236333122	WITHOUT_CLASSIFICATION	9.676366687728098E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9997246706307301	WITHOUT_CLASSIFICATION	2.7532936926988544E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.994327770001582	WITHOUT_CLASSIFICATION	0.005672229998418027	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9998027687561085	WITHOUT_CLASSIFICATION	1.9723124389141205E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9993987533257744	WITHOUT_CLASSIFICATION	6.01246674225478E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9996217809349248	WITHOUT_CLASSIFICATION	3.782190650751025E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9983372243245884	WITHOUT_CLASSIFICATION	0.0016627756754115683	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9995433100106608	WITHOUT_CLASSIFICATION	4.5668998933921E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.999947267905297	WITHOUT_CLASSIFICATION	5.273209470295884E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.999965897976093	WITHOUT_CLASSIFICATION	3.410202390704063E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9998797588187847	WITHOUT_CLASSIFICATION	1.2024118121543555E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9961041302289398	WITHOUT_CLASSIFICATION	0.0038958697710601846	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999046549978331	WITHOUT_CLASSIFICATION	9.534500216695012E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.995529957197059	WITHOUT_CLASSIFICATION	0.00447004280294107	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9992235528489459	WITHOUT_CLASSIFICATION	7.764471510540482E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.999488204042464	WITHOUT_CLASSIFICATION	5.117959575359812E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999664733359429	WITHOUT_CLASSIFICATION	3.352666405703157E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9993529092324246	WITHOUT_CLASSIFICATION	6.470907675753939E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.99955750825027	WITHOUT_CLASSIFICATION	4.424917497300566E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.99955750825027	WITHOUT_CLASSIFICATION	4.424917497300566E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9989379917497494	WITHOUT_CLASSIFICATION	0.0010620082502505164	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9998910775386707	WITHOUT_CLASSIFICATION	1.0892246132942395E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9993501986258655	WITHOUT_CLASSIFICATION	6.498013741344607E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9988769042880189	WITHOUT_CLASSIFICATION	0.0011230957119810962	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9996096405683358	WITHOUT_CLASSIFICATION	3.903594316642425E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999224380736161	WITHOUT_CLASSIFICATION	7.756192638376886E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999762373596438	WITHOUT_CLASSIFICATION	2.376264035618509E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999712964684491	WITHOUT_CLASSIFICATION	2.870353155100893E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999886397290226	WITHOUT_CLASSIFICATION	1.136027097740164E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.999930698170876	WITHOUT_CLASSIFICATION	6.930182912406065E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999542729378755	WITHOUT_CLASSIFICATION	4.572706212452047E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999542729378755	WITHOUT_CLASSIFICATION	4.572706212452047E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999542729378755	WITHOUT_CLASSIFICATION	4.572706212452047E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999542729378755	WITHOUT_CLASSIFICATION	4.572706212452047E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999791427035155	WITHOUT_CLASSIFICATION	2.085729648450654E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999931498452996	WITHOUT_CLASSIFICATION	6.850154700322676E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999942962639192	WITHOUT_CLASSIFICATION	5.703736080700569E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9996932682624738	WITHOUT_CLASSIFICATION	3.0673173752615536E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9991929974125303	WITHOUT_CLASSIFICATION	8.070025874696486E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9991497030197217	WITHOUT_CLASSIFICATION	8.502969802783245E-4	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9998975608278876	WITHOUT_CLASSIFICATION	1.0243917211241786E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999753884127116	WITHOUT_CLASSIFICATION	2.4611587288426714E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999753884127116	WITHOUT_CLASSIFICATION	2.4611587288426714E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999863020968847	WITHOUT_CLASSIFICATION	1.3697903115291838E-5	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999194962738721	WITHOUT_CLASSIFICATION	8.050372612791668E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9998499318251505	WITHOUT_CLASSIFICATION	1.5006817484944712E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9962573058076631	WITHOUT_CLASSIFICATION	0.0037426941923369636	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9962573058076631	WITHOUT_CLASSIFICATION	0.0037426941923369636	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9993667289462675	WITHOUT_CLASSIFICATION	6.332710537323626E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999868458884746	WITHOUT_CLASSIFICATION	1.3154111525332924E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999868458884746	WITHOUT_CLASSIFICATION	1.3154111525332924E-5	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9995161639146808	WITHOUT_CLASSIFICATION	4.8383608531917693E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999991886518163	WITHOUT_CLASSIFICATION	8.11348183652508E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999982897864041	WITHOUT_CLASSIFICATION	1.7102135958823293E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9980940159462076	WITHOUT_CLASSIFICATION	0.0019059840537923747	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.999301787259292	WITHOUT_CLASSIFICATION	6.982127407079951E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999989394730896	WITHOUT_CLASSIFICATION	1.0605269104247445E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9869917552857391	WITHOUT_CLASSIFICATION	0.013008244714260883	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999948524886937	WITHOUT_CLASSIFICATION	5.147511306368201E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999703592480758	WITHOUT_CLASSIFICATION	2.96407519241551E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999872112206362	WITHOUT_CLASSIFICATION	1.2788779363959713E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9919050310894234	WITHOUT_CLASSIFICATION	0.008094968910576624	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9962654860013771	WITHOUT_CLASSIFICATION	0.0037345139986229357	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999853630644311	WITHOUT_CLASSIFICATION	1.4636935568850811E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9981817418532023	WITHOUT_CLASSIFICATION	0.0018182581467976315	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9996944835095938	WITHOUT_CLASSIFICATION	3.055164904062076E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999538523317244	WITHOUT_CLASSIFICATION	4.614766827562936E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999030693641396	WITHOUT_CLASSIFICATION	9.693063586027595E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9997241061270606	WITHOUT_CLASSIFICATION	2.758938729393268E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9970167522694989	WITHOUT_CLASSIFICATION	0.002983247730501067	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9974830298255776	WITHOUT_CLASSIFICATION	0.0025169701744225067	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9986391564322087	WITHOUT_CLASSIFICATION	0.0013608435677913216	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999141423022879	WITHOUT_CLASSIFICATION	8.585769771209815E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9301832852884859	WITHOUT_CLASSIFICATION	0.06981671471151403	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999696946531035	WITHOUT_CLASSIFICATION	3.0305346896556357E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999122279080727	WITHOUT_CLASSIFICATION	8.777209192733799E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9998693609222841	WITHOUT_CLASSIFICATION	1.306390777158849E-4	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9998079460357033	WITHOUT_CLASSIFICATION	1.9205396429665782E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9987331965991338	WITHOUT_CLASSIFICATION	0.001266803400866094	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999160731600749	WITHOUT_CLASSIFICATION	8.392683992508861E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.6345650929644664	DEFECT	0.3654349070355335	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9994423137645225	WITHOUT_CLASSIFICATION	5.576862354774974E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999074055271501	WITHOUT_CLASSIFICATION	9.259447284995967E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9997221045351293	WITHOUT_CLASSIFICATION	2.778954648706949E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999512339268632	WITHOUT_CLASSIFICATION	4.876607313681745E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9996827519233956	WITHOUT_CLASSIFICATION	3.172480766043767E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9997221045351293	WITHOUT_CLASSIFICATION	2.778954648706949E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999512339268632	WITHOUT_CLASSIFICATION	4.876607313681745E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9998969845011981	WITHOUT_CLASSIFICATION	1.0301549880197318E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999499913072764	WITHOUT_CLASSIFICATION	5.000869272365635E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999499913072764	WITHOUT_CLASSIFICATION	5.000869272365635E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9997733000139553	WITHOUT_CLASSIFICATION	2.2669998604468424E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9969607259836679	WITHOUT_CLASSIFICATION	0.003039274016331983	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999709842521789	WITHOUT_CLASSIFICATION	2.9015747821096754E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999711609614391	WITHOUT_CLASSIFICATION	2.883903856088812E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9950876102750044	WITHOUT_CLASSIFICATION	0.004912389724995663	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9988634786382262	WITHOUT_CLASSIFICATION	0.0011365213617738064	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999011419759356	WITHOUT_CLASSIFICATION	9.885802406435456E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9998522152773336	WITHOUT_CLASSIFICATION	1.4778472266639562E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999663901798226	WITHOUT_CLASSIFICATION	3.36098201774226E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9997136986084815	WITHOUT_CLASSIFICATION	2.8630139151854435E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9994755345710548	WITHOUT_CLASSIFICATION	5.244654289453054E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9998423725295692	WITHOUT_CLASSIFICATION	1.576274704308602E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998385944290206	WITHOUT_CLASSIFICATION	1.6140557097951607E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999719016894656	WITHOUT_CLASSIFICATION	2.8098310534408217E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999719016894656	WITHOUT_CLASSIFICATION	2.8098310534408217E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999897057423935	WITHOUT_CLASSIFICATION	1.0294257606505996E-4	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999897057423935	WITHOUT_CLASSIFICATION	1.0294257606505996E-4	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9998934804065002	WITHOUT_CLASSIFICATION	1.0651959349986723E-4	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998869868292442	WITHOUT_CLASSIFICATION	1.1301317075575144E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999166714738886	WITHOUT_CLASSIFICATION	8.332852611137831E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999709842521789	WITHOUT_CLASSIFICATION	2.9015747821096754E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999711609614391	WITHOUT_CLASSIFICATION	2.883903856088812E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999663901798226	WITHOUT_CLASSIFICATION	3.36098201774226E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9997136986084815	WITHOUT_CLASSIFICATION	2.8630139151854435E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999184457023511	WITHOUT_CLASSIFICATION	8.155429764886585E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9998948703243867	WITHOUT_CLASSIFICATION	1.0512967561328452E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999740070730483	WITHOUT_CLASSIFICATION	2.5992926951778272E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998951549856002	WITHOUT_CLASSIFICATION	1.0484501439968251E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999554367491625	WITHOUT_CLASSIFICATION	4.45632508375387E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9997774197561077	WITHOUT_CLASSIFICATION	2.2258024389231284E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999594430939341	WITHOUT_CLASSIFICATION	4.055690606580803E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.999935027398372	WITHOUT_CLASSIFICATION	6.497260162800792E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999218293477803	WITHOUT_CLASSIFICATION	7.8170652219781E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9988526127698165	WITHOUT_CLASSIFICATION	0.0011473872301834965	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9998840426168163	WITHOUT_CLASSIFICATION	1.1595738318378856E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.999995100573568	WITHOUT_CLASSIFICATION	4.8994264320211295E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9998855371352249	WITHOUT_CLASSIFICATION	1.1446286477517369E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999948576973625	WITHOUT_CLASSIFICATION	5.142302637501266E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999920868187973	WITHOUT_CLASSIFICATION	7.91318120278032E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998829282798891	WITHOUT_CLASSIFICATION	1.1707172011091964E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9994635669822033	WITHOUT_CLASSIFICATION	5.364330177966559E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998723209880678	WITHOUT_CLASSIFICATION	1.2767901193219675E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999342892872612	WITHOUT_CLASSIFICATION	6.571071273877949E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999342892872612	WITHOUT_CLASSIFICATION	6.571071273877949E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999342892872612	WITHOUT_CLASSIFICATION	6.571071273877949E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9990075499676941	WITHOUT_CLASSIFICATION	9.924500323058361E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999874699628509	WITHOUT_CLASSIFICATION	1.2530037149092058E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997106558796884	WITHOUT_CLASSIFICATION	2.893441203115813E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997106558796884	WITHOUT_CLASSIFICATION	2.893441203115813E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9996730539045633	WITHOUT_CLASSIFICATION	3.2694609543678786E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999887084961107	WITHOUT_CLASSIFICATION	1.1291503889384949E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999707826543914	WITHOUT_CLASSIFICATION	2.92173456085919E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.999675225339202	WITHOUT_CLASSIFICATION	3.247746607979836E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998102423265066	WITHOUT_CLASSIFICATION	1.8975767349338168E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9984593920267285	WITHOUT_CLASSIFICATION	0.001540607973271524	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998878680590739	WITHOUT_CLASSIFICATION	1.1213194092608947E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9997522497843054	WITHOUT_CLASSIFICATION	2.4775021569451474E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9998352540343136	WITHOUT_CLASSIFICATION	1.6474596568644595E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998460699972339	WITHOUT_CLASSIFICATION	1.5393000276612968E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.999734297761986	WITHOUT_CLASSIFICATION	2.657022380140563E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999630542414557	WITHOUT_CLASSIFICATION	3.6945758544203517E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9998220480522736	WITHOUT_CLASSIFICATION	1.779519477264796E-4	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999900132979518	WITHOUT_CLASSIFICATION	9.986702048098065E-6	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999772709369324	WITHOUT_CLASSIFICATION	2.2729063067579376E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9995376341835274	WITHOUT_CLASSIFICATION	4.623658164726133E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999481289706766	WITHOUT_CLASSIFICATION	5.18710293233824E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999812831591531	WITHOUT_CLASSIFICATION	1.8716840846805203E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999375787243935	WITHOUT_CLASSIFICATION	6.24212756064412E-5	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999991604695078	WITHOUT_CLASSIFICATION	8.395304922020534E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999741283258667	WITHOUT_CLASSIFICATION	2.5871674133206906E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999764826935033	WITHOUT_CLASSIFICATION	2.3517306496798185E-5	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9997826861086324	WITHOUT_CLASSIFICATION	2.1731389136756614E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999957282565501	WITHOUT_CLASSIFICATION	4.271743449836442E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999842868919373	WITHOUT_CLASSIFICATION	1.5713108062793475E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999842868919373	WITHOUT_CLASSIFICATION	1.5713108062793475E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.99995704144618	WITHOUT_CLASSIFICATION	4.295855381993644E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.99995704144618	WITHOUT_CLASSIFICATION	4.295855381993644E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999461743675636	WITHOUT_CLASSIFICATION	5.382563243635145E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999910336784055	WITHOUT_CLASSIFICATION	8.966321594514137E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999786646468212	WITHOUT_CLASSIFICATION	2.133535317886551E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9998396487416162	WITHOUT_CLASSIFICATION	1.6035125838370767E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999812831591531	WITHOUT_CLASSIFICATION	1.8716840846805203E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999812831591531	WITHOUT_CLASSIFICATION	1.8716840846805203E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999812831591531	WITHOUT_CLASSIFICATION	1.8716840846805203E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999375787243935	WITHOUT_CLASSIFICATION	6.24212756064412E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999786646468212	WITHOUT_CLASSIFICATION	2.133535317886551E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999786646468212	WITHOUT_CLASSIFICATION	2.133535317886551E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999343571801256	WITHOUT_CLASSIFICATION	6.564281987449638E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999953869849305	WITHOUT_CLASSIFICATION	4.6130150695228845E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999947577933873	WITHOUT_CLASSIFICATION	5.24220661275777E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7775574950315235	WITHOUT_CLASSIFICATION	0.22244250496847645	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999951254046496	WITHOUT_CLASSIFICATION	4.874595350402676E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.999917435197041	WITHOUT_CLASSIFICATION	8.256480295891497E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.999917435197041	WITHOUT_CLASSIFICATION	8.256480295891497E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998687517240404	WITHOUT_CLASSIFICATION	1.312482759595608E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999254354500028	WITHOUT_CLASSIFICATION	7.456454999718046E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999254354500028	WITHOUT_CLASSIFICATION	7.456454999718046E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999254354500028	WITHOUT_CLASSIFICATION	7.456454999718046E-5	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999792150243858	WITHOUT_CLASSIFICATION	2.0784975614104945E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999919564778729	WITHOUT_CLASSIFICATION	8.043522127229218E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999375787243935	WITHOUT_CLASSIFICATION	6.24212756064412E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999664502238	WITHOUT_CLASSIFICATION	3.3549776199951786E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999254354500028	WITHOUT_CLASSIFICATION	7.456454999718046E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998687517240404	WITHOUT_CLASSIFICATION	1.312482759595608E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999499733000031	WITHOUT_CLASSIFICATION	5.002669999688866E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999620698512697	WITHOUT_CLASSIFICATION	3.793014873036874E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999513910917379	WITHOUT_CLASSIFICATION	4.860890826206766E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999351938647993	WITHOUT_CLASSIFICATION	6.480613520056682E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999375283745755	WITHOUT_CLASSIFICATION	6.247162542448427E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9995556102149037	WITHOUT_CLASSIFICATION	4.4438978509632406E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999935866852528	WITHOUT_CLASSIFICATION	6.413314747145894E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999863422287446	WITHOUT_CLASSIFICATION	1.3657771255294975E-5	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999596639518027	WITHOUT_CLASSIFICATION	4.033604819732637E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9998867277608204	WITHOUT_CLASSIFICATION	1.1327223917958005E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999119274768677	WITHOUT_CLASSIFICATION	8.807252313226469E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999874523477513	WITHOUT_CLASSIFICATION	1.2547652248738132E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9998627617066811	WITHOUT_CLASSIFICATION	1.3723829331890647E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999847493802426	WITHOUT_CLASSIFICATION	1.5250619757245494E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.999971797967373	WITHOUT_CLASSIFICATION	2.8202032626903222E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999903753027017	WITHOUT_CLASSIFICATION	9.624697298294527E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.999560724900681	WITHOUT_CLASSIFICATION	4.392750993189394E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999376795975776	WITHOUT_CLASSIFICATION	6.232040242236868E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999850763524089	WITHOUT_CLASSIFICATION	1.4923647591199536E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999931548235471	WITHOUT_CLASSIFICATION	6.845176452956846E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9998906218055855	WITHOUT_CLASSIFICATION	1.0937819441446003E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999491758760851	WITHOUT_CLASSIFICATION	5.082412391494082E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999561096942339	WITHOUT_CLASSIFICATION	4.389030576616663E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999763902593628	WITHOUT_CLASSIFICATION	2.3609740637158306E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.999876286555641	WITHOUT_CLASSIFICATION	1.2371344435905957E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999752163541434	WITHOUT_CLASSIFICATION	2.4783645856566338E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999995643284212	WITHOUT_CLASSIFICATION	4.356715788303381E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999820721146883	WITHOUT_CLASSIFICATION	1.792788531180655E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999378260759315	WITHOUT_CLASSIFICATION	6.217392406852545E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999630525638631	WITHOUT_CLASSIFICATION	3.694743613689247E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999499733000031	WITHOUT_CLASSIFICATION	5.002669999688866E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.999980527416478	WITHOUT_CLASSIFICATION	1.9472583521965853E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9997151688695253	WITHOUT_CLASSIFICATION	2.8483113047479756E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9990005325411689	WITHOUT_CLASSIFICATION	9.994674588310899E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999325949240806	WITHOUT_CLASSIFICATION	6.740507591934049E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999325949240806	WITHOUT_CLASSIFICATION	6.740507591934049E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999546806058728	WITHOUT_CLASSIFICATION	4.531939412714863E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999846631863408	WITHOUT_CLASSIFICATION	1.5336813659253967E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999705646866672	WITHOUT_CLASSIFICATION	2.9435313332757146E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.999965431610058	WITHOUT_CLASSIFICATION	3.4568389941993285E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999709004978852	WITHOUT_CLASSIFICATION	2.9099502114788103E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999303802468247	WITHOUT_CLASSIFICATION	6.961975317537851E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9971907281215104	WITHOUT_CLASSIFICATION	0.0028092718784894456	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999917608053511	WITHOUT_CLASSIFICATION	8.239194648798778E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998609767369616	WITHOUT_CLASSIFICATION	1.3902326303840773E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9987047199485869	WITHOUT_CLASSIFICATION	0.0012952800514131457	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9992062080153934	WITHOUT_CLASSIFICATION	7.937919846066017E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999783921595616	WITHOUT_CLASSIFICATION	2.1607840438295883E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999783921595616	WITHOUT_CLASSIFICATION	2.1607840438295883E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9991028172760454	WITHOUT_CLASSIFICATION	8.971827239544485E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999847853501549	WITHOUT_CLASSIFICATION	1.521464984514087E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999558928929116	WITHOUT_CLASSIFICATION	4.4107107088324024E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999558928929116	WITHOUT_CLASSIFICATION	4.4107107088324024E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999861207917136	WITHOUT_CLASSIFICATION	1.3879208286426064E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999710095933585	WITHOUT_CLASSIFICATION	2.8990406641488957E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9997045770664669	WITHOUT_CLASSIFICATION	2.9542293353314347E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9998320377956745	WITHOUT_CLASSIFICATION	1.6796220432544777E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999333290189238	WITHOUT_CLASSIFICATION	6.667098107611845E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9997867056911044	WITHOUT_CLASSIFICATION	2.1329430889550395E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999758949142514	WITHOUT_CLASSIFICATION	2.4105085748573254E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.999990666528766	WITHOUT_CLASSIFICATION	9.333471233905338E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9993529743463608	WITHOUT_CLASSIFICATION	6.470256536391881E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999893658341218	WITHOUT_CLASSIFICATION	1.0634165878205416E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9998067831326907	WITHOUT_CLASSIFICATION	1.932168673094764E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.999963449430113	WITHOUT_CLASSIFICATION	3.655056988698745E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999804835132853	WITHOUT_CLASSIFICATION	1.9516486714724013E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9998307199700784	WITHOUT_CLASSIFICATION	1.6928002992162996E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999907218958897	WITHOUT_CLASSIFICATION	9.278104110402574E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9965914445781482	WITHOUT_CLASSIFICATION	0.0034085554218518045	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9998053655286779	WITHOUT_CLASSIFICATION	1.9463447132213424E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9998912578923533	WITHOUT_CLASSIFICATION	1.0874210764667374E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9995696748538643	WITHOUT_CLASSIFICATION	4.303251461357561E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999721500521261	WITHOUT_CLASSIFICATION	2.784994787377187E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.948651138323908	WITHOUT_CLASSIFICATION	0.051348861676091984	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999673731245724	WITHOUT_CLASSIFICATION	3.262687542769049E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999845921370031	WITHOUT_CLASSIFICATION	1.5407862996876902E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999691027452772	WITHOUT_CLASSIFICATION	3.0897254722850234E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999811390363327	WITHOUT_CLASSIFICATION	1.8860963667344364E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9996535782866637	WITHOUT_CLASSIFICATION	3.4642171333628394E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9997977024320602	WITHOUT_CLASSIFICATION	2.0229756793990338E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9996429492973476	WITHOUT_CLASSIFICATION	3.5705070265237496E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999254316535483	WITHOUT_CLASSIFICATION	7.456834645173004E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999606630194048	WITHOUT_CLASSIFICATION	3.933698059523565E-5	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999279693464365	WITHOUT_CLASSIFICATION	7.20306535635569E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.999738523994849	WITHOUT_CLASSIFICATION	2.614760051510291E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998913514876895	WITHOUT_CLASSIFICATION	1.0864851231053729E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998913514876895	WITHOUT_CLASSIFICATION	1.0864851231053729E-4	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999808762111175	WITHOUT_CLASSIFICATION	1.9123788882489457E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999821969272504	WITHOUT_CLASSIFICATION	1.780307274965462E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9997203531020462	WITHOUT_CLASSIFICATION	2.796468979537606E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9997313107964532	WITHOUT_CLASSIFICATION	2.6868920354681175E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9996917745446826	WITHOUT_CLASSIFICATION	3.082254553174814E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.999986419265872	WITHOUT_CLASSIFICATION	1.3580734127997681E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9879900584243352	WITHOUT_CLASSIFICATION	0.012009941575664736	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9879900584243352	WITHOUT_CLASSIFICATION	0.012009941575664736	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9997511101057382	WITHOUT_CLASSIFICATION	2.4888989426176736E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9997654625695673	WITHOUT_CLASSIFICATION	2.3453743043276993E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9997469382568713	WITHOUT_CLASSIFICATION	2.53061743128653E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9287257380415159	WITHOUT_CLASSIFICATION	0.0712742619584841	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999236324531213	WITHOUT_CLASSIFICATION	7.636754687857156E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999221143932286	WITHOUT_CLASSIFICATION	7.788560677134742E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999848660102757	WITHOUT_CLASSIFICATION	1.5133989724321955E-5	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999878975789528	WITHOUT_CLASSIFICATION	1.2102421047170278E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.999833271498437	WITHOUT_CLASSIFICATION	1.6672850156298127E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999296506500636	WITHOUT_CLASSIFICATION	7.034934993642902E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999528114731875	WITHOUT_CLASSIFICATION	4.7188526812421936E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999459786595455	WITHOUT_CLASSIFICATION	5.402134045454789E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9998615075143112	WITHOUT_CLASSIFICATION	1.3849248568884552E-4	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999972132457601	WITHOUT_CLASSIFICATION	2.7867542400201536E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999009562407019	WITHOUT_CLASSIFICATION	9.904375929822055E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997602417421522	WITHOUT_CLASSIFICATION	2.397582578478788E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9991569403783368	WITHOUT_CLASSIFICATION	8.430596216631232E-4	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999921667293631	WITHOUT_CLASSIFICATION	7.833270636951181E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.999778957814105	WITHOUT_CLASSIFICATION	2.2104218589511027E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9997303481082457	WITHOUT_CLASSIFICATION	2.696518917543781E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.998526229123833	WITHOUT_CLASSIFICATION	0.0014737708761670032	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9989360093837717	WITHOUT_CLASSIFICATION	0.0010639906162282762	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999882684806425	WITHOUT_CLASSIFICATION	1.1731519357574716E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999967392312643	WITHOUT_CLASSIFICATION	3.2607687357249797E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999452044147945	WITHOUT_CLASSIFICATION	5.479558520559703E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997593126327589	WITHOUT_CLASSIFICATION	2.4068736724118045E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999349336513471	WITHOUT_CLASSIFICATION	6.506634865290898E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998950894388673	WITHOUT_CLASSIFICATION	1.049105611326097E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999520532288869	WITHOUT_CLASSIFICATION	4.794677111315794E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999659363057909	WITHOUT_CLASSIFICATION	3.406369420917252E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998305423045388	WITHOUT_CLASSIFICATION	1.694576954611637E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999595208800632	WITHOUT_CLASSIFICATION	4.047911993668268E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999248254284608	WITHOUT_CLASSIFICATION	7.517457153913573E-5	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999590265169724	WITHOUT_CLASSIFICATION	4.097348302761682E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999519297022146	WITHOUT_CLASSIFICATION	4.8070297785481E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998363829388578	WITHOUT_CLASSIFICATION	1.636170611421704E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9997274232039096	WITHOUT_CLASSIFICATION	2.7257679609034497E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9984264839877964	WITHOUT_CLASSIFICATION	0.001573516012203532	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999850201069561	WITHOUT_CLASSIFICATION	1.4979893043855013E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999948276304305	WITHOUT_CLASSIFICATION	5.172369569619677E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997129347475863	WITHOUT_CLASSIFICATION	2.870652524138254E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9978947988224506	WITHOUT_CLASSIFICATION	0.002105201177549302	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9985232447294571	WITHOUT_CLASSIFICATION	0.0014767552705430185	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9997869955411899	WITHOUT_CLASSIFICATION	2.1300445881008965E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9998902489371102	WITHOUT_CLASSIFICATION	1.09751062889721E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9991626183417281	WITHOUT_CLASSIFICATION	8.37381658271856E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9994836620363909	WITHOUT_CLASSIFICATION	5.163379636089487E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998891327712637	WITHOUT_CLASSIFICATION	1.108672287363221E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999680798558084	WITHOUT_CLASSIFICATION	3.192014419158329E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.8898343531483218	WITHOUT_CLASSIFICATION	0.11016564685167815	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999269949117553	WITHOUT_CLASSIFICATION	7.300508824465744E-5	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997117699441612	WITHOUT_CLASSIFICATION	2.8823005583874655E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999628185707228	WITHOUT_CLASSIFICATION	3.7181429277312606E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999974122120282	WITHOUT_CLASSIFICATION	2.5877879716950326E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999218471713192	WITHOUT_CLASSIFICATION	7.815282868081324E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999937698464657	WITHOUT_CLASSIFICATION	6.230153534367187E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999803617623966	WITHOUT_CLASSIFICATION	1.963823760342517E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999412449236732	WITHOUT_CLASSIFICATION	5.875507632671098E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998804822907184	WITHOUT_CLASSIFICATION	1.195177092816636E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999517389879193	WITHOUT_CLASSIFICATION	4.826101208056931E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998804822907184	WITHOUT_CLASSIFICATION	1.195177092816636E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999896119839969	WITHOUT_CLASSIFICATION	1.0388016003099865E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999517389879193	WITHOUT_CLASSIFICATION	4.826101208056931E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999860306987121	WITHOUT_CLASSIFICATION	1.3969301288092261E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999141423022879	WITHOUT_CLASSIFICATION	8.585769771209815E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9994431671906552	WITHOUT_CLASSIFICATION	5.568328093447857E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9743705850046197	WITHOUT_CLASSIFICATION	0.025629414995380333	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999617436248359	WITHOUT_CLASSIFICATION	3.825637516410178E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9983121206968057	WITHOUT_CLASSIFICATION	0.00168787930319435	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.99979484951605	WITHOUT_CLASSIFICATION	2.0515048395003285E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.999782426416818	WITHOUT_CLASSIFICATION	2.1757358318196058E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9969607259836679	WITHOUT_CLASSIFICATION	0.003039274016331983	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999721500521261	WITHOUT_CLASSIFICATION	2.784994787377187E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999947577933873	WITHOUT_CLASSIFICATION	5.24220661275777E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9928420865450683	WITHOUT_CLASSIFICATION	0.007157913454931636	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999779695021858	WITHOUT_CLASSIFICATION	2.2030497814337168E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999909741489621	WITHOUT_CLASSIFICATION	9.025851037866796E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9998695022909374	WITHOUT_CLASSIFICATION	1.3049770906255342E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.999519724042673	WITHOUT_CLASSIFICATION	4.80275957327018E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999922224212459	WITHOUT_CLASSIFICATION	7.777578754096153E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9988887190553235	WITHOUT_CLASSIFICATION	0.0011112809446765515	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9772234143473235	WITHOUT_CLASSIFICATION	0.02277658565267648	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999793460459426	WITHOUT_CLASSIFICATION	2.0653954057367996E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.999995353991778	WITHOUT_CLASSIFICATION	4.646008222111647E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999847948268045	WITHOUT_CLASSIFICATION	1.5205173195623109E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.999445998796563	WITHOUT_CLASSIFICATION	5.54001203436972E-4	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999917333182399	WITHOUT_CLASSIFICATION	8.26668176018115E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.998636234593305	WITHOUT_CLASSIFICATION	0.001363765406695074	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999961689083342	WITHOUT_CLASSIFICATION	3.831091665795807E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999671643251186	WITHOUT_CLASSIFICATION	3.283567488150181E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999671643251186	WITHOUT_CLASSIFICATION	3.283567488150181E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999139159978611	WITHOUT_CLASSIFICATION	8.608400213889794E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999746901895417	WITHOUT_CLASSIFICATION	2.530981045830182E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998110306743825	WITHOUT_CLASSIFICATION	1.889693256176205E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9998973485553253	WITHOUT_CLASSIFICATION	1.0265144467466313E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999228945320174	WITHOUT_CLASSIFICATION	7.71054679825629E-5	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999527501311878	WITHOUT_CLASSIFICATION	4.724986881209852E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9905917456257345	WITHOUT_CLASSIFICATION	0.009408254374265491	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999538400014908	WITHOUT_CLASSIFICATION	4.615999850926635E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995279650260157	WITHOUT_CLASSIFICATION	4.720349739842713E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995279650260157	WITHOUT_CLASSIFICATION	4.720349739842713E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9998755748199417	WITHOUT_CLASSIFICATION	1.2442518005838826E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999327220951545	WITHOUT_CLASSIFICATION	6.72779048454883E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.949428503770947	WITHOUT_CLASSIFICATION	0.0505714962290531	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999754838929494	WITHOUT_CLASSIFICATION	2.451610705052013E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9997039498213184	WITHOUT_CLASSIFICATION	2.96050178681656E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9995722714601675	WITHOUT_CLASSIFICATION	4.277285398325486E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9997965921627151	WITHOUT_CLASSIFICATION	2.0340783728491738E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999896119839969	WITHOUT_CLASSIFICATION	1.0388016003099865E-4	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999342646526618	WITHOUT_CLASSIFICATION	6.573534733813457E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999963448004561	WITHOUT_CLASSIFICATION	3.6551995438634636E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999908642715891	WITHOUT_CLASSIFICATION	9.13572841098499E-6	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999589627734048	WITHOUT_CLASSIFICATION	4.1037226595180635E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999455736010107	WITHOUT_CLASSIFICATION	5.4426398989411765E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999455736010107	WITHOUT_CLASSIFICATION	5.4426398989411765E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999327220951545	WITHOUT_CLASSIFICATION	6.72779048454883E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999936219332582	WITHOUT_CLASSIFICATION	6.378066741697682E-6	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9222595428722387	WITHOUT_CLASSIFICATION	0.07774045712776138	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999760097920778	WITHOUT_CLASSIFICATION	2.3990207922164172E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999215447942407	WITHOUT_CLASSIFICATION	7.845520575926703E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998912188432434	WITHOUT_CLASSIFICATION	1.0878115675659714E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9998970303371635	WITHOUT_CLASSIFICATION	1.0296966283654018E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999184772980894	WITHOUT_CLASSIFICATION	8.152270191065797E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9996010494566135	WITHOUT_CLASSIFICATION	3.989505433865358E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9996787473153769	WITHOUT_CLASSIFICATION	3.21252684623202E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.99996965937064	WITHOUT_CLASSIFICATION	3.034062936008488E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999946320606308	WITHOUT_CLASSIFICATION	5.367939369168075E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9995377653275475	WITHOUT_CLASSIFICATION	4.622346724526472E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999714479716978	WITHOUT_CLASSIFICATION	2.8552028302089483E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9998258029918783	WITHOUT_CLASSIFICATION	1.74197008121656E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998555517805691	WITHOUT_CLASSIFICATION	1.444482194309874E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999337193893051	WITHOUT_CLASSIFICATION	6.628061069498431E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999445381601596	WITHOUT_CLASSIFICATION	5.546183984046917E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999445381601596	WITHOUT_CLASSIFICATION	5.546183984046917E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9981354089668973	WITHOUT_CLASSIFICATION	0.001864591033102621	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999845985920756	WITHOUT_CLASSIFICATION	1.540140792436579E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999947649635335	WITHOUT_CLASSIFICATION	5.23503646656269E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999901177139523	WITHOUT_CLASSIFICATION	9.882286047721384E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992139824249495	WITHOUT_CLASSIFICATION	7.860175750504958E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992139824249495	WITHOUT_CLASSIFICATION	7.860175750504958E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999307856068003	WITHOUT_CLASSIFICATION	6.92143931998123E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999995261359145	WITHOUT_CLASSIFICATION	4.738640854377983E-7	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.998983012192811	WITHOUT_CLASSIFICATION	0.0010169878071890133	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9997757725083769	WITHOUT_CLASSIFICATION	2.2422749162309864E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999617741789448	WITHOUT_CLASSIFICATION	3.8225821055123014E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999649896849098	WITHOUT_CLASSIFICATION	3.501031509026388E-5	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999773373686491	WITHOUT_CLASSIFICATION	2.2662631350819963E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.998842554650215	WITHOUT_CLASSIFICATION	0.0011574453497850262	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999870504000187	WITHOUT_CLASSIFICATION	1.2949599981385345E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9998650737741467	WITHOUT_CLASSIFICATION	1.349262258532688E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998935143525637	WITHOUT_CLASSIFICATION	1.064856474363661E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9993929653276553	WITHOUT_CLASSIFICATION	6.070346723447679E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999909041396682	WITHOUT_CLASSIFICATION	9.095860331879614E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.999999957238585	WITHOUT_CLASSIFICATION	4.276141490911882E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999762657374999	WITHOUT_CLASSIFICATION	2.37342625002069E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.999928162433448	WITHOUT_CLASSIFICATION	7.183756655201802E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999522714201422	WITHOUT_CLASSIFICATION	4.772857985790183E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998831120668729	WITHOUT_CLASSIFICATION	1.1688793312721034E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9995862885686632	WITHOUT_CLASSIFICATION	4.137114313369294E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999609692285772	WITHOUT_CLASSIFICATION	3.903077142287544E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999920073511964	WITHOUT_CLASSIFICATION	7.992648803600548E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999971341474833	WITHOUT_CLASSIFICATION	2.865852516706603E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998655796454178	WITHOUT_CLASSIFICATION	1.3442035458230753E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999647250262751	WITHOUT_CLASSIFICATION	3.5274973724928536E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9993770108323964	WITHOUT_CLASSIFICATION	6.229891676035518E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.994932782135598	WITHOUT_CLASSIFICATION	0.005067217864402051	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9995230447516521	WITHOUT_CLASSIFICATION	4.7695524834788435E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9997973274866554	WITHOUT_CLASSIFICATION	2.0267251334458826E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999927944193543	WITHOUT_CLASSIFICATION	7.205580645720309E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999163345384064	WITHOUT_CLASSIFICATION	8.366546159353693E-5	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.999331169677379	WITHOUT_CLASSIFICATION	6.688303226209517E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999689272780815	WITHOUT_CLASSIFICATION	3.107272191839954E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999361218856858	WITHOUT_CLASSIFICATION	6.387811431427867E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.999853598169955	WITHOUT_CLASSIFICATION	1.4640183004503205E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9706560083748202	WITHOUT_CLASSIFICATION	0.029343991625179727	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9997270075615863	WITHOUT_CLASSIFICATION	2.7299243841376976E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994181272294915	WITHOUT_CLASSIFICATION	5.818727705084868E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9988611322773511	WITHOUT_CLASSIFICATION	0.0011388677226489483	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9991573488830567	WITHOUT_CLASSIFICATION	8.426511169432987E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999538761831414	WITHOUT_CLASSIFICATION	4.612381685866562E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999688828571058	WITHOUT_CLASSIFICATION	3.111714289412599E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999644712343768	WITHOUT_CLASSIFICATION	3.5528765623170856E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999923898678353	WITHOUT_CLASSIFICATION	7.610132164592685E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.999910774029853	WITHOUT_CLASSIFICATION	8.92259701471128E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9991498857049639	WITHOUT_CLASSIFICATION	8.501142950362597E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9991498857049639	WITHOUT_CLASSIFICATION	8.501142950362597E-4	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999828133622686	WITHOUT_CLASSIFICATION	1.718663773138966E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9990865824363404	WITHOUT_CLASSIFICATION	9.134175636596038E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9994167902772301	WITHOUT_CLASSIFICATION	5.832097227698273E-4	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9992404521534677	WITHOUT_CLASSIFICATION	7.595478465322702E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999961724739815	WITHOUT_CLASSIFICATION	3.8275260184698055E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999961724739815	WITHOUT_CLASSIFICATION	3.8275260184698055E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9975969501070105	WITHOUT_CLASSIFICATION	0.0024030498929893786	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9993804039274149	WITHOUT_CLASSIFICATION	6.195960725851144E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999528417298231	WITHOUT_CLASSIFICATION	4.71582701768867E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999875784293062	WITHOUT_CLASSIFICATION	1.2421570693839516E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999581973845633	WITHOUT_CLASSIFICATION	4.180261543673739E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999581973845633	WITHOUT_CLASSIFICATION	4.180261543673739E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999888768529758	WITHOUT_CLASSIFICATION	1.1123147024225797E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999888768529758	WITHOUT_CLASSIFICATION	1.1123147024225797E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.999958796055431	WITHOUT_CLASSIFICATION	4.12039445688686E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998533248266089	WITHOUT_CLASSIFICATION	1.4667517339104772E-4	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999756546084922	WITHOUT_CLASSIFICATION	2.4345391507757513E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999690646645705	WITHOUT_CLASSIFICATION	3.0935335429507413E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999017666492972	WITHOUT_CLASSIFICATION	9.823335070280419E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999019911234608	WITHOUT_CLASSIFICATION	9.800887653920115E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999526425179986	WITHOUT_CLASSIFICATION	4.735748200131089E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999434348978781	WITHOUT_CLASSIFICATION	5.656510212194325E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.999957954881734	WITHOUT_CLASSIFICATION	4.204511826599448E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.999872389909362	WITHOUT_CLASSIFICATION	1.27610090637925E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9957640348375405	WITHOUT_CLASSIFICATION	0.004235965162459515	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999852623763343	WITHOUT_CLASSIFICATION	1.4737623665639434E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999195905623253	WITHOUT_CLASSIFICATION	8.040943767480214E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9998048191503622	WITHOUT_CLASSIFICATION	1.9518084963782983E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999976241332243	WITHOUT_CLASSIFICATION	2.375866775663198E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998880384442254	WITHOUT_CLASSIFICATION	1.1196155577467028E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9998289283800667	WITHOUT_CLASSIFICATION	1.7107161993325787E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998795866573881	WITHOUT_CLASSIFICATION	1.2041334261200673E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999011217102469	WITHOUT_CLASSIFICATION	9.887828975312762E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999565216003747	WITHOUT_CLASSIFICATION	4.347839962527984E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9928420865450683	WITHOUT_CLASSIFICATION	0.007157913454931636	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999932033013197	WITHOUT_CLASSIFICATION	6.796698680276879E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999452714806158	WITHOUT_CLASSIFICATION	5.4728519384285473E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999701593763339	WITHOUT_CLASSIFICATION	2.9840623666162953E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997589427528888	WITHOUT_CLASSIFICATION	2.410572471111895E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999691345308565	WITHOUT_CLASSIFICATION	3.086546914358459E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999645100283763	WITHOUT_CLASSIFICATION	3.548997162376458E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9998287337075257	WITHOUT_CLASSIFICATION	1.712662924742153E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9994622707701629	WITHOUT_CLASSIFICATION	5.377292298369699E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999796703389761	WITHOUT_CLASSIFICATION	2.0329661023918485E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9997318929659963	WITHOUT_CLASSIFICATION	2.681070340037164E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998847857695375	WITHOUT_CLASSIFICATION	1.152142304624915E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9993286693273152	WITHOUT_CLASSIFICATION	6.713306726848767E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999870694891683	WITHOUT_CLASSIFICATION	1.2930510831693409E-4	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9982095554533308	WITHOUT_CLASSIFICATION	0.00179044454666924	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999835662148426	WITHOUT_CLASSIFICATION	1.6433785157345156E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9998282672930286	WITHOUT_CLASSIFICATION	1.717327069713434E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999908737889418	WITHOUT_CLASSIFICATION	9.126211058150099E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9517551158757052	WITHOUT_CLASSIFICATION	0.048244884124294764	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999940389704602	WITHOUT_CLASSIFICATION	5.961029539755518E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9997101555231743	WITHOUT_CLASSIFICATION	2.898444768257181E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9986894428248018	WITHOUT_CLASSIFICATION	0.001310557175198237	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999139025526607	WITHOUT_CLASSIFICATION	8.609744733927637E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9985223991262171	WITHOUT_CLASSIFICATION	0.001477600873782798	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997565035831496	WITHOUT_CLASSIFICATION	2.4349641685044506E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999709711247446	WITHOUT_CLASSIFICATION	2.902887525531816E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998717989435051	WITHOUT_CLASSIFICATION	1.2820105649495023E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999123583848697	WITHOUT_CLASSIFICATION	8.76416151303458E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9998978659058868	WITHOUT_CLASSIFICATION	1.0213409411312423E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999829204378925	WITHOUT_CLASSIFICATION	1.7079562107582313E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999829204378925	WITHOUT_CLASSIFICATION	1.7079562107582313E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999644371684571	WITHOUT_CLASSIFICATION	3.55628315429239E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999644371684571	WITHOUT_CLASSIFICATION	3.55628315429239E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994085871080983	WITHOUT_CLASSIFICATION	5.914128919017286E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994085871080983	WITHOUT_CLASSIFICATION	5.914128919017286E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999046961092672	WITHOUT_CLASSIFICATION	9.530389073271453E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999046961092672	WITHOUT_CLASSIFICATION	9.530389073271453E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999515970713225	WITHOUT_CLASSIFICATION	4.840292867751082E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999515970713225	WITHOUT_CLASSIFICATION	4.840292867751082E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999515970713225	WITHOUT_CLASSIFICATION	4.840292867751082E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999450935683597	WITHOUT_CLASSIFICATION	5.4906431640229194E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999320853647523	WITHOUT_CLASSIFICATION	6.79146352476963E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998411990345377	WITHOUT_CLASSIFICATION	1.5880096546226627E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998411990345377	WITHOUT_CLASSIFICATION	1.5880096546226627E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998411990345377	WITHOUT_CLASSIFICATION	1.5880096546226627E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998307554333067	WITHOUT_CLASSIFICATION	1.6924456669331218E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999592082461071	WITHOUT_CLASSIFICATION	4.079175389295397E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999074835590341	WITHOUT_CLASSIFICATION	9.251644096579981E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999763953450311	WITHOUT_CLASSIFICATION	2.3604654968856457E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999763953450311	WITHOUT_CLASSIFICATION	2.3604654968856457E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9995708218334743	WITHOUT_CLASSIFICATION	4.2917816652570236E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999991172974714	WITHOUT_CLASSIFICATION	8.827025287384543E-7	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999991172974714	WITHOUT_CLASSIFICATION	8.827025287384543E-7	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8132489878550893	DEFECT	0.18675101214491072	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998104377794741	WITHOUT_CLASSIFICATION	1.8956222052597479E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9998719320440658	WITHOUT_CLASSIFICATION	1.280679559343024E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9985127296423517	WITHOUT_CLASSIFICATION	0.0014872703576482545	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999677413656684	WITHOUT_CLASSIFICATION	3.2258634331595194E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999958797290153	WITHOUT_CLASSIFICATION	4.120270984751798E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9877589057281588	WITHOUT_CLASSIFICATION	0.012241094271841215	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.999224927824737	WITHOUT_CLASSIFICATION	7.750721752629187E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999636484686295	WITHOUT_CLASSIFICATION	3.6351531370500204E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999951848301007	WITHOUT_CLASSIFICATION	4.815169899252135E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999111967017765	WITHOUT_CLASSIFICATION	8.880329822347692E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9997953280758446	WITHOUT_CLASSIFICATION	2.0467192415541628E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997802600948437	WITHOUT_CLASSIFICATION	2.197399051563689E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9998851534794793	WITHOUT_CLASSIFICATION	1.1484652052076584E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997405504113986	WITHOUT_CLASSIFICATION	2.5944958860131084E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.5255466757455671	DEFECT	0.474453324254433	WITHOUT_CLASSIFICATION
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9691504352687026	WITHOUT_CLASSIFICATION	0.030849564731297307	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999826338086829	WITHOUT_CLASSIFICATION	1.7366191317035784E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999779305291364	WITHOUT_CLASSIFICATION	2.2069470863536728E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998959382490458	WITHOUT_CLASSIFICATION	1.0406175095418087E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997117699441612	WITHOUT_CLASSIFICATION	2.8823005583874655E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999465454330948	WITHOUT_CLASSIFICATION	5.3454566905143245E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999615888546762	WITHOUT_CLASSIFICATION	3.841114532371484E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9980271756157001	WITHOUT_CLASSIFICATION	0.0019728243842998903	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9578776496548056	WITHOUT_CLASSIFICATION	0.042122350345194355	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9998080344502781	WITHOUT_CLASSIFICATION	1.9196554972180304E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999994884355451	WITHOUT_CLASSIFICATION	5.115644549951161E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999300149375415	WITHOUT_CLASSIFICATION	6.998506245853325E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999850729333533	WITHOUT_CLASSIFICATION	1.4927066646632226E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9996715772715232	WITHOUT_CLASSIFICATION	3.2842272847676126E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999415605763391	WITHOUT_CLASSIFICATION	5.843942366086924E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999948276304305	WITHOUT_CLASSIFICATION	5.172369569619677E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998512524033534	WITHOUT_CLASSIFICATION	1.487475966466593E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998512524033534	WITHOUT_CLASSIFICATION	1.487475966466593E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998512524033534	WITHOUT_CLASSIFICATION	1.487475966466593E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998512524033534	WITHOUT_CLASSIFICATION	1.487475966466593E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999956536860655	WITHOUT_CLASSIFICATION	4.346313934429711E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9998212639301722	WITHOUT_CLASSIFICATION	1.787360698277289E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999221550522643	WITHOUT_CLASSIFICATION	7.784494773562909E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999221550522643	WITHOUT_CLASSIFICATION	7.784494773562909E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999975766284631	WITHOUT_CLASSIFICATION	2.4233715368987724E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998350077965379	WITHOUT_CLASSIFICATION	1.649922034621347E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9996683888172456	WITHOUT_CLASSIFICATION	3.316111827544065E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999946162383251	WITHOUT_CLASSIFICATION	5.38376167491019E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.99701866515777	WITHOUT_CLASSIFICATION	0.0029813348422299654	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9989273274531796	WITHOUT_CLASSIFICATION	0.001072672546820453	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999398446553991	WITHOUT_CLASSIFICATION	6.015534460091574E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999904041737389	WITHOUT_CLASSIFICATION	9.595826261129214E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999904041737389	WITHOUT_CLASSIFICATION	9.595826261129214E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999904041737389	WITHOUT_CLASSIFICATION	9.595826261129214E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999904041737389	WITHOUT_CLASSIFICATION	9.595826261129214E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999923320200144	WITHOUT_CLASSIFICATION	7.667979985633935E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995280724979575	WITHOUT_CLASSIFICATION	4.7192750204242784E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995280724979575	WITHOUT_CLASSIFICATION	4.7192750204242784E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995280724979575	WITHOUT_CLASSIFICATION	4.7192750204242784E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9997134376001311	WITHOUT_CLASSIFICATION	2.865623998688791E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.999973710462435	WITHOUT_CLASSIFICATION	2.6289537564945684E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999899312736745	WITHOUT_CLASSIFICATION	1.0068726325424543E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9989622878037857	WITHOUT_CLASSIFICATION	0.0010377121962142535	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9966908078995097	WITHOUT_CLASSIFICATION	0.0033091921004902206	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9993686242572339	WITHOUT_CLASSIFICATION	6.313757427660919E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9993686242572339	WITHOUT_CLASSIFICATION	6.313757427660919E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9997837832899895	WITHOUT_CLASSIFICATION	2.162167100105128E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9997837832899895	WITHOUT_CLASSIFICATION	2.162167100105128E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999978004701783	WITHOUT_CLASSIFICATION	2.1995298217260812E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.999999027125247	WITHOUT_CLASSIFICATION	9.728747530159613E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998297811892066	WITHOUT_CLASSIFICATION	1.7021881079331593E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9848573234052023	WITHOUT_CLASSIFICATION	0.015142676594797691	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999147101188242	WITHOUT_CLASSIFICATION	8.528988117592495E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999950189632054	WITHOUT_CLASSIFICATION	4.981036794527237E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998458440183748	WITHOUT_CLASSIFICATION	1.5415598162516655E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9998958071362005	WITHOUT_CLASSIFICATION	1.0419286379944414E-4	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9993430802582126	WITHOUT_CLASSIFICATION	6.569197417872478E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999945254734334	WITHOUT_CLASSIFICATION	5.474526566631147E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999945254734334	WITHOUT_CLASSIFICATION	5.474526566631147E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999818722746768	WITHOUT_CLASSIFICATION	1.812772532317396E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999818722746768	WITHOUT_CLASSIFICATION	1.812772532317396E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9993292875657181	WITHOUT_CLASSIFICATION	6.7071243428196E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9996228039170686	WITHOUT_CLASSIFICATION	3.771960829314371E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999385933071765	WITHOUT_CLASSIFICATION	6.140669282355265E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9989828911680446	WITHOUT_CLASSIFICATION	0.0010171088319554608	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9989828911680446	WITHOUT_CLASSIFICATION	0.0010171088319554608	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9989828911680446	WITHOUT_CLASSIFICATION	0.0010171088319554608	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999608309500199	WITHOUT_CLASSIFICATION	3.916904998008631E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9994366205236948	WITHOUT_CLASSIFICATION	5.633794763052776E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9990913810129245	WITHOUT_CLASSIFICATION	9.086189870755138E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9995671428319572	WITHOUT_CLASSIFICATION	4.3285716804265426E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9971407500810662	WITHOUT_CLASSIFICATION	0.0028592499189338217	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999632614427412	WITHOUT_CLASSIFICATION	3.673855725871552E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9838428128560713	WITHOUT_CLASSIFICATION	0.016157187143928744	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998622943939746	WITHOUT_CLASSIFICATION	1.377056060255558E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998371809726264	WITHOUT_CLASSIFICATION	1.6281902737364914E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999671643251186	WITHOUT_CLASSIFICATION	3.283567488150181E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999306954098729	WITHOUT_CLASSIFICATION	6.93045901271472E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.999487874455619	WITHOUT_CLASSIFICATION	5.121255443809456E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999715729133518	WITHOUT_CLASSIFICATION	2.842708664821311E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9994639133311867	WITHOUT_CLASSIFICATION	5.36086668813434E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9579574264546433	WITHOUT_CLASSIFICATION	0.042042573545356655	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9977342145706266	WITHOUT_CLASSIFICATION	0.002265785429373379	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.999631316292778	WITHOUT_CLASSIFICATION	3.6868370722192894E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999581938467184	WITHOUT_CLASSIFICATION	4.180615328169003E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999650054613706	WITHOUT_CLASSIFICATION	3.499453862939588E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999232966388536	WITHOUT_CLASSIFICATION	7.670336114643547E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999589086489457	WITHOUT_CLASSIFICATION	4.1091351054368053E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999569953376979	WITHOUT_CLASSIFICATION	4.300466230203096E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9881391131652507	WITHOUT_CLASSIFICATION	0.01186088683474932	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9984782678015677	WITHOUT_CLASSIFICATION	0.0015217321984324153	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999415211385735	WITHOUT_CLASSIFICATION	5.847886142644524E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999851734540541	WITHOUT_CLASSIFICATION	1.4826545945839806E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9702174335679805	WITHOUT_CLASSIFICATION	0.029782566432019483	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.7590348284346464	WITHOUT_CLASSIFICATION	0.24096517156535371	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9997364483505327	WITHOUT_CLASSIFICATION	2.635516494673769E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999197002981349	WITHOUT_CLASSIFICATION	8.029970186506765E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999205261779646	WITHOUT_CLASSIFICATION	7.947382203539585E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999400085196396	WITHOUT_CLASSIFICATION	5.999148036037864E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9996935541627132	WITHOUT_CLASSIFICATION	3.064458372867822E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9971175518178965	WITHOUT_CLASSIFICATION	0.002882448182103574	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9910380767324818	WITHOUT_CLASSIFICATION	0.00896192326751832	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9994537931353947	WITHOUT_CLASSIFICATION	5.462068646053087E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9994537931353947	WITHOUT_CLASSIFICATION	5.462068646053087E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9973719787191426	WITHOUT_CLASSIFICATION	0.0026280212808573807	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999768440309944	WITHOUT_CLASSIFICATION	2.3155969005633218E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999768440309944	WITHOUT_CLASSIFICATION	2.3155969005633218E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9997175318546446	WITHOUT_CLASSIFICATION	2.824681453554164E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999821414209423	WITHOUT_CLASSIFICATION	1.7858579057604998E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998537883617235	WITHOUT_CLASSIFICATION	1.4621163827658614E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999570552574594	WITHOUT_CLASSIFICATION	4.294474254064242E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999570552574594	WITHOUT_CLASSIFICATION	4.294474254064242E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999923977587194	WITHOUT_CLASSIFICATION	7.602241280528698E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997061526601166	WITHOUT_CLASSIFICATION	2.938473398833156E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997061526601166	WITHOUT_CLASSIFICATION	2.938473398833156E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9995189297980118	WITHOUT_CLASSIFICATION	4.810702019882015E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.7798669156942382	WITHOUT_CLASSIFICATION	0.2201330843057619	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9997188967058431	WITHOUT_CLASSIFICATION	2.8110329415690006E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999777383652264	WITHOUT_CLASSIFICATION	2.226163477356016E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998529358274911	WITHOUT_CLASSIFICATION	1.470641725088385E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.999825222517978	WITHOUT_CLASSIFICATION	1.7477748202202896E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999792786590843	WITHOUT_CLASSIFICATION	2.0721340915664964E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999710655548045	WITHOUT_CLASSIFICATION	2.8934445195543097E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9998499318251505	WITHOUT_CLASSIFICATION	1.5006817484944712E-4	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9990654433184599	WITHOUT_CLASSIFICATION	9.345566815401379E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9988769042880189	WITHOUT_CLASSIFICATION	0.0011230957119810962	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.999934921232605	WITHOUT_CLASSIFICATION	6.507876739495981E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999712964684491	WITHOUT_CLASSIFICATION	2.870353155100893E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9998838907632985	WITHOUT_CLASSIFICATION	1.1610923670150583E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9997733000139553	WITHOUT_CLASSIFICATION	2.2669998604468424E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999699584372017	WITHOUT_CLASSIFICATION	3.0041562798245845E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9996424354235073	WITHOUT_CLASSIFICATION	3.5756457649267016E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9950876102750044	WITHOUT_CLASSIFICATION	0.004912389724995663	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999663901798226	WITHOUT_CLASSIFICATION	3.36098201774226E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999663901798226	WITHOUT_CLASSIFICATION	3.36098201774226E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9997455883005867	WITHOUT_CLASSIFICATION	2.544116994133321E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999563705733715	WITHOUT_CLASSIFICATION	4.3629426628490285E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9996125018907661	WITHOUT_CLASSIFICATION	3.8749810923397284E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9994783413414946	WITHOUT_CLASSIFICATION	5.216586585053791E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999375283745755	WITHOUT_CLASSIFICATION	6.247162542448427E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999375283745755	WITHOUT_CLASSIFICATION	6.247162542448427E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999375283745755	WITHOUT_CLASSIFICATION	6.247162542448427E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999863422287446	WITHOUT_CLASSIFICATION	1.3657771255294975E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.999560724900681	WITHOUT_CLASSIFICATION	4.392750993189394E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.99997669067987	WITHOUT_CLASSIFICATION	2.330932013001174E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.999994645271945	WITHOUT_CLASSIFICATION	5.354728054928334E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999933926476716	WITHOUT_CLASSIFICATION	6.6073523283027265E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999539063019846	WITHOUT_CLASSIFICATION	4.609369801550565E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9997868413108483	WITHOUT_CLASSIFICATION	2.1315868915176844E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9987047199485869	WITHOUT_CLASSIFICATION	0.0012952800514131457	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998609767369616	WITHOUT_CLASSIFICATION	1.3902326303840773E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999909731921581	WITHOUT_CLASSIFICATION	9.02680784181863E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999570693636735	WITHOUT_CLASSIFICATION	4.293063632665828E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999779670688107	WITHOUT_CLASSIFICATION	2.2032931189350063E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.948651138323908	WITHOUT_CLASSIFICATION	0.051348861676091984	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998401666460769	WITHOUT_CLASSIFICATION	1.5983335392319475E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999918265190628	WITHOUT_CLASSIFICATION	8.173480937115681E-6	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.99984163776946	WITHOUT_CLASSIFICATION	1.583622305400932E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999891500984142	WITHOUT_CLASSIFICATION	1.0849901585796523E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999882684806425	WITHOUT_CLASSIFICATION	1.1731519357574716E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999631620596792	WITHOUT_CLASSIFICATION	3.6837940320795966E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9345308538265799	WITHOUT_CLASSIFICATION	0.06546914617342026	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9910502772819281	DEFECT	0.008949722718071904	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9375719717270626	WITHOUT_CLASSIFICATION	0.06242802827293744	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.992925653779095	DEFECT	0.007074346220905022	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9654205335935978	DEFECT	0.03457946640640212	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9891462956211281	WITHOUT_CLASSIFICATION	0.010853704378871966	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9407076461884237	WITHOUT_CLASSIFICATION	0.05929235381157624	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9250601931068451	WITHOUT_CLASSIFICATION	0.07493980689315487	DEFECT
// FIXME: not correct exception	DEFECT	0.5725224008776509	WITHOUT_CLASSIFICATION	0.42747759912234906	DEFECT
// XXX actually only on windows...	DEFECT	0.9979652005661687	WITHOUT_CLASSIFICATION	0.002034799433831352	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9897889836085674	WITHOUT_CLASSIFICATION	0.010211016391432584	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.7149728880467565	WITHOUT_CLASSIFICATION	0.28502711195324354	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9924265098369454	WITHOUT_CLASSIFICATION	0.007573490163054718	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9373270456462728	DEFECT	0.06267295435372724	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9485543660177523	WITHOUT_CLASSIFICATION	0.05144563398224768	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9756943136094619	WITHOUT_CLASSIFICATION	0.024305686390538095	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9756943136094619	WITHOUT_CLASSIFICATION	0.024305686390538095	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.8718924011030242	WITHOUT_CLASSIFICATION	0.12810759889697573	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9960941592298149	WITHOUT_CLASSIFICATION	0.0039058407701851017	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9694030249847808	WITHOUT_CLASSIFICATION	0.03059697501521917	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998786433714087	WITHOUT_CLASSIFICATION	1.2135662859122602E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998786433714087	WITHOUT_CLASSIFICATION	1.2135662859122602E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.7118437078323688	WITHOUT_CLASSIFICATION	0.2881562921676311	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9492786902465938	WITHOUT_CLASSIFICATION	0.05072130975340611	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9563095376619338	WITHOUT_CLASSIFICATION	0.043690462338066116	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7602597218803598	WITHOUT_CLASSIFICATION	0.23974027811964016	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.7646051960151046	WITHOUT_CLASSIFICATION	0.23539480398489546	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6367072961167624	WITHOUT_CLASSIFICATION	0.36329270388323753	DEFECT
// TODO: proper sign	DEFECT	0.9610342234288642	WITHOUT_CLASSIFICATION	0.0389657765711358	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.8030944449464266	DEFECT	0.1969055550535734	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.5900192439549802	WITHOUT_CLASSIFICATION	0.40998075604501966	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.5095378618895801	WITHOUT_CLASSIFICATION	0.4904621381104199	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8579988440030536	WITHOUT_CLASSIFICATION	0.14200115599694632	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.6177761054548384	WITHOUT_CLASSIFICATION	0.38222389454516165	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.6970624967641329	DEFECT	0.30293750323586716	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9855540966861206	WITHOUT_CLASSIFICATION	0.014445903313879394	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.8652265166477868	WITHOUT_CLASSIFICATION	0.13477348335221323	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9501749606554623	WITHOUT_CLASSIFICATION	0.049825039344537775	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9932405767468184	WITHOUT_CLASSIFICATION	0.006759423253181544	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.594592198372962	WITHOUT_CLASSIFICATION	0.40540780162703804	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.983754493164714	WITHOUT_CLASSIFICATION	0.01624550683528611	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9996217681693528	WITHOUT_CLASSIFICATION	3.7823183064722947E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.933896692998354	WITHOUT_CLASSIFICATION	0.06610330700164611	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.933896692998354	WITHOUT_CLASSIFICATION	0.06610330700164611	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9753709890168348	WITHOUT_CLASSIFICATION	0.024629010983165257	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9753164709553174	WITHOUT_CLASSIFICATION	0.024683529044682632	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.8594632282888099	DEFECT	0.14053677171118997	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9960888024753105	WITHOUT_CLASSIFICATION	0.003911197524689593	DEFECT
// FIXME: This is wrong	DEFECT	0.82305593618573	WITHOUT_CLASSIFICATION	0.1769440638142699	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.973902831641218	WITHOUT_CLASSIFICATION	0.026097168358782015	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999236050361651	WITHOUT_CLASSIFICATION	7.639496383496614E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5340887597708975	WITHOUT_CLASSIFICATION	0.4659112402291025	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9972194373779762	WITHOUT_CLASSIFICATION	0.0027805626220237076	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.992810428248013	WITHOUT_CLASSIFICATION	0.007189571751986954	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9694216320020794	DEFECT	0.030578367997920578	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9305876431585687	DEFECT	0.06941235684143128	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9305876431585687	DEFECT	0.06941235684143128	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.8015064170738094	WITHOUT_CLASSIFICATION	0.19849358292619065	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9974264745794608	WITHOUT_CLASSIFICATION	0.0025735254205391956	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.997654358369475	WITHOUT_CLASSIFICATION	0.002345641630524925	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9748367513185656	DEFECT	0.025163248681434394	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9599559974214136	DEFECT	0.040044002578586396	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9536334404980378	WITHOUT_CLASSIFICATION	0.04636655950196235	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.6748303291444006	WITHOUT_CLASSIFICATION	0.32516967085559945	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9753709890168348	WITHOUT_CLASSIFICATION	0.024629010983165257	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9984922356378341	WITHOUT_CLASSIFICATION	0.001507764362165964	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8583507798863071	WITHOUT_CLASSIFICATION	0.14164922011369288	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.7491492922111873	WITHOUT_CLASSIFICATION	0.2508507077888127	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7602597218803598	WITHOUT_CLASSIFICATION	0.23974027811964016	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9327192007858438	DEFECT	0.06728079921415617	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8277557382310617	DEFECT	0.17224426176893828	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9501749606554623	WITHOUT_CLASSIFICATION	0.049825039344537775	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9994936255133624	WITHOUT_CLASSIFICATION	5.063744866376225E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9694216320020794	DEFECT	0.030578367997920578	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.5144547046201822	DEFECT	0.48554529537981783	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// TODO: don't require pop	DEFECT	0.9348476875508528	WITHOUT_CLASSIFICATION	0.06515231244914722	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5340887597708975	WITHOUT_CLASSIFICATION	0.4659112402291025	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9537106827906827	WITHOUT_CLASSIFICATION	0.0462893172093173	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9305876431585687	DEFECT	0.06941235684143128	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9305876431585687	DEFECT	0.06941235684143128	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998962339724556	WITHOUT_CLASSIFICATION	1.0376602754439311E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9795203822842175	WITHOUT_CLASSIFICATION	0.020479617715782626	DEFECT
