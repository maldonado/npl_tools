// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999947857902126	WITHOUT_CLASSIFICATION	5.214209787430643E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.999919092690637	WITHOUT_CLASSIFICATION	8.090730936299161E-5	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9997773235283394	WITHOUT_CLASSIFICATION	2.2267647166059512E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999786174157473	WITHOUT_CLASSIFICATION	2.1382584252722722E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999786174157473	WITHOUT_CLASSIFICATION	2.1382584252722722E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998412091942896	WITHOUT_CLASSIFICATION	1.5879080571031882E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999686156138776	WITHOUT_CLASSIFICATION	3.138438612233215E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9998455965294533	WITHOUT_CLASSIFICATION	1.544034705466876E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9997742713969912	WITHOUT_CLASSIFICATION	2.257286030088113E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.999968003168069	WITHOUT_CLASSIFICATION	3.199683193094688E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999433303404186	WITHOUT_CLASSIFICATION	5.6669659581342956E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999433303404186	WITHOUT_CLASSIFICATION	5.6669659581342956E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999433303404186	WITHOUT_CLASSIFICATION	5.6669659581342956E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999433303404186	WITHOUT_CLASSIFICATION	5.6669659581342956E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9993012934365026	WITHOUT_CLASSIFICATION	6.987065634973522E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999081810379481	WITHOUT_CLASSIFICATION	9.181896205186707E-5	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999196777691913	WITHOUT_CLASSIFICATION	8.032223080875807E-5	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999103885451122	WITHOUT_CLASSIFICATION	8.961145488788332E-5	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999314674361137	WITHOUT_CLASSIFICATION	6.853256388628452E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999746254614388	WITHOUT_CLASSIFICATION	2.53745385612598E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999828102659694	WITHOUT_CLASSIFICATION	1.7189734030557102E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999843384087579	WITHOUT_CLASSIFICATION	1.566159124216363E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999985063287644	WITHOUT_CLASSIFICATION	1.4936712356027826E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9988000338675179	WITHOUT_CLASSIFICATION	0.0011999661324820045	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9998612137478108	WITHOUT_CLASSIFICATION	1.387862521891686E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999901283262139	WITHOUT_CLASSIFICATION	9.871673785998911E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.999712764900068	WITHOUT_CLASSIFICATION	2.872350999319985E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999637854383919	WITHOUT_CLASSIFICATION	3.6214561608020514E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999287334383921	WITHOUT_CLASSIFICATION	7.126656160790544E-5	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9994080485837696	WITHOUT_CLASSIFICATION	5.919514162303382E-4	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999936515554665	WITHOUT_CLASSIFICATION	6.348444533555637E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999433303404186	WITHOUT_CLASSIFICATION	5.6669659581342956E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.999909182767659	WITHOUT_CLASSIFICATION	9.081723234090741E-5	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999972508426833	WITHOUT_CLASSIFICATION	2.7491573165638457E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999074874390573	WITHOUT_CLASSIFICATION	9.25125609425821E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999196004591923	WITHOUT_CLASSIFICATION	8.039954080774906E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999449157511487	WITHOUT_CLASSIFICATION	5.5084248851154625E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999158850607804	WITHOUT_CLASSIFICATION	8.411493921960555E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9998726680138056	WITHOUT_CLASSIFICATION	1.2733198619437712E-4	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999920388947836	WITHOUT_CLASSIFICATION	7.961105216406748E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999498960499219	WITHOUT_CLASSIFICATION	5.010395007799972E-5	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998503966298019	WITHOUT_CLASSIFICATION	1.4960337019796974E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9977733938026729	WITHOUT_CLASSIFICATION	0.0022266061973271194	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999192868733227	WITHOUT_CLASSIFICATION	8.071312667738241E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9997765522466985	WITHOUT_CLASSIFICATION	2.234477533014043E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999440610140456	WITHOUT_CLASSIFICATION	5.593898595428429E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9997581896162696	WITHOUT_CLASSIFICATION	2.4181038373047287E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9998855020891825	WITHOUT_CLASSIFICATION	1.1449791081749908E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999089805053316	WITHOUT_CLASSIFICATION	9.101949466842855E-5	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9966462159926468	WITHOUT_CLASSIFICATION	0.003353784007353178	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999345849433294	WITHOUT_CLASSIFICATION	6.54150566706103E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9996718494696023	WITHOUT_CLASSIFICATION	3.281505303976481E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999940899173148	WITHOUT_CLASSIFICATION	5.910082685354724E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9998917555545285	WITHOUT_CLASSIFICATION	1.082444454715765E-4	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999774084862251	WITHOUT_CLASSIFICATION	2.259151377495487E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999497286662369	WITHOUT_CLASSIFICATION	5.027133376306441E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9994793159007179	WITHOUT_CLASSIFICATION	5.206840992821059E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9996966171590257	WITHOUT_CLASSIFICATION	3.033828409742644E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998522481194559	WITHOUT_CLASSIFICATION	1.477518805441119E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9994337254996152	WITHOUT_CLASSIFICATION	5.662745003848087E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999448435287551	WITHOUT_CLASSIFICATION	5.515647124488141E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999939098001935	WITHOUT_CLASSIFICATION	6.090199806462199E-6	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9992489707605307	WITHOUT_CLASSIFICATION	7.510292394692859E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999368825735127	WITHOUT_CLASSIFICATION	6.311742648735991E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9998968703842752	WITHOUT_CLASSIFICATION	1.0312961572480316E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999259512689102	WITHOUT_CLASSIFICATION	7.404873108982656E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999626839725311	WITHOUT_CLASSIFICATION	3.731602746888618E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998019514563775	WITHOUT_CLASSIFICATION	1.98048543622459E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9995864373434716	WITHOUT_CLASSIFICATION	4.13562656528364E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9995864373434716	WITHOUT_CLASSIFICATION	4.13562656528364E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999910706547163	WITHOUT_CLASSIFICATION	8.929345283741356E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9997094039629353	WITHOUT_CLASSIFICATION	2.905960370647409E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999710764327484	WITHOUT_CLASSIFICATION	2.8923567251668097E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9987834352101537	WITHOUT_CLASSIFICATION	0.0012165647898463366	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9992724297568896	WITHOUT_CLASSIFICATION	7.275702431105335E-4	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9895796316634503	WITHOUT_CLASSIFICATION	0.010420368336549655	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998384549621647	WITHOUT_CLASSIFICATION	1.6154503783517377E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9998263902390807	WITHOUT_CLASSIFICATION	1.7360976091925257E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999443440742104	WITHOUT_CLASSIFICATION	5.565592578967903E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.999981050025103	WITHOUT_CLASSIFICATION	1.8949974897003932E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999998389631902	WITHOUT_CLASSIFICATION	1.6103680977088065E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999924754709455	WITHOUT_CLASSIFICATION	7.524529054546376E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999936798822526	WITHOUT_CLASSIFICATION	6.320117747404756E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999936798822526	WITHOUT_CLASSIFICATION	6.320117747404756E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.999936798822526	WITHOUT_CLASSIFICATION	6.320117747404756E-5	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999617988335598	WITHOUT_CLASSIFICATION	3.8201166440241434E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999841553660055	WITHOUT_CLASSIFICATION	1.5844633994501476E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999838606992173	WITHOUT_CLASSIFICATION	1.6139300782742472E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.990559716177558	WITHOUT_CLASSIFICATION	0.009440283822441909	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9995878116415396	WITHOUT_CLASSIFICATION	4.121883584603581E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999963067760265	WITHOUT_CLASSIFICATION	3.693223973648344E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9993863020330296	WITHOUT_CLASSIFICATION	6.136979669703838E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9998986114528495	WITHOUT_CLASSIFICATION	1.0138854715044705E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999626176004716	WITHOUT_CLASSIFICATION	3.73823995283654E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999836823866068	WITHOUT_CLASSIFICATION	1.6317613393141252E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999923433178001	WITHOUT_CLASSIFICATION	7.656682199901454E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999923433178001	WITHOUT_CLASSIFICATION	7.656682199901454E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.999827218050606	WITHOUT_CLASSIFICATION	1.7278194939387965E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9998015946384837	WITHOUT_CLASSIFICATION	1.9840536151625006E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999517370945761	WITHOUT_CLASSIFICATION	4.8262905423982635E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998578308325868	WITHOUT_CLASSIFICATION	1.4216916741322308E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9997593238454362	WITHOUT_CLASSIFICATION	2.4067615456380544E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999697741462455	WITHOUT_CLASSIFICATION	3.0225853754410433E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999855699286689	WITHOUT_CLASSIFICATION	1.4430071331139614E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999279426392058	WITHOUT_CLASSIFICATION	7.205736079424534E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999732454133239	WITHOUT_CLASSIFICATION	2.6754586676123526E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998791732447448	WITHOUT_CLASSIFICATION	1.2082675525512672E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9964558795981088	WITHOUT_CLASSIFICATION	0.0035441204018913037	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999921340578648	WITHOUT_CLASSIFICATION	7.8659421353115E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9998471549253284	WITHOUT_CLASSIFICATION	1.5284507467159232E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.999717648545125	WITHOUT_CLASSIFICATION	2.823514548750672E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997460810416303	WITHOUT_CLASSIFICATION	2.539189583696227E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9985717550869786	WITHOUT_CLASSIFICATION	0.0014282449130214776	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9996727070938136	WITHOUT_CLASSIFICATION	3.272929061863927E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9998606144529012	WITHOUT_CLASSIFICATION	1.3938554709871077E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999987582203273	WITHOUT_CLASSIFICATION	1.2417796726885297E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828964151354	WITHOUT_CLASSIFICATION	1.7103584864671276E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9996880632081925	WITHOUT_CLASSIFICATION	3.1193679180753237E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9991336265841319	WITHOUT_CLASSIFICATION	8.663734158682726E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.999988203949277	WITHOUT_CLASSIFICATION	1.1796050722897177E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9997849690938546	WITHOUT_CLASSIFICATION	2.1503090614538427E-4	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9994575239351975	WITHOUT_CLASSIFICATION	5.424760648026097E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999922289388625	WITHOUT_CLASSIFICATION	7.771061137392365E-6	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999752502374557	WITHOUT_CLASSIFICATION	2.4749762544259286E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999862186931253	WITHOUT_CLASSIFICATION	1.3781306874617001E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9998863194877382	WITHOUT_CLASSIFICATION	1.1368051226177366E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999396996530452	WITHOUT_CLASSIFICATION	6.030034695483685E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999718773974603	WITHOUT_CLASSIFICATION	2.8122602539643786E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9997098524707165	WITHOUT_CLASSIFICATION	2.9014752928343255E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999593912072268	WITHOUT_CLASSIFICATION	4.0608792773197866E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.999893458858966	WITHOUT_CLASSIFICATION	1.0654114103392053E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.999847619299512	WITHOUT_CLASSIFICATION	1.523807004879915E-4	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.99997711108005	WITHOUT_CLASSIFICATION	2.288891994992578E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9998825670925989	WITHOUT_CLASSIFICATION	1.1743290740100612E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999779551014752	WITHOUT_CLASSIFICATION	2.2044898524733795E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997747871365265	WITHOUT_CLASSIFICATION	2.2521286347351266E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999853898985649	WITHOUT_CLASSIFICATION	1.4610101435148168E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9994299936237416	WITHOUT_CLASSIFICATION	5.700063762583178E-4	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998688734578892	WITHOUT_CLASSIFICATION	1.3112654211076146E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999703243025017	WITHOUT_CLASSIFICATION	2.967569749834646E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9949809691305803	WITHOUT_CLASSIFICATION	0.005019030869419701	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999299552204453	WITHOUT_CLASSIFICATION	7.004477955474684E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998960184087236	WITHOUT_CLASSIFICATION	1.0398159127653586E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999957869352962	WITHOUT_CLASSIFICATION	4.213064703673657E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999399021451825	WITHOUT_CLASSIFICATION	6.0097854817509025E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9997411591533625	WITHOUT_CLASSIFICATION	2.5884084663745685E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999730440441683	WITHOUT_CLASSIFICATION	2.695595583178214E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9998700864908501	WITHOUT_CLASSIFICATION	1.299135091498459E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999651442676063	WITHOUT_CLASSIFICATION	3.485573239370248E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9995837946214363	WITHOUT_CLASSIFICATION	4.16205378563701E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9987438417074107	WITHOUT_CLASSIFICATION	0.0012561582925891854	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.999911277562666	WITHOUT_CLASSIFICATION	8.87224373340719E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999325781276427	WITHOUT_CLASSIFICATION	6.742187235731941E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999450929768201	WITHOUT_CLASSIFICATION	5.490702317982017E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999372729500786	WITHOUT_CLASSIFICATION	6.272704992140064E-5	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998804652614036	WITHOUT_CLASSIFICATION	1.1953473859632135E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9990763955220259	WITHOUT_CLASSIFICATION	9.236044779740058E-4	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999546829153838	WITHOUT_CLASSIFICATION	4.5317084616111345E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9993096811576788	WITHOUT_CLASSIFICATION	6.903188423211033E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9998942878750904	WITHOUT_CLASSIFICATION	1.057121249096871E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999917372768573	WITHOUT_CLASSIFICATION	8.262723142755129E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998655687524572	WITHOUT_CLASSIFICATION	1.3443124754283512E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998655687524572	WITHOUT_CLASSIFICATION	1.3443124754283512E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999958198208333	WITHOUT_CLASSIFICATION	4.180179166639143E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999800137778847	WITHOUT_CLASSIFICATION	1.998622211524456E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999340807313122	WITHOUT_CLASSIFICATION	6.591926868786989E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9996274530855281	WITHOUT_CLASSIFICATION	3.725469144717793E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999505598333212	WITHOUT_CLASSIFICATION	4.944016667874755E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9994712960795568	WITHOUT_CLASSIFICATION	5.287039204432706E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999178153976117	WITHOUT_CLASSIFICATION	8.218460238822101E-5	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999942287048132	WITHOUT_CLASSIFICATION	5.7712951866675045E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999930875301892	WITHOUT_CLASSIFICATION	6.91246981077829E-6	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999992274404441	WITHOUT_CLASSIFICATION	7.725595558835611E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9998711308753535	WITHOUT_CLASSIFICATION	1.288691246465699E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9991824217336343	WITHOUT_CLASSIFICATION	8.175782663657447E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9829928010452998	WITHOUT_CLASSIFICATION	0.017007198954700136	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9998447333978628	WITHOUT_CLASSIFICATION	1.5526660213706556E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999290672985423	WITHOUT_CLASSIFICATION	7.093270145775926E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999725026864514	WITHOUT_CLASSIFICATION	2.749731354859609E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9998323666732115	WITHOUT_CLASSIFICATION	1.676333267884383E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999714141690751	WITHOUT_CLASSIFICATION	2.8585830924955556E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999999193607937	WITHOUT_CLASSIFICATION	8.063920629726722E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999526415523626	WITHOUT_CLASSIFICATION	4.735844763725802E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975635048024	WITHOUT_CLASSIFICATION	2.436495197590085E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975635048024	WITHOUT_CLASSIFICATION	2.436495197590085E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999510758651529	WITHOUT_CLASSIFICATION	4.892413484716549E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999920280076957	WITHOUT_CLASSIFICATION	7.971992304355705E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999869987959353	WITHOUT_CLASSIFICATION	1.3001204064699012E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.999305771811414	WITHOUT_CLASSIFICATION	6.94228188585937E-4	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9994888779666075	WITHOUT_CLASSIFICATION	5.111220333925928E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999323905042945	WITHOUT_CLASSIFICATION	6.76094957056064E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999323905042945	WITHOUT_CLASSIFICATION	6.76094957056064E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9387254798910485	WITHOUT_CLASSIFICATION	0.06127452010895159	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999894354068408	WITHOUT_CLASSIFICATION	1.0564593159300236E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999894354068408	WITHOUT_CLASSIFICATION	1.0564593159300236E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9996513404056669	WITHOUT_CLASSIFICATION	3.486595943330057E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995607401985542	WITHOUT_CLASSIFICATION	4.3925980144576257E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995607401985542	WITHOUT_CLASSIFICATION	4.3925980144576257E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999795961482978	WITHOUT_CLASSIFICATION	2.0403851702260667E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999795961482978	WITHOUT_CLASSIFICATION	2.0403851702260667E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999560703133528	WITHOUT_CLASSIFICATION	4.392968664727669E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999266842593492	WITHOUT_CLASSIFICATION	7.331574065082593E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999916327170588	WITHOUT_CLASSIFICATION	8.367282941121322E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999066439163509	WITHOUT_CLASSIFICATION	9.335608364916869E-5	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9998632515941573	WITHOUT_CLASSIFICATION	1.3674840584257012E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999602546426609	WITHOUT_CLASSIFICATION	3.974535733896218E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999168504597714	WITHOUT_CLASSIFICATION	8.314954022858977E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999602546426609	WITHOUT_CLASSIFICATION	3.974535733896218E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9981008951119594	WITHOUT_CLASSIFICATION	0.0018991048880405545	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999706619380323	WITHOUT_CLASSIFICATION	2.933806196763059E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999536795448456	WITHOUT_CLASSIFICATION	4.632045515438388E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999640680718127	WITHOUT_CLASSIFICATION	3.593192818725202E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.999943524492912	WITHOUT_CLASSIFICATION	5.64755070880125E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9982154452610361	WITHOUT_CLASSIFICATION	0.001784554738963838	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.999951049710079	WITHOUT_CLASSIFICATION	4.8950289921010875E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999298642340902	WITHOUT_CLASSIFICATION	7.013576590979862E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998463362108891	WITHOUT_CLASSIFICATION	1.5366378911085834E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9998218576769025	WITHOUT_CLASSIFICATION	1.78142323097529E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999097261447644	WITHOUT_CLASSIFICATION	9.027385523570223E-5	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999515472272198	WITHOUT_CLASSIFICATION	4.845277278013224E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999537985501056	WITHOUT_CLASSIFICATION	4.620144989453573E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9998727307227792	WITHOUT_CLASSIFICATION	1.2726927722073715E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999576425796372	WITHOUT_CLASSIFICATION	4.235742036289637E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.999776375266533	WITHOUT_CLASSIFICATION	2.236247334671684E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999398387977908	WITHOUT_CLASSIFICATION	6.016120220914298E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999527518460171	WITHOUT_CLASSIFICATION	4.724815398297451E-5	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9995608037515933	WITHOUT_CLASSIFICATION	4.391962484066403E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9896594286287245	WITHOUT_CLASSIFICATION	0.010340571371275545	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999300294407372	WITHOUT_CLASSIFICATION	6.997055926287182E-5	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999965250302212	WITHOUT_CLASSIFICATION	3.4749697787117127E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999635800911114	WITHOUT_CLASSIFICATION	3.641990888855498E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9998568147460848	WITHOUT_CLASSIFICATION	1.4318525391522136E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999785243934776	WITHOUT_CLASSIFICATION	2.1475606522465763E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999392210023804	WITHOUT_CLASSIFICATION	6.077899761951552E-5	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999792468101267	WITHOUT_CLASSIFICATION	2.0753189873261373E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999882444485503	WITHOUT_CLASSIFICATION	1.1755551449788121E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999685459422419	WITHOUT_CLASSIFICATION	3.145405775805068E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999465610967807	WITHOUT_CLASSIFICATION	5.343890321922665E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999917511993651	WITHOUT_CLASSIFICATION	8.248800634940859E-6	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999912019934631	WITHOUT_CLASSIFICATION	8.798006536847404E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9997724149674145	WITHOUT_CLASSIFICATION	2.2758503258550025E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999725760876949	WITHOUT_CLASSIFICATION	2.7423912305130093E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999789182868919	WITHOUT_CLASSIFICATION	2.1081713108157336E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999245180535395	WITHOUT_CLASSIFICATION	7.548194646036145E-5	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999869874173087	WITHOUT_CLASSIFICATION	1.3012582691351987E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999782463410458	WITHOUT_CLASSIFICATION	2.1753658954212932E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.999923996852048	WITHOUT_CLASSIFICATION	7.60031479520031E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.999985483813425	WITHOUT_CLASSIFICATION	1.4516186574900331E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.999966868591038	WITHOUT_CLASSIFICATION	3.313140896204408E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999745307025197	WITHOUT_CLASSIFICATION	2.546929748025618E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999360961956146	WITHOUT_CLASSIFICATION	6.390380438538801E-5	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999843023760318	WITHOUT_CLASSIFICATION	1.569762396823054E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.999941620493253	WITHOUT_CLASSIFICATION	5.837950674699973E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999237720678533	WITHOUT_CLASSIFICATION	7.622793214666585E-5	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999821381884607	WITHOUT_CLASSIFICATION	1.7861811539268956E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998482457170118	WITHOUT_CLASSIFICATION	1.51754282988189E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9998051971885855	WITHOUT_CLASSIFICATION	1.9480281141454555E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999584054623251	WITHOUT_CLASSIFICATION	4.1594537674908504E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999966759469406	WITHOUT_CLASSIFICATION	3.3240530592752266E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9994990511996029	WITHOUT_CLASSIFICATION	5.009488003970544E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999959140387022	WITHOUT_CLASSIFICATION	4.085961297717295E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999990224885993	WITHOUT_CLASSIFICATION	9.775114006700545E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999990224885993	WITHOUT_CLASSIFICATION	9.775114006700545E-7	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9997145047219405	WITHOUT_CLASSIFICATION	2.8549527805957404E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999015502591201	WITHOUT_CLASSIFICATION	9.844974087994116E-5	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9971217039115436	WITHOUT_CLASSIFICATION	0.002878296088456361	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.999970843095013	WITHOUT_CLASSIFICATION	2.9156904986880346E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999597588242005	WITHOUT_CLASSIFICATION	4.0241175799470694E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999824539250394	WITHOUT_CLASSIFICATION	1.7546074960670285E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9898512138087399	WITHOUT_CLASSIFICATION	0.010148786191260166	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999929317988739	WITHOUT_CLASSIFICATION	7.06820112607859E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9998925262834982	WITHOUT_CLASSIFICATION	1.0747371650169828E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999690709837954	WITHOUT_CLASSIFICATION	3.0929016204638524E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999822268115722	WITHOUT_CLASSIFICATION	1.777318842784631E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999822268115722	WITHOUT_CLASSIFICATION	1.777318842784631E-5	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999724553920697	WITHOUT_CLASSIFICATION	2.75446079304E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9996262996122078	WITHOUT_CLASSIFICATION	3.7370038779213654E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998172274848522	WITHOUT_CLASSIFICATION	1.8277251514782679E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998919522780685	WITHOUT_CLASSIFICATION	1.0804772193139494E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999929204146298	WITHOUT_CLASSIFICATION	7.07958537013062E-6	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999951529993564	WITHOUT_CLASSIFICATION	4.847000643578798E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999891521201559	WITHOUT_CLASSIFICATION	1.0847879844025652E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9996220474584693	WITHOUT_CLASSIFICATION	3.7795254153077327E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999971900488274	WITHOUT_CLASSIFICATION	2.8099511727302852E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.999486406516582	WITHOUT_CLASSIFICATION	5.135934834179898E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9998720129629936	WITHOUT_CLASSIFICATION	1.279870370064327E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999605010945731	WITHOUT_CLASSIFICATION	3.949890542679012E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999435998315744	WITHOUT_CLASSIFICATION	5.640016842552143E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999435998315744	WITHOUT_CLASSIFICATION	5.640016842552143E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9988514657350626	WITHOUT_CLASSIFICATION	0.001148534264937456	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999745139805135	WITHOUT_CLASSIFICATION	2.5486019486450674E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9998478076270836	WITHOUT_CLASSIFICATION	1.5219237291644192E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9997847535957094	WITHOUT_CLASSIFICATION	2.1524640429065295E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9998980284456035	WITHOUT_CLASSIFICATION	1.0197155439650973E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998938470793461	WITHOUT_CLASSIFICATION	1.0615292065382617E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9998800130383109	WITHOUT_CLASSIFICATION	1.19986961689157E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999407353661119	WITHOUT_CLASSIFICATION	5.926463388800084E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9982579560681466	WITHOUT_CLASSIFICATION	0.0017420439318534295	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999557806839382	WITHOUT_CLASSIFICATION	4.421931606177349E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998172274848522	WITHOUT_CLASSIFICATION	1.8277251514782679E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9996731419087844	WITHOUT_CLASSIFICATION	3.2685809121561006E-4	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9966652609371006	WITHOUT_CLASSIFICATION	0.0033347390628993613	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999783874325601	WITHOUT_CLASSIFICATION	2.1612567439994778E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999584763645778	WITHOUT_CLASSIFICATION	4.152363542230365E-5	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999415931417948	WITHOUT_CLASSIFICATION	5.8406858205118505E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999840149986088	WITHOUT_CLASSIFICATION	1.59850013913207E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999908221934052	WITHOUT_CLASSIFICATION	9.177806594858755E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9994738925707236	WITHOUT_CLASSIFICATION	5.261074292764222E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9997851766116485	WITHOUT_CLASSIFICATION	2.1482338835152674E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998283776682051	WITHOUT_CLASSIFICATION	1.7162233179502718E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999065676934122	WITHOUT_CLASSIFICATION	9.343230658770739E-5	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.999977327440084	WITHOUT_CLASSIFICATION	2.2672559915980408E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999566396541052	WITHOUT_CLASSIFICATION	4.3360345894800397E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999527694528642	WITHOUT_CLASSIFICATION	4.723054713580352E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999657307960287	WITHOUT_CLASSIFICATION	3.426920397131583E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.999918832429877	WITHOUT_CLASSIFICATION	8.116757012306194E-5	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9980018182940013	WITHOUT_CLASSIFICATION	0.0019981817059988496	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999631107792599	WITHOUT_CLASSIFICATION	3.6889220740054204E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9998380899870261	WITHOUT_CLASSIFICATION	1.6191001297391532E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.999672353232533	WITHOUT_CLASSIFICATION	3.276467674670013E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999927563668572	WITHOUT_CLASSIFICATION	7.243633142708292E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9997536528149199	WITHOUT_CLASSIFICATION	2.463471850800547E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9989935077570173	WITHOUT_CLASSIFICATION	0.0010064922429827237	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999657073772001	WITHOUT_CLASSIFICATION	3.429262279979748E-5	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.999936076514663	WITHOUT_CLASSIFICATION	6.392348533696545E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9998778939847721	WITHOUT_CLASSIFICATION	1.2210601522788875E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999462571303749	WITHOUT_CLASSIFICATION	5.374286962512666E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9941299660803071	WITHOUT_CLASSIFICATION	0.005870033919692895	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998700301161696	WITHOUT_CLASSIFICATION	1.2996988383042916E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998700301161696	WITHOUT_CLASSIFICATION	1.2996988383042916E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998486480914122	WITHOUT_CLASSIFICATION	1.5135190858781068E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998665879297411	WITHOUT_CLASSIFICATION	1.3341207025891359E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999536958337815	WITHOUT_CLASSIFICATION	4.6304166218421964E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9998548432857257	WITHOUT_CLASSIFICATION	1.4515671427426787E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999237896043389	WITHOUT_CLASSIFICATION	7.621039566113746E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999681471260607	WITHOUT_CLASSIFICATION	3.185287393932067E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999680683361789	WITHOUT_CLASSIFICATION	3.193166382106302E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9975452127878927	WITHOUT_CLASSIFICATION	0.0024547872121073763	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998925874747604	WITHOUT_CLASSIFICATION	1.0741252523960804E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.999827218050606	WITHOUT_CLASSIFICATION	1.7278194939387965E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999850377737662	WITHOUT_CLASSIFICATION	1.496222623377097E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9990601433430153	WITHOUT_CLASSIFICATION	9.398566569846961E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998960184087236	WITHOUT_CLASSIFICATION	1.0398159127653586E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999275984124736	WITHOUT_CLASSIFICATION	7.240158752635291E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9998745638892969	WITHOUT_CLASSIFICATION	1.2543611070313287E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.999767392350346	WITHOUT_CLASSIFICATION	2.326076496540725E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999990566181831	WITHOUT_CLASSIFICATION	9.433818167616116E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9998939826628559	WITHOUT_CLASSIFICATION	1.0601733714401386E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998588820157315	WITHOUT_CLASSIFICATION	1.4111798426861343E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9998490364277097	WITHOUT_CLASSIFICATION	1.509635722902321E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999004156610446	WITHOUT_CLASSIFICATION	9.958433895533543E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.999949408943043	WITHOUT_CLASSIFICATION	5.0591056957029415E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9995841497190496	WITHOUT_CLASSIFICATION	4.158502809504636E-4	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999150979928944	WITHOUT_CLASSIFICATION	8.490200710573245E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999574260683771	WITHOUT_CLASSIFICATION	4.257393162291963E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999979899865956	WITHOUT_CLASSIFICATION	2.01001340425533E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999633615034054	WITHOUT_CLASSIFICATION	3.6638496594569154E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999862382698841	WITHOUT_CLASSIFICATION	1.3761730115833064E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9997681051729614	WITHOUT_CLASSIFICATION	2.3189482703859683E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999958844900785	WITHOUT_CLASSIFICATION	4.115509921534983E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999810377695446	WITHOUT_CLASSIFICATION	1.8962230455451657E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999932639064743	WITHOUT_CLASSIFICATION	6.736093525755429E-6	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9997968866679993	WITHOUT_CLASSIFICATION	2.0311333200072055E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999414531694791	WITHOUT_CLASSIFICATION	5.8546830520864034E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999505325253749	WITHOUT_CLASSIFICATION	4.946747462508416E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.999998467983129	WITHOUT_CLASSIFICATION	1.5320168710079088E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9997356086686993	WITHOUT_CLASSIFICATION	2.6439133130068003E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9998844697226908	WITHOUT_CLASSIFICATION	1.1553027730914627E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999838431179193	WITHOUT_CLASSIFICATION	1.6156882080689123E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9149785242372922	WITHOUT_CLASSIFICATION	0.08502147576270777	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9995629182445226	WITHOUT_CLASSIFICATION	4.370817554774694E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9963490398037647	WITHOUT_CLASSIFICATION	0.0036509601962352576	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999551734035963	WITHOUT_CLASSIFICATION	4.4826596403592285E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998720480145818	WITHOUT_CLASSIFICATION	1.2795198541809815E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999489071412692	WITHOUT_CLASSIFICATION	5.10928587308187E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9976666403672804	WITHOUT_CLASSIFICATION	0.0023333596327195596	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9998136624297066	WITHOUT_CLASSIFICATION	1.8633757029351178E-4	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999866905262539	WITHOUT_CLASSIFICATION	1.33094737460695E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999553992296506	WITHOUT_CLASSIFICATION	4.4600770349339663E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9996313938982025	WITHOUT_CLASSIFICATION	3.686061017975457E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9996267871376839	WITHOUT_CLASSIFICATION	3.7321286231600223E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999443770333782	WITHOUT_CLASSIFICATION	5.562296662171152E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999885368413625	WITHOUT_CLASSIFICATION	1.146315863752877E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999416478435298	WITHOUT_CLASSIFICATION	5.835215647017644E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.99993273689602	WITHOUT_CLASSIFICATION	6.726310397993487E-5	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9997835094760797	WITHOUT_CLASSIFICATION	2.1649052392025495E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9996239504535841	WITHOUT_CLASSIFICATION	3.7604954641578864E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9996050806905465	WITHOUT_CLASSIFICATION	3.9491930945344305E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999264322324911	WITHOUT_CLASSIFICATION	7.35677675088431E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999264322324911	WITHOUT_CLASSIFICATION	7.35677675088431E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9981284303864173	WITHOUT_CLASSIFICATION	0.0018715696135826803	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9122736000864283	WITHOUT_CLASSIFICATION	0.08772639991357177	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999570092386332	WITHOUT_CLASSIFICATION	4.2990761366862866E-5	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9498985080140226	WITHOUT_CLASSIFICATION	0.05010149198597732	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999123014725817	WITHOUT_CLASSIFICATION	8.7698527418322E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999971557521253	WITHOUT_CLASSIFICATION	2.8442478746927237E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9998842818842322	WITHOUT_CLASSIFICATION	1.157181157678926E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9920963444360649	WITHOUT_CLASSIFICATION	0.007903655563935161	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999993054921886	WITHOUT_CLASSIFICATION	6.945078114606264E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9962199276327844	WITHOUT_CLASSIFICATION	0.003780072367215644	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9989397566788999	WITHOUT_CLASSIFICATION	0.0010602433211001044	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999854314498622	WITHOUT_CLASSIFICATION	1.4568550137856123E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9998609931281376	WITHOUT_CLASSIFICATION	1.3900687186242967E-4	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999857968298868	WITHOUT_CLASSIFICATION	1.42031701131556E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999791283285931	WITHOUT_CLASSIFICATION	2.0871671406767088E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9515258716547423	WITHOUT_CLASSIFICATION	0.0484741283452576	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9978641990954025	WITHOUT_CLASSIFICATION	0.002135800904597589	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998233522691531	WITHOUT_CLASSIFICATION	1.7664773084693627E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.999976371319095	WITHOUT_CLASSIFICATION	2.362868090497385E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9774100139464109	WITHOUT_CLASSIFICATION	0.022589986053589077	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999797098953004	WITHOUT_CLASSIFICATION	2.0290104699623968E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9993723152281331	WITHOUT_CLASSIFICATION	6.276847718669313E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998962898684695	WITHOUT_CLASSIFICATION	1.0371013153065031E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9994370559992588	WITHOUT_CLASSIFICATION	5.629440007411308E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9998612137478108	WITHOUT_CLASSIFICATION	1.387862521891686E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9995101895823585	WITHOUT_CLASSIFICATION	4.898104176414214E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999341269475929	WITHOUT_CLASSIFICATION	6.58730524070648E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.999973919290707	WITHOUT_CLASSIFICATION	2.6080709293053685E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9997469953496734	WITHOUT_CLASSIFICATION	2.530046503265866E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999752649977544	WITHOUT_CLASSIFICATION	2.473500224572401E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999808478037163	WITHOUT_CLASSIFICATION	1.9152196283675452E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.999996895756578	WITHOUT_CLASSIFICATION	3.1042434220061105E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.999996006807601	WITHOUT_CLASSIFICATION	3.993192398886568E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9997341297934718	WITHOUT_CLASSIFICATION	2.6587020652822E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998862063117026	WITHOUT_CLASSIFICATION	1.1379368829741609E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.999992997888408	WITHOUT_CLASSIFICATION	7.002111592018303E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999848535947705	WITHOUT_CLASSIFICATION	1.5146405229434864E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999848535947705	WITHOUT_CLASSIFICATION	1.5146405229434864E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999742808183513	WITHOUT_CLASSIFICATION	2.5719181648771066E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9998787295069993	WITHOUT_CLASSIFICATION	1.2127049300059889E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.998814595440017	WITHOUT_CLASSIFICATION	0.0011854045599830056	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999943664909914	WITHOUT_CLASSIFICATION	5.633509008545237E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.999773132458547	WITHOUT_CLASSIFICATION	2.26867541452869E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999640112846611	WITHOUT_CLASSIFICATION	3.598871533889662E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9998874712874924	WITHOUT_CLASSIFICATION	1.1252871250755607E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999765626224385	WITHOUT_CLASSIFICATION	2.343737756152558E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999630802009758	WITHOUT_CLASSIFICATION	3.6919799024093055E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999928983792677	WITHOUT_CLASSIFICATION	7.101620732192315E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999919430512912	WITHOUT_CLASSIFICATION	8.056948708800472E-6	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999778950111072	WITHOUT_CLASSIFICATION	2.2104988892742575E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999419340506914	WITHOUT_CLASSIFICATION	5.806594930858419E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999100945861127	WITHOUT_CLASSIFICATION	8.990541388725059E-5	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.999999836227785	WITHOUT_CLASSIFICATION	1.6377221505821465E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999722578970421	WITHOUT_CLASSIFICATION	2.7742102957805746E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999415462937722	WITHOUT_CLASSIFICATION	5.8453706227729865E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9997227797598659	WITHOUT_CLASSIFICATION	2.7722024013415015E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9995781778933688	WITHOUT_CLASSIFICATION	4.2182210663126824E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999075243529022	WITHOUT_CLASSIFICATION	9.247564709778485E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9976852051500682	WITHOUT_CLASSIFICATION	0.002314794849931737	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9324616788754386	WITHOUT_CLASSIFICATION	0.0675383211245613	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999859846029695	WITHOUT_CLASSIFICATION	1.4015397030388984E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999719598974373	WITHOUT_CLASSIFICATION	2.8040102562729633E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9996462111664541	WITHOUT_CLASSIFICATION	3.5378883354584846E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999862159251061	WITHOUT_CLASSIFICATION	1.3784074893811053E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9983488605362869	WITHOUT_CLASSIFICATION	0.0016511394637130326	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9998286608486077	WITHOUT_CLASSIFICATION	1.7133915139239082E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9998238542840658	WITHOUT_CLASSIFICATION	1.761457159340908E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999846433159451	WITHOUT_CLASSIFICATION	1.5356684054906432E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999982102590416	WITHOUT_CLASSIFICATION	1.7897409585196989E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9998909403249893	WITHOUT_CLASSIFICATION	1.0905967501069884E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.99999662517207	WITHOUT_CLASSIFICATION	3.374827930024064E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999972796046868	WITHOUT_CLASSIFICATION	2.7203953131940773E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999657641430006	WITHOUT_CLASSIFICATION	3.423585699931789E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999863636312031	WITHOUT_CLASSIFICATION	1.3636368796797484E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999880491607767	WITHOUT_CLASSIFICATION	1.1950839223295199E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999879641810639	WITHOUT_CLASSIFICATION	1.2035818936092377E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9991547587746372	WITHOUT_CLASSIFICATION	8.452412253628425E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999374473099478	WITHOUT_CLASSIFICATION	6.255269005213962E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999853180204203	WITHOUT_CLASSIFICATION	1.4681979579547776E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9991900346466657	WITHOUT_CLASSIFICATION	8.09965353334278E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9983552149378616	WITHOUT_CLASSIFICATION	0.0016447850621384146	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999565051431694	WITHOUT_CLASSIFICATION	4.3494856830652315E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9995530051506377	WITHOUT_CLASSIFICATION	4.469948493623182E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998233414860456	WITHOUT_CLASSIFICATION	1.766585139543932E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.999803233603991	WITHOUT_CLASSIFICATION	1.967663960088982E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9984208995715681	WITHOUT_CLASSIFICATION	0.0015791004284318219	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.999973919290707	WITHOUT_CLASSIFICATION	2.6080709293053685E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9997766416496161	WITHOUT_CLASSIFICATION	2.2335835038383983E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.999822777185896	WITHOUT_CLASSIFICATION	1.7722281410404995E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999738140839506	WITHOUT_CLASSIFICATION	2.6185916049320076E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999919233432606	WITHOUT_CLASSIFICATION	8.076656739405087E-6	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.999911964486985	WITHOUT_CLASSIFICATION	8.80355130149217E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.999976475945135	WITHOUT_CLASSIFICATION	2.3524054865025684E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999674527903644	WITHOUT_CLASSIFICATION	3.254720963558903E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999505922080221	WITHOUT_CLASSIFICATION	4.940779197789532E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999227430309935	WITHOUT_CLASSIFICATION	7.725696900646309E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995474778983049	WITHOUT_CLASSIFICATION	4.5252210169511236E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999907728129515	WITHOUT_CLASSIFICATION	9.227187048486822E-6	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999906035402988	WITHOUT_CLASSIFICATION	9.3964597012927E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999827223950887	WITHOUT_CLASSIFICATION	1.7277604911301268E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9998516317784022	WITHOUT_CLASSIFICATION	1.4836822159768263E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999920763231386	WITHOUT_CLASSIFICATION	7.923676861443815E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999140709017285	WITHOUT_CLASSIFICATION	8.59290982715306E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999370024864099	WITHOUT_CLASSIFICATION	6.299751359008494E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998914094448367	WITHOUT_CLASSIFICATION	1.085905551633494E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9998308344057104	WITHOUT_CLASSIFICATION	1.6916559428964916E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.995226673315725	WITHOUT_CLASSIFICATION	0.004773326684275045	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9998936210693277	WITHOUT_CLASSIFICATION	1.0637893067226388E-4	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999810770046595	WITHOUT_CLASSIFICATION	1.8922995340411013E-5	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9981837017795141	WITHOUT_CLASSIFICATION	0.0018162982204859284	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996176181112442	WITHOUT_CLASSIFICATION	3.8238188875578256E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999889608447732	WITHOUT_CLASSIFICATION	1.1039155226865547E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999942910785959	WITHOUT_CLASSIFICATION	5.708921404042626E-6	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999659784542811	WITHOUT_CLASSIFICATION	3.402154571885114E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999207363497227	WITHOUT_CLASSIFICATION	7.926365027730447E-5	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9987387752889766	WITHOUT_CLASSIFICATION	0.0012612247110234283	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999254344436775	WITHOUT_CLASSIFICATION	7.456555632245334E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999731922291284	WITHOUT_CLASSIFICATION	2.6807770871606842E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9996990342919437	WITHOUT_CLASSIFICATION	3.0096570805634147E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9998491047185878	WITHOUT_CLASSIFICATION	1.5089528141212785E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998005549813943	WITHOUT_CLASSIFICATION	1.9944501860567516E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.769048769014737	WITHOUT_CLASSIFICATION	0.23095123098526307	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999643429359173	WITHOUT_CLASSIFICATION	3.5657064082670886E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9998814002162129	WITHOUT_CLASSIFICATION	1.1859978378710192E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999312790412467	WITHOUT_CLASSIFICATION	6.872095875332668E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999312790412467	WITHOUT_CLASSIFICATION	6.872095875332668E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999254344436775	WITHOUT_CLASSIFICATION	7.456555632245334E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9995102457093865	WITHOUT_CLASSIFICATION	4.897542906134578E-4	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999972166760464	WITHOUT_CLASSIFICATION	2.783323953714178E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.999921095563714	WITHOUT_CLASSIFICATION	7.890443628592376E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.999967358429113	WITHOUT_CLASSIFICATION	3.264157088706741E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999824537042871	WITHOUT_CLASSIFICATION	1.754629571294857E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9998264895101621	WITHOUT_CLASSIFICATION	1.7351048983780068E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998951005925663	WITHOUT_CLASSIFICATION	1.0489940743380122E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999549942834679	WITHOUT_CLASSIFICATION	4.500571653197467E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9998784762673524	WITHOUT_CLASSIFICATION	1.2152373264757346E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9994933788182738	WITHOUT_CLASSIFICATION	5.066211817260866E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999007320024879	WITHOUT_CLASSIFICATION	9.92679975122183E-5	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9997395655505438	WITHOUT_CLASSIFICATION	2.604344494561343E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9997653939222693	WITHOUT_CLASSIFICATION	2.3460607773068053E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999600163627973	WITHOUT_CLASSIFICATION	3.998363720264111E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999158850607804	WITHOUT_CLASSIFICATION	8.411493921960555E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.999903438842545	WITHOUT_CLASSIFICATION	9.65611574549614E-5	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9998968989689603	WITHOUT_CLASSIFICATION	1.0310103103969946E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999864558361224	WITHOUT_CLASSIFICATION	1.3544163877473316E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999833526055805	WITHOUT_CLASSIFICATION	1.664739441952912E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999887696196398	WITHOUT_CLASSIFICATION	1.123038036020441E-5	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999642065405546	WITHOUT_CLASSIFICATION	3.5793459445408816E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999299936287467	WITHOUT_CLASSIFICATION	7.00063712532942E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999843258912845	WITHOUT_CLASSIFICATION	1.5674108715499682E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998830977718681	WITHOUT_CLASSIFICATION	1.1690222813188343E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999699433214481	WITHOUT_CLASSIFICATION	3.0056678551994532E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999795010085217	WITHOUT_CLASSIFICATION	2.0498991478354342E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9990208888240046	WITHOUT_CLASSIFICATION	9.791111759953725E-4	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9994130673375161	WITHOUT_CLASSIFICATION	5.86932662483942E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999026776883785	WITHOUT_CLASSIFICATION	9.732231162152001E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998630151774005	WITHOUT_CLASSIFICATION	1.3698482259946813E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9997848314798956	WITHOUT_CLASSIFICATION	2.1516852010441677E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999392440584519	WITHOUT_CLASSIFICATION	6.0755941548103424E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999340253602064	WITHOUT_CLASSIFICATION	6.597463979363974E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999264322324911	WITHOUT_CLASSIFICATION	7.35677675088431E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9987365393171709	WITHOUT_CLASSIFICATION	0.0012634606828291223	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999934299919071	WITHOUT_CLASSIFICATION	6.570008092785753E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9995093632409282	WITHOUT_CLASSIFICATION	4.906367590718399E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999307224621217	WITHOUT_CLASSIFICATION	6.927753787828914E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999636730664164	WITHOUT_CLASSIFICATION	3.632693358347837E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999874831780099	WITHOUT_CLASSIFICATION	1.2516821990155966E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999874831780099	WITHOUT_CLASSIFICATION	1.2516821990155966E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9996168216669269	WITHOUT_CLASSIFICATION	3.831783330731323E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999483144358831	WITHOUT_CLASSIFICATION	5.1685564116889686E-5	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.999900991197481	WITHOUT_CLASSIFICATION	9.900880251899634E-5	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999336636014634	WITHOUT_CLASSIFICATION	6.633639853663587E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.99958453563961	WITHOUT_CLASSIFICATION	4.1546436039002413E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999954818843345	WITHOUT_CLASSIFICATION	4.5181156655087606E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.999907548501293	WITHOUT_CLASSIFICATION	9.24514987070024E-5	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.999953825107254	WITHOUT_CLASSIFICATION	4.617489274613431E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9998872359535826	WITHOUT_CLASSIFICATION	1.1276404641732935E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9998872359535826	WITHOUT_CLASSIFICATION	1.1276404641732935E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9998872359535826	WITHOUT_CLASSIFICATION	1.1276404641732935E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.999776465793326	WITHOUT_CLASSIFICATION	2.235342066740383E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9949809691305803	WITHOUT_CLASSIFICATION	0.005019030869419701	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.999853434652394	WITHOUT_CLASSIFICATION	1.465653476059398E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9515258716547423	WITHOUT_CLASSIFICATION	0.0484741283452576	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9996305686139525	WITHOUT_CLASSIFICATION	3.694313860475843E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.996678759875692	WITHOUT_CLASSIFICATION	0.0033212401243079993	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9998871525616719	WITHOUT_CLASSIFICATION	1.1284743832794829E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999965733100576	WITHOUT_CLASSIFICATION	3.4266899422408376E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9949809691305803	WITHOUT_CLASSIFICATION	0.005019030869419701	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999710009009868	WITHOUT_CLASSIFICATION	2.8999099013252775E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999710009009868	WITHOUT_CLASSIFICATION	2.8999099013252775E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999651330336605	WITHOUT_CLASSIFICATION	3.486696633954302E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999199958166187	WITHOUT_CLASSIFICATION	8.00041833812652E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997036198390179	WITHOUT_CLASSIFICATION	2.963801609820847E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999451262512484	WITHOUT_CLASSIFICATION	5.487374875153428E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999266842593492	WITHOUT_CLASSIFICATION	7.331574065082593E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999475413056991	WITHOUT_CLASSIFICATION	5.245869430081518E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9996713544433926	WITHOUT_CLASSIFICATION	3.286455566073612E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.999826947987998	WITHOUT_CLASSIFICATION	1.730520120020257E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9998927756702403	WITHOUT_CLASSIFICATION	1.0722432975977973E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999892273364801	WITHOUT_CLASSIFICATION	1.0772663519858421E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.999982158574494	WITHOUT_CLASSIFICATION	1.784142550602319E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999700867726861	WITHOUT_CLASSIFICATION	2.9913227313975656E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999655161834279	WITHOUT_CLASSIFICATION	3.448381657207508E-5	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9993697777681573	WITHOUT_CLASSIFICATION	6.302222318427163E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.999988489196255	WITHOUT_CLASSIFICATION	1.151080374493116E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.999989463493085	WITHOUT_CLASSIFICATION	1.0536506914876037E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.999914711723895	WITHOUT_CLASSIFICATION	8.528827610505207E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998392144140195	WITHOUT_CLASSIFICATION	1.607855859805277E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9996661917933198	WITHOUT_CLASSIFICATION	3.338082066801259E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9995455519390628	WITHOUT_CLASSIFICATION	4.5444806093712317E-4	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9998866715867296	WITHOUT_CLASSIFICATION	1.1332841327047506E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998962898684695	WITHOUT_CLASSIFICATION	1.0371013153065031E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999640112846611	WITHOUT_CLASSIFICATION	3.598871533889662E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999921213533741	WITHOUT_CLASSIFICATION	7.87864662585176E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9986262519238832	WITHOUT_CLASSIFICATION	0.0013737480761168686	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999715996268753	WITHOUT_CLASSIFICATION	2.840037312466044E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.974495376633581	WITHOUT_CLASSIFICATION	0.025504623366419045	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999127746906611	WITHOUT_CLASSIFICATION	8.722530933889745E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999127746906611	WITHOUT_CLASSIFICATION	8.722530933889745E-5	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9998257725202054	WITHOUT_CLASSIFICATION	1.742274797946116E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9998393773647917	WITHOUT_CLASSIFICATION	1.6062263520822816E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999764937415193	WITHOUT_CLASSIFICATION	2.350625848061505E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999715654440774	WITHOUT_CLASSIFICATION	2.8434555922522083E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9998395220303572	WITHOUT_CLASSIFICATION	1.6047796964274353E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999647592722848	WITHOUT_CLASSIFICATION	3.5240727715189386E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999171866600916	WITHOUT_CLASSIFICATION	8.2813339908483E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999891913133282	WITHOUT_CLASSIFICATION	1.0808686671744097E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999733835175739	WITHOUT_CLASSIFICATION	2.6616482426048054E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999563236041242	WITHOUT_CLASSIFICATION	4.367639587574184E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999564332905234	WITHOUT_CLASSIFICATION	4.356670947651811E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999861207122374	WITHOUT_CLASSIFICATION	1.3879287762741657E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999618689342612	WITHOUT_CLASSIFICATION	3.813106573878918E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999731612143032	WITHOUT_CLASSIFICATION	2.6838785696751962E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9998941804515731	WITHOUT_CLASSIFICATION	1.0581954842687517E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999340807313122	WITHOUT_CLASSIFICATION	6.591926868786989E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998504977156164	WITHOUT_CLASSIFICATION	1.495022843835732E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999944745593741	WITHOUT_CLASSIFICATION	5.5254406258898004E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999786805623203	WITHOUT_CLASSIFICATION	2.131943767972453E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9987296035280696	WITHOUT_CLASSIFICATION	0.0012703964719302978	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.99997364369229	WITHOUT_CLASSIFICATION	2.635630771001409E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998655061675497	WITHOUT_CLASSIFICATION	1.3449383245034936E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999615511314451	WITHOUT_CLASSIFICATION	3.844886855476027E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9997709417247819	WITHOUT_CLASSIFICATION	2.290582752181069E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999408364946977	WITHOUT_CLASSIFICATION	5.916350530243474E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999618689342612	WITHOUT_CLASSIFICATION	3.813106573878918E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998672615098331	WITHOUT_CLASSIFICATION	1.3273849016692186E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9998941804515731	WITHOUT_CLASSIFICATION	1.0581954842687517E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.999851188478648	WITHOUT_CLASSIFICATION	1.488115213520402E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9994798444478495	WITHOUT_CLASSIFICATION	5.201555521504568E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999641966869263	WITHOUT_CLASSIFICATION	3.5803313073772055E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9994222547758954	WITHOUT_CLASSIFICATION	5.777452241046045E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9933540538091888	WITHOUT_CLASSIFICATION	0.006645946190811143	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999317423149418	WITHOUT_CLASSIFICATION	6.825768505825892E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.999487480410285	WITHOUT_CLASSIFICATION	5.125195897150907E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999194920132825	WITHOUT_CLASSIFICATION	8.05079867176259E-5	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997718271586709	WITHOUT_CLASSIFICATION	2.2817284132916702E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999181583899093	WITHOUT_CLASSIFICATION	8.184161009075216E-5	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999983660673922	WITHOUT_CLASSIFICATION	1.6339326078352574E-6	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.999376364352387	WITHOUT_CLASSIFICATION	6.236356476131123E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999565997934738	WITHOUT_CLASSIFICATION	4.3400206526221686E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999550016317592	WITHOUT_CLASSIFICATION	4.499836824083105E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999964603681458	WITHOUT_CLASSIFICATION	3.5396318541253305E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999633567797472	WITHOUT_CLASSIFICATION	3.664322025281518E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999848639537401	WITHOUT_CLASSIFICATION	1.5136046259837812E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999377959436497	WITHOUT_CLASSIFICATION	6.220405635033629E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9977104961024723	WITHOUT_CLASSIFICATION	0.002289503897527728	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.999945872057442	WITHOUT_CLASSIFICATION	5.412794255808578E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9998323666732115	WITHOUT_CLASSIFICATION	1.676333267884383E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999757079692807	WITHOUT_CLASSIFICATION	2.4292030719278294E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999690404858945	WITHOUT_CLASSIFICATION	3.095951410546041E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9992070540528806	WITHOUT_CLASSIFICATION	7.929459471194502E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9998461481031433	WITHOUT_CLASSIFICATION	1.5385189685667594E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.999940923824339	WITHOUT_CLASSIFICATION	5.9076175661041046E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.998854525334994	WITHOUT_CLASSIFICATION	0.0011454746650060071	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999704402741576	WITHOUT_CLASSIFICATION	2.955972584237997E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999704402741576	WITHOUT_CLASSIFICATION	2.955972584237997E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9991244435915912	WITHOUT_CLASSIFICATION	8.7555640840874E-4	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999791198888686	WITHOUT_CLASSIFICATION	2.0880111131419547E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.999984644799299	WITHOUT_CLASSIFICATION	1.5355200701002328E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9997455683897936	WITHOUT_CLASSIFICATION	2.544316102064582E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999918019123126	WITHOUT_CLASSIFICATION	8.198087687475128E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999977128284757	WITHOUT_CLASSIFICATION	2.287171524369404E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999576421022889	WITHOUT_CLASSIFICATION	4.235789771119597E-5	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.99998142388495	WITHOUT_CLASSIFICATION	1.8576115050037703E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999107604480276	WITHOUT_CLASSIFICATION	8.923955197236436E-5	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999342692227815	WITHOUT_CLASSIFICATION	6.573077721842443E-5	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9998070304210961	WITHOUT_CLASSIFICATION	1.9296957890386755E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999235635793478	WITHOUT_CLASSIFICATION	7.64364206521991E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9998643454012063	WITHOUT_CLASSIFICATION	1.3565459879378E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9874713633827021	WITHOUT_CLASSIFICATION	0.012528636617297731	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998816394498677	WITHOUT_CLASSIFICATION	1.1836055013229121E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999752318074849	WITHOUT_CLASSIFICATION	2.476819251510476E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999902873531289	WITHOUT_CLASSIFICATION	9.712646871177547E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9996366726901014	WITHOUT_CLASSIFICATION	3.633273098986761E-4	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999890953909688	WITHOUT_CLASSIFICATION	1.0904609031158195E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999907193144291	WITHOUT_CLASSIFICATION	9.28068557105575E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9998393141710133	WITHOUT_CLASSIFICATION	1.6068582898665537E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999890953909688	WITHOUT_CLASSIFICATION	1.0904609031158195E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9993639849968393	WITHOUT_CLASSIFICATION	6.360150031605723E-4	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999701613536871	WITHOUT_CLASSIFICATION	2.983864631294851E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999619737478714	WITHOUT_CLASSIFICATION	3.802625212856878E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999619737478714	WITHOUT_CLASSIFICATION	3.802625212856878E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999879870360459	WITHOUT_CLASSIFICATION	1.2012963954179612E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999564285704444	WITHOUT_CLASSIFICATION	4.357142955555916E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999868478875636	WITHOUT_CLASSIFICATION	1.3152112436403253E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9993698144501172	WITHOUT_CLASSIFICATION	6.301855498828681E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999981915416023	WITHOUT_CLASSIFICATION	1.8084583976968072E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9991799249930658	WITHOUT_CLASSIFICATION	8.20075006934244E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9998997697565125	WITHOUT_CLASSIFICATION	1.0023024348748422E-4	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9989714995069394	WITHOUT_CLASSIFICATION	0.0010285004930605678	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999973054180205	WITHOUT_CLASSIFICATION	2.6945819795519935E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999839463018335	WITHOUT_CLASSIFICATION	1.605369816650072E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9997766416496161	WITHOUT_CLASSIFICATION	2.2335835038383983E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999821593112167	WITHOUT_CLASSIFICATION	1.784068878332956E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999778592149934	WITHOUT_CLASSIFICATION	2.2140785006716614E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999752318074849	WITHOUT_CLASSIFICATION	2.476819251510476E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999981915416023	WITHOUT_CLASSIFICATION	1.8084583976968072E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9952899077250869	WITHOUT_CLASSIFICATION	0.004710092274913183	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9952899077250869	WITHOUT_CLASSIFICATION	0.004710092274913183	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9581502933107335	WITHOUT_CLASSIFICATION	0.04184970668926655	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999954433768031	WITHOUT_CLASSIFICATION	4.5566231969224515E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999851645701308	WITHOUT_CLASSIFICATION	1.483542986924831E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998838169472493	WITHOUT_CLASSIFICATION	1.1618305275074271E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999250129434906	WITHOUT_CLASSIFICATION	7.498705650942814E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999884566872842	WITHOUT_CLASSIFICATION	1.1543312715913332E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9989581487165907	WITHOUT_CLASSIFICATION	0.0010418512834092565	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996774361158167	WITHOUT_CLASSIFICATION	3.225638841833655E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999828581702561	WITHOUT_CLASSIFICATION	1.714182974387422E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999981626018689	WITHOUT_CLASSIFICATION	1.8373981310258092E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9998333089937677	WITHOUT_CLASSIFICATION	1.6669100623239173E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999998683844586	WITHOUT_CLASSIFICATION	1.3161554134429198E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999233590832898	WITHOUT_CLASSIFICATION	7.664091671017176E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999902873531289	WITHOUT_CLASSIFICATION	9.712646871177547E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999564285704444	WITHOUT_CLASSIFICATION	4.357142955555916E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999868478875636	WITHOUT_CLASSIFICATION	1.3152112436403253E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999868478875636	WITHOUT_CLASSIFICATION	1.3152112436403253E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999981915416023	WITHOUT_CLASSIFICATION	1.8084583976968072E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999981915416023	WITHOUT_CLASSIFICATION	1.8084583976968072E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9952899077250869	WITHOUT_CLASSIFICATION	0.004710092274913183	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999682051093424	WITHOUT_CLASSIFICATION	3.179489065759823E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.999189738520404	WITHOUT_CLASSIFICATION	8.102614795958391E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999989804206416	WITHOUT_CLASSIFICATION	1.0195793583534133E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997868290030764	WITHOUT_CLASSIFICATION	2.131709969237471E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999759963876956	WITHOUT_CLASSIFICATION	2.4003612304334548E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9776270486522133	WITHOUT_CLASSIFICATION	0.022372951347786767	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999085857916816	WITHOUT_CLASSIFICATION	9.141420831834118E-5	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9998989765514706	WITHOUT_CLASSIFICATION	1.0102344852927789E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999760783216968	WITHOUT_CLASSIFICATION	2.3921678303271238E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999564285704444	WITHOUT_CLASSIFICATION	4.357142955555916E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999868478875636	WITHOUT_CLASSIFICATION	1.3152112436403253E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999868478875636	WITHOUT_CLASSIFICATION	1.3152112436403253E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996774361158167	WITHOUT_CLASSIFICATION	3.225638841833655E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999981626018689	WITHOUT_CLASSIFICATION	1.8373981310258092E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9993016266503318	WITHOUT_CLASSIFICATION	6.98373349668269E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999981023976005	WITHOUT_CLASSIFICATION	1.8976023996212698E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999897515986537	WITHOUT_CLASSIFICATION	1.0248401346360125E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999897515986537	WITHOUT_CLASSIFICATION	1.0248401346360125E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9997975232295957	WITHOUT_CLASSIFICATION	2.0247677040425918E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9998304318054771	WITHOUT_CLASSIFICATION	1.6956819452280993E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999791871231679	WITHOUT_CLASSIFICATION	2.0812876832106746E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999944645754574	WITHOUT_CLASSIFICATION	5.535424542530503E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999944645754574	WITHOUT_CLASSIFICATION	5.535424542530503E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999691625636767	WITHOUT_CLASSIFICATION	3.0837436323280406E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999691625636767	WITHOUT_CLASSIFICATION	3.0837436323280406E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999880352612286	WITHOUT_CLASSIFICATION	1.1964738771347209E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999880352612286	WITHOUT_CLASSIFICATION	1.1964738771347209E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999884041397565	WITHOUT_CLASSIFICATION	1.1595860243355951E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999810557935929	WITHOUT_CLASSIFICATION	1.894420640706343E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.999769771791345	WITHOUT_CLASSIFICATION	2.3022820865495084E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.999958804635072	WITHOUT_CLASSIFICATION	4.119536492799154E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999760408486649	WITHOUT_CLASSIFICATION	2.3959151335126202E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9998977577162025	WITHOUT_CLASSIFICATION	1.0224228379751405E-4	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999637829238287	WITHOUT_CLASSIFICATION	3.621707617129531E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9998359285230554	WITHOUT_CLASSIFICATION	1.6407147694466893E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9995541292857543	WITHOUT_CLASSIFICATION	4.4587071424572193E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999647131110924	WITHOUT_CLASSIFICATION	3.528688890761389E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999758815270651	WITHOUT_CLASSIFICATION	2.4118472934866848E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9991285754504106	WITHOUT_CLASSIFICATION	8.714245495894228E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999010772223177	WITHOUT_CLASSIFICATION	9.892277768224271E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999010772223177	WITHOUT_CLASSIFICATION	9.892277768224271E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9997600942898525	WITHOUT_CLASSIFICATION	2.3990571014758E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999475413056991	WITHOUT_CLASSIFICATION	5.245869430081518E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9981990472741927	WITHOUT_CLASSIFICATION	0.0018009527258072437	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999622238175288	WITHOUT_CLASSIFICATION	3.7776182471180566E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999928496408799	WITHOUT_CLASSIFICATION	7.150359120103191E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9998852865807859	WITHOUT_CLASSIFICATION	1.147134192140826E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998490749247	WITHOUT_CLASSIFICATION	1.509250752999536E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998302028076822	WITHOUT_CLASSIFICATION	1.697971923178177E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999701023208556	WITHOUT_CLASSIFICATION	2.9897679144396965E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999735842909019	WITHOUT_CLASSIFICATION	2.6415709098119277E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999735639284585	WITHOUT_CLASSIFICATION	2.643607154153983E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9944068708086823	WITHOUT_CLASSIFICATION	0.005593129191317791	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998922829975116	WITHOUT_CLASSIFICATION	1.0771700248830367E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999268294321157	WITHOUT_CLASSIFICATION	7.317056788429312E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9976203943646813	WITHOUT_CLASSIFICATION	0.0023796056353187147	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999859607741928	WITHOUT_CLASSIFICATION	1.4039225807241075E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9998573663072615	WITHOUT_CLASSIFICATION	1.4263369273854185E-4	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999247644030493	WITHOUT_CLASSIFICATION	7.523559695069518E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998928025744266	WITHOUT_CLASSIFICATION	1.071974255734443E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998928025744266	WITHOUT_CLASSIFICATION	1.071974255734443E-4	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999848205692233	WITHOUT_CLASSIFICATION	1.5179430776718827E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9997766416496161	WITHOUT_CLASSIFICATION	2.2335835038383983E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999749985561142	WITHOUT_CLASSIFICATION	2.500144388596093E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999355285827444	WITHOUT_CLASSIFICATION	6.447141725559797E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999355285827444	WITHOUT_CLASSIFICATION	6.447141725559797E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999681578153343	WITHOUT_CLASSIFICATION	3.184218466562472E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.999976521796991	WITHOUT_CLASSIFICATION	2.3478203008930732E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999170522184592	WITHOUT_CLASSIFICATION	8.294778154074494E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997659888429681	WITHOUT_CLASSIFICATION	2.3401115703204108E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997858797482035	WITHOUT_CLASSIFICATION	2.141202517964338E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997858797482035	WITHOUT_CLASSIFICATION	2.141202517964338E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997858797482035	WITHOUT_CLASSIFICATION	2.141202517964338E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997659888429681	WITHOUT_CLASSIFICATION	2.3401115703204108E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999874580307808	WITHOUT_CLASSIFICATION	1.2541969219135816E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9998884847436392	WITHOUT_CLASSIFICATION	1.1151525636079519E-4	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9992051971810668	WITHOUT_CLASSIFICATION	7.94802818933086E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9998740654530512	WITHOUT_CLASSIFICATION	1.259345469487985E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.999796664199079	WITHOUT_CLASSIFICATION	2.0333580092110214E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998533121439871	WITHOUT_CLASSIFICATION	1.4668785601296345E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999923490717864	WITHOUT_CLASSIFICATION	7.65092821359759E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9995966678081917	WITHOUT_CLASSIFICATION	4.033321918082952E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999735639284585	WITHOUT_CLASSIFICATION	2.643607154153983E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.998366368574861	WITHOUT_CLASSIFICATION	0.0016336314251389303	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999493969913148	WITHOUT_CLASSIFICATION	5.060300868522007E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.999991342242169	WITHOUT_CLASSIFICATION	8.657757830875615E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998762406909729	WITHOUT_CLASSIFICATION	1.2375930902706298E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999668680553636	WITHOUT_CLASSIFICATION	3.313194463640076E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996465836908308	WITHOUT_CLASSIFICATION	3.5341630916923005E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999842444714001	WITHOUT_CLASSIFICATION	1.575552859984366E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999762216631318	WITHOUT_CLASSIFICATION	2.3778336868235365E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9997295679764503	WITHOUT_CLASSIFICATION	2.7043202354967775E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999552129099255	WITHOUT_CLASSIFICATION	4.478709007445429E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997932121331926	WITHOUT_CLASSIFICATION	2.067878668072801E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999547274584544	WITHOUT_CLASSIFICATION	4.527254154575166E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999808729794716	WITHOUT_CLASSIFICATION	1.9127020528477987E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999393449237547	WITHOUT_CLASSIFICATION	6.065507624532113E-5	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.999998837411479	WITHOUT_CLASSIFICATION	1.1625885209686815E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9998776238784245	WITHOUT_CLASSIFICATION	1.223761215754914E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999315796177242	WITHOUT_CLASSIFICATION	6.842038227589768E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.999978331003665	WITHOUT_CLASSIFICATION	2.1668996335008166E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.993153958942574	WITHOUT_CLASSIFICATION	0.006846041057426093	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.999989285178833	WITHOUT_CLASSIFICATION	1.0714821167009807E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999875253086099	WITHOUT_CLASSIFICATION	1.247469138996358E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999963653389166	WITHOUT_CLASSIFICATION	3.634661083353014E-6	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999345635597399	WITHOUT_CLASSIFICATION	6.54364402601336E-5	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999834217578096	WITHOUT_CLASSIFICATION	1.6578242190339496E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999067726348316	WITHOUT_CLASSIFICATION	9.322736516838791E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999186434186685	WITHOUT_CLASSIFICATION	8.135658133152335E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9997308100171476	WITHOUT_CLASSIFICATION	2.6918998285240095E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999681578153343	WITHOUT_CLASSIFICATION	3.184218466562472E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999141908327505	WITHOUT_CLASSIFICATION	8.580916724952443E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997659888429681	WITHOUT_CLASSIFICATION	2.3401115703204108E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998533121439871	WITHOUT_CLASSIFICATION	1.4668785601296345E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999493969913148	WITHOUT_CLASSIFICATION	5.060300868522007E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998762406909729	WITHOUT_CLASSIFICATION	1.2375930902706298E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996465836908308	WITHOUT_CLASSIFICATION	3.5341630916923005E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.999991342242169	WITHOUT_CLASSIFICATION	8.657757830875615E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999842444714001	WITHOUT_CLASSIFICATION	1.575552859984366E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999552129099255	WITHOUT_CLASSIFICATION	4.478709007445429E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9997295679764503	WITHOUT_CLASSIFICATION	2.7043202354967775E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999547274584544	WITHOUT_CLASSIFICATION	4.527254154575166E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999845547450111	WITHOUT_CLASSIFICATION	1.54452549888269E-5	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9992350605600611	WITHOUT_CLASSIFICATION	7.649394399388612E-4	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999019049173387	WITHOUT_CLASSIFICATION	9.809508266128074E-5	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999691443169867	WITHOUT_CLASSIFICATION	3.085568301332177E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999508877258649	WITHOUT_CLASSIFICATION	4.911227413501751E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999517286992531	WITHOUT_CLASSIFICATION	4.8271300746985786E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.999864407427808	WITHOUT_CLASSIFICATION	1.3559257219206887E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9995536297131932	WITHOUT_CLASSIFICATION	4.46370286806764E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.999603880083225	WITHOUT_CLASSIFICATION	3.9611991677501865E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.999958557561406	WITHOUT_CLASSIFICATION	4.144243859396276E-5	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999774440068702	WITHOUT_CLASSIFICATION	2.2555993129767253E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997315387653888	WITHOUT_CLASSIFICATION	2.6846123461114714E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999628053084849	WITHOUT_CLASSIFICATION	3.719469151509547E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999330999019098	WITHOUT_CLASSIFICATION	6.690009809014615E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999053350221973	WITHOUT_CLASSIFICATION	9.466497780273109E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999541688531998	WITHOUT_CLASSIFICATION	4.583114680019305E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997121167709192	WITHOUT_CLASSIFICATION	2.878832290808995E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999758533201294	WITHOUT_CLASSIFICATION	2.4146679870540883E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999900878287168	WITHOUT_CLASSIFICATION	9.912171283215116E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999192352211739	WITHOUT_CLASSIFICATION	8.076477882604252E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9998009780891238	WITHOUT_CLASSIFICATION	1.9902191087630292E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9998009780891238	WITHOUT_CLASSIFICATION	1.9902191087630292E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9989961229290965	WITHOUT_CLASSIFICATION	0.001003877070903518	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997142072678772	WITHOUT_CLASSIFICATION	2.8579273212285696E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997142072678772	WITHOUT_CLASSIFICATION	2.8579273212285696E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999314060424248	WITHOUT_CLASSIFICATION	6.859395757520211E-5	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999314060424248	WITHOUT_CLASSIFICATION	6.859395757520211E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998659214884056	WITHOUT_CLASSIFICATION	1.34078511594428E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998659214884056	WITHOUT_CLASSIFICATION	1.34078511594428E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999926486474879	WITHOUT_CLASSIFICATION	7.351352512059027E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.998745214230035	WITHOUT_CLASSIFICATION	0.0012547857699649406	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.998745214230035	WITHOUT_CLASSIFICATION	0.0012547857699649406	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999785642771882	WITHOUT_CLASSIFICATION	2.1435722811748003E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999785642771882	WITHOUT_CLASSIFICATION	2.1435722811748003E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998617771064865	WITHOUT_CLASSIFICATION	1.382228935134942E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999829192932068	WITHOUT_CLASSIFICATION	1.708070679319949E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.999829192932068	WITHOUT_CLASSIFICATION	1.708070679319949E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998650422660871	WITHOUT_CLASSIFICATION	1.3495773391300586E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9997968592128725	WITHOUT_CLASSIFICATION	2.031407871274126E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998878736501124	WITHOUT_CLASSIFICATION	1.1212634988766916E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998650422660871	WITHOUT_CLASSIFICATION	1.3495773391300586E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9997978348449728	WITHOUT_CLASSIFICATION	2.021651550271931E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999991875043887	WITHOUT_CLASSIFICATION	8.124956113423733E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998471979554141	WITHOUT_CLASSIFICATION	1.5280204458600078E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999988238929906	WITHOUT_CLASSIFICATION	1.1761070093894411E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999967970218149	WITHOUT_CLASSIFICATION	3.2029781850893586E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999967970218149	WITHOUT_CLASSIFICATION	3.2029781850893586E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999828318019913	WITHOUT_CLASSIFICATION	1.7168198008675048E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999889719257561	WITHOUT_CLASSIFICATION	1.1028074243909627E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999889719257561	WITHOUT_CLASSIFICATION	1.1028074243909627E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998532938879447	WITHOUT_CLASSIFICATION	1.4670611205515457E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998471979554141	WITHOUT_CLASSIFICATION	1.5280204458600078E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999988238929906	WITHOUT_CLASSIFICATION	1.1761070093894411E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999967970218149	WITHOUT_CLASSIFICATION	3.2029781850893586E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999967970218149	WITHOUT_CLASSIFICATION	3.2029781850893586E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999828318019913	WITHOUT_CLASSIFICATION	1.7168198008675048E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9998579339902288	WITHOUT_CLASSIFICATION	1.4206600977114122E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998926929876171	WITHOUT_CLASSIFICATION	1.0730701238293828E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9993126296873857	WITHOUT_CLASSIFICATION	6.873703126144015E-4	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9998760679554715	WITHOUT_CLASSIFICATION	1.2393204452856645E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.999899310779989	WITHOUT_CLASSIFICATION	1.0068922001101574E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999862712732361	WITHOUT_CLASSIFICATION	1.3728726763870074E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999818858707192	WITHOUT_CLASSIFICATION	1.8114129280727934E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999818858707192	WITHOUT_CLASSIFICATION	1.8114129280727934E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9965300151750854	WITHOUT_CLASSIFICATION	0.0034699848249146567	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9992764037270162	WITHOUT_CLASSIFICATION	7.235962729837922E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9992761763020052	WITHOUT_CLASSIFICATION	7.238236979948878E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9997717812708558	WITHOUT_CLASSIFICATION	2.2821872914429922E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992770982627043	WITHOUT_CLASSIFICATION	7.22901737295723E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992770982627043	WITHOUT_CLASSIFICATION	7.22901737295723E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9993652276081981	WITHOUT_CLASSIFICATION	6.347723918018873E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9993620757484157	WITHOUT_CLASSIFICATION	6.379242515842391E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998715460577763	WITHOUT_CLASSIFICATION	1.2845394222368408E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998715460577763	WITHOUT_CLASSIFICATION	1.2845394222368408E-4	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9992761763020052	WITHOUT_CLASSIFICATION	7.238236979948878E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9998550020823866	WITHOUT_CLASSIFICATION	1.4499791761335358E-4	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999555963968463	WITHOUT_CLASSIFICATION	4.4403603153770135E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999786575178109	WITHOUT_CLASSIFICATION	2.1342482189051362E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997538535705659	WITHOUT_CLASSIFICATION	2.461464294340082E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.999955083159274	WITHOUT_CLASSIFICATION	4.4916840726156636E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9998051336723952	WITHOUT_CLASSIFICATION	1.948663276047797E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999316600315928	WITHOUT_CLASSIFICATION	6.833996840718257E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9996567605302061	WITHOUT_CLASSIFICATION	3.432394697938808E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999992275514323	WITHOUT_CLASSIFICATION	7.724485677766705E-7	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999129215143893	WITHOUT_CLASSIFICATION	8.707848561073735E-5	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999129215143893	WITHOUT_CLASSIFICATION	8.707848561073735E-5	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999823418422349	WITHOUT_CLASSIFICATION	1.7658157765106656E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.999823418422349	WITHOUT_CLASSIFICATION	1.7658157765106656E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999245445643662	WITHOUT_CLASSIFICATION	7.545543563384531E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993781903220256	WITHOUT_CLASSIFICATION	6.218096779743925E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993781903220256	WITHOUT_CLASSIFICATION	6.218096779743925E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9993781903220256	WITHOUT_CLASSIFICATION	6.218096779743925E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999954023302223	WITHOUT_CLASSIFICATION	4.597669777698815E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999954023302223	WITHOUT_CLASSIFICATION	4.597669777698815E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999356474599703	WITHOUT_CLASSIFICATION	6.435254002967542E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9991091147129163	WITHOUT_CLASSIFICATION	8.908852870836948E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999658573049446	WITHOUT_CLASSIFICATION	3.4142695055501624E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999982248304502	WITHOUT_CLASSIFICATION	1.7751695498153553E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999637362424778	WITHOUT_CLASSIFICATION	3.626375752216285E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9998620296824875	WITHOUT_CLASSIFICATION	1.3797031751256174E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9986043001868545	WITHOUT_CLASSIFICATION	0.0013956998131454577	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999356474599703	WITHOUT_CLASSIFICATION	6.435254002967542E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.99997918770475	WITHOUT_CLASSIFICATION	2.0812295249943983E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9991091147129163	WITHOUT_CLASSIFICATION	8.908852870836948E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999658573049446	WITHOUT_CLASSIFICATION	3.4142695055501624E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998851466219039	WITHOUT_CLASSIFICATION	1.1485337809602863E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999683247408223	WITHOUT_CLASSIFICATION	3.167525917771473E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998511119761133	WITHOUT_CLASSIFICATION	1.4888802388676056E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.999940664410763	WITHOUT_CLASSIFICATION	5.933558923692771E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999706334761916	WITHOUT_CLASSIFICATION	2.9366523808340042E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9998729575770838	WITHOUT_CLASSIFICATION	1.2704242291612213E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998851466219039	WITHOUT_CLASSIFICATION	1.1485337809602863E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999659406899846	WITHOUT_CLASSIFICATION	3.405931001549496E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999659406899846	WITHOUT_CLASSIFICATION	3.405931001549496E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999664077034174	WITHOUT_CLASSIFICATION	3.3592296582591886E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999777952337376	WITHOUT_CLASSIFICATION	2.22047662624236E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999377830757711	WITHOUT_CLASSIFICATION	6.221692422885893E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9996251255971693	WITHOUT_CLASSIFICATION	3.7487440283065433E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994315285372016	WITHOUT_CLASSIFICATION	5.684714627984166E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999949600686808	WITHOUT_CLASSIFICATION	5.039931319240356E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9998804870717287	WITHOUT_CLASSIFICATION	1.1951292827137808E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999276497420713	WITHOUT_CLASSIFICATION	7.235025792865751E-5	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999674082608199	WITHOUT_CLASSIFICATION	3.2591739180182206E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999696026868162	WITHOUT_CLASSIFICATION	3.0397313183864842E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999400974780234	WITHOUT_CLASSIFICATION	5.990252197651864E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9996251255971693	WITHOUT_CLASSIFICATION	3.7487440283065433E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994315285372016	WITHOUT_CLASSIFICATION	5.684714627984166E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999053231795086	WITHOUT_CLASSIFICATION	9.467682049143589E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999511991843283	WITHOUT_CLASSIFICATION	4.880081567168036E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9998853322249318	WITHOUT_CLASSIFICATION	1.1466777506812331E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999660373733041	WITHOUT_CLASSIFICATION	3.396262669589698E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999643818529813	WITHOUT_CLASSIFICATION	3.561814701865311E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999596329370608	WITHOUT_CLASSIFICATION	4.036706293911078E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999428518175476	WITHOUT_CLASSIFICATION	5.714818245235538E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.998276106252749	WITHOUT_CLASSIFICATION	0.0017238937472509666	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999716191110235	WITHOUT_CLASSIFICATION	2.838088897659495E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999642084236776	WITHOUT_CLASSIFICATION	3.579157632239866E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999754874306177	WITHOUT_CLASSIFICATION	2.4512569382406676E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999332806428162	WITHOUT_CLASSIFICATION	6.67193571838864E-5	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999965132630682	WITHOUT_CLASSIFICATION	3.48673693195826E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999642084236776	WITHOUT_CLASSIFICATION	3.579157632239866E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999754874306177	WITHOUT_CLASSIFICATION	2.4512569382406676E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999332806428162	WITHOUT_CLASSIFICATION	6.67193571838864E-5	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9997910251733049	WITHOUT_CLASSIFICATION	2.0897482669514478E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9993247112447508	WITHOUT_CLASSIFICATION	6.752887552492073E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9998020596757216	WITHOUT_CLASSIFICATION	1.9794032427852552E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9985752048238183	WITHOUT_CLASSIFICATION	0.0014247951761816925	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999043627069077	WITHOUT_CLASSIFICATION	9.563729309237874E-5	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999413889972893	WITHOUT_CLASSIFICATION	5.861100271073782E-5	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9998946930901749	WITHOUT_CLASSIFICATION	1.0530690982509193E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999660857851955	WITHOUT_CLASSIFICATION	3.391421480449042E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999881685053356	WITHOUT_CLASSIFICATION	1.1831494664464601E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9793927745951442	WITHOUT_CLASSIFICATION	0.02060722540485582	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.999844917536252	WITHOUT_CLASSIFICATION	1.550824637480011E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9998140992667938	WITHOUT_CLASSIFICATION	1.8590073320623552E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999959097415766	WITHOUT_CLASSIFICATION	4.090258423368321E-6	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9997642909148314	WITHOUT_CLASSIFICATION	2.3570908516869866E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999715114034728	WITHOUT_CLASSIFICATION	2.8488596527120505E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9995303554988136	WITHOUT_CLASSIFICATION	4.696445011864158E-4	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9996434374070524	WITHOUT_CLASSIFICATION	3.5656259294752863E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999943754607485	WITHOUT_CLASSIFICATION	5.624539251424361E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999308914740279	WITHOUT_CLASSIFICATION	6.910852597212367E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999631129219079	WITHOUT_CLASSIFICATION	3.688707809215451E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999829656428219	WITHOUT_CLASSIFICATION	1.7034357178206774E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999829656428219	WITHOUT_CLASSIFICATION	1.7034357178206774E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999160398916286	WITHOUT_CLASSIFICATION	8.396010837141902E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999160398916286	WITHOUT_CLASSIFICATION	8.396010837141902E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999927236872866	WITHOUT_CLASSIFICATION	7.2763127133866425E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999927236872866	WITHOUT_CLASSIFICATION	7.2763127133866425E-6	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999926842583764	WITHOUT_CLASSIFICATION	7.315741623650329E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999996233466172	WITHOUT_CLASSIFICATION	3.7665338278135175E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999572055815277	WITHOUT_CLASSIFICATION	4.279441847246523E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999913301624322	WITHOUT_CLASSIFICATION	8.669837567725179E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999998750545136	WITHOUT_CLASSIFICATION	1.2494548640057238E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999953981994822	WITHOUT_CLASSIFICATION	4.601800517816557E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.999954159200762	WITHOUT_CLASSIFICATION	4.584079923800952E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999772736512929	WITHOUT_CLASSIFICATION	2.2726348707232227E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999926842583764	WITHOUT_CLASSIFICATION	7.315741623650329E-6	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999996233466172	WITHOUT_CLASSIFICATION	3.7665338278135175E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999572055815277	WITHOUT_CLASSIFICATION	4.279441847246523E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999998750545136	WITHOUT_CLASSIFICATION	1.2494548640057238E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999953981994822	WITHOUT_CLASSIFICATION	4.601800517816557E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999266393665338	WITHOUT_CLASSIFICATION	7.336063346625299E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9998950721321362	WITHOUT_CLASSIFICATION	1.049278678636564E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998197992152683	WITHOUT_CLASSIFICATION	1.8020078473168191E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998197992152683	WITHOUT_CLASSIFICATION	1.8020078473168191E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9998911134464545	WITHOUT_CLASSIFICATION	1.0888655354544886E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.99992675764582	WITHOUT_CLASSIFICATION	7.324235418001862E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9984510259170996	WITHOUT_CLASSIFICATION	0.0015489740829004847	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999827406888897	WITHOUT_CLASSIFICATION	1.7259311110242035E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999827406888897	WITHOUT_CLASSIFICATION	1.7259311110242035E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999736088298047	WITHOUT_CLASSIFICATION	2.639117019529737E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999992963966165	WITHOUT_CLASSIFICATION	7.036033834996785E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998559808677621	WITHOUT_CLASSIFICATION	1.4401913223790962E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999612552981145	WITHOUT_CLASSIFICATION	3.8744701885356084E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9998264087086579	WITHOUT_CLASSIFICATION	1.7359129134200514E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997315387653888	WITHOUT_CLASSIFICATION	2.6846123461114714E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999628053084849	WITHOUT_CLASSIFICATION	3.719469151509547E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999330999019098	WITHOUT_CLASSIFICATION	6.690009809014615E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999053350221973	WITHOUT_CLASSIFICATION	9.466497780273109E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999758533201294	WITHOUT_CLASSIFICATION	2.4146679870540883E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999900878287168	WITHOUT_CLASSIFICATION	9.912171283215116E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999736088298047	WITHOUT_CLASSIFICATION	2.639117019529737E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999992963966165	WITHOUT_CLASSIFICATION	7.036033834996785E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999612552981145	WITHOUT_CLASSIFICATION	3.8744701885356084E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999135124112548	WITHOUT_CLASSIFICATION	8.648758874520278E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9984510259170996	WITHOUT_CLASSIFICATION	0.0015489740829004847	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9984510259170996	WITHOUT_CLASSIFICATION	0.0015489740829004847	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999400974780234	WITHOUT_CLASSIFICATION	5.990252197651864E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999400974780234	WITHOUT_CLASSIFICATION	5.990252197651864E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995413901182508	WITHOUT_CLASSIFICATION	4.586098817492421E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995413901182508	WITHOUT_CLASSIFICATION	4.586098817492421E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999735187629967	WITHOUT_CLASSIFICATION	2.64812370032975E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9997727000062576	WITHOUT_CLASSIFICATION	2.2729999374225857E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999150499818105	WITHOUT_CLASSIFICATION	8.495001818958483E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999715919213555	WITHOUT_CLASSIFICATION	2.8408078644416598E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9998542106369106	WITHOUT_CLASSIFICATION	1.4578936308939206E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999420494488727	WITHOUT_CLASSIFICATION	5.795055112734532E-5	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.998968948523222	WITHOUT_CLASSIFICATION	0.001031051476777987	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999947264367038	WITHOUT_CLASSIFICATION	5.273563296174676E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9998762331418578	WITHOUT_CLASSIFICATION	1.2376685814218452E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.999981999955144	WITHOUT_CLASSIFICATION	1.8000044855926316E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999612502551127	WITHOUT_CLASSIFICATION	3.8749744887316885E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999859634006739	WITHOUT_CLASSIFICATION	1.403659932600139E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999542660423046	WITHOUT_CLASSIFICATION	4.573395769536444E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999548671482787	WITHOUT_CLASSIFICATION	4.51328517211667E-5	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999639933839989	WITHOUT_CLASSIFICATION	3.6006616001157236E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.999911265095556	WITHOUT_CLASSIFICATION	8.873490444416357E-5	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999797391658115	WITHOUT_CLASSIFICATION	2.026083418849666E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999615232640169	WITHOUT_CLASSIFICATION	3.847673598311785E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999628053084849	WITHOUT_CLASSIFICATION	3.719469151509547E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999053350221973	WITHOUT_CLASSIFICATION	9.466497780273109E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999135124112548	WITHOUT_CLASSIFICATION	8.648758874520278E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9984510259170996	WITHOUT_CLASSIFICATION	0.0015489740829004847	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999400974780234	WITHOUT_CLASSIFICATION	5.990252197651864E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995413901182508	WITHOUT_CLASSIFICATION	4.586098817492421E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.999933437399779	WITHOUT_CLASSIFICATION	6.656260022095724E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999663269327881	WITHOUT_CLASSIFICATION	3.367306721194346E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999892836219448	WITHOUT_CLASSIFICATION	1.0716378055088349E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9988968416096794	WITHOUT_CLASSIFICATION	0.0011031583903205625	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9986721526792948	WITHOUT_CLASSIFICATION	0.001327847320705297	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9986721526792948	WITHOUT_CLASSIFICATION	0.001327847320705297	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999591278162699	WITHOUT_CLASSIFICATION	4.087218373007216E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999685590642178	WITHOUT_CLASSIFICATION	3.144093578219258E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999619661781385	WITHOUT_CLASSIFICATION	3.8033821861511904E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999692162930085	WITHOUT_CLASSIFICATION	3.0783706991605104E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999885532350918	WITHOUT_CLASSIFICATION	1.1446764908302837E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999885532350918	WITHOUT_CLASSIFICATION	1.1446764908302837E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999828203176958	WITHOUT_CLASSIFICATION	1.7179682304202743E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999745066846453	WITHOUT_CLASSIFICATION	2.549331535465083E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999187746435405	WITHOUT_CLASSIFICATION	8.122535645942703E-5	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9997855956464577	WITHOUT_CLASSIFICATION	2.1440435354228392E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999968077444881	WITHOUT_CLASSIFICATION	3.192255511929997E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999674955370813	WITHOUT_CLASSIFICATION	3.2504462918795005E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999679604658923	WITHOUT_CLASSIFICATION	3.2039534107606907E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9997594847345731	WITHOUT_CLASSIFICATION	2.4051526542683146E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9910747667766809	WITHOUT_CLASSIFICATION	0.008925233223319012	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.999715724641768	WITHOUT_CLASSIFICATION	2.8427535823196006E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9990026409288847	WITHOUT_CLASSIFICATION	9.973590711153135E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999674829908263	WITHOUT_CLASSIFICATION	3.2517009173689254E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999933043494007	WITHOUT_CLASSIFICATION	6.695650599226985E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999755006309909	WITHOUT_CLASSIFICATION	2.4499369009079322E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9996008574689169	WITHOUT_CLASSIFICATION	3.991425310831958E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9996878770788841	WITHOUT_CLASSIFICATION	3.1212292111596325E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9998614106243735	WITHOUT_CLASSIFICATION	1.3858937562650204E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999173453006067	WITHOUT_CLASSIFICATION	8.265469939331428E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9998555271284273	WITHOUT_CLASSIFICATION	1.4447287157277124E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999822056720837	WITHOUT_CLASSIFICATION	1.779432791625496E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9997352827085106	WITHOUT_CLASSIFICATION	2.6471729148930815E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999971431343964	WITHOUT_CLASSIFICATION	2.8568656035985964E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999971431343964	WITHOUT_CLASSIFICATION	2.8568656035985964E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9997644470402207	WITHOUT_CLASSIFICATION	2.3555295977930932E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998849091595198	WITHOUT_CLASSIFICATION	1.150908404801583E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998302028076822	WITHOUT_CLASSIFICATION	1.697971923178177E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998302028076822	WITHOUT_CLASSIFICATION	1.697971923178177E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.8351394547830189	DEFECT	0.1648605452169811	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9991419079382534	WITHOUT_CLASSIFICATION	8.580920617465875E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999244497259642	WITHOUT_CLASSIFICATION	7.555027403586935E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999237721904305	WITHOUT_CLASSIFICATION	7.622780956958295E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999237721904305	WITHOUT_CLASSIFICATION	7.622780956958295E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.999812758519638	WITHOUT_CLASSIFICATION	1.8724148036200713E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999926347912196	WITHOUT_CLASSIFICATION	7.365208780416659E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999773404913911	WITHOUT_CLASSIFICATION	2.2659508608863136E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999769300620184	WITHOUT_CLASSIFICATION	2.306993798153306E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9963283803669896	WITHOUT_CLASSIFICATION	0.003671619633010424	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999836817206124	WITHOUT_CLASSIFICATION	1.6318279387654154E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999671100197907	WITHOUT_CLASSIFICATION	3.288998020932207E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999699930945911	WITHOUT_CLASSIFICATION	3.000690540897569E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999879318642981	WITHOUT_CLASSIFICATION	1.2068135701957372E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998363987946068	WITHOUT_CLASSIFICATION	1.6360120539318635E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999870827570906	WITHOUT_CLASSIFICATION	1.2917242909526674E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999896690684362	WITHOUT_CLASSIFICATION	1.0330931563841704E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999974885801428	WITHOUT_CLASSIFICATION	2.511419857315103E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9989543099197732	WITHOUT_CLASSIFICATION	0.0010456900802267653	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999345902251512	WITHOUT_CLASSIFICATION	6.540977484882838E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999250443927511	WITHOUT_CLASSIFICATION	7.495560724882817E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999938279993056	WITHOUT_CLASSIFICATION	6.172000694481667E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999773856595875	WITHOUT_CLASSIFICATION	2.261434041256445E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999717327959676	WITHOUT_CLASSIFICATION	2.8267204032355697E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999837525196446	WITHOUT_CLASSIFICATION	1.6247480355412045E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999791921132556	WITHOUT_CLASSIFICATION	2.0807886744429535E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999836322446091	WITHOUT_CLASSIFICATION	1.636775539097382E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999574295578246	WITHOUT_CLASSIFICATION	4.257044217534064E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998923085289362	WITHOUT_CLASSIFICATION	1.0769147106390484E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999894883798919	WITHOUT_CLASSIFICATION	1.0511620108185282E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9996360152930581	WITHOUT_CLASSIFICATION	3.6398470694185155E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9524251000424643	WITHOUT_CLASSIFICATION	0.04757489995753576	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998960722948531	WITHOUT_CLASSIFICATION	1.0392770514690226E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999688963302118	WITHOUT_CLASSIFICATION	3.110366978823132E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999573070830691	WITHOUT_CLASSIFICATION	4.2692916930935704E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999889319182979	WITHOUT_CLASSIFICATION	1.1068081702057895E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9989543099197732	WITHOUT_CLASSIFICATION	0.0010456900802267653	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998960722948531	WITHOUT_CLASSIFICATION	1.0392770514690226E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999688963302118	WITHOUT_CLASSIFICATION	3.110366978823132E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999889319182979	WITHOUT_CLASSIFICATION	1.1068081702057895E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999699668819717	WITHOUT_CLASSIFICATION	3.0033118028291247E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999845543484558	WITHOUT_CLASSIFICATION	1.5445651544259905E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999578625566854	WITHOUT_CLASSIFICATION	4.2137443314683045E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999925897364403	WITHOUT_CLASSIFICATION	7.410263559711301E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999990377719282	WITHOUT_CLASSIFICATION	9.622280717971797E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9996642765510328	WITHOUT_CLASSIFICATION	3.3572344896716223E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999822056720837	WITHOUT_CLASSIFICATION	1.779432791625496E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9998492005134921	WITHOUT_CLASSIFICATION	1.5079948650789201E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999876261474437	WITHOUT_CLASSIFICATION	1.2373852556299837E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9972427815490601	WITHOUT_CLASSIFICATION	0.0027572184509398324	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9990503137736837	WITHOUT_CLASSIFICATION	9.496862263162988E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9990503137736837	WITHOUT_CLASSIFICATION	9.496862263162988E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999609968852184	WITHOUT_CLASSIFICATION	3.900311478163762E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999842303800822	WITHOUT_CLASSIFICATION	1.5769619917868142E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999555355393541	WITHOUT_CLASSIFICATION	4.446446064594625E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9992063371132294	WITHOUT_CLASSIFICATION	7.936628867705691E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999031400134243	WITHOUT_CLASSIFICATION	9.685998657568633E-5	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998894911853891	WITHOUT_CLASSIFICATION	1.1050881461103145E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9835306490277784	WITHOUT_CLASSIFICATION	0.016469350972221606	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.999991000179007	WITHOUT_CLASSIFICATION	8.999820993022196E-6	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999362889280893	WITHOUT_CLASSIFICATION	6.371107191065283E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9998957375469967	WITHOUT_CLASSIFICATION	1.0426245300338181E-4	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999333822764506	WITHOUT_CLASSIFICATION	6.661772354940854E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999289934544892	WITHOUT_CLASSIFICATION	7.100654551083495E-5	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999671896552894	WITHOUT_CLASSIFICATION	3.281034471059032E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999748021185011	WITHOUT_CLASSIFICATION	2.5197881498913684E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9997076094060008	WITHOUT_CLASSIFICATION	2.9239059399916914E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999320574829296	WITHOUT_CLASSIFICATION	6.794251707045885E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9998907372790521	WITHOUT_CLASSIFICATION	1.0926272094800373E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999647295221827	WITHOUT_CLASSIFICATION	3.5270477817277694E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998402748211532	WITHOUT_CLASSIFICATION	1.5972517884680617E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.999826408014437	WITHOUT_CLASSIFICATION	1.7359198556304316E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999651962799838	WITHOUT_CLASSIFICATION	3.480372001619775E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9998918735018033	WITHOUT_CLASSIFICATION	1.0812649819667554E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999278450257427	WITHOUT_CLASSIFICATION	7.215497425722293E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.999930509877397	WITHOUT_CLASSIFICATION	6.949012260302205E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.5528481804880612	WITHOUT_CLASSIFICATION	0.44715181951193894	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9997713190910481	WITHOUT_CLASSIFICATION	2.286809089519168E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9998298996567297	WITHOUT_CLASSIFICATION	1.7010034327030865E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999687844638904	WITHOUT_CLASSIFICATION	3.121553610961773E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.999943092276836	WITHOUT_CLASSIFICATION	5.690772316403444E-5	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999516600944083	WITHOUT_CLASSIFICATION	4.8339905591789565E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999942073494126	WITHOUT_CLASSIFICATION	5.792650587435441E-6	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999840168577019	WITHOUT_CLASSIFICATION	1.5983142298189524E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999800921706385	WITHOUT_CLASSIFICATION	1.990782936148008E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9998312564289743	WITHOUT_CLASSIFICATION	1.687435710256467E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999390351143336	WITHOUT_CLASSIFICATION	6.096488566655012E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9992425833371147	WITHOUT_CLASSIFICATION	7.574166628852561E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999862041307594	WITHOUT_CLASSIFICATION	1.3795869240644562E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999609562422455	WITHOUT_CLASSIFICATION	3.904375775455229E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.996700152943384	WITHOUT_CLASSIFICATION	0.003299847056616014	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994381296456966	WITHOUT_CLASSIFICATION	5.618703543035425E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999087721620712	WITHOUT_CLASSIFICATION	9.122783792878305E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9989681939904693	WITHOUT_CLASSIFICATION	0.001031806009530688	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9975548094648722	WITHOUT_CLASSIFICATION	0.002445190535127811	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9985273468838486	WITHOUT_CLASSIFICATION	0.00147265311615139	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9992438380465534	WITHOUT_CLASSIFICATION	7.561619534466435E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999916686025179	WITHOUT_CLASSIFICATION	8.331397482093348E-5	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9998915437612352	WITHOUT_CLASSIFICATION	1.0845623876485091E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998256275686418	WITHOUT_CLASSIFICATION	1.7437243135827094E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999536524697153	WITHOUT_CLASSIFICATION	4.6347530284730354E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9916205112822318	WITHOUT_CLASSIFICATION	0.00837948871776812	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9997852057930042	WITHOUT_CLASSIFICATION	2.1479420699580844E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9966620873664613	WITHOUT_CLASSIFICATION	0.003337912633538679	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996820111177231	WITHOUT_CLASSIFICATION	3.179888822768465E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9998286105562348	WITHOUT_CLASSIFICATION	1.713894437652065E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9996083815658536	WITHOUT_CLASSIFICATION	3.916184341463088E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9995189757985026	WITHOUT_CLASSIFICATION	4.8102420149736353E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9986841292244483	WITHOUT_CLASSIFICATION	0.0013158707755517877	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9986841292244483	WITHOUT_CLASSIFICATION	0.0013158707755517877	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996629576085933	WITHOUT_CLASSIFICATION	3.370423914067936E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999334008962394	WITHOUT_CLASSIFICATION	6.659910376062519E-5	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996699971118634	WITHOUT_CLASSIFICATION	3.3000288813656546E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9997842710793969	WITHOUT_CLASSIFICATION	2.157289206029906E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9998733434824669	WITHOUT_CLASSIFICATION	1.2665651753301365E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998899498773524	WITHOUT_CLASSIFICATION	1.1005012264758288E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998663989822342	WITHOUT_CLASSIFICATION	1.3360101776575223E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9996324758956623	WITHOUT_CLASSIFICATION	3.67524104337728E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999861031663785	WITHOUT_CLASSIFICATION	1.3896833621525788E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.999996811861545	WITHOUT_CLASSIFICATION	3.1881384550279956E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998572183333408	WITHOUT_CLASSIFICATION	1.4278166665907915E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999554501693104	WITHOUT_CLASSIFICATION	4.454983068964744E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999386121707856	WITHOUT_CLASSIFICATION	6.138782921445445E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998882847731034	WITHOUT_CLASSIFICATION	1.1171522689651278E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999676348665595	WITHOUT_CLASSIFICATION	3.23651334404535E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999311601294427	WITHOUT_CLASSIFICATION	6.883987055733065E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999648083274212	WITHOUT_CLASSIFICATION	3.519167257888831E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999523246681263	WITHOUT_CLASSIFICATION	4.7675331873515675E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9980660344639931	WITHOUT_CLASSIFICATION	0.0019339655360068896	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9988415859491774	WITHOUT_CLASSIFICATION	0.0011584140508226284	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999244234823068	WITHOUT_CLASSIFICATION	7.557651769315116E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999447861348497	WITHOUT_CLASSIFICATION	5.5213865150319076E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.999950988468995	WITHOUT_CLASSIFICATION	4.901153100492926E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999432904403832	WITHOUT_CLASSIFICATION	5.6709559616943004E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998791459439301	WITHOUT_CLASSIFICATION	1.2085405606995626E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9997837813001172	WITHOUT_CLASSIFICATION	2.162186998828637E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999812935700773	WITHOUT_CLASSIFICATION	1.8706429922782318E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9994801490147367	WITHOUT_CLASSIFICATION	5.198509852633757E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.999977580274684	WITHOUT_CLASSIFICATION	2.241972531607472E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9953828130775136	WITHOUT_CLASSIFICATION	0.004617186922486398	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9996312772833864	WITHOUT_CLASSIFICATION	3.6872271661367306E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999160281015393	WITHOUT_CLASSIFICATION	8.397189846061007E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999636768354757	WITHOUT_CLASSIFICATION	3.6323164524266346E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999546317394856	WITHOUT_CLASSIFICATION	4.536826051439227E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999636768354757	WITHOUT_CLASSIFICATION	3.6323164524266346E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9998777093043993	WITHOUT_CLASSIFICATION	1.2229069560066208E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9992478430859476	WITHOUT_CLASSIFICATION	7.521569140523046E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9992478430859476	WITHOUT_CLASSIFICATION	7.521569140523046E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9992478430859476	WITHOUT_CLASSIFICATION	7.521569140523046E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999972214996669	WITHOUT_CLASSIFICATION	2.778500333134201E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999972214996669	WITHOUT_CLASSIFICATION	2.778500333134201E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9993850785651581	WITHOUT_CLASSIFICATION	6.14921434841931E-4	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9998891308358523	WITHOUT_CLASSIFICATION	1.1086916414781379E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9998641881554675	WITHOUT_CLASSIFICATION	1.3581184453248862E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.999981864329325	WITHOUT_CLASSIFICATION	1.8135670674947346E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999936924472368	WITHOUT_CLASSIFICATION	6.307552763325947E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999937857939414	WITHOUT_CLASSIFICATION	6.214206058685436E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9997303019994999	WITHOUT_CLASSIFICATION	2.6969800050011624E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999257477656359	WITHOUT_CLASSIFICATION	7.425223436402868E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999284000883318	WITHOUT_CLASSIFICATION	7.159991166813793E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999852920811879	WITHOUT_CLASSIFICATION	1.4707918811991194E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999791455275242	WITHOUT_CLASSIFICATION	2.085447247587396E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996214136604942	WITHOUT_CLASSIFICATION	3.7858633950573704E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999838568772733	WITHOUT_CLASSIFICATION	1.6143122726647192E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.999976540613247	WITHOUT_CLASSIFICATION	2.3459386752921278E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999486731570701	WITHOUT_CLASSIFICATION	5.1326842929839924E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999643148388414	WITHOUT_CLASSIFICATION	3.5685161158565044E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998572646751165	WITHOUT_CLASSIFICATION	1.4273532488341448E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.999962624265142	WITHOUT_CLASSIFICATION	3.737573485787984E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.999962624265142	WITHOUT_CLASSIFICATION	3.737573485787984E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999640337622492	WITHOUT_CLASSIFICATION	3.5966237750779975E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999735502018157	WITHOUT_CLASSIFICATION	2.64497981842927E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999735502018157	WITHOUT_CLASSIFICATION	2.64497981842927E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9998228006534591	WITHOUT_CLASSIFICATION	1.7719934654084933E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999685748345817	WITHOUT_CLASSIFICATION	3.142516541827259E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999988908132801	WITHOUT_CLASSIFICATION	1.1091867199009897E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999593237833082	WITHOUT_CLASSIFICATION	4.067621669181218E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.999982665580967	WITHOUT_CLASSIFICATION	1.733441903302341E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.99983355272055	WITHOUT_CLASSIFICATION	1.6644727945010126E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999651233213602	WITHOUT_CLASSIFICATION	3.487667863971491E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999753733789801	WITHOUT_CLASSIFICATION	2.46266210198411E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999631335846331	WITHOUT_CLASSIFICATION	3.686641536690068E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999932730502016	WITHOUT_CLASSIFICATION	6.7269497984324835E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999986742765855	WITHOUT_CLASSIFICATION	1.3257234145035685E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9994803497444087	WITHOUT_CLASSIFICATION	5.196502555912084E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999921213533741	WITHOUT_CLASSIFICATION	7.87864662585176E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999791071723624	WITHOUT_CLASSIFICATION	2.0892827637703565E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999257477656359	WITHOUT_CLASSIFICATION	7.425223436402868E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999551974081087	WITHOUT_CLASSIFICATION	4.4802591891273355E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999964092356235	WITHOUT_CLASSIFICATION	3.5907643765912493E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999964092356235	WITHOUT_CLASSIFICATION	3.5907643765912493E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999179051011131	WITHOUT_CLASSIFICATION	8.209489888696396E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9992928877363623	WITHOUT_CLASSIFICATION	7.071122636377038E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999444364329316	WITHOUT_CLASSIFICATION	5.556356706827046E-5	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9998751036365324	WITHOUT_CLASSIFICATION	1.2489636346758374E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999934975448548	WITHOUT_CLASSIFICATION	6.502455145208709E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999757432522497	WITHOUT_CLASSIFICATION	2.4256747750357824E-5	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9996255220014651	WITHOUT_CLASSIFICATION	3.744779985349041E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9883415090362228	WITHOUT_CLASSIFICATION	0.011658490963777187	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9993186655995033	WITHOUT_CLASSIFICATION	6.813344004966224E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9994463490912224	WITHOUT_CLASSIFICATION	5.536509087775333E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9998874848305245	WITHOUT_CLASSIFICATION	1.1251516947546744E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9992528807301425	WITHOUT_CLASSIFICATION	7.471192698575661E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.996549970419273	WITHOUT_CLASSIFICATION	0.003450029580727072	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999694683742942	WITHOUT_CLASSIFICATION	3.053162570580986E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999931670184191	WITHOUT_CLASSIFICATION	6.8329815809514765E-6	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9998226440598372	WITHOUT_CLASSIFICATION	1.7735594016269785E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999602018233885	WITHOUT_CLASSIFICATION	3.97981766114589E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999653061724875	WITHOUT_CLASSIFICATION	3.469382751264216E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999898285800153	WITHOUT_CLASSIFICATION	1.0171419984588334E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998317730819487	WITHOUT_CLASSIFICATION	1.682269180513475E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999490473918069	WITHOUT_CLASSIFICATION	5.095260819306326E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.999840628291293	WITHOUT_CLASSIFICATION	1.5937170870696573E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999339476496115	WITHOUT_CLASSIFICATION	6.605235038853071E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999990992155217	WITHOUT_CLASSIFICATION	9.007844783547924E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.999890130762308	WITHOUT_CLASSIFICATION	1.0986923769196175E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9992613493792679	WITHOUT_CLASSIFICATION	7.386506207319816E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9989301064802236	WITHOUT_CLASSIFICATION	0.0010698935197763996	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999912561958693	WITHOUT_CLASSIFICATION	8.743804130793454E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998379031605605	WITHOUT_CLASSIFICATION	1.6209683943934535E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9996552496747156	WITHOUT_CLASSIFICATION	3.447503252844329E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9997394904278587	WITHOUT_CLASSIFICATION	2.6050957214133894E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9998162267474726	WITHOUT_CLASSIFICATION	1.837732525274257E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.8638456455570827	WITHOUT_CLASSIFICATION	0.13615435444291732	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999580881926202	WITHOUT_CLASSIFICATION	4.1911807379772074E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9989301064802236	WITHOUT_CLASSIFICATION	0.0010698935197763996	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998954470949715	WITHOUT_CLASSIFICATION	1.045529050284587E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999580881926202	WITHOUT_CLASSIFICATION	4.1911807379772074E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9994484611203311	WITHOUT_CLASSIFICATION	5.515388796688187E-4	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999847601970371	WITHOUT_CLASSIFICATION	1.5239802962912299E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.999966679651373	WITHOUT_CLASSIFICATION	3.332034862710513E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9998232344580851	WITHOUT_CLASSIFICATION	1.767655419148404E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999033513646273	WITHOUT_CLASSIFICATION	9.664863537276192E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998558313208805	WITHOUT_CLASSIFICATION	1.4416867911938304E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998558313208805	WITHOUT_CLASSIFICATION	1.4416867911938304E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999543651275614	WITHOUT_CLASSIFICATION	4.563487243846063E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998993703640118	WITHOUT_CLASSIFICATION	1.0062963598823739E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999644491928869	WITHOUT_CLASSIFICATION	3.555080711305557E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999644491928869	WITHOUT_CLASSIFICATION	3.555080711305557E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999917442529513	WITHOUT_CLASSIFICATION	8.255747048656068E-6	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.999886715296611	WITHOUT_CLASSIFICATION	1.132847033890577E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999245037981394	WITHOUT_CLASSIFICATION	7.54962018605599E-5	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9964928178052738	WITHOUT_CLASSIFICATION	0.003507182194726157	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999553977744547	WITHOUT_CLASSIFICATION	4.460222554530657E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9998284798807345	WITHOUT_CLASSIFICATION	1.7152011926537414E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999024334673525	WITHOUT_CLASSIFICATION	9.756653264752999E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999799827627218	WITHOUT_CLASSIFICATION	2.0017237278194375E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999817135094069	WITHOUT_CLASSIFICATION	1.828649059310947E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.999931978554133	WITHOUT_CLASSIFICATION	6.802144586695446E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999537953338291	WITHOUT_CLASSIFICATION	4.620466617087163E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999129391784142	WITHOUT_CLASSIFICATION	8.706082158586536E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9998471138579341	WITHOUT_CLASSIFICATION	1.5288614206584468E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9996912755968533	WITHOUT_CLASSIFICATION	3.0872440314668874E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999595252473042	WITHOUT_CLASSIFICATION	4.0474752695792995E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9997800908327581	WITHOUT_CLASSIFICATION	2.199091672418933E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999320002887635	WITHOUT_CLASSIFICATION	6.799971123652089E-5	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999810094035075	WITHOUT_CLASSIFICATION	1.8990596492467496E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9984929165373199	WITHOUT_CLASSIFICATION	0.0015070834626801182	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9998334949065102	WITHOUT_CLASSIFICATION	1.665050934897256E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995474778983049	WITHOUT_CLASSIFICATION	4.5252210169511236E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995474778983049	WITHOUT_CLASSIFICATION	4.5252210169511236E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999917395492339	WITHOUT_CLASSIFICATION	8.260450766072174E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999499830232282	WITHOUT_CLASSIFICATION	5.0016976771756364E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997932121331926	WITHOUT_CLASSIFICATION	2.067878668072801E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998453561573425	WITHOUT_CLASSIFICATION	1.5464384265749783E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999456078711645	WITHOUT_CLASSIFICATION	5.439212883556835E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999400566594789	WITHOUT_CLASSIFICATION	5.994334052106849E-5	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9997771946384233	WITHOUT_CLASSIFICATION	2.228053615766165E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999208841883375	WITHOUT_CLASSIFICATION	7.911581166257216E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998410548661	WITHOUT_CLASSIFICATION	1.589451340326165E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999991726360165	WITHOUT_CLASSIFICATION	8.27363983597569E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999956187616381	WITHOUT_CLASSIFICATION	4.3812383617890715E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9997850089062188	WITHOUT_CLASSIFICATION	2.1499109378110738E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999862133417626	WITHOUT_CLASSIFICATION	1.3786658237241845E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999391364642407	WITHOUT_CLASSIFICATION	6.086353575922411E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999987777877924	WITHOUT_CLASSIFICATION	1.2222122075262978E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9996967169567283	WITHOUT_CLASSIFICATION	3.0328304327164804E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9994766603410842	WITHOUT_CLASSIFICATION	5.233396589158588E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9988003232590323	WITHOUT_CLASSIFICATION	0.0011996767409676642	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.999991225852044	WITHOUT_CLASSIFICATION	8.774147955976627E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9997776886721748	WITHOUT_CLASSIFICATION	2.223113278253683E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999416714375668	WITHOUT_CLASSIFICATION	5.83285624331366E-5	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999560527796141	WITHOUT_CLASSIFICATION	4.394722038590728E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999994338178659	WITHOUT_CLASSIFICATION	5.661821341020264E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9993210619836529	WITHOUT_CLASSIFICATION	6.789380163470015E-4	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9830233338405293	WITHOUT_CLASSIFICATION	0.016976666159470726	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999809577039299	WITHOUT_CLASSIFICATION	1.9042296070071398E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999799076744178	WITHOUT_CLASSIFICATION	2.009232558212911E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999766250702461	WITHOUT_CLASSIFICATION	2.337492975388527E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998387509161126	WITHOUT_CLASSIFICATION	1.6124908388737564E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9998570649551453	WITHOUT_CLASSIFICATION	1.4293504485480912E-4	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999584411689451	WITHOUT_CLASSIFICATION	4.155883105504577E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999853094555079	WITHOUT_CLASSIFICATION	1.4690544492094798E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999492249407322	WITHOUT_CLASSIFICATION	5.077505926781662E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9998055155436674	WITHOUT_CLASSIFICATION	1.94484456332621E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999950320339329	WITHOUT_CLASSIFICATION	4.9679660671069817E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998556416839942	WITHOUT_CLASSIFICATION	1.4435831600569958E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9993845765854427	WITHOUT_CLASSIFICATION	6.154234145573532E-4	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.99838709802693	WITHOUT_CLASSIFICATION	0.0016129019730700357	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9933998431634196	WITHOUT_CLASSIFICATION	0.00660015683658049	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999953170759524	WITHOUT_CLASSIFICATION	4.682924047605373E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9986798570609808	WITHOUT_CLASSIFICATION	0.0013201429390192732	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9986798570609808	WITHOUT_CLASSIFICATION	0.0013201429390192732	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999640812085092	WITHOUT_CLASSIFICATION	3.591879149090475E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9997549469357166	WITHOUT_CLASSIFICATION	2.4505306428337383E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999565054730634	WITHOUT_CLASSIFICATION	4.349452693668782E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999055338550742	WITHOUT_CLASSIFICATION	9.44661449258796E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999943754607485	WITHOUT_CLASSIFICATION	5.624539251424361E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999308914740279	WITHOUT_CLASSIFICATION	6.910852597212367E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999635140359325	WITHOUT_CLASSIFICATION	3.648596406755638E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9985748573202098	WITHOUT_CLASSIFICATION	0.0014251426797901973	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9998116807198006	WITHOUT_CLASSIFICATION	1.8831928019926702E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999683044591126	WITHOUT_CLASSIFICATION	3.169554088745901E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999714894003633	WITHOUT_CLASSIFICATION	2.851059963678051E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999864785562694	WITHOUT_CLASSIFICATION	1.3521443730671342E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999909072368691	WITHOUT_CLASSIFICATION	9.092763130861777E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999850784536176	WITHOUT_CLASSIFICATION	1.4921546382397973E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999942857560045	WITHOUT_CLASSIFICATION	5.714243995471955E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999915520116188	WITHOUT_CLASSIFICATION	8.447988381236865E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999654842191386	WITHOUT_CLASSIFICATION	3.451578086152585E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999439568542284	WITHOUT_CLASSIFICATION	5.604314577145669E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999628720476729	WITHOUT_CLASSIFICATION	3.712795232705493E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999397155792967	WITHOUT_CLASSIFICATION	6.028442070332061E-5	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999889596902175	WITHOUT_CLASSIFICATION	1.1040309782467918E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999850009422541	WITHOUT_CLASSIFICATION	1.4999057745946744E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999818931967347	WITHOUT_CLASSIFICATION	1.8106803265291918E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999979895695088	WITHOUT_CLASSIFICATION	2.0104304912277947E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999866625129445	WITHOUT_CLASSIFICATION	1.3337487055317194E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999856531022937	WITHOUT_CLASSIFICATION	1.434689770618636E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999870445012367	WITHOUT_CLASSIFICATION	1.2955498763222943E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.999969139962063	WITHOUT_CLASSIFICATION	3.086003793704185E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.999975467217888	WITHOUT_CLASSIFICATION	2.4532782111907202E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.999937997439215	WITHOUT_CLASSIFICATION	6.200256078496871E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999961241221823	WITHOUT_CLASSIFICATION	3.8758778176961755E-6	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999668695095933	WITHOUT_CLASSIFICATION	3.313049040664464E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999757764758473	WITHOUT_CLASSIFICATION	2.4223524152634743E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998556416839942	WITHOUT_CLASSIFICATION	1.4435831600569958E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9998388412162524	WITHOUT_CLASSIFICATION	1.611587837476938E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999778580791214	WITHOUT_CLASSIFICATION	2.214192087864831E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999778580791214	WITHOUT_CLASSIFICATION	2.214192087864831E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999680079845724	WITHOUT_CLASSIFICATION	3.199201542752844E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9998858155743962	WITHOUT_CLASSIFICATION	1.1418442560377153E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999759646540589	WITHOUT_CLASSIFICATION	2.403534594111468E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.999982176751984	WITHOUT_CLASSIFICATION	1.7823248016023865E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999893151441301	WITHOUT_CLASSIFICATION	1.0684855869883045E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999940493409207	WITHOUT_CLASSIFICATION	5.950659079246863E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999598687755636	WITHOUT_CLASSIFICATION	4.0131224436297894E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999741207463543	WITHOUT_CLASSIFICATION	2.5879253645695184E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.999985587109988	WITHOUT_CLASSIFICATION	1.4412890012146601E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999028042435787	WITHOUT_CLASSIFICATION	9.719575642123104E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999568316428813	WITHOUT_CLASSIFICATION	4.316835711867411E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999605045613946	WITHOUT_CLASSIFICATION	3.949543860527987E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999979293557952	WITHOUT_CLASSIFICATION	2.070644204723001E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9998943862807139	WITHOUT_CLASSIFICATION	1.0561371928603843E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9998366537809363	WITHOUT_CLASSIFICATION	1.6334621906368235E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.999824293371011	WITHOUT_CLASSIFICATION	1.7570662898898305E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.999894659002142	WITHOUT_CLASSIFICATION	1.0534099785799455E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999413305463135	WITHOUT_CLASSIFICATION	5.866945368642705E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9996044531842562	WITHOUT_CLASSIFICATION	3.95546815743903E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999043439975988	WITHOUT_CLASSIFICATION	9.565600240131039E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.999973671899312	WITHOUT_CLASSIFICATION	2.6328100687966028E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999629296157259	WITHOUT_CLASSIFICATION	3.7070384274103256E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999894077125141	WITHOUT_CLASSIFICATION	1.0592287485986539E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999343834059129	WITHOUT_CLASSIFICATION	6.561659408707744E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999152363282069	WITHOUT_CLASSIFICATION	8.47636717931066E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999857053546094	WITHOUT_CLASSIFICATION	1.4294645390544446E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999226098895172	WITHOUT_CLASSIFICATION	7.739011048283164E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999718564013766	WITHOUT_CLASSIFICATION	2.814359862331777E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999697768306616	WITHOUT_CLASSIFICATION	3.022316933851506E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999876261474437	WITHOUT_CLASSIFICATION	1.2373852556299837E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999876261474437	WITHOUT_CLASSIFICATION	1.2373852556299837E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999675804937488	WITHOUT_CLASSIFICATION	3.2419506251201525E-5	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999604182800759	WITHOUT_CLASSIFICATION	3.958171992407043E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999626517328775	WITHOUT_CLASSIFICATION	3.7348267122610044E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999496625134184	WITHOUT_CLASSIFICATION	5.033748658154348E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999343834059129	WITHOUT_CLASSIFICATION	6.561659408707744E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999152363282069	WITHOUT_CLASSIFICATION	8.47636717931066E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999857053546094	WITHOUT_CLASSIFICATION	1.4294645390544446E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999718564013766	WITHOUT_CLASSIFICATION	2.814359862331777E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999436195818403	WITHOUT_CLASSIFICATION	5.638041815971396E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999017269543042	WITHOUT_CLASSIFICATION	9.827304569567676E-5	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999685098837501	WITHOUT_CLASSIFICATION	3.1490116249883436E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999822923728507	WITHOUT_CLASSIFICATION	1.770762714928325E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999805683091832	WITHOUT_CLASSIFICATION	1.943169081676207E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999614563661088	WITHOUT_CLASSIFICATION	3.854363389120527E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999544270243897	WITHOUT_CLASSIFICATION	4.5572975610392186E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998288208046067	WITHOUT_CLASSIFICATION	1.7117919539332908E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999824686347262	WITHOUT_CLASSIFICATION	1.7531365273774076E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999892225743104	WITHOUT_CLASSIFICATION	1.0777425689619997E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999354270167314	WITHOUT_CLASSIFICATION	6.457298326858E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999992048363435	WITHOUT_CLASSIFICATION	7.951636563815009E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999119961424878	WITHOUT_CLASSIFICATION	8.800385751225129E-5	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999920690405653	WITHOUT_CLASSIFICATION	7.930959434736557E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999787354160744	WITHOUT_CLASSIFICATION	2.1264583925597377E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999959456005723	WITHOUT_CLASSIFICATION	4.054399427804961E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999908640667402	WITHOUT_CLASSIFICATION	9.135933259786035E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9998993606990632	WITHOUT_CLASSIFICATION	1.0063930093676118E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.999782279304173	WITHOUT_CLASSIFICATION	2.177206958269952E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999496625134184	WITHOUT_CLASSIFICATION	5.033748658154348E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999017269543042	WITHOUT_CLASSIFICATION	9.827304569567676E-5	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999685098837501	WITHOUT_CLASSIFICATION	3.1490116249883436E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999805683091832	WITHOUT_CLASSIFICATION	1.943169081676207E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999614563661088	WITHOUT_CLASSIFICATION	3.854363389120527E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999544270243897	WITHOUT_CLASSIFICATION	4.5572975610392186E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998288208046067	WITHOUT_CLASSIFICATION	1.7117919539332908E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999686848357546	WITHOUT_CLASSIFICATION	3.1315164245329306E-5	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9946385639676549	WITHOUT_CLASSIFICATION	0.005361436032345015	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.999954891909017	WITHOUT_CLASSIFICATION	4.510809098300628E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999899194889729	WITHOUT_CLASSIFICATION	1.0080511027135147E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998071649370022	WITHOUT_CLASSIFICATION	1.9283506299779438E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998071649370022	WITHOUT_CLASSIFICATION	1.9283506299779438E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999470623644064	WITHOUT_CLASSIFICATION	5.293763559357826E-5	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999393332149047	WITHOUT_CLASSIFICATION	6.066678509531228E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999700285146352	WITHOUT_CLASSIFICATION	2.9971485364767615E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999685158012513	WITHOUT_CLASSIFICATION	3.1484198748639513E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999977742677996	WITHOUT_CLASSIFICATION	2.2257322004086104E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9998762479709158	WITHOUT_CLASSIFICATION	1.2375202908418098E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999935048354631	WITHOUT_CLASSIFICATION	6.495164536865941E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999611447484542	WITHOUT_CLASSIFICATION	3.885525154578327E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999688231086018	WITHOUT_CLASSIFICATION	3.117689139815873E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9998473841879927	WITHOUT_CLASSIFICATION	1.5261581200739046E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9998655836943997	WITHOUT_CLASSIFICATION	1.344163056002012E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999776171615938	WITHOUT_CLASSIFICATION	2.23828384061955E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997912539144627	WITHOUT_CLASSIFICATION	2.0874608553743466E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999818074364098	WITHOUT_CLASSIFICATION	1.8192563590197267E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999852550845826	WITHOUT_CLASSIFICATION	1.4744915417375542E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999442048898569	WITHOUT_CLASSIFICATION	5.579511014302957E-5	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999701878806757	WITHOUT_CLASSIFICATION	2.9812119324296604E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999975992331205	WITHOUT_CLASSIFICATION	2.400766879499609E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9998310017802748	WITHOUT_CLASSIFICATION	1.6899821972526696E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999996416149413	WITHOUT_CLASSIFICATION	3.583850588256342E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9970890748266084	WITHOUT_CLASSIFICATION	0.002910925173391632	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999870011312544	WITHOUT_CLASSIFICATION	1.2998868745708855E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999758735207009	WITHOUT_CLASSIFICATION	2.4126479299021017E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999926758481591	WITHOUT_CLASSIFICATION	7.324151840917132E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999682882973344	WITHOUT_CLASSIFICATION	3.1711702665542175E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.999573173100779	WITHOUT_CLASSIFICATION	4.268268992210705E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999926758481591	WITHOUT_CLASSIFICATION	7.324151840917132E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999818074364098	WITHOUT_CLASSIFICATION	1.8192563590197267E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999498168228405	WITHOUT_CLASSIFICATION	5.018317715960296E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998464287878759	WITHOUT_CLASSIFICATION	1.5357121212423178E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999860436328356	WITHOUT_CLASSIFICATION	1.3956367164412992E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9990203491637776	WITHOUT_CLASSIFICATION	9.796508362224263E-4	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999974217384995	WITHOUT_CLASSIFICATION	2.578261500594704E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999784283305715	WITHOUT_CLASSIFICATION	2.1571669428436506E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9998926861693868	WITHOUT_CLASSIFICATION	1.0731383061317238E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999947324444064	WITHOUT_CLASSIFICATION	5.267555593604821E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9361041159909134	WITHOUT_CLASSIFICATION	0.06389588400908659	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9988756141158868	WITHOUT_CLASSIFICATION	0.0011243858841131864	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9988369170397177	WITHOUT_CLASSIFICATION	0.001163082960282259	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.999960273797397	WITHOUT_CLASSIFICATION	3.972620260300832E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9996742893026943	WITHOUT_CLASSIFICATION	3.257106973057322E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999592552784669	WITHOUT_CLASSIFICATION	4.074472153310833E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9998997264346439	WITHOUT_CLASSIFICATION	1.0027356535602913E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9997177945793253	WITHOUT_CLASSIFICATION	2.822054206747047E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999087454698303	WITHOUT_CLASSIFICATION	9.125453016960951E-5	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.998534059080033	WITHOUT_CLASSIFICATION	0.001465940919967031	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999998767420191	WITHOUT_CLASSIFICATION	1.2325798091387013E-7	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999079570757996	WITHOUT_CLASSIFICATION	9.204292420039368E-5	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999981218246703	WITHOUT_CLASSIFICATION	1.8781753297478029E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9996552926185509	WITHOUT_CLASSIFICATION	3.447073814490647E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999031093430453	WITHOUT_CLASSIFICATION	9.68906569546974E-5	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999919708176451	WITHOUT_CLASSIFICATION	8.029182354844878E-6	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999990016820779	WITHOUT_CLASSIFICATION	9.983179221090987E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9997897905620382	WITHOUT_CLASSIFICATION	2.1020943796174211E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9985645256668246	WITHOUT_CLASSIFICATION	0.0014354743331753213	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999761925597098	WITHOUT_CLASSIFICATION	2.3807440290177948E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999438455150884	WITHOUT_CLASSIFICATION	5.6154484911490456E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999531398405043	WITHOUT_CLASSIFICATION	4.686015949580025E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997912539144627	WITHOUT_CLASSIFICATION	2.0874608553743466E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999415267351592	WITHOUT_CLASSIFICATION	5.847326484070166E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9995919088175408	WITHOUT_CLASSIFICATION	4.0809118245918477E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999599866512247	WITHOUT_CLASSIFICATION	4.0013348775304405E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999203568865807	WITHOUT_CLASSIFICATION	7.964311341938365E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999203568865807	WITHOUT_CLASSIFICATION	7.964311341938365E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.999949592580455	WITHOUT_CLASSIFICATION	5.040741954493305E-5	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999928818510049	WITHOUT_CLASSIFICATION	7.118148995087004E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999837146228738	WITHOUT_CLASSIFICATION	1.628537712615347E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999683526998829	WITHOUT_CLASSIFICATION	3.164730011705281E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9995600636267932	WITHOUT_CLASSIFICATION	4.3993637320684833E-4	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999652362877043	WITHOUT_CLASSIFICATION	3.476371229566881E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9998740737478854	WITHOUT_CLASSIFICATION	1.2592625211455693E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999914938680577	WITHOUT_CLASSIFICATION	8.50613194219918E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9996080845826261	WITHOUT_CLASSIFICATION	3.919154173739418E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999552130602578	WITHOUT_CLASSIFICATION	4.478693974216923E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9998224040719494	WITHOUT_CLASSIFICATION	1.775959280504701E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999393245129118	WITHOUT_CLASSIFICATION	6.067548708809996E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998893316983053	WITHOUT_CLASSIFICATION	1.1066830169463238E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999652597401869	WITHOUT_CLASSIFICATION	3.4740259813103516E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999937778381575	WITHOUT_CLASSIFICATION	6.222161842584782E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999937778381575	WITHOUT_CLASSIFICATION	6.222161842584782E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999824676538886	WITHOUT_CLASSIFICATION	1.7532346111412132E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999824676538886	WITHOUT_CLASSIFICATION	1.7532346111412132E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999973381559446	WITHOUT_CLASSIFICATION	2.661844055428397E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9987602918878554	WITHOUT_CLASSIFICATION	0.0012397081121445384	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999222267575475	WITHOUT_CLASSIFICATION	7.777324245252427E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999980188927972	WITHOUT_CLASSIFICATION	1.9811072028684773E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9996841767220115	WITHOUT_CLASSIFICATION	3.158232779885636E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999412693000445	WITHOUT_CLASSIFICATION	5.8730699955681654E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999904953129759	WITHOUT_CLASSIFICATION	9.504687024071689E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999393245129118	WITHOUT_CLASSIFICATION	6.067548708809996E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998893316983053	WITHOUT_CLASSIFICATION	1.1066830169463238E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9996858873476906	WITHOUT_CLASSIFICATION	3.1411265230936805E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.999948826370186	WITHOUT_CLASSIFICATION	5.117362981407417E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9958766253058363	WITHOUT_CLASSIFICATION	0.004123374694163707	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9993213816264042	WITHOUT_CLASSIFICATION	6.786183735958186E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999907842932587	WITHOUT_CLASSIFICATION	9.21570674117318E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9976081508017978	WITHOUT_CLASSIFICATION	0.002391849198202216	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999088445601474	WITHOUT_CLASSIFICATION	9.115543985264995E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999088445601474	WITHOUT_CLASSIFICATION	9.115543985264995E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999820398093355	WITHOUT_CLASSIFICATION	1.796019066438448E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999909369289659	WITHOUT_CLASSIFICATION	9.063071034127984E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9998803395622345	WITHOUT_CLASSIFICATION	1.1966043776545995E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9989165905046391	WITHOUT_CLASSIFICATION	0.0010834094953608372	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998885443970051	WITHOUT_CLASSIFICATION	1.1145560299477279E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9984597736183924	WITHOUT_CLASSIFICATION	0.0015402263816075613	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999756712054689	WITHOUT_CLASSIFICATION	2.4328794530958856E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999982854392337	WITHOUT_CLASSIFICATION	1.7145607662925366E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9996663007335475	WITHOUT_CLASSIFICATION	3.336992664526235E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.999996434163723	WITHOUT_CLASSIFICATION	3.5658362770152834E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999973061171639	WITHOUT_CLASSIFICATION	2.693882836045445E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9995504662129749	WITHOUT_CLASSIFICATION	4.495337870250204E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999879991133054	WITHOUT_CLASSIFICATION	1.2000886694617656E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9998737991018987	WITHOUT_CLASSIFICATION	1.2620089810139775E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999822066921021	WITHOUT_CLASSIFICATION	1.7793307897867176E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999834165252698	WITHOUT_CLASSIFICATION	1.6583474730246847E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999725970751693	WITHOUT_CLASSIFICATION	2.7402924830646818E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9998742707299846	WITHOUT_CLASSIFICATION	1.2572927001541746E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9995157653399797	WITHOUT_CLASSIFICATION	4.8423466002035337E-4	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999693452565854	WITHOUT_CLASSIFICATION	3.065474341454859E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9890830664105404	WITHOUT_CLASSIFICATION	0.010916933589459528	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998904692925517	WITHOUT_CLASSIFICATION	1.095307074482644E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9997029220188275	WITHOUT_CLASSIFICATION	2.970779811725197E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999297913783404	WITHOUT_CLASSIFICATION	7.020862165963594E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999559634013663	WITHOUT_CLASSIFICATION	4.403659863375602E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9998078263637042	WITHOUT_CLASSIFICATION	1.9217363629578613E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9998494125035127	WITHOUT_CLASSIFICATION	1.5058749648729628E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999395950091148	WITHOUT_CLASSIFICATION	6.040499088519754E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9998320002314228	WITHOUT_CLASSIFICATION	1.6799976857716003E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999746419050564	WITHOUT_CLASSIFICATION	2.535809494360065E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.999974069233989	WITHOUT_CLASSIFICATION	2.5930766011020752E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998934741086701	WITHOUT_CLASSIFICATION	1.0652589132983711E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9995919088175408	WITHOUT_CLASSIFICATION	4.0809118245918477E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999395950091148	WITHOUT_CLASSIFICATION	6.040499088519754E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999911369019662	WITHOUT_CLASSIFICATION	8.863098033752458E-6	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998639158502568	WITHOUT_CLASSIFICATION	1.360841497431935E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9992351744263375	WITHOUT_CLASSIFICATION	7.648255736625696E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9991831741364392	WITHOUT_CLASSIFICATION	8.168258635607492E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9991831741364392	WITHOUT_CLASSIFICATION	8.168258635607492E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999960158704175	WITHOUT_CLASSIFICATION	3.984129582466268E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999954149169744	WITHOUT_CLASSIFICATION	4.585083025637064E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.999964284552572	WITHOUT_CLASSIFICATION	3.571544742805944E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999990871564198	WITHOUT_CLASSIFICATION	9.128435801372989E-7	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.999893434854753	WITHOUT_CLASSIFICATION	1.0656514524698787E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9998697565549665	WITHOUT_CLASSIFICATION	1.3024344503351497E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999978463312719	WITHOUT_CLASSIFICATION	2.1536687280668405E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.998048738563299	WITHOUT_CLASSIFICATION	0.0019512614367009943	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999492468006611	WITHOUT_CLASSIFICATION	5.075319933884018E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999492468006611	WITHOUT_CLASSIFICATION	5.075319933884018E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999683142459654	WITHOUT_CLASSIFICATION	3.168575403452961E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999132418902983	WITHOUT_CLASSIFICATION	8.675810970162091E-5	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999945354991767	WITHOUT_CLASSIFICATION	5.464500823281142E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999493318037638	WITHOUT_CLASSIFICATION	5.066819623624864E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9998310069965182	WITHOUT_CLASSIFICATION	1.6899300348184644E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999823008426302	WITHOUT_CLASSIFICATION	1.7699157369743245E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999994163993894	WITHOUT_CLASSIFICATION	5.83600610673543E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999942061989039	WITHOUT_CLASSIFICATION	5.793801096062331E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999777313598187	WITHOUT_CLASSIFICATION	2.2268640181255532E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9869395493699485	WITHOUT_CLASSIFICATION	0.013060450630051573	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999819772874105	WITHOUT_CLASSIFICATION	1.8022712589552206E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999790004474612	WITHOUT_CLASSIFICATION	2.099955253865966E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999672992699447	WITHOUT_CLASSIFICATION	3.2700730055328896E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998703640297547	WITHOUT_CLASSIFICATION	1.2963597024541186E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998703640297547	WITHOUT_CLASSIFICATION	1.2963597024541186E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9997975232295957	WITHOUT_CLASSIFICATION	2.0247677040425918E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998288208046067	WITHOUT_CLASSIFICATION	1.7117919539332908E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9869395493699485	WITHOUT_CLASSIFICATION	0.013060450630051573	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999891356908827	WITHOUT_CLASSIFICATION	1.0864309117392071E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9997634021224295	WITHOUT_CLASSIFICATION	2.3659787757043533E-4	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999821008897337	WITHOUT_CLASSIFICATION	1.7899110266237855E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999356932843175	WITHOUT_CLASSIFICATION	6.430671568241E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.999644855723162	WITHOUT_CLASSIFICATION	3.551442768380767E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999537660466592	WITHOUT_CLASSIFICATION	4.6233953340775866E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999738239440956	WITHOUT_CLASSIFICATION	2.617605590436696E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9995919088175408	WITHOUT_CLASSIFICATION	4.0809118245918477E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999486731570701	WITHOUT_CLASSIFICATION	5.1326842929839924E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9997778705115656	WITHOUT_CLASSIFICATION	2.2212948843446356E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9998552552126729	WITHOUT_CLASSIFICATION	1.4474478732705125E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999827521381702	WITHOUT_CLASSIFICATION	1.72478618297897E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999756925330126	WITHOUT_CLASSIFICATION	2.430746698746948E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.999993217339181	WITHOUT_CLASSIFICATION	6.782660819016885E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.999849007686834	WITHOUT_CLASSIFICATION	1.5099231316593578E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.99984796581852	WITHOUT_CLASSIFICATION	1.5203418148001486E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999457247430761	WITHOUT_CLASSIFICATION	5.427525692390105E-4	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9993699047123229	WITHOUT_CLASSIFICATION	6.300952876770438E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999423113855681	WITHOUT_CLASSIFICATION	5.768861443188644E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998492728715822	WITHOUT_CLASSIFICATION	1.5072712841776638E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9996189456876584	WITHOUT_CLASSIFICATION	3.81054312341632E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8276484942325412	WITHOUT_CLASSIFICATION	0.17235150576745875	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9965472626167368	WITHOUT_CLASSIFICATION	0.0034527373832632167	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999788279186069	WITHOUT_CLASSIFICATION	2.117208139314406E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999848826387224	WITHOUT_CLASSIFICATION	1.5117361277640504E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999862583527717	WITHOUT_CLASSIFICATION	1.374164722829294E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9993663416163981	WITHOUT_CLASSIFICATION	6.33658383601778E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999428061322551	WITHOUT_CLASSIFICATION	5.7193867744897414E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999884652501806	WITHOUT_CLASSIFICATION	1.15347498193993E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999706300072324	WITHOUT_CLASSIFICATION	2.936999276750854E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999960158704175	WITHOUT_CLASSIFICATION	3.984129582466268E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999381751650429	WITHOUT_CLASSIFICATION	6.182483495705377E-5	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999153586806355	WITHOUT_CLASSIFICATION	8.464131936454667E-5	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999873202895322	WITHOUT_CLASSIFICATION	1.267971046771097E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9971703179600383	WITHOUT_CLASSIFICATION	0.002829682039961789	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9983310670843194	WITHOUT_CLASSIFICATION	0.0016689329156806844	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9978903006862014	WITHOUT_CLASSIFICATION	0.002109699313798667	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999870054492495	WITHOUT_CLASSIFICATION	1.2994550750450287E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9990513939576682	WITHOUT_CLASSIFICATION	9.486060423319194E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999963972992076	WITHOUT_CLASSIFICATION	3.602700792306987E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999450747463305	WITHOUT_CLASSIFICATION	5.492525366944186E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997036198390179	WITHOUT_CLASSIFICATION	2.963801609820847E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999451262512484	WITHOUT_CLASSIFICATION	5.487374875153428E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999828581702561	WITHOUT_CLASSIFICATION	1.714182974387422E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997868290030764	WITHOUT_CLASSIFICATION	2.131709969237471E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999994928868268	WITHOUT_CLASSIFICATION	5.071131732298997E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.999169701775096	WITHOUT_CLASSIFICATION	8.302982249039183E-4	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.999843173358599	WITHOUT_CLASSIFICATION	1.5682664140101693E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9717918696799375	WITHOUT_CLASSIFICATION	0.02820813032006257	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9996676143103554	WITHOUT_CLASSIFICATION	3.3238568964450604E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9986641063197841	WITHOUT_CLASSIFICATION	0.001335893680215895	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9990663672635286	WITHOUT_CLASSIFICATION	9.336327364713457E-4	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9979733355965795	WITHOUT_CLASSIFICATION	0.002026664403420589	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999986136832671	WITHOUT_CLASSIFICATION	1.3863167327410864E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999921385901896	WITHOUT_CLASSIFICATION	7.86140981040212E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998157768875391	WITHOUT_CLASSIFICATION	1.8422311246088914E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998157768875391	WITHOUT_CLASSIFICATION	1.8422311246088914E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998157768875391	WITHOUT_CLASSIFICATION	1.8422311246088914E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999469842260411	WITHOUT_CLASSIFICATION	5.3015773958856835E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999089153631429	WITHOUT_CLASSIFICATION	9.108463685711085E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999490479552836	WITHOUT_CLASSIFICATION	5.095204471636179E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999875863614132	WITHOUT_CLASSIFICATION	1.241363858679408E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999875863614132	WITHOUT_CLASSIFICATION	1.241363858679408E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9995584671356408	WITHOUT_CLASSIFICATION	4.415328643592437E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9997963898091407	WITHOUT_CLASSIFICATION	2.0361019085927604E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999649297715117	WITHOUT_CLASSIFICATION	3.507022848825471E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999790630115615	WITHOUT_CLASSIFICATION	2.0936988438559498E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999555239843082	WITHOUT_CLASSIFICATION	4.447601569180694E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999359942867274	WITHOUT_CLASSIFICATION	6.400571327259886E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.999914833656877	WITHOUT_CLASSIFICATION	8.516634312300064E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999379210027362	WITHOUT_CLASSIFICATION	6.207899726391595E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999926144860313	WITHOUT_CLASSIFICATION	7.385513968770942E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999643949136108	WITHOUT_CLASSIFICATION	3.5605086389232155E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999643949136108	WITHOUT_CLASSIFICATION	3.5605086389232155E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999666426618011	WITHOUT_CLASSIFICATION	3.335733819882214E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.999506241716923	WITHOUT_CLASSIFICATION	4.937582830770226E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999617755613655	WITHOUT_CLASSIFICATION	3.822443863447329E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999000816805574	WITHOUT_CLASSIFICATION	9.991831944251191E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9998662209347152	WITHOUT_CLASSIFICATION	1.3377906528483415E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999969496395529	WITHOUT_CLASSIFICATION	3.050360447174892E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999266008202059	WITHOUT_CLASSIFICATION	7.339917979404721E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.99992877047738	WITHOUT_CLASSIFICATION	7.122952261989096E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9998143353587733	WITHOUT_CLASSIFICATION	1.8566464122672497E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998869670433513	WITHOUT_CLASSIFICATION	1.1303295664859248E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9991343069581492	WITHOUT_CLASSIFICATION	8.65693041850861E-4	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999515483631745	WITHOUT_CLASSIFICATION	4.8451636825518555E-5	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999866791171622	WITHOUT_CLASSIFICATION	1.332088283787837E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9997300654199759	WITHOUT_CLASSIFICATION	2.69934580024148E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999396787355123	WITHOUT_CLASSIFICATION	6.032126448775263E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999609136022315	WITHOUT_CLASSIFICATION	3.908639776847588E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9994967276279662	WITHOUT_CLASSIFICATION	5.032723720337949E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999703043136196	WITHOUT_CLASSIFICATION	2.9695686380395747E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998557953351195	WITHOUT_CLASSIFICATION	1.442046648804502E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.999810247168611	WITHOUT_CLASSIFICATION	1.8975283138889217E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999543925103662	WITHOUT_CLASSIFICATION	4.56074896336857E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999196693084424	WITHOUT_CLASSIFICATION	8.033069155753111E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999562692715114	WITHOUT_CLASSIFICATION	4.373072848855556E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9994295067995057	WITHOUT_CLASSIFICATION	5.704932004943006E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9998958761244313	WITHOUT_CLASSIFICATION	1.0412387556860891E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999639697588554	WITHOUT_CLASSIFICATION	3.603024114460947E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999498251027549	WITHOUT_CLASSIFICATION	5.017489724504917E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999661076046856	WITHOUT_CLASSIFICATION	3.389239531447691E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999130386166023	WITHOUT_CLASSIFICATION	8.696138339775965E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999860272773496	WITHOUT_CLASSIFICATION	1.3972722650301086E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999535775786221	WITHOUT_CLASSIFICATION	4.6422421377908854E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.999949372369571	WITHOUT_CLASSIFICATION	5.062763042890551E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9998884548635284	WITHOUT_CLASSIFICATION	1.1154513647170169E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.999489966135367	WITHOUT_CLASSIFICATION	5.100338646330032E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999477956386169	WITHOUT_CLASSIFICATION	5.220436138305967E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999554098219049	WITHOUT_CLASSIFICATION	4.459017809514881E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999540569846347	WITHOUT_CLASSIFICATION	4.594301536534421E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999501166777495	WITHOUT_CLASSIFICATION	4.988332225041096E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999727369340302	WITHOUT_CLASSIFICATION	2.72630659696733E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999652938935886	WITHOUT_CLASSIFICATION	3.4706106411419386E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999910436268558	WITHOUT_CLASSIFICATION	8.956373144193036E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999720444264385	WITHOUT_CLASSIFICATION	2.795557356160098E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.999978217784643	WITHOUT_CLASSIFICATION	2.1782215357015965E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9998858973198016	WITHOUT_CLASSIFICATION	1.1410268019851522E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999725536632951	WITHOUT_CLASSIFICATION	2.7446336704902483E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999385482371483	WITHOUT_CLASSIFICATION	6.14517628516579E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.999991294186218	WITHOUT_CLASSIFICATION	8.705813781915073E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999858137680713	WITHOUT_CLASSIFICATION	1.418623192870601E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999974172592432	WITHOUT_CLASSIFICATION	2.5827407567987235E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999846768641416	WITHOUT_CLASSIFICATION	1.5323135858442276E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999712438960828	WITHOUT_CLASSIFICATION	2.8756103917165214E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9996355694924848	WITHOUT_CLASSIFICATION	3.6443050751513707E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999639255148454	WITHOUT_CLASSIFICATION	3.607448515451362E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999935901999398	WITHOUT_CLASSIFICATION	6.409800060166394E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999935901999398	WITHOUT_CLASSIFICATION	6.409800060166394E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9998351752999225	WITHOUT_CLASSIFICATION	1.648247000775775E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9998372181484227	WITHOUT_CLASSIFICATION	1.6278185157735293E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9959848257424977	WITHOUT_CLASSIFICATION	0.004015174257502274	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9896404570567586	WITHOUT_CLASSIFICATION	0.010359542943241403	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999382089517137	WITHOUT_CLASSIFICATION	6.179104828626659E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9998477117846678	WITHOUT_CLASSIFICATION	1.522882153321351E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9998388792593396	WITHOUT_CLASSIFICATION	1.611207406603892E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.999975068749364	WITHOUT_CLASSIFICATION	2.493125063593857E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999646433831888	WITHOUT_CLASSIFICATION	3.535661681116355E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.999684805680682	WITHOUT_CLASSIFICATION	3.151943193180127E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999794238066267	WITHOUT_CLASSIFICATION	2.0576193373276587E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999722486725998	WITHOUT_CLASSIFICATION	2.7751327400268753E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999897064938484	WITHOUT_CLASSIFICATION	1.0293506151597067E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.999869446306112	WITHOUT_CLASSIFICATION	1.3055369388814968E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999445399977986	WITHOUT_CLASSIFICATION	5.5460002201307226E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9998874215449337	WITHOUT_CLASSIFICATION	1.1257845506619524E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999068458502968	WITHOUT_CLASSIFICATION	9.315414970319007E-5	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999432971554367	WITHOUT_CLASSIFICATION	5.670284456323337E-5	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9997009503139823	WITHOUT_CLASSIFICATION	2.990496860177032E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999755315703958	WITHOUT_CLASSIFICATION	2.4468429604184458E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9998919189929849	WITHOUT_CLASSIFICATION	1.0808100701512008E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999068458502968	WITHOUT_CLASSIFICATION	9.315414970319007E-5	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9848384357475359	WITHOUT_CLASSIFICATION	0.015161564252464161	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9848384357475359	WITHOUT_CLASSIFICATION	0.015161564252464161	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999305260647815	WITHOUT_CLASSIFICATION	6.947393521846592E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998768206870146	WITHOUT_CLASSIFICATION	1.2317931298548156E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999224930156949	WITHOUT_CLASSIFICATION	7.750698430506062E-5	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999673406119793	WITHOUT_CLASSIFICATION	3.265938802061648E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999899338553198	WITHOUT_CLASSIFICATION	1.0066144680236941E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.780087325849479	WITHOUT_CLASSIFICATION	0.21991267415052088	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9990690196938972	WITHOUT_CLASSIFICATION	9.309803061028402E-4	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9866726571297537	WITHOUT_CLASSIFICATION	0.013327342870246143	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.999974814308696	WITHOUT_CLASSIFICATION	2.518569130398447E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9993919224454137	WITHOUT_CLASSIFICATION	6.080775545861966E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9997346902725461	WITHOUT_CLASSIFICATION	2.653097274538734E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998773108638319	WITHOUT_CLASSIFICATION	1.2268913616805387E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999416263160688	WITHOUT_CLASSIFICATION	5.837368393120193E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9998820334510526	WITHOUT_CLASSIFICATION	1.1796654894738011E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990404111900223	WITHOUT_CLASSIFICATION	9.595888099777758E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999094197918518	WITHOUT_CLASSIFICATION	9.058020814818078E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988877070567593	WITHOUT_CLASSIFICATION	0.0011122929432406117	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999545071393016	WITHOUT_CLASSIFICATION	4.549286069839874E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999770357087201	WITHOUT_CLASSIFICATION	2.2964291279883398E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999651363277444	WITHOUT_CLASSIFICATION	3.486367225570526E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997679083215997	WITHOUT_CLASSIFICATION	2.3209167840029408E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999408560334995	WITHOUT_CLASSIFICATION	5.9143966500534586E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999940588178609	WITHOUT_CLASSIFICATION	5.941182139098917E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999407464441847	WITHOUT_CLASSIFICATION	5.9253555815185005E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999405394256909	WITHOUT_CLASSIFICATION	5.9460574309058965E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999708131052732	WITHOUT_CLASSIFICATION	2.918689472678382E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.991398726602483	WITHOUT_CLASSIFICATION	0.008601273397517062	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9970629861612662	WITHOUT_CLASSIFICATION	0.0029370138387338944	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9941609014516364	WITHOUT_CLASSIFICATION	0.005839098548363644	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9986748276506999	WITHOUT_CLASSIFICATION	0.0013251723493000488	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9993657631919891	WITHOUT_CLASSIFICATION	6.34236808010794E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9993657631919891	WITHOUT_CLASSIFICATION	6.34236808010794E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9998817639778607	WITHOUT_CLASSIFICATION	1.1823602213936139E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9863646347365181	WITHOUT_CLASSIFICATION	0.013635365263481712	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9968158600028868	WITHOUT_CLASSIFICATION	0.0031841399971132877	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9922378700833822	WITHOUT_CLASSIFICATION	0.007762129916617842	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998498071006431	WITHOUT_CLASSIFICATION	1.5019289935698412E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9978395094630499	WITHOUT_CLASSIFICATION	0.0021604905369500783	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9968158600028868	WITHOUT_CLASSIFICATION	0.0031841399971132877	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9941662619339787	WITHOUT_CLASSIFICATION	0.005833738066021313	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.99978420188103	WITHOUT_CLASSIFICATION	2.1579811896983378E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999036837466906	WITHOUT_CLASSIFICATION	9.631625330946946E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999416085606077	WITHOUT_CLASSIFICATION	5.8391439392357504E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999913775817082	WITHOUT_CLASSIFICATION	8.622418291788234E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999689373695376	WITHOUT_CLASSIFICATION	3.106263046239141E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999689373695376	WITHOUT_CLASSIFICATION	3.106263046239141E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9998587565392067	WITHOUT_CLASSIFICATION	1.4124346079320783E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.997004828759254	WITHOUT_CLASSIFICATION	0.002995171240746079	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.999374436153242	WITHOUT_CLASSIFICATION	6.255638467580279E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9995580010151186	WITHOUT_CLASSIFICATION	4.4199898488140785E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9994162066934869	WITHOUT_CLASSIFICATION	5.837933065131096E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999572266219703	WITHOUT_CLASSIFICATION	4.277337802974731E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9814284498611752	WITHOUT_CLASSIFICATION	0.018571550138824736	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9993563365688519	WITHOUT_CLASSIFICATION	6.436634311481768E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9966107745368405	WITHOUT_CLASSIFICATION	0.003389225463159422	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.999833512059928	WITHOUT_CLASSIFICATION	1.6648794007213482E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999646842218521	WITHOUT_CLASSIFICATION	3.531577814782823E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9991505588455023	WITHOUT_CLASSIFICATION	8.494411544977121E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9988487938932624	WITHOUT_CLASSIFICATION	0.001151206106737572	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999901658479706	WITHOUT_CLASSIFICATION	9.834152029369314E-6	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9995139353702347	WITHOUT_CLASSIFICATION	4.8606462976522654E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999320602786744	WITHOUT_CLASSIFICATION	6.793972132560472E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999512053892203	WITHOUT_CLASSIFICATION	4.879461077963787E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9998272649314448	WITHOUT_CLASSIFICATION	1.7273506855513095E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9790092149667432	WITHOUT_CLASSIFICATION	0.020990785033256847	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9995904409339949	WITHOUT_CLASSIFICATION	4.0955906600518487E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9790092149667432	WITHOUT_CLASSIFICATION	0.020990785033256847	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9996744615947225	WITHOUT_CLASSIFICATION	3.2553840527743254E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9995904409339949	WITHOUT_CLASSIFICATION	4.0955906600518487E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8920435595761155	WITHOUT_CLASSIFICATION	0.10795644042388451	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9997285932025505	WITHOUT_CLASSIFICATION	2.714067974494358E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9992630569887888	WITHOUT_CLASSIFICATION	7.369430112112064E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999284669945218	WITHOUT_CLASSIFICATION	7.153300547825502E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999482070965169	WITHOUT_CLASSIFICATION	5.179290348309752E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999094197918518	WITHOUT_CLASSIFICATION	9.058020814818078E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999545071393016	WITHOUT_CLASSIFICATION	4.549286069839874E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999770357087201	WITHOUT_CLASSIFICATION	2.2964291279883398E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999651363277444	WITHOUT_CLASSIFICATION	3.486367225570526E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9997679083215997	WITHOUT_CLASSIFICATION	2.3209167840029408E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999403384503895	WITHOUT_CLASSIFICATION	5.9661549610446886E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999409828347138	WITHOUT_CLASSIFICATION	5.901716528621123E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999407464441847	WITHOUT_CLASSIFICATION	5.9253555815185005E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9998569527285803	WITHOUT_CLASSIFICATION	1.430472714196804E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9993657631919891	WITHOUT_CLASSIFICATION	6.34236808010794E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9993657631919891	WITHOUT_CLASSIFICATION	6.34236808010794E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9968158600028868	WITHOUT_CLASSIFICATION	0.0031841399971132877	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998498071006431	WITHOUT_CLASSIFICATION	1.5019289935698412E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9978395094630499	WITHOUT_CLASSIFICATION	0.0021604905369500783	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9968158600028868	WITHOUT_CLASSIFICATION	0.0031841399971132877	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9941662619339787	WITHOUT_CLASSIFICATION	0.005833738066021313	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9998841143868467	WITHOUT_CLASSIFICATION	1.1588561315328852E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999405031379387	WITHOUT_CLASSIFICATION	5.9496862061374726E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999797708079562	WITHOUT_CLASSIFICATION	2.022919204377791E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9976406670860988	WITHOUT_CLASSIFICATION	0.0023593329139011627	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9875106870818279	WITHOUT_CLASSIFICATION	0.012489312918172126	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9987700363001617	WITHOUT_CLASSIFICATION	0.0012299636998382366	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999028692121915	WITHOUT_CLASSIFICATION	9.713078780839575E-5	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9962314013740728	WITHOUT_CLASSIFICATION	0.003768598625927117	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999036837466906	WITHOUT_CLASSIFICATION	9.631625330946946E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999689373695376	WITHOUT_CLASSIFICATION	3.106263046239141E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999689373695376	WITHOUT_CLASSIFICATION	3.106263046239141E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9914386886630526	WITHOUT_CLASSIFICATION	0.008561311336947413	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9990073739404574	WITHOUT_CLASSIFICATION	9.926260595426446E-4	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998825157444577	WITHOUT_CLASSIFICATION	1.1748425554222005E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999416085606077	WITHOUT_CLASSIFICATION	5.8391439392357504E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9982447619408685	WITHOUT_CLASSIFICATION	0.0017552380591313985	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.999886027476843	WITHOUT_CLASSIFICATION	1.1397252315702436E-4	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9979616096464797	WITHOUT_CLASSIFICATION	0.002038390353520311	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999570815524221	WITHOUT_CLASSIFICATION	4.2918447577857567E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999649726890406	WITHOUT_CLASSIFICATION	3.502731095943578E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999862565705736	WITHOUT_CLASSIFICATION	1.3743429426337599E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9982778957136399	WITHOUT_CLASSIFICATION	0.0017221042863601091	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9996923456533972	WITHOUT_CLASSIFICATION	3.076543466027881E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999285228191916	WITHOUT_CLASSIFICATION	7.14771808083855E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999600387538556	WITHOUT_CLASSIFICATION	3.996124614440725E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999698022425771	WITHOUT_CLASSIFICATION	3.0197757422878085E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999698022425771	WITHOUT_CLASSIFICATION	3.0197757422878085E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999908571988009	WITHOUT_CLASSIFICATION	9.142801199086859E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9997195877820417	WITHOUT_CLASSIFICATION	2.804122179582883E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999522107551846	WITHOUT_CLASSIFICATION	4.7789244815453614E-5	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9997858789405729	WITHOUT_CLASSIFICATION	2.1412105942707478E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999883672224458	WITHOUT_CLASSIFICATION	1.163277755430735E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999853127610613	WITHOUT_CLASSIFICATION	1.4687238938801531E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999883672224458	WITHOUT_CLASSIFICATION	1.163277755430735E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999847330520059	WITHOUT_CLASSIFICATION	1.5266947994128384E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9956300899074446	WITHOUT_CLASSIFICATION	0.004369910092555458	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9987299863376546	WITHOUT_CLASSIFICATION	0.0012700136623454497	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9996679842965627	WITHOUT_CLASSIFICATION	3.320157034373659E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9996679842965627	WITHOUT_CLASSIFICATION	3.320157034373659E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999866118611572	WITHOUT_CLASSIFICATION	1.3388138842766058E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999561532727287	WITHOUT_CLASSIFICATION	4.384672727119299E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999956697585885	WITHOUT_CLASSIFICATION	4.330241411495203E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.8166563554763425	WITHOUT_CLASSIFICATION	0.18334364452365762	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.999976067911137	WITHOUT_CLASSIFICATION	2.393208886294114E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.99976263229664	WITHOUT_CLASSIFICATION	2.3736770336018335E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.99976263229664	WITHOUT_CLASSIFICATION	2.3736770336018335E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995914132260025	WITHOUT_CLASSIFICATION	4.085867739975387E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999987110009396	WITHOUT_CLASSIFICATION	1.2889990603930185E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999987110009396	WITHOUT_CLASSIFICATION	1.2889990603930185E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999298598820149	WITHOUT_CLASSIFICATION	7.014011798513101E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999891085879341	WITHOUT_CLASSIFICATION	1.0891412065878845E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999588263252787	WITHOUT_CLASSIFICATION	4.1173674721242596E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9954351025556917	WITHOUT_CLASSIFICATION	0.004564897444308254	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9996709107467485	WITHOUT_CLASSIFICATION	3.290892532515561E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999883672224458	WITHOUT_CLASSIFICATION	1.163277755430735E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9998295173099573	WITHOUT_CLASSIFICATION	1.7048269004270856E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999973056324419	WITHOUT_CLASSIFICATION	2.6943675580899336E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9988036347848754	WITHOUT_CLASSIFICATION	0.0011963652151244998	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9998295489960034	WITHOUT_CLASSIFICATION	1.7045100399652453E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999981931640707	WITHOUT_CLASSIFICATION	1.8068359292918088E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999990691648681	WITHOUT_CLASSIFICATION	9.308351317600201E-7	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999803952360591	WITHOUT_CLASSIFICATION	1.9604763940920327E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9998793132019188	WITHOUT_CLASSIFICATION	1.2068679808119025E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999526321351467	WITHOUT_CLASSIFICATION	4.736786485332233E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.99993945292431	WITHOUT_CLASSIFICATION	6.0547075690140416E-5	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999757392736371	WITHOUT_CLASSIFICATION	2.426072636282587E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.99999584460018	WITHOUT_CLASSIFICATION	4.155399820016863E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9995110510686604	WITHOUT_CLASSIFICATION	4.889489313394841E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999217219643864	WITHOUT_CLASSIFICATION	7.827803561355743E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9982660516285307	WITHOUT_CLASSIFICATION	0.0017339483714694014	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9997546011287147	WITHOUT_CLASSIFICATION	2.453988712852364E-4	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9994029290509251	WITHOUT_CLASSIFICATION	5.970709490748974E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9987324302406054	WITHOUT_CLASSIFICATION	0.0012675697593945658	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999643566603424	WITHOUT_CLASSIFICATION	3.5643339657510685E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999988041686096	WITHOUT_CLASSIFICATION	1.1958313903575802E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999789117047768	WITHOUT_CLASSIFICATION	2.1088295223210995E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9934503831581144	WITHOUT_CLASSIFICATION	0.006549616841885587	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999778901425203	WITHOUT_CLASSIFICATION	2.21098574796858E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9997723794167467	WITHOUT_CLASSIFICATION	2.2762058325330716E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998787336283469	WITHOUT_CLASSIFICATION	1.2126637165315061E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.999992479813043	WITHOUT_CLASSIFICATION	7.5201869571504886E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999106267204562	WITHOUT_CLASSIFICATION	8.93732795437553E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9997149424774519	WITHOUT_CLASSIFICATION	2.850575225482427E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9992922341847703	WITHOUT_CLASSIFICATION	7.077658152297113E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999331695670637	WITHOUT_CLASSIFICATION	6.683043293625105E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999555037487162	WITHOUT_CLASSIFICATION	4.449625128386845E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999885907336427	WITHOUT_CLASSIFICATION	1.140926635744353E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999625462374317	WITHOUT_CLASSIFICATION	3.7453762568273516E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999742317593748	WITHOUT_CLASSIFICATION	2.5768240625051522E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998725264861537	WITHOUT_CLASSIFICATION	1.274735138462951E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998311659401186	WITHOUT_CLASSIFICATION	1.688340598814295E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999852678986063	WITHOUT_CLASSIFICATION	1.4732101393743852E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999968288671209	WITHOUT_CLASSIFICATION	3.1711328790050538E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999882432462724	WITHOUT_CLASSIFICATION	1.1756753727519067E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9982940677502126	WITHOUT_CLASSIFICATION	0.0017059322497875258	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999199958166187	WITHOUT_CLASSIFICATION	8.00041833812652E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9997036198390179	WITHOUT_CLASSIFICATION	2.963801609820847E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999451262512484	WITHOUT_CLASSIFICATION	5.487374875153428E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999528570339372	WITHOUT_CLASSIFICATION	4.7142966062809905E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999725967737	WITHOUT_CLASSIFICATION	2.740322630005828E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.990930885563216	WITHOUT_CLASSIFICATION	0.009069114436784008	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868071514899	WITHOUT_CLASSIFICATION	1.3192848510122335E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868071514899	WITHOUT_CLASSIFICATION	1.3192848510122335E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816911529855	WITHOUT_CLASSIFICATION	1.8308847014469276E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816911529855	WITHOUT_CLASSIFICATION	1.8308847014469276E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999816911529855	WITHOUT_CLASSIFICATION	1.8308847014469276E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999836238194939	WITHOUT_CLASSIFICATION	1.63761805061352E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999836238194939	WITHOUT_CLASSIFICATION	1.63761805061352E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999122275126318	WITHOUT_CLASSIFICATION	8.777248736824792E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999122275126318	WITHOUT_CLASSIFICATION	8.777248736824792E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9995902414999343	WITHOUT_CLASSIFICATION	4.097585000657272E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9989072580847667	WITHOUT_CLASSIFICATION	0.001092741915233257	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999848535947705	WITHOUT_CLASSIFICATION	1.5146405229434864E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999848535947705	WITHOUT_CLASSIFICATION	1.5146405229434864E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9994308130478285	WITHOUT_CLASSIFICATION	5.691869521714574E-4	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999472923116174	WITHOUT_CLASSIFICATION	5.2707688382510095E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.999298382500544	WITHOUT_CLASSIFICATION	7.016174994560292E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.999954397196839	WITHOUT_CLASSIFICATION	4.560280316095727E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9994640259159111	WITHOUT_CLASSIFICATION	5.35974084088928E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999770536942804	WITHOUT_CLASSIFICATION	2.2946305719720752E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999959159284831	WITHOUT_CLASSIFICATION	4.084071516795799E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999452472747994	WITHOUT_CLASSIFICATION	5.4752725200607255E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.999902873149445	WITHOUT_CLASSIFICATION	9.712685055492431E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999935901999398	WITHOUT_CLASSIFICATION	6.409800060166394E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9997860021320714	WITHOUT_CLASSIFICATION	2.1399786792872426E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999605246095169	WITHOUT_CLASSIFICATION	3.9475390483045174E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9995855113768523	WITHOUT_CLASSIFICATION	4.1448862314765774E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999723878723795	WITHOUT_CLASSIFICATION	2.7612127620504743E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999469512154413	WITHOUT_CLASSIFICATION	5.304878455869237E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999758477371553	WITHOUT_CLASSIFICATION	2.4152262844698577E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999563232506706	WITHOUT_CLASSIFICATION	4.367674932940023E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9998210697925658	WITHOUT_CLASSIFICATION	1.7893020743423794E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999929320346813	WITHOUT_CLASSIFICATION	7.067965318626055E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999147334483427	WITHOUT_CLASSIFICATION	8.526655165731859E-5	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999147334483427	WITHOUT_CLASSIFICATION	8.526655165731859E-5	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999147334483427	WITHOUT_CLASSIFICATION	8.526655165731859E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998708656470368	WITHOUT_CLASSIFICATION	1.2913435296323325E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998708656470368	WITHOUT_CLASSIFICATION	1.2913435296323325E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998708656470368	WITHOUT_CLASSIFICATION	1.2913435296323325E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998708656470368	WITHOUT_CLASSIFICATION	1.2913435296323325E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998708656470368	WITHOUT_CLASSIFICATION	1.2913435296323325E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999294987624954	WITHOUT_CLASSIFICATION	7.050123750461733E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.999199282671861	WITHOUT_CLASSIFICATION	8.007173281390495E-4	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999975974846954	WITHOUT_CLASSIFICATION	2.402515304537798E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999808475038028	WITHOUT_CLASSIFICATION	1.9152496197229486E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.999885624168221	WITHOUT_CLASSIFICATION	1.1437583177906212E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999335949524448	WITHOUT_CLASSIFICATION	6.640504755519693E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9988688178728424	WITHOUT_CLASSIFICATION	0.001131182127157485	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999860573375745	WITHOUT_CLASSIFICATION	1.394266242548148E-5	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.999989921807324	WITHOUT_CLASSIFICATION	1.007819267582237E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999926363010957	WITHOUT_CLASSIFICATION	7.3636989042843665E-6	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999748253893611	WITHOUT_CLASSIFICATION	2.5174610638887477E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999681381531218	WITHOUT_CLASSIFICATION	3.1861846878161326E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9359222361047546	WITHOUT_CLASSIFICATION	0.06407776389524547	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.999907447804552	WITHOUT_CLASSIFICATION	9.255219544793186E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9998002604447549	WITHOUT_CLASSIFICATION	1.997395552452194E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999693990676536	WITHOUT_CLASSIFICATION	3.0600932346470134E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999399446722945	WITHOUT_CLASSIFICATION	6.0055327705427946E-5	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999336860310307	WITHOUT_CLASSIFICATION	6.631396896926138E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999853127610613	WITHOUT_CLASSIFICATION	1.4687238938801531E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9977029234108411	WITHOUT_CLASSIFICATION	0.0022970765891587846	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9981099622469607	WITHOUT_CLASSIFICATION	0.0018900377530391924	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999367357616735	WITHOUT_CLASSIFICATION	6.326423832645729E-5	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.999950551638083	WITHOUT_CLASSIFICATION	4.9448361917131116E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999767178070018	WITHOUT_CLASSIFICATION	2.3282192998285666E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999043944223641	WITHOUT_CLASSIFICATION	9.560557763587078E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999371949492728	WITHOUT_CLASSIFICATION	6.280505072719647E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.999968911092696	WITHOUT_CLASSIFICATION	3.108890730391295E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999598803571311	WITHOUT_CLASSIFICATION	4.0119642868871906E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.999955053343151	WITHOUT_CLASSIFICATION	4.49466568490477E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999681037633759	WITHOUT_CLASSIFICATION	3.1896236624184454E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999295110416146	WITHOUT_CLASSIFICATION	7.048895838534311E-5	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999370370201028	WITHOUT_CLASSIFICATION	6.296297989717089E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999903707126304	WITHOUT_CLASSIFICATION	9.629287369602912E-6	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9998886497570306	WITHOUT_CLASSIFICATION	1.113502429694018E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9998553739002912	WITHOUT_CLASSIFICATION	1.446260997088267E-4	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999649557769066	WITHOUT_CLASSIFICATION	3.50442230934252E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996463471777702	WITHOUT_CLASSIFICATION	3.5365282222971924E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999674678333151	WITHOUT_CLASSIFICATION	3.25321666848681E-5	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999996052748339	WITHOUT_CLASSIFICATION	3.9472516602417435E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999522543110606	WITHOUT_CLASSIFICATION	4.774568893940537E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.999522543110606	WITHOUT_CLASSIFICATION	4.774568893940537E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999723278993279	WITHOUT_CLASSIFICATION	2.767210067211813E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999723278993279	WITHOUT_CLASSIFICATION	2.767210067211813E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999150349723152	WITHOUT_CLASSIFICATION	8.496502768490185E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999150349723152	WITHOUT_CLASSIFICATION	8.496502768490185E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999223504511754	WITHOUT_CLASSIFICATION	7.76495488245485E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999693311981144	WITHOUT_CLASSIFICATION	3.066880188569617E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999921086564656	WITHOUT_CLASSIFICATION	7.891343534358236E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999895392158825	WITHOUT_CLASSIFICATION	1.0460784117527437E-5	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999716790171063	WITHOUT_CLASSIFICATION	2.832098289362934E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9991081566540252	WITHOUT_CLASSIFICATION	8.918433459748298E-4	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999084522499682	WITHOUT_CLASSIFICATION	9.154775003187535E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.999990434444628	WITHOUT_CLASSIFICATION	9.565555372070188E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.999912695937246	WITHOUT_CLASSIFICATION	8.730406275409656E-5	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9998646456403971	WITHOUT_CLASSIFICATION	1.3535435960294464E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999527884419731	WITHOUT_CLASSIFICATION	4.7211558026968396E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999684220046952	WITHOUT_CLASSIFICATION	3.1577995304887945E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999603743930698	WITHOUT_CLASSIFICATION	3.9625606930195826E-4	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.999984473814974	WITHOUT_CLASSIFICATION	1.5526185025888843E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9990079014731179	WITHOUT_CLASSIFICATION	9.920985268821268E-4	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998783994038433	WITHOUT_CLASSIFICATION	1.2160059615677943E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999293318960522	WITHOUT_CLASSIFICATION	7.066810394784462E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9997662074006246	WITHOUT_CLASSIFICATION	2.3379259937533257E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9998161073751622	WITHOUT_CLASSIFICATION	1.8389262483771963E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9986867438694883	WITHOUT_CLASSIFICATION	0.0013132561305117109	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.999964001479216	WITHOUT_CLASSIFICATION	3.5998520783997215E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999703981334676	WITHOUT_CLASSIFICATION	2.960186653245292E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.999959675311354	WITHOUT_CLASSIFICATION	4.032468864602387E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999871490717992	WITHOUT_CLASSIFICATION	1.2850928200783828E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999797568062255	WITHOUT_CLASSIFICATION	2.024319377442252E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999797568062255	WITHOUT_CLASSIFICATION	2.024319377442252E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999217219643864	WITHOUT_CLASSIFICATION	7.827803561355743E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999217219643864	WITHOUT_CLASSIFICATION	7.827803561355743E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999973750039297	WITHOUT_CLASSIFICATION	2.624996070244694E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9984478575739205	WITHOUT_CLASSIFICATION	0.0015521424260795612	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999068596588313	WITHOUT_CLASSIFICATION	9.314034116874455E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999048466024489	WITHOUT_CLASSIFICATION	9.515339755110682E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999252212652037	WITHOUT_CLASSIFICATION	7.477873479632289E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999797568062255	WITHOUT_CLASSIFICATION	2.024319377442252E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999797568062255	WITHOUT_CLASSIFICATION	2.024319377442252E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999797568062255	WITHOUT_CLASSIFICATION	2.024319377442252E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999217219643864	WITHOUT_CLASSIFICATION	7.827803561355743E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999217219643864	WITHOUT_CLASSIFICATION	7.827803561355743E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999555066956701	WITHOUT_CLASSIFICATION	4.4493304329926964E-5	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999829490184057	WITHOUT_CLASSIFICATION	1.7050981594257317E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999741188550799	WITHOUT_CLASSIFICATION	2.5881144920088914E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9965021209821622	WITHOUT_CLASSIFICATION	0.0034978790178378178	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999978730907233	WITHOUT_CLASSIFICATION	2.1269092766950465E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.999962431169107	WITHOUT_CLASSIFICATION	3.7568830892974395E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999793445735445	WITHOUT_CLASSIFICATION	2.0655426455501505E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999004784919944	WITHOUT_CLASSIFICATION	9.9521508005624E-5	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999950916092604	WITHOUT_CLASSIFICATION	4.908390739630805E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999863579077133	WITHOUT_CLASSIFICATION	1.3642092286738072E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999452710938476	WITHOUT_CLASSIFICATION	5.4728906152434394E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9995600621936104	WITHOUT_CLASSIFICATION	4.3993780638967856E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999907346134977	WITHOUT_CLASSIFICATION	9.265386502212593E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998677694374246	WITHOUT_CLASSIFICATION	1.322305625753484E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999252643625246	WITHOUT_CLASSIFICATION	7.47356374753923E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9944600845701925	WITHOUT_CLASSIFICATION	0.005539915429807533	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999703931807407	WITHOUT_CLASSIFICATION	2.9606819259300835E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999703931807407	WITHOUT_CLASSIFICATION	2.9606819259300835E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999703931807407	WITHOUT_CLASSIFICATION	2.9606819259300835E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9976252203789379	WITHOUT_CLASSIFICATION	0.0023747796210622416	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9976248471187564	WITHOUT_CLASSIFICATION	0.002375152881243588	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999902980879966	WITHOUT_CLASSIFICATION	9.701912003533595E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999063690728942	WITHOUT_CLASSIFICATION	9.363092710587328E-5	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9998945209576626	WITHOUT_CLASSIFICATION	1.0547904233742034E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9998945236682599	WITHOUT_CLASSIFICATION	1.0547633174002148E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999207299151452	WITHOUT_CLASSIFICATION	7.9270084854847E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998543900010957	WITHOUT_CLASSIFICATION	1.4560999890441117E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999415854182861	WITHOUT_CLASSIFICATION	5.841458171387922E-5	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.999941586919493	WITHOUT_CLASSIFICATION	5.841308050698119E-5	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999561005239483	WITHOUT_CLASSIFICATION	4.38994760516723E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999336843267858	WITHOUT_CLASSIFICATION	6.631567321427264E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999794028121874	WITHOUT_CLASSIFICATION	2.0597187812512432E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999979044471684	WITHOUT_CLASSIFICATION	2.095552831607358E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999296139371131	WITHOUT_CLASSIFICATION	7.0386062886937E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999642353129091	WITHOUT_CLASSIFICATION	3.5764687090784454E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999085541777721	WITHOUT_CLASSIFICATION	9.144582222791541E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999514320235353	WITHOUT_CLASSIFICATION	4.856797646477945E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998534100550959	WITHOUT_CLASSIFICATION	1.4658994490410608E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9997933782967406	WITHOUT_CLASSIFICATION	2.0662170325938157E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999148564370771	WITHOUT_CLASSIFICATION	8.51435629229341E-5	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9922423157642063	WITHOUT_CLASSIFICATION	0.007757684235793813	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999302492736901	WITHOUT_CLASSIFICATION	6.975072630978536E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999619269501935	WITHOUT_CLASSIFICATION	3.807304980659083E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.999974712629654	WITHOUT_CLASSIFICATION	2.528737034601195E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999745251299657	WITHOUT_CLASSIFICATION	2.5474870034339444E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999644749558428	WITHOUT_CLASSIFICATION	3.552504415713328E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999921620825207	WITHOUT_CLASSIFICATION	7.837917479275797E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9998718296966527	WITHOUT_CLASSIFICATION	1.2817030334727144E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.99824554123432	WITHOUT_CLASSIFICATION	0.0017544587656800198	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9998990805163818	WITHOUT_CLASSIFICATION	1.0091948361827001E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.99971979104057	WITHOUT_CLASSIFICATION	2.802089594299813E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998228860407954	WITHOUT_CLASSIFICATION	1.7711395920469322E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9992192166381373	WITHOUT_CLASSIFICATION	7.807833618627934E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9997936532933999	WITHOUT_CLASSIFICATION	2.0634670660011104E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999581885248131	WITHOUT_CLASSIFICATION	4.1811475186937884E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999650476276382	WITHOUT_CLASSIFICATION	3.4952372361872666E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9998845137394285	WITHOUT_CLASSIFICATION	1.154862605713706E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9962669149360127	WITHOUT_CLASSIFICATION	0.0037330850639871664	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9998824559379922	WITHOUT_CLASSIFICATION	1.1754406200780896E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9975540229902891	WITHOUT_CLASSIFICATION	0.002445977009710954	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9989143912701903	WITHOUT_CLASSIFICATION	0.0010856087298096724	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9992776245381456	WITHOUT_CLASSIFICATION	7.223754618543852E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999537552166097	WITHOUT_CLASSIFICATION	4.624478339042383E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9992216059878498	WITHOUT_CLASSIFICATION	7.783940121501656E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9997188950502074	WITHOUT_CLASSIFICATION	2.8110494979262195E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9997188950502074	WITHOUT_CLASSIFICATION	2.8110494979262195E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9991872015166333	WITHOUT_CLASSIFICATION	8.127984833667307E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999081949297552	WITHOUT_CLASSIFICATION	9.180507024479026E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9992194384937414	WITHOUT_CLASSIFICATION	7.805615062586467E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9993219112384417	WITHOUT_CLASSIFICATION	6.780887615582176E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9996219974781336	WITHOUT_CLASSIFICATION	3.7800252186635753E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999126146681198	WITHOUT_CLASSIFICATION	8.738533188022124E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999744061845519	WITHOUT_CLASSIFICATION	2.5593815448165695E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999850506663887	WITHOUT_CLASSIFICATION	1.4949333611239428E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999900495796391	WITHOUT_CLASSIFICATION	9.950420360943587E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999390856612798	WITHOUT_CLASSIFICATION	6.091433872015196E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999569949735458	WITHOUT_CLASSIFICATION	4.300502645408605E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999569949735458	WITHOUT_CLASSIFICATION	4.300502645408605E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999569949735458	WITHOUT_CLASSIFICATION	4.300502645408605E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999569949735458	WITHOUT_CLASSIFICATION	4.300502645408605E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999820460940694	WITHOUT_CLASSIFICATION	1.79539059306693E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999944642964137	WITHOUT_CLASSIFICATION	5.5357035862410125E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999953882304158	WITHOUT_CLASSIFICATION	4.611769584231893E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9998274201503611	WITHOUT_CLASSIFICATION	1.72579849639013E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9994294294776654	WITHOUT_CLASSIFICATION	5.705705223345976E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9991147824562406	WITHOUT_CLASSIFICATION	8.852175437592245E-4	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999110629122349	WITHOUT_CLASSIFICATION	8.893708776518429E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999543139320974	WITHOUT_CLASSIFICATION	4.5686067902531616E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999543139320974	WITHOUT_CLASSIFICATION	4.5686067902531616E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999948774191061	WITHOUT_CLASSIFICATION	5.12258089392944E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999500436445368	WITHOUT_CLASSIFICATION	4.995635546332617E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999817907917669	WITHOUT_CLASSIFICATION	1.8209208233104564E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9971854518810362	WITHOUT_CLASSIFICATION	0.002814548118963885	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9971854518810362	WITHOUT_CLASSIFICATION	0.002814548118963885	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9996317893960707	WITHOUT_CLASSIFICATION	3.682106039293757E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999903127025904	WITHOUT_CLASSIFICATION	9.687297409553255E-6	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999903127025904	WITHOUT_CLASSIFICATION	9.687297409553255E-6	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9992527188958794	WITHOUT_CLASSIFICATION	7.472811041205451E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999998149910027	WITHOUT_CLASSIFICATION	1.850089973123769E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999992196624032	WITHOUT_CLASSIFICATION	7.803375967011364E-7	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9991517354814459	WITHOUT_CLASSIFICATION	8.482645185540922E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9997074801186012	WITHOUT_CLASSIFICATION	2.9251988139882424E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999963841486598	WITHOUT_CLASSIFICATION	3.615851340258529E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9939679109399439	WITHOUT_CLASSIFICATION	0.00603208906005622	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999971827167643	WITHOUT_CLASSIFICATION	2.8172832356506487E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999760794782729	WITHOUT_CLASSIFICATION	2.3920521727113814E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999865286832296	WITHOUT_CLASSIFICATION	1.3471316770581576E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9936126623265624	WITHOUT_CLASSIFICATION	0.006387337673437573	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9971531840492495	WITHOUT_CLASSIFICATION	0.0028468159507506418	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999937518287328	WITHOUT_CLASSIFICATION	6.248171267129084E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9989079392150416	WITHOUT_CLASSIFICATION	0.001092060784958377	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9998275093670299	WITHOUT_CLASSIFICATION	1.7249063297013006E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999549638908912	WITHOUT_CLASSIFICATION	4.503610910880503E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999125880742261	WITHOUT_CLASSIFICATION	8.741192577392519E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999040912623917	WITHOUT_CLASSIFICATION	9.590873760825786E-5	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9977490647261952	WITHOUT_CLASSIFICATION	0.002250935273804805	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9984205166874317	WITHOUT_CLASSIFICATION	0.001579483312568303	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9995511598141805	WITHOUT_CLASSIFICATION	4.4884018581941556E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999441368169703	WITHOUT_CLASSIFICATION	5.586318302988027E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9678096215283563	WITHOUT_CLASSIFICATION	0.03219037847164379	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999707780646638	WITHOUT_CLASSIFICATION	2.922193533619739E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999506207570216	WITHOUT_CLASSIFICATION	4.9379242978482945E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.999930896183026	WITHOUT_CLASSIFICATION	6.910381697400217E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999247043423045	WITHOUT_CLASSIFICATION	7.529565769542648E-5	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9992787074522749	WITHOUT_CLASSIFICATION	7.212925477250848E-4	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999533172563567	WITHOUT_CLASSIFICATION	4.668274364332027E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.7675606542080832	DEFECT	0.23243934579191686	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9995634535129166	WITHOUT_CLASSIFICATION	4.3654648708335586E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999146037623335	WITHOUT_CLASSIFICATION	8.539623766639466E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998005190908473	WITHOUT_CLASSIFICATION	1.9948090915267186E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999615700677529	WITHOUT_CLASSIFICATION	3.842993224702383E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9997279117147501	WITHOUT_CLASSIFICATION	2.7208828524987773E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998005190908473	WITHOUT_CLASSIFICATION	1.9948090915267186E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999615700677529	WITHOUT_CLASSIFICATION	3.842993224702383E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.999928015586223	WITHOUT_CLASSIFICATION	7.19844137770762E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999265613446685	WITHOUT_CLASSIFICATION	7.343865533155581E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999265613446685	WITHOUT_CLASSIFICATION	7.343865533155581E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998237454448561	WITHOUT_CLASSIFICATION	1.7625455514397594E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.999012224748534	WITHOUT_CLASSIFICATION	9.877752514659203E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999985356440863	WITHOUT_CLASSIFICATION	1.4643559137050272E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999882270368796	WITHOUT_CLASSIFICATION	1.1772963120405333E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9965664402660791	WITHOUT_CLASSIFICATION	0.0034335597339209874	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9993775664973068	WITHOUT_CLASSIFICATION	6.2243350269314E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999300293970824	WITHOUT_CLASSIFICATION	6.997060291758826E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999053277397423	WITHOUT_CLASSIFICATION	9.467226025778469E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971445334762	WITHOUT_CLASSIFICATION	2.855466523799045E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998611367373765	WITHOUT_CLASSIFICATION	1.3886326262349278E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9996042474302161	WITHOUT_CLASSIFICATION	3.957525697838196E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999124987852906	WITHOUT_CLASSIFICATION	8.750121470935564E-5	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998973165401948	WITHOUT_CLASSIFICATION	1.0268345980520503E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999982974407994	WITHOUT_CLASSIFICATION	1.7025592005915746E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.999982974407994	WITHOUT_CLASSIFICATION	1.7025592005915746E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999904485417947	WITHOUT_CLASSIFICATION	9.551458205311112E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999904485417947	WITHOUT_CLASSIFICATION	9.551458205311112E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999931791929743	WITHOUT_CLASSIFICATION	6.820807025689813E-5	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998895379386655	WITHOUT_CLASSIFICATION	1.1046206133446839E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999270105904448	WITHOUT_CLASSIFICATION	7.298940955523561E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999985356440863	WITHOUT_CLASSIFICATION	1.4643559137050272E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999882270368796	WITHOUT_CLASSIFICATION	1.1772963120405333E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971445334762	WITHOUT_CLASSIFICATION	2.855466523799045E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998611367373765	WITHOUT_CLASSIFICATION	1.3886326262349278E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999390880181465	WITHOUT_CLASSIFICATION	6.0911981853584365E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999347795916714	WITHOUT_CLASSIFICATION	6.52204083285318E-5	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999782103224064	WITHOUT_CLASSIFICATION	2.1789677593625422E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999256842281639	WITHOUT_CLASSIFICATION	7.431577183614964E-5	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999789316314288	WITHOUT_CLASSIFICATION	2.1068368571230243E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9997807967829618	WITHOUT_CLASSIFICATION	2.1920321703825538E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999641071665358	WITHOUT_CLASSIFICATION	3.589283346407858E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999389621137564	WITHOUT_CLASSIFICATION	6.103788624350349E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999484062984633	WITHOUT_CLASSIFICATION	5.159370153669265E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9985867114212925	WITHOUT_CLASSIFICATION	0.0014132885787074153	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999470732351807	WITHOUT_CLASSIFICATION	5.29267648191445E-5	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999963223228111	WITHOUT_CLASSIFICATION	3.6776771890155237E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999174689007396	WITHOUT_CLASSIFICATION	8.253109926037944E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999939991067804	WITHOUT_CLASSIFICATION	6.0008932196444545E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999964935472124	WITHOUT_CLASSIFICATION	3.5064527876495643E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998884798290204	WITHOUT_CLASSIFICATION	1.115201709794954E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9996001451056766	WITHOUT_CLASSIFICATION	3.9985489432346863E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998714725789347	WITHOUT_CLASSIFICATION	1.285274210652288E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999289652777299	WITHOUT_CLASSIFICATION	7.103472227006122E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999289652777299	WITHOUT_CLASSIFICATION	7.103472227006122E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999289652777299	WITHOUT_CLASSIFICATION	7.103472227006122E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9994918369489131	WITHOUT_CLASSIFICATION	5.081630510868893E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.999995277521096	WITHOUT_CLASSIFICATION	4.722478904031953E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997368213770115	WITHOUT_CLASSIFICATION	2.631786229885038E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997368213770115	WITHOUT_CLASSIFICATION	2.631786229885038E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9997199058572772	WITHOUT_CLASSIFICATION	2.800941427227132E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999899871740849	WITHOUT_CLASSIFICATION	1.001282591505167E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999725814855682	WITHOUT_CLASSIFICATION	2.741851443174874E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.999625778774907	WITHOUT_CLASSIFICATION	3.742212250929477E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998210494739334	WITHOUT_CLASSIFICATION	1.7895052606653152E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9990131009895215	WITHOUT_CLASSIFICATION	9.868990104785766E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998845624544185	WITHOUT_CLASSIFICATION	1.1543754558154464E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9998242240125125	WITHOUT_CLASSIFICATION	1.757759874874646E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999756342910408	WITHOUT_CLASSIFICATION	2.436570895920643E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998556262109398	WITHOUT_CLASSIFICATION	1.443737890601091E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9998511664534652	WITHOUT_CLASSIFICATION	1.4883354653479205E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999822407115958	WITHOUT_CLASSIFICATION	1.7759288404264477E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.999875943023955	WITHOUT_CLASSIFICATION	1.240569760450576E-4	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999955735718399	WITHOUT_CLASSIFICATION	4.426428160211455E-6	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999778874950953	WITHOUT_CLASSIFICATION	2.2112504904667024E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9996944613178598	WITHOUT_CLASSIFICATION	3.055386821401821E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999626639794879	WITHOUT_CLASSIFICATION	3.733602051218634E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999866193196907	WITHOUT_CLASSIFICATION	1.3380680309312508E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999515753355429	WITHOUT_CLASSIFICATION	4.842466445704985E-5	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999961608681671	WITHOUT_CLASSIFICATION	3.83913183287562E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.999971113596564	WITHOUT_CLASSIFICATION	2.888640343590375E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999931025155203	WITHOUT_CLASSIFICATION	6.8974844796127645E-6	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9998995794671243	WITHOUT_CLASSIFICATION	1.0042053287573593E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999968732812601	WITHOUT_CLASSIFICATION	3.126718740051825E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999985940088073	WITHOUT_CLASSIFICATION	1.405991192717617E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999985940088073	WITHOUT_CLASSIFICATION	1.405991192717617E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999656627239554	WITHOUT_CLASSIFICATION	3.433727604464377E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999656627239554	WITHOUT_CLASSIFICATION	3.433727604464377E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999593884188698	WITHOUT_CLASSIFICATION	4.0611581130336474E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999935979524661	WITHOUT_CLASSIFICATION	6.402047533865563E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999830598334	WITHOUT_CLASSIFICATION	1.6940166599964514E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9998929291641646	WITHOUT_CLASSIFICATION	1.0707083583531816E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999866193196907	WITHOUT_CLASSIFICATION	1.3380680309312508E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999866193196907	WITHOUT_CLASSIFICATION	1.3380680309312508E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999866193196907	WITHOUT_CLASSIFICATION	1.3380680309312508E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999515753355429	WITHOUT_CLASSIFICATION	4.842466445704985E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999830598334	WITHOUT_CLASSIFICATION	1.6940166599964514E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999830598334	WITHOUT_CLASSIFICATION	1.6940166599964514E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.999939001022553	WITHOUT_CLASSIFICATION	6.09989774470663E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999947095242316	WITHOUT_CLASSIFICATION	5.290475768348993E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999978408594987	WITHOUT_CLASSIFICATION	2.159140501376923E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.6219168745073729	WITHOUT_CLASSIFICATION	0.3780831254926273	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999965378074559	WITHOUT_CLASSIFICATION	3.4621925441267205E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999403102786066	WITHOUT_CLASSIFICATION	5.9689721393375514E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999403102786066	WITHOUT_CLASSIFICATION	5.9689721393375514E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999014984999685	WITHOUT_CLASSIFICATION	9.850150003157428E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999812216326286	WITHOUT_CLASSIFICATION	1.8778367371513095E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999812216326286	WITHOUT_CLASSIFICATION	1.8778367371513095E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999812216326286	WITHOUT_CLASSIFICATION	1.8778367371513095E-5	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999977892112563	WITHOUT_CLASSIFICATION	2.210788743695208E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999969846569974	WITHOUT_CLASSIFICATION	3.0153430027171672E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999515753355429	WITHOUT_CLASSIFICATION	4.842466445704985E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999760432164697	WITHOUT_CLASSIFICATION	2.395678353021548E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999812216326286	WITHOUT_CLASSIFICATION	1.8778367371513095E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999014984999685	WITHOUT_CLASSIFICATION	9.850150003157428E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999703050176365	WITHOUT_CLASSIFICATION	2.9694982363432954E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999672343549142	WITHOUT_CLASSIFICATION	3.276564508581627E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999596416031966	WITHOUT_CLASSIFICATION	4.0358396803432054E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999660137255176	WITHOUT_CLASSIFICATION	3.398627448230324E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999364379236679	WITHOUT_CLASSIFICATION	6.356207633205304E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9994459609747924	WITHOUT_CLASSIFICATION	5.540390252074607E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999962393176929	WITHOUT_CLASSIFICATION	3.76068230704528E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999947395479752	WITHOUT_CLASSIFICATION	5.260452024809931E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999718063323167	WITHOUT_CLASSIFICATION	2.8193667683183572E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9996545392941836	WITHOUT_CLASSIFICATION	3.454607058163659E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999316404541079	WITHOUT_CLASSIFICATION	6.835954589208131E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999864226152753	WITHOUT_CLASSIFICATION	1.3577384724854885E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999154068047927	WITHOUT_CLASSIFICATION	8.459319520727775E-5	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999843307981954	WITHOUT_CLASSIFICATION	1.5669201804673356E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999798313035734	WITHOUT_CLASSIFICATION	2.016869642653248E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.999987683819448	WITHOUT_CLASSIFICATION	1.231618055202211E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997322910227027	WITHOUT_CLASSIFICATION	2.6770897729733824E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999692830318542	WITHOUT_CLASSIFICATION	3.071696814582208E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999901829175025	WITHOUT_CLASSIFICATION	9.817082497563298E-6	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999964600177302	WITHOUT_CLASSIFICATION	3.539982269722488E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9998944332762864	WITHOUT_CLASSIFICATION	1.0556672371355008E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999749056917843	WITHOUT_CLASSIFICATION	2.5094308215634422E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999616041456459	WITHOUT_CLASSIFICATION	3.8395854354080694E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.999974301582358	WITHOUT_CLASSIFICATION	2.5698417642018656E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998869339322681	WITHOUT_CLASSIFICATION	1.1306606773188018E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999776580729073	WITHOUT_CLASSIFICATION	2.2341927092739965E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999992326358081	WITHOUT_CLASSIFICATION	7.673641917686769E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999544686565435	WITHOUT_CLASSIFICATION	4.5531343456422484E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999465106326131	WITHOUT_CLASSIFICATION	5.3489367386896196E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999439821703022	WITHOUT_CLASSIFICATION	5.6017829697889646E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999703050176365	WITHOUT_CLASSIFICATION	2.9694982363432954E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999906860774119	WITHOUT_CLASSIFICATION	9.313922588065782E-6	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9997017465085992	WITHOUT_CLASSIFICATION	2.982534914007555E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9994730375562477	WITHOUT_CLASSIFICATION	5.269624437523517E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999945092413033	WITHOUT_CLASSIFICATION	5.4907586966939044E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999945092413033	WITHOUT_CLASSIFICATION	5.4907586966939044E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999723531884603	WITHOUT_CLASSIFICATION	2.7646811539699264E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999908138546449	WITHOUT_CLASSIFICATION	9.186145355120636E-6	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999726064446248	WITHOUT_CLASSIFICATION	2.7393555375187462E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.999982311957173	WITHOUT_CLASSIFICATION	1.7688042826971255E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999815124600059	WITHOUT_CLASSIFICATION	1.8487539994132025E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999466203156973	WITHOUT_CLASSIFICATION	5.337968430278281E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9988560600142306	WITHOUT_CLASSIFICATION	0.0011439399857694431	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999935869032982	WITHOUT_CLASSIFICATION	6.413096701801824E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999861385443131	WITHOUT_CLASSIFICATION	1.3861455686899619E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9992689128390626	WITHOUT_CLASSIFICATION	7.31087160937291E-4	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9995584832149192	WITHOUT_CLASSIFICATION	4.4151678508074437E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999870101980466	WITHOUT_CLASSIFICATION	1.298980195351967E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999870101980466	WITHOUT_CLASSIFICATION	1.298980195351967E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9995462630866228	WITHOUT_CLASSIFICATION	4.537369133772543E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.999989463739749	WITHOUT_CLASSIFICATION	1.053626025096931E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999970084938899	WITHOUT_CLASSIFICATION	2.991506110102668E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999970084938899	WITHOUT_CLASSIFICATION	2.991506110102668E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999929364499737	WITHOUT_CLASSIFICATION	7.06355002635377E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999563174651901	WITHOUT_CLASSIFICATION	4.3682534809827195E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.999714380683265	WITHOUT_CLASSIFICATION	2.856193167350362E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9998886272496195	WITHOUT_CLASSIFICATION	1.1137275038056628E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999593852667924	WITHOUT_CLASSIFICATION	4.061473320752899E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9998465107814869	WITHOUT_CLASSIFICATION	1.5348921851317875E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999827851744235	WITHOUT_CLASSIFICATION	1.7214825576516795E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999949692350921	WITHOUT_CLASSIFICATION	5.030764907953536E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9982676232351835	WITHOUT_CLASSIFICATION	0.0017323767648164384	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999901703527019	WITHOUT_CLASSIFICATION	9.82964729807771E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9998454138103905	WITHOUT_CLASSIFICATION	1.545861896094724E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999674543689903	WITHOUT_CLASSIFICATION	3.254563100972345E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999903024830018	WITHOUT_CLASSIFICATION	9.697516998293132E-6	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9998826352405358	WITHOUT_CLASSIFICATION	1.173647594642024E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999897942168656	WITHOUT_CLASSIFICATION	1.0205783134284004E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9956634640825021	WITHOUT_CLASSIFICATION	0.00433653591749796	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.999864074956597	WITHOUT_CLASSIFICATION	1.3592504340295596E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999097222516038	WITHOUT_CLASSIFICATION	9.027774839616315E-5	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9996147541249674	WITHOUT_CLASSIFICATION	3.852458750326508E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999858499264185	WITHOUT_CLASSIFICATION	1.415007358139446E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9575093431294143	WITHOUT_CLASSIFICATION	0.042490656870585744	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.999954452811006	WITHOUT_CLASSIFICATION	4.55471889939247E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999769092859755	WITHOUT_CLASSIFICATION	2.309071402443732E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999826228099151	WITHOUT_CLASSIFICATION	1.737719008492791E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999842827830733	WITHOUT_CLASSIFICATION	1.571721692672071E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9996508496887763	WITHOUT_CLASSIFICATION	3.4915031122378714E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9996583464140959	WITHOUT_CLASSIFICATION	3.416535859041117E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9998435205994632	WITHOUT_CLASSIFICATION	1.5647940053683496E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999426839125791	WITHOUT_CLASSIFICATION	5.731608742086197E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9998859308382346	WITHOUT_CLASSIFICATION	1.1406916176543275E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999666553553855	WITHOUT_CLASSIFICATION	3.3344644614475016E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9995729746009928	WITHOUT_CLASSIFICATION	4.270253990072635E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999107670982413	WITHOUT_CLASSIFICATION	8.923290175862888E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999107670982413	WITHOUT_CLASSIFICATION	8.923290175862888E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999577504644896	WITHOUT_CLASSIFICATION	4.224953551040571E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999878742476884	WITHOUT_CLASSIFICATION	1.212575231162585E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9997675914587976	WITHOUT_CLASSIFICATION	2.3240854120249688E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9998450942551215	WITHOUT_CLASSIFICATION	1.5490574487847674E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998308671344656	WITHOUT_CLASSIFICATION	1.6913286553438544E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999871658560676	WITHOUT_CLASSIFICATION	1.283414393230508E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9911435910900739	WITHOUT_CLASSIFICATION	0.008856408909926162	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9911435910900739	WITHOUT_CLASSIFICATION	0.008856408909926162	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9998455268490134	WITHOUT_CLASSIFICATION	1.5447315098657087E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9998623385841798	WITHOUT_CLASSIFICATION	1.3766141582020024E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9997869863066462	WITHOUT_CLASSIFICATION	2.1301369335379963E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9411640083673326	WITHOUT_CLASSIFICATION	0.05883599163266739	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999097969972095	WITHOUT_CLASSIFICATION	9.020300279053087E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999311511731876	WITHOUT_CLASSIFICATION	6.884882681229166E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999912737433029	WITHOUT_CLASSIFICATION	8.726256697167126E-6	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999906120469959	WITHOUT_CLASSIFICATION	9.387953004177463E-6	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9998289322222614	WITHOUT_CLASSIFICATION	1.7106777773853396E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999445975939962	WITHOUT_CLASSIFICATION	5.540240600381065E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999627599052298	WITHOUT_CLASSIFICATION	3.724009477020746E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999584889578949	WITHOUT_CLASSIFICATION	4.151104210522053E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999426052019553	WITHOUT_CLASSIFICATION	5.739479804460117E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.999999193607937	WITHOUT_CLASSIFICATION	8.063920629726722E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.999927879759069	WITHOUT_CLASSIFICATION	7.212024093094964E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997558048654583	WITHOUT_CLASSIFICATION	2.441951345417502E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9995353272550792	WITHOUT_CLASSIFICATION	4.646727449208647E-4	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999916775563913	WITHOUT_CLASSIFICATION	8.322443608680815E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9998070304210961	WITHOUT_CLASSIFICATION	1.9296957890386755E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9997766416496161	WITHOUT_CLASSIFICATION	2.2335835038383983E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9979888365001202	WITHOUT_CLASSIFICATION	0.002011163499879852	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9990638182201814	WITHOUT_CLASSIFICATION	9.361817798186579E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999968740549872	WITHOUT_CLASSIFICATION	3.125945012788851E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999976889087699	WITHOUT_CLASSIFICATION	2.311091230045884E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999469788339201	WITHOUT_CLASSIFICATION	5.3021166079860835E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997032641989317	WITHOUT_CLASSIFICATION	2.9673580106836703E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.999957357544939	WITHOUT_CLASSIFICATION	4.2642455060982314E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998753425988829	WITHOUT_CLASSIFICATION	1.246574011171442E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999680167304472	WITHOUT_CLASSIFICATION	3.198326955275096E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999701957987871	WITHOUT_CLASSIFICATION	2.980420121296801E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998705011573806	WITHOUT_CLASSIFICATION	1.2949884261933832E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999646034786842	WITHOUT_CLASSIFICATION	3.53965213158267E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999689491810082	WITHOUT_CLASSIFICATION	3.1050818991833704E-5	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999641340508524	WITHOUT_CLASSIFICATION	3.586594914766711E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999667559467874	WITHOUT_CLASSIFICATION	3.324405321259647E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998632322734269	WITHOUT_CLASSIFICATION	1.3676772657312335E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9998640776635813	WITHOUT_CLASSIFICATION	1.3592233641881505E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9968692724978104	WITHOUT_CLASSIFICATION	0.003130727502189599	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999907881540832	WITHOUT_CLASSIFICATION	9.211845916918061E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999954727972554	WITHOUT_CLASSIFICATION	4.527202744615068E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997606477842597	WITHOUT_CLASSIFICATION	2.3935221574021028E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9989961229290965	WITHOUT_CLASSIFICATION	0.001003877070903518	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9992563421317484	WITHOUT_CLASSIFICATION	7.436578682515589E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.999845347517376	WITHOUT_CLASSIFICATION	1.5465248262405253E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9998791338628441	WITHOUT_CLASSIFICATION	1.2086613715582708E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9992834780253199	WITHOUT_CLASSIFICATION	7.165219746800783E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998639158502568	WITHOUT_CLASSIFICATION	1.360841497431935E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998696910851976	WITHOUT_CLASSIFICATION	1.3030891480239355E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999749661303222	WITHOUT_CLASSIFICATION	2.503386967777413E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9171833930736517	WITHOUT_CLASSIFICATION	0.08281660692634837	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998357626141523	WITHOUT_CLASSIFICATION	1.6423738584773738E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997322913958817	WITHOUT_CLASSIFICATION	2.677086041182816E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999878641980909	WITHOUT_CLASSIFICATION	1.213580190913563E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999987394525669	WITHOUT_CLASSIFICATION	1.260547433171393E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9996080845826261	WITHOUT_CLASSIFICATION	3.919154173739418E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999972034773558	WITHOUT_CLASSIFICATION	2.7965226441272195E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999891608896736	WITHOUT_CLASSIFICATION	1.0839110326273188E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999518729414218	WITHOUT_CLASSIFICATION	4.8127058578194184E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999334733584281	WITHOUT_CLASSIFICATION	6.652664157200647E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.999944365335904	WITHOUT_CLASSIFICATION	5.563466409605519E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999334733584281	WITHOUT_CLASSIFICATION	6.652664157200647E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999505566898339	WITHOUT_CLASSIFICATION	4.944331016607032E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.999944365335904	WITHOUT_CLASSIFICATION	5.563466409605519E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.999993846142145	WITHOUT_CLASSIFICATION	6.153857854908439E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999441368169703	WITHOUT_CLASSIFICATION	5.586318302988027E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9954377693851494	WITHOUT_CLASSIFICATION	0.004562230614850621	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9689215799179699	WITHOUT_CLASSIFICATION	0.03107842008203018	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999037549317996	WITHOUT_CLASSIFICATION	9.62450682003853E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9982158130662395	WITHOUT_CLASSIFICATION	0.001784186933760483	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998327754446722	WITHOUT_CLASSIFICATION	1.6722455532776763E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9998945390533738	WITHOUT_CLASSIFICATION	1.054609466262015E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.999012224748534	WITHOUT_CLASSIFICATION	9.877752514659203E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999858499264185	WITHOUT_CLASSIFICATION	1.415007358139446E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999978408594987	WITHOUT_CLASSIFICATION	2.159140501376923E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9952899077250869	WITHOUT_CLASSIFICATION	0.004710092274913183	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999799714020658	WITHOUT_CLASSIFICATION	2.0028597934149573E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.999991404423557	WITHOUT_CLASSIFICATION	8.595576442956604E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9998818598607592	WITHOUT_CLASSIFICATION	1.181401392408397E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9992536897474769	WITHOUT_CLASSIFICATION	7.463102525232451E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999948929647363	WITHOUT_CLASSIFICATION	5.107035263709875E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9988843918786516	WITHOUT_CLASSIFICATION	0.0011156081213483224	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9861072352689088	WITHOUT_CLASSIFICATION	0.01389276473109123	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999802561400594	WITHOUT_CLASSIFICATION	1.9743859940720392E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999968433600503	WITHOUT_CLASSIFICATION	3.1566399495800837E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999861716557065	WITHOUT_CLASSIFICATION	1.382834429351593E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9997338137586176	WITHOUT_CLASSIFICATION	2.661862413824036E-4	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999942068858703	WITHOUT_CLASSIFICATION	5.79311412966947E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9991126465611668	WITHOUT_CLASSIFICATION	8.87353438833195E-4	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999979899865956	WITHOUT_CLASSIFICATION	2.01001340425533E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999505922080221	WITHOUT_CLASSIFICATION	4.940779197789532E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999505922080221	WITHOUT_CLASSIFICATION	4.940779197789532E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998928025744266	WITHOUT_CLASSIFICATION	1.071974255734443E-4	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999841000800891	WITHOUT_CLASSIFICATION	1.589991991094501E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998993703640118	WITHOUT_CLASSIFICATION	1.0062963598823739E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999784573837488	WITHOUT_CLASSIFICATION	2.1542616251194613E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999393449237547	WITHOUT_CLASSIFICATION	6.065507624532113E-5	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999603671147492	WITHOUT_CLASSIFICATION	3.963288525076269E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9794695280567853	WITHOUT_CLASSIFICATION	0.020530471943214734	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999735367979016	WITHOUT_CLASSIFICATION	2.6463202098421776E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997747871365265	WITHOUT_CLASSIFICATION	2.2521286347351266E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997747871365265	WITHOUT_CLASSIFICATION	2.2521286347351266E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9994884790276176	WITHOUT_CLASSIFICATION	5.115209723824178E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999444405991487	WITHOUT_CLASSIFICATION	5.555940085144725E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.955837328282927	WITHOUT_CLASSIFICATION	0.044162671717073	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999808729794716	WITHOUT_CLASSIFICATION	1.9127020528477987E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9997830001516675	WITHOUT_CLASSIFICATION	2.169998483323728E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9996787405618709	WITHOUT_CLASSIFICATION	3.2125943812910787E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9998166578892569	WITHOUT_CLASSIFICATION	1.8334211074308126E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999505566898339	WITHOUT_CLASSIFICATION	4.944331016607032E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999289433675126	WITHOUT_CLASSIFICATION	7.105663248741524E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999931536170716	WITHOUT_CLASSIFICATION	6.846382928393574E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999867841071076	WITHOUT_CLASSIFICATION	1.3215892892444362E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999789161221327	WITHOUT_CLASSIFICATION	2.1083877867194117E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999631129219079	WITHOUT_CLASSIFICATION	3.688707809215451E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999631129219079	WITHOUT_CLASSIFICATION	3.688707809215451E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999444405991487	WITHOUT_CLASSIFICATION	5.555940085144725E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.999989842726751	WITHOUT_CLASSIFICATION	1.0157273249007239E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9581267701617392	WITHOUT_CLASSIFICATION	0.04187322983826085	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999829656428219	WITHOUT_CLASSIFICATION	1.7034357178206774E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999403911081837	WITHOUT_CLASSIFICATION	5.960889181646286E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998816394498677	WITHOUT_CLASSIFICATION	1.1836055013229121E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999300519934784	WITHOUT_CLASSIFICATION	6.99480065215756E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999237721904305	WITHOUT_CLASSIFICATION	7.622780956958295E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9994105583634757	WITHOUT_CLASSIFICATION	5.894416365243157E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9996912755968533	WITHOUT_CLASSIFICATION	3.0872440314668874E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999906863845399	WITHOUT_CLASSIFICATION	9.313615460075767E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999816700783711	WITHOUT_CLASSIFICATION	1.832992162882932E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997765330429591	WITHOUT_CLASSIFICATION	2.2346695704081744E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999752318074849	WITHOUT_CLASSIFICATION	2.476819251510476E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999030462932336	WITHOUT_CLASSIFICATION	9.695370676647287E-5	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.99992675764582	WITHOUT_CLASSIFICATION	7.324235418001862E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999706283909898	WITHOUT_CLASSIFICATION	2.9371609010273452E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999636768354757	WITHOUT_CLASSIFICATION	3.6323164524266346E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999636768354757	WITHOUT_CLASSIFICATION	3.6323164524266346E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9981606326271816	WITHOUT_CLASSIFICATION	0.00183936737281846	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999880731716022	WITHOUT_CLASSIFICATION	1.192682839792441E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999983449644313	WITHOUT_CLASSIFICATION	1.6550355685998758E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999902873531289	WITHOUT_CLASSIFICATION	9.712646871177547E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997315387653888	WITHOUT_CLASSIFICATION	2.6846123461114714E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9997315387653888	WITHOUT_CLASSIFICATION	2.6846123461114714E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999827406888897	WITHOUT_CLASSIFICATION	1.7259311110242035E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999997383058941	WITHOUT_CLASSIFICATION	2.616941059556861E-7	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.999826269666796	WITHOUT_CLASSIFICATION	1.737303332040235E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9998106397087785	WITHOUT_CLASSIFICATION	1.893602912214564E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999568316428813	WITHOUT_CLASSIFICATION	4.316835711867411E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999900373461433	WITHOUT_CLASSIFICATION	9.962653856678152E-6	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999804112613692	WITHOUT_CLASSIFICATION	1.9588738630852373E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988877070567593	WITHOUT_CLASSIFICATION	0.0011122929432406117	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999942287048132	WITHOUT_CLASSIFICATION	5.7712951866675045E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999182557073164	WITHOUT_CLASSIFICATION	8.174429268348797E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999628053084849	WITHOUT_CLASSIFICATION	3.719469151509547E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995413901182508	WITHOUT_CLASSIFICATION	4.586098817492421E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999836547696589	WITHOUT_CLASSIFICATION	1.6345230341138944E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998410548661	WITHOUT_CLASSIFICATION	1.589451340326165E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999880277712596	WITHOUT_CLASSIFICATION	1.1972228740250346E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999751510503684	WITHOUT_CLASSIFICATION	2.4848949631584292E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999770762177148	WITHOUT_CLASSIFICATION	2.292378228518999E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997121167709192	WITHOUT_CLASSIFICATION	2.878832290808995E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9996777208442194	WITHOUT_CLASSIFICATION	3.222791557806531E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999573070830691	WITHOUT_CLASSIFICATION	4.2692916930935704E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999436195818403	WITHOUT_CLASSIFICATION	5.638041815971396E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999725106616597	WITHOUT_CLASSIFICATION	2.748933834024203E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999222267575475	WITHOUT_CLASSIFICATION	7.777324245252427E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999766895989675	WITHOUT_CLASSIFICATION	2.331040103253372E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9991582325403887	WITHOUT_CLASSIFICATION	8.417674596113196E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9981284303864173	WITHOUT_CLASSIFICATION	0.0018715696135826803	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9997930885266448	WITHOUT_CLASSIFICATION	2.069114733551722E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9998726664769295	WITHOUT_CLASSIFICATION	1.273335230705976E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999925392066278	WITHOUT_CLASSIFICATION	7.460793372152081E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999474538094625	WITHOUT_CLASSIFICATION	5.254619053741563E-5	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.999573081976533	WITHOUT_CLASSIFICATION	4.2691802346694294E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999626517328775	WITHOUT_CLASSIFICATION	3.7348267122610044E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999428506540728	WITHOUT_CLASSIFICATION	5.7149345927079846E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999161663082117	WITHOUT_CLASSIFICATION	8.383369178841549E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9829928010452998	WITHOUT_CLASSIFICATION	0.017007198954700136	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998005549813943	WITHOUT_CLASSIFICATION	1.9944501860567516E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9994574801902469	WITHOUT_CLASSIFICATION	5.425198097531082E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9986721526792948	WITHOUT_CLASSIFICATION	0.001327847320705297	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9994803497444087	WITHOUT_CLASSIFICATION	5.196502555912084E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999714141690751	WITHOUT_CLASSIFICATION	2.8585830924955556E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999971557521253	WITHOUT_CLASSIFICATION	2.8442478746927237E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999619661781385	WITHOUT_CLASSIFICATION	3.8033821861511904E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999990377719282	WITHOUT_CLASSIFICATION	9.622280717971797E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999551711595773	WITHOUT_CLASSIFICATION	4.482884042273105E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9993210619836529	WITHOUT_CLASSIFICATION	6.789380163470015E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9993210619836529	WITHOUT_CLASSIFICATION	6.789380163470015E-4	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999822923728507	WITHOUT_CLASSIFICATION	1.770762714928325E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9995919088175408	WITHOUT_CLASSIFICATION	4.0809118245918477E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9997777091795912	WITHOUT_CLASSIFICATION	2.2229082040878124E-4	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9997806584390264	WITHOUT_CLASSIFICATION	2.1934156097351386E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975635048024	WITHOUT_CLASSIFICATION	2.436495197590085E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975635048024	WITHOUT_CLASSIFICATION	2.436495197590085E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9982644185136548	WITHOUT_CLASSIFICATION	0.0017355814863452541	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9997653098152018	WITHOUT_CLASSIFICATION	2.3469018479821974E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999564285704444	WITHOUT_CLASSIFICATION	4.357142955555916E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999885532350918	WITHOUT_CLASSIFICATION	1.1446764908302837E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999551974081087	WITHOUT_CLASSIFICATION	4.4802591891273355E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999551974081087	WITHOUT_CLASSIFICATION	4.4802591891273355E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999734519893341	WITHOUT_CLASSIFICATION	2.6548010665994666E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999734519893341	WITHOUT_CLASSIFICATION	2.6548010665994666E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999686848357546	WITHOUT_CLASSIFICATION	3.1315164245329306E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999203568865807	WITHOUT_CLASSIFICATION	7.964311341938365E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999626598318073	WITHOUT_CLASSIFICATION	3.7340168192616605E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9998260005791746	WITHOUT_CLASSIFICATION	1.7399942082553735E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999087394994001	WITHOUT_CLASSIFICATION	9.126050059993282E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.999925441674128	WITHOUT_CLASSIFICATION	7.455832587196048E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999727669439926	WITHOUT_CLASSIFICATION	2.7233056007481437E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999691071580715	WITHOUT_CLASSIFICATION	3.089284192851451E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999674682325846	WITHOUT_CLASSIFICATION	3.253176741530012E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999347461270283	WITHOUT_CLASSIFICATION	6.525387297179296E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.996549970419273	WITHOUT_CLASSIFICATION	0.003450029580727072	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999809577039299	WITHOUT_CLASSIFICATION	1.9042296070071398E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999533638182592	WITHOUT_CLASSIFICATION	4.663618174076412E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9998740737478854	WITHOUT_CLASSIFICATION	1.2592625211455693E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999993206766526	WITHOUT_CLASSIFICATION	6.793233474148028E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999015267915987	WITHOUT_CLASSIFICATION	9.847320840123535E-5	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9998663376946485	WITHOUT_CLASSIFICATION	1.3366230535153163E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998463362108891	WITHOUT_CLASSIFICATION	1.5366378911085834E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999410477293994	WITHOUT_CLASSIFICATION	5.895227060060807E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999500485613649	WITHOUT_CLASSIFICATION	4.9951438635036025E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9952899077250869	WITHOUT_CLASSIFICATION	0.004710092274913183	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999968121962649	WITHOUT_CLASSIFICATION	3.1878037350876945E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999589838455207	WITHOUT_CLASSIFICATION	4.1016154479217214E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.999974547675341	WITHOUT_CLASSIFICATION	2.54523246590688E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9998498738514141	WITHOUT_CLASSIFICATION	1.5012614858602664E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999746419050564	WITHOUT_CLASSIFICATION	2.535809494360065E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999799240838734	WITHOUT_CLASSIFICATION	2.007591612656639E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9998858728496467	WITHOUT_CLASSIFICATION	1.1412715035330857E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.999736350116197	WITHOUT_CLASSIFICATION	2.636498838030718E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999900445079224	WITHOUT_CLASSIFICATION	9.955492077611323E-6	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9997943362514403	WITHOUT_CLASSIFICATION	2.0566374855968784E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998926929876171	WITHOUT_CLASSIFICATION	1.0730701238293828E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9996448518345777	WITHOUT_CLASSIFICATION	3.551481654222377E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999300294407372	WITHOUT_CLASSIFICATION	6.997055926287182E-5	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9992300653536292	WITHOUT_CLASSIFICATION	7.699346463707022E-4	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999897048818969	WITHOUT_CLASSIFICATION	1.0295118103184613E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999265516617153	WITHOUT_CLASSIFICATION	7.344833828473342E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999862712732361	WITHOUT_CLASSIFICATION	1.3728726763870074E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9835306490277784	WITHOUT_CLASSIFICATION	0.016469350972221606	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999966889476165	WITHOUT_CLASSIFICATION	3.311052383483739E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998387509161126	WITHOUT_CLASSIFICATION	1.6124908388737564E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9994443943373014	WITHOUT_CLASSIFICATION	5.556056626986368E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999418222300397	WITHOUT_CLASSIFICATION	5.8177769960391386E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9948606863741374	WITHOUT_CLASSIFICATION	0.0051393136258625445	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997868290030764	WITHOUT_CLASSIFICATION	2.131709969237471E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999753052966391	WITHOUT_CLASSIFICATION	2.469470336090285E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998892167735082	WITHOUT_CLASSIFICATION	1.1078322649181171E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999527011118478	WITHOUT_CLASSIFICATION	4.7298888152219325E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999477351368141	WITHOUT_CLASSIFICATION	5.2264863185813476E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999791871231679	WITHOUT_CLASSIFICATION	2.0812876832106746E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999791871231679	WITHOUT_CLASSIFICATION	2.0812876832106746E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999786575178109	WITHOUT_CLASSIFICATION	2.1342482189051362E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999786575178109	WITHOUT_CLASSIFICATION	2.1342482189051362E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994381296456966	WITHOUT_CLASSIFICATION	5.618703543035425E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9994381296456966	WITHOUT_CLASSIFICATION	5.618703543035425E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999259512689102	WITHOUT_CLASSIFICATION	7.404873108982656E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999259512689102	WITHOUT_CLASSIFICATION	7.404873108982656E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997538535705659	WITHOUT_CLASSIFICATION	2.461464294340082E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997538535705659	WITHOUT_CLASSIFICATION	2.461464294340082E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997538535705659	WITHOUT_CLASSIFICATION	2.461464294340082E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999552130602578	WITHOUT_CLASSIFICATION	4.478693974216923E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999455630157701	WITHOUT_CLASSIFICATION	5.443698422991949E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998482457170118	WITHOUT_CLASSIFICATION	1.51754282988189E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998482457170118	WITHOUT_CLASSIFICATION	1.51754282988189E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998482457170118	WITHOUT_CLASSIFICATION	1.51754282988189E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998741483575472	WITHOUT_CLASSIFICATION	1.2585164245280679E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999641069901021	WITHOUT_CLASSIFICATION	3.5893009897966205E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999114790139447	WITHOUT_CLASSIFICATION	8.852098605518272E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999818504865797	WITHOUT_CLASSIFICATION	1.8149513420295565E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999818504865797	WITHOUT_CLASSIFICATION	1.8149513420295565E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998019514563775	WITHOUT_CLASSIFICATION	1.98048543622459E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999985958749421	WITHOUT_CLASSIFICATION	1.4041250579389712E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999985958749421	WITHOUT_CLASSIFICATION	1.4041250579389712E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9119996072108697	DEFECT	0.08800039278913037	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9982940677502126	WITHOUT_CLASSIFICATION	0.0017059322497875258	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999299935019644	WITHOUT_CLASSIFICATION	7.000649803561119E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9992724297568896	WITHOUT_CLASSIFICATION	7.275702431105335E-4	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999852250803053	WITHOUT_CLASSIFICATION	1.4774919694673587E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999988991618417	WITHOUT_CLASSIFICATION	1.1008381582228885E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9966135922955737	WITHOUT_CLASSIFICATION	0.0033864077044262896	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9996662863528524	WITHOUT_CLASSIFICATION	3.3371364714764886E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999963523629266	WITHOUT_CLASSIFICATION	3.6476370733979046E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999898285800153	WITHOUT_CLASSIFICATION	1.0171419984588334E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999950320339329	WITHOUT_CLASSIFICATION	4.9679660671069817E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9994015075430083	WITHOUT_CLASSIFICATION	5.98492456991755E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9998224040719494	WITHOUT_CLASSIFICATION	1.775959280504701E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999134931474318	WITHOUT_CLASSIFICATION	8.650685256818863E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997825841936956	WITHOUT_CLASSIFICATION	2.17415806304349E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9434386918767523	DEFECT	0.05656130812324752	WITHOUT_CLASSIFICATION
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.974495376633581	WITHOUT_CLASSIFICATION	0.025504623366419045	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.99997918770475	WITHOUT_CLASSIFICATION	2.0812295249943983E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999822056720837	WITHOUT_CLASSIFICATION	1.779432791625496E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998317730819487	WITHOUT_CLASSIFICATION	1.682269180513475E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9997322913958817	WITHOUT_CLASSIFICATION	2.677086041182816E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999589726511012	WITHOUT_CLASSIFICATION	4.102734889883923E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999836823866068	WITHOUT_CLASSIFICATION	1.6317613393141252E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9987052850777277	WITHOUT_CLASSIFICATION	0.00129471492227226	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9597986875906648	WITHOUT_CLASSIFICATION	0.04020131240933529	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9998091062090471	WITHOUT_CLASSIFICATION	1.908937909529412E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999995846225387	WITHOUT_CLASSIFICATION	4.1537746133085325E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999443087191743	WITHOUT_CLASSIFICATION	5.5691280825720194E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999891521201559	WITHOUT_CLASSIFICATION	1.0847879844025652E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9992665302316678	WITHOUT_CLASSIFICATION	7.334697683321468E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999563236041242	WITHOUT_CLASSIFICATION	4.367639587574184E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999954727972554	WITHOUT_CLASSIFICATION	4.527202744615068E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998511119761133	WITHOUT_CLASSIFICATION	1.4888802388676056E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998511119761133	WITHOUT_CLASSIFICATION	1.4888802388676056E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998511119761133	WITHOUT_CLASSIFICATION	1.4888802388676056E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998511119761133	WITHOUT_CLASSIFICATION	1.4888802388676056E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.999996731360343	WITHOUT_CLASSIFICATION	3.2686396569981074E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.999898595741905	WITHOUT_CLASSIFICATION	1.0140425809505465E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999660143658072	WITHOUT_CLASSIFICATION	3.3985634192796735E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999660143658072	WITHOUT_CLASSIFICATION	3.3985634192796735E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999716191110235	WITHOUT_CLASSIFICATION	2.838088897659495E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998885912497365	WITHOUT_CLASSIFICATION	1.1140875026343992E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998954470949715	WITHOUT_CLASSIFICATION	1.045529050284587E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999964489913509	WITHOUT_CLASSIFICATION	3.5510086490786173E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9987602918878554	WITHOUT_CLASSIFICATION	0.0012397081121445384	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.999536303733733	WITHOUT_CLASSIFICATION	4.6369626626699374E-4	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999618779873982	WITHOUT_CLASSIFICATION	3.812201260173691E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999910705689931	WITHOUT_CLASSIFICATION	8.929431007034855E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999910705689931	WITHOUT_CLASSIFICATION	8.929431007034855E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999910705689931	WITHOUT_CLASSIFICATION	8.929431007034855E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999910705689931	WITHOUT_CLASSIFICATION	8.929431007034855E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999959814246302	WITHOUT_CLASSIFICATION	4.0185753698624725E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9983488605362869	WITHOUT_CLASSIFICATION	0.0016511394637130326	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9983488605362869	WITHOUT_CLASSIFICATION	0.0016511394637130326	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9983488605362869	WITHOUT_CLASSIFICATION	0.0016511394637130326	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998490749247	WITHOUT_CLASSIFICATION	1.509250752999536E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999610066087811	WITHOUT_CLASSIFICATION	3.8993391218898095E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999954132132106	WITHOUT_CLASSIFICATION	4.586786789305134E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9982380785617737	WITHOUT_CLASSIFICATION	0.0017619214382261922	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9953290544744824	WITHOUT_CLASSIFICATION	0.004670945525517676	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9994984170697598	WITHOUT_CLASSIFICATION	5.015829302402739E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9994984170697598	WITHOUT_CLASSIFICATION	5.015829302402739E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998504977156164	WITHOUT_CLASSIFICATION	1.495022843835732E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998504977156164	WITHOUT_CLASSIFICATION	1.495022843835732E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999989704996484	WITHOUT_CLASSIFICATION	1.0295003516043527E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.999999847046198	WITHOUT_CLASSIFICATION	1.5295380193971786E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998694762680906	WITHOUT_CLASSIFICATION	1.3052373190924074E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.983285564734715	WITHOUT_CLASSIFICATION	0.01671443526528509	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999370024864099	WITHOUT_CLASSIFICATION	6.299751359008494E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999972659842266	WITHOUT_CLASSIFICATION	2.734015773363315E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998791732447448	WITHOUT_CLASSIFICATION	1.2082675525512672E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999241335868083	WITHOUT_CLASSIFICATION	7.586641319168366E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9995118551421021	WITHOUT_CLASSIFICATION	4.88144857897923E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999964603681458	WITHOUT_CLASSIFICATION	3.5396318541253305E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999964603681458	WITHOUT_CLASSIFICATION	3.5396318541253305E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828964151354	WITHOUT_CLASSIFICATION	1.7103584864671276E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828964151354	WITHOUT_CLASSIFICATION	1.7103584864671276E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9991023032699725	WITHOUT_CLASSIFICATION	8.976967300275156E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9998233414860456	WITHOUT_CLASSIFICATION	1.766585139543932E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999536268898568	WITHOUT_CLASSIFICATION	4.6373110143135E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990404111900223	WITHOUT_CLASSIFICATION	9.595888099777758E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990404111900223	WITHOUT_CLASSIFICATION	9.595888099777758E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990404111900223	WITHOUT_CLASSIFICATION	9.595888099777758E-4	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999615542213736	WITHOUT_CLASSIFICATION	3.8445778626539975E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999671424508502	WITHOUT_CLASSIFICATION	3.28575491497984E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9993247112447508	WITHOUT_CLASSIFICATION	6.752887552492073E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9997430936173305	WITHOUT_CLASSIFICATION	2.569063826695291E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9984637168198103	WITHOUT_CLASSIFICATION	0.00153628318018971	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999843872867394	WITHOUT_CLASSIFICATION	1.5612713260528886E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.974767837092149	WITHOUT_CLASSIFICATION	0.02523216290785097	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998285170861352	WITHOUT_CLASSIFICATION	1.7148291386474737E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998588820157315	WITHOUT_CLASSIFICATION	1.4111798426861343E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999505922080221	WITHOUT_CLASSIFICATION	4.940779197789532E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999337835570419	WITHOUT_CLASSIFICATION	6.621644295814601E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996844781891695	WITHOUT_CLASSIFICATION	3.1552181083047083E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999505868128841	WITHOUT_CLASSIFICATION	4.9413187115954495E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9995702922675134	WITHOUT_CLASSIFICATION	4.297077324866001E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9779171188810939	WITHOUT_CLASSIFICATION	0.022082881118906054	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9983945225983772	WITHOUT_CLASSIFICATION	0.00160547740162278	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.999670131273578	WITHOUT_CLASSIFICATION	3.298687264221113E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999755315703958	WITHOUT_CLASSIFICATION	2.4468429604184458E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999844228587879	WITHOUT_CLASSIFICATION	1.557714121206718E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999420212364897	WITHOUT_CLASSIFICATION	5.797876351038902E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999638936420985	WITHOUT_CLASSIFICATION	3.610635790152727E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999708131052732	WITHOUT_CLASSIFICATION	2.918689472678382E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9941609014516364	WITHOUT_CLASSIFICATION	0.005839098548363644	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9986748276506999	WITHOUT_CLASSIFICATION	0.0013251723493000488	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999692682752348	WITHOUT_CLASSIFICATION	3.0731724765296614E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999852577859524	WITHOUT_CLASSIFICATION	1.4742214047532166E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9790092149667432	WITHOUT_CLASSIFICATION	0.020990785033256847	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.7824324656312394	WITHOUT_CLASSIFICATION	0.21756753436876056	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9998117178602558	WITHOUT_CLASSIFICATION	1.882821397442115E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999403007811064	WITHOUT_CLASSIFICATION	5.9699218893641764E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999407869179334	WITHOUT_CLASSIFICATION	5.921308206650303E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999589992257667	WITHOUT_CLASSIFICATION	4.100077423333573E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9997195877820417	WITHOUT_CLASSIFICATION	2.804122179582883E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9984064585424643	WITHOUT_CLASSIFICATION	0.0015935414575356703	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9957130721021867	WITHOUT_CLASSIFICATION	0.0042869278978132815	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995914132260025	WITHOUT_CLASSIFICATION	4.085867739975387E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9995914132260025	WITHOUT_CLASSIFICATION	4.085867739975387E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9977012964849052	WITHOUT_CLASSIFICATION	0.0022987035150946926	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868071514899	WITHOUT_CLASSIFICATION	1.3192848510122335E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999868071514899	WITHOUT_CLASSIFICATION	1.3192848510122335E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9997859571475209	WITHOUT_CLASSIFICATION	2.1404285247899127E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999812172945373	WITHOUT_CLASSIFICATION	1.878270546276649E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998865979829191	WITHOUT_CLASSIFICATION	1.1340201708088611E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999767178070018	WITHOUT_CLASSIFICATION	2.3282192998285666E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999767178070018	WITHOUT_CLASSIFICATION	2.3282192998285666E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999698665507722	WITHOUT_CLASSIFICATION	3.0133449227829107E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996463471777702	WITHOUT_CLASSIFICATION	3.5365282222971924E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996463471777702	WITHOUT_CLASSIFICATION	3.5365282222971924E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9997307504159423	WITHOUT_CLASSIFICATION	2.6924958405772015E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.8603307991784052	DEFECT	0.13966920082159484	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9997705571983866	WITHOUT_CLASSIFICATION	2.2944280161331544E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999885209634006	WITHOUT_CLASSIFICATION	1.1479036599351413E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999193593408101	WITHOUT_CLASSIFICATION	8.064065918993418E-5	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998534100550959	WITHOUT_CLASSIFICATION	1.4658994490410608E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999871586257773	WITHOUT_CLASSIFICATION	1.284137422271385E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999739980476883	WITHOUT_CLASSIFICATION	2.6001952311692693E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999817907917669	WITHOUT_CLASSIFICATION	1.8209208233104564E-4	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9994965175106364	WITHOUT_CLASSIFICATION	5.034824893635433E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9993219112384417	WITHOUT_CLASSIFICATION	6.780887615582176E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999502964709268	WITHOUT_CLASSIFICATION	4.970352907306694E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999850506663887	WITHOUT_CLASSIFICATION	1.4949333611239428E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999516029124734	WITHOUT_CLASSIFICATION	4.8397087526588656E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998237454448561	WITHOUT_CLASSIFICATION	1.7625455514397594E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999784409687855	WITHOUT_CLASSIFICATION	2.1559031214525832E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9998920982888537	WITHOUT_CLASSIFICATION	1.0790171114620283E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9965664402660791	WITHOUT_CLASSIFICATION	0.0034335597339209874	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971445334762	WITHOUT_CLASSIFICATION	2.855466523799045E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999971445334762	WITHOUT_CLASSIFICATION	2.855466523799045E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.999828848668601	WITHOUT_CLASSIFICATION	1.711513313989564E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999666269566688	WITHOUT_CLASSIFICATION	3.337304333121921E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9995191770418042	WITHOUT_CLASSIFICATION	4.8082295819583344E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996809343674069	WITHOUT_CLASSIFICATION	3.190656325931383E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999364379236679	WITHOUT_CLASSIFICATION	6.356207633205304E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999364379236679	WITHOUT_CLASSIFICATION	6.356207633205304E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999364379236679	WITHOUT_CLASSIFICATION	6.356207633205304E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999947395479752	WITHOUT_CLASSIFICATION	5.260452024809931E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997322910227027	WITHOUT_CLASSIFICATION	2.6770897729733824E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.999964597733453	WITHOUT_CLASSIFICATION	3.5402266547035546E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999913378764901	WITHOUT_CLASSIFICATION	8.662123510033108E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999941545977191	WITHOUT_CLASSIFICATION	5.845402280854548E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999357477619167	WITHOUT_CLASSIFICATION	6.425223808324583E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.999877402505701	WITHOUT_CLASSIFICATION	1.2259749429895483E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9992689128390626	WITHOUT_CLASSIFICATION	7.31087160937291E-4	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999861385443131	WITHOUT_CLASSIFICATION	1.3861455686899619E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999931113635508	WITHOUT_CLASSIFICATION	6.888636449185479E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999541457527354	WITHOUT_CLASSIFICATION	4.585424726458473E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999866670076144	WITHOUT_CLASSIFICATION	1.3332992385670104E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9575093431294143	WITHOUT_CLASSIFICATION	0.042490656870585744	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9998908255433929	WITHOUT_CLASSIFICATION	1.0917445660709558E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999922433170009	WITHOUT_CLASSIFICATION	7.756682999232012E-6	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999020168796768	WITHOUT_CLASSIFICATION	9.79831203231776E-5	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999897803652739	WITHOUT_CLASSIFICATION	1.0219634726181982E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999968740549872	WITHOUT_CLASSIFICATION	3.125945012788851E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999701493372437	WITHOUT_CLASSIFICATION	2.9850662756232812E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9527419444796107	WITHOUT_CLASSIFICATION	0.047258055520389294	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9965812068314961	DEFECT	0.0034187931685038383	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9052650306883131	WITHOUT_CLASSIFICATION	0.09473496931168691	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9992155625038383	DEFECT	7.844374961617602E-4	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9909425916485953	DEFECT	0.00905740835140468	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9967783799710201	WITHOUT_CLASSIFICATION	0.003221620028979975	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9514187267355259	WITHOUT_CLASSIFICATION	0.04858127326447415	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9437888310219501	WITHOUT_CLASSIFICATION	0.05621116897804996	DEFECT
// FIXME: not correct exception	DEFECT	0.6593477366764575	DEFECT	0.3406522633235425	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.998852458643332	WITHOUT_CLASSIFICATION	0.0011475413566678693	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9922269762870451	WITHOUT_CLASSIFICATION	0.007773023712954796	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.5000195509554294	WITHOUT_CLASSIFICATION	0.4999804490445706	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9872191981710257	WITHOUT_CLASSIFICATION	0.012780801828974422	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9463077810778068	DEFECT	0.053692218922193266	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9221301042050974	WITHOUT_CLASSIFICATION	0.07786989579490255	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9688572577689684	WITHOUT_CLASSIFICATION	0.031142742231031532	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9688572577689684	WITHOUT_CLASSIFICATION	0.031142742231031532	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.7690846233078736	WITHOUT_CLASSIFICATION	0.23091537669212642	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9985929794176005	WITHOUT_CLASSIFICATION	0.0014070205823994639	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9860955104623818	WITHOUT_CLASSIFICATION	0.013904489537618175	DEFECT
// ENEBO: Very wrong	DEFECT	0.999890848853443	WITHOUT_CLASSIFICATION	1.0915114655698112E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.999890848853443	WITHOUT_CLASSIFICATION	1.0915114655698112E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.7340899746580756	WITHOUT_CLASSIFICATION	0.2659100253419243	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9340764007246445	WITHOUT_CLASSIFICATION	0.06592359927535558	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9710557110020127	WITHOUT_CLASSIFICATION	0.028944288997987323	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7480900919556475	WITHOUT_CLASSIFICATION	0.2519099080443524	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.70494469900212	WITHOUT_CLASSIFICATION	0.29505530099787997	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6034311589557237	WITHOUT_CLASSIFICATION	0.39656884104427625	DEFECT
// TODO: proper sign	DEFECT	0.9397028782085628	WITHOUT_CLASSIFICATION	0.06029712179143706	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.7759336980967346	DEFECT	0.22406630190326537	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.7313143098630102	WITHOUT_CLASSIFICATION	0.2686856901369898	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.6989353613546344	DEFECT	0.3010646386453656	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9144472629896485	WITHOUT_CLASSIFICATION	0.08555273701035154	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.6859558164087541	WITHOUT_CLASSIFICATION	0.3140441835912459	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.823359689445522	DEFECT	0.17664031055447812	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.72630671503995	WITHOUT_CLASSIFICATION	0.27369328496004997	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9051123985627703	WITHOUT_CLASSIFICATION	0.09488760143722971	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9625590780720624	WITHOUT_CLASSIFICATION	0.03744092192793753	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9932327706315944	WITHOUT_CLASSIFICATION	0.006767229368405555	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.8181739842527874	WITHOUT_CLASSIFICATION	0.1818260157472126	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9954345638177193	WITHOUT_CLASSIFICATION	0.004565436182280753	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9995903162534442	WITHOUT_CLASSIFICATION	4.096837465558496E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9473279425673696	WITHOUT_CLASSIFICATION	0.05267205743263031	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9473279425673696	WITHOUT_CLASSIFICATION	0.05267205743263031	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9801092936946736	WITHOUT_CLASSIFICATION	0.019890706305326415	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9761384648869299	WITHOUT_CLASSIFICATION	0.023861535113070192	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.7814085300603119	DEFECT	0.2185914699396882	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9972515712551165	WITHOUT_CLASSIFICATION	0.0027484287448834247	DEFECT
// FIXME: This is wrong	DEFECT	0.8290451633247449	WITHOUT_CLASSIFICATION	0.17095483667525505	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9885921578118638	WITHOUT_CLASSIFICATION	0.01140784218813627	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999434798014425	WITHOUT_CLASSIFICATION	5.652019855761636E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7744462598851145	WITHOUT_CLASSIFICATION	0.22555374011488558	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9983209778945932	WITHOUT_CLASSIFICATION	0.0016790221054067307	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9954928589075314	WITHOUT_CLASSIFICATION	0.004507141092468627	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9754567000792758	DEFECT	0.024543299920724144	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9259558372285479	DEFECT	0.07404416277145211	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9259558372285479	DEFECT	0.07404416277145211	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.6233258675881314	WITHOUT_CLASSIFICATION	0.3766741324118687	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9772256200757583	WITHOUT_CLASSIFICATION	0.022774379924241667	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9985260754466204	WITHOUT_CLASSIFICATION	0.0014739245533796107	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9517862307981526	DEFECT	0.04821376920184734	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9749032584948072	DEFECT	0.025096741505192824	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9538753228268473	WITHOUT_CLASSIFICATION	0.04612467717315267	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.7781430943914405	WITHOUT_CLASSIFICATION	0.22185690560855953	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9801092936946736	WITHOUT_CLASSIFICATION	0.019890706305326415	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9984955814630165	WITHOUT_CLASSIFICATION	0.0015044185369834761	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8757752614677302	WITHOUT_CLASSIFICATION	0.12422473853226987	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.7557766531076905	WITHOUT_CLASSIFICATION	0.24422334689230946	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7480900919556475	WITHOUT_CLASSIFICATION	0.2519099080443524	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9586960824540758	DEFECT	0.04130391754592417	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.7678839900538883	DEFECT	0.23211600994611165	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9625590780720624	WITHOUT_CLASSIFICATION	0.03744092192793753	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9995954247349621	WITHOUT_CLASSIFICATION	4.04575265037899E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9754567000792758	DEFECT	0.024543299920724144	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9196097941514992	DEFECT	0.08039020584850082	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// TODO: don't require pop	DEFECT	0.9139029919906368	WITHOUT_CLASSIFICATION	0.08609700800936308	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7744462598851145	WITHOUT_CLASSIFICATION	0.22555374011488558	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9865897516269626	WITHOUT_CLASSIFICATION	0.013410248373037477	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9259558372285479	DEFECT	0.07404416277145211	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9259558372285479	DEFECT	0.07404416277145211	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.999637424900597	WITHOUT_CLASSIFICATION	3.6257509940288747E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9900906514681266	WITHOUT_CLASSIFICATION	0.009909348531873493	DEFECT
