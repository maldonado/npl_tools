// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999874695956282	WITHOUT_CLASSIFICATION	1.2530404371723328E-5	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.999044189751151	WITHOUT_CLASSIFICATION	9.558102488491099E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9990776414663789	WITHOUT_CLASSIFICATION	9.223585336211552E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999033826963172	WITHOUT_CLASSIFICATION	9.661730368286473E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999033826963172	WITHOUT_CLASSIFICATION	9.661730368286473E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9990942999750615	WITHOUT_CLASSIFICATION	9.057000249385233E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999875133134927	WITHOUT_CLASSIFICATION	1.2486686507404377E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9991624403893817	WITHOUT_CLASSIFICATION	8.375596106181309E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9995860474389493	WITHOUT_CLASSIFICATION	4.1395256105078323E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9998902870117807	WITHOUT_CLASSIFICATION	1.0971298821929299E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999862391348949	WITHOUT_CLASSIFICATION	1.3760865105097995E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999862391348949	WITHOUT_CLASSIFICATION	1.3760865105097995E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999862391348949	WITHOUT_CLASSIFICATION	1.3760865105097995E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999862391348949	WITHOUT_CLASSIFICATION	1.3760865105097995E-4	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9982715935711237	WITHOUT_CLASSIFICATION	0.001728406428876352	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9993142243023534	WITHOUT_CLASSIFICATION	6.857756976465892E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9998737145323011	WITHOUT_CLASSIFICATION	1.262854676989017E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9994852821991216	WITHOUT_CLASSIFICATION	5.147178008784621E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999122927485027	WITHOUT_CLASSIFICATION	8.770725149734941E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999210098273045	WITHOUT_CLASSIFICATION	7.899017269557556E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999357312185365	WITHOUT_CLASSIFICATION	6.426878146347573E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999474896258745	WITHOUT_CLASSIFICATION	5.2510374125460027E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9916607056765081	WITHOUT_CLASSIFICATION	0.008339294323491899	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996612369902785	WITHOUT_CLASSIFICATION	3.387630097214342E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999683292545346	WITHOUT_CLASSIFICATION	3.167074546538131E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9993846544789824	WITHOUT_CLASSIFICATION	6.153455210175475E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999624102878657	WITHOUT_CLASSIFICATION	3.7589712134412646E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996891873585765	WITHOUT_CLASSIFICATION	3.108126414235259E-4	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9967803525032095	WITHOUT_CLASSIFICATION	0.003219647496790528	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.999972010264377	WITHOUT_CLASSIFICATION	2.7989735623028914E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999862391348949	WITHOUT_CLASSIFICATION	1.3760865105097995E-4	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.999814484999796	WITHOUT_CLASSIFICATION	1.8551500020412437E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999863107640631	WITHOUT_CLASSIFICATION	1.3689235936840952E-5	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999735491728627	WITHOUT_CLASSIFICATION	2.6450827137301894E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9995824611268104	WITHOUT_CLASSIFICATION	4.175388731896015E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9997873099205447	WITHOUT_CLASSIFICATION	2.1269007945536077E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9996422927114116	WITHOUT_CLASSIFICATION	3.577072885884222E-4	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9997946236960923	WITHOUT_CLASSIFICATION	2.0537630390774988E-4	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999829271485078	WITHOUT_CLASSIFICATION	1.707285149220589E-5	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9998313275415045	WITHOUT_CLASSIFICATION	1.6867245849553491E-4	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.999846265711962	WITHOUT_CLASSIFICATION	1.5373428803799432E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.991954089795686	WITHOUT_CLASSIFICATION	0.008045910204314098	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9998200971455757	WITHOUT_CLASSIFICATION	1.799028544241991E-4	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9998892104591618	WITHOUT_CLASSIFICATION	1.1078954083815504E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9998815661531394	WITHOUT_CLASSIFICATION	1.1843384686063447E-4	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9996607190568944	WITHOUT_CLASSIFICATION	3.3928094310561337E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9994691735625452	WITHOUT_CLASSIFICATION	5.308264374547875E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9996635213561271	WITHOUT_CLASSIFICATION	3.364786438728416E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9977373125910292	WITHOUT_CLASSIFICATION	0.002262687408970879	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.999910352707964	WITHOUT_CLASSIFICATION	8.964729203592205E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9988951404827116	WITHOUT_CLASSIFICATION	0.0011048595172883926	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999859650453783	WITHOUT_CLASSIFICATION	1.403495462185251E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999624559542969	WITHOUT_CLASSIFICATION	3.754404570309476E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9998411231078402	WITHOUT_CLASSIFICATION	1.588768921598227E-4	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999256759818991	WITHOUT_CLASSIFICATION	7.432401810092197E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9990968547035414	WITHOUT_CLASSIFICATION	9.031452964587541E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9994551933901591	WITHOUT_CLASSIFICATION	5.448066098408397E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998190944982002	WITHOUT_CLASSIFICATION	1.8090550179995833E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9982475723583032	WITHOUT_CLASSIFICATION	0.001752427641696836	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9995787764401929	WITHOUT_CLASSIFICATION	4.2122355980706434E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.999896175640737	WITHOUT_CLASSIFICATION	1.0382435926301345E-4	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9991214192767004	WITHOUT_CLASSIFICATION	8.785807232995596E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9995700092802413	WITHOUT_CLASSIFICATION	4.299907197587281E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9995591761743962	WITHOUT_CLASSIFICATION	4.4082382560381434E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998203630085014	WITHOUT_CLASSIFICATION	1.796369914985842E-4	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999090288162693	WITHOUT_CLASSIFICATION	9.097118373081095E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998953954793847	WITHOUT_CLASSIFICATION	1.0460452061529041E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997207856869129	WITHOUT_CLASSIFICATION	2.79214313087098E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997207856869129	WITHOUT_CLASSIFICATION	2.79214313087098E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999812845311348	WITHOUT_CLASSIFICATION	1.8715468865157294E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9996399493371835	WITHOUT_CLASSIFICATION	3.6005066281658704E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9998819568941832	WITHOUT_CLASSIFICATION	1.1804310581668505E-4	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9991772283558209	WITHOUT_CLASSIFICATION	8.227716441791955E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9938347431792773	WITHOUT_CLASSIFICATION	0.006165256820722664	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9891427627705555	WITHOUT_CLASSIFICATION	0.01085723722944446	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9993279170017991	WITHOUT_CLASSIFICATION	6.720829982008904E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.999932915683626	WITHOUT_CLASSIFICATION	6.70843163741068E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9998664565840149	WITHOUT_CLASSIFICATION	1.3354341598520892E-4	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999955269463059	WITHOUT_CLASSIFICATION	4.473053694097592E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999296783721286	WITHOUT_CLASSIFICATION	7.032162787124426E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997037089096654	WITHOUT_CLASSIFICATION	2.962910903345982E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997037089096654	WITHOUT_CLASSIFICATION	2.962910903345982E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9997037089096654	WITHOUT_CLASSIFICATION	2.962910903345982E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9998375846299222	WITHOUT_CLASSIFICATION	1.62415370077728E-4	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9998652955944701	WITHOUT_CLASSIFICATION	1.3470440552992578E-4	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999528824603131	WITHOUT_CLASSIFICATION	4.7117539686899726E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9856415337997745	WITHOUT_CLASSIFICATION	0.014358466200225458	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9989302460381712	WITHOUT_CLASSIFICATION	0.0010697539618288966	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999813404695407	WITHOUT_CLASSIFICATION	1.8659530459243807E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9949150776440431	WITHOUT_CLASSIFICATION	0.005084922355956923	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9994704549666377	WITHOUT_CLASSIFICATION	5.295450333624042E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9998759950302232	WITHOUT_CLASSIFICATION	1.2400496977680998E-4	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999181612805238	WITHOUT_CLASSIFICATION	8.183871947616652E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999929572638083	WITHOUT_CLASSIFICATION	7.042736191689604E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.999929572638083	WITHOUT_CLASSIFICATION	7.042736191689604E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9997919082569692	WITHOUT_CLASSIFICATION	2.0809174303088694E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9993686544632603	WITHOUT_CLASSIFICATION	6.313455367396104E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9998478723671024	WITHOUT_CLASSIFICATION	1.521276328976675E-4	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998103948929954	WITHOUT_CLASSIFICATION	1.8960510700462174E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9995817750704139	WITHOUT_CLASSIFICATION	4.182249295859994E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999181999989447	WITHOUT_CLASSIFICATION	8.180000105528921E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999862245250971	WITHOUT_CLASSIFICATION	1.3775474902937741E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9997953994059975	WITHOUT_CLASSIFICATION	2.046005940025511E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999370017289679	WITHOUT_CLASSIFICATION	6.299827103198669E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.999754330718357	WITHOUT_CLASSIFICATION	2.456692816430425E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9933079273819106	WITHOUT_CLASSIFICATION	0.006692072618089326	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999605739511266	WITHOUT_CLASSIFICATION	3.942604887334733E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9994528868861781	WITHOUT_CLASSIFICATION	5.471131138219485E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998546269850055	WITHOUT_CLASSIFICATION	1.4537301499446516E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998503169992188	WITHOUT_CLASSIFICATION	1.4968300078121657E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9901021132335188	WITHOUT_CLASSIFICATION	0.009897886766481193	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9997484235506298	WITHOUT_CLASSIFICATION	2.51576449370269E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.999904717234218	WITHOUT_CLASSIFICATION	9.5282765782065E-5	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999731269145546	WITHOUT_CLASSIFICATION	2.68730854453921E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9998888610287864	WITHOUT_CLASSIFICATION	1.1113897121351879E-4	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9996014280642099	WITHOUT_CLASSIFICATION	3.9857193578996425E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9975107508307295	WITHOUT_CLASSIFICATION	0.0024892491692705145	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999118448172645	WITHOUT_CLASSIFICATION	8.81551827355748E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999198328287168	WITHOUT_CLASSIFICATION	8.01671712832517E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9978084354257164	WITHOUT_CLASSIFICATION	0.0021915645742835253	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999132776841606	WITHOUT_CLASSIFICATION	8.672231583930344E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999410651933456	WITHOUT_CLASSIFICATION	5.893480665448017E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999251853339847	WITHOUT_CLASSIFICATION	7.481466601533364E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.999553308210641	WITHOUT_CLASSIFICATION	4.466917893589779E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.999646260821928	WITHOUT_CLASSIFICATION	3.5373917807202067E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999333134679077	WITHOUT_CLASSIFICATION	6.668653209223936E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9988495511088195	WITHOUT_CLASSIFICATION	0.0011504488911805461	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9995531723358182	WITHOUT_CLASSIFICATION	4.468276641818947E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9997747406269929	WITHOUT_CLASSIFICATION	2.2525937300717707E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.998217810651199	WITHOUT_CLASSIFICATION	0.0017821893488009605	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999329127553251	WITHOUT_CLASSIFICATION	6.708724467488782E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9998533808441759	WITHOUT_CLASSIFICATION	1.4661915582424298E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999941198175509	WITHOUT_CLASSIFICATION	5.88018244911521E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995198099274574	WITHOUT_CLASSIFICATION	4.801900725425863E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999598193249981	WITHOUT_CLASSIFICATION	4.01806750019882E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9968386291502074	WITHOUT_CLASSIFICATION	0.003161370849792631	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9996165641723995	WITHOUT_CLASSIFICATION	3.834358276004785E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999675990790564	WITHOUT_CLASSIFICATION	3.2400920943602995E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9602849314201122	WITHOUT_CLASSIFICATION	0.03971506857988783	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9998196492001112	WITHOUT_CLASSIFICATION	1.8035079988864942E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998514489907737	WITHOUT_CLASSIFICATION	1.4855100922624227E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999850780191717	WITHOUT_CLASSIFICATION	1.4921980828318612E-5	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9998037015597536	WITHOUT_CLASSIFICATION	1.9629844024626284E-4	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9986169345248341	WITHOUT_CLASSIFICATION	0.0013830654751659445	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999244067545119	WITHOUT_CLASSIFICATION	7.559324548820915E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9996448790558979	WITHOUT_CLASSIFICATION	3.5512094410207457E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9998910381625812	WITHOUT_CLASSIFICATION	1.0896183741881053E-4	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9989395666730836	WITHOUT_CLASSIFICATION	0.0010604333269164518	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9976406393801395	WITHOUT_CLASSIFICATION	0.002359360619860476	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9997966561956603	WITHOUT_CLASSIFICATION	2.0334380433977508E-4	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.99972670262185	WITHOUT_CLASSIFICATION	2.7329737815001313E-4	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.998223228274536	WITHOUT_CLASSIFICATION	0.0017767717254640234	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9993054725969902	WITHOUT_CLASSIFICATION	6.945274030097113E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.999739416665813	WITHOUT_CLASSIFICATION	2.6058333418700494E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9945656448961968	WITHOUT_CLASSIFICATION	0.00543435510380321	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9996007222061462	WITHOUT_CLASSIFICATION	3.9927779385392207E-4	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9976308560863513	WITHOUT_CLASSIFICATION	0.0023691439136486717	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9995236601291673	WITHOUT_CLASSIFICATION	4.7633987083275806E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999835606821165	WITHOUT_CLASSIFICATION	1.6439317883489195E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9993081076201891	WITHOUT_CLASSIFICATION	6.91892379810905E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9993081076201891	WITHOUT_CLASSIFICATION	6.91892379810905E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999520843218137	WITHOUT_CLASSIFICATION	4.791567818635672E-5	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9998903804395763	WITHOUT_CLASSIFICATION	1.0961956042374277E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998244429401258	WITHOUT_CLASSIFICATION	1.755570598741031E-4	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9992996288905868	WITHOUT_CLASSIFICATION	7.003711094132311E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999430009646276	WITHOUT_CLASSIFICATION	5.6999035372359766E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.999045089770359	WITHOUT_CLASSIFICATION	9.549102296410859E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998549158515476	WITHOUT_CLASSIFICATION	1.4508414845229022E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999691031973384	WITHOUT_CLASSIFICATION	3.089680266161933E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9998680549451251	WITHOUT_CLASSIFICATION	1.3194505487497624E-4	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999894587817046	WITHOUT_CLASSIFICATION	1.0541218295428711E-5	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999291221351306	WITHOUT_CLASSIFICATION	7.087786486939787E-5	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9916299039499132	WITHOUT_CLASSIFICATION	0.00837009605008675	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9369720226768051	WITHOUT_CLASSIFICATION	0.06302797732319497	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9997419886204554	WITHOUT_CLASSIFICATION	2.5801137954458884E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999132857779338	WITHOUT_CLASSIFICATION	8.67142220662772E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9998097311788594	WITHOUT_CLASSIFICATION	1.9026882114064338E-4	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9996509732264437	WITHOUT_CLASSIFICATION	3.4902677355627085E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999474427274745	WITHOUT_CLASSIFICATION	5.2557272525378524E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999755022401079	WITHOUT_CLASSIFICATION	2.44977598920212E-5	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9997887438491926	WITHOUT_CLASSIFICATION	2.112561508074019E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999817589897575	WITHOUT_CLASSIFICATION	1.8241010242439733E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999817589897575	WITHOUT_CLASSIFICATION	1.8241010242439733E-5	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999222835237735	WITHOUT_CLASSIFICATION	7.771647622638585E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.999977447046365	WITHOUT_CLASSIFICATION	2.2552953635029183E-5	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999436388932376	WITHOUT_CLASSIFICATION	5.636110676232922E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9926713165916068	WITHOUT_CLASSIFICATION	0.007328683408393183	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9994719703616736	WITHOUT_CLASSIFICATION	5.280296383265141E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9995385224239144	WITHOUT_CLASSIFICATION	4.614775760856926E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9995385224239144	WITHOUT_CLASSIFICATION	4.614775760856926E-4	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9693235252126995	WITHOUT_CLASSIFICATION	0.03067647478730042	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999254651885893	WITHOUT_CLASSIFICATION	7.453481141067676E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999254651885893	WITHOUT_CLASSIFICATION	7.453481141067676E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.998202341669903	WITHOUT_CLASSIFICATION	0.0017976583300971219	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996045447043322	WITHOUT_CLASSIFICATION	3.9545529566769434E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9996045447043322	WITHOUT_CLASSIFICATION	3.9545529566769434E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999285440619337	WITHOUT_CLASSIFICATION	7.145593806628497E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999285440619337	WITHOUT_CLASSIFICATION	7.145593806628497E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999188705996688	WITHOUT_CLASSIFICATION	8.112940033122332E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999885788560803	WITHOUT_CLASSIFICATION	1.1421143919794057E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999742858397925	WITHOUT_CLASSIFICATION	2.5714160207426276E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9996541392126017	WITHOUT_CLASSIFICATION	3.458607873983201E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9993286967797722	WITHOUT_CLASSIFICATION	6.713032202277233E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999264585884923	WITHOUT_CLASSIFICATION	7.354141150769297E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9996941689747134	WITHOUT_CLASSIFICATION	3.0583102528658766E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999264585884923	WITHOUT_CLASSIFICATION	7.354141150769297E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9960588610066039	WITHOUT_CLASSIFICATION	0.003941138993396082	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9998390093402414	WITHOUT_CLASSIFICATION	1.609906597586838E-4	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9998260825417419	WITHOUT_CLASSIFICATION	1.739174582580978E-4	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9998860571436932	WITHOUT_CLASSIFICATION	1.1394285630678134E-4	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.999967933606752	WITHOUT_CLASSIFICATION	3.206639324798757E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9956079677235514	WITHOUT_CLASSIFICATION	0.004392032276448568	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9998048686746894	WITHOUT_CLASSIFICATION	1.951313253105906E-4	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9993921083379452	WITHOUT_CLASSIFICATION	6.078916620548081E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9993260240926123	WITHOUT_CLASSIFICATION	6.739759073876754E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9997222991773252	WITHOUT_CLASSIFICATION	2.7770082267472644E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9996821447840245	WITHOUT_CLASSIFICATION	3.178552159755162E-4	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9998910570013514	WITHOUT_CLASSIFICATION	1.0894299864857935E-4	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9995680507031791	WITHOUT_CLASSIFICATION	4.319492968208151E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9998656261708662	WITHOUT_CLASSIFICATION	1.3437382913387638E-4	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9988315603805672	WITHOUT_CLASSIFICATION	0.0011684396194327556	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9995200455742044	WITHOUT_CLASSIFICATION	4.7995442579554454E-4	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9997116318793341	WITHOUT_CLASSIFICATION	2.8836812066592734E-4	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9988237670874154	WITHOUT_CLASSIFICATION	0.0011762329125845365	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9542375360335922	WITHOUT_CLASSIFICATION	0.045762463966407874	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9991016572528957	WITHOUT_CLASSIFICATION	8.983427471043798E-4	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999666496549988	WITHOUT_CLASSIFICATION	3.335034500108741E-5	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999717723614354	WITHOUT_CLASSIFICATION	2.8227638564619726E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9996560508474005	WITHOUT_CLASSIFICATION	3.439491525995479E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9998591540753038	WITHOUT_CLASSIFICATION	1.4084592469611846E-4	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9997579561749652	WITHOUT_CLASSIFICATION	2.420438250347558E-4	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999277511308573	WITHOUT_CLASSIFICATION	7.224886914275893E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999246136977573	WITHOUT_CLASSIFICATION	7.538630224273435E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9998715770879595	WITHOUT_CLASSIFICATION	1.2842291204055958E-4	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9997626901449946	WITHOUT_CLASSIFICATION	2.3730985500541253E-4	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999118391536255	WITHOUT_CLASSIFICATION	8.81608463746129E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999440950656807	WITHOUT_CLASSIFICATION	5.590493431916574E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9995050131619131	WITHOUT_CLASSIFICATION	4.949868380870378E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9997992899776815	WITHOUT_CLASSIFICATION	2.0071002231846307E-4	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9998324380052387	WITHOUT_CLASSIFICATION	1.6756199476122794E-4	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9996321805158628	WITHOUT_CLASSIFICATION	3.6781948413730584E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9998268361969695	WITHOUT_CLASSIFICATION	1.7316380303048886E-4	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999299436904012	WITHOUT_CLASSIFICATION	7.00563095987434E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9996321805158628	WITHOUT_CLASSIFICATION	3.6781948413730584E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999273213742246	WITHOUT_CLASSIFICATION	7.26786257754535E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9997877454093476	WITHOUT_CLASSIFICATION	2.1225459065242122E-4	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9998227997285802	WITHOUT_CLASSIFICATION	1.772002714197808E-4	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9998151762993905	WITHOUT_CLASSIFICATION	1.848237006094979E-4	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999119237118548	WITHOUT_CLASSIFICATION	8.807628814524313E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9996894037756127	WITHOUT_CLASSIFICATION	3.105962243873922E-4	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9998207001927706	WITHOUT_CLASSIFICATION	1.7929980722948132E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999278629130046	WITHOUT_CLASSIFICATION	7.213708699533944E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998524332143089	WITHOUT_CLASSIFICATION	1.4756678569106748E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9998790057916519	WITHOUT_CLASSIFICATION	1.2099420834820699E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999045615308303	WITHOUT_CLASSIFICATION	9.543846916974791E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999925045800157	WITHOUT_CLASSIFICATION	7.495419984339984E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9989214736095399	WITHOUT_CLASSIFICATION	0.0010785263904601306	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.999975112580318	WITHOUT_CLASSIFICATION	2.4887419681904813E-5	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999961592409023	WITHOUT_CLASSIFICATION	3.8407590976476786E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999961592409023	WITHOUT_CLASSIFICATION	3.8407590976476786E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9990541310991871	WITHOUT_CLASSIFICATION	9.458689008128542E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9995737570284489	WITHOUT_CLASSIFICATION	4.262429715511861E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9830398973540929	WITHOUT_CLASSIFICATION	0.016960102645907013	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999414249739503	WITHOUT_CLASSIFICATION	5.857502604968357E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9994521424655785	WITHOUT_CLASSIFICATION	5.478575344215707E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999466685780428	WITHOUT_CLASSIFICATION	5.333142195729434E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9647146479022498	WITHOUT_CLASSIFICATION	0.035285352097750196	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999376459909116	WITHOUT_CLASSIFICATION	6.23540090884697E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9997221642397587	WITHOUT_CLASSIFICATION	2.7783576024135347E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999432892696938	WITHOUT_CLASSIFICATION	5.671073030619433E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999991975383394	WITHOUT_CLASSIFICATION	8.024616606009422E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.999991975383394	WITHOUT_CLASSIFICATION	8.024616606009422E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999602701582834	WITHOUT_CLASSIFICATION	3.9729841716592656E-4	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9991184190379095	WITHOUT_CLASSIFICATION	8.81580962090502E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9986265425576701	WITHOUT_CLASSIFICATION	0.0013734574423298624	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998264042899092	WITHOUT_CLASSIFICATION	1.7359571009084194E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999669046388201	WITHOUT_CLASSIFICATION	3.309536117999422E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999859379703514	WITHOUT_CLASSIFICATION	1.406202964854384E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999724158792994	WITHOUT_CLASSIFICATION	2.758412070067102E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9991843678746459	WITHOUT_CLASSIFICATION	8.156321253540138E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999942895867412	WITHOUT_CLASSIFICATION	5.71041325877532E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9997612555765525	WITHOUT_CLASSIFICATION	2.3874442344754796E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9997965235542393	WITHOUT_CLASSIFICATION	2.034764457607091E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9992906885260314	WITHOUT_CLASSIFICATION	7.093114739685645E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998867382454475	WITHOUT_CLASSIFICATION	1.1326175455260676E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998867382454475	WITHOUT_CLASSIFICATION	1.1326175455260676E-4	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.997912140543572	WITHOUT_CLASSIFICATION	0.0020878594564280695	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999951411067135	WITHOUT_CLASSIFICATION	4.858893286538019E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9998227081548757	WITHOUT_CLASSIFICATION	1.7729184512433433E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9986966328915053	WITHOUT_CLASSIFICATION	0.0013033671084945963	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9996814176627896	WITHOUT_CLASSIFICATION	3.1858233721037316E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998719725268809	WITHOUT_CLASSIFICATION	1.2802747311907025E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9991601610401074	WITHOUT_CLASSIFICATION	8.398389598926077E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999222343101353	WITHOUT_CLASSIFICATION	7.776568986473412E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9949604502970519	WITHOUT_CLASSIFICATION	0.0050395497029480955	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999357005646975	WITHOUT_CLASSIFICATION	6.429943530244909E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9986265425576701	WITHOUT_CLASSIFICATION	0.0013734574423298624	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9973066065641811	WITHOUT_CLASSIFICATION	0.0026933934358189214	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9937199605030269	WITHOUT_CLASSIFICATION	0.006280039496973087	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999646021458578	WITHOUT_CLASSIFICATION	3.539785414224971E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9996965869982362	WITHOUT_CLASSIFICATION	3.0341300176376073E-4	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999326167932103	WITHOUT_CLASSIFICATION	6.738320678961225E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9998220770635433	WITHOUT_CLASSIFICATION	1.7792293645655266E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999694748878296	WITHOUT_CLASSIFICATION	3.052511217046656E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9993439363531097	WITHOUT_CLASSIFICATION	6.560636468903279E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9994864518751819	WITHOUT_CLASSIFICATION	5.135481248181303E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9994136408498197	WITHOUT_CLASSIFICATION	5.863591501803389E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998122891818282	WITHOUT_CLASSIFICATION	1.8771081817173826E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999153280451031	WITHOUT_CLASSIFICATION	8.467195489692346E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999588135559967	WITHOUT_CLASSIFICATION	4.1186444003378546E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9997130073094368	WITHOUT_CLASSIFICATION	2.869926905631752E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9998427812694687	WITHOUT_CLASSIFICATION	1.57218730531285E-4	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9998458408657764	WITHOUT_CLASSIFICATION	1.541591342236538E-4	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9954526597501118	WITHOUT_CLASSIFICATION	0.004547340249888177	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9998581643184835	WITHOUT_CLASSIFICATION	1.4183568151657612E-4	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.999788215598282	WITHOUT_CLASSIFICATION	2.117844017180945E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9989824293503609	WITHOUT_CLASSIFICATION	0.0010175706496392042	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999940761978859	WITHOUT_CLASSIFICATION	5.923802114106138E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999111808969235	WITHOUT_CLASSIFICATION	8.881910307648816E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.99646007600061	WITHOUT_CLASSIFICATION	0.003539923999390001	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9994093757771102	WITHOUT_CLASSIFICATION	5.906242228898149E-4	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9992143021150638	WITHOUT_CLASSIFICATION	7.85697884936187E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9994374850387543	WITHOUT_CLASSIFICATION	5.625149612455768E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9998422345211587	WITHOUT_CLASSIFICATION	1.5776547884122923E-4	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9759524172464819	WITHOUT_CLASSIFICATION	0.02404758275351805	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998315506924593	WITHOUT_CLASSIFICATION	1.684493075405751E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.999837887885421	WITHOUT_CLASSIFICATION	1.6211211457906044E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9998460593027295	WITHOUT_CLASSIFICATION	1.5394069727051385E-4	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9998863942372124	WITHOUT_CLASSIFICATION	1.1360576278768808E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999377674777595	WITHOUT_CLASSIFICATION	6.223252224052963E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999065592295192	WITHOUT_CLASSIFICATION	9.344077048071323E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999315705748467	WITHOUT_CLASSIFICATION	6.842942515329883E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9975548536536665	WITHOUT_CLASSIFICATION	0.0024451463463334676	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9997938594927702	WITHOUT_CLASSIFICATION	2.0614050722985927E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9997919082569692	WITHOUT_CLASSIFICATION	2.0809174303088694E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999843283970934	WITHOUT_CLASSIFICATION	1.567160290663312E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9986008099967766	WITHOUT_CLASSIFICATION	0.0013991900032234205	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998514489907737	WITHOUT_CLASSIFICATION	1.4855100922624227E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9996319204186668	WITHOUT_CLASSIFICATION	3.6807958133321393E-4	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9994908894988549	WITHOUT_CLASSIFICATION	5.091105011450655E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.999875353358829	WITHOUT_CLASSIFICATION	1.2464664117090447E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999993241174625	WITHOUT_CLASSIFICATION	6.758825374841074E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999918434054589	WITHOUT_CLASSIFICATION	8.156594541100147E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9977035368163644	WITHOUT_CLASSIFICATION	0.002296463183635575	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9995235127731447	WITHOUT_CLASSIFICATION	4.7648722685531925E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9989586715091147	WITHOUT_CLASSIFICATION	0.0010413284908852352	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9998921248708178	WITHOUT_CLASSIFICATION	1.0787512918223074E-4	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9984753163199589	WITHOUT_CLASSIFICATION	0.0015246836800410636	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9997362482515257	WITHOUT_CLASSIFICATION	2.6375174847420005E-4	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9998647275380553	WITHOUT_CLASSIFICATION	1.352724619446538E-4	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999972967994725	WITHOUT_CLASSIFICATION	2.7032005275986203E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.999936920585955	WITHOUT_CLASSIFICATION	6.307941404507169E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9998678896243213	WITHOUT_CLASSIFICATION	1.3211037567869628E-4	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9983569396515846	WITHOUT_CLASSIFICATION	0.0016430603484154933	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999834243937855	WITHOUT_CLASSIFICATION	1.6575606214527076E-5	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999270121544638	WITHOUT_CLASSIFICATION	7.298784553629732E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.999945294000114	WITHOUT_CLASSIFICATION	5.4705999885918426E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9991502269364625	WITHOUT_CLASSIFICATION	8.497730635374363E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9996470097483713	WITHOUT_CLASSIFICATION	3.529902516288112E-4	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.999852974506647	WITHOUT_CLASSIFICATION	1.4702549335300573E-4	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999985109244979	WITHOUT_CLASSIFICATION	1.4890755020265076E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999704120496665	WITHOUT_CLASSIFICATION	2.9587950333483328E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999730393351569	WITHOUT_CLASSIFICATION	2.6960664843108073E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999459736006359	WITHOUT_CLASSIFICATION	5.40263993641272E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.6840965511224342	WITHOUT_CLASSIFICATION	0.31590344887756594	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9947702906960079	WITHOUT_CLASSIFICATION	0.005229709303992143	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9860312724337958	WITHOUT_CLASSIFICATION	0.013968727566204051	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9998860840853869	WITHOUT_CLASSIFICATION	1.1391591461298048E-4	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998611567125224	WITHOUT_CLASSIFICATION	1.388432874775722E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9990729685107365	WITHOUT_CLASSIFICATION	9.270314892635068E-4	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9980719954015264	WITHOUT_CLASSIFICATION	0.0019280045984736288	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9984702037904467	WITHOUT_CLASSIFICATION	0.0015297962095532453	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.999983775264145	WITHOUT_CLASSIFICATION	1.622473585498283E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9998329499912215	WITHOUT_CLASSIFICATION	1.6705000877853603E-4	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9991912210764865	WITHOUT_CLASSIFICATION	8.087789235134855E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9969104923952733	WITHOUT_CLASSIFICATION	0.003089507604726665	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9996016118681504	WITHOUT_CLASSIFICATION	3.9838813184951124E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.999902885711562	WITHOUT_CLASSIFICATION	9.71142884380389E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9995860322626456	WITHOUT_CLASSIFICATION	4.13967737354358E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9997448144924742	WITHOUT_CLASSIFICATION	2.551855075257881E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9994889772047465	WITHOUT_CLASSIFICATION	5.110227952535974E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9994804654697391	WITHOUT_CLASSIFICATION	5.195345302608414E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9994552508831653	WITHOUT_CLASSIFICATION	5.44749116834703E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999025791696994	WITHOUT_CLASSIFICATION	9.742083030056707E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999025791696994	WITHOUT_CLASSIFICATION	9.742083030056707E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9904110450381362	WITHOUT_CLASSIFICATION	0.009588954961863894	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.970253204113979	WITHOUT_CLASSIFICATION	0.029746795886020975	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9998870791508045	WITHOUT_CLASSIFICATION	1.1292084919543451E-4	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9802069287011977	WITHOUT_CLASSIFICATION	0.019793071298802235	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9997669793448132	WITHOUT_CLASSIFICATION	2.3302065518668774E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999977998092297	WITHOUT_CLASSIFICATION	2.2001907702870453E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9994251345679381	WITHOUT_CLASSIFICATION	5.748654320618397E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9937226616284829	WITHOUT_CLASSIFICATION	0.006277338371517061	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999985777350073	WITHOUT_CLASSIFICATION	1.4222649926275891E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9988027869180196	WITHOUT_CLASSIFICATION	0.0011972130819804226	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9989890734678828	WITHOUT_CLASSIFICATION	0.0010109265321172486	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999421220680167	WITHOUT_CLASSIFICATION	5.787793198322907E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9980182933624094	WITHOUT_CLASSIFICATION	0.001981706637590551	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999657018498437	WITHOUT_CLASSIFICATION	3.429815015636402E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9998912708253749	WITHOUT_CLASSIFICATION	1.0872917462515149E-4	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9822178963969738	WITHOUT_CLASSIFICATION	0.017782103603026227	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9989483763081436	WITHOUT_CLASSIFICATION	0.001051623691856314	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9994701796933979	WITHOUT_CLASSIFICATION	5.298203066021378E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999050846725237	WITHOUT_CLASSIFICATION	9.49153274762285E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9084494905187073	WITHOUT_CLASSIFICATION	0.09155050948129279	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999405798001662	WITHOUT_CLASSIFICATION	5.942019983381672E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9996747674011056	WITHOUT_CLASSIFICATION	3.252325988943599E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9994346267843659	WITHOUT_CLASSIFICATION	5.653732156341099E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9992544343529625	WITHOUT_CLASSIFICATION	7.45565647037474E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996612369902785	WITHOUT_CLASSIFICATION	3.387630097214342E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9996202938474702	WITHOUT_CLASSIFICATION	3.797061525298177E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9997719351503327	WITHOUT_CLASSIFICATION	2.280648496674328E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999437687026783	WITHOUT_CLASSIFICATION	5.6231297321530546E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9992483762788132	WITHOUT_CLASSIFICATION	7.516237211868164E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999672217730768	WITHOUT_CLASSIFICATION	3.277822692311628E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999359149853728	WITHOUT_CLASSIFICATION	6.408501462719047E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999156117762874	WITHOUT_CLASSIFICATION	8.438822371260778E-5	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999798071558156	WITHOUT_CLASSIFICATION	2.019284418446026E-5	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.999693758512778	WITHOUT_CLASSIFICATION	3.0624148722204506E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9997534793726931	WITHOUT_CLASSIFICATION	2.4652062730682207E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9998490296216618	WITHOUT_CLASSIFICATION	1.509703783382954E-4	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9998667645299629	WITHOUT_CLASSIFICATION	1.3323547003713787E-4	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9998667645299629	WITHOUT_CLASSIFICATION	1.3323547003713787E-4	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9996433374089606	WITHOUT_CLASSIFICATION	3.566625910394065E-4	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9996037241536252	WITHOUT_CLASSIFICATION	3.962758463747653E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.990439140795374	WITHOUT_CLASSIFICATION	0.009560859204626074	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999682810697743	WITHOUT_CLASSIFICATION	3.171893022572763E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9998407679940431	WITHOUT_CLASSIFICATION	1.5923200595689864E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999494981936282	WITHOUT_CLASSIFICATION	5.050180637171727E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9995968080658043	WITHOUT_CLASSIFICATION	4.031919341956952E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999397997276791	WITHOUT_CLASSIFICATION	6.020027232098892E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999266218621522	WITHOUT_CLASSIFICATION	7.337813784788303E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999869988192025	WITHOUT_CLASSIFICATION	1.3001180797554751E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999393771231336	WITHOUT_CLASSIFICATION	6.062287686632819E-5	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999716958654106	WITHOUT_CLASSIFICATION	2.8304134589473967E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.999938072127361	WITHOUT_CLASSIFICATION	6.192787263902542E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9997481676217832	WITHOUT_CLASSIFICATION	2.518323782168108E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999978320582984	WITHOUT_CLASSIFICATION	2.1679417015230598E-6	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9998517414443051	WITHOUT_CLASSIFICATION	1.482585556949097E-4	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999325829387622	WITHOUT_CLASSIFICATION	6.74170612377295E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9994299149378597	WITHOUT_CLASSIFICATION	5.700850621403202E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9997606970448843	WITHOUT_CLASSIFICATION	2.3930295511574487E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9998547615603496	WITHOUT_CLASSIFICATION	1.4523843965038894E-4	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9994642549979064	WITHOUT_CLASSIFICATION	5.357450020935702E-4	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9994349793661036	WITHOUT_CLASSIFICATION	5.650206338963555E-4	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999228004642834	WITHOUT_CLASSIFICATION	7.719953571659999E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9998460455829623	WITHOUT_CLASSIFICATION	1.5395441703769204E-4	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9992268070307436	WITHOUT_CLASSIFICATION	7.731929692563981E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999451841161799	WITHOUT_CLASSIFICATION	5.481588382015999E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9985687684085011	WITHOUT_CLASSIFICATION	0.0014312315914989005	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9990713500542165	WITHOUT_CLASSIFICATION	9.286499457835742E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.999068857201193	WITHOUT_CLASSIFICATION	9.311427988068861E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.99981818746161	WITHOUT_CLASSIFICATION	1.818125383899451E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.999997170386219	WITHOUT_CLASSIFICATION	2.8296137808940047E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.999532574866048	WITHOUT_CLASSIFICATION	4.6742513395203316E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.999986876698709	WITHOUT_CLASSIFICATION	1.3123301290959493E-5	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999333927485563	WITHOUT_CLASSIFICATION	6.660725144360558E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9998455459635244	WITHOUT_CLASSIFICATION	1.5445403647564086E-4	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999766090278755	WITHOUT_CLASSIFICATION	2.3390972124518752E-4	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997473659147937	WITHOUT_CLASSIFICATION	2.526340852063385E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997444798696249	WITHOUT_CLASSIFICATION	2.5552013037505734E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.999488240580319	WITHOUT_CLASSIFICATION	5.117594196809632E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997888720278584	WITHOUT_CLASSIFICATION	2.1112797214163217E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9998675413849228	WITHOUT_CLASSIFICATION	1.3245861507718256E-4	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9982574982281661	WITHOUT_CLASSIFICATION	0.0017425017718338848	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9881365889974094	WITHOUT_CLASSIFICATION	0.011863411002590531	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999025598365798	WITHOUT_CLASSIFICATION	9.744016342007607E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9992127454855753	WITHOUT_CLASSIFICATION	7.87254514424808E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9984277476580112	WITHOUT_CLASSIFICATION	0.0015722523419887187	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9985733175120945	WITHOUT_CLASSIFICATION	0.001426682487905435	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9987495415062008	WITHOUT_CLASSIFICATION	0.001250458493799291	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999437687026783	WITHOUT_CLASSIFICATION	5.6231297321530546E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9994813572783159	WITHOUT_CLASSIFICATION	5.186427216841177E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9998525952823472	WITHOUT_CLASSIFICATION	1.4740471765281336E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999585874754054	WITHOUT_CLASSIFICATION	4.1412524594534014E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9998808691753006	WITHOUT_CLASSIFICATION	1.1913082469939571E-4	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9998296800873699	WITHOUT_CLASSIFICATION	1.7031991263007944E-4	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9994176839860655	WITHOUT_CLASSIFICATION	5.82316013934579E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9998804613492656	WITHOUT_CLASSIFICATION	1.1953865073448032E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9996526060336103	WITHOUT_CLASSIFICATION	3.4739396638979836E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9995021778666824	WITHOUT_CLASSIFICATION	4.978221333176129E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995887436193884	WITHOUT_CLASSIFICATION	4.112563806115677E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999450217039678	WITHOUT_CLASSIFICATION	5.497829603211506E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999383037741152	WITHOUT_CLASSIFICATION	6.169622588478752E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9993665766718117	WITHOUT_CLASSIFICATION	6.334233281883706E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9994258657536093	WITHOUT_CLASSIFICATION	5.741342463907146E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.999900779536393	WITHOUT_CLASSIFICATION	9.922046360700207E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997655924310697	WITHOUT_CLASSIFICATION	2.344075689303315E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997864600395884	WITHOUT_CLASSIFICATION	2.1353996041147382E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9995591334954894	WITHOUT_CLASSIFICATION	4.4086650451060467E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9992757778326931	WITHOUT_CLASSIFICATION	7.242221673069032E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9915179473435464	WITHOUT_CLASSIFICATION	0.00848205265645371	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9996658132377073	WITHOUT_CLASSIFICATION	3.3418676229267125E-4	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9996240592081719	WITHOUT_CLASSIFICATION	3.759407918281512E-4	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9974628256036778	WITHOUT_CLASSIFICATION	0.0025371743963221384	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9982264213571781	WITHOUT_CLASSIFICATION	0.0017735786428219502	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999584889733121	WITHOUT_CLASSIFICATION	4.1511026687874935E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9998861921649568	WITHOUT_CLASSIFICATION	1.1380783504322768E-4	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999010512756558	WITHOUT_CLASSIFICATION	9.894872434429913E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9998247087334063	WITHOUT_CLASSIFICATION	1.7529126659368045E-4	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9983669507952877	WITHOUT_CLASSIFICATION	0.0016330492047122763	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9998983541252527	WITHOUT_CLASSIFICATION	1.0164587474733695E-4	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999586956487271	WITHOUT_CLASSIFICATION	4.130435127295808E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9966588712210815	WITHOUT_CLASSIFICATION	0.003341128778918444	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9988336935838782	WITHOUT_CLASSIFICATION	0.0011663064161218201	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9992191042761698	WITHOUT_CLASSIFICATION	7.808957238301864E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.854998031180612	WITHOUT_CLASSIFICATION	0.14500196881938793	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.999888873878276	WITHOUT_CLASSIFICATION	1.111261217239914E-4	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999082838696414	WITHOUT_CLASSIFICATION	9.171613035862038E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9998983541252527	WITHOUT_CLASSIFICATION	1.0164587474733695E-4	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9960512280985608	WITHOUT_CLASSIFICATION	0.003948771901439233	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9998339009224645	WITHOUT_CLASSIFICATION	1.6609907753553697E-4	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9998832820464394	WITHOUT_CLASSIFICATION	1.1671795356063058E-4	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999499050526166	WITHOUT_CLASSIFICATION	5.00949473834369E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999751041284667	WITHOUT_CLASSIFICATION	2.4895871533301475E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9997153644106899	WITHOUT_CLASSIFICATION	2.846355893101829E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.999913957907828	WITHOUT_CLASSIFICATION	8.604209217209702E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9994607946571485	WITHOUT_CLASSIFICATION	5.392053428513978E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9994195952470495	WITHOUT_CLASSIFICATION	5.804047529504569E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.999570624124948	WITHOUT_CLASSIFICATION	4.2937587505196157E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9996972875192949	WITHOUT_CLASSIFICATION	3.0271248070512887E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9994269117756304	WITHOUT_CLASSIFICATION	5.730882243696096E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999409907609621	WITHOUT_CLASSIFICATION	5.9009239037891874E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9996422927114116	WITHOUT_CLASSIFICATION	3.577072885884222E-4	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9997026215532171	WITHOUT_CLASSIFICATION	2.973784467830113E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9997316442876423	WITHOUT_CLASSIFICATION	2.6835571235776513E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9998899249816827	WITHOUT_CLASSIFICATION	1.1007501831721614E-4	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9998935735537927	WITHOUT_CLASSIFICATION	1.064264462073441E-4	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9997231900713243	WITHOUT_CLASSIFICATION	2.768099286756488E-4	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998896134297851	WITHOUT_CLASSIFICATION	1.1038657021495385E-4	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9996330308610569	WITHOUT_CLASSIFICATION	3.669691389430772E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9996259067836888	WITHOUT_CLASSIFICATION	3.740932163111817E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9997501730316197	WITHOUT_CLASSIFICATION	2.498269683802616E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999350945543553	WITHOUT_CLASSIFICATION	6.490544564472306E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999044029611034	WITHOUT_CLASSIFICATION	9.559703889650556E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9974456343883205	WITHOUT_CLASSIFICATION	0.0025543656116794903	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9980137385675497	WITHOUT_CLASSIFICATION	0.001986261432450393	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9997895908651195	WITHOUT_CLASSIFICATION	2.1040913488035685E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9993739060175513	WITHOUT_CLASSIFICATION	6.260939824487862E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9994157887213693	WITHOUT_CLASSIFICATION	5.842112786306299E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9998987100506564	WITHOUT_CLASSIFICATION	1.0128994934352926E-4	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998243700128727	WITHOUT_CLASSIFICATION	1.756299871272935E-4	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999025791696994	WITHOUT_CLASSIFICATION	9.742083030056707E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9989203769860701	WITHOUT_CLASSIFICATION	0.0010796230139299026	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999918448866393	WITHOUT_CLASSIFICATION	8.15511336077127E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9960012225855994	WITHOUT_CLASSIFICATION	0.003998777414400586	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9997732090022239	WITHOUT_CLASSIFICATION	2.2679099777613517E-4	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999706493334992	WITHOUT_CLASSIFICATION	2.9350666500792916E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999519675088918	WITHOUT_CLASSIFICATION	4.803249110822676E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999519675088918	WITHOUT_CLASSIFICATION	4.803249110822676E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9997169950179808	WITHOUT_CLASSIFICATION	2.830049820191474E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9996649366106469	WITHOUT_CLASSIFICATION	3.3506338935311325E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9992349208514749	WITHOUT_CLASSIFICATION	7.650791485250003E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999218243263437	WITHOUT_CLASSIFICATION	7.817567365620415E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9997098882776528	WITHOUT_CLASSIFICATION	2.9011172234714614E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999934129705846	WITHOUT_CLASSIFICATION	6.587029415354009E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9998015315886721	WITHOUT_CLASSIFICATION	1.9846841132793564E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9927240120600637	WITHOUT_CLASSIFICATION	0.007275987939936326	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9997791263857434	WITHOUT_CLASSIFICATION	2.2087361425653484E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9997791263857434	WITHOUT_CLASSIFICATION	2.2087361425653484E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9997791263857434	WITHOUT_CLASSIFICATION	2.2087361425653484E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9996083135084549	WITHOUT_CLASSIFICATION	3.9168649154508944E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9602849314201122	WITHOUT_CLASSIFICATION	0.03971506857988783	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9994382802371049	WITHOUT_CLASSIFICATION	5.617197628951345E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9822178963969738	WITHOUT_CLASSIFICATION	0.017782103603026227	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9992722875392553	WITHOUT_CLASSIFICATION	7.277124607446569E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999300526139626	WITHOUT_CLASSIFICATION	6.994738603734793E-5	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9997724875221656	WITHOUT_CLASSIFICATION	2.2751247783427643E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999803086774911	WITHOUT_CLASSIFICATION	1.969132250888744E-5	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9602849314201122	WITHOUT_CLASSIFICATION	0.03971506857988783	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999936066585476	WITHOUT_CLASSIFICATION	6.393341452363736E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999936066585476	WITHOUT_CLASSIFICATION	6.393341452363736E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999780847730256	WITHOUT_CLASSIFICATION	2.1915226974414086E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999844497079828	WITHOUT_CLASSIFICATION	1.5550292017192462E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995867327183889	WITHOUT_CLASSIFICATION	4.1326728161117566E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998480978674776	WITHOUT_CLASSIFICATION	1.5190213252247738E-4	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999885788560803	WITHOUT_CLASSIFICATION	1.1421143919794057E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999307228654944	WITHOUT_CLASSIFICATION	6.927713450558493E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9987753431137918	WITHOUT_CLASSIFICATION	0.0012246568862082036	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9992771302039037	WITHOUT_CLASSIFICATION	7.228697960961869E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9997255058584951	WITHOUT_CLASSIFICATION	2.7449414150494537E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999534533807315	WITHOUT_CLASSIFICATION	4.654661926851102E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999904518837831	WITHOUT_CLASSIFICATION	9.548116216912388E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9998492075971247	WITHOUT_CLASSIFICATION	1.5079240287525927E-4	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999146461391728	WITHOUT_CLASSIFICATION	8.535386082718976E-5	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9978585526904651	WITHOUT_CLASSIFICATION	0.0021414473095349882	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999858482334458	WITHOUT_CLASSIFICATION	1.4151766554213933E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999799353489828	WITHOUT_CLASSIFICATION	2.006465101731651E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.99967627271228	WITHOUT_CLASSIFICATION	3.237272877199411E-4	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9996124581653809	WITHOUT_CLASSIFICATION	3.8754183461912656E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9990766514969648	WITHOUT_CLASSIFICATION	9.233485030353287E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9978105357008945	WITHOUT_CLASSIFICATION	0.0021894642991054135	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9997225836260532	WITHOUT_CLASSIFICATION	2.774163739468483E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9994346267843659	WITHOUT_CLASSIFICATION	5.653732156341099E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999494981936282	WITHOUT_CLASSIFICATION	5.050180637171727E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999990999725784	WITHOUT_CLASSIFICATION	9.000274216087563E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9948809390880606	WITHOUT_CLASSIFICATION	0.005119060911939319	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.999903316530487	WITHOUT_CLASSIFICATION	9.66834695129491E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9808577216601893	WITHOUT_CLASSIFICATION	0.01914227833981069	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998147734234011	WITHOUT_CLASSIFICATION	1.8522657659895004E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998147734234011	WITHOUT_CLASSIFICATION	1.8522657659895004E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9990774148547606	WITHOUT_CLASSIFICATION	9.225851452393144E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9998401915760268	WITHOUT_CLASSIFICATION	1.598084239732662E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999514650809249	WITHOUT_CLASSIFICATION	4.853491907507827E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999445822312882	WITHOUT_CLASSIFICATION	5.5417768711818803E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9993048496994681	WITHOUT_CLASSIFICATION	6.951503005318832E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999872468261226	WITHOUT_CLASSIFICATION	1.2753173877463713E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9998637795829497	WITHOUT_CLASSIFICATION	1.3622041705027614E-4	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.999947021314511	WITHOUT_CLASSIFICATION	5.2978685489016665E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9998978111552238	WITHOUT_CLASSIFICATION	1.0218884477621505E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9998928876313274	WITHOUT_CLASSIFICATION	1.07112368672473E-4	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999820131385181	WITHOUT_CLASSIFICATION	1.7986861481901583E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999896273421914	WITHOUT_CLASSIFICATION	1.037265780859129E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999422803438396	WITHOUT_CLASSIFICATION	5.7719656160319175E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999755555383639	WITHOUT_CLASSIFICATION	2.444446163617169E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9998906505206479	WITHOUT_CLASSIFICATION	1.0934947935218535E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998244429401258	WITHOUT_CLASSIFICATION	1.755570598741031E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9987693226536616	WITHOUT_CLASSIFICATION	0.0012306773463383483	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999747935010952	WITHOUT_CLASSIFICATION	2.5206498904810773E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999196820400822	WITHOUT_CLASSIFICATION	8.031795991788006E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9920637963987017	WITHOUT_CLASSIFICATION	0.007936203601298347	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998151421430244	WITHOUT_CLASSIFICATION	1.8485785697563113E-4	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9995764221211774	WITHOUT_CLASSIFICATION	4.235778788225925E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9998803052996933	WITHOUT_CLASSIFICATION	1.1969470030673197E-4	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9995320438847863	WITHOUT_CLASSIFICATION	4.6795611521368674E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9995302940785512	WITHOUT_CLASSIFICATION	4.6970592144876126E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999422803438396	WITHOUT_CLASSIFICATION	5.7719656160319175E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999023620537666	WITHOUT_CLASSIFICATION	9.763794623331891E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9998906505206479	WITHOUT_CLASSIFICATION	1.0934947935218535E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9996503394491312	WITHOUT_CLASSIFICATION	3.496605508688936E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9988132511565382	WITHOUT_CLASSIFICATION	0.001186748843461897	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9998895391108924	WITHOUT_CLASSIFICATION	1.1046088910750745E-4	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9981706019681383	WITHOUT_CLASSIFICATION	0.001829398031861707	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.97247167664443	WITHOUT_CLASSIFICATION	0.027528323355569997	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9996572833738676	WITHOUT_CLASSIFICATION	3.4271662613234326E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9997175418955812	WITHOUT_CLASSIFICATION	2.8245810441882545E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9997032882904741	WITHOUT_CLASSIFICATION	2.9671170952596756E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997411490052799	WITHOUT_CLASSIFICATION	2.588509947201037E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9998826493691422	WITHOUT_CLASSIFICATION	1.1735063085785694E-4	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999989904038766	WITHOUT_CLASSIFICATION	1.0095961234060284E-5	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9985350152933118	WITHOUT_CLASSIFICATION	0.0014649847066882111	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9997131588427637	WITHOUT_CLASSIFICATION	2.868411572363337E-4	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999699339062086	WITHOUT_CLASSIFICATION	3.0066093791364167E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999614800434847	WITHOUT_CLASSIFICATION	3.851995651524021E-5	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9998677500358424	WITHOUT_CLASSIFICATION	1.3224996415771512E-4	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9998667645299629	WITHOUT_CLASSIFICATION	1.3323547003713787E-4	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999295656306955	WITHOUT_CLASSIFICATION	7.043436930459649E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9988418812845412	WITHOUT_CLASSIFICATION	0.0011581187154587182	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9994874796572025	WITHOUT_CLASSIFICATION	5.12520342797484E-4	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9996509732264437	WITHOUT_CLASSIFICATION	3.4902677355627085E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9998794743827599	WITHOUT_CLASSIFICATION	1.2052561724009498E-4	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.999850005478871	WITHOUT_CLASSIFICATION	1.499945211288794E-4	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9975701193526999	WITHOUT_CLASSIFICATION	0.0024298806473000167	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.998384956575763	WITHOUT_CLASSIFICATION	0.0016150434242369828	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9998223750821724	WITHOUT_CLASSIFICATION	1.7762491782744526E-4	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9985374852675152	WITHOUT_CLASSIFICATION	0.0014625147324848359	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998645063150126	WITHOUT_CLASSIFICATION	1.354936849873828E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998645063150126	WITHOUT_CLASSIFICATION	1.354936849873828E-4	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9971789725403688	WITHOUT_CLASSIFICATION	0.0028210274596311923	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999778367540016	WITHOUT_CLASSIFICATION	2.21632459983175E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999521199383317	WITHOUT_CLASSIFICATION	4.788006166829148E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9980289702360355	WITHOUT_CLASSIFICATION	0.0019710297639644143	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999803221943259	WITHOUT_CLASSIFICATION	1.967780567413146E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999685708694891	WITHOUT_CLASSIFICATION	3.142913051095556E-5	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9995844713194524	WITHOUT_CLASSIFICATION	4.155286805476304E-4	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999780906672248	WITHOUT_CLASSIFICATION	2.1909332775260493E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9991253979162905	WITHOUT_CLASSIFICATION	8.746020837095117E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9996120127104788	WITHOUT_CLASSIFICATION	3.879872895211195E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9995802125986066	WITHOUT_CLASSIFICATION	4.1978740139344634E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9997949071174828	WITHOUT_CLASSIFICATION	2.0509288251719675E-4	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9995970633263894	WITHOUT_CLASSIFICATION	4.0293667361066676E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9401291152488424	WITHOUT_CLASSIFICATION	0.05987088475115769	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9994038916449635	WITHOUT_CLASSIFICATION	5.961083550365191E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999028345662682	WITHOUT_CLASSIFICATION	9.71654337317663E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999627809510909	WITHOUT_CLASSIFICATION	3.7219048909089524E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9955846053331493	WITHOUT_CLASSIFICATION	0.004415394666850673	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999604467469909	WITHOUT_CLASSIFICATION	3.9553253009026137E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999211611364216	WITHOUT_CLASSIFICATION	7.883886357841851E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9997510380456684	WITHOUT_CLASSIFICATION	2.4896195433150284E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999604467469909	WITHOUT_CLASSIFICATION	3.9553253009026137E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9994209942510518	WITHOUT_CLASSIFICATION	5.790057489481867E-4	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9994528204400622	WITHOUT_CLASSIFICATION	5.4717955993785E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999348719016234	WITHOUT_CLASSIFICATION	6.512809837655864E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999348719016234	WITHOUT_CLASSIFICATION	6.512809837655864E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999255939806286	WITHOUT_CLASSIFICATION	7.440601937135877E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999257370945073	WITHOUT_CLASSIFICATION	7.426290549278419E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9994484168063443	WITHOUT_CLASSIFICATION	5.515831936556617E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9945040737887628	WITHOUT_CLASSIFICATION	0.005495926211237192	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999615465682085	WITHOUT_CLASSIFICATION	3.845343179149236E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9983891075961747	WITHOUT_CLASSIFICATION	0.0016108924038252441	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999303749645432	WITHOUT_CLASSIFICATION	6.962503545682843E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9953819969720942	WITHOUT_CLASSIFICATION	0.004618003027905847	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999833724610868	WITHOUT_CLASSIFICATION	1.662753891323245E-5	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999023368631805	WITHOUT_CLASSIFICATION	9.766313681943632E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9994813572783159	WITHOUT_CLASSIFICATION	5.186427216841177E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999235054986754	WITHOUT_CLASSIFICATION	7.649450132464838E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999522435265711	WITHOUT_CLASSIFICATION	4.775647342896867E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999028345662682	WITHOUT_CLASSIFICATION	9.71654337317663E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999615465682085	WITHOUT_CLASSIFICATION	3.845343179149236E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9540095113341343	WITHOUT_CLASSIFICATION	0.04599048866586582	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9540095113341343	WITHOUT_CLASSIFICATION	0.04599048866586582	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9009028545093092	WITHOUT_CLASSIFICATION	0.09909714549069092	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999552503083056	WITHOUT_CLASSIFICATION	4.4749691694540926E-5	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9998840750543523	WITHOUT_CLASSIFICATION	1.1592494564775823E-4	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999081662556268	WITHOUT_CLASSIFICATION	9.183374437306735E-5	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.999892544769145	WITHOUT_CLASSIFICATION	1.074552308548878E-4	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999376130301741	WITHOUT_CLASSIFICATION	6.238696982576175E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9989001523527168	WITHOUT_CLASSIFICATION	0.0010998476472832254	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.997049905259576	WITHOUT_CLASSIFICATION	0.0029500947404239664	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999230534719693	WITHOUT_CLASSIFICATION	7.694652803069674E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999953415521387	WITHOUT_CLASSIFICATION	4.658447861247135E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9987533646361072	WITHOUT_CLASSIFICATION	0.0012466353638928205	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999976063239842	WITHOUT_CLASSIFICATION	2.3936760158343905E-6	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999533940186518	WITHOUT_CLASSIFICATION	4.6605981348134094E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999627809510909	WITHOUT_CLASSIFICATION	3.7219048909089524E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999257370945073	WITHOUT_CLASSIFICATION	7.426290549278419E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9994484168063443	WITHOUT_CLASSIFICATION	5.515831936556617E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9994484168063443	WITHOUT_CLASSIFICATION	5.515831936556617E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999615465682085	WITHOUT_CLASSIFICATION	3.845343179149236E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999615465682085	WITHOUT_CLASSIFICATION	3.845343179149236E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9540095113341343	WITHOUT_CLASSIFICATION	0.04599048866586582	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999864779113329	WITHOUT_CLASSIFICATION	1.3522088667048569E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9980647803728138	WITHOUT_CLASSIFICATION	0.0019352196271861793	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999875862443782	WITHOUT_CLASSIFICATION	1.241375562179501E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9994904110829815	WITHOUT_CLASSIFICATION	5.095889170184338E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9996688144715086	WITHOUT_CLASSIFICATION	3.311855284914096E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9666190007313653	WITHOUT_CLASSIFICATION	0.033380999268634796	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9998586974992604	WITHOUT_CLASSIFICATION	1.413025007396572E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9992611506268088	WITHOUT_CLASSIFICATION	7.388493731912285E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999470783966469	WITHOUT_CLASSIFICATION	5.292160335324076E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999257370945073	WITHOUT_CLASSIFICATION	7.426290549278419E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9994484168063443	WITHOUT_CLASSIFICATION	5.515831936556617E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9994484168063443	WITHOUT_CLASSIFICATION	5.515831936556617E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.997049905259576	WITHOUT_CLASSIFICATION	0.0029500947404239664	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999953415521387	WITHOUT_CLASSIFICATION	4.658447861247135E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999472782818724	WITHOUT_CLASSIFICATION	5.272171812765504E-5	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999855334008552	WITHOUT_CLASSIFICATION	1.4466599144927497E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999631981834718	WITHOUT_CLASSIFICATION	3.680181652819715E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999631981834718	WITHOUT_CLASSIFICATION	3.680181652819715E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999356208560427	WITHOUT_CLASSIFICATION	6.437914395737147E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9996213313059987	WITHOUT_CLASSIFICATION	3.7866869400123384E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999963810719728	WITHOUT_CLASSIFICATION	3.618928027196601E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999679617032009	WITHOUT_CLASSIFICATION	3.2038296799021944E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999679617032009	WITHOUT_CLASSIFICATION	3.2038296799021944E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999643913879027	WITHOUT_CLASSIFICATION	3.560861209723925E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999643913879027	WITHOUT_CLASSIFICATION	3.560861209723925E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.99997201294977	WITHOUT_CLASSIFICATION	2.7987050230009332E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.99997201294977	WITHOUT_CLASSIFICATION	2.7987050230009332E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999743327772681	WITHOUT_CLASSIFICATION	2.5667222731981256E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9998105877155723	WITHOUT_CLASSIFICATION	1.8941228442772413E-4	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.998992801328197	WITHOUT_CLASSIFICATION	0.0010071986718030422	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999338943948264	WITHOUT_CLASSIFICATION	6.610560517368202E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9998549652208358	WITHOUT_CLASSIFICATION	1.4503477916418805E-4	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999820429756383	WITHOUT_CLASSIFICATION	1.7957024361602617E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999816811446987	WITHOUT_CLASSIFICATION	1.831885530136948E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9997987861616247	WITHOUT_CLASSIFICATION	2.0121383837537149E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9997006670665189	WITHOUT_CLASSIFICATION	2.9933293348114826E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9998374063362289	WITHOUT_CLASSIFICATION	1.6259366377115725E-4	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.999989808083738	WITHOUT_CLASSIFICATION	1.0191916261890331E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9975361232677261	WITHOUT_CLASSIFICATION	0.0024638767322738685	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998620708467721	WITHOUT_CLASSIFICATION	1.3792915322775773E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9998620708467721	WITHOUT_CLASSIFICATION	1.3792915322775773E-4	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.998578324355733	WITHOUT_CLASSIFICATION	0.0014216756442670178	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999307228654944	WITHOUT_CLASSIFICATION	6.927713450558493E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9952977010966003	WITHOUT_CLASSIFICATION	0.004702298903399629	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9998769456927908	WITHOUT_CLASSIFICATION	1.2305430720915305E-4	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999747427012283	WITHOUT_CLASSIFICATION	2.5257298771680026E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9995762875174798	WITHOUT_CLASSIFICATION	4.2371248252005307E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9989339445015787	WITHOUT_CLASSIFICATION	0.001066055498421235	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9994649105410744	WITHOUT_CLASSIFICATION	5.350894589255467E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999706744651494	WITHOUT_CLASSIFICATION	2.932553485064397E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9996977036654273	WITHOUT_CLASSIFICATION	3.0229633457267183E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999643234636757	WITHOUT_CLASSIFICATION	3.567653632439082E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9989993766378481	WITHOUT_CLASSIFICATION	0.0010006233621518087	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9997177298859772	WITHOUT_CLASSIFICATION	2.8227011402285E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999308962903494	WITHOUT_CLASSIFICATION	6.910370965063398E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9938265719889131	WITHOUT_CLASSIFICATION	0.006173428011086845	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999784104970014	WITHOUT_CLASSIFICATION	2.1589502998600084E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9998164262766486	WITHOUT_CLASSIFICATION	1.835737233513985E-4	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9996697472700378	WITHOUT_CLASSIFICATION	3.3025272996227737E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998245202872608	WITHOUT_CLASSIFICATION	1.7547971273925575E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998245202872608	WITHOUT_CLASSIFICATION	1.7547971273925575E-4	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.999880298738639	WITHOUT_CLASSIFICATION	1.1970126136101706E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9994813572783159	WITHOUT_CLASSIFICATION	5.186427216841177E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999744231819776	WITHOUT_CLASSIFICATION	2.5576818022319184E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999323781347457	WITHOUT_CLASSIFICATION	6.76218652542675E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999323781347457	WITHOUT_CLASSIFICATION	6.76218652542675E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999882773832898	WITHOUT_CLASSIFICATION	1.17226167102775E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999762429113952	WITHOUT_CLASSIFICATION	2.375708860476684E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9997054514625543	WITHOUT_CLASSIFICATION	2.9454853744566653E-4	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990316909440462	WITHOUT_CLASSIFICATION	9.68309055953816E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9992945521648864	WITHOUT_CLASSIFICATION	7.054478351135353E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9992945521648864	WITHOUT_CLASSIFICATION	7.054478351135353E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9992945521648864	WITHOUT_CLASSIFICATION	7.054478351135353E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990316909440462	WITHOUT_CLASSIFICATION	9.68309055953816E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999621371344589	WITHOUT_CLASSIFICATION	3.78628655411714E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999745898973657	WITHOUT_CLASSIFICATION	2.5410102634355173E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9998957838426432	WITHOUT_CLASSIFICATION	1.0421615735676024E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9994508879062631	WITHOUT_CLASSIFICATION	5.49112093736994E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9994997871660917	WITHOUT_CLASSIFICATION	5.002128339083519E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9993248014911648	WITHOUT_CLASSIFICATION	6.751985088351765E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999710580778682	WITHOUT_CLASSIFICATION	2.8941922131857095E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9989697375703168	WITHOUT_CLASSIFICATION	0.001030262429683178	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999643234636757	WITHOUT_CLASSIFICATION	3.567653632439082E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9989460652373036	WITHOUT_CLASSIFICATION	0.0010539347626965156	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999162855624479	WITHOUT_CLASSIFICATION	8.371443755202135E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999740509541798	WITHOUT_CLASSIFICATION	2.594904582023288E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.997825486355064	WITHOUT_CLASSIFICATION	0.0021745136449361196	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9998578262154816	WITHOUT_CLASSIFICATION	1.4217378451837897E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9987462530412956	WITHOUT_CLASSIFICATION	0.0012537469587043204	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999950610837002	WITHOUT_CLASSIFICATION	4.938916299794235E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9996476451598635	WITHOUT_CLASSIFICATION	3.5235484013654153E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9990082376610226	WITHOUT_CLASSIFICATION	9.91762338977377E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9996735259715956	WITHOUT_CLASSIFICATION	3.264740284043093E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9996962323710705	WITHOUT_CLASSIFICATION	3.0376762892938295E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9998747767204468	WITHOUT_CLASSIFICATION	1.252232795532889E-4	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.999899501785126	WITHOUT_CLASSIFICATION	1.0049821487408513E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9997979788112695	WITHOUT_CLASSIFICATION	2.0202118873044009E-4	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999876543998872	WITHOUT_CLASSIFICATION	1.2345600112832963E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9997933143336151	WITHOUT_CLASSIFICATION	2.066856663850449E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9998958117595947	WITHOUT_CLASSIFICATION	1.041882404052393E-4	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.99993188467496	WITHOUT_CLASSIFICATION	6.811532504003625E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9898253264939009	WITHOUT_CLASSIFICATION	0.010174673506099088	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999218944912925	WITHOUT_CLASSIFICATION	7.810550870743251E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999715749488167	WITHOUT_CLASSIFICATION	2.842505118331458E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999234011397113	WITHOUT_CLASSIFICATION	7.65988602887122E-5	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9998546190007364	WITHOUT_CLASSIFICATION	1.453809992636411E-4	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999203273607804	WITHOUT_CLASSIFICATION	7.96726392195502E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999295447321447	WITHOUT_CLASSIFICATION	7.045526785531588E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999731313958452	WITHOUT_CLASSIFICATION	2.686860415483775E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9997572236067033	WITHOUT_CLASSIFICATION	2.4277639329672174E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999882773832898	WITHOUT_CLASSIFICATION	1.17226167102775E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9995485882951273	WITHOUT_CLASSIFICATION	4.5141170487269746E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990316909440462	WITHOUT_CLASSIFICATION	9.68309055953816E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9993248014911648	WITHOUT_CLASSIFICATION	6.751985088351765E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999162855624479	WITHOUT_CLASSIFICATION	8.371443755202135E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.997825486355064	WITHOUT_CLASSIFICATION	0.0021745136449361196	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9987462530412956	WITHOUT_CLASSIFICATION	0.0012537469587043204	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999740509541798	WITHOUT_CLASSIFICATION	2.594904582023288E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999950610837002	WITHOUT_CLASSIFICATION	4.938916299794235E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9996735259715956	WITHOUT_CLASSIFICATION	3.264740284043093E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9990082376610226	WITHOUT_CLASSIFICATION	9.91762338977377E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9998747767204468	WITHOUT_CLASSIFICATION	1.252232795532889E-4	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999966530279873	WITHOUT_CLASSIFICATION	3.3469720127080975E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9836089866736855	WITHOUT_CLASSIFICATION	0.016391013326314575	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999162746484992	WITHOUT_CLASSIFICATION	8.372535150077852E-5	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999490096573342	WITHOUT_CLASSIFICATION	5.0990342665892546E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999095705825762	WITHOUT_CLASSIFICATION	9.042941742371807E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999368459468572	WITHOUT_CLASSIFICATION	6.315405314283689E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999613067801586	WITHOUT_CLASSIFICATION	3.869321984144137E-5	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998153573202447	WITHOUT_CLASSIFICATION	1.846426797553453E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9992398425702356	WITHOUT_CLASSIFICATION	7.601574297643529E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9991975874480441	WITHOUT_CLASSIFICATION	8.024125519559418E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.999894010235367	WITHOUT_CLASSIFICATION	1.0598976463305761E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992206458456508	WITHOUT_CLASSIFICATION	7.793541543491246E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998749548286511	WITHOUT_CLASSIFICATION	1.2504517134894958E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999485479816488	WITHOUT_CLASSIFICATION	5.145201835133579E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999326175890791	WITHOUT_CLASSIFICATION	6.738241092081333E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999545352201071	WITHOUT_CLASSIFICATION	4.5464779892845146E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.999814778045811	WITHOUT_CLASSIFICATION	1.8522195418897467E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999798920185557	WITHOUT_CLASSIFICATION	2.0107981444182488E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999913817499672	WITHOUT_CLASSIFICATION	8.618250032862846E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9996780084710468	WITHOUT_CLASSIFICATION	3.219915289531842E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9994042759447069	WITHOUT_CLASSIFICATION	5.957240552929337E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9994042759447069	WITHOUT_CLASSIFICATION	5.957240552929337E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.998237298765948	WITHOUT_CLASSIFICATION	0.0017627012340520037	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9984898230735095	WITHOUT_CLASSIFICATION	0.0015101769264904686	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9984898230735095	WITHOUT_CLASSIFICATION	0.0015101769264904686	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998443294022937	WITHOUT_CLASSIFICATION	1.5567059770632102E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998443294022937	WITHOUT_CLASSIFICATION	1.5567059770632102E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9992964235970889	WITHOUT_CLASSIFICATION	7.035764029109597E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9992964235970889	WITHOUT_CLASSIFICATION	7.035764029109597E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999858748346063	WITHOUT_CLASSIFICATION	1.4125165393702524E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9968985432554657	WITHOUT_CLASSIFICATION	0.003101456744534208	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9968985432554657	WITHOUT_CLASSIFICATION	0.003101456744534208	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999019184967338	WITHOUT_CLASSIFICATION	9.808150326620055E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999019184967338	WITHOUT_CLASSIFICATION	9.808150326620055E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9996654498725783	WITHOUT_CLASSIFICATION	3.345501274216859E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9994671302164102	WITHOUT_CLASSIFICATION	5.328697835898008E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9994671302164102	WITHOUT_CLASSIFICATION	5.328697835898008E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998964878962109	WITHOUT_CLASSIFICATION	1.0351210378917259E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9996071188436938	WITHOUT_CLASSIFICATION	3.9288115630623904E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998101963335329	WITHOUT_CLASSIFICATION	1.8980366646725492E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998964878962109	WITHOUT_CLASSIFICATION	1.0351210378917259E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9993379596914238	WITHOUT_CLASSIFICATION	6.620403085760705E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999943120916202	WITHOUT_CLASSIFICATION	5.687908379795844E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9993381390296397	WITHOUT_CLASSIFICATION	6.618609703602478E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999906179835754	WITHOUT_CLASSIFICATION	9.382016424610996E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999903238179193	WITHOUT_CLASSIFICATION	9.676182080661079E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999903238179193	WITHOUT_CLASSIFICATION	9.676182080661087E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999666022682003	WITHOUT_CLASSIFICATION	3.339773179964617E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998045859451585	WITHOUT_CLASSIFICATION	1.954140548414394E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998045859451585	WITHOUT_CLASSIFICATION	1.954140548414394E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998290189027197	WITHOUT_CLASSIFICATION	1.7098109728029223E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9993381390296397	WITHOUT_CLASSIFICATION	6.618609703602478E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999906179835754	WITHOUT_CLASSIFICATION	9.382016424610996E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999903238179193	WITHOUT_CLASSIFICATION	9.676182080661079E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999903238179193	WITHOUT_CLASSIFICATION	9.676182080661087E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999666022682003	WITHOUT_CLASSIFICATION	3.339773179964617E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9996431461799331	WITHOUT_CLASSIFICATION	3.5685382006692655E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999361214972975	WITHOUT_CLASSIFICATION	6.387850270258216E-5	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9982185403383416	WITHOUT_CLASSIFICATION	0.0017814596616584327	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9992890808049925	WITHOUT_CLASSIFICATION	7.109191950074748E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9998278465644818	WITHOUT_CLASSIFICATION	1.721534355182946E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999817813568718	WITHOUT_CLASSIFICATION	1.8218643128213798E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999746925755774	WITHOUT_CLASSIFICATION	2.530742442260641E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999746925755774	WITHOUT_CLASSIFICATION	2.530742442260641E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9964240985028668	WITHOUT_CLASSIFICATION	0.003575901497133183	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.999252335061888	WITHOUT_CLASSIFICATION	7.476649381120424E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.999252335061888	WITHOUT_CLASSIFICATION	7.476649381120424E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9997124704124982	WITHOUT_CLASSIFICATION	2.875295875018732E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992545595287088	WITHOUT_CLASSIFICATION	7.454404712911606E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992545595287088	WITHOUT_CLASSIFICATION	7.454404712911606E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9993666413872238	WITHOUT_CLASSIFICATION	6.333586127763762E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9993666413872238	WITHOUT_CLASSIFICATION	6.333586127763762E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9997798570565012	WITHOUT_CLASSIFICATION	2.2014294349870358E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9997798570565012	WITHOUT_CLASSIFICATION	2.2014294349870358E-4	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999252335061888	WITHOUT_CLASSIFICATION	7.476649381120424E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999629822023952	WITHOUT_CLASSIFICATION	3.7017797604890746E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997642345525557	WITHOUT_CLASSIFICATION	2.3576544744430527E-4	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999494609062909	WITHOUT_CLASSIFICATION	5.0539093709010554E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9990356175331859	WITHOUT_CLASSIFICATION	9.643824668142215E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9997285251186598	WITHOUT_CLASSIFICATION	2.714748813401437E-4	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9998762590354067	WITHOUT_CLASSIFICATION	1.237409645933102E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999385283542521	WITHOUT_CLASSIFICATION	6.147164574789324E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9982337928827629	WITHOUT_CLASSIFICATION	0.0017662071172370635	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9998937680965168	WITHOUT_CLASSIFICATION	1.0623190348327368E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9988466610219324	WITHOUT_CLASSIFICATION	0.0011533389780675276	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9988466610219324	WITHOUT_CLASSIFICATION	0.0011533389780675276	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997261611238667	WITHOUT_CLASSIFICATION	2.73838876133247E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997261611238667	WITHOUT_CLASSIFICATION	2.73838876133247E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9991645420646421	WITHOUT_CLASSIFICATION	8.354579353577839E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998503494749533	WITHOUT_CLASSIFICATION	1.496505250466123E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998503494749533	WITHOUT_CLASSIFICATION	1.496505250466123E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998503494749533	WITHOUT_CLASSIFICATION	1.496505250466123E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999839882233219	WITHOUT_CLASSIFICATION	1.601177667812531E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999839882233219	WITHOUT_CLASSIFICATION	1.601177667812531E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999596940476401	WITHOUT_CLASSIFICATION	4.030595236003037E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9995896161220041	WITHOUT_CLASSIFICATION	4.103838779958692E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999432797067592	WITHOUT_CLASSIFICATION	5.672029324082104E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999889852087815	WITHOUT_CLASSIFICATION	1.1014791218404991E-5	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9997707116414238	WITHOUT_CLASSIFICATION	2.2928835857616257E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9996733191377253	WITHOUT_CLASSIFICATION	3.266808622746994E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9977991563471783	WITHOUT_CLASSIFICATION	0.002200843652821616	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999596940476401	WITHOUT_CLASSIFICATION	4.030595236003037E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999814180953006	WITHOUT_CLASSIFICATION	1.8581904699376846E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9995896161220041	WITHOUT_CLASSIFICATION	4.103838779958692E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999432797067592	WITHOUT_CLASSIFICATION	5.672029324082104E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998945800047642	WITHOUT_CLASSIFICATION	1.0541999523579342E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999034508992378	WITHOUT_CLASSIFICATION	9.654910076216988E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9996774594431049	WITHOUT_CLASSIFICATION	3.2254055689507136E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9998323594272244	WITHOUT_CLASSIFICATION	1.676405727756465E-4	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999553985973595	WITHOUT_CLASSIFICATION	4.4601402640585636E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9995507374729231	WITHOUT_CLASSIFICATION	4.492625270768287E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998945800047642	WITHOUT_CLASSIFICATION	1.0541999523579342E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999256696243926	WITHOUT_CLASSIFICATION	7.433037560746812E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999256696243926	WITHOUT_CLASSIFICATION	7.433037560746812E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9985831232166225	WITHOUT_CLASSIFICATION	0.0014168767833775044	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999180856219344	WITHOUT_CLASSIFICATION	8.191437806563905E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9997520150346627	WITHOUT_CLASSIFICATION	2.4798496533732535E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.998545733229798	WITHOUT_CLASSIFICATION	0.0014542667702019238	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9989453939178461	WITHOUT_CLASSIFICATION	0.0010546060821539512	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999859578549841	WITHOUT_CLASSIFICATION	1.4042145015875395E-5	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9994176551030257	WITHOUT_CLASSIFICATION	5.823448969743396E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999858802545547	WITHOUT_CLASSIFICATION	1.4119745445301967E-4	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9997119933441923	WITHOUT_CLASSIFICATION	2.880066558077587E-4	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999376591845052	WITHOUT_CLASSIFICATION	6.234081549488413E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998806842785629	WITHOUT_CLASSIFICATION	1.193157214371131E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.998545733229798	WITHOUT_CLASSIFICATION	0.0014542667702019238	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9989453939178461	WITHOUT_CLASSIFICATION	0.0010546060821539512	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9997331556929463	WITHOUT_CLASSIFICATION	2.6684430705369076E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.999938095597887	WITHOUT_CLASSIFICATION	6.190440211296835E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9995764994150844	WITHOUT_CLASSIFICATION	4.235005849156318E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999572487230018	WITHOUT_CLASSIFICATION	4.275127699809737E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999470704784376	WITHOUT_CLASSIFICATION	5.2929521562356605E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9996961474630544	WITHOUT_CLASSIFICATION	3.0385253694564687E-4	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9998501923301676	WITHOUT_CLASSIFICATION	1.4980766983238954E-4	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9996144096409525	WITHOUT_CLASSIFICATION	3.8559035904757433E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9998740879998617	WITHOUT_CLASSIFICATION	1.2591200013826028E-4	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999890076474157	WITHOUT_CLASSIFICATION	1.0992352584308884E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999128820544498	WITHOUT_CLASSIFICATION	8.711794555009032E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9988537291010191	WITHOUT_CLASSIFICATION	0.0011462708989809435	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999839704667154	WITHOUT_CLASSIFICATION	1.6029533284649816E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999890076474157	WITHOUT_CLASSIFICATION	1.0992352584308884E-4	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999128820544498	WITHOUT_CLASSIFICATION	8.711794555009032E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9988537291010191	WITHOUT_CLASSIFICATION	0.0011462708989809435	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998412469743045	WITHOUT_CLASSIFICATION	1.5875302569547448E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9991820255351822	WITHOUT_CLASSIFICATION	8.17974464817752E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9994220858851853	WITHOUT_CLASSIFICATION	5.779141148146661E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9975501321758623	WITHOUT_CLASSIFICATION	0.0024498678241376224	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9994502452989645	WITHOUT_CLASSIFICATION	5.497547010353822E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9996427832267757	WITHOUT_CLASSIFICATION	3.572167732243936E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999481238775543	WITHOUT_CLASSIFICATION	5.187612244580276E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999490653647549	WITHOUT_CLASSIFICATION	5.093463524509746E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999229550968989	WITHOUT_CLASSIFICATION	7.704490310116276E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.992447863551305	WITHOUT_CLASSIFICATION	0.007552136448694976	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9995221806866813	WITHOUT_CLASSIFICATION	4.7781931331863746E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9994320488932732	WITHOUT_CLASSIFICATION	5.679511067268534E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.999935169313571	WITHOUT_CLASSIFICATION	6.483068642901426E-5	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9988951179543266	WITHOUT_CLASSIFICATION	0.0011048820456733873	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999299400342698	WITHOUT_CLASSIFICATION	7.005996573019453E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9979780873434614	WITHOUT_CLASSIFICATION	0.002021912656538535	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.999736755672907	WITHOUT_CLASSIFICATION	2.632443270930862E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999640788171286	WITHOUT_CLASSIFICATION	3.5921182871473475E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999362865452303	WITHOUT_CLASSIFICATION	6.371345476977816E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998764133271782	WITHOUT_CLASSIFICATION	1.235866728218679E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999335690953967	WITHOUT_CLASSIFICATION	6.643090460335946E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999335690953967	WITHOUT_CLASSIFICATION	6.643090460335946E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9992775210114445	WITHOUT_CLASSIFICATION	7.224789885554772E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9992775210114445	WITHOUT_CLASSIFICATION	7.224789885554772E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999563407979324	WITHOUT_CLASSIFICATION	4.365920206761048E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999563407979324	WITHOUT_CLASSIFICATION	4.365920206761048E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999368927327272	WITHOUT_CLASSIFICATION	6.310726727275325E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999940442552692	WITHOUT_CLASSIFICATION	5.955744730888735E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9998248992203213	WITHOUT_CLASSIFICATION	1.7510077967882384E-4	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999178136875179	WITHOUT_CLASSIFICATION	8.21863124821517E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999918386726557	WITHOUT_CLASSIFICATION	8.16132734421101E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999696535278493	WITHOUT_CLASSIFICATION	3.0346472150808824E-5	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999022954288357	WITHOUT_CLASSIFICATION	9.770457116438518E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999797018909918	WITHOUT_CLASSIFICATION	2.0298109008196686E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999368927327272	WITHOUT_CLASSIFICATION	6.310726727275325E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999940442552692	WITHOUT_CLASSIFICATION	5.955744730888735E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9998248992203213	WITHOUT_CLASSIFICATION	1.7510077967882384E-4	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999918386726557	WITHOUT_CLASSIFICATION	8.16132734421101E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999696535278493	WITHOUT_CLASSIFICATION	3.0346472150808824E-5	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9998576439798399	WITHOUT_CLASSIFICATION	1.4235602016013363E-4	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999222440397457	WITHOUT_CLASSIFICATION	7.775596025429179E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9992581374446077	WITHOUT_CLASSIFICATION	7.418625553923694E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9992581374446077	WITHOUT_CLASSIFICATION	7.418625553923694E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9996108483886395	WITHOUT_CLASSIFICATION	3.8915161136051144E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9995721757193545	WITHOUT_CLASSIFICATION	4.2782428064546167E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9990261051863577	WITHOUT_CLASSIFICATION	9.738948136421767E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999212423457556	WITHOUT_CLASSIFICATION	7.875765424437564E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999212423457556	WITHOUT_CLASSIFICATION	7.875765424437564E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996088058373912	WITHOUT_CLASSIFICATION	3.911941626088776E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999769356882353	WITHOUT_CLASSIFICATION	2.306431176469892E-5	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9995843653455244	WITHOUT_CLASSIFICATION	4.1563465447556566E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9998692195921568	WITHOUT_CLASSIFICATION	1.3078040784317985E-4	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.999374246602512	WITHOUT_CLASSIFICATION	6.257533974880998E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992206458456508	WITHOUT_CLASSIFICATION	7.793541543491246E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998749548286511	WITHOUT_CLASSIFICATION	1.2504517134894958E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999485479816488	WITHOUT_CLASSIFICATION	5.145201835133579E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999326175890791	WITHOUT_CLASSIFICATION	6.738241092081333E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999798920185557	WITHOUT_CLASSIFICATION	2.0107981444182488E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999913817499672	WITHOUT_CLASSIFICATION	8.618250032862846E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996088058373912	WITHOUT_CLASSIFICATION	3.911941626088776E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999769356882353	WITHOUT_CLASSIFICATION	2.306431176469892E-5	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9998692195921568	WITHOUT_CLASSIFICATION	1.3078040784317985E-4	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999938067393013	WITHOUT_CLASSIFICATION	6.193260698700905E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9990261051863577	WITHOUT_CLASSIFICATION	9.738948136421767E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9990261051863577	WITHOUT_CLASSIFICATION	9.738948136421767E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998806842785629	WITHOUT_CLASSIFICATION	1.193157214371131E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998806842785629	WITHOUT_CLASSIFICATION	1.193157214371131E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9994874893271867	WITHOUT_CLASSIFICATION	5.125106728132748E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9994874893271867	WITHOUT_CLASSIFICATION	5.125106728132748E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9998407793928186	WITHOUT_CLASSIFICATION	1.5922060718141017E-4	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9990021505991296	WITHOUT_CLASSIFICATION	9.9784940087045E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9996619931660742	WITHOUT_CLASSIFICATION	3.3800683392575936E-4	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999357108118176	WITHOUT_CLASSIFICATION	6.428918818235075E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9994046227603469	WITHOUT_CLASSIFICATION	5.95377239653072E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998888689652422	WITHOUT_CLASSIFICATION	1.1113103475788852E-4	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9961120558682849	WITHOUT_CLASSIFICATION	0.003887944131715072	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999717299272552	WITHOUT_CLASSIFICATION	2.8270072744740948E-5	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9993563843388644	WITHOUT_CLASSIFICATION	6.436156611355199E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999359422341618	WITHOUT_CLASSIFICATION	6.40577658381437E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.999873808502636	WITHOUT_CLASSIFICATION	1.2619149736405996E-4	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999245597580398	WITHOUT_CLASSIFICATION	7.544024196012393E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9998065804441745	WITHOUT_CLASSIFICATION	1.9341955582562263E-4	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9998967482487741	WITHOUT_CLASSIFICATION	1.0325175122597572E-4	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9998554816035042	WITHOUT_CLASSIFICATION	1.445183964957991E-4	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9996501828477328	WITHOUT_CLASSIFICATION	3.4981715226722215E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999032611594274	WITHOUT_CLASSIFICATION	9.67388405725604E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999194692496786	WITHOUT_CLASSIFICATION	8.053075032143467E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998749548286511	WITHOUT_CLASSIFICATION	1.2504517134894958E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999326175890791	WITHOUT_CLASSIFICATION	6.738241092081333E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.999938067393013	WITHOUT_CLASSIFICATION	6.193260698700905E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9990261051863577	WITHOUT_CLASSIFICATION	9.738948136421767E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9998806842785629	WITHOUT_CLASSIFICATION	1.193157214371131E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9994874893271867	WITHOUT_CLASSIFICATION	5.125106728132748E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9996270277956179	WITHOUT_CLASSIFICATION	3.7297220438215503E-4	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9998806969352704	WITHOUT_CLASSIFICATION	1.1930306472974574E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999394935994397	WITHOUT_CLASSIFICATION	6.0506400560316876E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9994949264991113	WITHOUT_CLASSIFICATION	5.050735008887265E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987749954447218	WITHOUT_CLASSIFICATION	0.001225004555278236	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987749954447218	WITHOUT_CLASSIFICATION	0.001225004555278236	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9995333785289157	WITHOUT_CLASSIFICATION	4.6662147108437145E-4	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999458901189605	WITHOUT_CLASSIFICATION	5.410988103939204E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999312459487025	WITHOUT_CLASSIFICATION	6.875405129753206E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999458901189605	WITHOUT_CLASSIFICATION	5.410988103939204E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999937151024353	WITHOUT_CLASSIFICATION	6.2848975646958E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999937151024353	WITHOUT_CLASSIFICATION	6.2848975646958E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9998976233571919	WITHOUT_CLASSIFICATION	1.0237664280813945E-4	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999244385604841	WITHOUT_CLASSIFICATION	7.556143951598047E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.999747384529618	WITHOUT_CLASSIFICATION	2.526154703820601E-4	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9995418710908848	WITHOUT_CLASSIFICATION	4.5812890911528097E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999851141015071	WITHOUT_CLASSIFICATION	1.4885898492884503E-5	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9998637051310048	WITHOUT_CLASSIFICATION	1.3629486899522384E-4	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9998724629461999	WITHOUT_CLASSIFICATION	1.2753705380004823E-4	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9996151275293976	WITHOUT_CLASSIFICATION	3.8487247060235626E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.992430773439907	WITHOUT_CLASSIFICATION	0.00756922656009293	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9979687381664732	WITHOUT_CLASSIFICATION	0.0020312618335267944	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9994458872719691	WITHOUT_CLASSIFICATION	5.541127280308124E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9998627364086724	WITHOUT_CLASSIFICATION	1.372635913276402E-4	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999672283985106	WITHOUT_CLASSIFICATION	3.277160148946231E-5	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9998020221733281	WITHOUT_CLASSIFICATION	1.9797782667178032E-4	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9987870725906919	WITHOUT_CLASSIFICATION	0.0012129274093080392	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9976783077789625	WITHOUT_CLASSIFICATION	0.0023216922210374563	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9997337582124806	WITHOUT_CLASSIFICATION	2.6624178751938853E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9997522640500539	WITHOUT_CLASSIFICATION	2.477359499460128E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9990931394267386	WITHOUT_CLASSIFICATION	9.068605732613152E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999058457373732	WITHOUT_CLASSIFICATION	9.415426262679053E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9989362724355971	WITHOUT_CLASSIFICATION	0.001063727564402922	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9998777645304562	WITHOUT_CLASSIFICATION	1.2223546954373817E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9998777645304562	WITHOUT_CLASSIFICATION	1.2223546954373817E-4	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9997550727453202	WITHOUT_CLASSIFICATION	2.4492725467985656E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998037535984194	WITHOUT_CLASSIFICATION	1.9624640158068244E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9994649105410744	WITHOUT_CLASSIFICATION	5.350894589255467E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9994649105410744	WITHOUT_CLASSIFICATION	5.350894589255467E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9096593882761942	WITHOUT_CLASSIFICATION	0.09034061172380578	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.99799295892755	WITHOUT_CLASSIFICATION	0.002007041072449932	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9997461527845483	WITHOUT_CLASSIFICATION	2.538472154518078E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9994978851767055	WITHOUT_CLASSIFICATION	5.021148232945054E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9994978851767055	WITHOUT_CLASSIFICATION	5.021148232945054E-4	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9997317002847673	WITHOUT_CLASSIFICATION	2.682997152326174E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999755890834829	WITHOUT_CLASSIFICATION	2.441091651697992E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999789380709322	WITHOUT_CLASSIFICATION	2.1061929067793232E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999735395321184	WITHOUT_CLASSIFICATION	2.6460467881598066E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9861353701881667	WITHOUT_CLASSIFICATION	0.013864629811833297	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.999975601682481	WITHOUT_CLASSIFICATION	2.4398317519030358E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999510026010785	WITHOUT_CLASSIFICATION	4.899739892151045E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9997900578023424	WITHOUT_CLASSIFICATION	2.099421976575977E-4	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999366157097535	WITHOUT_CLASSIFICATION	6.338429024656057E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9995119294179479	WITHOUT_CLASSIFICATION	4.880705820521905E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999563367101773	WITHOUT_CLASSIFICATION	4.3663289822669944E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999760214002209	WITHOUT_CLASSIFICATION	2.397859977913156E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999794223677808	WITHOUT_CLASSIFICATION	2.057763221925805E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9939425710300992	WITHOUT_CLASSIFICATION	0.006057428969900826	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9998414903448657	WITHOUT_CLASSIFICATION	1.5850965513425916E-4	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9994162646989854	WITHOUT_CLASSIFICATION	5.837353010146075E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999822757075553	WITHOUT_CLASSIFICATION	1.772429244481617E-5	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9998763893804687	WITHOUT_CLASSIFICATION	1.2361061953125452E-4	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9998887574187456	WITHOUT_CLASSIFICATION	1.1124258125444187E-4	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999794583539656	WITHOUT_CLASSIFICATION	2.0541646034394907E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999861134654593	WITHOUT_CLASSIFICATION	1.3886534540580072E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999767317416681	WITHOUT_CLASSIFICATION	2.3268258331859307E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999225415245968	WITHOUT_CLASSIFICATION	7.745847540312903E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9996686616851933	WITHOUT_CLASSIFICATION	3.3133831480678175E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.999935969680523	WITHOUT_CLASSIFICATION	6.403031947701979E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9939806455778251	WITHOUT_CLASSIFICATION	0.006019354422174924	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.986135217864416	WITHOUT_CLASSIFICATION	0.013864782135583995	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998758541142586	WITHOUT_CLASSIFICATION	1.2414588574130746E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999035561031252	WITHOUT_CLASSIFICATION	9.644389687477087E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999890538699479	WITHOUT_CLASSIFICATION	1.0946130052122695E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999516637510619	WITHOUT_CLASSIFICATION	4.833624893819542E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9939425710300992	WITHOUT_CLASSIFICATION	0.006057428969900826	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998758541142586	WITHOUT_CLASSIFICATION	1.2414588574130746E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999035561031252	WITHOUT_CLASSIFICATION	9.644389687477087E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999516637510619	WITHOUT_CLASSIFICATION	4.833624893819542E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999214060318077	WITHOUT_CLASSIFICATION	7.859396819230471E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999866392818135	WITHOUT_CLASSIFICATION	1.3360718186407237E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999592309953442	WITHOUT_CLASSIFICATION	4.076900465570695E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9998914754605864	WITHOUT_CLASSIFICATION	1.0852453941358453E-4	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999849176043464	WITHOUT_CLASSIFICATION	1.5082395653659856E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9997556520913368	WITHOUT_CLASSIFICATION	2.4434790866328715E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999058457373732	WITHOUT_CLASSIFICATION	9.415426262679053E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9995747337737747	WITHOUT_CLASSIFICATION	4.2526622622523683E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999398671313761	WITHOUT_CLASSIFICATION	6.013286862396076E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9769963566217365	WITHOUT_CLASSIFICATION	0.023003643378263567	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9985351483400846	WITHOUT_CLASSIFICATION	0.0014648516599153661	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9985351483400846	WITHOUT_CLASSIFICATION	0.0014648516599153661	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999282338926492	WITHOUT_CLASSIFICATION	7.176610735074729E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.999985454782631	WITHOUT_CLASSIFICATION	1.4545217368996275E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999163214487375	WITHOUT_CLASSIFICATION	8.36785512624983E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.998193719633946	WITHOUT_CLASSIFICATION	0.001806280366054022	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997959964622853	WITHOUT_CLASSIFICATION	2.0400353771452313E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998306129191114	WITHOUT_CLASSIFICATION	1.693870808885837E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.8128996979417104	WITHOUT_CLASSIFICATION	0.18710030205828965	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999475265089398	WITHOUT_CLASSIFICATION	5.247349106028226E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999115865622192	WITHOUT_CLASSIFICATION	8.841343778075062E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9998527657786318	WITHOUT_CLASSIFICATION	1.4723422136827364E-4	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9998575170853797	WITHOUT_CLASSIFICATION	1.424829146202881E-4	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9996314871783899	WITHOUT_CLASSIFICATION	3.685128216100565E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999714448193264	WITHOUT_CLASSIFICATION	2.8555180673591526E-4	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999882271629546	WITHOUT_CLASSIFICATION	1.1772837045388711E-4	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9998632431709232	WITHOUT_CLASSIFICATION	1.3675682907672983E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999267845391349	WITHOUT_CLASSIFICATION	7.321546086522963E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9997568859405551	WITHOUT_CLASSIFICATION	2.4311405944492433E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9998969949954445	WITHOUT_CLASSIFICATION	1.0300500455547037E-4	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998794365296725	WITHOUT_CLASSIFICATION	1.205634703276023E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9992745938894849	WITHOUT_CLASSIFICATION	7.254061105151429E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999419774952312	WITHOUT_CLASSIFICATION	5.80225047688838E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.999319213030671	WITHOUT_CLASSIFICATION	6.807869693289432E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999153218340204	WITHOUT_CLASSIFICATION	8.467816597962576E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999131542403287	WITHOUT_CLASSIFICATION	8.684575967137062E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.757914190922632	DEFECT	0.242085809077368	WITHOUT_CLASSIFICATION
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9990159684260624	WITHOUT_CLASSIFICATION	9.840315739375089E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9992709555731004	WITHOUT_CLASSIFICATION	7.290444268995311E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999412312190884	WITHOUT_CLASSIFICATION	5.876878091152227E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9998248496462363	WITHOUT_CLASSIFICATION	1.7515035376380813E-4	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999536291289126	WITHOUT_CLASSIFICATION	4.637087108741737E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999820005828669	WITHOUT_CLASSIFICATION	1.799941713313802E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999675950723457	WITHOUT_CLASSIFICATION	3.2404927654320354E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999703418651816	WITHOUT_CLASSIFICATION	2.9658134818439656E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9993196097997583	WITHOUT_CLASSIFICATION	6.803902002416931E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9998231312395102	WITHOUT_CLASSIFICATION	1.7686876048985298E-4	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9982037339125226	WITHOUT_CLASSIFICATION	0.001796266087477405	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999518900853002	WITHOUT_CLASSIFICATION	4.810991469970752E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9998761150642449	WITHOUT_CLASSIFICATION	1.2388493575508547E-4	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9915284213944086	WITHOUT_CLASSIFICATION	0.008471578605591472	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9997256840153563	WITHOUT_CLASSIFICATION	2.7431598464371565E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999329414381973	WITHOUT_CLASSIFICATION	6.705856180274063E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9990873307808436	WITHOUT_CLASSIFICATION	9.126692191565336E-4	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9631907610986938	WITHOUT_CLASSIFICATION	0.03680923890130627	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9998610044870294	WITHOUT_CLASSIFICATION	1.3899551297066746E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9985263661341408	WITHOUT_CLASSIFICATION	0.001473633865859193	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999754538673145	WITHOUT_CLASSIFICATION	2.4546132685493487E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.999847140629915	WITHOUT_CLASSIFICATION	1.5285937008497003E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999129006122287	WITHOUT_CLASSIFICATION	8.70993877713328E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9997402099290736	WITHOUT_CLASSIFICATION	2.5979007092633184E-4	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9828827960890736	WITHOUT_CLASSIFICATION	0.017117203910926422	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9993299036182962	WITHOUT_CLASSIFICATION	6.700963817038162E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9946385104062144	WITHOUT_CLASSIFICATION	0.00536148959378561	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9990713556804456	WITHOUT_CLASSIFICATION	9.286443195544038E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999044590522735	WITHOUT_CLASSIFICATION	9.554094772651238E-5	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.99951279990074	WITHOUT_CLASSIFICATION	4.8720009925989736E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9978389952147083	WITHOUT_CLASSIFICATION	0.002161004785291734	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9967855026720538	WITHOUT_CLASSIFICATION	0.0032144973279462563	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9967855026720538	WITHOUT_CLASSIFICATION	0.0032144973279462563	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9990668578576959	WITHOUT_CLASSIFICATION	9.331421423042298E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9997233733118294	WITHOUT_CLASSIFICATION	2.766266881706226E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9990808482947112	WITHOUT_CLASSIFICATION	9.191517052887679E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9993821828720738	WITHOUT_CLASSIFICATION	6.178171279261496E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9996368830592662	WITHOUT_CLASSIFICATION	3.6311694073373475E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9988548094093691	WITHOUT_CLASSIFICATION	0.0011451905906308443	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9996509732264437	WITHOUT_CLASSIFICATION	3.4902677355627085E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9990169615343925	WITHOUT_CLASSIFICATION	9.830384656074756E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999667019703011	WITHOUT_CLASSIFICATION	3.329802969889731E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999887641887082	WITHOUT_CLASSIFICATION	1.1235811291867603E-5	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9996932972690776	WITHOUT_CLASSIFICATION	3.0670273092240155E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9998151484750253	WITHOUT_CLASSIFICATION	1.848515249746024E-4	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999293094323517	WITHOUT_CLASSIFICATION	7.069056764830313E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9996895440225487	WITHOUT_CLASSIFICATION	3.104559774513427E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999441980613752	WITHOUT_CLASSIFICATION	5.5801938624737704E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.999797663452556	WITHOUT_CLASSIFICATION	2.02336547443834E-4	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9998914385494432	WITHOUT_CLASSIFICATION	1.0856145055684416E-4	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999902346920576	WITHOUT_CLASSIFICATION	9.76530794240098E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9967649228732061	WITHOUT_CLASSIFICATION	0.0032350771267939536	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9977552082474561	WITHOUT_CLASSIFICATION	0.0022447917525439285	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998835715695478	WITHOUT_CLASSIFICATION	1.1642843045227992E-4	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.999808874657295	WITHOUT_CLASSIFICATION	1.9112534270496995E-4	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.999638572545559	WITHOUT_CLASSIFICATION	3.61427454440936E-4	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9997092138280027	WITHOUT_CLASSIFICATION	2.907861719973237E-4	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998238721454813	WITHOUT_CLASSIFICATION	1.7612785451877092E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9990763306080503	WITHOUT_CLASSIFICATION	9.23669391949589E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9998466131412345	WITHOUT_CLASSIFICATION	1.533868587655061E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9992849020509895	WITHOUT_CLASSIFICATION	7.150979490105053E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999188356680039	WITHOUT_CLASSIFICATION	8.116433199610766E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.999486684915543	WITHOUT_CLASSIFICATION	5.133150844570365E-4	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9987136195049375	WITHOUT_CLASSIFICATION	0.0012863804950624272	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9998019439761946	WITHOUT_CLASSIFICATION	1.9805602380545167E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.99994218083944	WITHOUT_CLASSIFICATION	5.781916056003655E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9998383253299723	WITHOUT_CLASSIFICATION	1.6167467002761282E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.99994218083944	WITHOUT_CLASSIFICATION	5.781916056003655E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9997895516338704	WITHOUT_CLASSIFICATION	2.1044836612953632E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9985908838528113	WITHOUT_CLASSIFICATION	0.0014091161471887932	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9985908838528113	WITHOUT_CLASSIFICATION	0.0014091161471887932	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9985908838528113	WITHOUT_CLASSIFICATION	0.0014091161471887932	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999746739986185	WITHOUT_CLASSIFICATION	2.532600138142694E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999746739986185	WITHOUT_CLASSIFICATION	2.532600138142694E-5	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9979206164739257	WITHOUT_CLASSIFICATION	0.0020793835260743327	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9997926280931466	WITHOUT_CLASSIFICATION	2.073719068533504E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9996081354672742	WITHOUT_CLASSIFICATION	3.918645327258382E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9998426462729713	WITHOUT_CLASSIFICATION	1.573537270286734E-4	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999931016173952	WITHOUT_CLASSIFICATION	6.8983826048220445E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999561791744038	WITHOUT_CLASSIFICATION	4.3820825596094125E-5	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9995242094268493	WITHOUT_CLASSIFICATION	4.757905731507685E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9995548101428494	WITHOUT_CLASSIFICATION	4.4518985715063196E-4	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999323650754575	WITHOUT_CLASSIFICATION	6.763492454249098E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999515864801473	WITHOUT_CLASSIFICATION	4.841351985281435E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999624089148109	WITHOUT_CLASSIFICATION	3.759108518917079E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9989797881608201	WITHOUT_CLASSIFICATION	0.001020211839179869	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.99993666654782	WITHOUT_CLASSIFICATION	6.333345218000503E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9998956720105527	WITHOUT_CLASSIFICATION	1.0432798944718161E-4	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999558241892873	WITHOUT_CLASSIFICATION	4.417581071276145E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999651961629369	WITHOUT_CLASSIFICATION	3.480383706315749E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.999847847044663	WITHOUT_CLASSIFICATION	1.521529553370215E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999062257484762	WITHOUT_CLASSIFICATION	9.37742515238778E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999062257484762	WITHOUT_CLASSIFICATION	9.37742515238778E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9998891961165827	WITHOUT_CLASSIFICATION	1.1080388341735888E-4	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999135316780724	WITHOUT_CLASSIFICATION	8.646832192767954E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999135316780724	WITHOUT_CLASSIFICATION	8.646832192767954E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9998095412643	WITHOUT_CLASSIFICATION	1.9045873569998288E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999005256173715	WITHOUT_CLASSIFICATION	9.94743826284444E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999720468135865	WITHOUT_CLASSIFICATION	2.7953186413431784E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9998586325196493	WITHOUT_CLASSIFICATION	1.4136748035061783E-4	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999436488799581	WITHOUT_CLASSIFICATION	5.635112004176956E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9995806955959646	WITHOUT_CLASSIFICATION	4.1930440403537797E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9998495738580174	WITHOUT_CLASSIFICATION	1.5042614198267274E-4	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9998855691884797	WITHOUT_CLASSIFICATION	1.144308115202218E-4	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999789789956703	WITHOUT_CLASSIFICATION	2.1021004329711805E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999678757874775	WITHOUT_CLASSIFICATION	3.212421252250175E-5	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999974693051781	WITHOUT_CLASSIFICATION	2.530694821899746E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9987178612859499	WITHOUT_CLASSIFICATION	0.0012821387140501991	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.999990999725784	WITHOUT_CLASSIFICATION	9.000274216087563E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999337446967181	WITHOUT_CLASSIFICATION	6.625530328188635E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9995548101428494	WITHOUT_CLASSIFICATION	4.4518985715063196E-4	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999363865664336	WITHOUT_CLASSIFICATION	6.361343356635307E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999882995038303	WITHOUT_CLASSIFICATION	1.1700496169702033E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999882995038303	WITHOUT_CLASSIFICATION	1.1700496169702033E-5	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.999291602519459	WITHOUT_CLASSIFICATION	7.083974805410068E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9982312530442993	WITHOUT_CLASSIFICATION	0.001768746955700767	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9996523738583072	WITHOUT_CLASSIFICATION	3.4762614169290217E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9996410865080655	WITHOUT_CLASSIFICATION	3.5891349193444813E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999520054349968	WITHOUT_CLASSIFICATION	4.799456500324308E-5	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9997525871239626	WITHOUT_CLASSIFICATION	2.4741287603730685E-4	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9997955079009578	WITHOUT_CLASSIFICATION	2.0449209904219263E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9847980581794678	WITHOUT_CLASSIFICATION	0.015201941820532288	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9995115291457943	WITHOUT_CLASSIFICATION	4.884708542056011E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9979029052661532	WITHOUT_CLASSIFICATION	0.0020970947338467597	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9997027414537745	WITHOUT_CLASSIFICATION	2.972585462255906E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9966688237038365	WITHOUT_CLASSIFICATION	0.003331176296163516	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.997596229540747	WITHOUT_CLASSIFICATION	0.00240377045925293	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9998796723141294	WITHOUT_CLASSIFICATION	1.2032768587048972E-4	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999619621266288	WITHOUT_CLASSIFICATION	3.8037873371271044E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9997167952615293	WITHOUT_CLASSIFICATION	2.8320473847072967E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999637960734183	WITHOUT_CLASSIFICATION	3.6203926581717195E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9998897439773686	WITHOUT_CLASSIFICATION	1.1025602263138774E-4	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999862495354375	WITHOUT_CLASSIFICATION	1.3750464562548355E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998094141001418	WITHOUT_CLASSIFICATION	1.9058589985827674E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9998020907211025	WITHOUT_CLASSIFICATION	1.9790927889751003E-4	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9997275599185396	WITHOUT_CLASSIFICATION	2.724400814603736E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999264192748583	WITHOUT_CLASSIFICATION	7.358072514175834E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999876505389371	WITHOUT_CLASSIFICATION	1.2349461062987294E-5	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9986833330793187	WITHOUT_CLASSIFICATION	0.0013166669206813757	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9995191626789551	WITHOUT_CLASSIFICATION	4.8083732104496445E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9968073882783931	WITHOUT_CLASSIFICATION	0.003192611721606823	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999463681254606	WITHOUT_CLASSIFICATION	5.363187453935627E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998622849718125	WITHOUT_CLASSIFICATION	1.3771502818745306E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9993860322980228	WITHOUT_CLASSIFICATION	6.139677019771327E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9996597887972364	WITHOUT_CLASSIFICATION	3.4021120276363855E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9996138467867132	WITHOUT_CLASSIFICATION	3.8615321328678003E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9512446131476435	WITHOUT_CLASSIFICATION	0.0487553868523565	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9996920687629071	WITHOUT_CLASSIFICATION	3.079312370929019E-4	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9968073882783931	WITHOUT_CLASSIFICATION	0.003192611721606823	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9983287003844735	WITHOUT_CLASSIFICATION	0.0016712996155264818	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9996920687629071	WITHOUT_CLASSIFICATION	3.079312370929019E-4	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.990703034007163	WITHOUT_CLASSIFICATION	0.009296965992837013	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999753899882138	WITHOUT_CLASSIFICATION	2.461001178620634E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9998453179244955	WITHOUT_CLASSIFICATION	1.5468207550452316E-4	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9996123602273219	WITHOUT_CLASSIFICATION	3.8763977267814104E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999390449706106	WITHOUT_CLASSIFICATION	6.095502938948391E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9994639401908385	WITHOUT_CLASSIFICATION	5.360598091614769E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9994639401908385	WITHOUT_CLASSIFICATION	5.360598091614769E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999770289741631	WITHOUT_CLASSIFICATION	2.2971025836979157E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9995125473636296	WITHOUT_CLASSIFICATION	4.874526363704611E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999095401646557	WITHOUT_CLASSIFICATION	9.045983534423962E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999095401646557	WITHOUT_CLASSIFICATION	9.045983534423962E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.999930440415673	WITHOUT_CLASSIFICATION	6.955958432699706E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.999195015144555	WITHOUT_CLASSIFICATION	8.049848554450833E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9991758077304009	WITHOUT_CLASSIFICATION	8.241922695989855E-4	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9969207146465902	WITHOUT_CLASSIFICATION	0.0030792853534098506	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999453954300066	WITHOUT_CLASSIFICATION	5.460456999334599E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.999457650129836	WITHOUT_CLASSIFICATION	5.423498701640802E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.999795473846824	WITHOUT_CLASSIFICATION	2.0452615317609015E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9998865121359806	WITHOUT_CLASSIFICATION	1.1348786401935397E-4	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.999962763022149	WITHOUT_CLASSIFICATION	3.7236977850949885E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.999981492269902	WITHOUT_CLASSIFICATION	1.850773009805164E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9998255785844292	WITHOUT_CLASSIFICATION	1.7442141557076618E-4	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9998331303713639	WITHOUT_CLASSIFICATION	1.668696286360807E-4	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9997358072625472	WITHOUT_CLASSIFICATION	2.6419273745279816E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9994937179554565	WITHOUT_CLASSIFICATION	5.062820445434484E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999117561913033	WITHOUT_CLASSIFICATION	8.824380869661511E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9996250466670257	WITHOUT_CLASSIFICATION	3.7495333297433693E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9998077403519452	WITHOUT_CLASSIFICATION	1.9225964805484838E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999556388752804	WITHOUT_CLASSIFICATION	4.436112471955652E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9961955811906065	WITHOUT_CLASSIFICATION	0.003804418809393422	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9997146339278644	WITHOUT_CLASSIFICATION	2.853660721355918E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995887436193884	WITHOUT_CLASSIFICATION	4.112563806115677E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995887436193884	WITHOUT_CLASSIFICATION	4.112563806115677E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999216888757827	WITHOUT_CLASSIFICATION	7.83111242172861E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.999881750985328	WITHOUT_CLASSIFICATION	1.1824901467185305E-4	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9996962323710705	WITHOUT_CLASSIFICATION	3.0376762892938295E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9997138680061697	WITHOUT_CLASSIFICATION	2.861319938303173E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9995474042365606	WITHOUT_CLASSIFICATION	4.525957634393781E-4	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.999588496854674	WITHOUT_CLASSIFICATION	4.1150314532606327E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9994813572783159	WITHOUT_CLASSIFICATION	5.186427216841177E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9987401237090976	WITHOUT_CLASSIFICATION	0.0012598762909023665	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999994413000461	WITHOUT_CLASSIFICATION	5.586999539045755E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999972129448519	WITHOUT_CLASSIFICATION	2.787055148032116E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999915856688264	WITHOUT_CLASSIFICATION	8.414331173717101E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9990572848217774	WITHOUT_CLASSIFICATION	9.427151782225706E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999591124482408	WITHOUT_CLASSIFICATION	4.088755175923099E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999503157665833	WITHOUT_CLASSIFICATION	4.9684233416546624E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999925364856362	WITHOUT_CLASSIFICATION	7.463514363730542E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9995547665395139	WITHOUT_CLASSIFICATION	4.452334604861239E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9971274566877442	WITHOUT_CLASSIFICATION	0.002872543312255946	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.996575859746153	WITHOUT_CLASSIFICATION	0.003424140253846995	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999087776550482	WITHOUT_CLASSIFICATION	9.122234495186636E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9985897601143067	WITHOUT_CLASSIFICATION	0.0014102398856933904	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9997217976904668	WITHOUT_CLASSIFICATION	2.7820230953315585E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999396306758939	WITHOUT_CLASSIFICATION	6.036932410607049E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999815072259044	WITHOUT_CLASSIFICATION	1.849277409564924E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9975317618547832	WITHOUT_CLASSIFICATION	0.002468238145216774	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9920113950117032	WITHOUT_CLASSIFICATION	0.007988604988296741	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999941625015673	WITHOUT_CLASSIFICATION	5.837498432779205E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999343861066357	WITHOUT_CLASSIFICATION	6.561389336439202E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999809100123755	WITHOUT_CLASSIFICATION	1.9089987624436148E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9993207636677204	WITHOUT_CLASSIFICATION	6.792363322797192E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999671116604871	WITHOUT_CLASSIFICATION	3.288833951279622E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999471322657026	WITHOUT_CLASSIFICATION	5.2867734297253055E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999406079386304	WITHOUT_CLASSIFICATION	5.9392061369541064E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9995706323169081	WITHOUT_CLASSIFICATION	4.2936768309191804E-4	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9985804697026937	WITHOUT_CLASSIFICATION	0.0014195302973063705	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999731944936148	WITHOUT_CLASSIFICATION	2.6805506385203543E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999739328826931	WITHOUT_CLASSIFICATION	2.6067117306901954E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999630188185513	WITHOUT_CLASSIFICATION	3.698118144872667E-5	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9990517909425785	WITHOUT_CLASSIFICATION	9.482090574214411E-4	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.992812367258441	WITHOUT_CLASSIFICATION	0.00718763274155888	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999831098402068	WITHOUT_CLASSIFICATION	1.6890159793142347E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9954329989393507	WITHOUT_CLASSIFICATION	0.004567001060649298	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9954329989393507	WITHOUT_CLASSIFICATION	0.004567001060649298	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999881609020985	WITHOUT_CLASSIFICATION	1.1839097901600844E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9996185034962424	WITHOUT_CLASSIFICATION	3.8149650375771924E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9998267445292289	WITHOUT_CLASSIFICATION	1.7325547077113996E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9997362172578338	WITHOUT_CLASSIFICATION	2.6378274216621136E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999640788171286	WITHOUT_CLASSIFICATION	3.5921182871473475E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999362865452303	WITHOUT_CLASSIFICATION	6.371345476977816E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9998753473323139	WITHOUT_CLASSIFICATION	1.2465266768609613E-4	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9949162864851572	WITHOUT_CLASSIFICATION	0.005083713514842824	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9958797403119501	WITHOUT_CLASSIFICATION	0.004120259688049839	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9998730022615813	WITHOUT_CLASSIFICATION	1.2699773841872848E-4	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.99980815621175	WITHOUT_CLASSIFICATION	1.9184378825004266E-4	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999740516655551	WITHOUT_CLASSIFICATION	2.5948334444994776E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999815581254606	WITHOUT_CLASSIFICATION	1.8441874539412383E-5	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999402545670045	WITHOUT_CLASSIFICATION	5.974543299539446E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999866930817611	WITHOUT_CLASSIFICATION	1.3306918238897014E-5	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999728845802585	WITHOUT_CLASSIFICATION	2.711541974161129E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999401077261201	WITHOUT_CLASSIFICATION	5.989227387985172E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998707204477472	WITHOUT_CLASSIFICATION	1.292795522529437E-4	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999195342849817	WITHOUT_CLASSIFICATION	8.046571501835439E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998263161008806	WITHOUT_CLASSIFICATION	1.7368389911932475E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999422216349529	WITHOUT_CLASSIFICATION	5.777836504707637E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999356399325205	WITHOUT_CLASSIFICATION	6.436006747949324E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999096264932605	WITHOUT_CLASSIFICATION	9.037350673951305E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999915383298239	WITHOUT_CLASSIFICATION	8.461670176116524E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999596540332667	WITHOUT_CLASSIFICATION	4.0345966733323046E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999457945299084	WITHOUT_CLASSIFICATION	5.420547009164694E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999725806559926	WITHOUT_CLASSIFICATION	2.7419344007433684E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999288502030791	WITHOUT_CLASSIFICATION	7.114979692087961E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999113894069127	WITHOUT_CLASSIFICATION	8.86105930873695E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999198610703731	WITHOUT_CLASSIFICATION	8.013892962686164E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.999969519979892	WITHOUT_CLASSIFICATION	3.0480020108020036E-5	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999403939138188	WITHOUT_CLASSIFICATION	5.960608618119706E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999222996002989	WITHOUT_CLASSIFICATION	7.770039970113816E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999739328826931	WITHOUT_CLASSIFICATION	2.6067117306901954E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9995021583595249	WITHOUT_CLASSIFICATION	4.978416404751328E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999546240611888	WITHOUT_CLASSIFICATION	4.537593881111499E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999546240611888	WITHOUT_CLASSIFICATION	4.537593881111499E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999164822245463	WITHOUT_CLASSIFICATION	8.351777545366173E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9990180272011882	WITHOUT_CLASSIFICATION	9.81972798811933E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9996337976807488	WITHOUT_CLASSIFICATION	3.662023192511944E-4	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999257876165807	WITHOUT_CLASSIFICATION	7.421238341937748E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999329508603179	WITHOUT_CLASSIFICATION	6.704913968212608E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999699320331388	WITHOUT_CLASSIFICATION	3.0067966861212537E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9998549176290638	WITHOUT_CLASSIFICATION	1.4508237093613166E-4	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9998238981583646	WITHOUT_CLASSIFICATION	1.7610184163541797E-4	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999210229558317	WITHOUT_CLASSIFICATION	7.897704416826337E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9996189954059608	WITHOUT_CLASSIFICATION	3.8100459403914486E-4	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9998050864607176	WITHOUT_CLASSIFICATION	1.9491353928228748E-4	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999386274410083	WITHOUT_CLASSIFICATION	6.137255899172805E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999727149350561	WITHOUT_CLASSIFICATION	2.7285064943778322E-5	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9997816197288031	WITHOUT_CLASSIFICATION	2.1838027119689722E-4	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9996251524211572	WITHOUT_CLASSIFICATION	3.7484757884276407E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9994964439750558	WITHOUT_CLASSIFICATION	5.035560249442039E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9995450301410751	WITHOUT_CLASSIFICATION	4.549698589249049E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9997959265921837	WITHOUT_CLASSIFICATION	2.040734078163462E-4	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9990159707210177	WITHOUT_CLASSIFICATION	9.840292789822852E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9998388059785875	WITHOUT_CLASSIFICATION	1.6119402141236627E-4	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9998170957799212	WITHOUT_CLASSIFICATION	1.8290422007877599E-4	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9998651844985114	WITHOUT_CLASSIFICATION	1.3481550148858475E-4	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999285593925503	WITHOUT_CLASSIFICATION	7.144060744966008E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999846978144667	WITHOUT_CLASSIFICATION	1.530218553328806E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9997129985759536	WITHOUT_CLASSIFICATION	2.870014240463546E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999765206384569	WITHOUT_CLASSIFICATION	2.3479361543141826E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9997284805239839	WITHOUT_CLASSIFICATION	2.7151947601609656E-4	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999580676220847	WITHOUT_CLASSIFICATION	4.193237791537592E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999865189523874	WITHOUT_CLASSIFICATION	1.3481047612631946E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999398671313761	WITHOUT_CLASSIFICATION	6.013286862396076E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999398671313761	WITHOUT_CLASSIFICATION	6.013286862396076E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.999816589343624	WITHOUT_CLASSIFICATION	1.834106563759833E-4	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9998844580542777	WITHOUT_CLASSIFICATION	1.1554194572222258E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999506633850509	WITHOUT_CLASSIFICATION	4.9336614949098645E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999379922941966	WITHOUT_CLASSIFICATION	6.200770580344281E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999846978144667	WITHOUT_CLASSIFICATION	1.530218553328806E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9997129985759536	WITHOUT_CLASSIFICATION	2.870014240463546E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999765206384569	WITHOUT_CLASSIFICATION	2.3479361543141826E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999580676220847	WITHOUT_CLASSIFICATION	4.193237791537592E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998996808414605	WITHOUT_CLASSIFICATION	1.0031915853939552E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9995432637488064	WITHOUT_CLASSIFICATION	4.5673625119363063E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999141055715342	WITHOUT_CLASSIFICATION	8.589442846592387E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999652858135317	WITHOUT_CLASSIFICATION	3.471418646825917E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999806878085241	WITHOUT_CLASSIFICATION	1.9312191475804204E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9998888228018311	WITHOUT_CLASSIFICATION	1.111771981688293E-4	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999786447980864	WITHOUT_CLASSIFICATION	2.1355201913610683E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996075169584346	WITHOUT_CLASSIFICATION	3.924830415652603E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9998290525908509	WITHOUT_CLASSIFICATION	1.709474091491728E-4	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999580631311449	WITHOUT_CLASSIFICATION	4.193686885511685E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999223409984238	WITHOUT_CLASSIFICATION	7.765900157619977E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999115838269326	WITHOUT_CLASSIFICATION	8.84161730674181E-5	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9992464148208241	WITHOUT_CLASSIFICATION	7.535851791758046E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999402449125162	WITHOUT_CLASSIFICATION	5.975508748384401E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999072408448171	WITHOUT_CLASSIFICATION	9.275915518286962E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999916318560753	WITHOUT_CLASSIFICATION	8.368143924787061E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999214443663049	WITHOUT_CLASSIFICATION	7.855563369510782E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.999562887358814	WITHOUT_CLASSIFICATION	4.371126411860239E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9989292799260616	WITHOUT_CLASSIFICATION	0.0010707200739382956	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999379922941966	WITHOUT_CLASSIFICATION	6.200770580344281E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9995432637488064	WITHOUT_CLASSIFICATION	4.5673625119363063E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999141055715342	WITHOUT_CLASSIFICATION	8.589442846592387E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999806878085241	WITHOUT_CLASSIFICATION	1.9312191475804204E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9998888228018311	WITHOUT_CLASSIFICATION	1.111771981688293E-4	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999786447980864	WITHOUT_CLASSIFICATION	2.1355201913610683E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996075169584346	WITHOUT_CLASSIFICATION	3.924830415652603E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9997958813364527	WITHOUT_CLASSIFICATION	2.041186635472797E-4	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9975699325309105	WITHOUT_CLASSIFICATION	0.0024300674690895196	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999351884330057	WITHOUT_CLASSIFICATION	6.481156699441197E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.999957390645496	WITHOUT_CLASSIFICATION	4.260935450393381E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9992440839061859	WITHOUT_CLASSIFICATION	7.55916093814187E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9992440839061859	WITHOUT_CLASSIFICATION	7.55916093814187E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9997465766973314	WITHOUT_CLASSIFICATION	2.534233026686646E-4	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999235854012388	WITHOUT_CLASSIFICATION	7.641459876124296E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999809619887735	WITHOUT_CLASSIFICATION	1.9038011226507384E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.999931059769317	WITHOUT_CLASSIFICATION	6.894023068294153E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999956458433186	WITHOUT_CLASSIFICATION	4.354156681421734E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.999609345264096	WITHOUT_CLASSIFICATION	3.906547359041085E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999591935039784	WITHOUT_CLASSIFICATION	4.0806496021607464E-5	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999510833970822	WITHOUT_CLASSIFICATION	4.8916602917885306E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9997841855285521	WITHOUT_CLASSIFICATION	2.1581447144778808E-4	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9996111115908726	WITHOUT_CLASSIFICATION	3.888884091273863E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9993294211651512	WITHOUT_CLASSIFICATION	6.70578834848721E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999176355500373	WITHOUT_CLASSIFICATION	8.236444996269898E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997938048024688	WITHOUT_CLASSIFICATION	2.061951975311333E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998294815529252	WITHOUT_CLASSIFICATION	1.705184470749074E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999179572908271	WITHOUT_CLASSIFICATION	8.204270917290089E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9998145459067086	WITHOUT_CLASSIFICATION	1.8545409329144628E-4	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999214744204136	WITHOUT_CLASSIFICATION	7.852557958648927E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999343462432335	WITHOUT_CLASSIFICATION	6.565375676651739E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9998299220905171	WITHOUT_CLASSIFICATION	1.700779094828769E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999965078054204	WITHOUT_CLASSIFICATION	3.492194579745513E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9882704892460012	WITHOUT_CLASSIFICATION	0.01172951075399866	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9994237608328337	WITHOUT_CLASSIFICATION	5.762391671662882E-4	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.999564215358316	WITHOUT_CLASSIFICATION	4.3578464168392967E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999900190298877	WITHOUT_CLASSIFICATION	9.980970112372643E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.999947872793477	WITHOUT_CLASSIFICATION	5.212720652300926E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9997104743149209	WITHOUT_CLASSIFICATION	2.8952568507910196E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999900190298877	WITHOUT_CLASSIFICATION	9.980970112372643E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998294815529252	WITHOUT_CLASSIFICATION	1.705184470749074E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999251780671058	WITHOUT_CLASSIFICATION	7.482193289421971E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9995782883325147	WITHOUT_CLASSIFICATION	4.217116674852903E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9998212386520391	WITHOUT_CLASSIFICATION	1.787613479609596E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.994713405264942	WITHOUT_CLASSIFICATION	0.0052865947350579975	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.999939784814922	WITHOUT_CLASSIFICATION	6.021518507806157E-5	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999473968489875	WITHOUT_CLASSIFICATION	5.260315101244912E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997655159308672	WITHOUT_CLASSIFICATION	2.3448406913285726E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999677623761708	WITHOUT_CLASSIFICATION	3.223762382923223E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.8883903408074566	WITHOUT_CLASSIFICATION	0.11160965919254329	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9986138192387227	WITHOUT_CLASSIFICATION	0.0013861807612771894	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9971654181642169	WITHOUT_CLASSIFICATION	0.002834581835782977	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999264990071564	WITHOUT_CLASSIFICATION	7.350099284363166E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9977635529810173	WITHOUT_CLASSIFICATION	0.002236447018982743	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999842197271654	WITHOUT_CLASSIFICATION	1.578027283457589E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9997704883555428	WITHOUT_CLASSIFICATION	2.2951164445723148E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9991798852565953	WITHOUT_CLASSIFICATION	8.201147434046514E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9994839750169419	WITHOUT_CLASSIFICATION	5.160249830581065E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9956358071103826	WITHOUT_CLASSIFICATION	0.004364192889617467	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999398387057	WITHOUT_CLASSIFICATION	6.016129430882121E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998227294641585	WITHOUT_CLASSIFICATION	1.7727053584144122E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999844170035452	WITHOUT_CLASSIFICATION	1.558299645473604E-5	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9990705043714284	WITHOUT_CLASSIFICATION	9.294956285716151E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9993510014072046	WITHOUT_CLASSIFICATION	6.489985927954712E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9995602052080355	WITHOUT_CLASSIFICATION	4.397947919645434E-4	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999862693726079	WITHOUT_CLASSIFICATION	1.3730627392116992E-5	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.999247202398914	WITHOUT_CLASSIFICATION	7.527976010860348E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.992037127919897	WITHOUT_CLASSIFICATION	0.007962872080103045	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9997238053079822	WITHOUT_CLASSIFICATION	2.7619469201769055E-4	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9997111459765752	WITHOUT_CLASSIFICATION	2.888540234247661E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9997655134709322	WITHOUT_CLASSIFICATION	2.3448652906785526E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997938048024688	WITHOUT_CLASSIFICATION	2.061951975311333E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999363258218265	WITHOUT_CLASSIFICATION	6.367417817355135E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9963548602081417	WITHOUT_CLASSIFICATION	0.0036451397918584225	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999352227359262	WITHOUT_CLASSIFICATION	6.477726407390517E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999469482925499	WITHOUT_CLASSIFICATION	5.3051707450004866E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999469482925499	WITHOUT_CLASSIFICATION	5.3051707450004866E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999188481934052	WITHOUT_CLASSIFICATION	8.115180659489421E-5	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999709392025907	WITHOUT_CLASSIFICATION	2.9060797409272994E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.999957689099832	WITHOUT_CLASSIFICATION	4.231090016800588E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999394758608546	WITHOUT_CLASSIFICATION	6.0524139145429186E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9972826737377396	WITHOUT_CLASSIFICATION	0.0027173262622605335	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9993968198941688	WITHOUT_CLASSIFICATION	6.031801058310413E-4	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9991305814730483	WITHOUT_CLASSIFICATION	8.694185269516812E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.999960519965603	WITHOUT_CLASSIFICATION	3.9480034397059306E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999641273050656	WITHOUT_CLASSIFICATION	3.587269493440038E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999476423047374	WITHOUT_CLASSIFICATION	5.235769526247391E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9995749683677448	WITHOUT_CLASSIFICATION	4.25031632255168E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999215511432022	WITHOUT_CLASSIFICATION	7.844885679775479E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9997548895489498	WITHOUT_CLASSIFICATION	2.451104510502238E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9998276858976792	WITHOUT_CLASSIFICATION	1.723141023208565E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999727471108364	WITHOUT_CLASSIFICATION	2.7252889163608826E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999727471108364	WITHOUT_CLASSIFICATION	2.7252889163608826E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9995833919532179	WITHOUT_CLASSIFICATION	4.166080467820805E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9995833919532179	WITHOUT_CLASSIFICATION	4.166080467820805E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999582234578138	WITHOUT_CLASSIFICATION	4.177654218619912E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9942673903331852	WITHOUT_CLASSIFICATION	0.005732609666814766	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9997601960650918	WITHOUT_CLASSIFICATION	2.3980393490817187E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999956764645547	WITHOUT_CLASSIFICATION	4.323535445267476E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.999435060555426	WITHOUT_CLASSIFICATION	5.64939444574003E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9997355249428225	WITHOUT_CLASSIFICATION	2.6447505717750824E-4	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999882141151276	WITHOUT_CLASSIFICATION	1.1785884872321232E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999215511432022	WITHOUT_CLASSIFICATION	7.844885679775479E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9997548895489498	WITHOUT_CLASSIFICATION	2.451104510502238E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9987011117338039	WITHOUT_CLASSIFICATION	0.0012988882661960762	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9998384955537364	WITHOUT_CLASSIFICATION	1.6150444626367204E-4	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9989545137866271	WITHOUT_CLASSIFICATION	0.0010454862133728725	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999658074264001	WITHOUT_CLASSIFICATION	3.419257359989539E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.999979809294062	WITHOUT_CLASSIFICATION	2.0190705937932908E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9946406339750331	WITHOUT_CLASSIFICATION	0.005359366024966922	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9998774635620509	WITHOUT_CLASSIFICATION	1.2253643794911477E-4	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9998774635620509	WITHOUT_CLASSIFICATION	1.2253643794911477E-4	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9998796915139508	WITHOUT_CLASSIFICATION	1.2030848604908747E-4	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999915303898707	WITHOUT_CLASSIFICATION	8.469610129420012E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9997947679614012	WITHOUT_CLASSIFICATION	2.0523203859885622E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9986735156710215	WITHOUT_CLASSIFICATION	0.0013264843289786245	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9997548895489498	WITHOUT_CLASSIFICATION	2.451104510502238E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9972343319644106	WITHOUT_CLASSIFICATION	0.002765668035589419	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9985136776184775	WITHOUT_CLASSIFICATION	0.0014863223815224668	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999589892222983	WITHOUT_CLASSIFICATION	4.10107777017207E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9997372041723174	WITHOUT_CLASSIFICATION	2.627958276825463E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999893872251876	WITHOUT_CLASSIFICATION	1.0612774812411487E-5	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999774315896981	WITHOUT_CLASSIFICATION	2.2568410301892556E-4	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9997822513083242	WITHOUT_CLASSIFICATION	2.1774869167566306E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999247033298663	WITHOUT_CLASSIFICATION	7.529667013374229E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9998312435048721	WITHOUT_CLASSIFICATION	1.687564951278691E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.999972389944855	WITHOUT_CLASSIFICATION	2.7610055144949813E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9998818650373721	WITHOUT_CLASSIFICATION	1.1813496262798709E-4	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9998994323107919	WITHOUT_CLASSIFICATION	1.0056768920811183E-4	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.999516732767511	WITHOUT_CLASSIFICATION	4.832672324890417E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9996084824135507	WITHOUT_CLASSIFICATION	3.9151758644932245E-4	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999291485751948	WITHOUT_CLASSIFICATION	7.085142480521438E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9395744605047389	WITHOUT_CLASSIFICATION	0.06042553949526107	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998370858000015	WITHOUT_CLASSIFICATION	1.6291419999842454E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9993579130207689	WITHOUT_CLASSIFICATION	6.420869792310214E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.999955936071432	WITHOUT_CLASSIFICATION	4.406392856805674E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9997470339080546	WITHOUT_CLASSIFICATION	2.5296609194538455E-4	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9997095831013616	WITHOUT_CLASSIFICATION	2.904168986384048E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9984906892059369	WITHOUT_CLASSIFICATION	0.0015093107940631094	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9995954874669598	WITHOUT_CLASSIFICATION	4.0451253304016387E-4	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9989602529072414	WITHOUT_CLASSIFICATION	0.0010397470927585358	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9998995312673248	WITHOUT_CLASSIFICATION	1.0046873267517924E-4	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999457597134053	WITHOUT_CLASSIFICATION	5.4240286594728075E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998800448046121	WITHOUT_CLASSIFICATION	1.1995519538781045E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9963548602081417	WITHOUT_CLASSIFICATION	0.0036451397918584225	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9995954874669598	WITHOUT_CLASSIFICATION	4.0451253304016387E-4	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999802333404627	WITHOUT_CLASSIFICATION	1.9766659537302163E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997934506663722	WITHOUT_CLASSIFICATION	2.065493336278731E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9972211433167368	WITHOUT_CLASSIFICATION	0.002778856683263234	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9967348412464352	WITHOUT_CLASSIFICATION	0.003265158753564768	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9967348412464352	WITHOUT_CLASSIFICATION	0.003265158753564768	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.999966288385977	WITHOUT_CLASSIFICATION	3.3711614022945346E-5	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.999968600151935	WITHOUT_CLASSIFICATION	3.139984806500697E-5	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.99982517501418	WITHOUT_CLASSIFICATION	1.7482498582006237E-4	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999488679844554	WITHOUT_CLASSIFICATION	5.113201554470414E-5	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9997987804986666	WITHOUT_CLASSIFICATION	2.0121950133355593E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9997924155525525	WITHOUT_CLASSIFICATION	2.0758444744743416E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9998031256709741	WITHOUT_CLASSIFICATION	1.96874329025863E-4	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9971543434679848	WITHOUT_CLASSIFICATION	0.0028456565320152585	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.999934306552414	WITHOUT_CLASSIFICATION	6.569344758602416E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.999934306552414	WITHOUT_CLASSIFICATION	6.569344758602416E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999510796248973	WITHOUT_CLASSIFICATION	4.892037510274443E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9993765137314782	WITHOUT_CLASSIFICATION	6.234862685217728E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999913243367362	WITHOUT_CLASSIFICATION	8.675663263775251E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999820886070921	WITHOUT_CLASSIFICATION	1.791139290785898E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9996803330285199	WITHOUT_CLASSIFICATION	3.1966697148009366E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999810986501521	WITHOUT_CLASSIFICATION	1.890134984800371E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999962058874322	WITHOUT_CLASSIFICATION	3.7941125677135352E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999773223949455	WITHOUT_CLASSIFICATION	2.2677605054440178E-5	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999910903000631	WITHOUT_CLASSIFICATION	8.909699936912217E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9537034022031555	WITHOUT_CLASSIFICATION	0.04629659779684453	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999193433925229	WITHOUT_CLASSIFICATION	8.065660747718448E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999556216376452	WITHOUT_CLASSIFICATION	4.437836235491064E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9998542515200105	WITHOUT_CLASSIFICATION	1.4574847998961664E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998805887383495	WITHOUT_CLASSIFICATION	1.1941126165050835E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998805887383495	WITHOUT_CLASSIFICATION	1.1941126165050835E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999356208560427	WITHOUT_CLASSIFICATION	6.437914395737147E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996075169584346	WITHOUT_CLASSIFICATION	3.924830415652603E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9537034022031555	WITHOUT_CLASSIFICATION	0.04629659779684453	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999810939295135	WITHOUT_CLASSIFICATION	1.890607048656732E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9955898584201327	WITHOUT_CLASSIFICATION	0.0044101415798673054	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9998695181940749	WITHOUT_CLASSIFICATION	1.3048180592519924E-4	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9998226403845201	WITHOUT_CLASSIFICATION	1.7735961547993862E-4	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9998958745854609	WITHOUT_CLASSIFICATION	1.0412541453919252E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9998199029716437	WITHOUT_CLASSIFICATION	1.8009702835636068E-4	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.999916204035721	WITHOUT_CLASSIFICATION	8.379596427895435E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9963548602081417	WITHOUT_CLASSIFICATION	0.0036451397918584225	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999558241892873	WITHOUT_CLASSIFICATION	4.417581071276145E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9997211406655566	WITHOUT_CLASSIFICATION	2.7885933444340364E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9996482401212798	WITHOUT_CLASSIFICATION	3.5175987872013815E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999248747870816	WITHOUT_CLASSIFICATION	7.512521291840159E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999510553499169	WITHOUT_CLASSIFICATION	4.894465008319442E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999865408934249	WITHOUT_CLASSIFICATION	1.3459106575174412E-5	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9995193799241242	WITHOUT_CLASSIFICATION	4.806200758757817E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9997549419846138	WITHOUT_CLASSIFICATION	2.4505801538621247E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9982573212806477	WITHOUT_CLASSIFICATION	0.0017426787193522341	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9984606979806498	WITHOUT_CLASSIFICATION	0.0015393020193502109	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9996845941573389	WITHOUT_CLASSIFICATION	3.1540584266106245E-4	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9994964369774298	WITHOUT_CLASSIFICATION	5.03563022570255E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9985324431844781	WITHOUT_CLASSIFICATION	0.001467556815521822	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9782099661434253	WITHOUT_CLASSIFICATION	0.021790033856574798	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9976047310113345	WITHOUT_CLASSIFICATION	0.0023952689886654237	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999461839377236	WITHOUT_CLASSIFICATION	5.381606227633449E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999696571536218	WITHOUT_CLASSIFICATION	3.034284637814238E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999162058160419	WITHOUT_CLASSIFICATION	8.379418395809145E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9975171018519038	WITHOUT_CLASSIFICATION	0.002482898148096126	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999675537124476	WITHOUT_CLASSIFICATION	3.244628755236658E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999831095462621	WITHOUT_CLASSIFICATION	1.6890453737776432E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999696387671884	WITHOUT_CLASSIFICATION	3.0361232811635417E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.999966288385977	WITHOUT_CLASSIFICATION	3.3711614022945346E-5	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9992266973688038	WITHOUT_CLASSIFICATION	7.733026311961339E-4	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9995708686827905	WITHOUT_CLASSIFICATION	4.291313172095398E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999517070238757	WITHOUT_CLASSIFICATION	4.8292976124216976E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9982145808245269	WITHOUT_CLASSIFICATION	0.001785419175473141	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9992404021639337	WITHOUT_CLASSIFICATION	7.595978360663006E-4	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9985994232937699	WITHOUT_CLASSIFICATION	0.00140057670623016	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.999983109867795	WITHOUT_CLASSIFICATION	1.6890132204985748E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9990825733022844	WITHOUT_CLASSIFICATION	9.174266977154815E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999916325724783	WITHOUT_CLASSIFICATION	8.367427521737927E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999535140203093	WITHOUT_CLASSIFICATION	4.64859796907585E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995867327183889	WITHOUT_CLASSIFICATION	4.1326728161117566E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998480978674776	WITHOUT_CLASSIFICATION	1.5190213252247738E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999230534719693	WITHOUT_CLASSIFICATION	7.694652803069674E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9994904110829815	WITHOUT_CLASSIFICATION	5.095889170184338E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.999993970922764	WITHOUT_CLASSIFICATION	6.029077235929651E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9951216336935234	WITHOUT_CLASSIFICATION	0.004878366306476626	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9995378412100465	WITHOUT_CLASSIFICATION	4.6215878995352236E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9960352918242011	WITHOUT_CLASSIFICATION	0.003964708175798902	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9995768328637036	WITHOUT_CLASSIFICATION	4.231671362964378E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9988446043122974	WITHOUT_CLASSIFICATION	0.0011553956877026032	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9986793827762558	WITHOUT_CLASSIFICATION	0.0013206172237441658	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9892732990451071	WITHOUT_CLASSIFICATION	0.010726700954892879	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999770386993223	WITHOUT_CLASSIFICATION	2.2961300677726856E-5	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999693419115733	WITHOUT_CLASSIFICATION	3.0658088426657696E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999626819851652	WITHOUT_CLASSIFICATION	3.731801483483675E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999626819851652	WITHOUT_CLASSIFICATION	3.731801483483675E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999626819851652	WITHOUT_CLASSIFICATION	3.731801483483675E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9972474312322759	WITHOUT_CLASSIFICATION	0.0027525687677241698	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999853483859422	WITHOUT_CLASSIFICATION	1.4651614057723658E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999202256455898	WITHOUT_CLASSIFICATION	7.977435441024128E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9988541862459049	WITHOUT_CLASSIFICATION	0.0011458137540950337	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9996857286208901	WITHOUT_CLASSIFICATION	3.14271379109862E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999459826865932	WITHOUT_CLASSIFICATION	5.401731340684628E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999023934693027	WITHOUT_CLASSIFICATION	9.760653069733604E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9998379488443006	WITHOUT_CLASSIFICATION	1.6205115569954942E-4	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9988678931547725	WITHOUT_CLASSIFICATION	0.0011321068452273633	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9998660448891851	WITHOUT_CLASSIFICATION	1.3395511081492308E-4	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.999411885106091	WITHOUT_CLASSIFICATION	5.88114893908973E-4	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999887066887735	WITHOUT_CLASSIFICATION	1.1293311226433834E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998811588832468	WITHOUT_CLASSIFICATION	1.1884111675332392E-4	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9998811588832468	WITHOUT_CLASSIFICATION	1.1884111675332392E-4	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999513580572887	WITHOUT_CLASSIFICATION	4.864194271127386E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9995591595536447	WITHOUT_CLASSIFICATION	4.408404463552694E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999294338510843	WITHOUT_CLASSIFICATION	7.056614891560381E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999127753254834	WITHOUT_CLASSIFICATION	8.722467451661784E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9996407115225209	WITHOUT_CLASSIFICATION	3.592884774792022E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999750230619285	WITHOUT_CLASSIFICATION	2.4976938071509512E-5	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9998027854525509	WITHOUT_CLASSIFICATION	1.9721454744911905E-4	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9998027854525509	WITHOUT_CLASSIFICATION	1.9721454744911905E-4	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9987337906709539	WITHOUT_CLASSIFICATION	0.0012662093290461032	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9997580931929201	WITHOUT_CLASSIFICATION	2.4190680707991357E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9985242305236606	WITHOUT_CLASSIFICATION	0.001475769476339493	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9997814337255141	WITHOUT_CLASSIFICATION	2.185662744859926E-4	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9998781009399766	WITHOUT_CLASSIFICATION	1.2189906002337288E-4	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9991230410948422	WITHOUT_CLASSIFICATION	8.769589051578017E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9997291258621288	WITHOUT_CLASSIFICATION	2.7087413787115703E-4	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9996958678548754	WITHOUT_CLASSIFICATION	3.041321451245949E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9877605922500631	WITHOUT_CLASSIFICATION	0.012239407749936952	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999761080581179	WITHOUT_CLASSIFICATION	2.3891941882088754E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998356191567072	WITHOUT_CLASSIFICATION	1.64380843292834E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9994686283896743	WITHOUT_CLASSIFICATION	5.313716103256596E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9998516655284226	WITHOUT_CLASSIFICATION	1.4833447157729132E-4	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9997538316412857	WITHOUT_CLASSIFICATION	2.461683587142664E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999212124977421	WITHOUT_CLASSIFICATION	7.878750225787042E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9991072704343151	WITHOUT_CLASSIFICATION	8.927295656848916E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999681577585196	WITHOUT_CLASSIFICATION	3.18422414803982E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9998977935025819	WITHOUT_CLASSIFICATION	1.0220649741811592E-4	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9998639629584122	WITHOUT_CLASSIFICATION	1.3603704158792162E-4	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9997548131558888	WITHOUT_CLASSIFICATION	2.451868441112559E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999642713837275	WITHOUT_CLASSIFICATION	3.572861627247249E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9997784651296912	WITHOUT_CLASSIFICATION	2.215348703088432E-4	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999178802238058	WITHOUT_CLASSIFICATION	8.211977619424168E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.999819670112814	WITHOUT_CLASSIFICATION	1.8032988718608188E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9996031310016711	WITHOUT_CLASSIFICATION	3.9686899832887853E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9998913438212121	WITHOUT_CLASSIFICATION	1.086561787879138E-4	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9998179138780595	WITHOUT_CLASSIFICATION	1.8208612194048733E-4	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.999912224498476	WITHOUT_CLASSIFICATION	8.777550152400821E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999403871120629	WITHOUT_CLASSIFICATION	5.9612887936946265E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9998804804830889	WITHOUT_CLASSIFICATION	1.1951951691119946E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.999693352350989	WITHOUT_CLASSIFICATION	3.0664764901103676E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999304544955876	WITHOUT_CLASSIFICATION	6.954550441232464E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9998227967572058	WITHOUT_CLASSIFICATION	1.7720324279410333E-4	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9992988929016458	WITHOUT_CLASSIFICATION	7.011070983541562E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999896903686869	WITHOUT_CLASSIFICATION	1.0309631313098192E-4	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999182412560851	WITHOUT_CLASSIFICATION	8.175874391500163E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999913036328562	WITHOUT_CLASSIFICATION	8.696367143855771E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999274176578893	WITHOUT_CLASSIFICATION	7.258234211070511E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999530512537994	WITHOUT_CLASSIFICATION	4.694874620051588E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999587982794329	WITHOUT_CLASSIFICATION	4.120172056716953E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999208509790287	WITHOUT_CLASSIFICATION	7.91490209712014E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9987644226924677	WITHOUT_CLASSIFICATION	0.0012355773075323968	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999672273221729	WITHOUT_CLASSIFICATION	3.2772677827088455E-5	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999672273221729	WITHOUT_CLASSIFICATION	3.2772677827088455E-5	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.999334922490753	WITHOUT_CLASSIFICATION	6.650775092470297E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9995270777903966	WITHOUT_CLASSIFICATION	4.7292220960332425E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9970882665996306	WITHOUT_CLASSIFICATION	0.0029117334003693233	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9974080882550915	WITHOUT_CLASSIFICATION	0.002591911744908414	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9997886739618148	WITHOUT_CLASSIFICATION	2.113260381852162E-4	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9993453249978077	WITHOUT_CLASSIFICATION	6.546750021923165E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999519327771147	WITHOUT_CLASSIFICATION	4.8067222885298446E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9998896448490218	WITHOUT_CLASSIFICATION	1.1035515097818885E-4	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9979714494819565	WITHOUT_CLASSIFICATION	0.002028550518043529	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999207061507344	WITHOUT_CLASSIFICATION	7.929384926560043E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9998907172835538	WITHOUT_CLASSIFICATION	1.092827164461873E-4	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999195625819413	WITHOUT_CLASSIFICATION	8.043741805880483E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9994564993403002	WITHOUT_CLASSIFICATION	5.435006596997136E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9998458054951233	WITHOUT_CLASSIFICATION	1.5419450487675837E-4	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999027737339361	WITHOUT_CLASSIFICATION	9.722626606384734E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999747358745929	WITHOUT_CLASSIFICATION	2.5264125407096734E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9996686714441319	WITHOUT_CLASSIFICATION	3.313285558681692E-4	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9993274865478907	WITHOUT_CLASSIFICATION	6.725134521093547E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9998075818481864	WITHOUT_CLASSIFICATION	1.9241815181358742E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9981462424542404	WITHOUT_CLASSIFICATION	0.0018537575457594593	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999747358745929	WITHOUT_CLASSIFICATION	2.5264125407096734E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9903562277547143	WITHOUT_CLASSIFICATION	0.009643772245285688	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9903562277547143	WITHOUT_CLASSIFICATION	0.009643772245285688	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9998085579427906	WITHOUT_CLASSIFICATION	1.9144205720954654E-4	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.999750807871286	WITHOUT_CLASSIFICATION	2.491921287139735E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9998119190959386	WITHOUT_CLASSIFICATION	1.8808090406149188E-4	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999474145121368	WITHOUT_CLASSIFICATION	5.2585487863184576E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999628724170259	WITHOUT_CLASSIFICATION	3.712758297416111E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.7641313348992372	WITHOUT_CLASSIFICATION	0.23586866510076268	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9982818900898283	WITHOUT_CLASSIFICATION	0.0017181099101716787	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9980083706198595	WITHOUT_CLASSIFICATION	0.0019916293801405006	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999392536780446	WITHOUT_CLASSIFICATION	6.074632195530903E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9982626506597401	WITHOUT_CLASSIFICATION	0.0017373493402600187	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9991254339493376	WITHOUT_CLASSIFICATION	8.745660506623265E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9965276688394307	WITHOUT_CLASSIFICATION	0.0034723311605693386	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9970258816370746	WITHOUT_CLASSIFICATION	0.0029741183629254323	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9998520854636475	WITHOUT_CLASSIFICATION	1.4791453635242777E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9986907832937183	WITHOUT_CLASSIFICATION	0.0013092167062816772	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998685480189193	WITHOUT_CLASSIFICATION	1.3145198108060484E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9952978799317089	WITHOUT_CLASSIFICATION	0.00470212006829099	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.999895771319893	WITHOUT_CLASSIFICATION	1.0422868010691545E-4	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9998777328693392	WITHOUT_CLASSIFICATION	1.2226713066069663E-4	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9998994443803803	WITHOUT_CLASSIFICATION	1.0055561961980408E-4	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9995481305907458	WITHOUT_CLASSIFICATION	4.518694092542655E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9997536844815375	WITHOUT_CLASSIFICATION	2.4631551846251233E-4	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.999872465229223	WITHOUT_CLASSIFICATION	1.2753477077696754E-4	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9844606874879566	WITHOUT_CLASSIFICATION	0.015539312512043478	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9961649347488354	WITHOUT_CLASSIFICATION	0.003835065251164764	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9900092549724687	WITHOUT_CLASSIFICATION	0.009990745027531323	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9970354441838609	WITHOUT_CLASSIFICATION	0.002964555816139007	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9981489927632073	WITHOUT_CLASSIFICATION	0.0018510072367926378	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9981489927632073	WITHOUT_CLASSIFICATION	0.0018510072367926378	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9996000210607625	WITHOUT_CLASSIFICATION	3.9997893923745257E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9728762143792002	WITHOUT_CLASSIFICATION	0.027123785620799822	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9967275565646736	WITHOUT_CLASSIFICATION	0.0032724434353264345	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9732689980539954	WITHOUT_CLASSIFICATION	0.026731001946004664	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998738587795806	WITHOUT_CLASSIFICATION	1.2614122041943417E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9954732531498824	WITHOUT_CLASSIFICATION	0.0045267468501175865	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9967275565646736	WITHOUT_CLASSIFICATION	0.0032724434353264345	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.989844292866211	WITHOUT_CLASSIFICATION	0.01015570713378899	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9993884480040649	WITHOUT_CLASSIFICATION	6.115519959350182E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998996533168782	WITHOUT_CLASSIFICATION	1.0034668312174247E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999858051226692	WITHOUT_CLASSIFICATION	1.4194877330699581E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999399201159708	WITHOUT_CLASSIFICATION	6.0079884029222843E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999399201159708	WITHOUT_CLASSIFICATION	6.0079884029222843E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9903977483314265	WITHOUT_CLASSIFICATION	0.009602251668573664	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9743329481423594	WITHOUT_CLASSIFICATION	0.025667051857640667	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9980762524321787	WITHOUT_CLASSIFICATION	0.0019237475678213537	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9982210139857512	WITHOUT_CLASSIFICATION	0.00177898601424868	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9988439485891373	WITHOUT_CLASSIFICATION	0.0011560514108627607	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9995747931250956	WITHOUT_CLASSIFICATION	4.2520687490443836E-4	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9798511762928875	WITHOUT_CLASSIFICATION	0.020148823707112403	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9992814299145613	WITHOUT_CLASSIFICATION	7.185700854386915E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9993312995016331	WITHOUT_CLASSIFICATION	6.687004983669389E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9996521303964119	WITHOUT_CLASSIFICATION	3.478696035881331E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9994641513320524	WITHOUT_CLASSIFICATION	5.358486679476877E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9998991023246582	WITHOUT_CLASSIFICATION	1.0089767534180585E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999458310696924	WITHOUT_CLASSIFICATION	5.416893030764917E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9971216569733116	WITHOUT_CLASSIFICATION	0.0028783430266884295	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9991494047470127	WITHOUT_CLASSIFICATION	8.505952529872275E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999499201007663	WITHOUT_CLASSIFICATION	5.0079899233758514E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9992805877261021	WITHOUT_CLASSIFICATION	7.194122738978418E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9852029505638871	WITHOUT_CLASSIFICATION	0.014797049436112965	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9992867900400432	WITHOUT_CLASSIFICATION	7.132099599569007E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9852029505638871	WITHOUT_CLASSIFICATION	0.014797049436112965	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9997380589831801	WITHOUT_CLASSIFICATION	2.6194101681991245E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9992867900400432	WITHOUT_CLASSIFICATION	7.132099599569007E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9917274086194687	WITHOUT_CLASSIFICATION	0.00827259138053135	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9981156645228564	WITHOUT_CLASSIFICATION	0.001884335477143577	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9977030165029555	WITHOUT_CLASSIFICATION	0.0022969834970446423	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9996373045810041	WITHOUT_CLASSIFICATION	3.62695418995904E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999207791782271	WITHOUT_CLASSIFICATION	7.92208217728417E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998685480189193	WITHOUT_CLASSIFICATION	1.3145198108060484E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.999895771319893	WITHOUT_CLASSIFICATION	1.0422868010691545E-4	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9998777328693392	WITHOUT_CLASSIFICATION	1.2226713066069663E-4	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9998994443803803	WITHOUT_CLASSIFICATION	1.0055561961980408E-4	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9995481305907458	WITHOUT_CLASSIFICATION	4.518694092542655E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9997511634957412	WITHOUT_CLASSIFICATION	2.488365042587566E-4	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9993999567051252	WITHOUT_CLASSIFICATION	6.000432948749005E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9981489927632073	WITHOUT_CLASSIFICATION	0.0018510072367926378	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9981489927632073	WITHOUT_CLASSIFICATION	0.0018510072367926378	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9967275565646736	WITHOUT_CLASSIFICATION	0.0032724434353264345	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998738587795806	WITHOUT_CLASSIFICATION	1.2614122041943417E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9954732531498824	WITHOUT_CLASSIFICATION	0.0045267468501175865	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9967275565646736	WITHOUT_CLASSIFICATION	0.0032724434353264345	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.989844292866211	WITHOUT_CLASSIFICATION	0.01015570713378899	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9994926543006777	WITHOUT_CLASSIFICATION	5.073456993223878E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999182308338175	WITHOUT_CLASSIFICATION	8.176916618248198E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9995683364594516	WITHOUT_CLASSIFICATION	4.316635405484214E-4	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9954711092184843	WITHOUT_CLASSIFICATION	0.0045288907815157434	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9989242936841419	WITHOUT_CLASSIFICATION	0.0010757063158581576	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998569683146311	WITHOUT_CLASSIFICATION	1.4303168536883607E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9915606702946396	WITHOUT_CLASSIFICATION	0.008439329705360401	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998996533168782	WITHOUT_CLASSIFICATION	1.0034668312174247E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999399201159708	WITHOUT_CLASSIFICATION	6.0079884029222843E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999399201159708	WITHOUT_CLASSIFICATION	6.0079884029222843E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9592340798090548	WITHOUT_CLASSIFICATION	0.040765920190945194	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9970552807174092	WITHOUT_CLASSIFICATION	0.0029447192825908354	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998042208553297	WITHOUT_CLASSIFICATION	1.9577914467026184E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9980457263113941	WITHOUT_CLASSIFICATION	0.00195427368860587	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9998427405083948	WITHOUT_CLASSIFICATION	1.572594916051227E-4	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9925946213973139	WITHOUT_CLASSIFICATION	0.007405378602686079	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999356961559585	WITHOUT_CLASSIFICATION	6.43038440416381E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999390916837323	WITHOUT_CLASSIFICATION	6.0908316267611736E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999772316282172	WITHOUT_CLASSIFICATION	2.2768371782854678E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9987596526546667	WITHOUT_CLASSIFICATION	0.0012403473453332853	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9992419993682699	WITHOUT_CLASSIFICATION	7.580006317302292E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9998821259774461	WITHOUT_CLASSIFICATION	1.1787402255392065E-4	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999256839632257	WITHOUT_CLASSIFICATION	7.431603677428305E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999542352178248	WITHOUT_CLASSIFICATION	4.576478217530281E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999542352178248	WITHOUT_CLASSIFICATION	4.576478217530281E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999376633707061	WITHOUT_CLASSIFICATION	6.23366292938856E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9990024515646435	WITHOUT_CLASSIFICATION	9.975484353565217E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9997783049415951	WITHOUT_CLASSIFICATION	2.2169505840488176E-4	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9993088104951107	WITHOUT_CLASSIFICATION	6.91189504889224E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999925350914956	WITHOUT_CLASSIFICATION	7.464908504388868E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999476229173901	WITHOUT_CLASSIFICATION	5.237708260980205E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999925350914956	WITHOUT_CLASSIFICATION	7.464908504388868E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9988895714937813	WITHOUT_CLASSIFICATION	0.0011104285062187122	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9956884736033111	WITHOUT_CLASSIFICATION	0.004311526396688891	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.998955269701469	WITHOUT_CLASSIFICATION	0.001044730298531023	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9996367629325472	WITHOUT_CLASSIFICATION	3.632370674528858E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9996367629325472	WITHOUT_CLASSIFICATION	3.632370674528858E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9998903322559886	WITHOUT_CLASSIFICATION	1.0966774401141332E-4	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999148646498365	WITHOUT_CLASSIFICATION	8.513535016346108E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999170855334479	WITHOUT_CLASSIFICATION	8.291446655204976E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.5204495251120331	DEFECT	0.479550474887967	WITHOUT_CLASSIFICATION
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9991511933634895	WITHOUT_CLASSIFICATION	8.488066365105304E-4	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996299687876968	WITHOUT_CLASSIFICATION	3.700312123031426E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996299687876968	WITHOUT_CLASSIFICATION	3.700312123031426E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9957413051153265	WITHOUT_CLASSIFICATION	0.00425869488467341	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999972333367927	WITHOUT_CLASSIFICATION	2.7666632073032107E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999972333367927	WITHOUT_CLASSIFICATION	2.7666632073032107E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999114362426078	WITHOUT_CLASSIFICATION	8.856375739221387E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9997953682948465	WITHOUT_CLASSIFICATION	2.0463170515356224E-4	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999415069254861	WITHOUT_CLASSIFICATION	5.8493074513867824E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9995679650097968	WITHOUT_CLASSIFICATION	4.320349902031607E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9998338177235426	WITHOUT_CLASSIFICATION	1.6618227645745796E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999925350914956	WITHOUT_CLASSIFICATION	7.464908504388868E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.999200945288223	WITHOUT_CLASSIFICATION	7.990547117769655E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999888817978693	WITHOUT_CLASSIFICATION	1.111820213068544E-5	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9977809924186524	WITHOUT_CLASSIFICATION	0.0022190075813476465	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.999200945288223	WITHOUT_CLASSIFICATION	7.990547117769655E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999894132984135	WITHOUT_CLASSIFICATION	1.058670158641605E-5	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999922061707333	WITHOUT_CLASSIFICATION	7.79382926680372E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9998845209016124	WITHOUT_CLASSIFICATION	1.154790983876116E-4	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9995496490551986	WITHOUT_CLASSIFICATION	4.503509448013133E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9916060926527387	WITHOUT_CLASSIFICATION	0.008393907347261309	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9997636369061587	WITHOUT_CLASSIFICATION	2.363630938412755E-4	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999767732513813	WITHOUT_CLASSIFICATION	2.3226748618616944E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999978442157515	WITHOUT_CLASSIFICATION	2.155784248507403E-5	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9989279266330106	WITHOUT_CLASSIFICATION	0.0010720733669895223	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998942732312632	WITHOUT_CLASSIFICATION	1.057267687367934E-4	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.992604998725996	WITHOUT_CLASSIFICATION	0.007395001274004015	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9998929860170741	WITHOUT_CLASSIFICATION	1.07013982925823E-4	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9991929663357486	WITHOUT_CLASSIFICATION	8.070336642513067E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9997109017988682	WITHOUT_CLASSIFICATION	2.890982011317676E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.999786151435038	WITHOUT_CLASSIFICATION	2.1384856496196037E-4	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999905049163507	WITHOUT_CLASSIFICATION	9.495083649316635E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999587201421725	WITHOUT_CLASSIFICATION	4.127985782761226E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9948722788497117	WITHOUT_CLASSIFICATION	0.00512772115028828	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9997775023151619	WITHOUT_CLASSIFICATION	2.2249768483805944E-4	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9996909287307307	WITHOUT_CLASSIFICATION	3.090712692692728E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998126677700121	WITHOUT_CLASSIFICATION	1.873322299879942E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.999972181343168	WITHOUT_CLASSIFICATION	2.7818656832026706E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.999920487086913	WITHOUT_CLASSIFICATION	7.951291308712398E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9992495914937769	WITHOUT_CLASSIFICATION	7.504085062230771E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9956214877614292	WITHOUT_CLASSIFICATION	0.004378512238570683	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999152450758865	WITHOUT_CLASSIFICATION	8.475492411354829E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999089429745277	WITHOUT_CLASSIFICATION	9.105702547228889E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999648864815612	WITHOUT_CLASSIFICATION	3.511351843877006E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999691205861485	WITHOUT_CLASSIFICATION	3.087941385152533E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9998586604291818	WITHOUT_CLASSIFICATION	1.4133957081827094E-4	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998977767089405	WITHOUT_CLASSIFICATION	1.022232910594653E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999423958851559	WITHOUT_CLASSIFICATION	5.7604114844069956E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999334082859307	WITHOUT_CLASSIFICATION	6.659171406934799E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999608087399428	WITHOUT_CLASSIFICATION	3.919126005719851E-5	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999318084114828	WITHOUT_CLASSIFICATION	6.819158851731393E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9987700596880141	WITHOUT_CLASSIFICATION	0.0012299403119858602	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999844497079828	WITHOUT_CLASSIFICATION	1.5550292017192462E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9995867327183889	WITHOUT_CLASSIFICATION	4.1326728161117566E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998480978674776	WITHOUT_CLASSIFICATION	1.5190213252247738E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9996806450583346	WITHOUT_CLASSIFICATION	3.1935494166545855E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9985535622696398	WITHOUT_CLASSIFICATION	0.0014464377303602851	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9888988435747673	WITHOUT_CLASSIFICATION	0.011101156425232793	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9998999446285215	WITHOUT_CLASSIFICATION	1.0005537147847452E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9998999446285215	WITHOUT_CLASSIFICATION	1.0005537147847452E-4	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999199098862448	WITHOUT_CLASSIFICATION	8.009011375518709E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999199098862448	WITHOUT_CLASSIFICATION	8.009011375518709E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999199098862448	WITHOUT_CLASSIFICATION	8.009011375518709E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999519542709591	WITHOUT_CLASSIFICATION	4.804572904086834E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999519542709591	WITHOUT_CLASSIFICATION	4.804572904086834E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998341838305251	WITHOUT_CLASSIFICATION	1.6581616947476476E-4	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998341838305251	WITHOUT_CLASSIFICATION	1.6581616947476476E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.99900339333251	WITHOUT_CLASSIFICATION	9.966066674899896E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9963245799542604	WITHOUT_CLASSIFICATION	0.00367542004573956	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998667645299629	WITHOUT_CLASSIFICATION	1.3323547003713787E-4	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9998667645299629	WITHOUT_CLASSIFICATION	1.3323547003713787E-4	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9985602396925065	WITHOUT_CLASSIFICATION	0.0014397603074934897	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999596924860724	WITHOUT_CLASSIFICATION	4.030751392757979E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9990197892876272	WITHOUT_CLASSIFICATION	9.802107123727092E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9997690778977022	WITHOUT_CLASSIFICATION	2.3092210229776756E-4	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9982581772974061	WITHOUT_CLASSIFICATION	0.0017418227025939607	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999774879684863	WITHOUT_CLASSIFICATION	2.251203151364163E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999357392499663	WITHOUT_CLASSIFICATION	6.426075003381388E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999158423273278	WITHOUT_CLASSIFICATION	8.415767267218513E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9993059736456212	WITHOUT_CLASSIFICATION	6.940263543788049E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999672273221729	WITHOUT_CLASSIFICATION	3.2772677827088455E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999254727632166	WITHOUT_CLASSIFICATION	7.452723678336651E-5	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999731500575137	WITHOUT_CLASSIFICATION	2.684994248613469E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9975834180713441	WITHOUT_CLASSIFICATION	0.002416581928655933	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9998612856550598	WITHOUT_CLASSIFICATION	1.3871434494012343E-4	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999320438406941	WITHOUT_CLASSIFICATION	6.795615930586376E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999779514741023	WITHOUT_CLASSIFICATION	2.204852589773692E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9995045151796994	WITHOUT_CLASSIFICATION	4.954848203006836E-4	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9992084399996348	WITHOUT_CLASSIFICATION	7.915600003650893E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999643412168028	WITHOUT_CLASSIFICATION	3.565878319718449E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998513895879053	WITHOUT_CLASSIFICATION	1.486104120946265E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998513895879053	WITHOUT_CLASSIFICATION	1.486104120946265E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998513895879053	WITHOUT_CLASSIFICATION	1.486104120946265E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997283291435192	WITHOUT_CLASSIFICATION	2.7167085648086394E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997283291435192	WITHOUT_CLASSIFICATION	2.7167085648086394E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997283291435192	WITHOUT_CLASSIFICATION	2.7167085648086394E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997283291435192	WITHOUT_CLASSIFICATION	2.7167085648086394E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997283291435192	WITHOUT_CLASSIFICATION	2.7167085648086394E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9996074744124255	WITHOUT_CLASSIFICATION	3.9252558757445156E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9983390845841379	WITHOUT_CLASSIFICATION	0.0016609154158620865	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.999977730068811	WITHOUT_CLASSIFICATION	2.2269931189047413E-5	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9998408576988927	WITHOUT_CLASSIFICATION	1.591423011071878E-4	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9994658430817844	WITHOUT_CLASSIFICATION	5.341569182155339E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9998302284589621	WITHOUT_CLASSIFICATION	1.6977154103800057E-4	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9971258749794013	WITHOUT_CLASSIFICATION	0.002874125020598599	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9995777470511431	WITHOUT_CLASSIFICATION	4.2225294885694047E-4	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999632964412287	WITHOUT_CLASSIFICATION	3.670355877121296E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999883229589108	WITHOUT_CLASSIFICATION	1.1677041089164354E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999815660449295	WITHOUT_CLASSIFICATION	1.8433955070458054E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9998053139359444	WITHOUT_CLASSIFICATION	1.9468606405549882E-4	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.8969517529296696	WITHOUT_CLASSIFICATION	0.1030482470703304	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9997822816221217	WITHOUT_CLASSIFICATION	2.177183778783383E-4	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9996003091889339	WITHOUT_CLASSIFICATION	3.996908110659475E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999784581189493	WITHOUT_CLASSIFICATION	2.1541881050735918E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998616223458148	WITHOUT_CLASSIFICATION	1.3837765418523197E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999147580301062	WITHOUT_CLASSIFICATION	8.5241969893803E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999476229173901	WITHOUT_CLASSIFICATION	5.237708260980205E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9983843011452114	WITHOUT_CLASSIFICATION	0.0016156988547886691	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9813600547579122	WITHOUT_CLASSIFICATION	0.018639945242087813	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9989352230999289	WITHOUT_CLASSIFICATION	0.0010647769000710868	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999405146788813	WITHOUT_CLASSIFICATION	5.948532111857775E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999947067896584	WITHOUT_CLASSIFICATION	5.293210341588703E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9998926980919579	WITHOUT_CLASSIFICATION	1.0730190804218098E-4	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9993881632503547	WITHOUT_CLASSIFICATION	6.118367496453E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.999973846614278	WITHOUT_CLASSIFICATION	2.6153385721994386E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9998909479516453	WITHOUT_CLASSIFICATION	1.0905204835453534E-4	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9995216288904133	WITHOUT_CLASSIFICATION	4.78371109586682E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999625700401835	WITHOUT_CLASSIFICATION	3.742995981648875E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9998671666438909	WITHOUT_CLASSIFICATION	1.328333561091386E-4	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999561467866175	WITHOUT_CLASSIFICATION	4.3853213382484454E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9997602299576239	WITHOUT_CLASSIFICATION	2.3977004237612593E-4	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9996659317098342	WITHOUT_CLASSIFICATION	3.3406829016572335E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999580872605114	WITHOUT_CLASSIFICATION	4.191273948860197E-5	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999433273680881	WITHOUT_CLASSIFICATION	5.667263191204676E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997650775227369	WITHOUT_CLASSIFICATION	2.3492247726319182E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9995185575399681	WITHOUT_CLASSIFICATION	4.814424600318494E-4	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.999992718757065	WITHOUT_CLASSIFICATION	7.281242935088557E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9985048753326833	WITHOUT_CLASSIFICATION	0.0014951246673166512	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9985048753326833	WITHOUT_CLASSIFICATION	0.0014951246673166512	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9997336112907916	WITHOUT_CLASSIFICATION	2.6638870920833567E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9997336112907916	WITHOUT_CLASSIFICATION	2.6638870920833567E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999716328342836	WITHOUT_CLASSIFICATION	2.8367165716395014E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999716328342836	WITHOUT_CLASSIFICATION	2.8367165716395014E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9998877582757248	WITHOUT_CLASSIFICATION	1.1224172427510912E-4	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999702321049448	WITHOUT_CLASSIFICATION	2.9767895055102312E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999061442084024	WITHOUT_CLASSIFICATION	9.385579159758901E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9993138095264346	WITHOUT_CLASSIFICATION	6.86190473565503E-4	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999533864117083	WITHOUT_CLASSIFICATION	4.661358829164792E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9975784928493046	WITHOUT_CLASSIFICATION	0.002421507150695351	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.999921217727191	WITHOUT_CLASSIFICATION	7.878227280904573E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999908522078761	WITHOUT_CLASSIFICATION	9.147792123899799E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9991660947422052	WITHOUT_CLASSIFICATION	8.339052577947906E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9992253735275451	WITHOUT_CLASSIFICATION	7.746264724548649E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9996279851175609	WITHOUT_CLASSIFICATION	3.720148824390628E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.999817350439135	WITHOUT_CLASSIFICATION	1.826495608649475E-4	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9957074747323844	WITHOUT_CLASSIFICATION	0.00429252526761564	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9996335661050638	WITHOUT_CLASSIFICATION	3.6643389493620814E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9990004219409235	WITHOUT_CLASSIFICATION	9.99578059076374E-4	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998339748512307	WITHOUT_CLASSIFICATION	1.6602514876921495E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9996343773303892	WITHOUT_CLASSIFICATION	3.656226696108352E-4	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9982409264731512	WITHOUT_CLASSIFICATION	0.00175907352684891	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9995834526697073	WITHOUT_CLASSIFICATION	4.1654733029280414E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9970033031875618	WITHOUT_CLASSIFICATION	0.0029966968124381793	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9998895830257161	WITHOUT_CLASSIFICATION	1.1041697428402816E-4	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999533005105856	WITHOUT_CLASSIFICATION	4.669948941431318E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999548740145374	WITHOUT_CLASSIFICATION	4.5125985462572363E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.999964172816152	WITHOUT_CLASSIFICATION	3.582718384802367E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9992433892851302	WITHOUT_CLASSIFICATION	7.566107148697747E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9992433892851302	WITHOUT_CLASSIFICATION	7.566107148697747E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998942732312632	WITHOUT_CLASSIFICATION	1.057267687367934E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998942732312632	WITHOUT_CLASSIFICATION	1.057267687367934E-4	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999905476984564	WITHOUT_CLASSIFICATION	9.45230154356158E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9989068398133594	WITHOUT_CLASSIFICATION	0.001093160186640691	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999211953343561	WITHOUT_CLASSIFICATION	7.880466564389496E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999225823138205	WITHOUT_CLASSIFICATION	7.74176861795792E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9995426290876056	WITHOUT_CLASSIFICATION	4.573709123943631E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9992433892851302	WITHOUT_CLASSIFICATION	7.566107148697747E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9992433892851302	WITHOUT_CLASSIFICATION	7.566107148697747E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9992433892851302	WITHOUT_CLASSIFICATION	7.566107148697747E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998942732312632	WITHOUT_CLASSIFICATION	1.057267687367934E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9998942732312632	WITHOUT_CLASSIFICATION	1.057267687367934E-4	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9997929025418006	WITHOUT_CLASSIFICATION	2.0709745819933543E-4	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999561484009104	WITHOUT_CLASSIFICATION	4.3851599089618806E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999706931274884	WITHOUT_CLASSIFICATION	2.9306872511532974E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9974555833797066	WITHOUT_CLASSIFICATION	0.00254441662029344	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999499327170536	WITHOUT_CLASSIFICATION	5.006728294635952E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999093637929569	WITHOUT_CLASSIFICATION	9.063620704303394E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999362347042686	WITHOUT_CLASSIFICATION	6.376529573130934E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9994835828443875	WITHOUT_CLASSIFICATION	5.164171556123502E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999780522141729	WITHOUT_CLASSIFICATION	2.194778582716216E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999388796541777	WITHOUT_CLASSIFICATION	6.112034582236446E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9998355745914997	WITHOUT_CLASSIFICATION	1.6442540850026015E-4	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9996914608854784	WITHOUT_CLASSIFICATION	3.085391145216062E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999363397668002	WITHOUT_CLASSIFICATION	6.36602331997531E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9992794675235388	WITHOUT_CLASSIFICATION	7.205324764611494E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9997783895021033	WITHOUT_CLASSIFICATION	2.2161049789675945E-4	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9813671943721533	WITHOUT_CLASSIFICATION	0.01863280562784673	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998934898862933	WITHOUT_CLASSIFICATION	1.0651011370659702E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998934898862933	WITHOUT_CLASSIFICATION	1.0651011370659702E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9998934898862933	WITHOUT_CLASSIFICATION	1.0651011370659702E-4	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9935192471980884	WITHOUT_CLASSIFICATION	0.006480752801911632	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9935192471980884	WITHOUT_CLASSIFICATION	0.006480752801911632	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999673671471281	WITHOUT_CLASSIFICATION	3.263285287193908E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9996562926479912	WITHOUT_CLASSIFICATION	3.4370735200879154E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9997222169501806	WITHOUT_CLASSIFICATION	2.7778304981941783E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9997222389066083	WITHOUT_CLASSIFICATION	2.777610933917512E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999178361093579	WITHOUT_CLASSIFICATION	8.216389064207765E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9997432840941427	WITHOUT_CLASSIFICATION	2.5671590585734315E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9998229185594831	WITHOUT_CLASSIFICATION	1.7708144051695532E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998229325577002	WITHOUT_CLASSIFICATION	1.770674422998011E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999476257888738	WITHOUT_CLASSIFICATION	5.2374211126188855E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999147512906109	WITHOUT_CLASSIFICATION	8.524870938914582E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999092992648526	WITHOUT_CLASSIFICATION	9.070073514741057E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999092734846575	WITHOUT_CLASSIFICATION	9.072651534255738E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999134474278779	WITHOUT_CLASSIFICATION	8.655257212205156E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9998898373951801	WITHOUT_CLASSIFICATION	1.1016260481991958E-4	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999226315390163	WITHOUT_CLASSIFICATION	7.736846098374423E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999014560827215	WITHOUT_CLASSIFICATION	9.854391727844344E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.999802810552863	WITHOUT_CLASSIFICATION	1.9718944713707556E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9994660750727357	WITHOUT_CLASSIFICATION	5.339249272643902E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9997023434567336	WITHOUT_CLASSIFICATION	2.976565432664871E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9729120886558719	WITHOUT_CLASSIFICATION	0.02708791134412816	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999189595632301	WITHOUT_CLASSIFICATION	8.104043676993203E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9998819841112072	WITHOUT_CLASSIFICATION	1.1801588879282456E-4	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999172144977262	WITHOUT_CLASSIFICATION	8.278550227376464E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999264000843143	WITHOUT_CLASSIFICATION	7.359991568562335E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9998911587489963	WITHOUT_CLASSIFICATION	1.0884125100371774E-4	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999904177345337	WITHOUT_CLASSIFICATION	9.582265466317215E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9994418641909092	WITHOUT_CLASSIFICATION	5.581358090907768E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9857949404768808	WITHOUT_CLASSIFICATION	0.014205059523119233	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9996560966700254	WITHOUT_CLASSIFICATION	3.439033299746481E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9982693183337119	WITHOUT_CLASSIFICATION	0.0017306816662880625	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9992930755421391	WITHOUT_CLASSIFICATION	7.069244578609607E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9991749441567104	WITHOUT_CLASSIFICATION	8.250558432896011E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9990673758357489	WITHOUT_CLASSIFICATION	9.326241642510283E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.999915716661613	WITHOUT_CLASSIFICATION	8.428333838688352E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.999937644887687	WITHOUT_CLASSIFICATION	6.235511231306343E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.999878688111775	WITHOUT_CLASSIFICATION	1.2131188822487174E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9724824846693033	WITHOUT_CLASSIFICATION	0.027517515330696594	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.999767948561402	WITHOUT_CLASSIFICATION	2.320514385980751E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9941157907805301	WITHOUT_CLASSIFICATION	0.0058842092194699245	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.999358345733193	WITHOUT_CLASSIFICATION	6.416542668068972E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9992928043501403	WITHOUT_CLASSIFICATION	7.071956498597145E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999728301587341	WITHOUT_CLASSIFICATION	2.7169841265857273E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9973557593559587	WITHOUT_CLASSIFICATION	0.0026442406440413614	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.998423070763558	WITHOUT_CLASSIFICATION	0.0015769292364419727	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.998423070763558	WITHOUT_CLASSIFICATION	0.0015769292364419727	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.999049138528202	WITHOUT_CLASSIFICATION	9.508614717980558E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9998857789153746	WITHOUT_CLASSIFICATION	1.1422108462550547E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9973557593559587	WITHOUT_CLASSIFICATION	0.0026442406440413614	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9994472261596308	WITHOUT_CLASSIFICATION	5.527738403691971E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9993014146144459	WITHOUT_CLASSIFICATION	6.985853855540675E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9998639570452841	WITHOUT_CLASSIFICATION	1.360429547159582E-4	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999433899947606	WITHOUT_CLASSIFICATION	5.661000523947299E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9997716007833888	WITHOUT_CLASSIFICATION	2.2839921661125097E-4	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999819018949236	WITHOUT_CLASSIFICATION	1.809810507634401E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9998823229653372	WITHOUT_CLASSIFICATION	1.176770346628975E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998866395213406	WITHOUT_CLASSIFICATION	1.1336047865940302E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998866395213406	WITHOUT_CLASSIFICATION	1.1336047865940302E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998866395213406	WITHOUT_CLASSIFICATION	1.1336047865940302E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9998866395213406	WITHOUT_CLASSIFICATION	1.1336047865940302E-4	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999689190534884	WITHOUT_CLASSIFICATION	3.108094651158817E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999679617032009	WITHOUT_CLASSIFICATION	3.2038296799021944E-5	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999713259827584	WITHOUT_CLASSIFICATION	2.8674017241615376E-5	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9992703577603154	WITHOUT_CLASSIFICATION	7.296422396845334E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.999440009785945	WITHOUT_CLASSIFICATION	5.599902140549841E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9961161632359152	WITHOUT_CLASSIFICATION	0.0038838367640847958	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9995439971308898	WITHOUT_CLASSIFICATION	4.5600286911025274E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999662342678407	WITHOUT_CLASSIFICATION	3.376573215927271E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999662342678407	WITHOUT_CLASSIFICATION	3.376573215927271E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9998819034908795	WITHOUT_CLASSIFICATION	1.1809650912051703E-4	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.999790556358942	WITHOUT_CLASSIFICATION	2.094436410580551E-4	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999886802034474	WITHOUT_CLASSIFICATION	1.1319796552598354E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9946077829770541	WITHOUT_CLASSIFICATION	0.005392217022945817	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9946077829770541	WITHOUT_CLASSIFICATION	0.005392217022945817	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9978939747334248	WITHOUT_CLASSIFICATION	0.002106025266575184	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9998199687507343	WITHOUT_CLASSIFICATION	1.8003124926576887E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9998199687507343	WITHOUT_CLASSIFICATION	1.8003124926576887E-4	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9920428431998297	WITHOUT_CLASSIFICATION	0.007957156800170282	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999818350495525	WITHOUT_CLASSIFICATION	1.8164950447519042E-5	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999753985541762	WITHOUT_CLASSIFICATION	2.4601445823798272E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.998608397678383	WITHOUT_CLASSIFICATION	0.0013916023216169193	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9953426583278205	WITHOUT_CLASSIFICATION	0.004657341672179478	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999845161239977	WITHOUT_CLASSIFICATION	1.5483876002314603E-5	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9970112422414648	WITHOUT_CLASSIFICATION	0.0029887577585352414	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999674395107057	WITHOUT_CLASSIFICATION	3.256048929431316E-5	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999062104356017	WITHOUT_CLASSIFICATION	9.378956439831031E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999385600258381	WITHOUT_CLASSIFICATION	6.143997416187072E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9792532122239708	WITHOUT_CLASSIFICATION	0.02074678777602923	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9892797251081235	WITHOUT_CLASSIFICATION	0.010720274891876548	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999292799779603	WITHOUT_CLASSIFICATION	7.072002203968945E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9927077213975783	WITHOUT_CLASSIFICATION	0.007292278602421703	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.999951847994317	WITHOUT_CLASSIFICATION	4.8152005682988615E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.999896570166933	WITHOUT_CLASSIFICATION	1.0342983306705345E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9995011402906335	WITHOUT_CLASSIFICATION	4.988597093665947E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9982785642144871	WITHOUT_CLASSIFICATION	0.0017214357855129675	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9977946724914993	WITHOUT_CLASSIFICATION	0.0022053275085007072	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9834204247056325	WITHOUT_CLASSIFICATION	0.016579575294367464	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9994565507548097	WITHOUT_CLASSIFICATION	5.434492451903849E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.8843070332779919	WITHOUT_CLASSIFICATION	0.11569296672200811	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999421943930725	WITHOUT_CLASSIFICATION	5.7805606927511205E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9998499911899666	WITHOUT_CLASSIFICATION	1.500088100334607E-4	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9994536156468706	WITHOUT_CLASSIFICATION	5.463843531293861E-4	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9997469787993973	WITHOUT_CLASSIFICATION	2.530212006026626E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9974935607753787	WITHOUT_CLASSIFICATION	0.0025064392246214096	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.99972120990004	WITHOUT_CLASSIFICATION	2.7879009996003965E-4	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.6735643629716969	WITHOUT_CLASSIFICATION	0.3264356370283032	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9992316380755272	WITHOUT_CLASSIFICATION	7.683619244728337E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9997665020366608	WITHOUT_CLASSIFICATION	2.3349796333915028E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9993149341572358	WITHOUT_CLASSIFICATION	6.850658427642914E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9998860400624948	WITHOUT_CLASSIFICATION	1.1395993750529991E-4	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9994500164079074	WITHOUT_CLASSIFICATION	5.499835920925487E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9993149341572358	WITHOUT_CLASSIFICATION	6.850658427642914E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9998860400624948	WITHOUT_CLASSIFICATION	1.1395993750529991E-4	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9996801033700563	WITHOUT_CLASSIFICATION	3.1989662994364034E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999898223115307	WITHOUT_CLASSIFICATION	1.0177688469300407E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999898223115307	WITHOUT_CLASSIFICATION	1.0177688469300407E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998314622376206	WITHOUT_CLASSIFICATION	1.6853776237936714E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994578404614473	WITHOUT_CLASSIFICATION	5.421595385527712E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999578169708	WITHOUT_CLASSIFICATION	4.2183029200011745E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9998684208468034	WITHOUT_CLASSIFICATION	1.315791531966342E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9967095965434694	WITHOUT_CLASSIFICATION	0.0032904034565305997	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9987292011414431	WITHOUT_CLASSIFICATION	0.001270798858556869	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9997196390382648	WITHOUT_CLASSIFICATION	2.803609617353005E-4	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9997618568965912	WITHOUT_CLASSIFICATION	2.3814310340882698E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999654068414048	WITHOUT_CLASSIFICATION	3.459315859523116E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9992735075611333	WITHOUT_CLASSIFICATION	7.264924388665916E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9991983812814081	WITHOUT_CLASSIFICATION	8.016187185918294E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9997143318451094	WITHOUT_CLASSIFICATION	2.856681548906399E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.999506904552545	WITHOUT_CLASSIFICATION	4.930954474550908E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999713595784991	WITHOUT_CLASSIFICATION	2.8640421500933457E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999713595784991	WITHOUT_CLASSIFICATION	2.8640421500933457E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999255421038817	WITHOUT_CLASSIFICATION	7.445789611828321E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999255421038817	WITHOUT_CLASSIFICATION	7.445789611828321E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9997963647287064	WITHOUT_CLASSIFICATION	2.0363527129370676E-4	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998073234420819	WITHOUT_CLASSIFICATION	1.926765579179989E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9998380216143993	WITHOUT_CLASSIFICATION	1.619783856007505E-4	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999578169708	WITHOUT_CLASSIFICATION	4.2183029200011745E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9998684208468034	WITHOUT_CLASSIFICATION	1.315791531966342E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999654068414048	WITHOUT_CLASSIFICATION	3.459315859523116E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9992735075611333	WITHOUT_CLASSIFICATION	7.264924388665916E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999137089229286	WITHOUT_CLASSIFICATION	8.629107707142199E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9997518572860375	WITHOUT_CLASSIFICATION	2.4814271396250383E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999096364102089	WITHOUT_CLASSIFICATION	9.036358979109208E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998284698013243	WITHOUT_CLASSIFICATION	1.715301986756852E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999330396344833	WITHOUT_CLASSIFICATION	6.696036551664246E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9995454185091545	WITHOUT_CLASSIFICATION	4.545814908455608E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9998917967517531	WITHOUT_CLASSIFICATION	1.0820324824689505E-4	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9998241451100488	WITHOUT_CLASSIFICATION	1.7585488995116238E-4	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9997991826213122	WITHOUT_CLASSIFICATION	2.0081737868782342E-4	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9923683187884464	WITHOUT_CLASSIFICATION	0.007631681211553464	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.999647656382974	WITHOUT_CLASSIFICATION	3.523436170260095E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999822002031802	WITHOUT_CLASSIFICATION	1.7799796819829967E-5	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.999799260132494	WITHOUT_CLASSIFICATION	2.0073986750590583E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999783486177817	WITHOUT_CLASSIFICATION	2.165138221825011E-5	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9998013523984848	WITHOUT_CLASSIFICATION	1.9864760151513757E-4	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998879466958848	WITHOUT_CLASSIFICATION	1.1205330411521627E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9996372350722642	WITHOUT_CLASSIFICATION	3.627649277358658E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998785368418801	WITHOUT_CLASSIFICATION	1.2146315811985174E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9983548511131212	WITHOUT_CLASSIFICATION	0.001645148886878707	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999426977448118	WITHOUT_CLASSIFICATION	5.730225518823514E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9994921192431013	WITHOUT_CLASSIFICATION	5.078807568986161E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9994921192431013	WITHOUT_CLASSIFICATION	5.078807568986161E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.999434055124204	WITHOUT_CLASSIFICATION	5.65944875796054E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999547756102307	WITHOUT_CLASSIFICATION	4.52243897693119E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999312700619154	WITHOUT_CLASSIFICATION	6.872993808465976E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9990744344722541	WITHOUT_CLASSIFICATION	9.255655277458175E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9994177334190003	WITHOUT_CLASSIFICATION	5.82266580999729E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9982955208618163	WITHOUT_CLASSIFICATION	0.001704479138183787	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9997840762669985	WITHOUT_CLASSIFICATION	2.1592373300158155E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9995095740089469	WITHOUT_CLASSIFICATION	4.904259910531519E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999847641718627	WITHOUT_CLASSIFICATION	1.5235828137309803E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.999652590718285	WITHOUT_CLASSIFICATION	3.474092817150559E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9993483533641621	WITHOUT_CLASSIFICATION	6.516466358379804E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9997290293610427	WITHOUT_CLASSIFICATION	2.7097063895732974E-4	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9983713549138049	WITHOUT_CLASSIFICATION	0.0016286450861951144	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9998805815908978	WITHOUT_CLASSIFICATION	1.1941840910225526E-4	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999625797175461	WITHOUT_CLASSIFICATION	3.742028245390039E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9956511181923743	WITHOUT_CLASSIFICATION	0.004348881807625732	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.999883335055555	WITHOUT_CLASSIFICATION	1.1666494444501841E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999432097112364	WITHOUT_CLASSIFICATION	5.679028876360196E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998044111043773	WITHOUT_CLASSIFICATION	1.955888956226421E-4	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999820727661797	WITHOUT_CLASSIFICATION	1.7927233820356397E-5	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999495405623923	WITHOUT_CLASSIFICATION	5.0459437607784264E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9997641318212233	WITHOUT_CLASSIFICATION	2.358681787767317E-4	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9996204060353708	WITHOUT_CLASSIFICATION	3.795939646291126E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999818709867965	WITHOUT_CLASSIFICATION	1.812901320351095E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999159318470967	WITHOUT_CLASSIFICATION	8.406815290335492E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999159318470967	WITHOUT_CLASSIFICATION	8.406815290335492E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9998939971981207	WITHOUT_CLASSIFICATION	1.0600280187927357E-4	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9998939971981207	WITHOUT_CLASSIFICATION	1.0600280187927357E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9998712853574142	WITHOUT_CLASSIFICATION	1.287146425857586E-4	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999694344576772	WITHOUT_CLASSIFICATION	3.0565542322829896E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999886330413255	WITHOUT_CLASSIFICATION	1.1366958674505147E-4	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9997169743351344	WITHOUT_CLASSIFICATION	2.8302566486570384E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999432097112364	WITHOUT_CLASSIFICATION	5.679028876360196E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999432097112364	WITHOUT_CLASSIFICATION	5.679028876360196E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999432097112364	WITHOUT_CLASSIFICATION	5.679028876360196E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998044111043773	WITHOUT_CLASSIFICATION	1.955888956226421E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999886330413255	WITHOUT_CLASSIFICATION	1.1366958674505147E-4	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.999886330413255	WITHOUT_CLASSIFICATION	1.1366958674505147E-4	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9998678190250119	WITHOUT_CLASSIFICATION	1.3218097498814154E-4	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999732289625576	WITHOUT_CLASSIFICATION	2.6771037442493545E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999943975569044	WITHOUT_CLASSIFICATION	5.6024430956025644E-5	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.8779326881464097	WITHOUT_CLASSIFICATION	0.12206731185359034	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999530616322088	WITHOUT_CLASSIFICATION	4.693836779128636E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9998527278050179	WITHOUT_CLASSIFICATION	1.472721949820139E-4	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9998527278050179	WITHOUT_CLASSIFICATION	1.472721949820139E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9995868928854416	WITHOUT_CLASSIFICATION	4.131071145585078E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9997962559021878	WITHOUT_CLASSIFICATION	2.0374409781229657E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9997962559021878	WITHOUT_CLASSIFICATION	2.0374409781229657E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9997962559021878	WITHOUT_CLASSIFICATION	2.0374409781229657E-4	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999588074794731	WITHOUT_CLASSIFICATION	4.11925205270134E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999169480402231	WITHOUT_CLASSIFICATION	8.305195977692214E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998044111043773	WITHOUT_CLASSIFICATION	1.955888956226421E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9998232310017483	WITHOUT_CLASSIFICATION	1.767689982515843E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9997962559021878	WITHOUT_CLASSIFICATION	2.0374409781229657E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9995868928854416	WITHOUT_CLASSIFICATION	4.131071145585078E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999066241584228	WITHOUT_CLASSIFICATION	9.337584157718501E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9998620790810346	WITHOUT_CLASSIFICATION	1.3792091896532957E-4	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999235161431755	WITHOUT_CLASSIFICATION	7.648385682445048E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9998020457692232	WITHOUT_CLASSIFICATION	1.9795423077677545E-4	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998610422110913	WITHOUT_CLASSIFICATION	1.3895778890871666E-4	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9982870471869393	WITHOUT_CLASSIFICATION	0.0017129528130607641	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999856925469641	WITHOUT_CLASSIFICATION	1.430745303582621E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9996598239684737	WITHOUT_CLASSIFICATION	3.401760315262438E-4	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9998878009163066	WITHOUT_CLASSIFICATION	1.1219908369339168E-4	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9997058364705186	WITHOUT_CLASSIFICATION	2.941635294813533E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9997055590777283	WITHOUT_CLASSIFICATION	2.944409222716651E-4	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999829662471283	WITHOUT_CLASSIFICATION	1.7033752871687537E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9998534496475232	WITHOUT_CLASSIFICATION	1.4655035247675217E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999606410679576	WITHOUT_CLASSIFICATION	3.935893204237321E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9997896690620347	WITHOUT_CLASSIFICATION	2.1033093796516254E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999731068888041	WITHOUT_CLASSIFICATION	2.6893111195840033E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.999839525208456	WITHOUT_CLASSIFICATION	1.604747915439411E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9997297185117452	WITHOUT_CLASSIFICATION	2.702814882548115E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999547896041412	WITHOUT_CLASSIFICATION	4.521039585890489E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999799764089373	WITHOUT_CLASSIFICATION	2.0023591062699545E-5	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999061783531592	WITHOUT_CLASSIFICATION	9.382164684073676E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9997630846146902	WITHOUT_CLASSIFICATION	2.3691538530987326E-4	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9998624460335294	WITHOUT_CLASSIFICATION	1.3755396647075797E-4	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999532579147312	WITHOUT_CLASSIFICATION	4.674208526885105E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998903371623139	WITHOUT_CLASSIFICATION	1.096628376860639E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999455837470712	WITHOUT_CLASSIFICATION	5.441625292874452E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999978300255274	WITHOUT_CLASSIFICATION	2.1699744725423316E-6	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9997969470288183	WITHOUT_CLASSIFICATION	2.0305297118169112E-4	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9997259095315046	WITHOUT_CLASSIFICATION	2.740904684953639E-4	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9998685389074535	WITHOUT_CLASSIFICATION	1.314610925464411E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999066241584228	WITHOUT_CLASSIFICATION	9.337584157718501E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999656303601548	WITHOUT_CLASSIFICATION	3.436963984512098E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9994168259921156	WITHOUT_CLASSIFICATION	5.831740078844511E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9930127526869953	WITHOUT_CLASSIFICATION	0.00698724731300476	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9997829915391029	WITHOUT_CLASSIFICATION	2.1700846089722477E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9997829915391029	WITHOUT_CLASSIFICATION	2.1700846089722477E-4	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999071925587945	WITHOUT_CLASSIFICATION	9.280744120551245E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999453291449385	WITHOUT_CLASSIFICATION	5.467085506148743E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9998623789923425	WITHOUT_CLASSIFICATION	1.3762100765753947E-4	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9996681360929472	WITHOUT_CLASSIFICATION	3.318639070528219E-4	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999616623455844	WITHOUT_CLASSIFICATION	3.833765441568103E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9995398853754445	WITHOUT_CLASSIFICATION	4.6011462455563867E-4	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9943596393342977	WITHOUT_CLASSIFICATION	0.005640360665702268	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999304490760319	WITHOUT_CLASSIFICATION	6.95509239681427E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9993946217410803	WITHOUT_CLASSIFICATION	6.053782589198424E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9969430205052068	WITHOUT_CLASSIFICATION	0.0030569794947932992	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9995407827560822	WITHOUT_CLASSIFICATION	4.5921724391789716E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999506428234473	WITHOUT_CLASSIFICATION	4.935717655265542E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999506428234473	WITHOUT_CLASSIFICATION	4.935717655265542E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9989021789618618	WITHOUT_CLASSIFICATION	0.0010978210381382162	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999867329244506	WITHOUT_CLASSIFICATION	1.326707554934711E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999022512824803	WITHOUT_CLASSIFICATION	9.774871751961992E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999022512824803	WITHOUT_CLASSIFICATION	9.774871751961992E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999350488815925	WITHOUT_CLASSIFICATION	6.495111840754704E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9998777108535859	WITHOUT_CLASSIFICATION	1.2228914641404398E-4	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9998576234819266	WITHOUT_CLASSIFICATION	1.423765180732712E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9994342763714255	WITHOUT_CLASSIFICATION	5.657236285745337E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9998494618611132	WITHOUT_CLASSIFICATION	1.5053813888685517E-4	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9993418600987222	WITHOUT_CLASSIFICATION	6.581399012778043E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999497316338163	WITHOUT_CLASSIFICATION	5.026836618378417E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999679363561848	WITHOUT_CLASSIFICATION	3.206364381525114E-5	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.998255877572564	WITHOUT_CLASSIFICATION	0.0017441224274361226	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999770032154622	WITHOUT_CLASSIFICATION	2.2996784537755336E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9996935492678535	WITHOUT_CLASSIFICATION	3.0645073214651545E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999533167069358	WITHOUT_CLASSIFICATION	4.668329306434658E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999293593196161	WITHOUT_CLASSIFICATION	7.064068038388305E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9995990813419995	WITHOUT_CLASSIFICATION	4.0091865800039625E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999859424883922	WITHOUT_CLASSIFICATION	1.4057511607731402E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.95805448928154	WITHOUT_CLASSIFICATION	0.041945510718459963	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.999807111145061	WITHOUT_CLASSIFICATION	1.928888549389779E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9997617415621167	WITHOUT_CLASSIFICATION	2.3825843788325614E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9998383329300218	WITHOUT_CLASSIFICATION	1.616670699782675E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.999886127203667	WITHOUT_CLASSIFICATION	1.1387279633293174E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9606946884547468	WITHOUT_CLASSIFICATION	0.03930531154525312	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9998400540583644	WITHOUT_CLASSIFICATION	1.599459416355787E-4	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9998842714855993	WITHOUT_CLASSIFICATION	1.1572851440064183E-4	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999809337221525	WITHOUT_CLASSIFICATION	1.9066277847586888E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999921664163284	WITHOUT_CLASSIFICATION	7.833583671644195E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9981410176225579	WITHOUT_CLASSIFICATION	0.001858982377442068	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9996773635368362	WITHOUT_CLASSIFICATION	3.2263646316382186E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999518131651661	WITHOUT_CLASSIFICATION	4.818683483382002E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.999876225770074	WITHOUT_CLASSIFICATION	1.237742299261153E-4	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.999711866343605	WITHOUT_CLASSIFICATION	2.881336563949396E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999685479963289	WITHOUT_CLASSIFICATION	3.1452003671091105E-4	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9981292351259685	WITHOUT_CLASSIFICATION	0.0018707648740315483	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998125060458484	WITHOUT_CLASSIFICATION	1.8749395415169537E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9998125060458484	WITHOUT_CLASSIFICATION	1.8749395415169537E-4	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999610366418297	WITHOUT_CLASSIFICATION	3.896335817030794E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9998985864223435	WITHOUT_CLASSIFICATION	1.0141357765645312E-4	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9996367469637852	WITHOUT_CLASSIFICATION	3.6325303621468697E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9992708101179397	WITHOUT_CLASSIFICATION	7.291898820601504E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9992720674109028	WITHOUT_CLASSIFICATION	7.279325890973164E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999633033121542	WITHOUT_CLASSIFICATION	3.6696687845819415E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9919303815729408	WITHOUT_CLASSIFICATION	0.00806961842705917	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9919303815729408	WITHOUT_CLASSIFICATION	0.00806961842705917	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.999113220230129	WITHOUT_CLASSIFICATION	8.867797698710467E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9994844969970935	WITHOUT_CLASSIFICATION	5.155030029065451E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9985353690698413	WITHOUT_CLASSIFICATION	0.0014646309301587755	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9024205341633915	WITHOUT_CLASSIFICATION	0.09757946583660843	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999151250957535	WITHOUT_CLASSIFICATION	8.487490424650955E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.999642579304882	WITHOUT_CLASSIFICATION	3.5742069511801274E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.999969451249488	WITHOUT_CLASSIFICATION	3.054875051211256E-5	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999680246256599	WITHOUT_CLASSIFICATION	3.197537434011001E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9991789926391507	WITHOUT_CLASSIFICATION	8.210073608493071E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9997822260000255	WITHOUT_CLASSIFICATION	2.1777399997449987E-4	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9998527536559856	WITHOUT_CLASSIFICATION	1.4724634401431488E-4	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9997602910684753	WITHOUT_CLASSIFICATION	2.3970893152483995E-4	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999066123981707	WITHOUT_CLASSIFICATION	9.33876018293619E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999755022401079	WITHOUT_CLASSIFICATION	2.44977598920212E-5	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9997354347979767	WITHOUT_CLASSIFICATION	2.645652020233861E-4	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997024651649993	WITHOUT_CLASSIFICATION	2.975348350006949E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9964576770825111	WITHOUT_CLASSIFICATION	0.0035423229174889673	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999840904382927	WITHOUT_CLASSIFICATION	1.5909561707235934E-5	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9995802125986066	WITHOUT_CLASSIFICATION	4.1978740139344634E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9994813572783159	WITHOUT_CLASSIFICATION	5.186427216841177E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9982899857253069	WITHOUT_CLASSIFICATION	0.0017100142746929916	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9986240285089167	WITHOUT_CLASSIFICATION	0.0013759714910833065	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999492986757789	WITHOUT_CLASSIFICATION	5.070132422102517E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999722629983366	WITHOUT_CLASSIFICATION	2.773700166344195E-5	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.999842962010729	WITHOUT_CLASSIFICATION	1.5703798927097314E-4	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999213542068923	WITHOUT_CLASSIFICATION	7.864579310762744E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9998232713721518	WITHOUT_CLASSIFICATION	1.7672862784828583E-4	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9998499402888326	WITHOUT_CLASSIFICATION	1.5005971116743635E-4	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999062757567219	WITHOUT_CLASSIFICATION	9.372424327824087E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9997272311737307	WITHOUT_CLASSIFICATION	2.7276882626920665E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9998893559729056	WITHOUT_CLASSIFICATION	1.1064402709432657E-4	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9997803429441333	WITHOUT_CLASSIFICATION	2.1965705586669888E-4	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9998899818170544	WITHOUT_CLASSIFICATION	1.1001818294573414E-4	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9998001911374879	WITHOUT_CLASSIFICATION	1.998088625120496E-4	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9997369094002494	WITHOUT_CLASSIFICATION	2.6309059975055684E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9998255837035667	WITHOUT_CLASSIFICATION	1.7441629643323654E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9992497008809361	WITHOUT_CLASSIFICATION	7.502991190638487E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999311038088083	WITHOUT_CLASSIFICATION	6.889619119164937E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999900463440187	WITHOUT_CLASSIFICATION	9.953655981462481E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9996246881739947	WITHOUT_CLASSIFICATION	3.7531182600532634E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.998237298765948	WITHOUT_CLASSIFICATION	0.0017627012340520037	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9967457308154797	WITHOUT_CLASSIFICATION	0.0032542691845203844	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9993072833261131	WITHOUT_CLASSIFICATION	6.927166738869658E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9996950018651098	WITHOUT_CLASSIFICATION	3.049981348901798E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9923370056010216	WITHOUT_CLASSIFICATION	0.007662994398978382	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997934506663722	WITHOUT_CLASSIFICATION	2.065493336278731E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998798688876828	WITHOUT_CLASSIFICATION	1.2013111231719288E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9998977415040954	WITHOUT_CLASSIFICATION	1.0225849590463568E-4	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9505419719611383	WITHOUT_CLASSIFICATION	0.0494580280388616	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998529731402427	WITHOUT_CLASSIFICATION	1.4702685975726814E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999581798722118	WITHOUT_CLASSIFICATION	4.182012778820539E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999978233503165	WITHOUT_CLASSIFICATION	2.176649683601029E-6	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999480057599216	WITHOUT_CLASSIFICATION	5.1994240078526934E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.999641273050656	WITHOUT_CLASSIFICATION	3.587269493440038E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999708333688329	WITHOUT_CLASSIFICATION	2.9166631167126544E-5	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999258222937478	WITHOUT_CLASSIFICATION	7.417770625219065E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999737591739815	WITHOUT_CLASSIFICATION	2.62408260186011E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.999764835095672	WITHOUT_CLASSIFICATION	2.351649043279463E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999143930977664	WITHOUT_CLASSIFICATION	8.560690223363275E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.999764835095672	WITHOUT_CLASSIFICATION	2.351649043279463E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999869689287375	WITHOUT_CLASSIFICATION	1.3031071262516902E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999143930977664	WITHOUT_CLASSIFICATION	8.560690223363275E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999648908585442	WITHOUT_CLASSIFICATION	3.5109141455693505E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9994565507548097	WITHOUT_CLASSIFICATION	5.434492451903849E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9618944589245	WITHOUT_CLASSIFICATION	0.038105541075500016	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.929979839510993	WITHOUT_CLASSIFICATION	0.07002016048900696	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999826765435864	WITHOUT_CLASSIFICATION	1.732345641359125E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9891787689239144	WITHOUT_CLASSIFICATION	0.010821231076085602	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9997582646494381	WITHOUT_CLASSIFICATION	2.4173535056192487E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9997726638673774	WITHOUT_CLASSIFICATION	2.2733613262263433E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994578404614473	WITHOUT_CLASSIFICATION	5.421595385527712E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.999886127203667	WITHOUT_CLASSIFICATION	1.1387279633293174E-4	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999943975569044	WITHOUT_CLASSIFICATION	5.6024430956025644E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9540095113341343	WITHOUT_CLASSIFICATION	0.04599048866586582	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.999919747308301	WITHOUT_CLASSIFICATION	8.025269169899496E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999776497913828	WITHOUT_CLASSIFICATION	2.235020861716542E-5	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9997231280870602	WITHOUT_CLASSIFICATION	2.768719129397667E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9739039184667532	WITHOUT_CLASSIFICATION	0.026096081533246794	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9998437042112661	WITHOUT_CLASSIFICATION	1.5629578873387526E-4	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9973291621608137	WITHOUT_CLASSIFICATION	0.0026708378391862597	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.998003615719918	WITHOUT_CLASSIFICATION	0.0019963842800818977	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999214490021331	WITHOUT_CLASSIFICATION	7.855099786686737E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999780116164146	WITHOUT_CLASSIFICATION	2.198838358526103E-5	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.999961784205785	WITHOUT_CLASSIFICATION	3.8215794215099976E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9984102593311518	WITHOUT_CLASSIFICATION	0.0015897406688481545	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999862334952416	WITHOUT_CLASSIFICATION	1.376650475847672E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9952291910014772	WITHOUT_CLASSIFICATION	0.00477080899852275	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999972967994725	WITHOUT_CLASSIFICATION	2.7032005275986203E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9996526060336103	WITHOUT_CLASSIFICATION	3.4739396638979836E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9996526060336103	WITHOUT_CLASSIFICATION	3.4739396638979836E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9998245202872608	WITHOUT_CLASSIFICATION	1.7547971273925575E-4	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.999830767886371	WITHOUT_CLASSIFICATION	1.692321136290295E-4	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9995125473636296	WITHOUT_CLASSIFICATION	4.874526363704611E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9996147923640236	WITHOUT_CLASSIFICATION	3.8520763597644207E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9997979788112695	WITHOUT_CLASSIFICATION	2.0202118873044009E-4	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999093146836859	WITHOUT_CLASSIFICATION	9.068531631413572E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9929252547888295	WITHOUT_CLASSIFICATION	0.007074745211170456	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999464250731349	WITHOUT_CLASSIFICATION	5.357492686511325E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995198099274574	WITHOUT_CLASSIFICATION	4.801900725425863E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995198099274574	WITHOUT_CLASSIFICATION	4.801900725425863E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9997682308351814	WITHOUT_CLASSIFICATION	2.3176916481847484E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999364374910793	WITHOUT_CLASSIFICATION	6.356250892071347E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9700394793207259	WITHOUT_CLASSIFICATION	0.029960520679274176	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.999899501785126	WITHOUT_CLASSIFICATION	1.0049821487408513E-4	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9998541422713472	WITHOUT_CLASSIFICATION	1.4585772865271008E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9996724751918961	WITHOUT_CLASSIFICATION	3.2752480810393846E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9997366060992163	WITHOUT_CLASSIFICATION	2.633939007836833E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999869689287375	WITHOUT_CLASSIFICATION	1.3031071262516902E-4	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.999912655396956	WITHOUT_CLASSIFICATION	8.734460304397737E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999716770951956	WITHOUT_CLASSIFICATION	2.8322904804375115E-5	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999536969708691	WITHOUT_CLASSIFICATION	4.630302913096706E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9998735016303056	WITHOUT_CLASSIFICATION	1.264983696944552E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998764133271782	WITHOUT_CLASSIFICATION	1.235866728218679E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9998764133271782	WITHOUT_CLASSIFICATION	1.235866728218679E-4	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999364374910793	WITHOUT_CLASSIFICATION	6.356250892071347E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999860358967306	WITHOUT_CLASSIFICATION	1.3964103269303899E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9896573537007455	WITHOUT_CLASSIFICATION	0.01034264629925447	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999335690953967	WITHOUT_CLASSIFICATION	6.643090460335946E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.999933986225767	WITHOUT_CLASSIFICATION	6.601377423300267E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9994038916449635	WITHOUT_CLASSIFICATION	5.961083550365191E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997254992081979	WITHOUT_CLASSIFICATION	2.745007918020751E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9994978851767055	WITHOUT_CLASSIFICATION	5.021148232945054E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9983395417398591	WITHOUT_CLASSIFICATION	0.0016604582601408837	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9994937179554565	WITHOUT_CLASSIFICATION	5.062820445434484E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9998346719110669	WITHOUT_CLASSIFICATION	1.653280889331761E-4	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999657433489454	WITHOUT_CLASSIFICATION	3.42566510546202E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9990662218915856	WITHOUT_CLASSIFICATION	9.337781084144006E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999028345662682	WITHOUT_CLASSIFICATION	9.71654337317663E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9996664684832794	WITHOUT_CLASSIFICATION	3.3353151672064856E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9995721757193545	WITHOUT_CLASSIFICATION	4.2782428064546167E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9997092658308239	WITHOUT_CLASSIFICATION	2.9073416917614126E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.99994218083944	WITHOUT_CLASSIFICATION	5.781916056003655E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.99994218083944	WITHOUT_CLASSIFICATION	5.781916056003655E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998885035877512	WITHOUT_CLASSIFICATION	1.114964122488628E-4	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999823095863154	WITHOUT_CLASSIFICATION	1.7690413684582004E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999960013291213	WITHOUT_CLASSIFICATION	3.998670878749644E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999627809510909	WITHOUT_CLASSIFICATION	3.7219048909089524E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992206458456508	WITHOUT_CLASSIFICATION	7.793541543491246E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9992206458456508	WITHOUT_CLASSIFICATION	7.793541543491246E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999212423457556	WITHOUT_CLASSIFICATION	7.875765424437564E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999740093465794	WITHOUT_CLASSIFICATION	2.5990653420657253E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9586395759548876	WITHOUT_CLASSIFICATION	0.04136042404511253	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9996970878401207	WITHOUT_CLASSIFICATION	3.0291215987930794E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9998050864607176	WITHOUT_CLASSIFICATION	1.9491353928228748E-4	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9998904993156453	WITHOUT_CLASSIFICATION	1.0950068435465314E-4	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999599645514246	WITHOUT_CLASSIFICATION	4.003544857547415E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9952978799317089	WITHOUT_CLASSIFICATION	0.00470212006829099	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999691031973384	WITHOUT_CLASSIFICATION	3.089680266161933E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9997419313439058	WITHOUT_CLASSIFICATION	2.5806865609419435E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9998749548286511	WITHOUT_CLASSIFICATION	1.2504517134894958E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9994874893271867	WITHOUT_CLASSIFICATION	5.125106728132748E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999407918210202	WITHOUT_CLASSIFICATION	5.9208178979804806E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999994413000461	WITHOUT_CLASSIFICATION	5.586999539045755E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999785796164877	WITHOUT_CLASSIFICATION	2.1420383512214626E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998426897818222	WITHOUT_CLASSIFICATION	1.5731021817775507E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9998745466451455	WITHOUT_CLASSIFICATION	1.2545335485443057E-4	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.999814778045811	WITHOUT_CLASSIFICATION	1.8522195418897467E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.999399540911184	WITHOUT_CLASSIFICATION	6.004590888159674E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999890538699479	WITHOUT_CLASSIFICATION	1.0946130052122695E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9998996808414605	WITHOUT_CLASSIFICATION	1.0031915853939552E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999474451603375	WITHOUT_CLASSIFICATION	5.2554839662449764E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9997601960650918	WITHOUT_CLASSIFICATION	2.3980393490817187E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999227654933994	WITHOUT_CLASSIFICATION	7.72345066005913E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.999374417667239	WITHOUT_CLASSIFICATION	6.255823327610831E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9904110450381362	WITHOUT_CLASSIFICATION	0.009588954961863894	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9990289196389278	WITHOUT_CLASSIFICATION	9.710803610720984E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9989989023798272	WITHOUT_CLASSIFICATION	0.0010010976201728103	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.999994621782615	WITHOUT_CLASSIFICATION	5.378217384993079E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9994673308169297	WITHOUT_CLASSIFICATION	5.326691830702523E-4	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9988010942822568	WITHOUT_CLASSIFICATION	0.0011989057177431877	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999506633850509	WITHOUT_CLASSIFICATION	4.9336614949098645E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9998458054951233	WITHOUT_CLASSIFICATION	1.5419450487675837E-4	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9994404876953639	WITHOUT_CLASSIFICATION	5.595123046361576E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9369720226768051	WITHOUT_CLASSIFICATION	0.06302797732319497	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9992191042761698	WITHOUT_CLASSIFICATION	7.808957238301864E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999607909093835	WITHOUT_CLASSIFICATION	3.9209090616498565E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9987749954447218	WITHOUT_CLASSIFICATION	0.001225004555278236	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9987178612859499	WITHOUT_CLASSIFICATION	0.0012821387140501991	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999474427274745	WITHOUT_CLASSIFICATION	5.2557272525378524E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999977998092297	WITHOUT_CLASSIFICATION	2.2001907702870453E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999312459487025	WITHOUT_CLASSIFICATION	6.875405129753206E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999849176043464	WITHOUT_CLASSIFICATION	1.5082395653659856E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9998441846648668	WITHOUT_CLASSIFICATION	1.558153351332452E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9975317618547832	WITHOUT_CLASSIFICATION	0.002468238145216774	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9975317618547832	WITHOUT_CLASSIFICATION	0.002468238145216774	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999652858135317	WITHOUT_CLASSIFICATION	3.471418646825917E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9963548602081417	WITHOUT_CLASSIFICATION	0.0036451397918584225	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9932786732105257	WITHOUT_CLASSIFICATION	0.006721326789474324	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9997217138916672	WITHOUT_CLASSIFICATION	2.7828610833277004E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999817589897575	WITHOUT_CLASSIFICATION	1.8241010242439733E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999817589897575	WITHOUT_CLASSIFICATION	1.8241010242439733E-5	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9998558744016431	WITHOUT_CLASSIFICATION	1.441255983569083E-4	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9985617070038552	WITHOUT_CLASSIFICATION	0.0014382929961448644	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999257370945073	WITHOUT_CLASSIFICATION	7.426290549278419E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.999937151024353	WITHOUT_CLASSIFICATION	6.2848975646958E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999363865664336	WITHOUT_CLASSIFICATION	6.361343356635307E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999363865664336	WITHOUT_CLASSIFICATION	6.361343356635307E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999684916191356	WITHOUT_CLASSIFICATION	3.1508380864456046E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999684916191356	WITHOUT_CLASSIFICATION	3.1508380864456046E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9997958813364527	WITHOUT_CLASSIFICATION	2.041186635472797E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999469482925499	WITHOUT_CLASSIFICATION	5.3051707450004866E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999456891289256	WITHOUT_CLASSIFICATION	5.431087107448938E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9992697972971651	WITHOUT_CLASSIFICATION	7.302027028348174E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9998882842958227	WITHOUT_CLASSIFICATION	1.1171570417729198E-4	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9995388680396052	WITHOUT_CLASSIFICATION	4.611319603948209E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999481968428785	WITHOUT_CLASSIFICATION	5.1803157121556216E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9997846620939788	WITHOUT_CLASSIFICATION	2.1533790602118471E-4	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999706373575581	WITHOUT_CLASSIFICATION	2.9362642441891983E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9990820834815395	WITHOUT_CLASSIFICATION	9.179165184605652E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.997596229540747	WITHOUT_CLASSIFICATION	0.00240377045925293	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999941625015673	WITHOUT_CLASSIFICATION	5.837498432779205E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9997394054064349	WITHOUT_CLASSIFICATION	2.605945935651885E-4	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9991305814730483	WITHOUT_CLASSIFICATION	8.694185269516812E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999666445877284	WITHOUT_CLASSIFICATION	3.335541227147947E-5	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9997765794709059	WITHOUT_CLASSIFICATION	2.234205290940658E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9992243923247298	WITHOUT_CLASSIFICATION	7.756076752701843E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9993921083379452	WITHOUT_CLASSIFICATION	6.078916620548081E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9996212411138112	WITHOUT_CLASSIFICATION	3.7875888618879355E-4	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999144999573528	WITHOUT_CLASSIFICATION	8.550004264710955E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9540095113341343	WITHOUT_CLASSIFICATION	0.04599048866586582	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.999988147503014	WITHOUT_CLASSIFICATION	1.1852496986095485E-5	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999260813707999	WITHOUT_CLASSIFICATION	7.391862920012758E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9998978286851717	WITHOUT_CLASSIFICATION	1.0217131482835742E-4	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997164089145014	WITHOUT_CLASSIFICATION	2.835910854985953E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9998995312673248	WITHOUT_CLASSIFICATION	1.0046873267517924E-4	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999594951999439	WITHOUT_CLASSIFICATION	4.050480005617625E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9996781214861873	WITHOUT_CLASSIFICATION	3.218785138127603E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9984371662003934	WITHOUT_CLASSIFICATION	0.0015628337996066745	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9998769505977332	WITHOUT_CLASSIFICATION	1.2304940226679764E-4	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9996152018986805	WITHOUT_CLASSIFICATION	3.8479810131949354E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999361214972975	WITHOUT_CLASSIFICATION	6.387850270258216E-5	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9997121486539671	WITHOUT_CLASSIFICATION	2.878513460328858E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9991016572528957	WITHOUT_CLASSIFICATION	8.983427471043798E-4	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9818382020676107	WITHOUT_CLASSIFICATION	0.018161797932389246	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999256173476045	WITHOUT_CLASSIFICATION	7.438265239538756E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9996244768199402	WITHOUT_CLASSIFICATION	3.7552318005978035E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999817813568718	WITHOUT_CLASSIFICATION	1.8218643128213798E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.8128996979417104	WITHOUT_CLASSIFICATION	0.18710030205828965	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999128736433835	WITHOUT_CLASSIFICATION	8.712635661641579E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9993207636677204	WITHOUT_CLASSIFICATION	6.792363322797192E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9998278785848366	WITHOUT_CLASSIFICATION	1.7212141516343414E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9996809891694719	WITHOUT_CLASSIFICATION	3.1901083052817997E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9620746519115305	WITHOUT_CLASSIFICATION	0.037925348088469445	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9994904110829815	WITHOUT_CLASSIFICATION	5.095889170184338E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999170664606299	WITHOUT_CLASSIFICATION	8.293353937003034E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998799610769203	WITHOUT_CLASSIFICATION	1.2003892307958032E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9997083120612565	WITHOUT_CLASSIFICATION	2.9168793874350866E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999669657415814	WITHOUT_CLASSIFICATION	3.3034258418589833E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999963810719728	WITHOUT_CLASSIFICATION	3.618928027196601E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999963810719728	WITHOUT_CLASSIFICATION	3.618928027196601E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999494609062909	WITHOUT_CLASSIFICATION	5.0539093709010554E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999494609062909	WITHOUT_CLASSIFICATION	5.0539093709010554E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9997256840153563	WITHOUT_CLASSIFICATION	2.7431598464371565E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9997256840153563	WITHOUT_CLASSIFICATION	2.7431598464371565E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998203630085014	WITHOUT_CLASSIFICATION	1.796369914985842E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998203630085014	WITHOUT_CLASSIFICATION	1.796369914985842E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9990356175331859	WITHOUT_CLASSIFICATION	9.643824668142215E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9990356175331859	WITHOUT_CLASSIFICATION	9.643824668142215E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9990356175331859	WITHOUT_CLASSIFICATION	9.643824668142215E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999476423047374	WITHOUT_CLASSIFICATION	5.235769526247391E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998783146426791	WITHOUT_CLASSIFICATION	1.2168535732088618E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998524332143089	WITHOUT_CLASSIFICATION	1.4756678569106748E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998524332143089	WITHOUT_CLASSIFICATION	1.4756678569106748E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998524332143089	WITHOUT_CLASSIFICATION	1.4756678569106748E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9998908523404166	WITHOUT_CLASSIFICATION	1.0914765958328287E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998984250244732	WITHOUT_CLASSIFICATION	1.0157497552679004E-4	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999396148767087	WITHOUT_CLASSIFICATION	6.0385123291432556E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999396148767087	WITHOUT_CLASSIFICATION	6.0385123291432556E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998953954793847	WITHOUT_CLASSIFICATION	1.0460452061529041E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999837025579871	WITHOUT_CLASSIFICATION	1.6297442012964475E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999837025579871	WITHOUT_CLASSIFICATION	1.6297442012964475E-5	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9758936713950539	WITHOUT_CLASSIFICATION	0.02410632860494614	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9987700596880141	WITHOUT_CLASSIFICATION	0.0012299403119858602	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9996099215088923	WITHOUT_CLASSIFICATION	3.9007849110774467E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9938347431792773	WITHOUT_CLASSIFICATION	0.006165256820722664	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9998619324780684	WITHOUT_CLASSIFICATION	1.3806752193155767E-4	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.999980470524033	WITHOUT_CLASSIFICATION	1.9529475966913915E-5	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9977401398883831	WITHOUT_CLASSIFICATION	0.0022598601116170045	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9991162431851791	WITHOUT_CLASSIFICATION	8.837568148209224E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999286839263618	WITHOUT_CLASSIFICATION	7.13160736380836E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999862495354375	WITHOUT_CLASSIFICATION	1.3750464562548355E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999731944936148	WITHOUT_CLASSIFICATION	2.6805506385203543E-4	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9938476360061015	WITHOUT_CLASSIFICATION	0.006152363993898515	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9995749683677448	WITHOUT_CLASSIFICATION	4.25031632255168E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9996711805729195	WITHOUT_CLASSIFICATION	3.2881942708057305E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9987425373857861	WITHOUT_CLASSIFICATION	0.001257462614213837	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.7798076021501761	WITHOUT_CLASSIFICATION	0.22019239784982392	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9808577216601893	WITHOUT_CLASSIFICATION	0.01914227833981069	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999814180953006	WITHOUT_CLASSIFICATION	1.8581904699376846E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999058457373732	WITHOUT_CLASSIFICATION	9.415426262679053E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998094141001418	WITHOUT_CLASSIFICATION	1.9058589985827674E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999581798722118	WITHOUT_CLASSIFICATION	4.182012778820539E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999646714782293	WITHOUT_CLASSIFICATION	3.532852177077829E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999181612805238	WITHOUT_CLASSIFICATION	8.183871947616652E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.996823241701008	WITHOUT_CLASSIFICATION	0.0031767582989919783	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9924285069653253	WITHOUT_CLASSIFICATION	0.007571493034674737	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9997775561500934	WITHOUT_CLASSIFICATION	2.2244384990652923E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999994732853527	WITHOUT_CLASSIFICATION	5.267146472956567E-6	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9998645509922464	WITHOUT_CLASSIFICATION	1.3544900775356352E-4	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999724158792994	WITHOUT_CLASSIFICATION	2.758412070067102E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9996791463244257	WITHOUT_CLASSIFICATION	3.2085367557437684E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9998928876313274	WITHOUT_CLASSIFICATION	1.07112368672473E-4	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999900463440187	WITHOUT_CLASSIFICATION	9.953655981462481E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9996774594431049	WITHOUT_CLASSIFICATION	3.2254055689507136E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9996774594431049	WITHOUT_CLASSIFICATION	3.2254055689507136E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9996774594431049	WITHOUT_CLASSIFICATION	3.2254055689507136E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9996774594431049	WITHOUT_CLASSIFICATION	3.2254055689507136E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999943871810296	WITHOUT_CLASSIFICATION	5.612818970380099E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9882026944465839	WITHOUT_CLASSIFICATION	0.011797305553416028	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9997008965634666	WITHOUT_CLASSIFICATION	2.991034365334517E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9997008965634666	WITHOUT_CLASSIFICATION	2.991034365334517E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9998740879998617	WITHOUT_CLASSIFICATION	1.2591200013826028E-4	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998249516029744	WITHOUT_CLASSIFICATION	1.7504839702567093E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9983287003844735	WITHOUT_CLASSIFICATION	0.0016712996155264818	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999813553504929	WITHOUT_CLASSIFICATION	1.8644649507161494E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9942673903331852	WITHOUT_CLASSIFICATION	0.005732609666814766	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9900430455365609	WITHOUT_CLASSIFICATION	0.009956954463439185	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9997111565081648	WITHOUT_CLASSIFICATION	2.888434918351797E-4	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999970636152717	WITHOUT_CLASSIFICATION	2.9363847283020488E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999970636152717	WITHOUT_CLASSIFICATION	2.9363847283020488E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999970636152717	WITHOUT_CLASSIFICATION	2.9363847283020488E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.999970636152717	WITHOUT_CLASSIFICATION	2.9363847283020488E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999908296081416	WITHOUT_CLASSIFICATION	9.17039185845759E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9985687684085011	WITHOUT_CLASSIFICATION	0.0014312315914989005	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9985687684085011	WITHOUT_CLASSIFICATION	0.0014312315914989005	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9985687684085011	WITHOUT_CLASSIFICATION	0.0014312315914989005	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9989339445015787	WITHOUT_CLASSIFICATION	0.001066055498421235	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999540010687044	WITHOUT_CLASSIFICATION	4.599893129558363E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999784016009349	WITHOUT_CLASSIFICATION	2.159839906515442E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9973178936815447	WITHOUT_CLASSIFICATION	0.002682106318455207	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.999922793257033	WITHOUT_CLASSIFICATION	7.72067429670398E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9967547237349005	WITHOUT_CLASSIFICATION	0.0032452762650995266	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9967547237349005	WITHOUT_CLASSIFICATION	0.0032452762650995266	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9987693226536616	WITHOUT_CLASSIFICATION	0.0012306773463383483	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9987693226536616	WITHOUT_CLASSIFICATION	0.0012306773463383483	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999863562207097	WITHOUT_CLASSIFICATION	1.3643779290323943E-5	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999957822440296	WITHOUT_CLASSIFICATION	4.217755970410754E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9997271002880652	WITHOUT_CLASSIFICATION	2.7289971193476435E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9828824071548996	WITHOUT_CLASSIFICATION	0.017117592845100355	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997864600395884	WITHOUT_CLASSIFICATION	2.1353996041147382E-4	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999888948599098	WITHOUT_CLASSIFICATION	1.1105140090201258E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.999754330718357	WITHOUT_CLASSIFICATION	2.456692816430425E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9994026587538268	WITHOUT_CLASSIFICATION	5.973412461731844E-4	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9977449222608529	WITHOUT_CLASSIFICATION	0.00225507773914712	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999614800434847	WITHOUT_CLASSIFICATION	3.851995651524021E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999614800434847	WITHOUT_CLASSIFICATION	3.851995651524021E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9998888610287864	WITHOUT_CLASSIFICATION	1.1113897121351879E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9998888610287864	WITHOUT_CLASSIFICATION	1.1113897121351879E-4	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9982758878920155	WITHOUT_CLASSIFICATION	0.0017241121079845198	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9984277476580112	WITHOUT_CLASSIFICATION	0.0015722523419887187	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999857799934227	WITHOUT_CLASSIFICATION	1.422000657730319E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9986907832937183	WITHOUT_CLASSIFICATION	0.0013092167062816772	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9986907832937183	WITHOUT_CLASSIFICATION	0.0013092167062816772	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9986907832937183	WITHOUT_CLASSIFICATION	0.0013092167062816772	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999194079549633	WITHOUT_CLASSIFICATION	8.05920450366482E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9995559437425285	WITHOUT_CLASSIFICATION	4.4405625747146165E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9991820255351822	WITHOUT_CLASSIFICATION	8.17974464817752E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9989904748561094	WITHOUT_CLASSIFICATION	0.0010095251438906735	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9793596166864628	WITHOUT_CLASSIFICATION	0.02064038331353727	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999601697869028	WITHOUT_CLASSIFICATION	3.9830213097120384E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9774742413948093	WITHOUT_CLASSIFICATION	0.022525758605190686	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.999662076625287	WITHOUT_CLASSIFICATION	3.379233747129868E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9977035368163644	WITHOUT_CLASSIFICATION	0.002296463183635575	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9996526060336103	WITHOUT_CLASSIFICATION	3.4739396638979836E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.999847088527377	WITHOUT_CLASSIFICATION	1.529114726228947E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9990289856379471	WITHOUT_CLASSIFICATION	9.710143620529515E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999214302804966	WITHOUT_CLASSIFICATION	7.856971950330307E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9986969792778378	WITHOUT_CLASSIFICATION	0.0013030207221621489	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9729973457216583	WITHOUT_CLASSIFICATION	0.027002654278341753	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9985261016609415	WITHOUT_CLASSIFICATION	0.0014738983390585208	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9990188208556113	WITHOUT_CLASSIFICATION	9.811791443887052E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9998075818481864	WITHOUT_CLASSIFICATION	1.9241815181358742E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999017360996977	WITHOUT_CLASSIFICATION	9.826390030236909E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9998888205467812	WITHOUT_CLASSIFICATION	1.1117945321877847E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.999872465229223	WITHOUT_CLASSIFICATION	1.2753477077696754E-4	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9900092549724687	WITHOUT_CLASSIFICATION	0.009990745027531323	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9970354441838609	WITHOUT_CLASSIFICATION	0.002964555816139007	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.999960224132569	WITHOUT_CLASSIFICATION	3.97758674309174E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999780916516263	WITHOUT_CLASSIFICATION	2.1908348373609326E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9852029505638871	WITHOUT_CLASSIFICATION	0.014797049436112965	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.780110589437498	WITHOUT_CLASSIFICATION	0.21988941056250186	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9993605129057757	WITHOUT_CLASSIFICATION	6.394870942243542E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9997508034453472	WITHOUT_CLASSIFICATION	2.491965546528311E-4	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9996394854690919	WITHOUT_CLASSIFICATION	3.6051453090813466E-4	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9990024515646435	WITHOUT_CLASSIFICATION	9.975484353565217E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9967915858885997	WITHOUT_CLASSIFICATION	0.0032084141114002347	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9944838565086231	WITHOUT_CLASSIFICATION	0.005516143491376818	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9957413051153265	WITHOUT_CLASSIFICATION	0.00425869488467341	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9957413051153265	WITHOUT_CLASSIFICATION	0.00425869488467341	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.8356902943147314	WITHOUT_CLASSIFICATION	0.1643097056852686	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9998999446285215	WITHOUT_CLASSIFICATION	1.0005537147847452E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9998999446285215	WITHOUT_CLASSIFICATION	1.0005537147847452E-4	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999541884582913	WITHOUT_CLASSIFICATION	4.581154170876678E-5	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9998855092537261	WITHOUT_CLASSIFICATION	1.1449074627389711E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9997537661608797	WITHOUT_CLASSIFICATION	2.4623383912023017E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999947067896584	WITHOUT_CLASSIFICATION	5.293210341588703E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999947067896584	WITHOUT_CLASSIFICATION	5.293210341588703E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999848484823405	WITHOUT_CLASSIFICATION	1.5151517659433358E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997650775227369	WITHOUT_CLASSIFICATION	2.3492247726319182E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997650775227369	WITHOUT_CLASSIFICATION	2.3492247726319182E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9958861965665697	WITHOUT_CLASSIFICATION	0.0041138034334302406	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9986975922902213	WITHOUT_CLASSIFICATION	0.0013024077097787737	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9996294261118868	WITHOUT_CLASSIFICATION	3.7057388811324285E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9997796729672229	WITHOUT_CLASSIFICATION	2.20327032777014E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.999836349715497	WITHOUT_CLASSIFICATION	1.6365028450298852E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.999802810552863	WITHOUT_CLASSIFICATION	1.9718944713707556E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999031845844577	WITHOUT_CLASSIFICATION	9.681541554226665E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999115383522393	WITHOUT_CLASSIFICATION	8.846164776069421E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999886802034474	WITHOUT_CLASSIFICATION	1.1319796552598354E-4	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9966580905749	WITHOUT_CLASSIFICATION	0.003341909425099982	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9994472261596308	WITHOUT_CLASSIFICATION	5.527738403691971E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9981082299894288	WITHOUT_CLASSIFICATION	0.0018917700105711792	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9997716007833888	WITHOUT_CLASSIFICATION	2.2839921661125097E-4	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9742019558046588	WITHOUT_CLASSIFICATION	0.025798044195341263	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998314622376206	WITHOUT_CLASSIFICATION	1.6853776237936714E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9998767604309503	WITHOUT_CLASSIFICATION	1.232395690496581E-4	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9986736823689042	WITHOUT_CLASSIFICATION	0.0013263176310958761	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9967095965434694	WITHOUT_CLASSIFICATION	0.0032904034565305997	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999654068414048	WITHOUT_CLASSIFICATION	3.459315859523116E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999654068414048	WITHOUT_CLASSIFICATION	3.459315859523116E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9995531316790588	WITHOUT_CLASSIFICATION	4.4686832094123524E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9998797607613871	WITHOUT_CLASSIFICATION	1.2023923861288918E-4	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9983228562619431	WITHOUT_CLASSIFICATION	0.0016771437380570082	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9989959437053261	WITHOUT_CLASSIFICATION	0.0010040562946739206	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998610422110913	WITHOUT_CLASSIFICATION	1.3895778890871666E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998610422110913	WITHOUT_CLASSIFICATION	1.3895778890871666E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998610422110913	WITHOUT_CLASSIFICATION	1.3895778890871666E-4	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9996598239684737	WITHOUT_CLASSIFICATION	3.401760315262438E-4	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.999839525208456	WITHOUT_CLASSIFICATION	1.604747915439411E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9997155825409891	WITHOUT_CLASSIFICATION	2.8441745901085436E-4	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999316082009067	WITHOUT_CLASSIFICATION	6.83917990934049E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999673394784026	WITHOUT_CLASSIFICATION	3.26605215975053E-5	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9998911527326222	WITHOUT_CLASSIFICATION	1.0884726737773104E-4	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9991535387073275	WITHOUT_CLASSIFICATION	8.464612926725729E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9969430205052068	WITHOUT_CLASSIFICATION	0.0030569794947932992	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9993946217410803	WITHOUT_CLASSIFICATION	6.053782589198424E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.999986953722493	WITHOUT_CLASSIFICATION	1.3046277506928746E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999253002053066	WITHOUT_CLASSIFICATION	7.469979469335614E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9998461154036773	WITHOUT_CLASSIFICATION	1.5388459632276237E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9606946884547468	WITHOUT_CLASSIFICATION	0.03930531154525312	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9996412029341927	WITHOUT_CLASSIFICATION	3.5879706580740206E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9998903997555338	WITHOUT_CLASSIFICATION	1.0960024446624295E-4	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9997046321222064	WITHOUT_CLASSIFICATION	2.953678777936195E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999202740925867	WITHOUT_CLASSIFICATION	7.972590741330324E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999492986757789	WITHOUT_CLASSIFICATION	5.070132422102517E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9996998714679551	WITHOUT_CLASSIFICATION	3.001285320449088E-4	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9172396292194099	WITHOUT_CLASSIFICATION	0.0827603707805901	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.7536604981682768	DEFECT	0.24633950183172315	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.759712621481626	WITHOUT_CLASSIFICATION	0.24028737851837406	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9993231883105262	DEFECT	6.768116894737706E-4	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9223696560059134	DEFECT	0.0776303439940866	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9813882002157455	WITHOUT_CLASSIFICATION	0.018611799784254573	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9544319103678122	WITHOUT_CLASSIFICATION	0.045568089632187975	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.8175777932872118	WITHOUT_CLASSIFICATION	0.1824222067127882	DEFECT
// FIXME: not correct exception	DEFECT	0.8263807391242552	WITHOUT_CLASSIFICATION	0.17361926087574472	DEFECT
// XXX actually only on windows...	DEFECT	0.9982676602172442	WITHOUT_CLASSIFICATION	0.0017323397827557212	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9967094222637086	WITHOUT_CLASSIFICATION	0.0032905777362912773	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9275190691272199	WITHOUT_CLASSIFICATION	0.0724809308727801	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.97945695661218	WITHOUT_CLASSIFICATION	0.020543043387820006	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9029190036655914	DEFECT	0.09708099633440859	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.964638252329457	WITHOUT_CLASSIFICATION	0.03536174767054299	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.980645505212942	WITHOUT_CLASSIFICATION	0.019354494787057915	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.980645505212942	WITHOUT_CLASSIFICATION	0.019354494787057915	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9751808663615327	WITHOUT_CLASSIFICATION	0.024819133638467303	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9984536780087826	WITHOUT_CLASSIFICATION	0.0015463219912174146	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9762595195348975	WITHOUT_CLASSIFICATION	0.023740480465102524	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995641761700745	WITHOUT_CLASSIFICATION	4.3582382992545486E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995641761700745	WITHOUT_CLASSIFICATION	4.3582382992545486E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9817357001160683	WITHOUT_CLASSIFICATION	0.01826429988393179	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9946716183720836	WITHOUT_CLASSIFICATION	0.0053283816279163666	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9698699841790578	WITHOUT_CLASSIFICATION	0.030130015820942106	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8308467667264582	WITHOUT_CLASSIFICATION	0.16915323327354173	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9328434848346318	WITHOUT_CLASSIFICATION	0.06715651516536823	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7372503616862242	WITHOUT_CLASSIFICATION	0.2627496383137758	DEFECT
// TODO: proper sign	DEFECT	0.9590648842033499	WITHOUT_CLASSIFICATION	0.04093511579665009	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9256246122993684	DEFECT	0.07437538770063166	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.8955744935831472	WITHOUT_CLASSIFICATION	0.1044255064168527	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.6873002510420824	WITHOUT_CLASSIFICATION	0.3126997489579175	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8734481560751335	WITHOUT_CLASSIFICATION	0.12655184392486654	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.8201662907093724	WITHOUT_CLASSIFICATION	0.17983370929062756	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.6646075179986175	DEFECT	0.33539248200138266	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9390517313853455	WITHOUT_CLASSIFICATION	0.06094826861465462	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9190902335059279	WITHOUT_CLASSIFICATION	0.08090976649407207	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9498682719021989	WITHOUT_CLASSIFICATION	0.05013172809780098	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9981106254426658	WITHOUT_CLASSIFICATION	0.0018893745573342173	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9856454565226066	WITHOUT_CLASSIFICATION	0.014354543477393475	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9789222713040518	WITHOUT_CLASSIFICATION	0.021077728695948136	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9995594954692002	WITHOUT_CLASSIFICATION	4.405045307998888E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9983625597756934	WITHOUT_CLASSIFICATION	0.001637440224306629	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9983625597756934	WITHOUT_CLASSIFICATION	0.001637440224306629	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9434674483525524	WITHOUT_CLASSIFICATION	0.05653255164744769	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9889209811229973	WITHOUT_CLASSIFICATION	0.011079018877002696	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.7658373971017964	WITHOUT_CLASSIFICATION	0.23416260289820348	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9912675653418741	WITHOUT_CLASSIFICATION	0.00873243465812587	DEFECT
// FIXME: This is wrong	DEFECT	0.9239853504941588	WITHOUT_CLASSIFICATION	0.0760146495058412	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9763511061446833	WITHOUT_CLASSIFICATION	0.023648893855316697	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999255975738596	WITHOUT_CLASSIFICATION	7.440242614036762E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5692904543539796	DEFECT	0.43070954564602026	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9985348779766213	WITHOUT_CLASSIFICATION	0.0014651220233787283	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9980891557018986	WITHOUT_CLASSIFICATION	0.0019108442981013716	DEFECT
// FIXME: Broken but behaving	DEFECT	0.6140617706595032	DEFECT	0.38593822934049693	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9115800095688932	DEFECT	0.08841999043110674	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9115800095688932	DEFECT	0.08841999043110674	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9600173127798394	WITHOUT_CLASSIFICATION	0.039982687220160594	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9966758794963215	WITHOUT_CLASSIFICATION	0.003324120503678422	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9919933579450312	WITHOUT_CLASSIFICATION	0.008006642054968796	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.8724258157740615	DEFECT	0.12757418422593855	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9849070257498757	DEFECT	0.015092974250124406	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.986748735374999	WITHOUT_CLASSIFICATION	0.013251264625001062	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.8996616057528823	WITHOUT_CLASSIFICATION	0.1003383942471176	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9434674483525524	WITHOUT_CLASSIFICATION	0.05653255164744769	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9857907363550974	WITHOUT_CLASSIFICATION	0.014209263644902619	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9714233907958466	WITHOUT_CLASSIFICATION	0.028576609204153322	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.6386992482795737	DEFECT	0.3613007517204263	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8308467667264582	WITHOUT_CLASSIFICATION	0.16915323327354173	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9614708719163935	DEFECT	0.038529128083606506	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8722975681845674	DEFECT	0.12770243181543267	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9498682719021989	WITHOUT_CLASSIFICATION	0.05013172809780098	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9992514779840111	WITHOUT_CLASSIFICATION	7.485220159887969E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// FIXME: Broken but behaving	DEFECT	0.6140617706595032	DEFECT	0.38593822934049693	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.6395752567897012	DEFECT	0.3604247432102989	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// TODO: don't require pop	DEFECT	0.9652392096270616	WITHOUT_CLASSIFICATION	0.03476079037293842	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5692904543539796	DEFECT	0.43070954564602026	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9401157894095233	WITHOUT_CLASSIFICATION	0.05988421059047662	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9115800095688932	DEFECT	0.08841999043110674	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9115800095688932	DEFECT	0.08841999043110674	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9999441032260639	WITHOUT_CLASSIFICATION	5.589677393605459E-5	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9735427409780217	WITHOUT_CLASSIFICATION	0.02645725902197831	DEFECT
