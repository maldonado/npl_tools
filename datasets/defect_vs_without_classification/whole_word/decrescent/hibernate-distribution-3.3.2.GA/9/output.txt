//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999577692606392	WITHOUT_CLASSIFICATION	4.223073936089177E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9991767296919827	WITHOUT_CLASSIFICATION	8.23270308017259E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999951648513646	WITHOUT_CLASSIFICATION	4.835148635389573E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99990208006409	WITHOUT_CLASSIFICATION	9.791993591003964E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99990208006409	WITHOUT_CLASSIFICATION	9.791993591003964E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999954157183185	WITHOUT_CLASSIFICATION	4.584281681416609E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999007727610756	WITHOUT_CLASSIFICATION	9.922723892449934E-5	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999896159322634	WITHOUT_CLASSIFICATION	1.0384067736578703E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999638197503423	WITHOUT_CLASSIFICATION	3.618024965770736E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999493459294598	WITHOUT_CLASSIFICATION	5.065407054023671E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999493459294598	WITHOUT_CLASSIFICATION	5.065407054023671E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999567912947983	WITHOUT_CLASSIFICATION	4.3208705201594335E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999843900100467	WITHOUT_CLASSIFICATION	1.5609989953303674E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999417409649635	WITHOUT_CLASSIFICATION	5.8259035036680635E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999721909192597	WITHOUT_CLASSIFICATION	2.7809080740327138E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999796688541261	WITHOUT_CLASSIFICATION	2.0331145873834427E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998440851727824	WITHOUT_CLASSIFICATION	1.5591482721747328E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9998584361999602	WITHOUT_CLASSIFICATION	1.4156380003992245E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.993754491290147	WITHOUT_CLASSIFICATION	0.006245508709852921	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999517038469034	WITHOUT_CLASSIFICATION	4.8296153096736514E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999526255084528	WITHOUT_CLASSIFICATION	4.737449154714373E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999512959290922	WITHOUT_CLASSIFICATION	4.870407090791902E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999512959290922	WITHOUT_CLASSIFICATION	4.870407090791902E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994319078022181	WITHOUT_CLASSIFICATION	5.68092197781912E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998636307264874	WITHOUT_CLASSIFICATION	1.3636927351260952E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998680758954624	WITHOUT_CLASSIFICATION	1.3192410453747466E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999410448700694	WITHOUT_CLASSIFICATION	5.895512993066959E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9977865230827417	WITHOUT_CLASSIFICATION	0.0022134769172582128	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8091429751507455	WITHOUT_CLASSIFICATION	0.19085702484925454	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8091429751507455	WITHOUT_CLASSIFICATION	0.19085702484925454	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998152684646154	WITHOUT_CLASSIFICATION	1.847315353845206E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999913753318285	WITHOUT_CLASSIFICATION	8.624668171538832E-6	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999906396942241	WITHOUT_CLASSIFICATION	9.360305775919357E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997268906660635	WITHOUT_CLASSIFICATION	2.731093339365677E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999313394230174	WITHOUT_CLASSIFICATION	6.866057698266218E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998460422329205	WITHOUT_CLASSIFICATION	1.5395776707946088E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999812298327312	WITHOUT_CLASSIFICATION	1.87701672688434E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.7560036789122718	WITHOUT_CLASSIFICATION	0.24399632108772812	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999052337335355	WITHOUT_CLASSIFICATION	9.4766266464474E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999052337335355	WITHOUT_CLASSIFICATION	9.4766266464474E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999573084851517	WITHOUT_CLASSIFICATION	4.269151484835431E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9975859047129959	WITHOUT_CLASSIFICATION	0.0024140952870042036	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998331962247408	WITHOUT_CLASSIFICATION	1.668037752592066E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999924933972953	WITHOUT_CLASSIFICATION	7.506602704691586E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999904303146095	WITHOUT_CLASSIFICATION	9.569685390531111E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999998560860974	WITHOUT_CLASSIFICATION	1.4391390261538136E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999176025264238	WITHOUT_CLASSIFICATION	8.239747357620892E-4	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995866599068249	WITHOUT_CLASSIFICATION	4.1334009317516186E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999914556658014	WITHOUT_CLASSIFICATION	8.544334198554875E-6	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997917820301251	WITHOUT_CLASSIFICATION	2.0821796987486772E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997881628295675	WITHOUT_CLASSIFICATION	2.1183717043236734E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999560643118981	WITHOUT_CLASSIFICATION	4.393568810198451E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999953153282987	WITHOUT_CLASSIFICATION	4.684671701303565E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9995799648262185	WITHOUT_CLASSIFICATION	4.200351737814936E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999775732350047	WITHOUT_CLASSIFICATION	2.2426764995301665E-4	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997872526452594	WITHOUT_CLASSIFICATION	2.1274735474054903E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999961025346905	WITHOUT_CLASSIFICATION	3.8974653095052766E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998441171276272	WITHOUT_CLASSIFICATION	1.5588287237276393E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999501292080704	WITHOUT_CLASSIFICATION	4.987079192966601E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999684129281778	WITHOUT_CLASSIFICATION	3.158707182222203E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999842637630959	WITHOUT_CLASSIFICATION	1.5736236904129604E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999693106722	WITHOUT_CLASSIFICATION	3.0689327792106203E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999834471120799	WITHOUT_CLASSIFICATION	1.6552887920120164E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998819701194599	WITHOUT_CLASSIFICATION	1.1802988054017125E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9992699916304038	WITHOUT_CLASSIFICATION	7.30008369596246E-4	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999520626826754	WITHOUT_CLASSIFICATION	4.793731732463253E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999685701619364	WITHOUT_CLASSIFICATION	3.1429838063612804E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999997244648249	WITHOUT_CLASSIFICATION	2.755351751685004E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999556314444034	WITHOUT_CLASSIFICATION	4.436855559657114E-5	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999974593874007	WITHOUT_CLASSIFICATION	2.54061259930307E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999991344023349	WITHOUT_CLASSIFICATION	8.655976650875099E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999881367203244	WITHOUT_CLASSIFICATION	1.1863279675582154E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9996427000926814	WITHOUT_CLASSIFICATION	3.5729990731866036E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996917963300173	WITHOUT_CLASSIFICATION	3.08203669982715E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998826209120243	WITHOUT_CLASSIFICATION	1.1737908797573511E-4	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999715035228334	WITHOUT_CLASSIFICATION	2.8496477166743793E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996917963300173	WITHOUT_CLASSIFICATION	3.08203669982715E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999783950489695	WITHOUT_CLASSIFICATION	2.1604951030500347E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996890524950548	WITHOUT_CLASSIFICATION	3.1094750494524556E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999770697324445	WITHOUT_CLASSIFICATION	2.29302675554899E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999729168896444	WITHOUT_CLASSIFICATION	2.7083110355607798E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999921049393551	WITHOUT_CLASSIFICATION	7.895060644896106E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999921049393551	WITHOUT_CLASSIFICATION	7.895060644896106E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999053791522448	WITHOUT_CLASSIFICATION	9.462084775512775E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999996381770084	WITHOUT_CLASSIFICATION	3.618229915434453E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999995779291556	WITHOUT_CLASSIFICATION	4.220708444002463E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999971557754253	WITHOUT_CLASSIFICATION	2.844224574693542E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999971160115609	WITHOUT_CLASSIFICATION	2.883988439137107E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999603619658344	WITHOUT_CLASSIFICATION	3.963803416550694E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999822867180241	WITHOUT_CLASSIFICATION	1.7713281975867638E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999794398247378	WITHOUT_CLASSIFICATION	2.0560175262266508E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999701844346437	WITHOUT_CLASSIFICATION	2.9815565356195163E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999959761874673	WITHOUT_CLASSIFICATION	4.023812532712949E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999959761874673	WITHOUT_CLASSIFICATION	4.023812532712949E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999417326713709	WITHOUT_CLASSIFICATION	5.8267328629067585E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999237168841322	WITHOUT_CLASSIFICATION	7.628311586780816E-5	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999508378107301	WITHOUT_CLASSIFICATION	4.9162189269841554E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999959761874673	WITHOUT_CLASSIFICATION	4.023812532712949E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999417326713709	WITHOUT_CLASSIFICATION	5.8267328629067585E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999417326713709	WITHOUT_CLASSIFICATION	5.8267328629067585E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.99996546874308	WITHOUT_CLASSIFICATION	3.453125692008582E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999407047452612	WITHOUT_CLASSIFICATION	5.929525473880793E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999839496420004	WITHOUT_CLASSIFICATION	1.605035799963825E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999908296126623	WITHOUT_CLASSIFICATION	9.170387337632551E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994528078729067	WITHOUT_CLASSIFICATION	5.471921270933059E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994528078729067	WITHOUT_CLASSIFICATION	5.471921270933059E-4	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999204783583409	WITHOUT_CLASSIFICATION	7.952164165918232E-5	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997234393517681	WITHOUT_CLASSIFICATION	2.7656064823187006E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999652848612579	WITHOUT_CLASSIFICATION	3.471513874214857E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999918121701568	WITHOUT_CLASSIFICATION	8.187829843206947E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999918121701568	WITHOUT_CLASSIFICATION	8.187829843206947E-5	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9996581663491263	WITHOUT_CLASSIFICATION	3.4183365087368003E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999903014043394	WITHOUT_CLASSIFICATION	9.698595660492967E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9975141830318084	WITHOUT_CLASSIFICATION	0.002485816968191681	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999036371459149	WITHOUT_CLASSIFICATION	9.636285408520296E-5	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999666741754416	WITHOUT_CLASSIFICATION	3.332582455847406E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999632901460327	WITHOUT_CLASSIFICATION	3.670985396743207E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999540839152081	WITHOUT_CLASSIFICATION	4.591608479184987E-5	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.999982535742536	WITHOUT_CLASSIFICATION	1.7464257463961067E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9975141830318084	WITHOUT_CLASSIFICATION	0.002485816968191681	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999467560329824	WITHOUT_CLASSIFICATION	5.32439670175795E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999879697634917	WITHOUT_CLASSIFICATION	1.203023650821289E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999879697634917	WITHOUT_CLASSIFICATION	1.203023650821289E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999988710493585	WITHOUT_CLASSIFICATION	1.1289506414806032E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998602548053394	WITHOUT_CLASSIFICATION	1.397451946606422E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999721551164396	WITHOUT_CLASSIFICATION	2.7844883560420825E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998348509680326	WITHOUT_CLASSIFICATION	1.6514903196734342E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999755611199488	WITHOUT_CLASSIFICATION	2.4438880051094246E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.99976719951201	WITHOUT_CLASSIFICATION	2.3280048799006456E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999246599616469	WITHOUT_CLASSIFICATION	7.534003835308963E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999976536621452	WITHOUT_CLASSIFICATION	2.3463378547105922E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999835749183804	WITHOUT_CLASSIFICATION	1.642508161955274E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999835749183804	WITHOUT_CLASSIFICATION	1.642508161955274E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999577692606392	WITHOUT_CLASSIFICATION	4.223073936089177E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.99998550555796	WITHOUT_CLASSIFICATION	1.4494442040022906E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999030962676954	WITHOUT_CLASSIFICATION	9.690373230457077E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999259487512503	WITHOUT_CLASSIFICATION	7.40512487497257E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999409292877537	WITHOUT_CLASSIFICATION	5.907071224634352E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998826180844714	WITHOUT_CLASSIFICATION	1.1738191552853636E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9991947684866174	WITHOUT_CLASSIFICATION	8.052315133826249E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999316896240187	WITHOUT_CLASSIFICATION	6.831037598140622E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998433916354738	WITHOUT_CLASSIFICATION	1.5660836452628421E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999147614451125	WITHOUT_CLASSIFICATION	8.523855488749623E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9998826180844714	WITHOUT_CLASSIFICATION	1.1738191552853636E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9987975422711909	WITHOUT_CLASSIFICATION	0.0012024577288091102	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998133749398078	WITHOUT_CLASSIFICATION	1.866250601922057E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999543649393975	WITHOUT_CLASSIFICATION	4.5635060602499506E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999389896281563	WITHOUT_CLASSIFICATION	6.101037184366295E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998755214541444	WITHOUT_CLASSIFICATION	1.2447854585554539E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.99990208006409	WITHOUT_CLASSIFICATION	9.791993591003964E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998967579852672	WITHOUT_CLASSIFICATION	1.0324201473282645E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999972765194205	WITHOUT_CLASSIFICATION	2.7234805795025503E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999206802917849	WITHOUT_CLASSIFICATION	7.93197082150532E-5	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9998518419834731	WITHOUT_CLASSIFICATION	1.481580165269654E-4	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999951259799463	WITHOUT_CLASSIFICATION	4.874020053701337E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999308101547141	WITHOUT_CLASSIFICATION	6.918984528591242E-5	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999946582079811	WITHOUT_CLASSIFICATION	5.3417920188952224E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.998843226405934	WITHOUT_CLASSIFICATION	0.001156773594065926	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996794564663857	WITHOUT_CLASSIFICATION	3.205435336142453E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999640077965162	WITHOUT_CLASSIFICATION	3.5992203483762755E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998433916354738	WITHOUT_CLASSIFICATION	1.5660836452628421E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999951259799463	WITHOUT_CLASSIFICATION	4.874020053701337E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999954157183185	WITHOUT_CLASSIFICATION	4.584281681416609E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999082798994238	WITHOUT_CLASSIFICATION	9.172010057622498E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999467483028412	WITHOUT_CLASSIFICATION	5.325169715889298E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998495390715445	WITHOUT_CLASSIFICATION	1.5046092845550507E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999962658031365	WITHOUT_CLASSIFICATION	3.7341968635003804E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9976457963852349	WITHOUT_CLASSIFICATION	0.0023542036147651056	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998460538458382	WITHOUT_CLASSIFICATION	1.5394615416167655E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9996208870379679	WITHOUT_CLASSIFICATION	3.791129620321284E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9996208870379679	WITHOUT_CLASSIFICATION	3.791129620321284E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999987309714108	WITHOUT_CLASSIFICATION	1.2690285892632749E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999898387362964	WITHOUT_CLASSIFICATION	1.0161263703577226E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998533038229022	WITHOUT_CLASSIFICATION	1.4669617709775254E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999029335138665	WITHOUT_CLASSIFICATION	9.70664861335685E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999982491170786	WITHOUT_CLASSIFICATION	1.7508829213975719E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999612708201507	WITHOUT_CLASSIFICATION	3.872917984926131E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999992259795644	WITHOUT_CLASSIFICATION	7.74020435605043E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999007727610756	WITHOUT_CLASSIFICATION	9.922723892449934E-5	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999426597629505	WITHOUT_CLASSIFICATION	5.7340237049598534E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999426597629505	WITHOUT_CLASSIFICATION	5.7340237049598534E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999426597629505	WITHOUT_CLASSIFICATION	5.7340237049598534E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999901244790734	WITHOUT_CLASSIFICATION	9.875520926581452E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999426597629505	WITHOUT_CLASSIFICATION	5.7340237049598534E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999367547750388	WITHOUT_CLASSIFICATION	6.324522496111039E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9995583215306061	WITHOUT_CLASSIFICATION	4.4167846939390155E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999331552312285	WITHOUT_CLASSIFICATION	6.684476877152913E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998433916354738	WITHOUT_CLASSIFICATION	1.5660836452628421E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999951259799463	WITHOUT_CLASSIFICATION	4.874020053701337E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999951259799463	WITHOUT_CLASSIFICATION	4.874020053701337E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999100369629301	WITHOUT_CLASSIFICATION	8.996303706981996E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999796818487238	WITHOUT_CLASSIFICATION	2.0318151276232583E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999896697063004	WITHOUT_CLASSIFICATION	1.0330293699555327E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999645884066433	WITHOUT_CLASSIFICATION	3.541159335664565E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999638197503423	WITHOUT_CLASSIFICATION	3.618024965770736E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999638197503423	WITHOUT_CLASSIFICATION	3.618024965770736E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9998141268618443	WITHOUT_CLASSIFICATION	1.8587313815550944E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999540174921109	WITHOUT_CLASSIFICATION	4.5982507889132024E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999062476061397	WITHOUT_CLASSIFICATION	9.375239386033534E-5	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9998854096246438	WITHOUT_CLASSIFICATION	1.1459037535630657E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9998876246997717	WITHOUT_CLASSIFICATION	1.1237530022837647E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9998481638858032	WITHOUT_CLASSIFICATION	1.5183611419673407E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999493459294598	WITHOUT_CLASSIFICATION	5.065407054023671E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9998478990374181	WITHOUT_CLASSIFICATION	1.5210096258183483E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9998478990374181	WITHOUT_CLASSIFICATION	1.5210096258183483E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999567912947983	WITHOUT_CLASSIFICATION	4.3208705201594335E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999567912947983	WITHOUT_CLASSIFICATION	4.3208705201594335E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996792526450906	WITHOUT_CLASSIFICATION	3.207473549094091E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996792526450906	WITHOUT_CLASSIFICATION	3.207473549094091E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998972839430651	WITHOUT_CLASSIFICATION	1.0271605693492166E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998972839430651	WITHOUT_CLASSIFICATION	1.0271605693492166E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999638197503423	WITHOUT_CLASSIFICATION	3.618024965770736E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999493459294598	WITHOUT_CLASSIFICATION	5.065407054023671E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9998478990374181	WITHOUT_CLASSIFICATION	1.5210096258183483E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9998478990374181	WITHOUT_CLASSIFICATION	1.5210096258183483E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999567912947983	WITHOUT_CLASSIFICATION	4.3208705201594335E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996792526450906	WITHOUT_CLASSIFICATION	3.207473549094091E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996792526450906	WITHOUT_CLASSIFICATION	3.207473549094091E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998972839430651	WITHOUT_CLASSIFICATION	1.0271605693492166E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999959042725414	WITHOUT_CLASSIFICATION	4.0957274586076446E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999168189538713	WITHOUT_CLASSIFICATION	8.318104612870738E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999603008709713	WITHOUT_CLASSIFICATION	3.9699129028760245E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999942938671984	WITHOUT_CLASSIFICATION	5.706132801590455E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.999901620892911	WITHOUT_CLASSIFICATION	9.83791070889893E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9998443693749802	WITHOUT_CLASSIFICATION	1.556306250198753E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9881737870982724	WITHOUT_CLASSIFICATION	0.01182621290172759	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9365906761303758	WITHOUT_CLASSIFICATION	0.06340932386962425	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9993292528934195	WITHOUT_CLASSIFICATION	6.707471065805977E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999945447057799	WITHOUT_CLASSIFICATION	5.455294220164584E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999009767131585	WITHOUT_CLASSIFICATION	9.902328684149998E-5	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999206238698871	WITHOUT_CLASSIFICATION	7.937613011290528E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999053791522448	WITHOUT_CLASSIFICATION	9.462084775512775E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9998443693749802	WITHOUT_CLASSIFICATION	1.556306250198753E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996614768846541	WITHOUT_CLASSIFICATION	3.3852311534591736E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996614768846541	WITHOUT_CLASSIFICATION	3.3852311534591736E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9992172946583892	WITHOUT_CLASSIFICATION	7.82705341610803E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999707520829475	WITHOUT_CLASSIFICATION	2.9247917052506005E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999707520829475	WITHOUT_CLASSIFICATION	2.9247917052506005E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999238972160152	WITHOUT_CLASSIFICATION	7.610278398479737E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999829498345861	WITHOUT_CLASSIFICATION	1.705016541388907E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9989993247612289	WITHOUT_CLASSIFICATION	0.0010006752387711046	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995213552617924	WITHOUT_CLASSIFICATION	4.786447382076099E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995213552617924	WITHOUT_CLASSIFICATION	4.786447382076099E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999796688541261	WITHOUT_CLASSIFICATION	2.0331145873834427E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987798725467517	WITHOUT_CLASSIFICATION	0.0012201274532482188	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987798725467517	WITHOUT_CLASSIFICATION	0.0012201274532482188	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.99993702042546	WITHOUT_CLASSIFICATION	6.297957454003373E-5	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999354295294602	WITHOUT_CLASSIFICATION	6.457047053976003E-5	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999526255084528	WITHOUT_CLASSIFICATION	4.737449154714373E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9998645913054182	WITHOUT_CLASSIFICATION	1.3540869458177028E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998440851727824	WITHOUT_CLASSIFICATION	1.5591482721747328E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.862431156909741	WITHOUT_CLASSIFICATION	0.13756884309025894	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9998576533687662	WITHOUT_CLASSIFICATION	1.4234663123385063E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999373693186353	WITHOUT_CLASSIFICATION	6.263068136466233E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9997392910931187	WITHOUT_CLASSIFICATION	2.6070890688127094E-4	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999484998860255	WITHOUT_CLASSIFICATION	5.15001139744158E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999918604603724	WITHOUT_CLASSIFICATION	8.139539627676106E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999410448700694	WITHOUT_CLASSIFICATION	5.895512993066959E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999991375979617	WITHOUT_CLASSIFICATION	8.624020382427313E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999541298873685	WITHOUT_CLASSIFICATION	4.587011263145144E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9998432407351054	WITHOUT_CLASSIFICATION	1.5675926489459372E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999513453109871	WITHOUT_CLASSIFICATION	4.8654689012953455E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999201132244682	WITHOUT_CLASSIFICATION	7.988677553194558E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999101134723496	WITHOUT_CLASSIFICATION	8.988652765039693E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999718550730731	WITHOUT_CLASSIFICATION	2.814492692702759E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999526255084528	WITHOUT_CLASSIFICATION	4.737449154714373E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999419980076375	WITHOUT_CLASSIFICATION	5.8001992362618656E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999962355560131	WITHOUT_CLASSIFICATION	3.764443986893084E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998530019832526	WITHOUT_CLASSIFICATION	1.4699801674738784E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998440851727824	WITHOUT_CLASSIFICATION	1.5591482721747328E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999718550730731	WITHOUT_CLASSIFICATION	2.814492692702759E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999419980076375	WITHOUT_CLASSIFICATION	5.8001992362618656E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998530019832526	WITHOUT_CLASSIFICATION	1.4699801674738784E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999960544191475	WITHOUT_CLASSIFICATION	3.945580852511108E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999960544191475	WITHOUT_CLASSIFICATION	3.945580852511108E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999512959290922	WITHOUT_CLASSIFICATION	4.870407090791902E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999510485301396	WITHOUT_CLASSIFICATION	4.8951469860359014E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9998968581554414	WITHOUT_CLASSIFICATION	1.0314184455860527E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999983254103114	WITHOUT_CLASSIFICATION	1.6745896886779128E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999796143825628	WITHOUT_CLASSIFICATION	2.0385617437230117E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999896035265207	WITHOUT_CLASSIFICATION	1.0396473479355317E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999974999381679	WITHOUT_CLASSIFICATION	2.5000618321066983E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9994056931820351	WITHOUT_CLASSIFICATION	5.94306817964905E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999839131251704	WITHOUT_CLASSIFICATION	1.6086874829596075E-5	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999974999381679	WITHOUT_CLASSIFICATION	2.5000618321066983E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998636307264874	WITHOUT_CLASSIFICATION	1.3636927351260952E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998510321400047	WITHOUT_CLASSIFICATION	1.4896785999526542E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9998438260542433	WITHOUT_CLASSIFICATION	1.561739457566613E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999718550730731	WITHOUT_CLASSIFICATION	2.814492692702759E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999151357770278	WITHOUT_CLASSIFICATION	8.486422297215613E-5	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999165165473622	WITHOUT_CLASSIFICATION	8.348345263767899E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9981640092633165	WITHOUT_CLASSIFICATION	0.0018359907366834655	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9998795493576638	WITHOUT_CLASSIFICATION	1.2045064233624252E-4	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998177802731762	WITHOUT_CLASSIFICATION	1.8221972682365696E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999947221285735	WITHOUT_CLASSIFICATION	5.277871426404157E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999171247701435	WITHOUT_CLASSIFICATION	8.287522985646827E-5	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998841054036238	WITHOUT_CLASSIFICATION	1.1589459637614237E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999534717278005	WITHOUT_CLASSIFICATION	4.652827219944169E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999558844945844	WITHOUT_CLASSIFICATION	4.411550541554711E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999100369629301	WITHOUT_CLASSIFICATION	8.996303706981996E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995004839994656	WITHOUT_CLASSIFICATION	4.995160005344263E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999410448700694	WITHOUT_CLASSIFICATION	5.895512993066959E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999334310737372	WITHOUT_CLASSIFICATION	6.656892626281182E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999118778753233	WITHOUT_CLASSIFICATION	8.812212467673605E-5	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999800024809677	WITHOUT_CLASSIFICATION	1.9997519032299787E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999698344219218	WITHOUT_CLASSIFICATION	3.0165578078205557E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999702699127947	WITHOUT_CLASSIFICATION	2.9730087205256483E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999483852304429	WITHOUT_CLASSIFICATION	5.161476955716574E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998790043199	WITHOUT_CLASSIFICATION	1.2099568016998282E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999553184855652	WITHOUT_CLASSIFICATION	4.468151443478504E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999967085797886	WITHOUT_CLASSIFICATION	3.291420211396856E-5	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998719604038264	WITHOUT_CLASSIFICATION	1.280395961735629E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998434324621086	WITHOUT_CLASSIFICATION	1.565675378913901E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998434324621086	WITHOUT_CLASSIFICATION	1.565675378913901E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998026618785442	WITHOUT_CLASSIFICATION	1.9733812145570796E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999922759884317	WITHOUT_CLASSIFICATION	7.724011568303185E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999903997505244	WITHOUT_CLASSIFICATION	9.600249475596973E-5	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999896770707449	WITHOUT_CLASSIFICATION	1.03229292551042E-4	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998070007024856	WITHOUT_CLASSIFICATION	1.929992975143382E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9994747101628392	WITHOUT_CLASSIFICATION	5.25289837160791E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997668834801898	WITHOUT_CLASSIFICATION	2.3311651981012326E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999521193649133	WITHOUT_CLASSIFICATION	4.788063508656331E-5	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998730616122407	WITHOUT_CLASSIFICATION	1.2693838775930592E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998438679546886	WITHOUT_CLASSIFICATION	1.5613204531144005E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999555686827648	WITHOUT_CLASSIFICATION	4.443131723521817E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9978953093612707	WITHOUT_CLASSIFICATION	0.002104690638729288	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9989186644859238	WITHOUT_CLASSIFICATION	0.0010813355140761667	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999312142932733	WITHOUT_CLASSIFICATION	6.878570672680591E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999943814414374	WITHOUT_CLASSIFICATION	5.6185585626076175E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9977994637857388	WITHOUT_CLASSIFICATION	0.0022005362142611474	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999553512649063	WITHOUT_CLASSIFICATION	4.464873509371212E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999718747439792	WITHOUT_CLASSIFICATION	2.8125256020761336E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.997437690067076	WITHOUT_CLASSIFICATION	0.0025623099329238857	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999243519340335	WITHOUT_CLASSIFICATION	7.564806596641907E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999243519340335	WITHOUT_CLASSIFICATION	7.564806596641907E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998951537219658	WITHOUT_CLASSIFICATION	1.0484627803421134E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998951537219658	WITHOUT_CLASSIFICATION	1.0484627803421134E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999967085797886	WITHOUT_CLASSIFICATION	3.291420211396856E-5	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9804221388754193	WITHOUT_CLASSIFICATION	0.019577861124580636	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993948270258344	WITHOUT_CLASSIFICATION	6.05172974165565E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997617057495183	WITHOUT_CLASSIFICATION	2.3829425048170995E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993948270258344	WITHOUT_CLASSIFICATION	6.05172974165565E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997617057495183	WITHOUT_CLASSIFICATION	2.3829425048170995E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998306211339818	WITHOUT_CLASSIFICATION	1.6937886601821534E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9979825171956508	WITHOUT_CLASSIFICATION	0.0020174828043493034	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999403483517123	WITHOUT_CLASSIFICATION	5.9651648287731794E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999887785088705	WITHOUT_CLASSIFICATION	1.1221491129420576E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997523991490918	WITHOUT_CLASSIFICATION	2.4760085090828323E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999340379240239	WITHOUT_CLASSIFICATION	6.596207597607415E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996736375971529	WITHOUT_CLASSIFICATION	3.2636240284708183E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9991044955100518	WITHOUT_CLASSIFICATION	8.955044899481816E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994383550624862	WITHOUT_CLASSIFICATION	5.616449375137559E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999994943203536	WITHOUT_CLASSIFICATION	5.056796463156206E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999800986150135	WITHOUT_CLASSIFICATION	1.9901384986458516E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999902988890285	WITHOUT_CLASSIFICATION	9.701110971504458E-5	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999884368823806	WITHOUT_CLASSIFICATION	1.1563117619364068E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999672417965803	WITHOUT_CLASSIFICATION	3.275820341977404E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999672417965803	WITHOUT_CLASSIFICATION	3.275820341977404E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9983135316413277	WITHOUT_CLASSIFICATION	0.0016864683586722054	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9983135316413277	WITHOUT_CLASSIFICATION	0.0016864683586722054	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9995563674439768	WITHOUT_CLASSIFICATION	4.4363255602316686E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998306211339818	WITHOUT_CLASSIFICATION	1.6937886601821534E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999849659125171	WITHOUT_CLASSIFICATION	1.5034087482900928E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996504980892021	WITHOUT_CLASSIFICATION	3.4950191079783933E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997062636860363	WITHOUT_CLASSIFICATION	2.9373631396359694E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995984325726521	WITHOUT_CLASSIFICATION	4.015674273478737E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8852458042085459	WITHOUT_CLASSIFICATION	0.11475419579145406	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998306211339818	WITHOUT_CLASSIFICATION	1.6937886601821534E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995984325726521	WITHOUT_CLASSIFICATION	4.015674273478737E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8852458042085459	WITHOUT_CLASSIFICATION	0.11475419579145406	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998918928505642	WITHOUT_CLASSIFICATION	1.0810714943584254E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999576643813798	WITHOUT_CLASSIFICATION	4.233561862023309E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999910627168326	WITHOUT_CLASSIFICATION	8.937283167394419E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998306211339818	WITHOUT_CLASSIFICATION	1.6937886601821534E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998306211339818	WITHOUT_CLASSIFICATION	1.6937886601821534E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999461201543552	WITHOUT_CLASSIFICATION	5.387984564467642E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999408199186081	WITHOUT_CLASSIFICATION	5.918008139199859E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999587160548764	WITHOUT_CLASSIFICATION	4.128394512371228E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999208833377862	WITHOUT_CLASSIFICATION	7.911666221381022E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998057759396746	WITHOUT_CLASSIFICATION	1.9422406032552163E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999961793968803	WITHOUT_CLASSIFICATION	3.820603119705296E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999852054340943	WITHOUT_CLASSIFICATION	1.4794565905760718E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999598288894023	WITHOUT_CLASSIFICATION	4.017111059769489E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998971725929542	WITHOUT_CLASSIFICATION	1.0282740704578434E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999500609422441	WITHOUT_CLASSIFICATION	4.993905775592842E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999685314980753	WITHOUT_CLASSIFICATION	3.1468501924815374E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999950089173177	WITHOUT_CLASSIFICATION	4.99108268235084E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999958843057963	WITHOUT_CLASSIFICATION	4.115694203718101E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999591774209589	WITHOUT_CLASSIFICATION	4.082257904121944E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999881851000934	WITHOUT_CLASSIFICATION	1.1814899906605533E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973089342435	WITHOUT_CLASSIFICATION	2.691065756417264E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997268906660635	WITHOUT_CLASSIFICATION	2.731093339365677E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998161606033664	WITHOUT_CLASSIFICATION	1.838393966336266E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.999818632564563	WITHOUT_CLASSIFICATION	1.8136743543705278E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997617057495183	WITHOUT_CLASSIFICATION	2.3829425048170995E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999042081632451	WITHOUT_CLASSIFICATION	9.579183675496514E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997268906660635	WITHOUT_CLASSIFICATION	2.731093339365677E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9164090527371911	WITHOUT_CLASSIFICATION	0.08359094726280894	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999991056277755	WITHOUT_CLASSIFICATION	8.943722246077216E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9993553940746236	WITHOUT_CLASSIFICATION	6.446059253763276E-4	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999207819988055	WITHOUT_CLASSIFICATION	7.921800119439163E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998958550835464	WITHOUT_CLASSIFICATION	1.0414491645355424E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999586498967986	WITHOUT_CLASSIFICATION	4.135010320130128E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9981061317761668	WITHOUT_CLASSIFICATION	0.0018938682238331015	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999929649917919	WITHOUT_CLASSIFICATION	7.035008207968349E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999770384314755	WITHOUT_CLASSIFICATION	2.2961568524600284E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999514798742427	WITHOUT_CLASSIFICATION	4.852012575722791E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9983276778697824	WITHOUT_CLASSIFICATION	0.0016723221302177012	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998764028580422	WITHOUT_CLASSIFICATION	1.2359714195772845E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999967327887218	WITHOUT_CLASSIFICATION	3.2672112781566137E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495817553142	WITHOUT_CLASSIFICATION	5.041824468571743E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9993710183597473	WITHOUT_CLASSIFICATION	6.28981640252789E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999785782802213	WITHOUT_CLASSIFICATION	2.1421719778657965E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9970070449565328	WITHOUT_CLASSIFICATION	0.002992955043467206	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999347647572157	WITHOUT_CLASSIFICATION	6.523524278437002E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999331172337728	WITHOUT_CLASSIFICATION	6.688276622725368E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996593106384797	WITHOUT_CLASSIFICATION	3.4068936152028493E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999873857240573	WITHOUT_CLASSIFICATION	1.2614275942762548E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266649001566	WITHOUT_CLASSIFICATION	7.333509984337948E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275143873342	WITHOUT_CLASSIFICATION	7.248561266581392E-5	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999363676370703	WITHOUT_CLASSIFICATION	6.3632362929806E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999869558493158	WITHOUT_CLASSIFICATION	1.3044150684210197E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339473356731	WITHOUT_CLASSIFICATION	6.605266432693168E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999987672276832	WITHOUT_CLASSIFICATION	1.2327723168385972E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999986971023312	WITHOUT_CLASSIFICATION	1.3028976687689264E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830264757724	WITHOUT_CLASSIFICATION	1.6973524227578107E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898426249844	WITHOUT_CLASSIFICATION	1.015737501559971E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999347153449346	WITHOUT_CLASSIFICATION	6.528465506536417E-5	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999615577914501	WITHOUT_CLASSIFICATION	3.8442208549892E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298328968351	WITHOUT_CLASSIFICATION	7.016710316484282E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999171584907365	WITHOUT_CLASSIFICATION	8.284150926356551E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999440560867182	WITHOUT_CLASSIFICATION	5.594391328191685E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998782088410664	WITHOUT_CLASSIFICATION	1.2179115893375765E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997388480719169	WITHOUT_CLASSIFICATION	2.611519280830015E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999618035144201	WITHOUT_CLASSIFICATION	3.819648557992042E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999997718628159	WITHOUT_CLASSIFICATION	2.2813718411107255E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998161381516599	WITHOUT_CLASSIFICATION	1.8386184834013862E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998950891416463	WITHOUT_CLASSIFICATION	1.0491085835367768E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998224905650178	WITHOUT_CLASSIFICATION	1.7750943498223275E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998918928505642	WITHOUT_CLASSIFICATION	1.0810714943584254E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999516790404022	WITHOUT_CLASSIFICATION	4.832095959788916E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999523558373294	WITHOUT_CLASSIFICATION	4.764416267047562E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999207575891884	WITHOUT_CLASSIFICATION	7.924241081161937E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999316513952197	WITHOUT_CLASSIFICATION	6.834860478030945E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999522127561001	WITHOUT_CLASSIFICATION	4.77872438998123E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999748645676317	WITHOUT_CLASSIFICATION	2.5135432368164836E-5	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999021788454201	WITHOUT_CLASSIFICATION	9.782115457990404E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9993966014360167	WITHOUT_CLASSIFICATION	6.033985639833475E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997380403475988	WITHOUT_CLASSIFICATION	2.6195965240113114E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998777409428038	WITHOUT_CLASSIFICATION	1.2225905719610996E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999103919100039	WITHOUT_CLASSIFICATION	8.9608089996228E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999862127157006	WITHOUT_CLASSIFICATION	1.378728429940824E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998819977386635	WITHOUT_CLASSIFICATION	1.1800226133651284E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9960891486150076	WITHOUT_CLASSIFICATION	0.003910851384992427	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9996135378501416	WITHOUT_CLASSIFICATION	3.86462149858371E-4	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999594221851468	WITHOUT_CLASSIFICATION	4.05778148532963E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9992827288680953	WITHOUT_CLASSIFICATION	7.172711319046688E-4	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998992316769298	WITHOUT_CLASSIFICATION	1.007683230700807E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999249724928706	WITHOUT_CLASSIFICATION	7.502750712940292E-5	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998647155566552	WITHOUT_CLASSIFICATION	1.35284443344836E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999385731755402	WITHOUT_CLASSIFICATION	6.142682445973612E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999950066535754	WITHOUT_CLASSIFICATION	4.993346424588513E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997190379208296	WITHOUT_CLASSIFICATION	2.809620791702822E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998857114391912	WITHOUT_CLASSIFICATION	1.1428856080876645E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997330595777952	WITHOUT_CLASSIFICATION	2.669404222047747E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996494581329031	WITHOUT_CLASSIFICATION	3.5054186709690177E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998161381516599	WITHOUT_CLASSIFICATION	1.8386184834013862E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998447975170619	WITHOUT_CLASSIFICATION	1.5520248293801546E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999656464536747	WITHOUT_CLASSIFICATION	3.435354632535465E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999400228495964	WITHOUT_CLASSIFICATION	5.997715040354165E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999618035144201	WITHOUT_CLASSIFICATION	3.819648557992042E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998808405508482	WITHOUT_CLASSIFICATION	1.1915944915167626E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999468732803717	WITHOUT_CLASSIFICATION	5.31267196283535E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9983303819837056	WITHOUT_CLASSIFICATION	0.001669618016294457	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9986181330785019	WITHOUT_CLASSIFICATION	0.001381866921498095	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998301135147128	WITHOUT_CLASSIFICATION	1.698864852872529E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998626387695198	WITHOUT_CLASSIFICATION	1.3736123048026404E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998918043117009	WITHOUT_CLASSIFICATION	1.0819568829912805E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997785350701333	WITHOUT_CLASSIFICATION	2.214649298667219E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999461522970416	WITHOUT_CLASSIFICATION	5.3847702958403877E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999647926188822	WITHOUT_CLASSIFICATION	3.520738111777725E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997260423661191	WITHOUT_CLASSIFICATION	2.7395763388093447E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999392879216615	WITHOUT_CLASSIFICATION	6.071207833850842E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998918928505642	WITHOUT_CLASSIFICATION	1.0810714943584254E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999618487470068	WITHOUT_CLASSIFICATION	3.8151252993256615E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999916306952813	WITHOUT_CLASSIFICATION	8.36930471867244E-6	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998268430006167	WITHOUT_CLASSIFICATION	1.731569993831661E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999862627245022	WITHOUT_CLASSIFICATION	1.3737275497738284E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998852970134942	WITHOUT_CLASSIFICATION	1.1470298650586434E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996568363903445	WITHOUT_CLASSIFICATION	3.431636096555208E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999217040702382	WITHOUT_CLASSIFICATION	7.829592976180468E-5	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999341391354698	WITHOUT_CLASSIFICATION	6.586086453016973E-5	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999212654228625	WITHOUT_CLASSIFICATION	7.873457713743293E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.993754491290147	WITHOUT_CLASSIFICATION	0.006245508709852921	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999063090944567	WITHOUT_CLASSIFICATION	9.369090554329336E-5	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998267196999541	WITHOUT_CLASSIFICATION	1.7328030004601066E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999618035144201	WITHOUT_CLASSIFICATION	3.819648557992042E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998161381516599	WITHOUT_CLASSIFICATION	1.8386184834013862E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9985798032234463	WITHOUT_CLASSIFICATION	0.001420196776553745	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999994585032778	WITHOUT_CLASSIFICATION	5.414967222006982E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9943257141449451	WITHOUT_CLASSIFICATION	0.005674285855055027	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998161381516599	WITHOUT_CLASSIFICATION	1.8386184834013862E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999093630498134	WITHOUT_CLASSIFICATION	9.063695018666633E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999862627245022	WITHOUT_CLASSIFICATION	1.3737275497738284E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9959084329185064	WITHOUT_CLASSIFICATION	0.004091567081493575	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9924839898541112	WITHOUT_CLASSIFICATION	0.007516010145888781	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999614226924074	WITHOUT_CLASSIFICATION	3.857730759260891E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998626387695198	WITHOUT_CLASSIFICATION	1.3736123048026404E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998918043117009	WITHOUT_CLASSIFICATION	1.0819568829912805E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997785350701333	WITHOUT_CLASSIFICATION	2.214649298667219E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999903835954803	WITHOUT_CLASSIFICATION	9.616404519626123E-6	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.999928910966885	WITHOUT_CLASSIFICATION	7.108903311499956E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999385268023577	WITHOUT_CLASSIFICATION	6.147319764236188E-5	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999314161684941	WITHOUT_CLASSIFICATION	6.858383150590003E-5	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9994983886655583	WITHOUT_CLASSIFICATION	5.016113344417576E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998161381516599	WITHOUT_CLASSIFICATION	1.8386184834013862E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999461522970416	WITHOUT_CLASSIFICATION	5.3847702958403877E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999647926188822	WITHOUT_CLASSIFICATION	3.520738111777725E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954250569068	WITHOUT_CLASSIFICATION	4.574943093289268E-6	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999348588530357	WITHOUT_CLASSIFICATION	6.514114696431079E-5	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999433849116957	WITHOUT_CLASSIFICATION	5.661508830433761E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998156747917645	WITHOUT_CLASSIFICATION	1.8432520823549918E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9988109506137965	WITHOUT_CLASSIFICATION	0.0011890493862035225	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9991341304044756	WITHOUT_CLASSIFICATION	8.658695955244649E-4	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998909200573636	WITHOUT_CLASSIFICATION	1.0907994263642312E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998919137966003	WITHOUT_CLASSIFICATION	1.0808620339978967E-4	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999846125395937	WITHOUT_CLASSIFICATION	1.5387460406291474E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999100369629301	WITHOUT_CLASSIFICATION	8.996303706981996E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339473356731	WITHOUT_CLASSIFICATION	6.605266432693168E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898426249844	WITHOUT_CLASSIFICATION	1.015737501559971E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999100369629301	WITHOUT_CLASSIFICATION	8.996303706981996E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999988798405726	WITHOUT_CLASSIFICATION	1.1201594274510817E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999469951930694	WITHOUT_CLASSIFICATION	5.300480693046799E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999574455381438	WITHOUT_CLASSIFICATION	4.255446185623317E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9928573552857433	WITHOUT_CLASSIFICATION	0.007142644714256747	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998952276498474	WITHOUT_CLASSIFICATION	1.0477235015267844E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999347153449346	WITHOUT_CLASSIFICATION	6.528465506536417E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295934359633	WITHOUT_CLASSIFICATION	7.040656403670252E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999950066535754	WITHOUT_CLASSIFICATION	4.993346424588513E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9987905099120714	WITHOUT_CLASSIFICATION	0.001209490087928647	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9994808582033878	WITHOUT_CLASSIFICATION	5.191417966121583E-4	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999823230363718	WITHOUT_CLASSIFICATION	1.7676963628259264E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998735226183861	WITHOUT_CLASSIFICATION	1.2647738161375826E-4	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999986784524612	WITHOUT_CLASSIFICATION	1.3215475388545786E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999150266785848	WITHOUT_CLASSIFICATION	8.497332141524783E-5	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9997568957014631	WITHOUT_CLASSIFICATION	2.4310429853686318E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999929649917919	WITHOUT_CLASSIFICATION	7.035008207968349E-6	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997828886455741	WITHOUT_CLASSIFICATION	2.171113544259005E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999703242449837	WITHOUT_CLASSIFICATION	2.9675755016289204E-5	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999379743237042	WITHOUT_CLASSIFICATION	6.202567629578606E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999860876495383	WITHOUT_CLASSIFICATION	1.3912350461662683E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999949439529825	WITHOUT_CLASSIFICATION	5.0560470175260525E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999175073902301	WITHOUT_CLASSIFICATION	8.249260976989463E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999365639308482	WITHOUT_CLASSIFICATION	6.343606915177713E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999107020974592	WITHOUT_CLASSIFICATION	8.929790254066025E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999778979045565	WITHOUT_CLASSIFICATION	2.2102095443496676E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997475429294128	WITHOUT_CLASSIFICATION	2.5245707058719406E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995712044067162	WITHOUT_CLASSIFICATION	4.2879559328380396E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9940718167071003	WITHOUT_CLASSIFICATION	0.0059281832928996464	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996393143933197	WITHOUT_CLASSIFICATION	3.6068560668029435E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997843883050624	WITHOUT_CLASSIFICATION	2.1561169493752158E-4	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996120224969397	WITHOUT_CLASSIFICATION	3.879775030603505E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999449257481972	WITHOUT_CLASSIFICATION	5.5074251802951064E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996393143933197	WITHOUT_CLASSIFICATION	3.6068560668029435E-4	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999839583932181	WITHOUT_CLASSIFICATION	1.6041606781906506E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996603279707134	WITHOUT_CLASSIFICATION	3.396720292867438E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474442727411	WITHOUT_CLASSIFICATION	5.2555727258895305E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999588121011972	WITHOUT_CLASSIFICATION	4.118789880272154E-5	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997278150807286	WITHOUT_CLASSIFICATION	2.7218491927142566E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999882651800237	WITHOUT_CLASSIFICATION	1.1734819976148873E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999560370395926	WITHOUT_CLASSIFICATION	4.396296040745052E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999943225047614	WITHOUT_CLASSIFICATION	5.6774952385923125E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999943225047614	WITHOUT_CLASSIFICATION	5.6774952385923125E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999843368999266	WITHOUT_CLASSIFICATION	1.566310007339878E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999180528853886	WITHOUT_CLASSIFICATION	8.194711461141637E-5	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998022870975388	WITHOUT_CLASSIFICATION	1.9771290246117532E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999618185591702	WITHOUT_CLASSIFICATION	3.818144082981136E-5	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9970508217892099	WITHOUT_CLASSIFICATION	0.00294917821079004	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999235892173064	WITHOUT_CLASSIFICATION	7.641078269358451E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999805048821011	WITHOUT_CLASSIFICATION	1.9495117898928415E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999835953836157	WITHOUT_CLASSIFICATION	1.640461638431389E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9993780342300081	WITHOUT_CLASSIFICATION	6.219657699917714E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999955583345226	WITHOUT_CLASSIFICATION	4.441665477459636E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999816178106081	WITHOUT_CLASSIFICATION	1.8382189391917325E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999402715443925	WITHOUT_CLASSIFICATION	5.972845560745515E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999971901698048	WITHOUT_CLASSIFICATION	2.8098301952154812E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9994224795257635	WITHOUT_CLASSIFICATION	5.775204742365906E-4	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999268420120029	WITHOUT_CLASSIFICATION	7.315798799707629E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9997026185142427	WITHOUT_CLASSIFICATION	2.9738148575729386E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994512023927364	WITHOUT_CLASSIFICATION	5.487976072635509E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.99870435851896	WITHOUT_CLASSIFICATION	0.0012956414810400896	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999799051418793	WITHOUT_CLASSIFICATION	2.0094858120639272E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999131678575746	WITHOUT_CLASSIFICATION	8.683214242547179E-5	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999612982948805	WITHOUT_CLASSIFICATION	3.8701705119518405E-5	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999375607783014	WITHOUT_CLASSIFICATION	6.243922169857244E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999843680767455	WITHOUT_CLASSIFICATION	1.56319232545894E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999860661541006	WITHOUT_CLASSIFICATION	1.3933845899543212E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999473356981882	WITHOUT_CLASSIFICATION	5.266430181185656E-5	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997297427308357	WITHOUT_CLASSIFICATION	2.702572691642546E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999416574287237	WITHOUT_CLASSIFICATION	5.834257127630244E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996919263819247	WITHOUT_CLASSIFICATION	3.0807361807524725E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9344976124184247	WITHOUT_CLASSIFICATION	0.06550238758157531	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993265938546311	WITHOUT_CLASSIFICATION	6.734061453689646E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999542043598741	WITHOUT_CLASSIFICATION	4.5795640125860275E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999685940398898	WITHOUT_CLASSIFICATION	3.140596011018678E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999317811578046	WITHOUT_CLASSIFICATION	6.821884219546231E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998935880391523	WITHOUT_CLASSIFICATION	1.0641196084778259E-4	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998239361393069	WITHOUT_CLASSIFICATION	1.760638606931797E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999400180096574	WITHOUT_CLASSIFICATION	5.9981990342603145E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9973346760383581	WITHOUT_CLASSIFICATION	0.002665323961641821	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999897390457388	WITHOUT_CLASSIFICATION	1.02609542612251E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9113060654059127	WITHOUT_CLASSIFICATION	0.08869393459408731	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999885732971634	WITHOUT_CLASSIFICATION	1.142670283666866E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999651355889961	WITHOUT_CLASSIFICATION	3.4864411003889396E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998918928505642	WITHOUT_CLASSIFICATION	1.0810714943584254E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998918928505642	WITHOUT_CLASSIFICATION	1.0810714943584254E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999736113543852	WITHOUT_CLASSIFICATION	2.6388645614799087E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997804535695152	WITHOUT_CLASSIFICATION	2.1954643048486386E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999601743556208	WITHOUT_CLASSIFICATION	3.9825644379267114E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999893212738392	WITHOUT_CLASSIFICATION	1.0678726160695851E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999616480036772	WITHOUT_CLASSIFICATION	3.8351996322820117E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9997188024525254	WITHOUT_CLASSIFICATION	2.8119754747448454E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999512068259335	WITHOUT_CLASSIFICATION	4.87931740665016E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999998052322702	WITHOUT_CLASSIFICATION	1.9476772979042667E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999994516393358	WITHOUT_CLASSIFICATION	5.483606642888124E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999801277081415	WITHOUT_CLASSIFICATION	1.9872291858496477E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998448595624778	WITHOUT_CLASSIFICATION	1.5514043752207286E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999993492762921	WITHOUT_CLASSIFICATION	6.507237079041744E-6	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997584790963091	WITHOUT_CLASSIFICATION	2.4152090369089428E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999134770015096	WITHOUT_CLASSIFICATION	8.652299849048164E-5	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998924975889192	WITHOUT_CLASSIFICATION	1.0750241108085122E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999684740913575	WITHOUT_CLASSIFICATION	3.152590864244443E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999368242897173	WITHOUT_CLASSIFICATION	6.317571028265834E-5	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9995259924942363	WITHOUT_CLASSIFICATION	4.7400750576361516E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998460140614654	WITHOUT_CLASSIFICATION	1.5398593853452978E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998387345251515	WITHOUT_CLASSIFICATION	1.6126547484847796E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9995259924942363	WITHOUT_CLASSIFICATION	4.7400750576361516E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999825038823267	WITHOUT_CLASSIFICATION	1.749611767326414E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999419611899811	WITHOUT_CLASSIFICATION	5.8038810018969464E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999809384083522	WITHOUT_CLASSIFICATION	1.9061591647739016E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998694050546509	WITHOUT_CLASSIFICATION	1.3059494534897853E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999567817679568	WITHOUT_CLASSIFICATION	4.3218232043239467E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999952456455875	WITHOUT_CLASSIFICATION	4.754354412471576E-6	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997373359933409	WITHOUT_CLASSIFICATION	2.6266400665914786E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999933151301363	WITHOUT_CLASSIFICATION	6.684869863703389E-5	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9987320162647796	WITHOUT_CLASSIFICATION	0.0012679837352203233	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998799083652723	WITHOUT_CLASSIFICATION	1.2009163472767736E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999088902582036	WITHOUT_CLASSIFICATION	9.110974179629023E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999011395348972	WITHOUT_CLASSIFICATION	9.886046510275215E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999774220391859	WITHOUT_CLASSIFICATION	2.2577960813976274E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999942959712216	WITHOUT_CLASSIFICATION	5.704028778327849E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998766649497676	WITHOUT_CLASSIFICATION	1.233350502324257E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999044782010043	WITHOUT_CLASSIFICATION	9.552179899574322E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996940876575457	WITHOUT_CLASSIFICATION	3.059123424542575E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999832676586421	WITHOUT_CLASSIFICATION	1.6732341357905746E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9888414225337828	WITHOUT_CLASSIFICATION	0.011158577466217196	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998411778344568	WITHOUT_CLASSIFICATION	1.5882216554330794E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999829451186851	WITHOUT_CLASSIFICATION	1.705488131484785E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999269366315479	WITHOUT_CLASSIFICATION	7.30633684521846E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9975606289400195	WITHOUT_CLASSIFICATION	0.0024393710599804885	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999757339969889	WITHOUT_CLASSIFICATION	2.4266003011074894E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999794349308	WITHOUT_CLASSIFICATION	2.0565069162341317E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998927451222579	WITHOUT_CLASSIFICATION	1.0725487774208301E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9971591698194877	WITHOUT_CLASSIFICATION	0.002840830180512279	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998468743063426	WITHOUT_CLASSIFICATION	1.5312569365750797E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999175073902301	WITHOUT_CLASSIFICATION	8.249260976989463E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9990987355709603	WITHOUT_CLASSIFICATION	9.012644290397142E-4	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999388864129811	WITHOUT_CLASSIFICATION	6.111358701883031E-5	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9723321233478509	WITHOUT_CLASSIFICATION	0.02766787665214908	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999624943855137	WITHOUT_CLASSIFICATION	3.7505614486344845E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997819862958406	WITHOUT_CLASSIFICATION	2.1801370415938133E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998832153079272	WITHOUT_CLASSIFICATION	1.1678469207282912E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9963924893730621	WITHOUT_CLASSIFICATION	0.003607510626937805	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999788532615701	WITHOUT_CLASSIFICATION	2.1146738429926557E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999867419697566	WITHOUT_CLASSIFICATION	1.325803024348701E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999868971112084	WITHOUT_CLASSIFICATION	1.310288879164171E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999992255912893	WITHOUT_CLASSIFICATION	7.744087107049988E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999807132499744	WITHOUT_CLASSIFICATION	1.9286750025648628E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9986806031003282	WITHOUT_CLASSIFICATION	0.0013193968996718223	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996004096344455	WITHOUT_CLASSIFICATION	3.995903655545563E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999937503235595	WITHOUT_CLASSIFICATION	6.2496764404516995E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998572475440988	WITHOUT_CLASSIFICATION	1.42752455901325E-4	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999412857047838	WITHOUT_CLASSIFICATION	5.871429521632966E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999836367438434	WITHOUT_CLASSIFICATION	1.6363256156616283E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999529697847203	WITHOUT_CLASSIFICATION	4.703021527972338E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999918501655037	WITHOUT_CLASSIFICATION	8.149834496258739E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999981222503736	WITHOUT_CLASSIFICATION	1.8777496263965374E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999929918514749	WITHOUT_CLASSIFICATION	7.008148524941419E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999444087768389	WITHOUT_CLASSIFICATION	5.559122316116075E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998292961679119	WITHOUT_CLASSIFICATION	1.7070383208816578E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999843641617969	WITHOUT_CLASSIFICATION	1.5635838203129703E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991511480977174	WITHOUT_CLASSIFICATION	8.488519022825321E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999957828623992	WITHOUT_CLASSIFICATION	4.217137600775681E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9970140362575963	WITHOUT_CLASSIFICATION	0.0029859637424035856	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999440875814976	WITHOUT_CLASSIFICATION	5.5912418502419374E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998101120951824	WITHOUT_CLASSIFICATION	1.8988790481760874E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998416285387166	WITHOUT_CLASSIFICATION	1.5837146128342078E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998288289955772	WITHOUT_CLASSIFICATION	1.7117100442272834E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998150964119703	WITHOUT_CLASSIFICATION	1.8490358802978935E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999424545725992	WITHOUT_CLASSIFICATION	5.754542740083674E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999895429420733	WITHOUT_CLASSIFICATION	1.0457057926749687E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9981872482347101	WITHOUT_CLASSIFICATION	0.0018127517652899569	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998543123519386	WITHOUT_CLASSIFICATION	1.4568764806146444E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998073351891001	WITHOUT_CLASSIFICATION	1.926648108998364E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998543123519386	WITHOUT_CLASSIFICATION	1.4568764806146444E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993199575592853	WITHOUT_CLASSIFICATION	6.80042440714882E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999673751801129	WITHOUT_CLASSIFICATION	3.2624819887124255E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999429679926595	WITHOUT_CLASSIFICATION	5.7032007340534205E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999678573802607	WITHOUT_CLASSIFICATION	3.2142619739234694E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9997763433610499	WITHOUT_CLASSIFICATION	2.2365663895006728E-4	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9995020216456478	WITHOUT_CLASSIFICATION	4.979783543520805E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999583680860684	WITHOUT_CLASSIFICATION	4.163191393155556E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9979063211510959	WITHOUT_CLASSIFICATION	0.002093678848904122	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999980147524037	WITHOUT_CLASSIFICATION	1.9852475963127397E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999982754956358	WITHOUT_CLASSIFICATION	1.7245043642201753E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999707138909912	WITHOUT_CLASSIFICATION	2.928610900886313E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999153867590359	WITHOUT_CLASSIFICATION	8.461324096419552E-5	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9994542798689282	WITHOUT_CLASSIFICATION	5.457201310716939E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9442354582900047	WITHOUT_CLASSIFICATION	0.05576454170999527	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999962454927351	WITHOUT_CLASSIFICATION	3.7545072648771986E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998944922383158	WITHOUT_CLASSIFICATION	1.0550776168418897E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999727029816684	WITHOUT_CLASSIFICATION	2.7297018331609878E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999727029816684	WITHOUT_CLASSIFICATION	2.7297018331609878E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999799685913111	WITHOUT_CLASSIFICATION	2.0031408688898753E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999573225396989	WITHOUT_CLASSIFICATION	4.267746030101011E-5	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999910132775417	WITHOUT_CLASSIFICATION	8.986722458278796E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998202042069845	WITHOUT_CLASSIFICATION	1.7979579301563185E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999559839474281	WITHOUT_CLASSIFICATION	4.4016052571818264E-5	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9997320327016036	WITHOUT_CLASSIFICATION	2.679672983963282E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9991316113595096	WITHOUT_CLASSIFICATION	8.68388640490423E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998885799912013	WITHOUT_CLASSIFICATION	1.1142000879879272E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999783769424289	WITHOUT_CLASSIFICATION	2.162305757115279E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999359253566312	WITHOUT_CLASSIFICATION	6.407464336875843E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999357248460424	WITHOUT_CLASSIFICATION	6.427515395758114E-5	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999966114672728	WITHOUT_CLASSIFICATION	3.3885327271705497E-6	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999463397173347	WITHOUT_CLASSIFICATION	5.366028266535849E-5	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999802174488088	WITHOUT_CLASSIFICATION	1.9782551191124323E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997757491304127	WITHOUT_CLASSIFICATION	2.2425086958743277E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999228462342571	WITHOUT_CLASSIFICATION	7.71537657429256E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998630926935579	WITHOUT_CLASSIFICATION	1.3690730644203025E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995595438422551	WITHOUT_CLASSIFICATION	4.4045615774491775E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.99985866535376	WITHOUT_CLASSIFICATION	1.413346462401356E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999899804700284	WITHOUT_CLASSIFICATION	1.00195299716244E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999855732988637	WITHOUT_CLASSIFICATION	1.4426701136413983E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999649489456958	WITHOUT_CLASSIFICATION	3.505105430425901E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999850471392213	WITHOUT_CLASSIFICATION	1.4952860778677874E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999700598477524	WITHOUT_CLASSIFICATION	2.99401522475773E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9997017365310291	WITHOUT_CLASSIFICATION	2.982634689708078E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999380269613866	WITHOUT_CLASSIFICATION	6.197303861337054E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997090410044422	WITHOUT_CLASSIFICATION	2.909589955578547E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.998486472110281	WITHOUT_CLASSIFICATION	0.0015135278897190252	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999016056869444	WITHOUT_CLASSIFICATION	9.839431305566633E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9995406767642258	WITHOUT_CLASSIFICATION	4.5932323577423676E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999122427685617	WITHOUT_CLASSIFICATION	8.77572314383673E-5	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999934457967978	WITHOUT_CLASSIFICATION	6.554203202146639E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9960812116856338	WITHOUT_CLASSIFICATION	0.003918788314366153	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998058696738725	WITHOUT_CLASSIFICATION	1.941303261275143E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998844918546937	WITHOUT_CLASSIFICATION	1.1550814530618637E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999926831014632	WITHOUT_CLASSIFICATION	7.316898536729381E-6	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999860601318178	WITHOUT_CLASSIFICATION	1.3939868182281068E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999682770713827	WITHOUT_CLASSIFICATION	3.172292861731115E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999376958625107	WITHOUT_CLASSIFICATION	6.23041374892986E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9985319380184962	WITHOUT_CLASSIFICATION	0.001468061981503804	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998656753644191	WITHOUT_CLASSIFICATION	1.3432463558089129E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999018882911472	WITHOUT_CLASSIFICATION	9.811170885276877E-5	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999054296286556	WITHOUT_CLASSIFICATION	9.457037134436808E-5	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9847025793852915	WITHOUT_CLASSIFICATION	0.015297420614708538	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991076083771029	WITHOUT_CLASSIFICATION	8.923916228972128E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9908883448302117	WITHOUT_CLASSIFICATION	0.00911165516978826	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9844628316903863	WITHOUT_CLASSIFICATION	0.015537168309613747	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.99999798476993	WITHOUT_CLASSIFICATION	2.015230070046659E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998879642199315	WITHOUT_CLASSIFICATION	1.1203578006856205E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999709339674304	WITHOUT_CLASSIFICATION	2.906603256958023E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999018882911472	WITHOUT_CLASSIFICATION	9.811170885276877E-5	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999900189471125	WITHOUT_CLASSIFICATION	9.981052887542491E-6	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999758536797468	WITHOUT_CLASSIFICATION	2.414632025317586E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998882192576202	WITHOUT_CLASSIFICATION	1.1178074237982399E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999903134913122	WITHOUT_CLASSIFICATION	9.686508687801012E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999093630498134	WITHOUT_CLASSIFICATION	9.063695018666633E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999093630498134	WITHOUT_CLASSIFICATION	9.063695018666633E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999451541875555	WITHOUT_CLASSIFICATION	5.484581244458464E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995323969088704	WITHOUT_CLASSIFICATION	4.6760309112951905E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999494558234292	WITHOUT_CLASSIFICATION	5.05441765707968E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995934546028475	WITHOUT_CLASSIFICATION	4.0654539715244105E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998149909967313	WITHOUT_CLASSIFICATION	1.8500900326868345E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999735335187998	WITHOUT_CLASSIFICATION	2.6466481200180732E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999801808662786	WITHOUT_CLASSIFICATION	1.9819133721501667E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996154105450598	WITHOUT_CLASSIFICATION	3.845894549403027E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999005443157812	WITHOUT_CLASSIFICATION	9.945568421878284E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998416409470997	WITHOUT_CLASSIFICATION	1.5835905290037533E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9982691060365633	WITHOUT_CLASSIFICATION	0.0017308939634366656	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998047136684328	WITHOUT_CLASSIFICATION	1.9528633156723629E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999473648469656	WITHOUT_CLASSIFICATION	5.2635153034365426E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9968788092426899	WITHOUT_CLASSIFICATION	0.0031211907573101007	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998871226727266	WITHOUT_CLASSIFICATION	1.1287732727341082E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997550801273555	WITHOUT_CLASSIFICATION	2.4491987264441763E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9834403663571311	WITHOUT_CLASSIFICATION	0.016559633642869026	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998361740673165	WITHOUT_CLASSIFICATION	1.6382593268353426E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999950142090047	WITHOUT_CLASSIFICATION	4.985790995265227E-6	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997841448543425	WITHOUT_CLASSIFICATION	2.158551456574859E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999465994868935	WITHOUT_CLASSIFICATION	5.340051310657327E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999992162596052	WITHOUT_CLASSIFICATION	7.837403947856918E-7	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999783176349483	WITHOUT_CLASSIFICATION	2.168236505175763E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999761981286589	WITHOUT_CLASSIFICATION	2.380187134112371E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999819212901879	WITHOUT_CLASSIFICATION	1.8078709812167267E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999489828743366	WITHOUT_CLASSIFICATION	5.101712566339797E-4	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999761370604678	WITHOUT_CLASSIFICATION	2.3862939532135667E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999613975183089	WITHOUT_CLASSIFICATION	3.8602481691073944E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999950594128526	WITHOUT_CLASSIFICATION	4.940587147358107E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999978180118567	WITHOUT_CLASSIFICATION	2.181988143303685E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999568388875759	WITHOUT_CLASSIFICATION	4.3161112424023225E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9992031689352594	WITHOUT_CLASSIFICATION	7.968310647405933E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9998691786153832	WITHOUT_CLASSIFICATION	1.3082138461696378E-4	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999305730102195	WITHOUT_CLASSIFICATION	6.942698978048611E-5	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998744794068235	WITHOUT_CLASSIFICATION	1.2552059317652768E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999720868814258	WITHOUT_CLASSIFICATION	2.7913118574246188E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999357248460424	WITHOUT_CLASSIFICATION	6.427515395758114E-5	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999429084237568	WITHOUT_CLASSIFICATION	5.709157624318048E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999150266785848	WITHOUT_CLASSIFICATION	8.497332141524783E-5	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999358966421363	WITHOUT_CLASSIFICATION	6.410335786369268E-4	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999368013803501	WITHOUT_CLASSIFICATION	6.319861964980254E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999696657822132	WITHOUT_CLASSIFICATION	3.0334217786786968E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999429898414524	WITHOUT_CLASSIFICATION	5.701015854764237E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999520348822354	WITHOUT_CLASSIFICATION	4.7965117764664223E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999843554730903	WITHOUT_CLASSIFICATION	1.564452690974636E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999269602201507	WITHOUT_CLASSIFICATION	7.30397798493735E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999336884666994	WITHOUT_CLASSIFICATION	6.63115333005499E-5	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999978073422683	WITHOUT_CLASSIFICATION	2.1926577317068557E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999838113621822	WITHOUT_CLASSIFICATION	1.6188637817803566E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999941791351379	WITHOUT_CLASSIFICATION	5.820864862096223E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998727142256628	WITHOUT_CLASSIFICATION	1.2728577433722868E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999608632840498	WITHOUT_CLASSIFICATION	3.913671595022527E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999475105910418	WITHOUT_CLASSIFICATION	5.2489408958145755E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999560492484633	WITHOUT_CLASSIFICATION	4.39507515367809E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997372263185814	WITHOUT_CLASSIFICATION	2.6277368141857803E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999960047838454	WITHOUT_CLASSIFICATION	3.9952161545762656E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999632010781313	WITHOUT_CLASSIFICATION	3.67989218686928E-5	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999378580088761	WITHOUT_CLASSIFICATION	6.214199112384955E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9992832163493239	WITHOUT_CLASSIFICATION	7.167836506760148E-4	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999586810526226	WITHOUT_CLASSIFICATION	4.1318947377440426E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.999921282588767	WITHOUT_CLASSIFICATION	7.871741123309735E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998655359263658	WITHOUT_CLASSIFICATION	1.3446407363419384E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997704293112677	WITHOUT_CLASSIFICATION	2.2957068873232048E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.998820843801921	WITHOUT_CLASSIFICATION	0.0011791561980789703	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999974820021207	WITHOUT_CLASSIFICATION	2.51799787929674E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999744429477831	WITHOUT_CLASSIFICATION	2.555705221680289E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999994420108326	WITHOUT_CLASSIFICATION	5.579891674843813E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998904288705801	WITHOUT_CLASSIFICATION	1.0957112941990357E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999667131497976	WITHOUT_CLASSIFICATION	3.3286850202382264E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999090588264319	WITHOUT_CLASSIFICATION	9.094117356820745E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999152167753937	WITHOUT_CLASSIFICATION	8.478322460622478E-5	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995934920160747	WITHOUT_CLASSIFICATION	4.065079839252489E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999967436002651	WITHOUT_CLASSIFICATION	3.256399734928532E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999634136798878	WITHOUT_CLASSIFICATION	3.658632011210603E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999254733846364	WITHOUT_CLASSIFICATION	7.452661536355891E-5	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999986611414081	WITHOUT_CLASSIFICATION	1.3388585918761252E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999313939871125	WITHOUT_CLASSIFICATION	6.860601288751778E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999994462978846	WITHOUT_CLASSIFICATION	5.537021153024752E-7	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9991629712088402	WITHOUT_CLASSIFICATION	8.370287911597715E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999154588093951	WITHOUT_CLASSIFICATION	8.454119060492545E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999294926815826	WITHOUT_CLASSIFICATION	7.050731841746406E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995526621308143	WITHOUT_CLASSIFICATION	4.473378691858249E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998797127620257	WITHOUT_CLASSIFICATION	1.2028723797430326E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999224413549699	WITHOUT_CLASSIFICATION	7.755864503011494E-5	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998041885352845	WITHOUT_CLASSIFICATION	1.9581146471549978E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999955764860516	WITHOUT_CLASSIFICATION	4.423513948328218E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999988859094949	WITHOUT_CLASSIFICATION	1.1140905051015E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999398966058707	WITHOUT_CLASSIFICATION	6.0103394129258795E-5	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999400486601875	WITHOUT_CLASSIFICATION	5.9951339812457045E-5	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999947312220587	WITHOUT_CLASSIFICATION	5.268777941316375E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998655359263658	WITHOUT_CLASSIFICATION	1.3446407363419384E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999389922880411	WITHOUT_CLASSIFICATION	6.1007711958947194E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999922425995819	WITHOUT_CLASSIFICATION	7.75740041817004E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999873018798844	WITHOUT_CLASSIFICATION	1.2698120115599155E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999958394476963	WITHOUT_CLASSIFICATION	4.1605523037090424E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999990287281781	WITHOUT_CLASSIFICATION	9.712718219190529E-7	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9988272426224295	WITHOUT_CLASSIFICATION	0.0011727573775705794	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997659123444778	WITHOUT_CLASSIFICATION	2.340876555221041E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999923231219341	WITHOUT_CLASSIFICATION	7.676878065934123E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999893266403311	WITHOUT_CLASSIFICATION	1.0673359668882597E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998608047213328	WITHOUT_CLASSIFICATION	1.391952786672036E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9987913218414722	WITHOUT_CLASSIFICATION	0.0012086781585277447	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997362070289264	WITHOUT_CLASSIFICATION	2.6379297107352546E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999969324701463	WITHOUT_CLASSIFICATION	3.0675298537508647E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996650713657202	WITHOUT_CLASSIFICATION	3.349286342796937E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993199575592853	WITHOUT_CLASSIFICATION	6.80042440714882E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999449764359283	WITHOUT_CLASSIFICATION	5.502356407175407E-5	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9991886854257866	WITHOUT_CLASSIFICATION	8.113145742133417E-4	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998834236290491	WITHOUT_CLASSIFICATION	1.1657637095091295E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999827472144222	WITHOUT_CLASSIFICATION	1.7252785577767784E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999964743680055	WITHOUT_CLASSIFICATION	3.5256319945142684E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999175744698193	WITHOUT_CLASSIFICATION	8.242553018064861E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999175744698193	WITHOUT_CLASSIFICATION	8.242553018064861E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999715767985947	WITHOUT_CLASSIFICATION	2.8423201405304217E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999971539125542	WITHOUT_CLASSIFICATION	2.8460874458589027E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998807108817946	WITHOUT_CLASSIFICATION	1.1928911820539528E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999958222104075	WITHOUT_CLASSIFICATION	4.177789592505591E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998072621092168	WITHOUT_CLASSIFICATION	1.927378907832025E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999018306433525	WITHOUT_CLASSIFICATION	9.816935664750226E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999934436395268	WITHOUT_CLASSIFICATION	6.556360473189201E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995532984345468	WITHOUT_CLASSIFICATION	4.467015654531605E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995532984345468	WITHOUT_CLASSIFICATION	4.467015654531605E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998137930895519	WITHOUT_CLASSIFICATION	1.8620691044825882E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999482161772302	WITHOUT_CLASSIFICATION	5.178382276976846E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999582179567824	WITHOUT_CLASSIFICATION	4.1782043217594543E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999232874737364	WITHOUT_CLASSIFICATION	7.671252626359769E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999232874737364	WITHOUT_CLASSIFICATION	7.671252626359769E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999232874737364	WITHOUT_CLASSIFICATION	7.671252626359769E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999600798901026	WITHOUT_CLASSIFICATION	3.992010989733308E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999602560480255	WITHOUT_CLASSIFICATION	3.9743951974491934E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999971077994797	WITHOUT_CLASSIFICATION	2.892200520313202E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999788387361068	WITHOUT_CLASSIFICATION	2.116126389319599E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999618322765976	WITHOUT_CLASSIFICATION	3.816772340244582E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999959007259915	WITHOUT_CLASSIFICATION	4.099274008529539E-6	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999819940432026	WITHOUT_CLASSIFICATION	1.8005956797276344E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9794034698330765	WITHOUT_CLASSIFICATION	0.020596530166923584	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999981517263825	WITHOUT_CLASSIFICATION	1.8482736174985298E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999555055098848	WITHOUT_CLASSIFICATION	4.4494490115311384E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998319178666278	WITHOUT_CLASSIFICATION	1.6808213337218199E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.995897612630792	WITHOUT_CLASSIFICATION	0.004102387369208049	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999805422212338	WITHOUT_CLASSIFICATION	1.9457778766234134E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999471425490921	WITHOUT_CLASSIFICATION	5.2857450907971055E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999847523645614	WITHOUT_CLASSIFICATION	1.5247635438517783E-5	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999813213370125	WITHOUT_CLASSIFICATION	1.867866298751219E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999570417212882	WITHOUT_CLASSIFICATION	4.2958278711764684E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999175744698193	WITHOUT_CLASSIFICATION	8.242553018064861E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999937661388685	WITHOUT_CLASSIFICATION	6.233861131472719E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9682723664192223	WITHOUT_CLASSIFICATION	0.03172763358077765	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998779327512642	WITHOUT_CLASSIFICATION	1.2206724873582367E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999300885904614	WITHOUT_CLASSIFICATION	6.991140953859675E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999224304995741	WITHOUT_CLASSIFICATION	7.756950042590887E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999160508507873	WITHOUT_CLASSIFICATION	8.394914921271702E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999847781850489	WITHOUT_CLASSIFICATION	1.5221814951049183E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998974603493479	WITHOUT_CLASSIFICATION	1.0253965065214798E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997440842665151	WITHOUT_CLASSIFICATION	2.5591573348496055E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999461684228322	WITHOUT_CLASSIFICATION	5.383157716786514E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9994017520804165	WITHOUT_CLASSIFICATION	5.98247919583514E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999240842164923	WITHOUT_CLASSIFICATION	7.591578350775422E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9998140096517467	WITHOUT_CLASSIFICATION	1.8599034825316938E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999334872707383	WITHOUT_CLASSIFICATION	6.651272926178262E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999699512811135	WITHOUT_CLASSIFICATION	3.0048718886522858E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8640173112423915	WITHOUT_CLASSIFICATION	0.13598268875760855	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996518760105929	WITHOUT_CLASSIFICATION	3.4812398940713433E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999931456715828	WITHOUT_CLASSIFICATION	6.85432841712954E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999949036498963	WITHOUT_CLASSIFICATION	5.096350103694181E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999949036498963	WITHOUT_CLASSIFICATION	5.096350103694181E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999366445670628	WITHOUT_CLASSIFICATION	6.335543293721252E-5	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999824232075835	WITHOUT_CLASSIFICATION	1.7576792416515952E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999319725121866	WITHOUT_CLASSIFICATION	6.8027487813349E-5	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999444667052808	WITHOUT_CLASSIFICATION	5.5533294719215326E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999772811652811	WITHOUT_CLASSIFICATION	2.2718834718896187E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999922928787286	WITHOUT_CLASSIFICATION	7.707121271472232E-6	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998742695264962	WITHOUT_CLASSIFICATION	1.2573047350383147E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999143703613553	WITHOUT_CLASSIFICATION	8.56296386445871E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999874233585577	WITHOUT_CLASSIFICATION	1.2576641442177316E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999833798020149	WITHOUT_CLASSIFICATION	1.662019798510842E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9997214873916701	WITHOUT_CLASSIFICATION	2.7851260832979113E-4	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997485374055498	WITHOUT_CLASSIFICATION	2.5146259445023295E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999982237936381	WITHOUT_CLASSIFICATION	1.776206361838973E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999572126089236	WITHOUT_CLASSIFICATION	4.2787391076441307E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999973132450346	WITHOUT_CLASSIFICATION	2.6867549654219684E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9996060089673624	WITHOUT_CLASSIFICATION	3.939910326375019E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999990675998986	WITHOUT_CLASSIFICATION	9.324001014043966E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999990675998986	WITHOUT_CLASSIFICATION	9.324001014043966E-6	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998775139392733	WITHOUT_CLASSIFICATION	1.2248606072663926E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9953550339741848	WITHOUT_CLASSIFICATION	0.0046449660258152305	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9995955135341893	WITHOUT_CLASSIFICATION	4.044864658108104E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995900518244248	WITHOUT_CLASSIFICATION	4.099481755751892E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998780757110428	WITHOUT_CLASSIFICATION	1.2192428895707597E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9995441193061506	WITHOUT_CLASSIFICATION	4.5588069384941204E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999955709585347	WITHOUT_CLASSIFICATION	4.429041465297252E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9993383852113688	WITHOUT_CLASSIFICATION	6.61614788631173E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997920561653091	WITHOUT_CLASSIFICATION	2.079438346908775E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998655252112111	WITHOUT_CLASSIFICATION	1.3447478878899868E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999709987802915	WITHOUT_CLASSIFICATION	2.9001219708530116E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9993383852113688	WITHOUT_CLASSIFICATION	6.61614788631173E-4	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9993224640346317	WITHOUT_CLASSIFICATION	6.775359653684344E-4	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999895985431836	WITHOUT_CLASSIFICATION	1.0401456816396557E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999063689793821	WITHOUT_CLASSIFICATION	9.363102061783692E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9995096682844575	WITHOUT_CLASSIFICATION	4.903317155424442E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9996988088606802	WITHOUT_CLASSIFICATION	3.011911393198867E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999970449682554	WITHOUT_CLASSIFICATION	2.955031744495029E-6	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999981198731281	WITHOUT_CLASSIFICATION	1.880126871900554E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999400206460052	WITHOUT_CLASSIFICATION	5.997935399488491E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999312462437627	WITHOUT_CLASSIFICATION	6.875375623721187E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9961309935041293	WITHOUT_CLASSIFICATION	0.0038690064958707996	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999569877297041	WITHOUT_CLASSIFICATION	4.301227029593386E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999454209159672	WITHOUT_CLASSIFICATION	5.457908403279831E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999547323424584	WITHOUT_CLASSIFICATION	4.526765754160362E-5	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999946992719848	WITHOUT_CLASSIFICATION	5.300728015153527E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999424942704025	WITHOUT_CLASSIFICATION	5.750572959750952E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999953027550817	WITHOUT_CLASSIFICATION	4.697244918299585E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999769823469112	WITHOUT_CLASSIFICATION	2.3017653088690573E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999573198973191	WITHOUT_CLASSIFICATION	4.268010268091445E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999573198973191	WITHOUT_CLASSIFICATION	4.268010268091445E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999981198731281	WITHOUT_CLASSIFICATION	1.880126871900554E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998617008672838	WITHOUT_CLASSIFICATION	1.3829913271614134E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997427042033404	WITHOUT_CLASSIFICATION	2.572957966595583E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9980305458739676	WITHOUT_CLASSIFICATION	0.0019694541260325193	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9998440481531949	WITHOUT_CLASSIFICATION	1.559518468050821E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999946627486342	WITHOUT_CLASSIFICATION	5.337251365768249E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999879697634917	WITHOUT_CLASSIFICATION	1.203023650821289E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999577763170634	WITHOUT_CLASSIFICATION	4.222368293653022E-5	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9991820266611207	WITHOUT_CLASSIFICATION	8.179733388792365E-4	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999978970633709	WITHOUT_CLASSIFICATION	2.102936629144897E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999442473278309	WITHOUT_CLASSIFICATION	5.5752672168960477E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999906768961434	WITHOUT_CLASSIFICATION	9.323103856578635E-6	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9987643024517647	WITHOUT_CLASSIFICATION	0.0012356975482353237	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995666867403642	WITHOUT_CLASSIFICATION	4.3331325963581844E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999977582466898	WITHOUT_CLASSIFICATION	2.2417533102784474E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999845383200092	WITHOUT_CLASSIFICATION	1.546167999071785E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999932250656498	WITHOUT_CLASSIFICATION	6.7749343502901024E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999946607045018	WITHOUT_CLASSIFICATION	5.339295498132938E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999648537126038	WITHOUT_CLASSIFICATION	3.514628739619264E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999818901367943	WITHOUT_CLASSIFICATION	1.8109863205649235E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999808563356285	WITHOUT_CLASSIFICATION	1.9143664371474352E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999917916158317	WITHOUT_CLASSIFICATION	8.208384168321232E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998100902478344	WITHOUT_CLASSIFICATION	1.899097521654995E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999538948557756	WITHOUT_CLASSIFICATION	4.610514422430646E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999971395290258	WITHOUT_CLASSIFICATION	2.8604709741276863E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999950779235699	WITHOUT_CLASSIFICATION	4.922076430130204E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999356894005519	WITHOUT_CLASSIFICATION	6.431059944817388E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999502296477293	WITHOUT_CLASSIFICATION	4.977035227079317E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999787851905791	WITHOUT_CLASSIFICATION	2.1214809420803576E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999995604711249	WITHOUT_CLASSIFICATION	4.395288750921698E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9995553547608987	WITHOUT_CLASSIFICATION	4.446452391013356E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999984530020136	WITHOUT_CLASSIFICATION	1.5469979864012683E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999917052402212	WITHOUT_CLASSIFICATION	8.294759778732236E-6	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999766439280639	WITHOUT_CLASSIFICATION	2.335607193608788E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999995999668033	WITHOUT_CLASSIFICATION	4.000331967059378E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999353665331056	WITHOUT_CLASSIFICATION	6.463346689449739E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998310667259501	WITHOUT_CLASSIFICATION	1.6893327404986664E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999029252031844	WITHOUT_CLASSIFICATION	9.707479681563992E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999401613140922	WITHOUT_CLASSIFICATION	5.98386859077538E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999293320091277	WITHOUT_CLASSIFICATION	7.066799087239376E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9989784447054749	WITHOUT_CLASSIFICATION	0.0010215552945250768	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999466632249803	WITHOUT_CLASSIFICATION	5.3336775019771584E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9995178801303959	WITHOUT_CLASSIFICATION	4.8211986960419907E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.586230168451653	DEFECT	0.41376983154834707	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997611283485668	WITHOUT_CLASSIFICATION	2.3887165143321188E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9996203471702018	WITHOUT_CLASSIFICATION	3.7965282979820754E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999861730581025	WITHOUT_CLASSIFICATION	1.3826941897504194E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9994869470638492	WITHOUT_CLASSIFICATION	5.130529361506594E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9985090222866032	WITHOUT_CLASSIFICATION	0.0014909777133967803	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999896880925702	WITHOUT_CLASSIFICATION	1.0311907429811285E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999364113476357	WITHOUT_CLASSIFICATION	6.358865236430082E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997965322712108	WITHOUT_CLASSIFICATION	2.0346772878913577E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997920561653091	WITHOUT_CLASSIFICATION	2.079438346908775E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993028576325	WITHOUT_CLASSIFICATION	6.971423675545989E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999845383200092	WITHOUT_CLASSIFICATION	1.546167999071785E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9970502115686013	WITHOUT_CLASSIFICATION	0.0029497884313987735	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998728524405966	WITHOUT_CLASSIFICATION	1.2714755940331483E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999658124589752	WITHOUT_CLASSIFICATION	3.4187541024797055E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999657328920691	WITHOUT_CLASSIFICATION	3.4267107930876566E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999198946302517	WITHOUT_CLASSIFICATION	8.01053697483096E-5	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999975451322167	WITHOUT_CLASSIFICATION	2.454867783307986E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999840464381455	WITHOUT_CLASSIFICATION	1.5953561854506124E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999974673308608	WITHOUT_CLASSIFICATION	2.532669139233766E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9809887542503105	WITHOUT_CLASSIFICATION	0.01901124574968952	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997991221057467	WITHOUT_CLASSIFICATION	2.008778942532194E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999852268188741	WITHOUT_CLASSIFICATION	1.4773181125923602E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999984948856125	WITHOUT_CLASSIFICATION	1.505114387472799E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999714517780477	WITHOUT_CLASSIFICATION	2.8548221952283763E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999714517780477	WITHOUT_CLASSIFICATION	2.8548221952283763E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999988791638365	WITHOUT_CLASSIFICATION	1.1208361635080204E-5	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996933281459242	WITHOUT_CLASSIFICATION	3.066718540758189E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999978681025425	WITHOUT_CLASSIFICATION	2.1318974573707017E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999760259754725	WITHOUT_CLASSIFICATION	2.3974024527485916E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999496026677058	WITHOUT_CLASSIFICATION	5.039733229420655E-5	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999905568154372	WITHOUT_CLASSIFICATION	9.443184562801298E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998820681238344	WITHOUT_CLASSIFICATION	1.1793187616550456E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997010412822007	WITHOUT_CLASSIFICATION	2.9895871779922034E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999450808478485	WITHOUT_CLASSIFICATION	5.4919152151529285E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999966147553972	WITHOUT_CLASSIFICATION	3.3852446028115294E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999538595766019	WITHOUT_CLASSIFICATION	4.614042339818065E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999538595766019	WITHOUT_CLASSIFICATION	4.614042339818065E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999465376450951	WITHOUT_CLASSIFICATION	5.346235490496108E-5	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999693072282079	WITHOUT_CLASSIFICATION	3.069277179214494E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9990795386964918	WITHOUT_CLASSIFICATION	9.204613035083335E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997878362756933	WITHOUT_CLASSIFICATION	2.1216372430670575E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999967831161582	WITHOUT_CLASSIFICATION	3.2168838417258253E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997300795763652	WITHOUT_CLASSIFICATION	2.699204236348738E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996267103290755	WITHOUT_CLASSIFICATION	3.7328967092448097E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993444655784357	WITHOUT_CLASSIFICATION	6.555344215643771E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999549231564776	WITHOUT_CLASSIFICATION	4.507684352244121E-5	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999302557277716	WITHOUT_CLASSIFICATION	6.974427222832861E-5	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999910315181142	WITHOUT_CLASSIFICATION	8.968481885788015E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806075888719	WITHOUT_CLASSIFICATION	1.1939241112809709E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999514798742427	WITHOUT_CLASSIFICATION	4.852012575722791E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9997750138131527	WITHOUT_CLASSIFICATION	2.249861868472107E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996581663491263	WITHOUT_CLASSIFICATION	3.4183365087368003E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999568466953801	WITHOUT_CLASSIFICATION	4.315330461987785E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.993754491290147	WITHOUT_CLASSIFICATION	0.006245508709852921	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999818632564563	WITHOUT_CLASSIFICATION	1.8136743543705278E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999938526011859	WITHOUT_CLASSIFICATION	6.1473988142012245E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999719883458736	WITHOUT_CLASSIFICATION	2.8011654126406714E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997841448543425	WITHOUT_CLASSIFICATION	2.158551456574859E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999332750606029	WITHOUT_CLASSIFICATION	6.672493939701178E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997015110092425	WITHOUT_CLASSIFICATION	2.9848899075741764E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999978975408668	WITHOUT_CLASSIFICATION	2.102459133205072E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999633064140719	WITHOUT_CLASSIFICATION	3.669358592807253E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999936753825123	WITHOUT_CLASSIFICATION	6.324617487693594E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999396817880848	WITHOUT_CLASSIFICATION	6.031821191520412E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999831264267192	WITHOUT_CLASSIFICATION	1.6873573280897088E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999548967348383	WITHOUT_CLASSIFICATION	4.5103265161774745E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999574455381438	WITHOUT_CLASSIFICATION	4.255446185623317E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9976363409240664	WITHOUT_CLASSIFICATION	0.0023636590759336024	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999862847523058	WITHOUT_CLASSIFICATION	1.3715247694237478E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999650976779	WITHOUT_CLASSIFICATION	3.490232210860358E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999107512770451	WITHOUT_CLASSIFICATION	8.924872295480298E-5	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999518507722872	WITHOUT_CLASSIFICATION	4.81492277127088E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999997575586247	WITHOUT_CLASSIFICATION	2.4244137530116266E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999315820413656	WITHOUT_CLASSIFICATION	6.841795863442849E-5	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998740117241097	WITHOUT_CLASSIFICATION	1.2598827589028767E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999859307985172	WITHOUT_CLASSIFICATION	1.4069201482924834E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994721771340063	WITHOUT_CLASSIFICATION	5.278228659937117E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997948939227705	WITHOUT_CLASSIFICATION	2.0510607722936902E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999272202759925	WITHOUT_CLASSIFICATION	7.277972400758815E-5	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999584902269896	WITHOUT_CLASSIFICATION	4.1509773010392254E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998364530342834	WITHOUT_CLASSIFICATION	1.6354696571654927E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998228759902859	WITHOUT_CLASSIFICATION	1.7712400971412463E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.99926460654067	WITHOUT_CLASSIFICATION	7.353934593299536E-4	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999277921769364	WITHOUT_CLASSIFICATION	7.220782306368708E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999246107509601	WITHOUT_CLASSIFICATION	7.538924903984478E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999309989681661	WITHOUT_CLASSIFICATION	6.900103183389664E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9995552082300792	WITHOUT_CLASSIFICATION	4.4479176992082316E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999538843924265	WITHOUT_CLASSIFICATION	4.611560757354951E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999368204902243	WITHOUT_CLASSIFICATION	6.317950977581241E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999779572156404	WITHOUT_CLASSIFICATION	2.204278435960097E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999535561336597	WITHOUT_CLASSIFICATION	4.6443866340302884E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999779572156404	WITHOUT_CLASSIFICATION	2.204278435960097E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9976728573853014	WITHOUT_CLASSIFICATION	0.00232714261469858	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9968554625222652	WITHOUT_CLASSIFICATION	0.003144537477734805	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999837569639389	WITHOUT_CLASSIFICATION	1.624303606113972E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999975590853192	WITHOUT_CLASSIFICATION	2.4409146807813867E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999353164848555	WITHOUT_CLASSIFICATION	6.468351514451663E-5	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999837569639389	WITHOUT_CLASSIFICATION	1.624303606113972E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999993801887781	WITHOUT_CLASSIFICATION	6.198112218236397E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998509492934696	WITHOUT_CLASSIFICATION	1.490507065304445E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999567555501815	WITHOUT_CLASSIFICATION	4.324444981856409E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.99997749110008	WITHOUT_CLASSIFICATION	2.250889991992953E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999976778804239	WITHOUT_CLASSIFICATION	2.322119576112251E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999764595114633	WITHOUT_CLASSIFICATION	2.3540488536777515E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999995524742802	WITHOUT_CLASSIFICATION	4.475257198191349E-7	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998790684323157	WITHOUT_CLASSIFICATION	1.2093156768441986E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999868140993864	WITHOUT_CLASSIFICATION	1.3185900613483634E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999636612314493	WITHOUT_CLASSIFICATION	3.633876855070131E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9993814548177206	WITHOUT_CLASSIFICATION	6.185451822794262E-4	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999368795780003	WITHOUT_CLASSIFICATION	6.312042199966853E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999116765177993	WITHOUT_CLASSIFICATION	8.832348220071172E-5	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999189683104871	WITHOUT_CLASSIFICATION	8.103168951299278E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999442545116235	WITHOUT_CLASSIFICATION	5.574548837658011E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997383707665738	WITHOUT_CLASSIFICATION	2.6162923342630594E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9993075139845438	WITHOUT_CLASSIFICATION	6.924860154561311E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997676413056472	WITHOUT_CLASSIFICATION	2.3235869435264708E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998879446790475	WITHOUT_CLASSIFICATION	1.1205532095251211E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9912923506485278	WITHOUT_CLASSIFICATION	0.008707649351472153	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9989527607169315	WITHOUT_CLASSIFICATION	0.0010472392830685408	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.999768674848868	WITHOUT_CLASSIFICATION	2.3132515113188037E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997329264440142	WITHOUT_CLASSIFICATION	2.670735559857628E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9993036833356644	WITHOUT_CLASSIFICATION	6.963166643355347E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998954264672125	WITHOUT_CLASSIFICATION	1.045735327874737E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9769298015616416	WITHOUT_CLASSIFICATION	0.023070198438358443	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9950670322110884	WITHOUT_CLASSIFICATION	0.004932967788911607	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999991648958629	WITHOUT_CLASSIFICATION	8.35104137094249E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.999950669254337	WITHOUT_CLASSIFICATION	4.93307456629848E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9996284510982784	WITHOUT_CLASSIFICATION	3.715489017217296E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999851758907272	WITHOUT_CLASSIFICATION	1.4824109272911126E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998073293372898	WITHOUT_CLASSIFICATION	1.9267066271030117E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9943257141449451	WITHOUT_CLASSIFICATION	0.005674285855055027	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9912923506485278	WITHOUT_CLASSIFICATION	0.008707649351472153	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999592020113766	WITHOUT_CLASSIFICATION	4.079798862342959E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997043080186658	WITHOUT_CLASSIFICATION	2.9569198133414177E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996935313698005	WITHOUT_CLASSIFICATION	3.0646863019945014E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998687462595786	WITHOUT_CLASSIFICATION	1.3125374042150087E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999906841869486	WITHOUT_CLASSIFICATION	9.315813051387692E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999897734382798	WITHOUT_CLASSIFICATION	1.0226561720212975E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9938780990408307	WITHOUT_CLASSIFICATION	0.006121900959169251	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998877280612629	WITHOUT_CLASSIFICATION	1.1227193873714399E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9995753091997098	WITHOUT_CLASSIFICATION	4.246908002902141E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9998885045884418	WITHOUT_CLASSIFICATION	1.1149541155818804E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999913994893594	WITHOUT_CLASSIFICATION	8.600510640532667E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999582875557113	WITHOUT_CLASSIFICATION	4.171244428878545E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999944316607461	WITHOUT_CLASSIFICATION	5.568339253906549E-5	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999780959416609	WITHOUT_CLASSIFICATION	2.1904058339183706E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998495586023953	WITHOUT_CLASSIFICATION	1.504413976046207E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999818489678335	WITHOUT_CLASSIFICATION	1.8151032166538984E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9977336397263175	WITHOUT_CLASSIFICATION	0.0022663602736825664	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994177911579334	WITHOUT_CLASSIFICATION	5.822088420665997E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998411213014529	WITHOUT_CLASSIFICATION	0.0015887869854711424	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9994562524916099	WITHOUT_CLASSIFICATION	5.43747508390116E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999777937549264	WITHOUT_CLASSIFICATION	2.2206245073599662E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999777937549264	WITHOUT_CLASSIFICATION	2.2206245073599662E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999586498967986	WITHOUT_CLASSIFICATION	4.135010320130128E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999777937549264	WITHOUT_CLASSIFICATION	2.2206245073599662E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999777937549264	WITHOUT_CLASSIFICATION	2.2206245073599662E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.993930031155305	WITHOUT_CLASSIFICATION	0.006069968844694948	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999710621991716	WITHOUT_CLASSIFICATION	2.893780082840132E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998976376754575	WITHOUT_CLASSIFICATION	1.0236232454252967E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998976376754575	WITHOUT_CLASSIFICATION	1.0236232454252967E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9981061317761668	WITHOUT_CLASSIFICATION	0.0018938682238331015	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999781636927553	WITHOUT_CLASSIFICATION	2.183630724465109E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9982951479070606	WITHOUT_CLASSIFICATION	0.001704852092939415	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998162572189988	WITHOUT_CLASSIFICATION	1.8374278100119476E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998915188099243	WITHOUT_CLASSIFICATION	1.0848119007571409E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998716454468368	WITHOUT_CLASSIFICATION	1.2835455316316245E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995521782992189	WITHOUT_CLASSIFICATION	4.478217007809896E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999451026788302	WITHOUT_CLASSIFICATION	5.4897321169714284E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9997550899941561	WITHOUT_CLASSIFICATION	2.4491000584399595E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997947306920576	WITHOUT_CLASSIFICATION	2.0526930794233732E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997377361803256	WITHOUT_CLASSIFICATION	2.622638196743957E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9974689048400517	WITHOUT_CLASSIFICATION	0.002531095159948306	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999895429420733	WITHOUT_CLASSIFICATION	1.0457057926749687E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999655200725032	WITHOUT_CLASSIFICATION	3.447992749686688E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9987986058847075	WITHOUT_CLASSIFICATION	0.001201394115292518	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9995785232630229	WITHOUT_CLASSIFICATION	4.2147673697715275E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9994470794952791	WITHOUT_CLASSIFICATION	5.529205047210076E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999857204074113	WITHOUT_CLASSIFICATION	1.4279592588763782E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999895429420733	WITHOUT_CLASSIFICATION	1.0457057926749687E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9989527607169315	WITHOUT_CLASSIFICATION	0.0010472392830685408	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9997482956779685	WITHOUT_CLASSIFICATION	2.517043220314205E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997843883050624	WITHOUT_CLASSIFICATION	2.1561169493752158E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996393143933197	WITHOUT_CLASSIFICATION	3.6068560668029435E-4	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999541546513716	WITHOUT_CLASSIFICATION	4.584534862846691E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999676240371743	WITHOUT_CLASSIFICATION	3.237596282563622E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999206439412648	WITHOUT_CLASSIFICATION	7.935605873526061E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998594538717958	WITHOUT_CLASSIFICATION	1.4054612820424702E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999551454573179	WITHOUT_CLASSIFICATION	4.485454268211702E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999099927447	WITHOUT_CLASSIFICATION	9.000725530527285E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999060160065755	WITHOUT_CLASSIFICATION	9.398399342456249E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999784382094546	WITHOUT_CLASSIFICATION	2.156179054527858E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999788615816442	WITHOUT_CLASSIFICATION	2.113841835580217E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998991363605163	WITHOUT_CLASSIFICATION	1.0086363948365056E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9946276707170952	WITHOUT_CLASSIFICATION	0.005372329282904768	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999557162659582	WITHOUT_CLASSIFICATION	4.4283734041741686E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999588749405776	WITHOUT_CLASSIFICATION	4.112505942247872E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999126258831915	WITHOUT_CLASSIFICATION	8.73741168084569E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999228204961992	WITHOUT_CLASSIFICATION	7.71795038008451E-5	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998225971184929	WITHOUT_CLASSIFICATION	1.7740288150701732E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997261630980213	WITHOUT_CLASSIFICATION	2.738369019786079E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9988787397661207	WITHOUT_CLASSIFICATION	0.0011212602338792439	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999979369145061	WITHOUT_CLASSIFICATION	2.0630854939195453E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999551454573179	WITHOUT_CLASSIFICATION	4.485454268211702E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999391889066261	WITHOUT_CLASSIFICATION	6.081109337389057E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999164258135932	WITHOUT_CLASSIFICATION	8.357418640686608E-5	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998589666560658	WITHOUT_CLASSIFICATION	1.410333439341945E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998919137966003	WITHOUT_CLASSIFICATION	1.0808620339978967E-4	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998981033222354	WITHOUT_CLASSIFICATION	1.0189667776461372E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998843506339096	WITHOUT_CLASSIFICATION	1.1564936609038743E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999375470384908	WITHOUT_CLASSIFICATION	6.245296150919325E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9998841938021248	WITHOUT_CLASSIFICATION	1.1580619787521271E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999035742361565	WITHOUT_CLASSIFICATION	9.64257638435224E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904717141664	WITHOUT_CLASSIFICATION	9.528285833594792E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999693800178934	WITHOUT_CLASSIFICATION	3.0619982106673024E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999871187047701	WITHOUT_CLASSIFICATION	1.2881295229826515E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999750022935717	WITHOUT_CLASSIFICATION	2.499770642827306E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999721736827476	WITHOUT_CLASSIFICATION	2.7826317252445042E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999706748007911	WITHOUT_CLASSIFICATION	2.932519920889408E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904717141664	WITHOUT_CLASSIFICATION	9.528285833594792E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999614540953352	WITHOUT_CLASSIFICATION	3.854590466491005E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9996857209511822	WITHOUT_CLASSIFICATION	3.14279048817831E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999131678575746	WITHOUT_CLASSIFICATION	8.683214242547179E-5	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999851198500136	WITHOUT_CLASSIFICATION	1.4880149986434327E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999693263408076	WITHOUT_CLASSIFICATION	3.067365919239774E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999594725040418	WITHOUT_CLASSIFICATION	4.052749595825941E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999707872942526	WITHOUT_CLASSIFICATION	2.9212705747411318E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999094167439685	WITHOUT_CLASSIFICATION	9.058325603156641E-5	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993994113552	WITHOUT_CLASSIFICATION	1.0060058864486238E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997040998616499	WITHOUT_CLASSIFICATION	2.9590013835019646E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997040998616499	WITHOUT_CLASSIFICATION	2.9590013835019646E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997040998616499	WITHOUT_CLASSIFICATION	2.9590013835019646E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999678440456321	WITHOUT_CLASSIFICATION	3.21559543678611E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999678440456321	WITHOUT_CLASSIFICATION	3.21559543678611E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9942741605130266	WITHOUT_CLASSIFICATION	0.005725839486973379	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999967004115504	WITHOUT_CLASSIFICATION	3.299588449545205E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9998866282118817	WITHOUT_CLASSIFICATION	1.1337178811836955E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9998963063172247	WITHOUT_CLASSIFICATION	1.036936827752806E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.8794360601693838	WITHOUT_CLASSIFICATION	0.1205639398306162	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998802725007369	WITHOUT_CLASSIFICATION	1.1972749926317968E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998992104945618	WITHOUT_CLASSIFICATION	1.007895054382956E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996478563345941	WITHOUT_CLASSIFICATION	3.52143665405898E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999395153137346	WITHOUT_CLASSIFICATION	6.048468626549968E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998802725007369	WITHOUT_CLASSIFICATION	1.1972749926317968E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998992104945618	WITHOUT_CLASSIFICATION	1.007895054382956E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999882506704917	WITHOUT_CLASSIFICATION	1.1749329508312477E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999940267590955	WITHOUT_CLASSIFICATION	5.9732409044994514E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999926709020222	WITHOUT_CLASSIFICATION	7.329097977864733E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999450599902932	WITHOUT_CLASSIFICATION	5.494000970685498E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998273213548313	WITHOUT_CLASSIFICATION	1.7267864516871498E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998902317140768	WITHOUT_CLASSIFICATION	1.0976828592321799E-4	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999100369629301	WITHOUT_CLASSIFICATION	8.996303706981996E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999272489471277	WITHOUT_CLASSIFICATION	7.27510528723066E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9993303181308049	WITHOUT_CLASSIFICATION	6.696818691951653E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9956851276625797	WITHOUT_CLASSIFICATION	0.004314872337420337	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998511408810677	WITHOUT_CLASSIFICATION	1.488591189322976E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999914864495415	WITHOUT_CLASSIFICATION	8.513550458518876E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998090288751185	WITHOUT_CLASSIFICATION	1.909711248815597E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9985185679405087	WITHOUT_CLASSIFICATION	0.0014814320594911412	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999287179617814	WITHOUT_CLASSIFICATION	7.12820382185721E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999061006481746	WITHOUT_CLASSIFICATION	9.389935182532646E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9993160509638348	WITHOUT_CLASSIFICATION	6.83949036165272E-4	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999991861559871	WITHOUT_CLASSIFICATION	8.138440129047132E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999568365933813	WITHOUT_CLASSIFICATION	4.3163406618693265E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999701185256463	WITHOUT_CLASSIFICATION	2.9881474353715667E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999997070111749	WITHOUT_CLASSIFICATION	2.9298882506071374E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996520239714022	WITHOUT_CLASSIFICATION	3.479760285978149E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776010978454	WITHOUT_CLASSIFICATION	1.2239890215464083E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998799893625744	WITHOUT_CLASSIFICATION	1.2001063742550928E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999182715053	WITHOUT_CLASSIFICATION	8.172849480646824E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998882311653349	WITHOUT_CLASSIFICATION	1.1176883466518837E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997309509854652	WITHOUT_CLASSIFICATION	2.6904901453476265E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998448595624778	WITHOUT_CLASSIFICATION	1.5514043752207286E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998448595624778	WITHOUT_CLASSIFICATION	1.5514043752207286E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998481272039752	WITHOUT_CLASSIFICATION	1.5187279602479857E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9997018954535579	WITHOUT_CLASSIFICATION	2.981045464421441E-4	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999754823608146	WITHOUT_CLASSIFICATION	2.4517639185348885E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999876994277713	WITHOUT_CLASSIFICATION	1.2300572228711493E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999348184130965	WITHOUT_CLASSIFICATION	6.518158690347822E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9996771036629041	WITHOUT_CLASSIFICATION	3.228963370959301E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.999997263396622	WITHOUT_CLASSIFICATION	2.736603378029693E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999684740913575	WITHOUT_CLASSIFICATION	3.152590864244443E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999228939874125	WITHOUT_CLASSIFICATION	7.710601258753356E-5	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205470829922	WITHOUT_CLASSIFICATION	7.945291700780958E-5	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999921089695978	WITHOUT_CLASSIFICATION	7.891030402201995E-5	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9992018931495404	WITHOUT_CLASSIFICATION	7.981068504595907E-4	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9990753497344541	WITHOUT_CLASSIFICATION	9.246502655458745E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.998815938608837	WITHOUT_CLASSIFICATION	0.0011840613911629995	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9997311590582509	WITHOUT_CLASSIFICATION	2.6884094174899547E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999888381176933	WITHOUT_CLASSIFICATION	1.1161882306557481E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998304587272442	WITHOUT_CLASSIFICATION	1.6954127275577933E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999901922221085	WITHOUT_CLASSIFICATION	9.807777891544774E-6	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999959447791137	WITHOUT_CLASSIFICATION	4.055220886283516E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.998815938608837	WITHOUT_CLASSIFICATION	0.0011840613911629995	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.998815938608837	WITHOUT_CLASSIFICATION	0.0011840613911629995	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999627526420637	WITHOUT_CLASSIFICATION	3.724735793623273E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999789652705141	WITHOUT_CLASSIFICATION	2.1034729485947033E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9992791247759932	WITHOUT_CLASSIFICATION	7.208752240067869E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999629638830996	WITHOUT_CLASSIFICATION	3.703611690039059E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999334872707383	WITHOUT_CLASSIFICATION	6.651272926178262E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999061006481746	WITHOUT_CLASSIFICATION	9.389935182532646E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999919925158596	WITHOUT_CLASSIFICATION	8.007484140401345E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999433596198888	WITHOUT_CLASSIFICATION	5.664038011114766E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9998893678050151	WITHOUT_CLASSIFICATION	1.1063219498484737E-4	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998707585630584	WITHOUT_CLASSIFICATION	1.2924143694162038E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9996698052857678	WITHOUT_CLASSIFICATION	3.301947142322773E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999900381362216	WITHOUT_CLASSIFICATION	9.961863778395435E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996714559282094	WITHOUT_CLASSIFICATION	3.285440717906062E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996714559282094	WITHOUT_CLASSIFICATION	3.285440717906062E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996714559282094	WITHOUT_CLASSIFICATION	3.285440717906062E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996714559282094	WITHOUT_CLASSIFICATION	3.285440717906062E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999917882333675	WITHOUT_CLASSIFICATION	8.211766632501887E-5	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998307324325569	WITHOUT_CLASSIFICATION	1.6926756744312254E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428320070621	WITHOUT_CLASSIFICATION	1.5716799293778727E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9993867553564261	WITHOUT_CLASSIFICATION	6.132446435738446E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999305486470839	WITHOUT_CLASSIFICATION	6.945135291616885E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998918312752227	WITHOUT_CLASSIFICATION	1.0816872477726659E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999200656882212	WITHOUT_CLASSIFICATION	7.993431177884192E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999856895302799	WITHOUT_CLASSIFICATION	1.4310469720028071E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999883059925955	WITHOUT_CLASSIFICATION	1.1694007404520375E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999667631189559	WITHOUT_CLASSIFICATION	3.3236881043935655E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999440999855845	WITHOUT_CLASSIFICATION	5.590001441539209E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999678180648192	WITHOUT_CLASSIFICATION	3.218193518089391E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998390056834111	WITHOUT_CLASSIFICATION	1.6099431658890483E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999407241108026	WITHOUT_CLASSIFICATION	5.92758891974962E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999954688131594	WITHOUT_CLASSIFICATION	4.531186840641776E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999954688131594	WITHOUT_CLASSIFICATION	4.531186840641776E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999908749035328	WITHOUT_CLASSIFICATION	9.125096467161666E-6	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999628896121303	WITHOUT_CLASSIFICATION	3.711038786965996E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999996064275146	WITHOUT_CLASSIFICATION	3.935724853949198E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99984533130698	WITHOUT_CLASSIFICATION	1.546686930200823E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99984533130698	WITHOUT_CLASSIFICATION	1.546686930200823E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9995918934572602	WITHOUT_CLASSIFICATION	4.0810654273978555E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997040998616499	WITHOUT_CLASSIFICATION	2.9590013835019646E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999081154011433	WITHOUT_CLASSIFICATION	9.188459885672083E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999718276339734	WITHOUT_CLASSIFICATION	2.8172366026527542E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999997141084531	WITHOUT_CLASSIFICATION	2.8589154696111174E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999013770624742	WITHOUT_CLASSIFICATION	9.86229375258036E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999881851000934	WITHOUT_CLASSIFICATION	1.1814899906605533E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996937238537239	WITHOUT_CLASSIFICATION	3.062761462760783E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999815172027047	WITHOUT_CLASSIFICATION	1.848279729534207E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999053593826712	WITHOUT_CLASSIFICATION	9.464061732881899E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999390005621426	WITHOUT_CLASSIFICATION	6.0999437857394354E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998799574231482	WITHOUT_CLASSIFICATION	1.2004257685180996E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999226824269688	WITHOUT_CLASSIFICATION	7.731757303115289E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999798699751445	WITHOUT_CLASSIFICATION	2.0130024855471138E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999975253354411	WITHOUT_CLASSIFICATION	2.4746645588886927E-6	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999705203786199	WITHOUT_CLASSIFICATION	2.947962138002056E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999962150299222	WITHOUT_CLASSIFICATION	3.784970077780179E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999953928750362	WITHOUT_CLASSIFICATION	4.6071249637363625E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999808451207983	WITHOUT_CLASSIFICATION	1.9154879201658475E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9992529131476232	WITHOUT_CLASSIFICATION	7.470868523767253E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9982564981003923	WITHOUT_CLASSIFICATION	0.0017435018996075921	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998600337076214	WITHOUT_CLASSIFICATION	1.399662923785189E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998989029896874	WITHOUT_CLASSIFICATION	1.0109701031262247E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999412857047838	WITHOUT_CLASSIFICATION	5.871429521632966E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.99999293136512	WITHOUT_CLASSIFICATION	7.068634880023205E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999919896717281	WITHOUT_CLASSIFICATION	8.010328271899556E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.998262053940333	WITHOUT_CLASSIFICATION	0.0017379460596669894	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999987809716044	WITHOUT_CLASSIFICATION	1.2190283956113944E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9978155137370727	WITHOUT_CLASSIFICATION	0.0021844862629272774	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997550801273555	WITHOUT_CLASSIFICATION	2.4491987264441763E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999972319031529	WITHOUT_CLASSIFICATION	2.7680968470391053E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999903256179917	WITHOUT_CLASSIFICATION	9.674382008320746E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999552807270029	WITHOUT_CLASSIFICATION	4.47192729971348E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9992159638187331	WITHOUT_CLASSIFICATION	7.840361812668033E-4	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999339828302766	WITHOUT_CLASSIFICATION	6.601716972341374E-5	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999160342951594	WITHOUT_CLASSIFICATION	8.396570484057836E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999501862703851	WITHOUT_CLASSIFICATION	4.981372961479651E-5	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999937042137311	WITHOUT_CLASSIFICATION	6.295786268901412E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999790777461038	WITHOUT_CLASSIFICATION	2.0922253896198326E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9993836731214029	WITHOUT_CLASSIFICATION	6.163268785971665E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999727029816684	WITHOUT_CLASSIFICATION	2.7297018331609878E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999039442445689	WITHOUT_CLASSIFICATION	9.6055755431121E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999586579668931	WITHOUT_CLASSIFICATION	4.134203310695826E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999874391127739	WITHOUT_CLASSIFICATION	1.2560887226004577E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999778834303336	WITHOUT_CLASSIFICATION	2.211656966644712E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9981484956024532	WITHOUT_CLASSIFICATION	0.001851504397546831	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9982324859624414	WITHOUT_CLASSIFICATION	0.0017675140375585038	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996575250147766	WITHOUT_CLASSIFICATION	3.4247498522340514E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999813178438173	WITHOUT_CLASSIFICATION	1.8682156182670412E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998961129373989	WITHOUT_CLASSIFICATION	1.0388706260106821E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999819573399602	WITHOUT_CLASSIFICATION	1.8042660039756074E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999870312050035	WITHOUT_CLASSIFICATION	1.2968794996592171E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998108925890441	WITHOUT_CLASSIFICATION	1.8910741095596795E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999852413692232	WITHOUT_CLASSIFICATION	1.4758630776746592E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999889206429713	WITHOUT_CLASSIFICATION	1.1079357028692988E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9997475082616031	WITHOUT_CLASSIFICATION	2.524917383968895E-4	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999930261300279	WITHOUT_CLASSIFICATION	6.973869972104696E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999628441922346	WITHOUT_CLASSIFICATION	3.715580776545009E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998344451419823	WITHOUT_CLASSIFICATION	1.655548580178593E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998630706370457	WITHOUT_CLASSIFICATION	1.3692936295424542E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999933000101066	WITHOUT_CLASSIFICATION	6.699989893453426E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9995085410845901	WITHOUT_CLASSIFICATION	4.914589154098712E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999834063007644	WITHOUT_CLASSIFICATION	1.6593699235500774E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999186248630728	WITHOUT_CLASSIFICATION	8.137513692720468E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999696671244238	WITHOUT_CLASSIFICATION	3.0332875576190294E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999808646399564	WITHOUT_CLASSIFICATION	1.9135360043580083E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999987262549803	WITHOUT_CLASSIFICATION	1.2737450197438407E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999692329894945	WITHOUT_CLASSIFICATION	3.076701050545636E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998012634268553	WITHOUT_CLASSIFICATION	1.987365731447821E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999897393902901	WITHOUT_CLASSIFICATION	1.0260609709980527E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999924713150707	WITHOUT_CLASSIFICATION	7.528684929228377E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9995805033230044	WITHOUT_CLASSIFICATION	4.1949667699562736E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.999757253820351	WITHOUT_CLASSIFICATION	2.4274617964898025E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999980424727505	WITHOUT_CLASSIFICATION	1.957527249470576E-6	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997766297528599	WITHOUT_CLASSIFICATION	2.2337024714015586E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999657688749827	WITHOUT_CLASSIFICATION	3.423112501727991E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9997383707665738	WITHOUT_CLASSIFICATION	2.6162923342630594E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999878548711864	WITHOUT_CLASSIFICATION	1.2145128813594243E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999338285640955	WITHOUT_CLASSIFICATION	6.617143590451313E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999595050864335	WITHOUT_CLASSIFICATION	4.0494913566473476E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.999974954126574	WITHOUT_CLASSIFICATION	2.5045873426024392E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999440145411291	WITHOUT_CLASSIFICATION	5.598545887083616E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9992427864573892	WITHOUT_CLASSIFICATION	7.572135426109034E-4	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996741391741599	WITHOUT_CLASSIFICATION	3.258608258400709E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997854572401385	WITHOUT_CLASSIFICATION	2.1454275986163108E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997378450744947	WITHOUT_CLASSIFICATION	2.6215492550532435E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999545497755761	WITHOUT_CLASSIFICATION	4.545022442404395E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9985265069739591	WITHOUT_CLASSIFICATION	0.0014734930260409155	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999371102861992	WITHOUT_CLASSIFICATION	6.288971380080769E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999943144799072	WITHOUT_CLASSIFICATION	5.6855200928077955E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999972247627245	WITHOUT_CLASSIFICATION	2.7752372756902217E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999159047330083	WITHOUT_CLASSIFICATION	8.409526699171541E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.999952333591927	WITHOUT_CLASSIFICATION	4.766640807296028E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999790760138855	WITHOUT_CLASSIFICATION	2.092398611446514E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998897332682146	WITHOUT_CLASSIFICATION	1.1026673178536445E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998897332682146	WITHOUT_CLASSIFICATION	1.1026673178536445E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998666011378183	WITHOUT_CLASSIFICATION	1.3339886218172417E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9989413151942549	WITHOUT_CLASSIFICATION	0.0010586848057451703	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999882759217735	WITHOUT_CLASSIFICATION	1.1724078226500396E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9984834363723085	WITHOUT_CLASSIFICATION	0.0015165636276914815	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998633653916638	WITHOUT_CLASSIFICATION	1.366346083362961E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9975659402886863	WITHOUT_CLASSIFICATION	0.0024340597113137533	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995466757215667	WITHOUT_CLASSIFICATION	4.5332427843325867E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999791839244655	WITHOUT_CLASSIFICATION	2.0816075534554945E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990253650534853	WITHOUT_CLASSIFICATION	9.746349465147005E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999926177774544	WITHOUT_CLASSIFICATION	7.382222545624061E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9980312125060659	WITHOUT_CLASSIFICATION	0.0019687874939341675	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999530478481023	WITHOUT_CLASSIFICATION	4.6952151897730004E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999856987748138	WITHOUT_CLASSIFICATION	1.4301225186147135E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998519365847367	WITHOUT_CLASSIFICATION	1.480634152632609E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999682672915416	WITHOUT_CLASSIFICATION	3.1732708458440764E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9967149112895557	WITHOUT_CLASSIFICATION	0.0032850887104444383	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9967149112895557	WITHOUT_CLASSIFICATION	0.0032850887104444383	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999446200662695	WITHOUT_CLASSIFICATION	5.5379933730499305E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997001529877814	WITHOUT_CLASSIFICATION	2.9984701221866527E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999950242763272	WITHOUT_CLASSIFICATION	4.975723672732671E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999965007784014	WITHOUT_CLASSIFICATION	3.499221598601885E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999839401735232	WITHOUT_CLASSIFICATION	1.605982647676123E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999864513391633	WITHOUT_CLASSIFICATION	1.3548660836797376E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999864513391633	WITHOUT_CLASSIFICATION	1.3548660836797376E-5	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999294429128947	WITHOUT_CLASSIFICATION	7.055708710530387E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999891890488555	WITHOUT_CLASSIFICATION	1.0810951144586816E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999771032924423	WITHOUT_CLASSIFICATION	2.2896707557790698E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9945784062641033	WITHOUT_CLASSIFICATION	0.005421593735896682	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999588239133933	WITHOUT_CLASSIFICATION	4.117608660658688E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999702901340637	WITHOUT_CLASSIFICATION	2.970986593631262E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999570417212882	WITHOUT_CLASSIFICATION	4.2958278711764684E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999773864410478	WITHOUT_CLASSIFICATION	2.2613558952223192E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9970227223052964	WITHOUT_CLASSIFICATION	0.002977277694703513	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995526621308143	WITHOUT_CLASSIFICATION	4.473378691858249E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999958394476963	WITHOUT_CLASSIFICATION	4.1605523037090424E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998991014165295	WITHOUT_CLASSIFICATION	1.0089858347045572E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999306316627707	WITHOUT_CLASSIFICATION	6.93683372292982E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996581663491263	WITHOUT_CLASSIFICATION	3.4183365087368003E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9991457400615761	WITHOUT_CLASSIFICATION	8.542599384240141E-4	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999647651651367	WITHOUT_CLASSIFICATION	3.523483486330456E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9937357379525722	WITHOUT_CLASSIFICATION	0.0062642620474278755	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9996781173105205	WITHOUT_CLASSIFICATION	3.21882689479577E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998487965211699	WITHOUT_CLASSIFICATION	1.5120347883007833E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999905453118982	WITHOUT_CLASSIFICATION	9.454688101792148E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999659680846279	WITHOUT_CLASSIFICATION	3.403191537207925E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999774458228994	WITHOUT_CLASSIFICATION	2.255417710064354E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999110763415029	WITHOUT_CLASSIFICATION	8.89236584970416E-5	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998110961239512	WITHOUT_CLASSIFICATION	1.8890387604866032E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999945637224386	WITHOUT_CLASSIFICATION	5.43627756139113E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998215712419	WITHOUT_CLASSIFICATION	1.7842875821744615E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999540705558205	WITHOUT_CLASSIFICATION	4.5929444179496095E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999990675998986	WITHOUT_CLASSIFICATION	9.324001014043966E-6	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998430375286369	WITHOUT_CLASSIFICATION	1.5696247136315374E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9998956295474122	WITHOUT_CLASSIFICATION	1.0437045258789397E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.953342713543957	WITHOUT_CLASSIFICATION	0.046657286456043	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9982638516672641	WITHOUT_CLASSIFICATION	0.0017361483327358914	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999235224801385	WITHOUT_CLASSIFICATION	7.647751986148334E-5	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997739076871841	WITHOUT_CLASSIFICATION	2.2609231281593023E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999101110885805	WITHOUT_CLASSIFICATION	8.988891141947633E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999430404391549	WITHOUT_CLASSIFICATION	5.6959560845033895E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999718679960213	WITHOUT_CLASSIFICATION	2.8132003978558125E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994327789845826	WITHOUT_CLASSIFICATION	5.672210154172928E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999569959282818	WITHOUT_CLASSIFICATION	4.300407171815576E-5	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999811855623371	WITHOUT_CLASSIFICATION	1.8814437662962617E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9954056547269846	WITHOUT_CLASSIFICATION	0.004594345273015381	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9995671954670583	WITHOUT_CLASSIFICATION	4.3280453294167854E-4	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999713777345809	WITHOUT_CLASSIFICATION	2.8622265419073697E-5	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9996316943425869	WITHOUT_CLASSIFICATION	3.683056574130558E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999718679960213	WITHOUT_CLASSIFICATION	2.8132003978558125E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994327789845826	WITHOUT_CLASSIFICATION	5.672210154172928E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9996502086369986	WITHOUT_CLASSIFICATION	3.497913630013299E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998067365866515	WITHOUT_CLASSIFICATION	1.9326341334838343E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999982747949034	WITHOUT_CLASSIFICATION	1.7252050966549217E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997874821254618	WITHOUT_CLASSIFICATION	2.1251787453820082E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998409678672757	WITHOUT_CLASSIFICATION	1.5903213272435655E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9993122964688599	WITHOUT_CLASSIFICATION	6.877035311400903E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999585610808092	WITHOUT_CLASSIFICATION	4.1438919190799795E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.999790322291808	WITHOUT_CLASSIFICATION	2.0967770819199048E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999717947586525	WITHOUT_CLASSIFICATION	2.8205241347493577E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999831600519817	WITHOUT_CLASSIFICATION	1.6839948018267078E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9996608297069172	WITHOUT_CLASSIFICATION	3.391702930828893E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999831600519817	WITHOUT_CLASSIFICATION	1.6839948018267078E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998593521132643	WITHOUT_CLASSIFICATION	1.406478867357316E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997640891969058	WITHOUT_CLASSIFICATION	2.3591080309427406E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998593521132643	WITHOUT_CLASSIFICATION	1.406478867357316E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998081045251077	WITHOUT_CLASSIFICATION	1.9189547489219247E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9947941328100169	WITHOUT_CLASSIFICATION	0.005205867189983109	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9996880943866973	WITHOUT_CLASSIFICATION	3.1190561330272535E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9996880943866973	WITHOUT_CLASSIFICATION	3.1190561330272535E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999512068259335	WITHOUT_CLASSIFICATION	4.87931740665016E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995138974441731	WITHOUT_CLASSIFICATION	4.8610255582696337E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999512068259335	WITHOUT_CLASSIFICATION	4.87931740665016E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998080360521089	WITHOUT_CLASSIFICATION	1.919639478911466E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999658526614928	WITHOUT_CLASSIFICATION	3.414733850718453E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999033079290015	WITHOUT_CLASSIFICATION	9.669207099849769E-5	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998459295005035	WITHOUT_CLASSIFICATION	1.5407049949636513E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998530019832526	WITHOUT_CLASSIFICATION	1.4699801674738784E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999016604513341	WITHOUT_CLASSIFICATION	9.833954866593824E-5	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9995229236604842	WITHOUT_CLASSIFICATION	4.7707633951579254E-4	DEFECT
//types	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999662855965281	WITHOUT_CLASSIFICATION	3.371440347188752E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998599609622328	WITHOUT_CLASSIFICATION	1.4003903776722823E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999812118008922	WITHOUT_CLASSIFICATION	1.878819910792913E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999685545889039	WITHOUT_CLASSIFICATION	3.1445411096039034E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998077197933377	WITHOUT_CLASSIFICATION	1.9228020666232988E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999581887882196	WITHOUT_CLASSIFICATION	4.18112117804406E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999308287982223	WITHOUT_CLASSIFICATION	6.917120177773412E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999061242653152	WITHOUT_CLASSIFICATION	9.387573468483936E-5	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997417038546041	WITHOUT_CLASSIFICATION	2.582961453958831E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998872112797903	WITHOUT_CLASSIFICATION	1.1278872020969424E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9997233693939743	WITHOUT_CLASSIFICATION	2.766306060257423E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998803328754133	WITHOUT_CLASSIFICATION	1.1966712458663318E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998763613708953	WITHOUT_CLASSIFICATION	1.2363862910472548E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999020919763806	WITHOUT_CLASSIFICATION	9.790802361940737E-5	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9988679721822995	WITHOUT_CLASSIFICATION	0.0011320278177005723	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9996708287727236	WITHOUT_CLASSIFICATION	3.291712272764163E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999033079290015	WITHOUT_CLASSIFICATION	9.669207099849769E-5	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999229023769761	WITHOUT_CLASSIFICATION	7.709762302390479E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999513732291777	WITHOUT_CLASSIFICATION	4.8626770822360285E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9987141430790021	WITHOUT_CLASSIFICATION	0.001285856920997917	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999054817827541	WITHOUT_CLASSIFICATION	9.451821724589184E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999776705136031	WITHOUT_CLASSIFICATION	2.2329486396936406E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999837290830728	WITHOUT_CLASSIFICATION	1.627091692729392E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998080360521089	WITHOUT_CLASSIFICATION	1.919639478911466E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998080360521089	WITHOUT_CLASSIFICATION	1.919639478911466E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999429488398287	WITHOUT_CLASSIFICATION	5.705116017123387E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999830791842584	WITHOUT_CLASSIFICATION	1.692081574156172E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997605742068604	WITHOUT_CLASSIFICATION	2.3942579313966864E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999710665051028	WITHOUT_CLASSIFICATION	2.8933494897250417E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9990811839371505	WITHOUT_CLASSIFICATION	9.188160628495048E-4	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9993492502658932	WITHOUT_CLASSIFICATION	6.507497341068727E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9993479832658531	WITHOUT_CLASSIFICATION	6.52016734146979E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999797435895791	WITHOUT_CLASSIFICATION	2.025641042082606E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998463176994554	WITHOUT_CLASSIFICATION	1.5368230054454377E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998320771481234	WITHOUT_CLASSIFICATION	1.6792285187666E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998599609622328	WITHOUT_CLASSIFICATION	1.4003903776722823E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999939431604442	WITHOUT_CLASSIFICATION	6.056839555797016E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998320771481234	WITHOUT_CLASSIFICATION	1.6792285187666E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999964567191602	WITHOUT_CLASSIFICATION	3.5432808397970576E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999811869646573	WITHOUT_CLASSIFICATION	1.881303534272213E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999082265298043	WITHOUT_CLASSIFICATION	9.177347019578676E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9988777521234511	WITHOUT_CLASSIFICATION	0.0011222478765489363	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9990134522244641	WITHOUT_CLASSIFICATION	9.865477755358792E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983064297856709	WITHOUT_CLASSIFICATION	0.0016935702143291902	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999592005424142	WITHOUT_CLASSIFICATION	4.079945758578033E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9995875919756867	WITHOUT_CLASSIFICATION	4.124080243133262E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999561749815615	WITHOUT_CLASSIFICATION	4.382501843851336E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999263955188276	WITHOUT_CLASSIFICATION	7.360448117238649E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996618835755079	WITHOUT_CLASSIFICATION	3.381164244920886E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999627199592636	WITHOUT_CLASSIFICATION	3.728004073638647E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998320771481234	WITHOUT_CLASSIFICATION	1.6792285187666E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9990134522244641	WITHOUT_CLASSIFICATION	9.865477755358792E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999592005424142	WITHOUT_CLASSIFICATION	4.079945758578033E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996903124689412	WITHOUT_CLASSIFICATION	3.0968753105880447E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999747147742997	WITHOUT_CLASSIFICATION	2.5285225700349367E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999448275530417	WITHOUT_CLASSIFICATION	5.5172446958396644E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999165958518227	WITHOUT_CLASSIFICATION	8.340414817724387E-5	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.99996272518846	WITHOUT_CLASSIFICATION	3.727481153993705E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999512959290922	WITHOUT_CLASSIFICATION	4.870407090791902E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999964567191602	WITHOUT_CLASSIFICATION	3.5432808397970576E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999802228005092	WITHOUT_CLASSIFICATION	1.977719949080346E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999557035871929	WITHOUT_CLASSIFICATION	4.429641280707068E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999798185991486	WITHOUT_CLASSIFICATION	2.0181400851362613E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999833480381657	WITHOUT_CLASSIFICATION	1.6651961834366666E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999833075552282	WITHOUT_CLASSIFICATION	1.669244477183213E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999622078695839	WITHOUT_CLASSIFICATION	3.779213041610369E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998081045251077	WITHOUT_CLASSIFICATION	1.9189547489219247E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584833156717	WITHOUT_CLASSIFICATION	1.4151668432826957E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999937160763182	WITHOUT_CLASSIFICATION	6.283923681909265E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9974534226936028	WITHOUT_CLASSIFICATION	0.002546577306397147	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9986317970841915	WITHOUT_CLASSIFICATION	0.0013682029158085388	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.998849892468418	WITHOUT_CLASSIFICATION	0.0011501075315819079	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997105615736293	WITHOUT_CLASSIFICATION	2.8943842637076057E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9998329449371373	WITHOUT_CLASSIFICATION	1.6705506286269548E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998953595066076	WITHOUT_CLASSIFICATION	1.0464049339241529E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999512959290922	WITHOUT_CLASSIFICATION	4.870407090791902E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998964190171746	WITHOUT_CLASSIFICATION	1.0358098282535782E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999106053743654	WITHOUT_CLASSIFICATION	8.939462563459246E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999222906653727	WITHOUT_CLASSIFICATION	7.770933462726243E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999378612122946	WITHOUT_CLASSIFICATION	6.213878770547579E-5	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996515100599291	WITHOUT_CLASSIFICATION	3.484899400708243E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998242451396769	WITHOUT_CLASSIFICATION	1.7575486032307268E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999593365408704	WITHOUT_CLASSIFICATION	4.0663459129626855E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9940297066123811	WITHOUT_CLASSIFICATION	0.0059702933876189706	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999921812390157	WITHOUT_CLASSIFICATION	7.818760984307989E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999511862666786	WITHOUT_CLASSIFICATION	4.88137333214857E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999333533507206	WITHOUT_CLASSIFICATION	6.664664927937543E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998104341212506	WITHOUT_CLASSIFICATION	1.8956587874935742E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999838322323167	WITHOUT_CLASSIFICATION	1.6167767683318783E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999968743953395	WITHOUT_CLASSIFICATION	3.1256046605976603E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9992038282833773	WITHOUT_CLASSIFICATION	7.961717166227553E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999944914830136	WITHOUT_CLASSIFICATION	5.508516986447234E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999869649480718	WITHOUT_CLASSIFICATION	1.303505192830611E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997539201929626	WITHOUT_CLASSIFICATION	2.460798070373673E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999605152135962	WITHOUT_CLASSIFICATION	3.948478640379998E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999931439132606	WITHOUT_CLASSIFICATION	6.856086739403272E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999196322490312	WITHOUT_CLASSIFICATION	8.03677509687313E-5	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999592194716027	WITHOUT_CLASSIFICATION	4.078052839726615E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9511176851339571	WITHOUT_CLASSIFICATION	0.04888231486604293	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999600700730983	WITHOUT_CLASSIFICATION	3.992992690164645E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997903517738657	WITHOUT_CLASSIFICATION	2.096482261343816E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997982429330455	WITHOUT_CLASSIFICATION	2.0175706695454605E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9981564647904904	WITHOUT_CLASSIFICATION	0.001843535209509596	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997386602691176	WITHOUT_CLASSIFICATION	2.613397308823849E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9961309935041293	WITHOUT_CLASSIFICATION	0.0038690064958707996	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999318792806172	WITHOUT_CLASSIFICATION	6.812071938276739E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993028576325	WITHOUT_CLASSIFICATION	6.971423675545989E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9994957238658243	WITHOUT_CLASSIFICATION	5.042761341756434E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9998704796820235	WITHOUT_CLASSIFICATION	1.2952031797655334E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999577807675789	WITHOUT_CLASSIFICATION	4.2219232421201E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9968615401445594	WITHOUT_CLASSIFICATION	0.0031384598554405913	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9998704796820235	WITHOUT_CLASSIFICATION	1.2952031797655334E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9994957238658243	WITHOUT_CLASSIFICATION	5.042761341756434E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999577807675789	WITHOUT_CLASSIFICATION	4.2219232421201E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999048247000641	WITHOUT_CLASSIFICATION	9.517529993577829E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999762608700071	WITHOUT_CLASSIFICATION	2.373912999283914E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9988390136079599	WITHOUT_CLASSIFICATION	0.0011609863920401032	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998805063581286	WITHOUT_CLASSIFICATION	1.1949364187130753E-4	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999503040952054	WITHOUT_CLASSIFICATION	4.969590479458688E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9452745961628273	WITHOUT_CLASSIFICATION	0.05472540383717279	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9993019374437719	WITHOUT_CLASSIFICATION	6.980625562281947E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997477899122249	WITHOUT_CLASSIFICATION	2.522100877751045E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999996878544891	WITHOUT_CLASSIFICATION	3.121455109407787E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9985117269443272	WITHOUT_CLASSIFICATION	0.0014882730556727663	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999545758386728	WITHOUT_CLASSIFICATION	4.5424161327350856E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998889229289174	WITHOUT_CLASSIFICATION	1.1107707108267773E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998840256236434	WITHOUT_CLASSIFICATION	1.1597437635664959E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997426783399997	WITHOUT_CLASSIFICATION	2.5732166000023786E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999985429549708	WITHOUT_CLASSIFICATION	1.4570450291879187E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999927120208815	WITHOUT_CLASSIFICATION	7.287979118516834E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993320531904607	WITHOUT_CLASSIFICATION	6.679468095392245E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999980824586912	WITHOUT_CLASSIFICATION	1.9175413088272337E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996827379352016	WITHOUT_CLASSIFICATION	3.172620647983649E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999603293209148	WITHOUT_CLASSIFICATION	3.967067908517742E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9985124327576291	WITHOUT_CLASSIFICATION	0.0014875672423707805	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999988395018287	WITHOUT_CLASSIFICATION	1.1604981714023152E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999124457138986	WITHOUT_CLASSIFICATION	8.755428610143102E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999737210153117	WITHOUT_CLASSIFICATION	2.627898468828393E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999582311507675	WITHOUT_CLASSIFICATION	4.176884923258402E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999582311507675	WITHOUT_CLASSIFICATION	4.176884923258402E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999918582639418	WITHOUT_CLASSIFICATION	8.141736058291071E-6	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999918582639418	WITHOUT_CLASSIFICATION	8.141736058291071E-6	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9997832355703347	WITHOUT_CLASSIFICATION	2.1676442966526958E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993320531904607	WITHOUT_CLASSIFICATION	6.679468095392245E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999653742594937	WITHOUT_CLASSIFICATION	3.462574050626248E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999747328892535	WITHOUT_CLASSIFICATION	2.5267110746455714E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998676582352983	WITHOUT_CLASSIFICATION	1.3234176470168236E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998676582352983	WITHOUT_CLASSIFICATION	1.3234176470168236E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999698422711196	WITHOUT_CLASSIFICATION	3.015772888045525E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999099480525279	WITHOUT_CLASSIFICATION	9.005194747220567E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999663604372758	WITHOUT_CLASSIFICATION	3.363956272421688E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.999972910909419	WITHOUT_CLASSIFICATION	2.7089090581041875E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9994303870111615	WITHOUT_CLASSIFICATION	5.696129888384738E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999593470812495	WITHOUT_CLASSIFICATION	4.0652918750572165E-5	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998995179187603	WITHOUT_CLASSIFICATION	1.0048208123960833E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.99977231810172	WITHOUT_CLASSIFICATION	2.2768189827998084E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999123489360325	WITHOUT_CLASSIFICATION	8.765106396744341E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9996544345027153	WITHOUT_CLASSIFICATION	3.455654972847808E-4	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999325462848656	WITHOUT_CLASSIFICATION	6.745371513446068E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.999888496763424	WITHOUT_CLASSIFICATION	1.1150323657599403E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998879562748502	WITHOUT_CLASSIFICATION	1.1204372514980306E-4	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999396931684028	WITHOUT_CLASSIFICATION	6.0306831597220334E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999199697475205	WITHOUT_CLASSIFICATION	8.003025247955857E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999161777559722	WITHOUT_CLASSIFICATION	8.382224402782808E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266205129996	WITHOUT_CLASSIFICATION	7.33794870003654E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999542241054472	WITHOUT_CLASSIFICATION	4.577589455275644E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999592001762633	WITHOUT_CLASSIFICATION	4.0799823736766616E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9986817404661683	WITHOUT_CLASSIFICATION	0.0013182595338316766	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999952031700612	WITHOUT_CLASSIFICATION	4.7968299388054E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9985035220810115	WITHOUT_CLASSIFICATION	0.001496477918988576	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997946600079813	WITHOUT_CLASSIFICATION	2.0533999201863753E-4	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999664797274698	WITHOUT_CLASSIFICATION	3.3520272530252906E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997362070289264	WITHOUT_CLASSIFICATION	2.6379297107352546E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998526230682032	WITHOUT_CLASSIFICATION	1.473769317967445E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999511862666786	WITHOUT_CLASSIFICATION	4.88137333214857E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998886695436938	WITHOUT_CLASSIFICATION	1.1133045630628793E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9988507988256767	WITHOUT_CLASSIFICATION	0.0011492011743232458	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998794239339617	WITHOUT_CLASSIFICATION	1.2057606603837429E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998781180151352	WITHOUT_CLASSIFICATION	1.21881984864805E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998932126801608	WITHOUT_CLASSIFICATION	1.0678731983902766E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998932126801608	WITHOUT_CLASSIFICATION	1.0678731983902766E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999869704808557	WITHOUT_CLASSIFICATION	1.3029519144392148E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999792991981015	WITHOUT_CLASSIFICATION	2.0700801898520536E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999632259944685	WITHOUT_CLASSIFICATION	3.677400553156173E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999632259944685	WITHOUT_CLASSIFICATION	3.677400553156173E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998310667259501	WITHOUT_CLASSIFICATION	1.6893327404986664E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9995492598871306	WITHOUT_CLASSIFICATION	4.507401128693867E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9985171648914548	WITHOUT_CLASSIFICATION	0.0014828351085452004	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999334872707383	WITHOUT_CLASSIFICATION	6.651272926178262E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999060160065755	WITHOUT_CLASSIFICATION	9.398399342456249E-5	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999503923685563	WITHOUT_CLASSIFICATION	4.960763144369811E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999959042725414	WITHOUT_CLASSIFICATION	4.0957274586076446E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999548037444279	WITHOUT_CLASSIFICATION	4.519625557207246E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999548037444279	WITHOUT_CLASSIFICATION	4.519625557207246E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999844968348557	WITHOUT_CLASSIFICATION	1.5503165144301555E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999156327077432	WITHOUT_CLASSIFICATION	8.43672922568599E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999156327077432	WITHOUT_CLASSIFICATION	8.43672922568599E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999769703280189	WITHOUT_CLASSIFICATION	2.302967198107856E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999243161515092	WITHOUT_CLASSIFICATION	7.568384849080435E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999875934892992	WITHOUT_CLASSIFICATION	1.2406510700853924E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999771025522033	WITHOUT_CLASSIFICATION	2.2897447796727678E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999607974227346	WITHOUT_CLASSIFICATION	3.9202577265341534E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9980027462926014	WITHOUT_CLASSIFICATION	0.0019972537073984684	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9995910496812058	WITHOUT_CLASSIFICATION	4.089503187942295E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999911052184167	WITHOUT_CLASSIFICATION	8.894781583294254E-5	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9985761180396291	WITHOUT_CLASSIFICATION	0.0014238819603709129	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.998608156533071	WITHOUT_CLASSIFICATION	0.0013918434669289096	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999701222110977	WITHOUT_CLASSIFICATION	2.9877788902350187E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998958550835464	WITHOUT_CLASSIFICATION	1.0414491645355424E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998958550835464	WITHOUT_CLASSIFICATION	1.0414491645355424E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998958550835464	WITHOUT_CLASSIFICATION	1.0414491645355424E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998958550835464	WITHOUT_CLASSIFICATION	1.0414491645355424E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999945136588573	WITHOUT_CLASSIFICATION	5.486341142699257E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9974112865907802	WITHOUT_CLASSIFICATION	0.0025887134092197795	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999208429520909	WITHOUT_CLASSIFICATION	7.915704790911701E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998733941087974	WITHOUT_CLASSIFICATION	1.2660589120258182E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9981512895605114	WITHOUT_CLASSIFICATION	0.001848710439488733	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999335795225054	WITHOUT_CLASSIFICATION	6.642047749460818E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995871144932635	WITHOUT_CLASSIFICATION	4.12885506736527E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999654039277344	WITHOUT_CLASSIFICATION	3.459607226569475E-5	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999406281963877	WITHOUT_CLASSIFICATION	5.937180361220196E-5	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999490028822283	WITHOUT_CLASSIFICATION	5.099711777163163E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997425157706842	WITHOUT_CLASSIFICATION	2.574842293158119E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995178706507444	WITHOUT_CLASSIFICATION	4.821293492556501E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998076725128582	WITHOUT_CLASSIFICATION	1.9232748714183257E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999920282067946	WITHOUT_CLASSIFICATION	7.971793205461902E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997425157706842	WITHOUT_CLASSIFICATION	2.574842293158119E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999245037615669	WITHOUT_CLASSIFICATION	7.549623843299883E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998162585746911	WITHOUT_CLASSIFICATION	1.8374142530885838E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999981049666319	WITHOUT_CLASSIFICATION	1.8950333680757542E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996698290088459	WITHOUT_CLASSIFICATION	3.301709911540993E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9994652805664049	WITHOUT_CLASSIFICATION	5.347194335950027E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987806264293412	WITHOUT_CLASSIFICATION	0.0012193735706587916	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999874219347624	WITHOUT_CLASSIFICATION	1.2578065237503536E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999342499025365	WITHOUT_CLASSIFICATION	6.575009746347506E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810654710446	WITHOUT_CLASSIFICATION	1.8934528955390094E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999227244583259	WITHOUT_CLASSIFICATION	7.72755416742407E-5	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810654710446	WITHOUT_CLASSIFICATION	1.8934528955390094E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999317300503087	WITHOUT_CLASSIFICATION	6.826994969130955E-5	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9955653429364657	WITHOUT_CLASSIFICATION	0.004434657063534277	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998926976507074	WITHOUT_CLASSIFICATION	1.0730234929252203E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998644754727049	WITHOUT_CLASSIFICATION	1.3552452729510616E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997582662916908	WITHOUT_CLASSIFICATION	2.4173370830901138E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999967785138172	WITHOUT_CLASSIFICATION	3.2214861828098648E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999252772894821	WITHOUT_CLASSIFICATION	7.472271051796724E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999459088600453	WITHOUT_CLASSIFICATION	5.40911399546748E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999252772894821	WITHOUT_CLASSIFICATION	7.472271051796724E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999925573332558	WITHOUT_CLASSIFICATION	7.442666744205128E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999877071439709	WITHOUT_CLASSIFICATION	1.2292856029005187E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999479905749444	WITHOUT_CLASSIFICATION	5.2009425055480745E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999487024459528	WITHOUT_CLASSIFICATION	5.1297554047161354E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999967785138172	WITHOUT_CLASSIFICATION	3.2214861828098648E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999459088600453	WITHOUT_CLASSIFICATION	5.40911399546748E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999925573332558	WITHOUT_CLASSIFICATION	7.442666744205128E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999741425566897	WITHOUT_CLASSIFICATION	2.5857443310358193E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9998059793653603	WITHOUT_CLASSIFICATION	1.9402063463963933E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9997142486738817	WITHOUT_CLASSIFICATION	2.85751326118359E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998681412292666	WITHOUT_CLASSIFICATION	1.3185877073337092E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998808073324144	WITHOUT_CLASSIFICATION	1.1919266758562283E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999692879124399	WITHOUT_CLASSIFICATION	3.071208756005407E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266205129996	WITHOUT_CLASSIFICATION	7.33794870003654E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999877071439709	WITHOUT_CLASSIFICATION	1.2292856029005187E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999753477546065	WITHOUT_CLASSIFICATION	2.4652245393536783E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996818340979651	WITHOUT_CLASSIFICATION	3.1816590203490925E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999451246807094	WITHOUT_CLASSIFICATION	5.487531929061432E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266205129996	WITHOUT_CLASSIFICATION	7.33794870003654E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999459671995833	WITHOUT_CLASSIFICATION	5.403280041667633E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266205129996	WITHOUT_CLASSIFICATION	7.33794870003654E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999879345019594	WITHOUT_CLASSIFICATION	1.2065498040595576E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999936753825123	WITHOUT_CLASSIFICATION	6.324617487693594E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998044872767241	WITHOUT_CLASSIFICATION	1.9551272327589982E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999846597770689	WITHOUT_CLASSIFICATION	1.5340222931130735E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999862847523058	WITHOUT_CLASSIFICATION	1.3715247694237478E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999349800773483	WITHOUT_CLASSIFICATION	6.501992265177992E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999617665451382	WITHOUT_CLASSIFICATION	3.8233454861824514E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996259573413463	WITHOUT_CLASSIFICATION	3.7404265865375187E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999667201843736	WITHOUT_CLASSIFICATION	3.327981562636746E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998240327110633	WITHOUT_CLASSIFICATION	1.7596728893666256E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999943787684839	WITHOUT_CLASSIFICATION	5.621231516084938E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998237375609708	WITHOUT_CLASSIFICATION	1.7626243902923907E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9755735269028315	WITHOUT_CLASSIFICATION	0.02442647309716854	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.99985152662311	WITHOUT_CLASSIFICATION	1.484733768900726E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9995220313071482	WITHOUT_CLASSIFICATION	4.779686928517726E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999978213557358	WITHOUT_CLASSIFICATION	2.1786442642258743E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999874895804352	WITHOUT_CLASSIFICATION	1.2510419564991848E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999470931575217	WITHOUT_CLASSIFICATION	5.29068424782978E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999916511416415	WITHOUT_CLASSIFICATION	8.348858358554345E-6	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998724438522364	WITHOUT_CLASSIFICATION	1.2755614776361886E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996820086604505	WITHOUT_CLASSIFICATION	3.1799133954943506E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996820086604505	WITHOUT_CLASSIFICATION	3.1799133954943506E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999540695660132	WITHOUT_CLASSIFICATION	4.5930433986730425E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9996317310108884	WITHOUT_CLASSIFICATION	3.6826898911162593E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996614768846541	WITHOUT_CLASSIFICATION	3.3852311534591736E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999915152844289	WITHOUT_CLASSIFICATION	8.484715571071217E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997237085514002	WITHOUT_CLASSIFICATION	2.7629144859968644E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999358411452997	WITHOUT_CLASSIFICATION	6.415885470036844E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998071582654778	WITHOUT_CLASSIFICATION	1.9284173452228386E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9990910180453619	WITHOUT_CLASSIFICATION	9.089819546379209E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.99437461982537	WITHOUT_CLASSIFICATION	0.005625380174630025	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999538843924265	WITHOUT_CLASSIFICATION	4.611560757354951E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998410175238533	WITHOUT_CLASSIFICATION	1.5898247614658324E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9995964424756422	WITHOUT_CLASSIFICATION	4.0355752435782525E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998596519453744	WITHOUT_CLASSIFICATION	1.403480546256261E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999965229500811	WITHOUT_CLASSIFICATION	3.477049918894322E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999975590853192	WITHOUT_CLASSIFICATION	2.4409146807813867E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995102137944667	WITHOUT_CLASSIFICATION	4.897862055332315E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999206128920776	WITHOUT_CLASSIFICATION	7.938710792244071E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999206128920776	WITHOUT_CLASSIFICATION	7.938710792244071E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999834858026868	WITHOUT_CLASSIFICATION	1.651419731319942E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996259573413463	WITHOUT_CLASSIFICATION	3.7404265865375187E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989487774052428	WITHOUT_CLASSIFICATION	0.0010512225947572076	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999825028411532	WITHOUT_CLASSIFICATION	1.7497158846782636E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999283984570349	WITHOUT_CLASSIFICATION	7.160154296516268E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997646689390971	WITHOUT_CLASSIFICATION	2.3533106090298817E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998933023645735	WITHOUT_CLASSIFICATION	1.066976354264247E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9996697929232334	WITHOUT_CLASSIFICATION	3.302070767666068E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999519413313506	WITHOUT_CLASSIFICATION	4.8058668649385E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997765037853249	WITHOUT_CLASSIFICATION	2.2349621467514949E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999861744651852	WITHOUT_CLASSIFICATION	1.3825534814841826E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999186097978771	WITHOUT_CLASSIFICATION	8.139020212294438E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999692526417874	WITHOUT_CLASSIFICATION	3.074735821270024E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.99994401387341	WITHOUT_CLASSIFICATION	5.598612658985372E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998920455526	WITHOUT_CLASSIFICATION	1.0795444742335735E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998515403874508	WITHOUT_CLASSIFICATION	1.4845961254917502E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999887430888796	WITHOUT_CLASSIFICATION	1.1256911120406293E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999967052845298	WITHOUT_CLASSIFICATION	3.294715470249718E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999779221091965	WITHOUT_CLASSIFICATION	2.2077890803489598E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999376540212	WITHOUT_CLASSIFICATION	6.234597881048458E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996660468885816	WITHOUT_CLASSIFICATION	3.339531114183681E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999513552923227	WITHOUT_CLASSIFICATION	4.864470767737815E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9967560724942766	WITHOUT_CLASSIFICATION	0.0032439275057235574	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999854547974175	WITHOUT_CLASSIFICATION	1.4545202582469619E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999341316798946	WITHOUT_CLASSIFICATION	6.586832010533842E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998225813380581	WITHOUT_CLASSIFICATION	1.7741866194195794E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9996135665497926	WITHOUT_CLASSIFICATION	3.864334502074241E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996295903133872	WITHOUT_CLASSIFICATION	3.704096866127963E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999808970571112	WITHOUT_CLASSIFICATION	1.910294288873003E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9971932393845311	WITHOUT_CLASSIFICATION	0.0028067606154688926	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998803416704802	WITHOUT_CLASSIFICATION	1.1965832951975913E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999053405475593	WITHOUT_CLASSIFICATION	9.465945244066617E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998968650014701	WITHOUT_CLASSIFICATION	1.0313499852987232E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998772355194094	WITHOUT_CLASSIFICATION	1.2276448059049286E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994704893759627	WITHOUT_CLASSIFICATION	5.295106240373206E-4	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9984887701490492	WITHOUT_CLASSIFICATION	0.001511229850950709	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9459949752494612	WITHOUT_CLASSIFICATION	0.054005024750538755	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999281686491818	WITHOUT_CLASSIFICATION	7.183135081820512E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999281686491818	WITHOUT_CLASSIFICATION	7.183135081820512E-5	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999573142550048	WITHOUT_CLASSIFICATION	4.268574499523766E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999672010142002	WITHOUT_CLASSIFICATION	3.279898579975821E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998171729956582	WITHOUT_CLASSIFICATION	1.8282700434184886E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998171729956582	WITHOUT_CLASSIFICATION	1.8282700434184886E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999855407887484	WITHOUT_CLASSIFICATION	1.445921125158888E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999451026788302	WITHOUT_CLASSIFICATION	5.4897321169714284E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999453713536953	WITHOUT_CLASSIFICATION	5.462864630466237E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999987843476726	WITHOUT_CLASSIFICATION	1.215652327456052E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998849276529592	WITHOUT_CLASSIFICATION	1.1507234704076449E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999300646432766	WITHOUT_CLASSIFICATION	6.993535672343275E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999300646432766	WITHOUT_CLASSIFICATION	6.993535672343275E-5	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999144106621364	WITHOUT_CLASSIFICATION	8.558933786356869E-5	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998080360521089	WITHOUT_CLASSIFICATION	1.919639478911466E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999513260298184	WITHOUT_CLASSIFICATION	4.867397018164761E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999513260298184	WITHOUT_CLASSIFICATION	4.867397018164761E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999746110625262	WITHOUT_CLASSIFICATION	2.5388937473811123E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999772051345711	WITHOUT_CLASSIFICATION	2.2794865428875958E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998656995863124	WITHOUT_CLASSIFICATION	1.3430041368748416E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.999985663402474	WITHOUT_CLASSIFICATION	1.4336597526137506E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999646792145525	WITHOUT_CLASSIFICATION	3.532078544750975E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999551222935597	WITHOUT_CLASSIFICATION	4.4877706440379424E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999306127479668	WITHOUT_CLASSIFICATION	6.938725203321519E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999742992973298	WITHOUT_CLASSIFICATION	2.570070267018782E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999966221407928	WITHOUT_CLASSIFICATION	3.3778592071572176E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998538330163071	WITHOUT_CLASSIFICATION	1.4616698369292088E-4	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998982516506694	WITHOUT_CLASSIFICATION	1.0174834933065178E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9981482354637704	WITHOUT_CLASSIFICATION	0.0018517645362294754	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999663154744528	WITHOUT_CLASSIFICATION	3.36845255472438E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999963547768026	WITHOUT_CLASSIFICATION	3.6452231973955455E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999589640597039	WITHOUT_CLASSIFICATION	4.10359402962374E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9992496059668927	WITHOUT_CLASSIFICATION	7.5039403310727E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998742897122251	WITHOUT_CLASSIFICATION	1.2571028777491746E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997575574396262	WITHOUT_CLASSIFICATION	2.4244256037367348E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999609014874068	WITHOUT_CLASSIFICATION	3.909851259319841E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997706328252328	WITHOUT_CLASSIFICATION	2.2936717476715945E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9995592574538888	WITHOUT_CLASSIFICATION	4.4074254611124123E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999091336349561	WITHOUT_CLASSIFICATION	9.086636504388285E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998887668779733	WITHOUT_CLASSIFICATION	1.1123312202662705E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999262986682914	WITHOUT_CLASSIFICATION	7.370133170859205E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.999661308653735	WITHOUT_CLASSIFICATION	3.38691346265008E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999371243095688	WITHOUT_CLASSIFICATION	6.287569043117256E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999565680604047	WITHOUT_CLASSIFICATION	4.343193959528363E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999995578014232	WITHOUT_CLASSIFICATION	4.4219857679507483E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999914864495415	WITHOUT_CLASSIFICATION	8.513550458518876E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999991861559871	WITHOUT_CLASSIFICATION	8.138440129047132E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999810759115446	WITHOUT_CLASSIFICATION	1.8924088455400618E-5	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999989227000958	WITHOUT_CLASSIFICATION	1.077299904188143E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999969205636101	WITHOUT_CLASSIFICATION	3.0794363899903436E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998062639459058	WITHOUT_CLASSIFICATION	1.9373605409413964E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999912664863041	WITHOUT_CLASSIFICATION	8.733513695895162E-5	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999528903557847	WITHOUT_CLASSIFICATION	4.710964421533348E-5	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999452625021958	WITHOUT_CLASSIFICATION	5.4737497804082625E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9986661340813636	WITHOUT_CLASSIFICATION	0.0013338659186362864	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999647009437446	WITHOUT_CLASSIFICATION	3.52990562555559E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.99997813254147	WITHOUT_CLASSIFICATION	2.1867458529950265E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999145175944087	WITHOUT_CLASSIFICATION	8.548240559118338E-5	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999544993294979	WITHOUT_CLASSIFICATION	4.550067050215204E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9993330830254091	WITHOUT_CLASSIFICATION	6.669169745908723E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999844642778273	WITHOUT_CLASSIFICATION	1.5535722172659163E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999415789016197	WITHOUT_CLASSIFICATION	5.842109838024838E-5	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999719547936857	WITHOUT_CLASSIFICATION	2.8045206314210318E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999879106746467	WITHOUT_CLASSIFICATION	1.2089325353295895E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999934342614142	WITHOUT_CLASSIFICATION	6.565738585732747E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999184882705952	WITHOUT_CLASSIFICATION	8.151172940489452E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999989851030209	WITHOUT_CLASSIFICATION	1.014896979102846E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995539410342198	WITHOUT_CLASSIFICATION	4.4605896578026066E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999959062894993	WITHOUT_CLASSIFICATION	4.093710500691053E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9982372819130515	WITHOUT_CLASSIFICATION	0.0017627180869484757	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999259834864722	WITHOUT_CLASSIFICATION	7.401651352778478E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994790404440751	WITHOUT_CLASSIFICATION	5.209595559248786E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999899175356806	WITHOUT_CLASSIFICATION	1.0082464319371207E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999984700829621	WITHOUT_CLASSIFICATION	1.5299170378938223E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999984700829621	WITHOUT_CLASSIFICATION	1.5299170378938223E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999863771578529	WITHOUT_CLASSIFICATION	1.3622842147178772E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9996368518999605	WITHOUT_CLASSIFICATION	3.6314810003955643E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999955463012387	WITHOUT_CLASSIFICATION	4.453698761262688E-6	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999726834656244	WITHOUT_CLASSIFICATION	2.7316534375650277E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999294768801282	WITHOUT_CLASSIFICATION	7.052311987169385E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996949390853719	WITHOUT_CLASSIFICATION	3.0506091462813745E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999947579429844	WITHOUT_CLASSIFICATION	5.242057015539171E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999980906462979	WITHOUT_CLASSIFICATION	1.909353702093453E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997416969849843	WITHOUT_CLASSIFICATION	2.583030150156196E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999980013116082	WITHOUT_CLASSIFICATION	1.99868839180741E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999383602073935	WITHOUT_CLASSIFICATION	6.163979260658003E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9959909331690155	WITHOUT_CLASSIFICATION	0.004009066830984457	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997834069738	WITHOUT_CLASSIFICATION	2.1659302605310166E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999992512412367	WITHOUT_CLASSIFICATION	7.487587633224947E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999706748007911	WITHOUT_CLASSIFICATION	2.932519920889408E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999706748007911	WITHOUT_CLASSIFICATION	2.932519920889408E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999354295294602	WITHOUT_CLASSIFICATION	6.457047053976003E-5	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9994799066437776	WITHOUT_CLASSIFICATION	5.200933562223628E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998994146342661	WITHOUT_CLASSIFICATION	1.0058536573387704E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999876781705391	WITHOUT_CLASSIFICATION	1.2321829460954067E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999904717141664	WITHOUT_CLASSIFICATION	9.528285833594792E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999933113012622	WITHOUT_CLASSIFICATION	6.688698737800067E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997616852869161	WITHOUT_CLASSIFICATION	2.3831471308376692E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9977158347715018	WITHOUT_CLASSIFICATION	0.0022841652284982094	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999988296370944	WITHOUT_CLASSIFICATION	1.1703629056552925E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999371453428387	WITHOUT_CLASSIFICATION	6.285465716125017E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999798380653048	WITHOUT_CLASSIFICATION	2.016193469516804E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999212066586535	WITHOUT_CLASSIFICATION	7.879334134655019E-5	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999950657548922	WITHOUT_CLASSIFICATION	4.934245107790051E-6	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999709202522564	WITHOUT_CLASSIFICATION	2.907974774354963E-5	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999317891547974	WITHOUT_CLASSIFICATION	6.82108452026108E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998447975170619	WITHOUT_CLASSIFICATION	1.5520248293801546E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999614226924074	WITHOUT_CLASSIFICATION	3.857730759260891E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999916832524097	WITHOUT_CLASSIFICATION	8.316747590298851E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999755266784781	WITHOUT_CLASSIFICATION	2.4473321521836273E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999977107504383	WITHOUT_CLASSIFICATION	2.2892495616935015E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9997974583920576	WITHOUT_CLASSIFICATION	2.0254160794242344E-4	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999995763837464	WITHOUT_CLASSIFICATION	4.236162536043231E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999872279715616	WITHOUT_CLASSIFICATION	1.2772028438401005E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998950198901968	WITHOUT_CLASSIFICATION	1.0498010980316373E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9993303181308049	WITHOUT_CLASSIFICATION	6.696818691951653E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999139088228054	WITHOUT_CLASSIFICATION	8.609117719465535E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999822320775394	WITHOUT_CLASSIFICATION	1.7767922460645038E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998122035800096	WITHOUT_CLASSIFICATION	1.8779641999050218E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997240807637858	WITHOUT_CLASSIFICATION	2.7591923621415876E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998379932583004	WITHOUT_CLASSIFICATION	1.620067416995933E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997689825404837	WITHOUT_CLASSIFICATION	2.310174595161474E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999599665539327	WITHOUT_CLASSIFICATION	4.0033446067288454E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999939934443034	WITHOUT_CLASSIFICATION	6.00655569661656E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999819581472012	WITHOUT_CLASSIFICATION	1.8041852798792533E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9998897671840106	WITHOUT_CLASSIFICATION	1.1023281598938673E-4	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999180949282015	WITHOUT_CLASSIFICATION	8.19050717985445E-5	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999469679609737	WITHOUT_CLASSIFICATION	5.303203902623771E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997415857623948	WITHOUT_CLASSIFICATION	2.5841423760525117E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998716678942096	WITHOUT_CLASSIFICATION	1.2833210579038607E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999943076690379	WITHOUT_CLASSIFICATION	5.692330962131277E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9742646216218525	WITHOUT_CLASSIFICATION	0.025735378378147527	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9742646216218525	WITHOUT_CLASSIFICATION	0.025735378378147527	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999947515906619	WITHOUT_CLASSIFICATION	5.248409338135987E-6	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9019201269808659	WITHOUT_CLASSIFICATION	0.09807987301913418	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999976345937637	WITHOUT_CLASSIFICATION	2.3654062363045884E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999783456949687	WITHOUT_CLASSIFICATION	2.1654305031404232E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9997516662702548	WITHOUT_CLASSIFICATION	2.4833372974526356E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9987981894097856	WITHOUT_CLASSIFICATION	0.0012018105902143622	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999817732545858	WITHOUT_CLASSIFICATION	1.8226745414263787E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997447821083796	WITHOUT_CLASSIFICATION	2.552178916204606E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9980109621495289	WITHOUT_CLASSIFICATION	0.001989037850471078	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998295623603524	WITHOUT_CLASSIFICATION	1.704376396475911E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204611180454	WITHOUT_CLASSIFICATION	7.95388819545645E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.998815938608837	WITHOUT_CLASSIFICATION	0.0011840613911629995	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9984377499373099	WITHOUT_CLASSIFICATION	0.0015622500626900583	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999404011576248	WITHOUT_CLASSIFICATION	5.9598842375108985E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9995594601188449	WITHOUT_CLASSIFICATION	4.4053988115504714E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9995510761742007	WITHOUT_CLASSIFICATION	4.489238257992534E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999126126269908	WITHOUT_CLASSIFICATION	8.738737300921947E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9995554239428942	WITHOUT_CLASSIFICATION	4.4457605710580096E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9989400010301287	WITHOUT_CLASSIFICATION	0.0010599989698712815	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9986426456082951	WITHOUT_CLASSIFICATION	0.0013573543917049032	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999211129845401	WITHOUT_CLASSIFICATION	7.888701545991324E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999919611423848	WITHOUT_CLASSIFICATION	8.038857615160982E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999925570198629	WITHOUT_CLASSIFICATION	7.4429801370791976E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998915391475661	WITHOUT_CLASSIFICATION	1.0846085243383458E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9996780335903798	WITHOUT_CLASSIFICATION	3.2196640962017976E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999362764771773	WITHOUT_CLASSIFICATION	6.372352282273756E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9996561340184218	WITHOUT_CLASSIFICATION	3.438659815782251E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9935468358401053	WITHOUT_CLASSIFICATION	0.006453164159894829	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999491689563158	WITHOUT_CLASSIFICATION	5.0831043684075896E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996451212609325	WITHOUT_CLASSIFICATION	3.548787390674707E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999966944112271	WITHOUT_CLASSIFICATION	3.305588772853956E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999880762245266	WITHOUT_CLASSIFICATION	1.1923775473434073E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999212403664413	WITHOUT_CLASSIFICATION	7.875963355879443E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997991221057467	WITHOUT_CLASSIFICATION	2.008778942532194E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999876302365785	WITHOUT_CLASSIFICATION	1.2369763421508695E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997676413056472	WITHOUT_CLASSIFICATION	2.3235869435264708E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9997081890063512	WITHOUT_CLASSIFICATION	2.918109936488162E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999948811677364	WITHOUT_CLASSIFICATION	5.11883226352821E-6	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999262000036362	WITHOUT_CLASSIFICATION	7.379999636371803E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999391532213718	WITHOUT_CLASSIFICATION	6.084677862817311E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998991064351127	WITHOUT_CLASSIFICATION	1.0089356488728143E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9996730925986868	WITHOUT_CLASSIFICATION	3.269074013131616E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999643287161896	WITHOUT_CLASSIFICATION	3.567128381039715E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999984192362111	WITHOUT_CLASSIFICATION	1.5807637889762272E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999996356106134	WITHOUT_CLASSIFICATION	3.643893865478949E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996277076708592	WITHOUT_CLASSIFICATION	3.722923291408021E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997947261334688	WITHOUT_CLASSIFICATION	2.052738665312342E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997834069738	WITHOUT_CLASSIFICATION	2.1659302605310166E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9998628664455027	WITHOUT_CLASSIFICATION	1.3713355449722686E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999958234546372	WITHOUT_CLASSIFICATION	4.1765453627490174E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998337075911363	WITHOUT_CLASSIFICATION	1.6629240886368871E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999169806523461	WITHOUT_CLASSIFICATION	8.301934765385666E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999983272546086	WITHOUT_CLASSIFICATION	1.67274539134512E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9984110928552695	WITHOUT_CLASSIFICATION	0.0015889071447304972	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9996944491091728	WITHOUT_CLASSIFICATION	3.055508908272247E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9661704851672684	WITHOUT_CLASSIFICATION	0.033829514832731486	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999667631189559	WITHOUT_CLASSIFICATION	3.3236881043935655E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996660433341914	WITHOUT_CLASSIFICATION	3.339566658086134E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9753722782535471	WITHOUT_CLASSIFICATION	0.024627721746452867	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998411213014529	WITHOUT_CLASSIFICATION	0.0015887869854711424	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999862693984457	WITHOUT_CLASSIFICATION	1.3730601554347544E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9994377616264186	WITHOUT_CLASSIFICATION	5.622383735814331E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998209688422871	WITHOUT_CLASSIFICATION	1.7903115771284172E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997611729793293	WITHOUT_CLASSIFICATION	2.388270206706278E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999986885968607	WITHOUT_CLASSIFICATION	1.311403139342958E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997514130536519	WITHOUT_CLASSIFICATION	2.485869463481002E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998209688422871	WITHOUT_CLASSIFICATION	1.7903115771284172E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989883604738655	WITHOUT_CLASSIFICATION	0.0010116395261344777	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999173179703672	WITHOUT_CLASSIFICATION	8.268202963282617E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999996808084975	WITHOUT_CLASSIFICATION	3.191915025020242E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9968942588166815	WITHOUT_CLASSIFICATION	0.0031057411833184424	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998659956552505	WITHOUT_CLASSIFICATION	1.340043447495527E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.997385877689508	WITHOUT_CLASSIFICATION	0.0026141223104920656	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999898335106442	WITHOUT_CLASSIFICATION	1.0166489355911034E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999767267249924	WITHOUT_CLASSIFICATION	2.327327500755442E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999619815639132	WITHOUT_CLASSIFICATION	3.8018436086733525E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9917828373667571	WITHOUT_CLASSIFICATION	0.008217162633242854	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996471849544624	WITHOUT_CLASSIFICATION	3.528150455375314E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.991200992922913	WITHOUT_CLASSIFICATION	0.00879900707708699	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999245778204482	WITHOUT_CLASSIFICATION	7.542217955189272E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999306139741113	WITHOUT_CLASSIFICATION	6.938602588864659E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997902223931191	WITHOUT_CLASSIFICATION	2.0977760688080155E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9967560724942766	WITHOUT_CLASSIFICATION	0.0032439275057235574	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9982497897136795	WITHOUT_CLASSIFICATION	0.0017502102863205763	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999777165382282	WITHOUT_CLASSIFICATION	2.2283461771796483E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9996007232125198	WITHOUT_CLASSIFICATION	3.99276787480126E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9975279272735411	WITHOUT_CLASSIFICATION	0.002472072726458837	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999966910125802	WITHOUT_CLASSIFICATION	3.3089874198585875E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999470855865483	WITHOUT_CLASSIFICATION	5.291441345176336E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9984083014356614	WITHOUT_CLASSIFICATION	0.0015916985643385857	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999699112189	WITHOUT_CLASSIFICATION	3.0088781066251806E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999978330055366	WITHOUT_CLASSIFICATION	2.166994463396654E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999785390634442	WITHOUT_CLASSIFICATION	2.1460936555795667E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9972327309359373	WITHOUT_CLASSIFICATION	0.0027672690640627396	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999390005621426	WITHOUT_CLASSIFICATION	6.0999437857394354E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9950256602467131	WITHOUT_CLASSIFICATION	0.004974339753286819	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999885452195485	WITHOUT_CLASSIFICATION	1.1454780451528066E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999474200799308	WITHOUT_CLASSIFICATION	5.257992006925327E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998249150997026	WITHOUT_CLASSIFICATION	1.7508490029726585E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9995980152644953	WITHOUT_CLASSIFICATION	4.019847355046705E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999699382855161	WITHOUT_CLASSIFICATION	3.0061714483911893E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999971730328305	WITHOUT_CLASSIFICATION	2.826967169511534E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994255055971	WITHOUT_CLASSIFICATION	5.74494402866842E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997214205486502	WITHOUT_CLASSIFICATION	2.7857945134979493E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999687562876782	WITHOUT_CLASSIFICATION	3.1243712321769575E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999777062810911	WITHOUT_CLASSIFICATION	2.2293718908907954E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997854572401385	WITHOUT_CLASSIFICATION	2.1454275986163108E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999924602501587	WITHOUT_CLASSIFICATION	7.539749841298308E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999924602501587	WITHOUT_CLASSIFICATION	7.539749841298308E-5	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9975659402886863	WITHOUT_CLASSIFICATION	0.0024340597113137533	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999926177774544	WITHOUT_CLASSIFICATION	7.382222545624061E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999965007784014	WITHOUT_CLASSIFICATION	3.499221598601885E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8091429751507455	WITHOUT_CLASSIFICATION	0.19085702484925454	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999334872707383	WITHOUT_CLASSIFICATION	6.651272926178262E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999334872707383	WITHOUT_CLASSIFICATION	6.651272926178262E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998954686770765	WITHOUT_CLASSIFICATION	1.0453132292352485E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9991457400615761	WITHOUT_CLASSIFICATION	8.542599384240141E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998427134860652	WITHOUT_CLASSIFICATION	1.5728651393472637E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999659680846279	WITHOUT_CLASSIFICATION	3.403191537207925E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999944093486334	WITHOUT_CLASSIFICATION	5.590651366665251E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9996394250265974	WITHOUT_CLASSIFICATION	3.605749734025723E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998790163368884	WITHOUT_CLASSIFICATION	1.209836631115613E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998500752954256	WITHOUT_CLASSIFICATION	1.499247045745139E-4	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999447130166126	WITHOUT_CLASSIFICATION	5.528698338734798E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998860380263314	WITHOUT_CLASSIFICATION	1.1396197366856316E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998860380263314	WITHOUT_CLASSIFICATION	1.1396197366856316E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997085085985564	WITHOUT_CLASSIFICATION	2.9149140144356676E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999512538825454	WITHOUT_CLASSIFICATION	4.8746117454584426E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999561749815615	WITHOUT_CLASSIFICATION	4.382501843851336E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999790041802414	WITHOUT_CLASSIFICATION	2.0995819758590047E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999757933898088	WITHOUT_CLASSIFICATION	2.420661019121052E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584833156717	WITHOUT_CLASSIFICATION	1.4151668432826957E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773841018054	WITHOUT_CLASSIFICATION	1.2261589819457088E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999878443109603	WITHOUT_CLASSIFICATION	1.2155689039730725E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999488351301723	WITHOUT_CLASSIFICATION	5.116486982773243E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9993032779250954	WITHOUT_CLASSIFICATION	6.967220749045409E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999235077448326	WITHOUT_CLASSIFICATION	7.649225516732248E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9917828373667571	WITHOUT_CLASSIFICATION	0.008217162633242854	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999969083692296	WITHOUT_CLASSIFICATION	3.0916307703806953E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9964411055280934	WITHOUT_CLASSIFICATION	0.0035588944719066474	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999967571191298	WITHOUT_CLASSIFICATION	3.2428808702597737E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997367744444148	WITHOUT_CLASSIFICATION	2.632255555852504E-4	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998631275780799	WITHOUT_CLASSIFICATION	1.36872421920042E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9997359557183895	WITHOUT_CLASSIFICATION	2.640442816104854E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996180850913857	WITHOUT_CLASSIFICATION	3.81914908614252E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999950691962369	WITHOUT_CLASSIFICATION	4.930803763039911E-6	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995360390977727	WITHOUT_CLASSIFICATION	4.6396090222736755E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982900170910908	WITHOUT_CLASSIFICATION	0.001709982908909234	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982900170910908	WITHOUT_CLASSIFICATION	0.001709982908909234	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997425157706842	WITHOUT_CLASSIFICATION	2.574842293158119E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999997060985867	WITHOUT_CLASSIFICATION	2.939014133377131E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998954342173667	WITHOUT_CLASSIFICATION	1.0456578263335916E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997827755232334	WITHOUT_CLASSIFICATION	2.172244767666947E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999770697324445	WITHOUT_CLASSIFICATION	2.29302675554899E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999700217917187	WITHOUT_CLASSIFICATION	2.997820828131183E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998644754727049	WITHOUT_CLASSIFICATION	1.3552452729510616E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9991258498791562	WITHOUT_CLASSIFICATION	8.741501208438063E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999741425566897	WITHOUT_CLASSIFICATION	2.5857443310358193E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999924933972953	WITHOUT_CLASSIFICATION	7.506602704691586E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266205129996	WITHOUT_CLASSIFICATION	7.33794870003654E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998724844255257	WITHOUT_CLASSIFICATION	1.275155744742225E-4	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999880333634699	WITHOUT_CLASSIFICATION	1.1966636530243E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999953153282987	WITHOUT_CLASSIFICATION	4.684671701303565E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999944035554709	WITHOUT_CLASSIFICATION	5.596444529119973E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999834471120799	WITHOUT_CLASSIFICATION	1.6552887920120164E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9998418085555351	WITHOUT_CLASSIFICATION	1.5819144446496073E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998819701194599	WITHOUT_CLASSIFICATION	1.1802988054017125E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9990847061399839	WITHOUT_CLASSIFICATION	9.152938600162108E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9878824164117519	WITHOUT_CLASSIFICATION	0.012117583588248179	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9997276907195789	WITHOUT_CLASSIFICATION	2.7230928042106314E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999994596352954	WITHOUT_CLASSIFICATION	5.403647046329641E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998656995863124	WITHOUT_CLASSIFICATION	1.3430041368748416E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999993883379474	WITHOUT_CLASSIFICATION	6.116620525163199E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999921049393551	WITHOUT_CLASSIFICATION	7.895060644896106E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999921049393551	WITHOUT_CLASSIFICATION	7.895060644896106E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999903014043394	WITHOUT_CLASSIFICATION	9.698595660492967E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999721551164396	WITHOUT_CLASSIFICATION	2.7844883560420825E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999637105275612	WITHOUT_CLASSIFICATION	3.628947243886956E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999532262580818	WITHOUT_CLASSIFICATION	4.677374191822538E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999800049619942	WITHOUT_CLASSIFICATION	1.9995038005786836E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999199183497247	WITHOUT_CLASSIFICATION	8.008165027527386E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9949985732063503	WITHOUT_CLASSIFICATION	0.0050014267936496	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998691970734266	WITHOUT_CLASSIFICATION	1.3080292657339037E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.6644099349638625	DEFECT	0.33559006503613753	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.881929165916461	WITHOUT_CLASSIFICATION	0.11807083408353901	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9996333938797827	WITHOUT_CLASSIFICATION	3.666061202174042E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9993862618552228	WITHOUT_CLASSIFICATION	6.137381447770708E-4	DEFECT
/*	DEFECT	0.993754491290147	WITHOUT_CLASSIFICATION	0.006245508709852921	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.999021288511424	WITHOUT_CLASSIFICATION	9.787114885758928E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7902169212922037	DEFECT	0.2097830787077964	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.761787819302833	WITHOUT_CLASSIFICATION	0.23821218069716701	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8994927249931862	WITHOUT_CLASSIFICATION	0.10050727500681379	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8931257926140017	DEFECT	0.10687420738599827	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9977523475613078	WITHOUT_CLASSIFICATION	0.0022476524386922173	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9977523475613078	WITHOUT_CLASSIFICATION	0.0022476524386922173	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9803500808834142	WITHOUT_CLASSIFICATION	0.01964991911658576	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999945848838395	WITHOUT_CLASSIFICATION	5.415116160499445E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8687338451962537	WITHOUT_CLASSIFICATION	0.13126615480374632	DEFECT
// this call is side-effecty	DEFECT	0.9995212007541925	WITHOUT_CLASSIFICATION	4.7879924580754974E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.7295017072430968	WITHOUT_CLASSIFICATION	0.2704982927569033	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9958533222965061	WITHOUT_CLASSIFICATION	0.004146677703493898	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8987804204300958	WITHOUT_CLASSIFICATION	0.10121957956990413	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9995676585476094	WITHOUT_CLASSIFICATION	4.3234145239058575E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9878219652600643	WITHOUT_CLASSIFICATION	0.012178034739935726	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999666559716393	WITHOUT_CLASSIFICATION	3.334402836079012E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9569867117670666	WITHOUT_CLASSIFICATION	0.043013288232933315	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9984557965923753	WITHOUT_CLASSIFICATION	0.001544203407624751	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.5858892209909474	DEFECT	0.4141107790090525	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9996027950926623	DEFECT	3.9720490733774987E-4	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.720678525159995	DEFECT	0.2793214748400051	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.6694838648148703	WITHOUT_CLASSIFICATION	0.3305161351851297	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8941896559151711	WITHOUT_CLASSIFICATION	0.10581034408482892	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9466567793604125	WITHOUT_CLASSIFICATION	0.053343220639587526	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9777083381319942	WITHOUT_CLASSIFICATION	0.02229166186800588	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9977523475613078	WITHOUT_CLASSIFICATION	0.0022476524386922173	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9813080397942378	DEFECT	0.018691960205762203	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9014462119601684	WITHOUT_CLASSIFICATION	0.09855378803983171	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9991401142872466	WITHOUT_CLASSIFICATION	8.598857127534833E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9955373119024796	WITHOUT_CLASSIFICATION	0.004462688097520388	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9880766869099247	WITHOUT_CLASSIFICATION	0.011923313090075298	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9913328319060888	WITHOUT_CLASSIFICATION	0.008667168093911196	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.8964382033230379	WITHOUT_CLASSIFICATION	0.10356179667696204	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.8011410398106974	WITHOUT_CLASSIFICATION	0.1988589601893026	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9950872424757249	WITHOUT_CLASSIFICATION	0.004912757524275139	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.950035479148675	WITHOUT_CLASSIFICATION	0.04996452085132495	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9991489097032935	WITHOUT_CLASSIFICATION	8.510902967064255E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.993255269994531	WITHOUT_CLASSIFICATION	0.006744730005469096	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9710311567795408	WITHOUT_CLASSIFICATION	0.028968843220459294	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9993039971738316	WITHOUT_CLASSIFICATION	6.96002826168459E-4	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9884113724508641	WITHOUT_CLASSIFICATION	0.011588627549135887	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6968828733230897	WITHOUT_CLASSIFICATION	0.3031171266769102	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999730976277021	DEFECT	2.6902372297833605E-5	WITHOUT_CLASSIFICATION
