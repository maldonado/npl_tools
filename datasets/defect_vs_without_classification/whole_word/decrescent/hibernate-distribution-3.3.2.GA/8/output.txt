//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999664262447586	WITHOUT_CLASSIFICATION	3.3573755241423774E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9992410671285519	WITHOUT_CLASSIFICATION	7.589328714482567E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999386029938623	WITHOUT_CLASSIFICATION	6.139700613766633E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999482563854655	WITHOUT_CLASSIFICATION	5.174361453460252E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999482563854655	WITHOUT_CLASSIFICATION	5.174361453460252E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999947321110478	WITHOUT_CLASSIFICATION	5.267888952086703E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998970784065004	WITHOUT_CLASSIFICATION	1.0292159349965296E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999869041635611	WITHOUT_CLASSIFICATION	1.3095836438956691E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999622699435845	WITHOUT_CLASSIFICATION	3.7730056415529244E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999457555416442	WITHOUT_CLASSIFICATION	5.424445835584839E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999457555416442	WITHOUT_CLASSIFICATION	5.424445835584839E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999955036984145	WITHOUT_CLASSIFICATION	4.496301585495583E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999801783313421	WITHOUT_CLASSIFICATION	1.982166865789725E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999578835558008	WITHOUT_CLASSIFICATION	4.211644419919425E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999693685394366	WITHOUT_CLASSIFICATION	3.063146056329263E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999785787631241	WITHOUT_CLASSIFICATION	2.1421236875966206E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998478184315499	WITHOUT_CLASSIFICATION	1.5218156845015122E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9998499669796921	WITHOUT_CLASSIFICATION	1.500330203080141E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9936633340792874	WITHOUT_CLASSIFICATION	0.006336665920712506	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999502098971441	WITHOUT_CLASSIFICATION	4.979010285595987E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999672764201547	WITHOUT_CLASSIFICATION	3.2723579845314204E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999498045647075	WITHOUT_CLASSIFICATION	5.019543529248632E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999498045647075	WITHOUT_CLASSIFICATION	5.019543529248632E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9992384334981289	WITHOUT_CLASSIFICATION	7.615665018711593E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998674939623303	WITHOUT_CLASSIFICATION	1.3250603766967246E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999883834911922	WITHOUT_CLASSIFICATION	1.1616508807789819E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999379202866094	WITHOUT_CLASSIFICATION	6.207971339055868E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9966645423717039	WITHOUT_CLASSIFICATION	0.003335457628296206	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8098849927424366	WITHOUT_CLASSIFICATION	0.19011500725756322	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8098849927424366	WITHOUT_CLASSIFICATION	0.19011500725756322	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997682160693878	WITHOUT_CLASSIFICATION	2.317839306120745E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999876805699874	WITHOUT_CLASSIFICATION	1.2319430012652825E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999984426948081	WITHOUT_CLASSIFICATION	1.5573051919054327E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997799155214437	WITHOUT_CLASSIFICATION	2.2008447855625932E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999435778159709	WITHOUT_CLASSIFICATION	5.6422184029103916E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998352000279599	WITHOUT_CLASSIFICATION	1.6479997204000356E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999774521246172	WITHOUT_CLASSIFICATION	2.2547875382856252E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.7717856733523311	WITHOUT_CLASSIFICATION	0.2282143266476689	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998983040384105	WITHOUT_CLASSIFICATION	1.0169596158954835E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998983040384105	WITHOUT_CLASSIFICATION	1.0169596158954835E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999450282760681	WITHOUT_CLASSIFICATION	5.497172393187565E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9981573432862054	WITHOUT_CLASSIFICATION	0.001842656713794628	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998249284708077	WITHOUT_CLASSIFICATION	1.7507152919236783E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999173951788445	WITHOUT_CLASSIFICATION	8.260482115554414E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999797911558784	WITHOUT_CLASSIFICATION	2.020884412152558E-5	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999997873854208	WITHOUT_CLASSIFICATION	2.1261457929732885E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9988704180430774	WITHOUT_CLASSIFICATION	0.001129581956922484	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995258747717729	WITHOUT_CLASSIFICATION	4.7412522822702755E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999983283003647	WITHOUT_CLASSIFICATION	1.6716996353043873E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998703783488992	WITHOUT_CLASSIFICATION	1.296216511007789E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998590733176693	WITHOUT_CLASSIFICATION	1.409266823306853E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999549979338893	WITHOUT_CLASSIFICATION	4.500206611066255E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999927704490011	WITHOUT_CLASSIFICATION	7.229550998930488E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992886827888668	WITHOUT_CLASSIFICATION	7.113172111330906E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9997173280051569	WITHOUT_CLASSIFICATION	2.8267199484315243E-4	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997183717993104	WITHOUT_CLASSIFICATION	2.8162820068953115E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999691827365864	WITHOUT_CLASSIFICATION	3.081726341346842E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998179456716437	WITHOUT_CLASSIFICATION	1.820543283563203E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999957490679658	WITHOUT_CLASSIFICATION	4.25093203420306E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999720323287764	WITHOUT_CLASSIFICATION	2.7967671223684854E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999803762646808	WITHOUT_CLASSIFICATION	1.962373531921386E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999992909231489	WITHOUT_CLASSIFICATION	7.090768510905433E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999842023157498	WITHOUT_CLASSIFICATION	1.5797684250189476E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998570916551416	WITHOUT_CLASSIFICATION	1.429083448583893E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.998808488622683	WITHOUT_CLASSIFICATION	0.001191511377317074	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999436385763396	WITHOUT_CLASSIFICATION	5.636142366045645E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999464272721814	WITHOUT_CLASSIFICATION	5.357272781844067E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999996685758212	WITHOUT_CLASSIFICATION	3.314241788451099E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999491367687064	WITHOUT_CLASSIFICATION	5.086323129346462E-5	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999867479030304	WITHOUT_CLASSIFICATION	1.3252096969572288E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999998976217024	WITHOUT_CLASSIFICATION	1.0237829759121022E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999844915052628	WITHOUT_CLASSIFICATION	1.550849473712374E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998685246329785	WITHOUT_CLASSIFICATION	1.3147536702158658E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996860800226374	WITHOUT_CLASSIFICATION	3.139199773626489E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999078399853525	WITHOUT_CLASSIFICATION	9.216001464753045E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999836579779904	WITHOUT_CLASSIFICATION	1.6342022009611527E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996860800226374	WITHOUT_CLASSIFICATION	3.139199773626489E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9994070567267667	WITHOUT_CLASSIFICATION	5.929432732332986E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9995986092951675	WITHOUT_CLASSIFICATION	4.0139070483240723E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999758512998453	WITHOUT_CLASSIFICATION	2.4148700154668428E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999790718895014	WITHOUT_CLASSIFICATION	2.092811049858461E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999924431898491	WITHOUT_CLASSIFICATION	7.556810150897499E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999924431898491	WITHOUT_CLASSIFICATION	7.556810150897499E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998983354840909	WITHOUT_CLASSIFICATION	1.0166451590908495E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999991629161225	WITHOUT_CLASSIFICATION	8.370838774172684E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999948071212956	WITHOUT_CLASSIFICATION	5.192878704413409E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999970188528069	WITHOUT_CLASSIFICATION	2.981147193102085E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999963917690616	WITHOUT_CLASSIFICATION	3.608230938216236E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999478538619798	WITHOUT_CLASSIFICATION	5.2146138020124875E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999877043120111	WITHOUT_CLASSIFICATION	1.2295687989006934E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999758546099944	WITHOUT_CLASSIFICATION	2.414539000553862E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999665210387066	WITHOUT_CLASSIFICATION	3.3478961293356664E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999981970133693	WITHOUT_CLASSIFICATION	1.8029866305839512E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999981970133693	WITHOUT_CLASSIFICATION	1.8029866305839512E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999326930860467	WITHOUT_CLASSIFICATION	6.730691395325875E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998951499984841	WITHOUT_CLASSIFICATION	1.0485000151590962E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999478464021565	WITHOUT_CLASSIFICATION	5.215359784343429E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999981970133693	WITHOUT_CLASSIFICATION	1.8029866305839512E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999326930860467	WITHOUT_CLASSIFICATION	6.730691395325875E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999326930860467	WITHOUT_CLASSIFICATION	6.730691395325875E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999639356407636	WITHOUT_CLASSIFICATION	3.606435923638244E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999538768343077	WITHOUT_CLASSIFICATION	4.612316569228396E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999922384321541	WITHOUT_CLASSIFICATION	7.761567845964383E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999896328240877	WITHOUT_CLASSIFICATION	1.0367175912334667E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999324954780333	WITHOUT_CLASSIFICATION	6.750452196669409E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999324954780333	WITHOUT_CLASSIFICATION	6.750452196669409E-4	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999138157282429	WITHOUT_CLASSIFICATION	8.61842717571108E-5	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996920109323676	WITHOUT_CLASSIFICATION	3.0798906763241285E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999705664344468	WITHOUT_CLASSIFICATION	2.9433565553199996E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999190653291617	WITHOUT_CLASSIFICATION	8.093467083819343E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999190653291617	WITHOUT_CLASSIFICATION	8.093467083819343E-5	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9996278738747332	WITHOUT_CLASSIFICATION	3.7212612526685025E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999840803387682	WITHOUT_CLASSIFICATION	1.591966123187298E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972409028180389	WITHOUT_CLASSIFICATION	0.002759097181961063	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999930221928137	WITHOUT_CLASSIFICATION	6.977807186312683E-5	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999606772860467	WITHOUT_CLASSIFICATION	3.932271395343587E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999475058757735	WITHOUT_CLASSIFICATION	5.24941242264017E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999411659869771	WITHOUT_CLASSIFICATION	5.883401302283124E-5	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999836826921358	WITHOUT_CLASSIFICATION	1.631730786421622E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972409028180389	WITHOUT_CLASSIFICATION	0.002759097181961063	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999352098396372	WITHOUT_CLASSIFICATION	6.4790160362706E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999870952353702	WITHOUT_CLASSIFICATION	1.2904764629776371E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999870952353702	WITHOUT_CLASSIFICATION	1.2904764629776371E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999198220162	WITHOUT_CLASSIFICATION	8.017798378636658E-7	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999572651098234	WITHOUT_CLASSIFICATION	4.273489017660833E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999526717972802	WITHOUT_CLASSIFICATION	4.732820271971096E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997753027501082	WITHOUT_CLASSIFICATION	2.2469724989185948E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999763751715052	WITHOUT_CLASSIFICATION	2.3624828494768314E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9997134034829189	WITHOUT_CLASSIFICATION	2.8659651708107936E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999149403254889	WITHOUT_CLASSIFICATION	8.505967451102943E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999971866092204	WITHOUT_CLASSIFICATION	2.813390779513714E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999776936554283	WITHOUT_CLASSIFICATION	2.2306344571664024E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999776936554283	WITHOUT_CLASSIFICATION	2.2306344571664024E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999664262447586	WITHOUT_CLASSIFICATION	3.3573755241423774E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999814261323305	WITHOUT_CLASSIFICATION	1.8573867669543683E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999268129783258	WITHOUT_CLASSIFICATION	7.318702167429355E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999448881882282	WITHOUT_CLASSIFICATION	5.511181177176165E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999561632287945	WITHOUT_CLASSIFICATION	4.383677120546089E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998826146602304	WITHOUT_CLASSIFICATION	1.1738533976962116E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9993475287685476	WITHOUT_CLASSIFICATION	6.524712314524903E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999329632534002	WITHOUT_CLASSIFICATION	6.703674659984098E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998470685429969	WITHOUT_CLASSIFICATION	1.529314570031786E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999033655796699	WITHOUT_CLASSIFICATION	9.663442033020904E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9998826146602304	WITHOUT_CLASSIFICATION	1.1738533976962116E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9984224123291382	WITHOUT_CLASSIFICATION	0.001577587670861741	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999691091840714	WITHOUT_CLASSIFICATION	3.0890815928603086E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999662219064536	WITHOUT_CLASSIFICATION	3.3778093546444456E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999520841316021	WITHOUT_CLASSIFICATION	4.7915868397971104E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998471104683737	WITHOUT_CLASSIFICATION	1.5288953162632577E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999482563854655	WITHOUT_CLASSIFICATION	5.174361453460252E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998325547073791	WITHOUT_CLASSIFICATION	1.6744529262083808E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999726526644895	WITHOUT_CLASSIFICATION	2.734733551045286E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998974967575585	WITHOUT_CLASSIFICATION	1.0250324244146511E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9998872996219161	WITHOUT_CLASSIFICATION	1.1270037808383184E-4	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999497681381764	WITHOUT_CLASSIFICATION	5.023186182368236E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999282477623278	WITHOUT_CLASSIFICATION	7.17522376722264E-5	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999475950827019	WITHOUT_CLASSIFICATION	5.2404917298008644E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9992958141377251	WITHOUT_CLASSIFICATION	7.041858622749376E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995767923762938	WITHOUT_CLASSIFICATION	4.2320762370615464E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999668980707775	WITHOUT_CLASSIFICATION	3.310192922255937E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998470685429969	WITHOUT_CLASSIFICATION	1.529314570031786E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999497681381764	WITHOUT_CLASSIFICATION	5.023186182368236E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999947321110478	WITHOUT_CLASSIFICATION	5.267888952086703E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998952366713574	WITHOUT_CLASSIFICATION	1.0476332864257348E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999430277130534	WITHOUT_CLASSIFICATION	5.6972286946671024E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998251010960988	WITHOUT_CLASSIFICATION	1.7489890390123217E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999615438146844	WITHOUT_CLASSIFICATION	3.845618531559205E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.99792182356841	WITHOUT_CLASSIFICATION	0.002078176431590006	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999006712140909	WITHOUT_CLASSIFICATION	9.932878590902099E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997565410555865	WITHOUT_CLASSIFICATION	2.4345894441352424E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997565410555865	WITHOUT_CLASSIFICATION	2.4345894441352424E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999984948692704	WITHOUT_CLASSIFICATION	1.5051307296133027E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999880739064338	WITHOUT_CLASSIFICATION	1.1926093566139227E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998544196517417	WITHOUT_CLASSIFICATION	1.45580348258245E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999269579290581	WITHOUT_CLASSIFICATION	7.304207094198166E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999977528658576	WITHOUT_CLASSIFICATION	2.247134142407039E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999695917331451	WITHOUT_CLASSIFICATION	3.0408266854789003E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999947358685674	WITHOUT_CLASSIFICATION	5.2641314325806926E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998970784065004	WITHOUT_CLASSIFICATION	1.0292159349965296E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999517729636782	WITHOUT_CLASSIFICATION	4.822703632182788E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999517729636782	WITHOUT_CLASSIFICATION	4.822703632182788E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999517729636782	WITHOUT_CLASSIFICATION	4.822703632182788E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999914273314566	WITHOUT_CLASSIFICATION	8.572668543389155E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999517729636782	WITHOUT_CLASSIFICATION	4.822703632182788E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.999925171727906	WITHOUT_CLASSIFICATION	7.482827209404486E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.99951627804522	WITHOUT_CLASSIFICATION	4.8372195477998776E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999389507979793	WITHOUT_CLASSIFICATION	6.104920202062459E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9998470685429969	WITHOUT_CLASSIFICATION	1.529314570031786E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999497681381764	WITHOUT_CLASSIFICATION	5.023186182368236E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999497681381764	WITHOUT_CLASSIFICATION	5.023186182368236E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999336660747965	WITHOUT_CLASSIFICATION	6.633392520348306E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999804459059767	WITHOUT_CLASSIFICATION	1.955409402326755E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999883024575725	WITHOUT_CLASSIFICATION	1.169754242739447E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999516256245649	WITHOUT_CLASSIFICATION	4.837437543513306E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999622699435845	WITHOUT_CLASSIFICATION	3.7730056415529244E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999622699435845	WITHOUT_CLASSIFICATION	3.7730056415529244E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9997967615387222	WITHOUT_CLASSIFICATION	2.0323846127783335E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999658074044429	WITHOUT_CLASSIFICATION	3.419259555706626E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999083355293736	WITHOUT_CLASSIFICATION	9.166447062635608E-5	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.999881114741198	WITHOUT_CLASSIFICATION	1.188852588019235E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9998905530390583	WITHOUT_CLASSIFICATION	1.0944696094174566E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9998514335680325	WITHOUT_CLASSIFICATION	1.485664319675866E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999457555416442	WITHOUT_CLASSIFICATION	5.424445835584839E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999849294417056	WITHOUT_CLASSIFICATION	1.507055829440937E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999849294417056	WITHOUT_CLASSIFICATION	1.507055829440937E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999955036984145	WITHOUT_CLASSIFICATION	4.496301585495583E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999955036984145	WITHOUT_CLASSIFICATION	4.496301585495583E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996141883210975	WITHOUT_CLASSIFICATION	3.85811678902463E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996141883210975	WITHOUT_CLASSIFICATION	3.85811678902463E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998760391348415	WITHOUT_CLASSIFICATION	1.2396086515847576E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998760391348415	WITHOUT_CLASSIFICATION	1.2396086515847576E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999622699435845	WITHOUT_CLASSIFICATION	3.7730056415529244E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999457555416442	WITHOUT_CLASSIFICATION	5.424445835584839E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999849294417056	WITHOUT_CLASSIFICATION	1.507055829440937E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999849294417056	WITHOUT_CLASSIFICATION	1.507055829440937E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.999955036984145	WITHOUT_CLASSIFICATION	4.496301585495583E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996141883210975	WITHOUT_CLASSIFICATION	3.85811678902463E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996141883210975	WITHOUT_CLASSIFICATION	3.85811678902463E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998760391348415	WITHOUT_CLASSIFICATION	1.2396086515847576E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999691744512447	WITHOUT_CLASSIFICATION	3.082554875526052E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999036771870295	WITHOUT_CLASSIFICATION	9.632281297042555E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999534286870064	WITHOUT_CLASSIFICATION	4.657131299349434E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999914774470214	WITHOUT_CLASSIFICATION	8.522552978614576E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999197531668904	WITHOUT_CLASSIFICATION	8.024683310963623E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.999847542473583	WITHOUT_CLASSIFICATION	1.5245752641710519E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9908532900796541	WITHOUT_CLASSIFICATION	0.009146709920345917	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9279623332917201	WITHOUT_CLASSIFICATION	0.07203766670827999	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998430686158948	WITHOUT_CLASSIFICATION	1.5693138410527668E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999934270093425	WITHOUT_CLASSIFICATION	6.572990657625861E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998857651979955	WITHOUT_CLASSIFICATION	1.142348020045243E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999098839652122	WITHOUT_CLASSIFICATION	9.011603478791509E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998983354840909	WITHOUT_CLASSIFICATION	1.0166451590908495E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.999847542473583	WITHOUT_CLASSIFICATION	1.5245752641710519E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996530482360396	WITHOUT_CLASSIFICATION	3.4695176396041925E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996530482360396	WITHOUT_CLASSIFICATION	3.4695176396041925E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9993436698370478	WITHOUT_CLASSIFICATION	6.563301629522913E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999711833557002	WITHOUT_CLASSIFICATION	2.8816644299718375E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999711833557002	WITHOUT_CLASSIFICATION	2.8816644299718375E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999030085602366	WITHOUT_CLASSIFICATION	9.699143976334387E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999813696431936	WITHOUT_CLASSIFICATION	1.86303568063401E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9987338772321417	WITHOUT_CLASSIFICATION	0.0012661227678582708	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995082218008848	WITHOUT_CLASSIFICATION	4.917781991150816E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9995082218008848	WITHOUT_CLASSIFICATION	4.917781991150816E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999785787631241	WITHOUT_CLASSIFICATION	2.1421236875966206E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994782854022365	WITHOUT_CLASSIFICATION	5.217145977635534E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994782854022365	WITHOUT_CLASSIFICATION	5.217145977635534E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999914112061378	WITHOUT_CLASSIFICATION	8.588793862197393E-5	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999355675351823	WITHOUT_CLASSIFICATION	6.443246481770213E-5	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999672764201547	WITHOUT_CLASSIFICATION	3.2723579845314204E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9998676703870095	WITHOUT_CLASSIFICATION	1.3232961299051914E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998478184315499	WITHOUT_CLASSIFICATION	1.5218156845015122E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8609378430594838	WITHOUT_CLASSIFICATION	0.13906215694051605	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9998491625283596	WITHOUT_CLASSIFICATION	1.5083747164029135E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999559884234661	WITHOUT_CLASSIFICATION	4.4011576533894406E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998155127263674	WITHOUT_CLASSIFICATION	1.8448727363263274E-4	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999966190482268	WITHOUT_CLASSIFICATION	3.380951773201556E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999928384370675	WITHOUT_CLASSIFICATION	7.161562932431397E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999379202866094	WITHOUT_CLASSIFICATION	6.207971339055868E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999982733326407	WITHOUT_CLASSIFICATION	1.7266673592422897E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999952850566357	WITHOUT_CLASSIFICATION	4.714943364303757E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9998467941133318	WITHOUT_CLASSIFICATION	1.5320588666827502E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999498598027686	WITHOUT_CLASSIFICATION	5.014019723139536E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999412343803985	WITHOUT_CLASSIFICATION	5.8765619601454776E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999337243533143	WITHOUT_CLASSIFICATION	6.627564668574538E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999715479464736	WITHOUT_CLASSIFICATION	2.845205352636458E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999672764201547	WITHOUT_CLASSIFICATION	3.2723579845314204E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999939585123509	WITHOUT_CLASSIFICATION	6.041487649106465E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999636888885235	WITHOUT_CLASSIFICATION	3.631111147641649E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998563225643431	WITHOUT_CLASSIFICATION	1.4367743565699755E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9998478184315499	WITHOUT_CLASSIFICATION	1.5218156845015122E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999715479464736	WITHOUT_CLASSIFICATION	2.845205352636458E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999939585123509	WITHOUT_CLASSIFICATION	6.041487649106465E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998563225643431	WITHOUT_CLASSIFICATION	1.4367743565699755E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999574567156863	WITHOUT_CLASSIFICATION	4.2543284313658455E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999574567156863	WITHOUT_CLASSIFICATION	4.2543284313658455E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999498045647075	WITHOUT_CLASSIFICATION	5.019543529248632E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999534697670959	WITHOUT_CLASSIFICATION	4.6530232904070524E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9998905052374469	WITHOUT_CLASSIFICATION	1.094947625531166E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999972802788784	WITHOUT_CLASSIFICATION	2.7197211215174806E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999933770765521	WITHOUT_CLASSIFICATION	6.622923447916505E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999869227285747	WITHOUT_CLASSIFICATION	1.3077271425152826E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999905301437108	WITHOUT_CLASSIFICATION	9.469856289198317E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9992456632241092	WITHOUT_CLASSIFICATION	7.543367758907376E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999977389277067	WITHOUT_CLASSIFICATION	2.2610722932922736E-5	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999905301437108	WITHOUT_CLASSIFICATION	9.469856289198317E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998674939623303	WITHOUT_CLASSIFICATION	1.3250603766967246E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998729071519021	WITHOUT_CLASSIFICATION	1.2709284809780616E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999715479464736	WITHOUT_CLASSIFICATION	2.845205352636458E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999055517185832	WITHOUT_CLASSIFICATION	9.444828141678002E-5	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999342826979823	WITHOUT_CLASSIFICATION	6.571730201765926E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9994143193171913	WITHOUT_CLASSIFICATION	5.856806828087585E-4	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999083848284344	WITHOUT_CLASSIFICATION	9.161517156559734E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999470699813098	WITHOUT_CLASSIFICATION	5.2930018690208225E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999935529419945	WITHOUT_CLASSIFICATION	6.4470580055014584E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999308433908074	WITHOUT_CLASSIFICATION	6.915660919258146E-5	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998973453208077	WITHOUT_CLASSIFICATION	1.0265467919228482E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999520111681848	WITHOUT_CLASSIFICATION	4.798883181518017E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999506884758158	WITHOUT_CLASSIFICATION	4.9311524184086513E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999336660747965	WITHOUT_CLASSIFICATION	6.633392520348306E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9994643593189562	WITHOUT_CLASSIFICATION	5.356406810438447E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999379202866094	WITHOUT_CLASSIFICATION	6.207971339055868E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999514503572016	WITHOUT_CLASSIFICATION	4.854964279845683E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998915813977873	WITHOUT_CLASSIFICATION	1.0841860221268464E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999780621161741	WITHOUT_CLASSIFICATION	2.1937883825843685E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999677136278309	WITHOUT_CLASSIFICATION	3.2286372169134685E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999681508960637	WITHOUT_CLASSIFICATION	3.184910393630346E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999421025261052	WITHOUT_CLASSIFICATION	5.7897473894809744E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999319866224	WITHOUT_CLASSIFICATION	6.801337755406108E-8	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999835940164169	WITHOUT_CLASSIFICATION	1.6405983583147885E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999537607462939	WITHOUT_CLASSIFICATION	4.6239253705995606E-5	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999032059037399	WITHOUT_CLASSIFICATION	9.67940962600114E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998140895668092	WITHOUT_CLASSIFICATION	1.8591043319074623E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998140895668092	WITHOUT_CLASSIFICATION	1.8591043319074623E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998484652109284	WITHOUT_CLASSIFICATION	1.5153478907165797E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999247638510059	WITHOUT_CLASSIFICATION	7.523614899410351E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998847431988278	WITHOUT_CLASSIFICATION	1.1525680117214633E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999925440450276	WITHOUT_CLASSIFICATION	7.455954972410883E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999850693019602	WITHOUT_CLASSIFICATION	1.493069803979319E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9995359615254764	WITHOUT_CLASSIFICATION	4.640384745236274E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998375887756981	WITHOUT_CLASSIFICATION	1.6241122430199492E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999947902497416	WITHOUT_CLASSIFICATION	5.209750258396711E-5	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999024734346089	WITHOUT_CLASSIFICATION	9.752656539113074E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998674797604944	WITHOUT_CLASSIFICATION	1.3252023950552477E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999496835645141	WITHOUT_CLASSIFICATION	5.03164354857738E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9982623605769085	WITHOUT_CLASSIFICATION	0.001737639423091477	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.998443603643919	WITHOUT_CLASSIFICATION	0.0015563963560809714	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149486894764	WITHOUT_CLASSIFICATION	8.50513105236543E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999300320500495	WITHOUT_CLASSIFICATION	6.996794995052782E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9976057946068175	WITHOUT_CLASSIFICATION	0.002394205393182362	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999552417782691	WITHOUT_CLASSIFICATION	4.475822173084735E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999630430287225	WITHOUT_CLASSIFICATION	3.695697127742873E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9960620655260687	WITHOUT_CLASSIFICATION	0.003937934473931307	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.999926750634233	WITHOUT_CLASSIFICATION	7.324936576699798E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.999926750634233	WITHOUT_CLASSIFICATION	7.324936576699798E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998866265650389	WITHOUT_CLASSIFICATION	1.1337343496115578E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998866265650389	WITHOUT_CLASSIFICATION	1.1337343496115578E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999537607462939	WITHOUT_CLASSIFICATION	4.6239253705995606E-5	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9857659378910997	WITHOUT_CLASSIFICATION	0.01423406210890029	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999164693788354	WITHOUT_CLASSIFICATION	8.353062116458781E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997814441753249	WITHOUT_CLASSIFICATION	2.1855582467521578E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999164693788354	WITHOUT_CLASSIFICATION	8.353062116458781E-4	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997814441753249	WITHOUT_CLASSIFICATION	2.1855582467521578E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998022685751063	WITHOUT_CLASSIFICATION	1.9773142489366412E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9969731792080849	WITHOUT_CLASSIFICATION	0.003026820791915094	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999396326566531	WITHOUT_CLASSIFICATION	6.036734334697682E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999901652920233	WITHOUT_CLASSIFICATION	9.83470797664699E-6	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996893997106879	WITHOUT_CLASSIFICATION	3.1060028931206293E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999195857635201	WITHOUT_CLASSIFICATION	8.041423647981382E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9997978751931021	WITHOUT_CLASSIFICATION	2.0212480689787122E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9994564495546029	WITHOUT_CLASSIFICATION	5.435504453970104E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9993683447547989	WITHOUT_CLASSIFICATION	6.316552452011446E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999994188165364	WITHOUT_CLASSIFICATION	5.811834635939847E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999763688451396	WITHOUT_CLASSIFICATION	2.3631154860404507E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999837864734657	WITHOUT_CLASSIFICATION	1.6213526534309775E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999912839099734	WITHOUT_CLASSIFICATION	8.716090026583977E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999656146364949	WITHOUT_CLASSIFICATION	3.438536350513833E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999656146364949	WITHOUT_CLASSIFICATION	3.438536350513833E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9986837483715812	WITHOUT_CLASSIFICATION	0.0013162516284187763	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9986837483715812	WITHOUT_CLASSIFICATION	0.0013162516284187763	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999470435694435	WITHOUT_CLASSIFICATION	5.295643055649573E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998022685751063	WITHOUT_CLASSIFICATION	1.9773142489366412E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999848503005744	WITHOUT_CLASSIFICATION	1.5149699425598745E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998744646513406	WITHOUT_CLASSIFICATION	1.2553534865941226E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996515806587082	WITHOUT_CLASSIFICATION	3.484193412917662E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995443879597794	WITHOUT_CLASSIFICATION	4.556120402205648E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8795866746128401	WITHOUT_CLASSIFICATION	0.12041332538715986	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998022685751063	WITHOUT_CLASSIFICATION	1.9773142489366412E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995443879597794	WITHOUT_CLASSIFICATION	4.556120402205648E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8795866746128401	WITHOUT_CLASSIFICATION	0.12041332538715986	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998757618224866	WITHOUT_CLASSIFICATION	1.24238177513364E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999552120558484	WITHOUT_CLASSIFICATION	4.478794415162124E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999143896569238	WITHOUT_CLASSIFICATION	8.561034307617435E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998022685751063	WITHOUT_CLASSIFICATION	1.9773142489366412E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998022685751063	WITHOUT_CLASSIFICATION	1.9773142489366412E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999427914483087	WITHOUT_CLASSIFICATION	5.720855169140924E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999365786168533	WITHOUT_CLASSIFICATION	6.342138314665663E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999552643663776	WITHOUT_CLASSIFICATION	4.473563362235454E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999439934359299	WITHOUT_CLASSIFICATION	5.6006564070234686E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998541898734071	WITHOUT_CLASSIFICATION	1.458101265929171E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999952077275984	WITHOUT_CLASSIFICATION	4.792272401578443E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999797945260233	WITHOUT_CLASSIFICATION	2.020547397677102E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999713746550146	WITHOUT_CLASSIFICATION	2.8625344985315395E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998690931659444	WITHOUT_CLASSIFICATION	1.30906834055508E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999428910244226	WITHOUT_CLASSIFICATION	5.7108975577423156E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999506283811528	WITHOUT_CLASSIFICATION	4.93716188471514E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999943834697285	WITHOUT_CLASSIFICATION	5.616530271464769E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999958948859577	WITHOUT_CLASSIFICATION	4.105114042186425E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999531582617637	WITHOUT_CLASSIFICATION	4.684173823636163E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998728873591866	WITHOUT_CLASSIFICATION	1.2711264081347094E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999967623414865	WITHOUT_CLASSIFICATION	3.237658513586394E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997799155214437	WITHOUT_CLASSIFICATION	2.2008447855625932E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998592140097666	WITHOUT_CLASSIFICATION	1.4078599023333694E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997917171160471	WITHOUT_CLASSIFICATION	2.0828288395284E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997814441753249	WITHOUT_CLASSIFICATION	2.1855582467521578E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999215210885248	WITHOUT_CLASSIFICATION	7.847891147522622E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997799155214437	WITHOUT_CLASSIFICATION	2.2008447855625932E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.876872082567678	WITHOUT_CLASSIFICATION	0.12312791743232189	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999987869712926	WITHOUT_CLASSIFICATION	1.2130287073507798E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9992363108351006	WITHOUT_CLASSIFICATION	7.636891648995318E-4	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999364743378192	WITHOUT_CLASSIFICATION	6.352566218072391E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998873306760339	WITHOUT_CLASSIFICATION	1.1266932396609476E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999522263270861	WITHOUT_CLASSIFICATION	4.777367291396926E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9980196536586378	WITHOUT_CLASSIFICATION	0.0019803463413621603	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999877305126199	WITHOUT_CLASSIFICATION	1.2269487379971517E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999750147767777	WITHOUT_CLASSIFICATION	2.4985223222182057E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999574035091985	WITHOUT_CLASSIFICATION	4.2596490801421955E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9979687616885052	WITHOUT_CLASSIFICATION	0.0020312383114947856	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998900714313275	WITHOUT_CLASSIFICATION	1.0992856867255117E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999965987341558	WITHOUT_CLASSIFICATION	3.4012658442484933E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999340786785206	WITHOUT_CLASSIFICATION	6.592132147943095E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9993287065948306	WITHOUT_CLASSIFICATION	6.712934051694972E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999712450884014	WITHOUT_CLASSIFICATION	2.875491159864492E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9961736608826302	WITHOUT_CLASSIFICATION	0.0038263391173698207	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247533878837	WITHOUT_CLASSIFICATION	7.52466121163295E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999209814129696	WITHOUT_CLASSIFICATION	7.901858703043474E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996450926245984	WITHOUT_CLASSIFICATION	3.5490737540160765E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999844471575069	WITHOUT_CLASSIFICATION	1.555284249308703E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998865264921599	WITHOUT_CLASSIFICATION	1.1347350784005992E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998886346411848	WITHOUT_CLASSIFICATION	1.113653588151862E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999310985469129	WITHOUT_CLASSIFICATION	6.890145308715617E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998504324177866	WITHOUT_CLASSIFICATION	1.4956758221330448E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277354986156	WITHOUT_CLASSIFICATION	7.226450138445583E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999983955758431	WITHOUT_CLASSIFICATION	1.6044241568477565E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999981057327326	WITHOUT_CLASSIFICATION	1.8942672673523009E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816212982096	WITHOUT_CLASSIFICATION	1.8378701790434826E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881181740127	WITHOUT_CLASSIFICATION	1.1881825987424635E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927356139291	WITHOUT_CLASSIFICATION	7.264386070900497E-5	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627464557147	WITHOUT_CLASSIFICATION	3.72535442852476E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999231113911026	WITHOUT_CLASSIFICATION	7.68886088974128E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999102104663629	WITHOUT_CLASSIFICATION	8.978953363719342E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999342980507094	WITHOUT_CLASSIFICATION	6.570194929059169E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702835792589	WITHOUT_CLASSIFICATION	1.2971642074112756E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997123824242529	WITHOUT_CLASSIFICATION	2.87617575747193E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999491406059912	WITHOUT_CLASSIFICATION	5.0859394008758476E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999959098132464	WITHOUT_CLASSIFICATION	4.090186753602069E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999868274967953	WITHOUT_CLASSIFICATION	1.3172503204696184E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998865911516459	WITHOUT_CLASSIFICATION	1.1340884835404853E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998018338525024	WITHOUT_CLASSIFICATION	1.9816614749768163E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998757618224866	WITHOUT_CLASSIFICATION	1.24238177513364E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999950249021006	WITHOUT_CLASSIFICATION	4.975097899396926E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.99995094295339	WITHOUT_CLASSIFICATION	4.9057046610027566E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999416615303617	WITHOUT_CLASSIFICATION	5.833846963834888E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999950640833425	WITHOUT_CLASSIFICATION	4.9359166574862376E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999509143594576	WITHOUT_CLASSIFICATION	4.908564054247024E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999681772848981	WITHOUT_CLASSIFICATION	3.182271510186058E-5	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999199824601393	WITHOUT_CLASSIFICATION	8.001753986069772E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999363992225857	WITHOUT_CLASSIFICATION	6.360077741429653E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997060444338162	WITHOUT_CLASSIFICATION	2.9395556618384556E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998697511882446	WITHOUT_CLASSIFICATION	1.3024881175534425E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999029904031669	WITHOUT_CLASSIFICATION	9.700959683307375E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907935446765	WITHOUT_CLASSIFICATION	1.0920645532350526E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998726960063439	WITHOUT_CLASSIFICATION	1.2730399365606146E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9973437699071743	WITHOUT_CLASSIFICATION	0.002656230092825611	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9996429019956419	WITHOUT_CLASSIFICATION	3.570980043581325E-4	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999957085613389	WITHOUT_CLASSIFICATION	4.2914386611048225E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9989199095765294	WITHOUT_CLASSIFICATION	0.0010800904234706003	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998747955873634	WITHOUT_CLASSIFICATION	1.252044126366538E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999076431716913	WITHOUT_CLASSIFICATION	9.23568283086053E-5	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998439132784339	WITHOUT_CLASSIFICATION	1.5608672156604877E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999315798081047	WITHOUT_CLASSIFICATION	6.842019189538698E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999932288523173	WITHOUT_CLASSIFICATION	6.771147682699083E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996571167399163	WITHOUT_CLASSIFICATION	3.428832600837606E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998769154222985	WITHOUT_CLASSIFICATION	1.2308457770144853E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9996727291944282	WITHOUT_CLASSIFICATION	3.272708055717626E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997836415691193	WITHOUT_CLASSIFICATION	2.163584308807773E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999868274967953	WITHOUT_CLASSIFICATION	1.3172503204696184E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998784828253793	WITHOUT_CLASSIFICATION	1.2151717462083409E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999670911386712	WITHOUT_CLASSIFICATION	3.2908861328761025E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999936996263765	WITHOUT_CLASSIFICATION	6.300373623499984E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999491406059912	WITHOUT_CLASSIFICATION	5.0859394008758476E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998746603030939	WITHOUT_CLASSIFICATION	1.2533969690622205E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999623281987406	WITHOUT_CLASSIFICATION	3.7671801259373276E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9989129004598212	WITHOUT_CLASSIFICATION	0.001087099540178906	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9987297982970406	WITHOUT_CLASSIFICATION	0.0012702017029594356	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998033816496191	WITHOUT_CLASSIFICATION	1.9661835038096133E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998470116246561	WITHOUT_CLASSIFICATION	1.5298837534390725E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998857750460154	WITHOUT_CLASSIFICATION	1.14224953984628E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99977287378992	WITHOUT_CLASSIFICATION	2.2712621008000295E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999947088619681	WITHOUT_CLASSIFICATION	5.291138031903644E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999571125698645	WITHOUT_CLASSIFICATION	4.2887430135564094E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995595445077116	WITHOUT_CLASSIFICATION	4.404554922884498E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999570706013223	WITHOUT_CLASSIFICATION	4.2929398677575086E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998757618224866	WITHOUT_CLASSIFICATION	1.24238177513364E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999491975373841	WITHOUT_CLASSIFICATION	5.0802462615900746E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999864601004672	WITHOUT_CLASSIFICATION	1.3539899532782397E-5	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998035129869173	WITHOUT_CLASSIFICATION	1.9648701308274722E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999832955450805	WITHOUT_CLASSIFICATION	1.670445491952712E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998564595495404	WITHOUT_CLASSIFICATION	1.4354045045956594E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996185582799718	WITHOUT_CLASSIFICATION	3.8144172002815374E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999019761309692	WITHOUT_CLASSIFICATION	9.802386903077417E-5	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999922215098804	WITHOUT_CLASSIFICATION	7.778490119601718E-5	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999418303996525	WITHOUT_CLASSIFICATION	5.816960034755567E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9936633340792874	WITHOUT_CLASSIFICATION	0.006336665920712506	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998971909902071	WITHOUT_CLASSIFICATION	1.028090097927808E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998639925526663	WITHOUT_CLASSIFICATION	1.3600744733368298E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999491406059912	WITHOUT_CLASSIFICATION	5.0859394008758476E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999868274967953	WITHOUT_CLASSIFICATION	1.3172503204696184E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9982055525567766	WITHOUT_CLASSIFICATION	0.0017944474432233814	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999919801503697	WITHOUT_CLASSIFICATION	8.019849630261586E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9945098510758076	WITHOUT_CLASSIFICATION	0.0054901489241923306	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999868274967953	WITHOUT_CLASSIFICATION	1.3172503204696184E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999306662996666	WITHOUT_CLASSIFICATION	6.933370033335619E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999832955450805	WITHOUT_CLASSIFICATION	1.670445491952712E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9952398649803317	WITHOUT_CLASSIFICATION	0.004760135019668322	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9929399337885948	WITHOUT_CLASSIFICATION	0.0070600662114051775	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999905128870499	WITHOUT_CLASSIFICATION	9.487112950148706E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998470116246561	WITHOUT_CLASSIFICATION	1.5298837534390725E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998857750460154	WITHOUT_CLASSIFICATION	1.14224953984628E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99977287378992	WITHOUT_CLASSIFICATION	2.2712621008000295E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999877600903082	WITHOUT_CLASSIFICATION	1.2239909691848457E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.999939123373148	WITHOUT_CLASSIFICATION	6.087662685194129E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999179743798156	WITHOUT_CLASSIFICATION	8.202562018450476E-5	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998942620622362	WITHOUT_CLASSIFICATION	1.0573793776389645E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9993509323957984	WITHOUT_CLASSIFICATION	6.490676042016152E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999868274967953	WITHOUT_CLASSIFICATION	1.3172503204696184E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999947088619681	WITHOUT_CLASSIFICATION	5.291138031903644E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999571125698645	WITHOUT_CLASSIFICATION	4.2887430135564094E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923641182832	WITHOUT_CLASSIFICATION	7.63588171690184E-6	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998707906595047	WITHOUT_CLASSIFICATION	1.2920934049533503E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999320914837687	WITHOUT_CLASSIFICATION	6.79085162312793E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998118554243677	WITHOUT_CLASSIFICATION	1.8814457563231217E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9987753276725326	WITHOUT_CLASSIFICATION	0.0012246723274673443	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993054556813605	WITHOUT_CLASSIFICATION	6.945443186394341E-4	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998753530292243	WITHOUT_CLASSIFICATION	1.2464697077578204E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999292951085625	WITHOUT_CLASSIFICATION	7.070489143746854E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999767460124702	WITHOUT_CLASSIFICATION	2.3253987529790834E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999336660747965	WITHOUT_CLASSIFICATION	6.633392520348306E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999277354986156	WITHOUT_CLASSIFICATION	7.226450138445583E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881181740127	WITHOUT_CLASSIFICATION	1.1881825987424635E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999336660747965	WITHOUT_CLASSIFICATION	6.633392520348306E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999982860348068	WITHOUT_CLASSIFICATION	1.7139651931428556E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999399496060037	WITHOUT_CLASSIFICATION	6.005039399630234E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512643108684	WITHOUT_CLASSIFICATION	4.87356891315098E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9925959321386589	WITHOUT_CLASSIFICATION	0.0074040678613410535	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998867448973904	WITHOUT_CLASSIFICATION	1.1325510260960327E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927356139291	WITHOUT_CLASSIFICATION	7.264386070900497E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999226861481251	WITHOUT_CLASSIFICATION	7.731385187487203E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999932288523173	WITHOUT_CLASSIFICATION	6.771147682699083E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9985418064967234	WITHOUT_CLASSIFICATION	0.001458193503276686	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9991821430123781	WITHOUT_CLASSIFICATION	8.17856987622037E-4	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999656225310979	WITHOUT_CLASSIFICATION	3.4377468901989746E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999552605317739	WITHOUT_CLASSIFICATION	4.473946822620642E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999981823957489	WITHOUT_CLASSIFICATION	1.8176042511590559E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999038898395237	WITHOUT_CLASSIFICATION	9.611016047624815E-5	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9997205388465743	WITHOUT_CLASSIFICATION	2.794611534257108E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999877305126199	WITHOUT_CLASSIFICATION	1.2269487379971517E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998453156755638	WITHOUT_CLASSIFICATION	1.5468432443617577E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999530278980518	WITHOUT_CLASSIFICATION	4.6972101948018756E-5	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999377490110671	WITHOUT_CLASSIFICATION	6.225098893277522E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999857440376516	WITHOUT_CLASSIFICATION	1.4255962348395878E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999897311926392	WITHOUT_CLASSIFICATION	1.0268807360764075E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999077836946149	WITHOUT_CLASSIFICATION	9.221630538507766E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999929970022333	WITHOUT_CLASSIFICATION	7.002997766705714E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999041959392574	WITHOUT_CLASSIFICATION	9.580406074260099E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999783736129054	WITHOUT_CLASSIFICATION	2.162638709458815E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997312063006468	WITHOUT_CLASSIFICATION	2.687936993531318E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995133335851073	WITHOUT_CLASSIFICATION	4.866664148927874E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9932757644903997	WITHOUT_CLASSIFICATION	0.006724235509600308	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996048453179	WITHOUT_CLASSIFICATION	3.9515468210007894E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997732653550989	WITHOUT_CLASSIFICATION	2.2673464490115527E-4	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9995935560308646	WITHOUT_CLASSIFICATION	4.0644396913534124E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999278391569677	WITHOUT_CLASSIFICATION	7.216084303234798E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996048453179	WITHOUT_CLASSIFICATION	3.9515468210007894E-4	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997416805317736	WITHOUT_CLASSIFICATION	2.5831946822642326E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996729777835217	WITHOUT_CLASSIFICATION	3.27022216478271E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999459996331351	WITHOUT_CLASSIFICATION	5.400036686490929E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999488928596296	WITHOUT_CLASSIFICATION	5.110714037046662E-5	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999617818477011	WITHOUT_CLASSIFICATION	3.8218152298892635E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999986198552866	WITHOUT_CLASSIFICATION	1.3801447134018913E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999566064647951	WITHOUT_CLASSIFICATION	4.339353520481768E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999488279630301	WITHOUT_CLASSIFICATION	5.117203696985186E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999488279630301	WITHOUT_CLASSIFICATION	5.117203696985186E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999798474936309	WITHOUT_CLASSIFICATION	2.015250636911415E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998927141691238	WITHOUT_CLASSIFICATION	1.0728583087625475E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999766799694365	WITHOUT_CLASSIFICATION	2.3320030563508487E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999443939145221	WITHOUT_CLASSIFICATION	5.56060854779264E-5	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9974336927835415	WITHOUT_CLASSIFICATION	0.002566307216458387	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999293579320794	WITHOUT_CLASSIFICATION	7.064206792061268E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999895193257693	WITHOUT_CLASSIFICATION	1.0480674230672186E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999816029243545	WITHOUT_CLASSIFICATION	1.8397075645457322E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9995240405053322	WITHOUT_CLASSIFICATION	4.759594946677458E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999948753830139	WITHOUT_CLASSIFICATION	5.124616986014974E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999790846418235	WITHOUT_CLASSIFICATION	2.091535817657597E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999439475708607	WITHOUT_CLASSIFICATION	5.605242913920508E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999796537710661	WITHOUT_CLASSIFICATION	2.034622893387465E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9991987995020933	WITHOUT_CLASSIFICATION	8.012004979066245E-4	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999111512867292	WITHOUT_CLASSIFICATION	8.884871327073847E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996435183934631	WITHOUT_CLASSIFICATION	3.564816065368634E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9991749522914057	WITHOUT_CLASSIFICATION	8.250477085942772E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9982227435468429	WITHOUT_CLASSIFICATION	0.001777256453157022	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999847407370476	WITHOUT_CLASSIFICATION	1.525926295241204E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998921699969566	WITHOUT_CLASSIFICATION	1.0783000304337655E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999386457391346	WITHOUT_CLASSIFICATION	6.135426086544158E-5	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999250581778094	WITHOUT_CLASSIFICATION	7.494182219056978E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999799317875466	WITHOUT_CLASSIFICATION	2.0068212453365472E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999980555637769	WITHOUT_CLASSIFICATION	1.944436223099206E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999344873780716	WITHOUT_CLASSIFICATION	6.551262192839826E-5	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996519298574896	WITHOUT_CLASSIFICATION	3.4807014251042275E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9990191084052801	WITHOUT_CLASSIFICATION	9.808915947199033E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997203840687854	WITHOUT_CLASSIFICATION	2.796159312145726E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9283305891411954	WITHOUT_CLASSIFICATION	0.07166941085880464	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999369472717122	WITHOUT_CLASSIFICATION	6.305272828779169E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999389125606489	WITHOUT_CLASSIFICATION	6.108743935108205E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999606201041213	WITHOUT_CLASSIFICATION	3.9379895878537306E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999112364237092	WITHOUT_CLASSIFICATION	8.876357629091659E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998954348152758	WITHOUT_CLASSIFICATION	1.0456518472427732E-4	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998228912502427	WITHOUT_CLASSIFICATION	1.7710874975722347E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.999935263153265	WITHOUT_CLASSIFICATION	6.473684673508973E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9990901039165219	WITHOUT_CLASSIFICATION	9.098960834781289E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999843881355648	WITHOUT_CLASSIFICATION	1.5611864435313054E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8726260732100732	WITHOUT_CLASSIFICATION	0.1273739267899268	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999798171529737	WITHOUT_CLASSIFICATION	2.0182847026410966E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998605849597912	WITHOUT_CLASSIFICATION	1.39415040208701E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998757618224866	WITHOUT_CLASSIFICATION	1.24238177513364E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998757618224866	WITHOUT_CLASSIFICATION	1.24238177513364E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997670470626063	WITHOUT_CLASSIFICATION	2.329529373936148E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997979007962811	WITHOUT_CLASSIFICATION	2.0209920371891253E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999955872320182	WITHOUT_CLASSIFICATION	4.4127679817947744E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999848274084574	WITHOUT_CLASSIFICATION	1.5172591542597873E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999598504981438	WITHOUT_CLASSIFICATION	4.014950185618228E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.999709620793484	WITHOUT_CLASSIFICATION	2.903792065159004E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9994001206431434	WITHOUT_CLASSIFICATION	5.998793568564722E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999982146807747	WITHOUT_CLASSIFICATION	1.7853192254296164E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999406345922	WITHOUT_CLASSIFICATION	5.936540780194256E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998406817387837	WITHOUT_CLASSIFICATION	1.5931826121631324E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99982593014375	WITHOUT_CLASSIFICATION	1.7406985625008134E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999956288936568	WITHOUT_CLASSIFICATION	4.371106343229217E-6	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997220404895341	WITHOUT_CLASSIFICATION	2.7795951046588493E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998799520046122	WITHOUT_CLASSIFICATION	1.2004799538780442E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998797033477802	WITHOUT_CLASSIFICATION	1.2029665221989975E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999680015679754	WITHOUT_CLASSIFICATION	3.199843202452688E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998950971056507	WITHOUT_CLASSIFICATION	1.0490289434922394E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994921052311392	WITHOUT_CLASSIFICATION	5.078947688607198E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998950593817747	WITHOUT_CLASSIFICATION	1.049406182252586E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998800246959343	WITHOUT_CLASSIFICATION	1.1997530406570251E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994921052311392	WITHOUT_CLASSIFICATION	5.078947688607198E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999850657656807	WITHOUT_CLASSIFICATION	1.4934234319160114E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999607749272267	WITHOUT_CLASSIFICATION	3.922507277336883E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999810962491957	WITHOUT_CLASSIFICATION	1.8903750804249272E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998874274381974	WITHOUT_CLASSIFICATION	1.1257256180270966E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999554672945532	WITHOUT_CLASSIFICATION	4.453270544669308E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999927624341511	WITHOUT_CLASSIFICATION	7.237565848832523E-6	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997067880711965	WITHOUT_CLASSIFICATION	2.9321192880356665E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999271031771825	WITHOUT_CLASSIFICATION	7.28968228174784E-5	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9981239405429961	WITHOUT_CLASSIFICATION	0.001876059457003855	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999871975967562	WITHOUT_CLASSIFICATION	1.280240324378931E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999054282482849	WITHOUT_CLASSIFICATION	9.457175171508743E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999170768066319	WITHOUT_CLASSIFICATION	8.29231933680149E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999676265532333	WITHOUT_CLASSIFICATION	3.2373446766658245E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999954788855282	WITHOUT_CLASSIFICATION	4.5211144717658816E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999836169127125	WITHOUT_CLASSIFICATION	1.6383087287499904E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999295237084519	WITHOUT_CLASSIFICATION	7.047629154807349E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995945481593466	WITHOUT_CLASSIFICATION	4.0545184065342727E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997812418897388	WITHOUT_CLASSIFICATION	2.1875811026123148E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9924902375850002	WITHOUT_CLASSIFICATION	0.00750976241499984	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998775133464661	WITHOUT_CLASSIFICATION	1.224866535338496E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999771528985051	WITHOUT_CLASSIFICATION	2.2847101495017784E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999391195583653	WITHOUT_CLASSIFICATION	6.0880441634674475E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9975576851030873	WITHOUT_CLASSIFICATION	0.002442314896912705	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999615760044355	WITHOUT_CLASSIFICATION	3.8423995564466154E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.99999997771791	WITHOUT_CLASSIFICATION	2.228208985386976E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998688402344041	WITHOUT_CLASSIFICATION	1.3115976559587643E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9963260797778764	WITHOUT_CLASSIFICATION	0.0036739202221237137	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997126082569947	WITHOUT_CLASSIFICATION	2.8739174300522686E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999077836946149	WITHOUT_CLASSIFICATION	9.221630538507766E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999057838537756	WITHOUT_CLASSIFICATION	9.421614622439403E-4	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999382097775241	WITHOUT_CLASSIFICATION	6.179022247591108E-5	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9728090534508912	WITHOUT_CLASSIFICATION	0.02719094654910882	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999609574195175	WITHOUT_CLASSIFICATION	3.9042580482435255E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998946631791378	WITHOUT_CLASSIFICATION	1.0533682086213332E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998679485651522	WITHOUT_CLASSIFICATION	1.320514348477871E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9966372723119014	WITHOUT_CLASSIFICATION	0.0033627276880986816	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999850638150521	WITHOUT_CLASSIFICATION	1.4936184947751615E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999819533076566	WITHOUT_CLASSIFICATION	1.8046692343401695E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999821291057277	WITHOUT_CLASSIFICATION	1.7870894272233566E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999962698000932	WITHOUT_CLASSIFICATION	3.7301999068402653E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999722977358103	WITHOUT_CLASSIFICATION	2.7702264189622778E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9985515358638133	WITHOUT_CLASSIFICATION	0.001448464136186708	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996340621753097	WITHOUT_CLASSIFICATION	3.659378246902382E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999895472882279	WITHOUT_CLASSIFICATION	1.045271177208865E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999083745936204	WITHOUT_CLASSIFICATION	9.162540637970974E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999249541722152	WITHOUT_CLASSIFICATION	7.504582778475725E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999984225770601	WITHOUT_CLASSIFICATION	1.5774229399064592E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999576329995696	WITHOUT_CLASSIFICATION	4.236700043046364E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999862304173109	WITHOUT_CLASSIFICATION	1.3769582688993117E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999824774094465	WITHOUT_CLASSIFICATION	1.7522590553516217E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999935363957646	WITHOUT_CLASSIFICATION	6.463604235330675E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999467114235204	WITHOUT_CLASSIFICATION	5.328857647953286E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998903991924201	WITHOUT_CLASSIFICATION	1.0960080757992049E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999820435941671	WITHOUT_CLASSIFICATION	1.795640583290037E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991353654204823	WITHOUT_CLASSIFICATION	8.646345795177515E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999955831839579	WITHOUT_CLASSIFICATION	4.416816042047189E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9974494985721788	WITHOUT_CLASSIFICATION	0.002550501427821215	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999581008249724	WITHOUT_CLASSIFICATION	4.1899175027505435E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999808658029338	WITHOUT_CLASSIFICATION	1.9134197066185516E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258136334259	WITHOUT_CLASSIFICATION	1.7418636657415892E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998158275183737	WITHOUT_CLASSIFICATION	1.8417248162628315E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9997637429867035	WITHOUT_CLASSIFICATION	2.3625701329666889E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999240199402315	WITHOUT_CLASSIFICATION	7.598005976856392E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864522252838	WITHOUT_CLASSIFICATION	1.3547774716321867E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9976524295143713	WITHOUT_CLASSIFICATION	0.0023475704856286673	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998553703583414	WITHOUT_CLASSIFICATION	1.4462964165867244E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998053730350468	WITHOUT_CLASSIFICATION	1.946269649532029E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998553703583414	WITHOUT_CLASSIFICATION	1.4462964165867244E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994408662857043	WITHOUT_CLASSIFICATION	5.591337142956954E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999722304256224	WITHOUT_CLASSIFICATION	2.7769574377498493E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999388014835641	WITHOUT_CLASSIFICATION	6.119851643601023E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999913190584815	WITHOUT_CLASSIFICATION	8.680941518515234E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999316294542463	WITHOUT_CLASSIFICATION	6.837054575372663E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999062402770689	WITHOUT_CLASSIFICATION	9.37597229311455E-5	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999479376312005	WITHOUT_CLASSIFICATION	5.206236879950634E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9982184221166465	WITHOUT_CLASSIFICATION	0.0017815778833535057	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999968194156085	WITHOUT_CLASSIFICATION	3.1805843915218162E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999985041583592	WITHOUT_CLASSIFICATION	1.495841640715728E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999521509815098	WITHOUT_CLASSIFICATION	4.7849018490117785E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998588141153795	WITHOUT_CLASSIFICATION	1.4118588462047664E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999528911540163	WITHOUT_CLASSIFICATION	4.710884598370631E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9627151733230291	WITHOUT_CLASSIFICATION	0.0372848266769709	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999940410659951	WITHOUT_CLASSIFICATION	5.9589340049004984E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998206400120533	WITHOUT_CLASSIFICATION	1.793599879467105E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999970609833826	WITHOUT_CLASSIFICATION	2.9390166173940966E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999970609833826	WITHOUT_CLASSIFICATION	2.9390166173940966E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998391586671319	WITHOUT_CLASSIFICATION	1.6084133286808547E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999444327362564	WITHOUT_CLASSIFICATION	5.556726374360507E-5	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999884012346264	WITHOUT_CLASSIFICATION	1.1598765373546557E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9996832982077757	WITHOUT_CLASSIFICATION	3.167017922243602E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999211070833991	WITHOUT_CLASSIFICATION	7.889291660090503E-5	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9996952833238498	WITHOUT_CLASSIFICATION	3.047166761501415E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9987340704369435	WITHOUT_CLASSIFICATION	0.0012659295630564602	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999099497744921	WITHOUT_CLASSIFICATION	9.005022550791061E-5	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999861691716445	WITHOUT_CLASSIFICATION	1.3830828355511125E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999179671534303	WITHOUT_CLASSIFICATION	8.203284656975317E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999289897573818	WITHOUT_CLASSIFICATION	7.101024261815067E-5	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999932917373369	WITHOUT_CLASSIFICATION	6.708262663042939E-6	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999293226474393	WITHOUT_CLASSIFICATION	7.067735256072912E-5	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999675249092085	WITHOUT_CLASSIFICATION	3.247509079159746E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997245338476981	WITHOUT_CLASSIFICATION	2.754661523018648E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.99990573031264	WITHOUT_CLASSIFICATION	9.426968736009376E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998405581515802	WITHOUT_CLASSIFICATION	1.5944184841985487E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995227472924663	WITHOUT_CLASSIFICATION	4.7725270753367103E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9998992327337893	WITHOUT_CLASSIFICATION	1.0076726621069248E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999875624290993	WITHOUT_CLASSIFICATION	1.243757090074496E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999985454681097	WITHOUT_CLASSIFICATION	1.4545318902961437E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999574391309946	WITHOUT_CLASSIFICATION	4.256086900544855E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999825618368813	WITHOUT_CLASSIFICATION	1.74381631187152E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999662213008333	WITHOUT_CLASSIFICATION	3.377869916667459E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9995958247883039	WITHOUT_CLASSIFICATION	4.0417521169609045E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999497691452799	WITHOUT_CLASSIFICATION	5.023085472005491E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998907749837412	WITHOUT_CLASSIFICATION	1.0922501625878457E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9988544419693416	WITHOUT_CLASSIFICATION	0.0011455580306584919	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998933058599128	WITHOUT_CLASSIFICATION	1.0669414008723163E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996236840737202	WITHOUT_CLASSIFICATION	3.7631592627984623E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998993420654865	WITHOUT_CLASSIFICATION	1.0065793451352893E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999976899764917	WITHOUT_CLASSIFICATION	2.3100235081813015E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9988697195961352	WITHOUT_CLASSIFICATION	0.0011302804038648036	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998330959000544	WITHOUT_CLASSIFICATION	1.6690409994559387E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998016681107721	WITHOUT_CLASSIFICATION	1.9833188922805826E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999990830224064	WITHOUT_CLASSIFICATION	9.1697759359441E-6	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999833504407777	WITHOUT_CLASSIFICATION	1.6649559222218625E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999589315909435	WITHOUT_CLASSIFICATION	4.106840905642518E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999376252521385	WITHOUT_CLASSIFICATION	6.23747478615368E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9983261773419071	WITHOUT_CLASSIFICATION	0.001673822658092867	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998272077174177	WITHOUT_CLASSIFICATION	1.7279228258228915E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759457904721	WITHOUT_CLASSIFICATION	1.240542095279812E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9998984753062635	WITHOUT_CLASSIFICATION	1.0152469373648408E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9870501906433871	WITHOUT_CLASSIFICATION	0.012949809356613004	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9989115876837984	WITHOUT_CLASSIFICATION	0.0010884123162015651	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9899212673096207	WITHOUT_CLASSIFICATION	0.010078732690379231	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9861469877756294	WITHOUT_CLASSIFICATION	0.01385301222437062	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999990365062194	WITHOUT_CLASSIFICATION	9.634937807264005E-7	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998730749172151	WITHOUT_CLASSIFICATION	1.269250827849446E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999624326700217	WITHOUT_CLASSIFICATION	3.756732997823026E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998759457904721	WITHOUT_CLASSIFICATION	1.240542095279812E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999834279468438	WITHOUT_CLASSIFICATION	1.6572053156234575E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999683368805199	WITHOUT_CLASSIFICATION	3.166311947999659E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999825537512501	WITHOUT_CLASSIFICATION	1.7446248749885689E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998931089807088	WITHOUT_CLASSIFICATION	1.06891019291115E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999306662996666	WITHOUT_CLASSIFICATION	6.933370033335619E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999306662996666	WITHOUT_CLASSIFICATION	6.933370033335619E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999984620930008	WITHOUT_CLASSIFICATION	1.537906999211071E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993707119983398	WITHOUT_CLASSIFICATION	6.292880016600941E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999411465598494	WITHOUT_CLASSIFICATION	5.885344015049618E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9992719430015962	WITHOUT_CLASSIFICATION	7.280569984038755E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997960676678089	WITHOUT_CLASSIFICATION	2.039323321911334E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999667698832411	WITHOUT_CLASSIFICATION	3.323011675884719E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999951888779868	WITHOUT_CLASSIFICATION	4.811122013183581E-6	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994069644119312	WITHOUT_CLASSIFICATION	5.930355880687716E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999750497863947	WITHOUT_CLASSIFICATION	2.495021360528879E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998077376445598	WITHOUT_CLASSIFICATION	1.9226235544030464E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.997098620663938	WITHOUT_CLASSIFICATION	0.0029013793360620067	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998738731985423	WITHOUT_CLASSIFICATION	1.261268014576141E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.99993959353902	WITHOUT_CLASSIFICATION	6.040646098002847E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9957636455086567	WITHOUT_CLASSIFICATION	0.004236354491343241	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998580855063502	WITHOUT_CLASSIFICATION	1.4191449364974398E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995971671866172	WITHOUT_CLASSIFICATION	4.0283281338276825E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9799716526973753	WITHOUT_CLASSIFICATION	0.0200283473026247	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998741709242285	WITHOUT_CLASSIFICATION	1.2582907577149196E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999908597251638	WITHOUT_CLASSIFICATION	9.140274836247213E-6	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997583640618699	WITHOUT_CLASSIFICATION	2.4163593813017654E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999455059733044	WITHOUT_CLASSIFICATION	5.449402669549245E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999997000039245	WITHOUT_CLASSIFICATION	2.9999607553736807E-7	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999626349682335	WITHOUT_CLASSIFICATION	3.7365031766539295E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999966535269358	WITHOUT_CLASSIFICATION	3.3464730641905644E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999735351248543	WITHOUT_CLASSIFICATION	2.646487514575829E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998052583488849	WITHOUT_CLASSIFICATION	1.9474165111518454E-4	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999866141725489	WITHOUT_CLASSIFICATION	1.3385827451211983E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999514770947052	WITHOUT_CLASSIFICATION	4.852290529475458E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999913119509114	WITHOUT_CLASSIFICATION	8.688049088614652E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999729672913767	WITHOUT_CLASSIFICATION	2.703270862326111E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999497661039591	WITHOUT_CLASSIFICATION	5.023389604076894E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999108998380544	WITHOUT_CLASSIFICATION	8.910016194559176E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999502981166726	WITHOUT_CLASSIFICATION	4.970188332736141E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999214940787355	WITHOUT_CLASSIFICATION	7.850592126445454E-5	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998209724467616	WITHOUT_CLASSIFICATION	1.7902755323847617E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999671688682398	WITHOUT_CLASSIFICATION	3.2831131760221004E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999289897573818	WITHOUT_CLASSIFICATION	7.101024261815067E-5	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999347708605806	WITHOUT_CLASSIFICATION	6.522913941936072E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999038898395237	WITHOUT_CLASSIFICATION	9.611016047624815E-5	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9990946093490448	WITHOUT_CLASSIFICATION	9.053906509552515E-4	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999423992534622	WITHOUT_CLASSIFICATION	5.7600746537873895E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999877631391686	WITHOUT_CLASSIFICATION	1.223686083144845E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999623342280606	WITHOUT_CLASSIFICATION	3.7665771939406425E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999586714122096	WITHOUT_CLASSIFICATION	4.1328587790421806E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999825329640267	WITHOUT_CLASSIFICATION	1.7467035973327372E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999405304107657	WITHOUT_CLASSIFICATION	5.946958923438574E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999191074579312	WITHOUT_CLASSIFICATION	8.089254206881251E-5	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999678122131838	WITHOUT_CLASSIFICATION	3.218778681632063E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998298761933246	WITHOUT_CLASSIFICATION	1.7012380667536818E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999921343705533	WITHOUT_CLASSIFICATION	7.865629446680505E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998602810952477	WITHOUT_CLASSIFICATION	1.3971890475233733E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999584443027207	WITHOUT_CLASSIFICATION	4.155569727934729E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999614192824988	WITHOUT_CLASSIFICATION	3.858071750115464E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999650666541396	WITHOUT_CLASSIFICATION	3.49333458603652E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997059493270322	WITHOUT_CLASSIFICATION	2.940506729678243E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999946852286878	WITHOUT_CLASSIFICATION	5.3147713122403545E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999485262374436	WITHOUT_CLASSIFICATION	5.1473762556320795E-5	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999359536947547	WITHOUT_CLASSIFICATION	6.404630524519081E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9990105144337341	WITHOUT_CLASSIFICATION	9.8948556626592E-4	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999580883347902	WITHOUT_CLASSIFICATION	4.19116652097747E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999450819917431	WITHOUT_CLASSIFICATION	5.4918008256807556E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998646519803918	WITHOUT_CLASSIFICATION	1.3534801960819393E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997798803814325	WITHOUT_CLASSIFICATION	2.201196185675652E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9984763780793178	WITHOUT_CLASSIFICATION	0.001523621920682178	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999801048004948	WITHOUT_CLASSIFICATION	1.9895199505189738E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999517706134786	WITHOUT_CLASSIFICATION	4.822938652137499E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999990987677285	WITHOUT_CLASSIFICATION	9.012322715625945E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998818446024624	WITHOUT_CLASSIFICATION	1.181553975375839E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999656479187272	WITHOUT_CLASSIFICATION	3.435208127279098E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998798560994108	WITHOUT_CLASSIFICATION	1.2014390058919524E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998962561284992	WITHOUT_CLASSIFICATION	1.0374387150082876E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995750831494495	WITHOUT_CLASSIFICATION	4.2491685055047853E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999953738559922	WITHOUT_CLASSIFICATION	4.626144007837721E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999894733988198	WITHOUT_CLASSIFICATION	1.0526601180199288E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999123997937073	WITHOUT_CLASSIFICATION	8.760020629268316E-5	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999983225099769	WITHOUT_CLASSIFICATION	1.6774900230648393E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999939364161802	WITHOUT_CLASSIFICATION	6.0635838197949916E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999994831018135	WITHOUT_CLASSIFICATION	5.168981865324713E-7	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9993044163117822	WITHOUT_CLASSIFICATION	6.955836882177275E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999411307253848	WITHOUT_CLASSIFICATION	5.8869274615219516E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999242424404492	WITHOUT_CLASSIFICATION	7.575755955077735E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996007339755599	WITHOUT_CLASSIFICATION	3.992660244400995E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998161190691804	WITHOUT_CLASSIFICATION	1.8388093081945776E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999038139808496	WITHOUT_CLASSIFICATION	9.618601915042988E-5	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998361906450483	WITHOUT_CLASSIFICATION	1.6380935495177877E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999940822577504	WITHOUT_CLASSIFICATION	5.917742249501176E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999890552050468	WITHOUT_CLASSIFICATION	1.0944794953235582E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999289664445057	WITHOUT_CLASSIFICATION	7.103355549427952E-5	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999500044774382	WITHOUT_CLASSIFICATION	4.999552256183083E-5	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999430983941342	WITHOUT_CLASSIFICATION	5.6901605865916914E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998646519803918	WITHOUT_CLASSIFICATION	1.3534801960819393E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999189530685637	WITHOUT_CLASSIFICATION	8.104693143626149E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999908257972344	WITHOUT_CLASSIFICATION	9.174202765574166E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999870706339975	WITHOUT_CLASSIFICATION	1.2929366002497028E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999515125452805	WITHOUT_CLASSIFICATION	4.848745471964087E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999999133794267	WITHOUT_CLASSIFICATION	8.662057329929998E-7	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9991840657202945	WITHOUT_CLASSIFICATION	8.159342797055004E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997767450243505	WITHOUT_CLASSIFICATION	2.232549756494763E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999911752213811	WITHOUT_CLASSIFICATION	8.824778618840756E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999883465292655	WITHOUT_CLASSIFICATION	1.1653470734444068E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998371103275312	WITHOUT_CLASSIFICATION	1.6288967246880204E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9987341228579243	WITHOUT_CLASSIFICATION	0.0012658771420757005	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997052844339626	WITHOUT_CLASSIFICATION	2.9471556603747197E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999996876896917	WITHOUT_CLASSIFICATION	3.123103082913312E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997429208289543	WITHOUT_CLASSIFICATION	2.570791710457082E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994408662857043	WITHOUT_CLASSIFICATION	5.591337142956954E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999389852972685	WITHOUT_CLASSIFICATION	6.101470273154928E-5	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9990584962823769	WITHOUT_CLASSIFICATION	9.41503717623069E-4	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998604689131546	WITHOUT_CLASSIFICATION	1.395310868453663E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999838117497281	WITHOUT_CLASSIFICATION	1.618825027190899E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999944980051003	WITHOUT_CLASSIFICATION	5.501994899679189E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999099280993736	WITHOUT_CLASSIFICATION	9.007190062638094E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999099280993736	WITHOUT_CLASSIFICATION	9.007190062638094E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999675794416788	WITHOUT_CLASSIFICATION	3.24205583212575E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999996207437332	WITHOUT_CLASSIFICATION	3.7925626681052722E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998241840494756	WITHOUT_CLASSIFICATION	1.7581595052431327E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999459709162385	WITHOUT_CLASSIFICATION	5.4029083761559524E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999277957573663	WITHOUT_CLASSIFICATION	7.220424263373995E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999591338349239	WITHOUT_CLASSIFICATION	4.0866165076138785E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999494656072871	WITHOUT_CLASSIFICATION	5.053439271276926E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993172009542024	WITHOUT_CLASSIFICATION	6.827990457975725E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993172009542024	WITHOUT_CLASSIFICATION	6.827990457975725E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999801483199123	WITHOUT_CLASSIFICATION	1.9851680087703627E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999595203072973	WITHOUT_CLASSIFICATION	4.047969270279185E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998387207076105	WITHOUT_CLASSIFICATION	1.612792923895277E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908918053531	WITHOUT_CLASSIFICATION	9.108194646903916E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908918053531	WITHOUT_CLASSIFICATION	9.108194646903916E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999908918053531	WITHOUT_CLASSIFICATION	9.108194646903916E-5	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999680794696973	WITHOUT_CLASSIFICATION	3.1920530302626565E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999480991911261	WITHOUT_CLASSIFICATION	5.190080887377127E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999970926356566	WITHOUT_CLASSIFICATION	2.9073643433975658E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998704289148161	WITHOUT_CLASSIFICATION	1.2957108518380845E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999513232300067	WITHOUT_CLASSIFICATION	4.867676999332916E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999936960698826	WITHOUT_CLASSIFICATION	6.303930117455247E-6	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999786766853008	WITHOUT_CLASSIFICATION	2.1323314699172987E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9497390996489695	WITHOUT_CLASSIFICATION	0.050260900351030514	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999796601659212	WITHOUT_CLASSIFICATION	2.0339834078836126E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.99995586174825	WITHOUT_CLASSIFICATION	4.413825174995096E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998569433814058	WITHOUT_CLASSIFICATION	1.4305661859423312E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9968229383221604	WITHOUT_CLASSIFICATION	0.0031770616778397072	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999898691357391	WITHOUT_CLASSIFICATION	1.0130864260812837E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999791546975334	WITHOUT_CLASSIFICATION	2.0845302466612518E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999953769090428	WITHOUT_CLASSIFICATION	4.623090957088173E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999860701153928	WITHOUT_CLASSIFICATION	1.3929884607118732E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999504149961532	WITHOUT_CLASSIFICATION	4.958500384666123E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999099280993736	WITHOUT_CLASSIFICATION	9.007190062638094E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999912565607357	WITHOUT_CLASSIFICATION	8.743439264332594E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9594965915669169	WITHOUT_CLASSIFICATION	0.040503408433083095	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998866960054424	WITHOUT_CLASSIFICATION	1.1330399455756408E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999505864426311	WITHOUT_CLASSIFICATION	4.9413557368798104E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999419773062143	WITHOUT_CLASSIFICATION	5.802269378568125E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999317697316232	WITHOUT_CLASSIFICATION	6.823026837676683E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999897412705863	WITHOUT_CLASSIFICATION	1.0258729413681992E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998385591940925	WITHOUT_CLASSIFICATION	1.614408059076262E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999277192364401	WITHOUT_CLASSIFICATION	7.228076355987123E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999346064019473	WITHOUT_CLASSIFICATION	6.539359805273687E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999779946002605	WITHOUT_CLASSIFICATION	2.2005399739504722E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999682644052802	WITHOUT_CLASSIFICATION	3.173559471984332E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.999816992893396	WITHOUT_CLASSIFICATION	1.8300710660406404E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999365087889803	WITHOUT_CLASSIFICATION	6.34912110196375E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999766774338147	WITHOUT_CLASSIFICATION	2.3322566185268172E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8550037699631454	WITHOUT_CLASSIFICATION	0.14499623003685458	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996225585213893	WITHOUT_CLASSIFICATION	3.7744147861067546E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999991669359877	WITHOUT_CLASSIFICATION	8.330640123020943E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999694740820966	WITHOUT_CLASSIFICATION	3.052591790344808E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999694740820966	WITHOUT_CLASSIFICATION	3.052591790344808E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999300190523762	WITHOUT_CLASSIFICATION	6.998094762375262E-5	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999772613838126	WITHOUT_CLASSIFICATION	2.2738616187431125E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999245728179482	WITHOUT_CLASSIFICATION	7.542718205174722E-5	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999575528776424	WITHOUT_CLASSIFICATION	4.2447122357635026E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997584030918674	WITHOUT_CLASSIFICATION	2.4159690813266836E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999900706934023	WITHOUT_CLASSIFICATION	9.92930659769657E-6	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998656542068945	WITHOUT_CLASSIFICATION	1.3434579310550124E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999036578008366	WITHOUT_CLASSIFICATION	9.634219916343456E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999824090231867	WITHOUT_CLASSIFICATION	1.7590976813323525E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999777236770737	WITHOUT_CLASSIFICATION	2.2276322926269487E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9996913469443124	WITHOUT_CLASSIFICATION	3.086530556876747E-4	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997203206100838	WITHOUT_CLASSIFICATION	2.7967938991619765E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999980436802448	WITHOUT_CLASSIFICATION	1.9563197552408432E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999559549936579	WITHOUT_CLASSIFICATION	4.4045006342067844E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999960214662841	WITHOUT_CLASSIFICATION	3.978533716001788E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995171211977046	WITHOUT_CLASSIFICATION	4.8287880229544287E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999889618264107	WITHOUT_CLASSIFICATION	1.1038173589282834E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999889618264107	WITHOUT_CLASSIFICATION	1.1038173589282834E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998321105108868	WITHOUT_CLASSIFICATION	1.6788948911327314E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9961868507263667	WITHOUT_CLASSIFICATION	0.0038131492736332086	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996005397325479	WITHOUT_CLASSIFICATION	3.994602674521226E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995984073529041	WITHOUT_CLASSIFICATION	4.015926470959589E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998897663430537	WITHOUT_CLASSIFICATION	1.102336569462806E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996522372907238	WITHOUT_CLASSIFICATION	3.477627092762208E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999299712877734	WITHOUT_CLASSIFICATION	7.002871222655876E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988378787998194	WITHOUT_CLASSIFICATION	0.0011621212001805049	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997439881718548	WITHOUT_CLASSIFICATION	2.5601182814523983E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998964332051385	WITHOUT_CLASSIFICATION	1.0356679486151099E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999712256876143	WITHOUT_CLASSIFICATION	2.8774312385700023E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988378787998194	WITHOUT_CLASSIFICATION	0.0011621212001805049	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9989113579881482	WITHOUT_CLASSIFICATION	0.0010886420118517604	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998768981437646	WITHOUT_CLASSIFICATION	1.2310185623539075E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999875461260535	WITHOUT_CLASSIFICATION	1.2453873946512538E-4	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9996552132197861	WITHOUT_CLASSIFICATION	3.4478678021389753E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999010603827327	WITHOUT_CLASSIFICATION	9.893961726720691E-5	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999964431278626	WITHOUT_CLASSIFICATION	3.5568721372576694E-6	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999764590862955	WITHOUT_CLASSIFICATION	2.354091370452138E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999540517552236	WITHOUT_CLASSIFICATION	4.594824477638444E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998990164705385	WITHOUT_CLASSIFICATION	1.0098352946153911E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9978035461847252	WITHOUT_CLASSIFICATION	0.0021964538152747623	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999496950267917	WITHOUT_CLASSIFICATION	5.030497320840175E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999392624705216	WITHOUT_CLASSIFICATION	6.073752947855213E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999472687998597	WITHOUT_CLASSIFICATION	5.2731200140291886E-5	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999929810944049	WITHOUT_CLASSIFICATION	7.018905595073274E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999931307704169	WITHOUT_CLASSIFICATION	6.869229583092783E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998915947879297	WITHOUT_CLASSIFICATION	1.0840521207034706E-4	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999718825126327	WITHOUT_CLASSIFICATION	2.8117487367328314E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9995118668355699	WITHOUT_CLASSIFICATION	4.881331644299844E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995118668355699	WITHOUT_CLASSIFICATION	4.881331644299844E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999764590862955	WITHOUT_CLASSIFICATION	2.354091370452138E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999847183722648	WITHOUT_CLASSIFICATION	1.5281627735191697E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997572389529821	WITHOUT_CLASSIFICATION	2.4276104701791804E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9981901237887661	WITHOUT_CLASSIFICATION	0.0018098762112337351	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9998464884250736	WITHOUT_CLASSIFICATION	1.5351157492640637E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999993014551165	WITHOUT_CLASSIFICATION	6.985448835071682E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999870952353702	WITHOUT_CLASSIFICATION	1.2904764629776371E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999284151349028	WITHOUT_CLASSIFICATION	7.158486509713153E-5	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9987257054641836	WITHOUT_CLASSIFICATION	0.0012742945358163486	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999980695641404	WITHOUT_CLASSIFICATION	1.9304358596587303E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999538405976924	WITHOUT_CLASSIFICATION	4.615940230757942E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999878863280365	WITHOUT_CLASSIFICATION	1.211367196359391E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9985392129770368	WITHOUT_CLASSIFICATION	0.00146078702296314	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995345413856835	WITHOUT_CLASSIFICATION	4.654586143164345E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999954280220356	WITHOUT_CLASSIFICATION	4.571977964461426E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999799391150781	WITHOUT_CLASSIFICATION	2.006088492193407E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999924018797682	WITHOUT_CLASSIFICATION	7.598120231694437E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999983881716838	WITHOUT_CLASSIFICATION	1.6118283162497699E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999481252761538	WITHOUT_CLASSIFICATION	5.187472384606599E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999825644815064	WITHOUT_CLASSIFICATION	1.7435518493723537E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999762488900109	WITHOUT_CLASSIFICATION	2.375110998915852E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999868301803976	WITHOUT_CLASSIFICATION	1.3169819602504303E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9997919584815397	WITHOUT_CLASSIFICATION	2.0804151846026873E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999560063536941	WITHOUT_CLASSIFICATION	4.399364630594067E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999968699344505	WITHOUT_CLASSIFICATION	3.1300655494280373E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999990154619888	WITHOUT_CLASSIFICATION	9.845380112616872E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999366074652531	WITHOUT_CLASSIFICATION	6.339253474685494E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999980464264665	WITHOUT_CLASSIFICATION	1.9535735335020656E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999828011180417	WITHOUT_CLASSIFICATION	1.719888195821179E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999965745321621	WITHOUT_CLASSIFICATION	3.425467837854543E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9994146318079965	WITHOUT_CLASSIFICATION	5.85368192003537E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999799262837277	WITHOUT_CLASSIFICATION	2.007371627228887E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999903509433147	WITHOUT_CLASSIFICATION	9.649056685336726E-6	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997786632834426	WITHOUT_CLASSIFICATION	2.2133671655748594E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999953814159199	WITHOUT_CLASSIFICATION	4.61858408000924E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999249155703495	WITHOUT_CLASSIFICATION	7.508442965057822E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997582929231311	WITHOUT_CLASSIFICATION	2.4170707686882245E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998812637276415	WITHOUT_CLASSIFICATION	1.1873627235854783E-4	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999574418838124	WITHOUT_CLASSIFICATION	4.255811618769733E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999429074465854	WITHOUT_CLASSIFICATION	5.7092553414682104E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9987020728814694	WITHOUT_CLASSIFICATION	0.001297927118530525	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999347903033404	WITHOUT_CLASSIFICATION	6.520969665956563E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9996635973811637	WITHOUT_CLASSIFICATION	3.36402618836366E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5538772746383842	WITHOUT_CLASSIFICATION	0.44612272536161585	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9996853976154874	WITHOUT_CLASSIFICATION	3.1460238451265753E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998723793383874	WITHOUT_CLASSIFICATION	1.276206616127205E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998523515244438	WITHOUT_CLASSIFICATION	1.4764847555613793E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9992586389869917	WITHOUT_CLASSIFICATION	7.413610130082086E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995280980533678	WITHOUT_CLASSIFICATION	4.719019466321855E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999898070749099	WITHOUT_CLASSIFICATION	1.019292509011125E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999215419880939	WITHOUT_CLASSIFICATION	7.845801190611088E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998034503526722	WITHOUT_CLASSIFICATION	1.9654964732779645E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997439881718548	WITHOUT_CLASSIFICATION	2.5601182814523983E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996793677642	WITHOUT_CLASSIFICATION	3.2063223573680997E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999799391150781	WITHOUT_CLASSIFICATION	2.006088492193407E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9975761237965725	WITHOUT_CLASSIFICATION	0.0024238762034275	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998479557102311	WITHOUT_CLASSIFICATION	1.5204428976880237E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999966746236036	WITHOUT_CLASSIFICATION	3.3253763964137884E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999666708564738	WITHOUT_CLASSIFICATION	3.332914352607081E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999090246728685	WITHOUT_CLASSIFICATION	9.097532713153088E-5	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999974987101087	WITHOUT_CLASSIFICATION	2.5012898913875014E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998756818924366	WITHOUT_CLASSIFICATION	1.243181075634299E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999997077492012	WITHOUT_CLASSIFICATION	2.922507988092056E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.978279031506636	WITHOUT_CLASSIFICATION	0.021720968493364027	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997903122382675	WITHOUT_CLASSIFICATION	2.09687761732405E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999867993736191	WITHOUT_CLASSIFICATION	1.3200626380976351E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999977138519732	WITHOUT_CLASSIFICATION	2.2861480268320463E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99996672728184	WITHOUT_CLASSIFICATION	3.327271816004557E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99996672728184	WITHOUT_CLASSIFICATION	3.327271816004557E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999969264124318	WITHOUT_CLASSIFICATION	3.0735875681559306E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997866813194927	WITHOUT_CLASSIFICATION	2.1331868050739655E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999969068544108	WITHOUT_CLASSIFICATION	3.093145589192559E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999909996782378	WITHOUT_CLASSIFICATION	9.00032176211231E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999464557595559	WITHOUT_CLASSIFICATION	5.3544240444218905E-5	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999325446615474	WITHOUT_CLASSIFICATION	6.7455338452594E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998160968906715	WITHOUT_CLASSIFICATION	1.8390310932838157E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998925217938783	WITHOUT_CLASSIFICATION	1.0747820612157725E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999813199655514	WITHOUT_CLASSIFICATION	1.8680034448586433E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999717261785939	WITHOUT_CLASSIFICATION	2.8273821406068094E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999443288336146	WITHOUT_CLASSIFICATION	5.567116638536693E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999443288336146	WITHOUT_CLASSIFICATION	5.567116638536693E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9998533834719303	WITHOUT_CLASSIFICATION	1.46616528069702E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999615214217015	WITHOUT_CLASSIFICATION	3.8478578298458314E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9988020935576429	WITHOUT_CLASSIFICATION	0.0011979064423570664	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998314296435318	WITHOUT_CLASSIFICATION	1.6857035646832287E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999946261678381	WITHOUT_CLASSIFICATION	5.373832161995876E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9996715858929465	WITHOUT_CLASSIFICATION	3.284141070536106E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9997872627003992	WITHOUT_CLASSIFICATION	2.1273729960076502E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9992897182174996	WITHOUT_CLASSIFICATION	7.102817825004221E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999393823079713	WITHOUT_CLASSIFICATION	6.061769202885711E-5	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999205475912084	WITHOUT_CLASSIFICATION	7.945240879162602E-5	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999899816029792	WITHOUT_CLASSIFICATION	1.0018397020641394E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998720673093455	WITHOUT_CLASSIFICATION	1.2793269065456032E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999574035091985	WITHOUT_CLASSIFICATION	4.2596490801421955E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996513300798172	WITHOUT_CLASSIFICATION	3.4866992018277423E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996278738747332	WITHOUT_CLASSIFICATION	3.7212612526685025E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999436100570087	WITHOUT_CLASSIFICATION	5.6389942991192725E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9936633340792874	WITHOUT_CLASSIFICATION	0.006336665920712506	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997917171160471	WITHOUT_CLASSIFICATION	2.0828288395284E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999958409474468	WITHOUT_CLASSIFICATION	4.159052553250199E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999588842878097	WITHOUT_CLASSIFICATION	4.111571219036213E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997583640618699	WITHOUT_CLASSIFICATION	2.4163593813017654E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999763785852963	WITHOUT_CLASSIFICATION	2.3621414703655113E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996221873223309	WITHOUT_CLASSIFICATION	3.7781267766910117E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999715191034405	WITHOUT_CLASSIFICATION	2.8480896559373595E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999683389860797	WITHOUT_CLASSIFICATION	3.166101392024047E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999275366174551	WITHOUT_CLASSIFICATION	7.246338254491862E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999358511035504	WITHOUT_CLASSIFICATION	6.414889644958519E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999841410068039	WITHOUT_CLASSIFICATION	1.5858993196148886E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999586820864704	WITHOUT_CLASSIFICATION	4.1317913529488896E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512643108684	WITHOUT_CLASSIFICATION	4.87356891315098E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9974980949592878	WITHOUT_CLASSIFICATION	0.0025019050407122405	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999827504395548	WITHOUT_CLASSIFICATION	1.7249560445231392E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999103289208	WITHOUT_CLASSIFICATION	8.967107928369431E-8	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998994225109793	WITHOUT_CLASSIFICATION	1.0057748902071248E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999450409753938	WITHOUT_CLASSIFICATION	5.4959024606153E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999967947598136	WITHOUT_CLASSIFICATION	3.205240186521579E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998984439785639	WITHOUT_CLASSIFICATION	1.0155602143604423E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998537561694615	WITHOUT_CLASSIFICATION	1.46243830538537E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999881369969036	WITHOUT_CLASSIFICATION	1.1863003096275872E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994249878980219	WITHOUT_CLASSIFICATION	5.750121019779945E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997731654421858	WITHOUT_CLASSIFICATION	2.2683455781426692E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999247689885044	WITHOUT_CLASSIFICATION	7.523101149556715E-5	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999586150231438	WITHOUT_CLASSIFICATION	4.138497685635087E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998261668354483	WITHOUT_CLASSIFICATION	1.7383316455163444E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999229057311237	WITHOUT_CLASSIFICATION	7.709426887618865E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9993464628570373	WITHOUT_CLASSIFICATION	6.535371429626899E-4	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999772451121304	WITHOUT_CLASSIFICATION	2.275488786960469E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999393999806385	WITHOUT_CLASSIFICATION	6.0600019361587274E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99998154628282	WITHOUT_CLASSIFICATION	1.845371718001812E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9993731414035077	WITHOUT_CLASSIFICATION	6.268585964923371E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999483242095587	WITHOUT_CLASSIFICATION	5.167579044132042E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999305980059497	WITHOUT_CLASSIFICATION	6.940199405030166E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999783765217161	WITHOUT_CLASSIFICATION	2.1623478283975358E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999470445036707	WITHOUT_CLASSIFICATION	5.2955496329445964E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999783765217161	WITHOUT_CLASSIFICATION	2.1623478283975358E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9962747441604816	WITHOUT_CLASSIFICATION	0.003725255839518283	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9952888403558786	WITHOUT_CLASSIFICATION	0.004711159644121425	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999784700255384	WITHOUT_CLASSIFICATION	2.1529974461615637E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999962888990216	WITHOUT_CLASSIFICATION	3.7111009784726676E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999078554298748	WITHOUT_CLASSIFICATION	9.214457012516346E-5	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999784700255384	WITHOUT_CLASSIFICATION	2.1529974461615637E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999991892015254	WITHOUT_CLASSIFICATION	8.107984745372738E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998418767263527	WITHOUT_CLASSIFICATION	1.5812327364723926E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999005439412905	WITHOUT_CLASSIFICATION	9.945605870954378E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999788352797152	WITHOUT_CLASSIFICATION	2.116472028481586E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999963560990787	WITHOUT_CLASSIFICATION	3.643900921437089E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999712316067607	WITHOUT_CLASSIFICATION	2.876839323926027E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999999267900146	WITHOUT_CLASSIFICATION	7.320998539042091E-7	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999475580561865	WITHOUT_CLASSIFICATION	5.244194381342806E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999873890923527	WITHOUT_CLASSIFICATION	1.2610907647280404E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999335879222735	WITHOUT_CLASSIFICATION	6.641207772651083E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9990873872376752	WITHOUT_CLASSIFICATION	9.126127623249362E-4	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999220557158601	WITHOUT_CLASSIFICATION	7.794428413984892E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.99986573592505	WITHOUT_CLASSIFICATION	1.342640749499608E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999404809507177	WITHOUT_CLASSIFICATION	5.9519049282301815E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999783632382316	WITHOUT_CLASSIFICATION	2.1636761768337704E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997079309702586	WITHOUT_CLASSIFICATION	2.920690297415172E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9994260071454665	WITHOUT_CLASSIFICATION	5.739928545335628E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995941017883787	WITHOUT_CLASSIFICATION	4.0589821162128893E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998780095254267	WITHOUT_CLASSIFICATION	1.2199047457328101E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9970548381271612	WITHOUT_CLASSIFICATION	0.0029451618728388316	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999158617454657	WITHOUT_CLASSIFICATION	8.413825453429395E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9997614954293683	WITHOUT_CLASSIFICATION	2.3850457063172016E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997555126450486	WITHOUT_CLASSIFICATION	2.4448735495146166E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9991042415839075	WITHOUT_CLASSIFICATION	8.957584160924899E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998871886526628	WITHOUT_CLASSIFICATION	1.1281134733720022E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9729356294988136	WITHOUT_CLASSIFICATION	0.027064370501186368	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9934253746988192	WITHOUT_CLASSIFICATION	0.006574625301180897	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999935247532987	WITHOUT_CLASSIFICATION	6.475246701313703E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999477011997019	WITHOUT_CLASSIFICATION	5.229880029815648E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9996900587092196	WITHOUT_CLASSIFICATION	3.0994129078049446E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999953374259174	WITHOUT_CLASSIFICATION	4.662574082689251E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998509477346239	WITHOUT_CLASSIFICATION	1.490522653760071E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9945098510758076	WITHOUT_CLASSIFICATION	0.0054901489241923306	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9970548381271612	WITHOUT_CLASSIFICATION	0.0029451618728388316	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999972997376262	WITHOUT_CLASSIFICATION	2.7002623738046296E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9996689087709034	WITHOUT_CLASSIFICATION	3.310912290966045E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996374028395217	WITHOUT_CLASSIFICATION	3.625971604783581E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998541164434267	WITHOUT_CLASSIFICATION	1.458835565732095E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999978650399356	WITHOUT_CLASSIFICATION	2.134960064413634E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999875066029982	WITHOUT_CLASSIFICATION	1.2493397001902505E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9928671862396778	WITHOUT_CLASSIFICATION	0.007132813760322084	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998779152622514	WITHOUT_CLASSIFICATION	1.2208473774860104E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999525142175653	WITHOUT_CLASSIFICATION	4.7485782434694685E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999113969123515	WITHOUT_CLASSIFICATION	8.860308764854605E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999972145455829	WITHOUT_CLASSIFICATION	2.785454417031128E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999968062270505	WITHOUT_CLASSIFICATION	3.193772949490505E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999358086701362	WITHOUT_CLASSIFICATION	6.419132986387246E-5	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999827038657927	WITHOUT_CLASSIFICATION	1.7296134207256567E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998764573071905	WITHOUT_CLASSIFICATION	1.2354269280942843E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999789252023612	WITHOUT_CLASSIFICATION	2.107479763876956E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9973580690750544	WITHOUT_CLASSIFICATION	0.002641930924945583	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9993078948679677	WITHOUT_CLASSIFICATION	6.921051320324205E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997929032735373	WITHOUT_CLASSIFICATION	0.002070967264627005	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9993925159650057	WITHOUT_CLASSIFICATION	6.074840349944314E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997489687483646	WITHOUT_CLASSIFICATION	2.510312516354888E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997489687483646	WITHOUT_CLASSIFICATION	2.510312516354888E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999522263270861	WITHOUT_CLASSIFICATION	4.777367291396926E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997489687483646	WITHOUT_CLASSIFICATION	2.510312516354888E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997489687483646	WITHOUT_CLASSIFICATION	2.510312516354888E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9919348439378914	WITHOUT_CLASSIFICATION	0.00806515606210853	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995621809385242	WITHOUT_CLASSIFICATION	4.378190614758579E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998936386033441	WITHOUT_CLASSIFICATION	1.0636139665590653E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998936386033441	WITHOUT_CLASSIFICATION	1.0636139665590653E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9980196536586378	WITHOUT_CLASSIFICATION	0.0019803463413621603	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999785635622738	WITHOUT_CLASSIFICATION	2.14364377262181E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9976025511293992	WITHOUT_CLASSIFICATION	0.0023974488706007776	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999223514891975	WITHOUT_CLASSIFICATION	7.76485108024299E-5	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998781793101689	WITHOUT_CLASSIFICATION	1.2182068983114309E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998713520324827	WITHOUT_CLASSIFICATION	1.2864796751737052E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994697587525844	WITHOUT_CLASSIFICATION	5.302412474156643E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999419039476797	WITHOUT_CLASSIFICATION	5.809605232032652E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998176882586702	WITHOUT_CLASSIFICATION	1.8231174132970826E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997914253676874	WITHOUT_CLASSIFICATION	2.0857463231255705E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996019195894243	WITHOUT_CLASSIFICATION	3.9808041057566123E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9976989337932117	WITHOUT_CLASSIFICATION	0.0023010662067882845	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864522252838	WITHOUT_CLASSIFICATION	1.3547774716321867E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999942915987675	WITHOUT_CLASSIFICATION	5.708401232500637E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9981239826151868	WITHOUT_CLASSIFICATION	0.001876017384813224	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9995650796636933	WITHOUT_CLASSIFICATION	4.349203363065856E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9996005855529637	WITHOUT_CLASSIFICATION	3.994144470362725E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999863105414366	WITHOUT_CLASSIFICATION	1.3689458563399233E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999864522252838	WITHOUT_CLASSIFICATION	1.3547774716321867E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999158617454657	WITHOUT_CLASSIFICATION	8.413825453429395E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.999674487345391	WITHOUT_CLASSIFICATION	3.2551265460896076E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997732653550989	WITHOUT_CLASSIFICATION	2.2673464490115527E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996048453179	WITHOUT_CLASSIFICATION	3.9515468210007894E-4	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999463525377873	WITHOUT_CLASSIFICATION	5.364746221281406E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999442100692503	WITHOUT_CLASSIFICATION	5.5789930749674846E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999464987894447	WITHOUT_CLASSIFICATION	5.350121055527962E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998441599219766	WITHOUT_CLASSIFICATION	1.5584007802343697E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999652404876943	WITHOUT_CLASSIFICATION	3.475951230573337E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999534740723	WITHOUT_CLASSIFICATION	4.6525927700161105E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.99989797781352	WITHOUT_CLASSIFICATION	1.0202218648003925E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999681951545077	WITHOUT_CLASSIFICATION	3.180484549227945E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997282036065454	WITHOUT_CLASSIFICATION	2.717963934545803E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999105412489763	WITHOUT_CLASSIFICATION	8.945875102370546E-5	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9933489891686699	WITHOUT_CLASSIFICATION	0.006651010831330071	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999577543100374	WITHOUT_CLASSIFICATION	4.224568996248354E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999650427007258	WITHOUT_CLASSIFICATION	3.4957299274138055E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998806393657282	WITHOUT_CLASSIFICATION	1.1936063427182423E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998997564356777	WITHOUT_CLASSIFICATION	1.0024356432227219E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997957045071446	WITHOUT_CLASSIFICATION	2.0429549285535343E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996851473085056	WITHOUT_CLASSIFICATION	3.1485269149444E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9990855462222015	WITHOUT_CLASSIFICATION	9.144537777984642E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999993914603567	WITHOUT_CLASSIFICATION	6.085396432195216E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999652404876943	WITHOUT_CLASSIFICATION	3.475951230573337E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999220578483946	WITHOUT_CLASSIFICATION	7.794215160547449E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999105924987006	WITHOUT_CLASSIFICATION	8.940750129933149E-5	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998368224773705	WITHOUT_CLASSIFICATION	1.6317752262953535E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999292951085625	WITHOUT_CLASSIFICATION	7.070489143746854E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998904090000905	WITHOUT_CLASSIFICATION	1.0959099990941537E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998975765150978	WITHOUT_CLASSIFICATION	1.0242348490219608E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999416376570698	WITHOUT_CLASSIFICATION	5.83623429302566E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9998973776994332	WITHOUT_CLASSIFICATION	1.0262230056678295E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.99989484790702	WITHOUT_CLASSIFICATION	1.0515209297994847E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999911310989573	WITHOUT_CLASSIFICATION	8.868901042785056E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999844425404331	WITHOUT_CLASSIFICATION	1.555745956684478E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999804387691026	WITHOUT_CLASSIFICATION	1.9561230897445218E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999708937877448	WITHOUT_CLASSIFICATION	2.9106212255164754E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999696390396454	WITHOUT_CLASSIFICATION	3.0360960354563347E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995828881726976	WITHOUT_CLASSIFICATION	4.171118273023566E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999911310989573	WITHOUT_CLASSIFICATION	8.868901042785056E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999427339679515	WITHOUT_CLASSIFICATION	5.726603204854525E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9995688132635453	WITHOUT_CLASSIFICATION	4.3118673645468046E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998921699969566	WITHOUT_CLASSIFICATION	1.0783000304337655E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999824580094938	WITHOUT_CLASSIFICATION	1.754199050612743E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.999967134174605	WITHOUT_CLASSIFICATION	3.286582539491661E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999915081823639	WITHOUT_CLASSIFICATION	8.491817636031872E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.99995408456496	WITHOUT_CLASSIFICATION	4.591543503996643E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999858412804	WITHOUT_CLASSIFICATION	1.000141587197076E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998836224128518	WITHOUT_CLASSIFICATION	1.1637758714817811E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954638035837	WITHOUT_CLASSIFICATION	3.045361964164047E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954638035837	WITHOUT_CLASSIFICATION	3.045361964164047E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954638035837	WITHOUT_CLASSIFICATION	3.045361964164047E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999545825800347	WITHOUT_CLASSIFICATION	4.541741996526135E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999545825800347	WITHOUT_CLASSIFICATION	4.541741996526135E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.992310588934799	WITHOUT_CLASSIFICATION	0.0076894110652009785	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999959969179891	WITHOUT_CLASSIFICATION	4.003082010874155E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9998649933948696	WITHOUT_CLASSIFICATION	1.3500660513036204E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9998775553455659	WITHOUT_CLASSIFICATION	1.2244465443416458E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.8503061919584444	WITHOUT_CLASSIFICATION	0.14969380804155563	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999871833175643	WITHOUT_CLASSIFICATION	1.281668243570833E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937123582878	WITHOUT_CLASSIFICATION	1.0628764171212503E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997754892239015	WITHOUT_CLASSIFICATION	2.2451077609842996E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999316405262306	WITHOUT_CLASSIFICATION	6.835947376936718E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999871833175643	WITHOUT_CLASSIFICATION	1.281668243570833E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998937123582878	WITHOUT_CLASSIFICATION	1.0628764171212503E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.99998873459495	WITHOUT_CLASSIFICATION	1.1265405049957637E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999315950228731	WITHOUT_CLASSIFICATION	6.84049771268735E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999906212987965	WITHOUT_CLASSIFICATION	9.378701203443194E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999127619304955	WITHOUT_CLASSIFICATION	8.723806950446747E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999865495065256	WITHOUT_CLASSIFICATION	1.3450493474398214E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999113404998528	WITHOUT_CLASSIFICATION	8.865950014720029E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999336660747965	WITHOUT_CLASSIFICATION	6.633392520348306E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999384388823693	WITHOUT_CLASSIFICATION	6.156111763066994E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997870267502683	WITHOUT_CLASSIFICATION	2.1297324973160837E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9953344793022126	WITHOUT_CLASSIFICATION	0.004665520697787399	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998351295162266	WITHOUT_CLASSIFICATION	1.6487048377335727E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999862128724631	WITHOUT_CLASSIFICATION	1.3787127536848875E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998463160354938	WITHOUT_CLASSIFICATION	1.5368396450629894E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9990336163830444	WITHOUT_CLASSIFICATION	9.66383616955494E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999437038693615	WITHOUT_CLASSIFICATION	5.629613063863031E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999937869167389	WITHOUT_CLASSIFICATION	6.21308326110418E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9990764937824103	WITHOUT_CLASSIFICATION	9.235062175896816E-4	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963144841956	WITHOUT_CLASSIFICATION	3.6855158043882827E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999506553070837	WITHOUT_CLASSIFICATION	4.93446929163846E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999680905697546	WITHOUT_CLASSIFICATION	3.190943024534521E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999996719638853	WITHOUT_CLASSIFICATION	3.280361147693788E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996270061537648	WITHOUT_CLASSIFICATION	3.7299384623519505E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998695790216809	WITHOUT_CLASSIFICATION	1.3042097831910735E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998722064873061	WITHOUT_CLASSIFICATION	1.277935126939533E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999313706079	WITHOUT_CLASSIFICATION	6.862939208087859E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998814333945285	WITHOUT_CLASSIFICATION	1.1856660547149427E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997111821321548	WITHOUT_CLASSIFICATION	2.888178678451898E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99982593014375	WITHOUT_CLASSIFICATION	1.7406985625008134E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99982593014375	WITHOUT_CLASSIFICATION	1.7406985625008134E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998080424058189	WITHOUT_CLASSIFICATION	1.9195759418105465E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9994089939829222	WITHOUT_CLASSIFICATION	5.910060170777697E-4	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999965658723753	WITHOUT_CLASSIFICATION	3.4341276246962705E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999857580830691	WITHOUT_CLASSIFICATION	1.424191693079342E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999321510658471	WITHOUT_CLASSIFICATION	6.78489341528311E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.999668318592305	WITHOUT_CLASSIFICATION	3.316814076950888E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999969949653262	WITHOUT_CLASSIFICATION	3.0050346737355997E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999680015679754	WITHOUT_CLASSIFICATION	3.199843202452688E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999188029934996	WITHOUT_CLASSIFICATION	8.119700650048268E-5	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166526694138	WITHOUT_CLASSIFICATION	8.334733058631914E-5	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999171221112726	WITHOUT_CLASSIFICATION	8.287788872749179E-5	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9989994336319391	WITHOUT_CLASSIFICATION	0.001000566368060911	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998024574153048	WITHOUT_CLASSIFICATION	1.9754258469521454E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988192668498574	WITHOUT_CLASSIFICATION	0.0011807331501426104	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9996083073622971	WITHOUT_CLASSIFICATION	3.916926377028636E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999870356979426	WITHOUT_CLASSIFICATION	1.29643020573547E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998387509435808	WITHOUT_CLASSIFICATION	1.6124905641916762E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999916207952534	WITHOUT_CLASSIFICATION	8.3792047465945E-6	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999936203437152	WITHOUT_CLASSIFICATION	6.379656284804228E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988192668498574	WITHOUT_CLASSIFICATION	0.0011807331501426104	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988192668498574	WITHOUT_CLASSIFICATION	0.0011807331501426104	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999524684972362	WITHOUT_CLASSIFICATION	4.7531502763843046E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999993415526652	WITHOUT_CLASSIFICATION	6.584473347940305E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996935968846904	WITHOUT_CLASSIFICATION	3.0640311530963046E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999581434650724	WITHOUT_CLASSIFICATION	4.185653492755295E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999365087889803	WITHOUT_CLASSIFICATION	6.34912110196375E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999937869167389	WITHOUT_CLASSIFICATION	6.21308326110418E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999522036734462	WITHOUT_CLASSIFICATION	4.779632655380387E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999565709870981	WITHOUT_CLASSIFICATION	4.342901290181853E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999104714131187	WITHOUT_CLASSIFICATION	8.952858688128894E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998697355678415	WITHOUT_CLASSIFICATION	1.302644321585237E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9994778275748841	WITHOUT_CLASSIFICATION	5.221724251157934E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955579353893	WITHOUT_CLASSIFICATION	1.0444206461078242E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996318188298536	WITHOUT_CLASSIFICATION	3.681811701463587E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996318188298536	WITHOUT_CLASSIFICATION	3.681811701463587E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996318188298536	WITHOUT_CLASSIFICATION	3.681811701463587E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996318188298536	WITHOUT_CLASSIFICATION	3.681811701463587E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999091711770141	WITHOUT_CLASSIFICATION	9.082882298599305E-5	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999825659448463	WITHOUT_CLASSIFICATION	1.7434055153696217E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998323136791855	WITHOUT_CLASSIFICATION	1.676863208145445E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9994086832689826	WITHOUT_CLASSIFICATION	5.913167310173489E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999939684704065	WITHOUT_CLASSIFICATION	6.03152959350415E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998869423820278	WITHOUT_CLASSIFICATION	1.1305761797218282E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999145153388157	WITHOUT_CLASSIFICATION	8.548466118431179E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999985066551724	WITHOUT_CLASSIFICATION	1.4933448276023634E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999904912573485	WITHOUT_CLASSIFICATION	9.508742651507476E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999919932918938	WITHOUT_CLASSIFICATION	8.006708106299498E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999454993045327	WITHOUT_CLASSIFICATION	5.450069546719383E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999580414047432	WITHOUT_CLASSIFICATION	4.195859525680565E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998870369550625	WITHOUT_CLASSIFICATION	1.129630449373678E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999428258990839	WITHOUT_CLASSIFICATION	5.717410091609267E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999958721192536	WITHOUT_CLASSIFICATION	4.1278807464817925E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999958721192536	WITHOUT_CLASSIFICATION	4.1278807464817925E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999891423493427	WITHOUT_CLASSIFICATION	1.0857650657252912E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999706472935198	WITHOUT_CLASSIFICATION	2.9352706480194363E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999940993169235	WITHOUT_CLASSIFICATION	5.900683076404889E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998360166231414	WITHOUT_CLASSIFICATION	1.6398337685854817E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998360166231414	WITHOUT_CLASSIFICATION	1.6398337685854817E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999538664966716	WITHOUT_CLASSIFICATION	4.6133503328405455E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996954638035837	WITHOUT_CLASSIFICATION	3.045361964164047E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999295157056525	WITHOUT_CLASSIFICATION	7.048429434747672E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999963821049174	WITHOUT_CLASSIFICATION	3.617895082598681E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996134679446	WITHOUT_CLASSIFICATION	3.8653205533414523E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9986500335336246	WITHOUT_CLASSIFICATION	0.0013499664663753751	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998728873591866	WITHOUT_CLASSIFICATION	1.2711264081347094E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9995909087127418	WITHOUT_CLASSIFICATION	4.0909128725817167E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999987194287729	WITHOUT_CLASSIFICATION	1.2805712270938858E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998953722165188	WITHOUT_CLASSIFICATION	1.0462778348120578E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999359119498521	WITHOUT_CLASSIFICATION	6.408805014786577E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998409524454354	WITHOUT_CLASSIFICATION	1.5904755456472042E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998930887589087	WITHOUT_CLASSIFICATION	1.0691124109129049E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999761668852559	WITHOUT_CLASSIFICATION	2.3833114744036698E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999964261959129	WITHOUT_CLASSIFICATION	3.573804087164574E-6	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999748298315135	WITHOUT_CLASSIFICATION	2.517016848636924E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999996611145838	WITHOUT_CLASSIFICATION	3.3888541618802395E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999989156981516	WITHOUT_CLASSIFICATION	1.0843018484934273E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999725816004252	WITHOUT_CLASSIFICATION	2.7418399574776353E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999381922838005	WITHOUT_CLASSIFICATION	6.180771619950749E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9976776100255021	WITHOUT_CLASSIFICATION	0.0023223899744978693	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998896035704307	WITHOUT_CLASSIFICATION	1.1039642956941082E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998552443783024	WITHOUT_CLASSIFICATION	1.447556216974845E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999249541722152	WITHOUT_CLASSIFICATION	7.504582778475725E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999974618582592	WITHOUT_CLASSIFICATION	2.5381417408480275E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999928664341474	WITHOUT_CLASSIFICATION	7.133565852608168E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9988521232813183	WITHOUT_CLASSIFICATION	0.0011478767186816805	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999869260648082	WITHOUT_CLASSIFICATION	1.3073935191856464E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9967025444270274	WITHOUT_CLASSIFICATION	0.0032974555729724767	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995971671866172	WITHOUT_CLASSIFICATION	4.0283281338276825E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999977224794674	WITHOUT_CLASSIFICATION	2.2775205326080254E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999872910016981	WITHOUT_CLASSIFICATION	1.27089983018778E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999634381049519	WITHOUT_CLASSIFICATION	3.656189504807916E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9988486052764934	WITHOUT_CLASSIFICATION	0.001151394723506557	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999272460276314	WITHOUT_CLASSIFICATION	7.275397236859885E-5	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999445600505454	WITHOUT_CLASSIFICATION	5.54399494545605E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999943651574635	WITHOUT_CLASSIFICATION	5.634842536492307E-5	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999221034603963	WITHOUT_CLASSIFICATION	7.78965396037535E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997496120049457	WITHOUT_CLASSIFICATION	2.5038799505431393E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9995047562682898	WITHOUT_CLASSIFICATION	4.952437317101045E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999970609833826	WITHOUT_CLASSIFICATION	2.9390166173940966E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998940260688326	WITHOUT_CLASSIFICATION	1.0597393116735366E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999455288628848	WITHOUT_CLASSIFICATION	5.447113711522128E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999833683757539	WITHOUT_CLASSIFICATION	1.663162424616714E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999694887153671	WITHOUT_CLASSIFICATION	3.0511284632827764E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9980144256821601	WITHOUT_CLASSIFICATION	0.0019855743178397636	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992388438541236	WITHOUT_CLASSIFICATION	7.611561458763616E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9995438272742645	WITHOUT_CLASSIFICATION	4.561727257353884E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999710117338729	WITHOUT_CLASSIFICATION	2.8988266127036587E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998875869479061	WITHOUT_CLASSIFICATION	1.1241305209388984E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999757262895496	WITHOUT_CLASSIFICATION	2.4273710450437493E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999892887899422	WITHOUT_CLASSIFICATION	1.0711210057760551E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997962181617042	WITHOUT_CLASSIFICATION	2.037818382958885E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999812509549957	WITHOUT_CLASSIFICATION	1.8749045004308253E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998393146916116	WITHOUT_CLASSIFICATION	1.6068530838843624E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999300128979821	WITHOUT_CLASSIFICATION	6.998710201779999E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999182697279949	WITHOUT_CLASSIFICATION	8.17302720050541E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999540947201067	WITHOUT_CLASSIFICATION	4.5905279893413244E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998601483566477	WITHOUT_CLASSIFICATION	1.398516433523049E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9997535987150049	WITHOUT_CLASSIFICATION	2.4640128499512146E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999925379711883	WITHOUT_CLASSIFICATION	7.462028811721666E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999434016329887	WITHOUT_CLASSIFICATION	5.659836701130089E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999810375989919	WITHOUT_CLASSIFICATION	1.896240100805758E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999707914025395	WITHOUT_CLASSIFICATION	2.920859746057521E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999646736015176	WITHOUT_CLASSIFICATION	3.5326398482373705E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999839872770285	WITHOUT_CLASSIFICATION	1.6012722971435514E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999980122526007	WITHOUT_CLASSIFICATION	1.9877473993071843E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999688022559109	WITHOUT_CLASSIFICATION	3.1197744089054776E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998408529663427	WITHOUT_CLASSIFICATION	1.5914703365733766E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999966884077047	WITHOUT_CLASSIFICATION	3.3115922952631053E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999841570176874	WITHOUT_CLASSIFICATION	1.5842982312637114E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9995589669315827	WITHOUT_CLASSIFICATION	4.410330684172467E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9997378046138824	WITHOUT_CLASSIFICATION	2.6219538611761445E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999981571408941	WITHOUT_CLASSIFICATION	1.842859105935124E-6	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998573669302069	WITHOUT_CLASSIFICATION	1.4263306979317764E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999664555194581	WITHOUT_CLASSIFICATION	3.354448054189492E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9997079309702586	WITHOUT_CLASSIFICATION	2.920690297415172E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998648917491413	WITHOUT_CLASSIFICATION	1.351082508587144E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999419271807285	WITHOUT_CLASSIFICATION	5.807281927149167E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999573899613639	WITHOUT_CLASSIFICATION	4.261003863609202E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999729352465464	WITHOUT_CLASSIFICATION	2.7064753453635302E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999807252762979	WITHOUT_CLASSIFICATION	1.927472370220833E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9990913539093187	WITHOUT_CLASSIFICATION	9.08646090681233E-4	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998240079678565	WITHOUT_CLASSIFICATION	1.7599203214352485E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996536439790488	WITHOUT_CLASSIFICATION	3.4635602095128793E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999789815764704	WITHOUT_CLASSIFICATION	2.101842352960197E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999544358216351	WITHOUT_CLASSIFICATION	4.556417836489661E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9982331403296878	WITHOUT_CLASSIFICATION	0.0017668596703121606	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999605110716545	WITHOUT_CLASSIFICATION	3.948892834559991E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999927547859103	WITHOUT_CLASSIFICATION	7.245214089733014E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999971374658128	WITHOUT_CLASSIFICATION	2.862534187207431E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999372860886193	WITHOUT_CLASSIFICATION	6.271391138072135E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999571950160162	WITHOUT_CLASSIFICATION	4.280498398387303E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999748520312552	WITHOUT_CLASSIFICATION	2.514796874483318E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998585165504229	WITHOUT_CLASSIFICATION	1.4148344957707647E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998585165504229	WITHOUT_CLASSIFICATION	1.4148344957707647E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999533310173061	WITHOUT_CLASSIFICATION	4.6668982693857516E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991445964541844	WITHOUT_CLASSIFICATION	8.554035458155669E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998749369178863	WITHOUT_CLASSIFICATION	1.2506308211378316E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9980665252029444	WITHOUT_CLASSIFICATION	0.0019334747970556055	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9997877524528027	WITHOUT_CLASSIFICATION	2.1224754719720298E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999162121150039	WITHOUT_CLASSIFICATION	8.378788499609818E-4	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998951415361359	WITHOUT_CLASSIFICATION	1.0485846386413842E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999780120129854	WITHOUT_CLASSIFICATION	2.1987987014549086E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991948743087095	WITHOUT_CLASSIFICATION	8.051256912905782E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999921706864473	WITHOUT_CLASSIFICATION	7.829313552787725E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9993104145227296	WITHOUT_CLASSIFICATION	6.895854772703493E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999555533620688	WITHOUT_CLASSIFICATION	4.44466379311948E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999810801752282	WITHOUT_CLASSIFICATION	1.891982477175089E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997739219221352	WITHOUT_CLASSIFICATION	2.2607807786470478E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999736986905684	WITHOUT_CLASSIFICATION	2.6301309431632326E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9961018654275822	WITHOUT_CLASSIFICATION	0.003898134572417729	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9961018654275822	WITHOUT_CLASSIFICATION	0.003898134572417729	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999467861680327	WITHOUT_CLASSIFICATION	5.321383196727171E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997569859966304	WITHOUT_CLASSIFICATION	2.4301400336952452E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999939326384661	WITHOUT_CLASSIFICATION	6.067361533957744E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999565440030823	WITHOUT_CLASSIFICATION	4.3455996917714304E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999985920213242	WITHOUT_CLASSIFICATION	1.4079786758083414E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999896542853001	WITHOUT_CLASSIFICATION	1.0345714700000187E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999896542853001	WITHOUT_CLASSIFICATION	1.0345714700000187E-5	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999358233914306	WITHOUT_CLASSIFICATION	6.417660856933035E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999753123122308	WITHOUT_CLASSIFICATION	2.4687687769159335E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999752917820356	WITHOUT_CLASSIFICATION	2.4708217964423448E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9972287796604662	WITHOUT_CLASSIFICATION	0.002771220339533797	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999964348515742	WITHOUT_CLASSIFICATION	3.565148425797191E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999621979467151	WITHOUT_CLASSIFICATION	3.780205328490576E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999504149961532	WITHOUT_CLASSIFICATION	4.958500384666123E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999776895084341	WITHOUT_CLASSIFICATION	2.2310491565984886E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9971544890196596	WITHOUT_CLASSIFICATION	0.002845510980340375	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996007339755599	WITHOUT_CLASSIFICATION	3.992660244400995E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999515125452805	WITHOUT_CLASSIFICATION	4.848745471964087E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999053726308371	WITHOUT_CLASSIFICATION	9.462736916283909E-5	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999478551063542	WITHOUT_CLASSIFICATION	5.21448936459253E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996278738747332	WITHOUT_CLASSIFICATION	3.7212612526685025E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9987796034364631	WITHOUT_CLASSIFICATION	0.0012203965635370006	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999594295161461	WITHOUT_CLASSIFICATION	4.057048385389136E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9947119042473747	WITHOUT_CLASSIFICATION	0.0052880957526253505	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997582215676541	WITHOUT_CLASSIFICATION	2.417784323460102E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998825675779041	WITHOUT_CLASSIFICATION	1.1743242209586519E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998973290571688	WITHOUT_CLASSIFICATION	1.0267094283125695E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999577621054295	WITHOUT_CLASSIFICATION	4.2237894570551474E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999747477200117	WITHOUT_CLASSIFICATION	2.5252279988337275E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999076292989107	WITHOUT_CLASSIFICATION	9.237070108927573E-5	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997916116652886	WITHOUT_CLASSIFICATION	2.0838833471138578E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999943202252436	WITHOUT_CLASSIFICATION	5.679774756511563E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999997340604257	WITHOUT_CLASSIFICATION	2.659395742137746E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999364530791967	WITHOUT_CLASSIFICATION	6.354692080332873E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999889618264107	WITHOUT_CLASSIFICATION	1.1038173589282834E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997991729735893	WITHOUT_CLASSIFICATION	2.0082702641061306E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.999887119932136	WITHOUT_CLASSIFICATION	1.1288006786404036E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9545656499161925	WITHOUT_CLASSIFICATION	0.045434350083807494	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9977557384914542	WITHOUT_CLASSIFICATION	0.0022442615085458348	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999072042362276	WITHOUT_CLASSIFICATION	9.279576377241422E-5	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997507039203152	WITHOUT_CLASSIFICATION	2.4929607968489793E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.999904097305004	WITHOUT_CLASSIFICATION	9.590269499605641E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999452809033321	WITHOUT_CLASSIFICATION	5.4719096667868116E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999715577571078	WITHOUT_CLASSIFICATION	2.8442242892168814E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995786039955369	WITHOUT_CLASSIFICATION	4.2139600446308896E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999446981973267	WITHOUT_CLASSIFICATION	5.5301802673385574E-5	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999817655906298	WITHOUT_CLASSIFICATION	1.8234409370234907E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.996433834531543	WITHOUT_CLASSIFICATION	0.003566165468456941	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9995856335014095	WITHOUT_CLASSIFICATION	4.1436649859050156E-4	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999639491862016	WITHOUT_CLASSIFICATION	3.6050813798395515E-5	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994634648833606	WITHOUT_CLASSIFICATION	5.36535116639393E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999715577571078	WITHOUT_CLASSIFICATION	2.8442242892168814E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995786039955369	WITHOUT_CLASSIFICATION	4.2139600446308896E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993880906479327	WITHOUT_CLASSIFICATION	6.119093520673497E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998405004039832	WITHOUT_CLASSIFICATION	1.5949959601682225E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999986858270958	WITHOUT_CLASSIFICATION	1.3141729041370891E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998017482271605	WITHOUT_CLASSIFICATION	1.9825177283954443E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998743889070343	WITHOUT_CLASSIFICATION	1.2561109296573773E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9992653310960988	WITHOUT_CLASSIFICATION	7.346689039012218E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999633748300992	WITHOUT_CLASSIFICATION	3.66251699007509E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9997941141605449	WITHOUT_CLASSIFICATION	2.0588583945511268E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999672828125753	WITHOUT_CLASSIFICATION	3.27171874246269E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999827786387006	WITHOUT_CLASSIFICATION	1.722136129947411E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9995982541973307	WITHOUT_CLASSIFICATION	4.0174580266918715E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999827786387006	WITHOUT_CLASSIFICATION	1.722136129947411E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9997825441391038	WITHOUT_CLASSIFICATION	2.1745586089610172E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997261063340472	WITHOUT_CLASSIFICATION	2.7389366595278916E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9997825441391038	WITHOUT_CLASSIFICATION	2.1745586089610172E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998074076442526	WITHOUT_CLASSIFICATION	1.925923557474421E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9952279725601134	WITHOUT_CLASSIFICATION	0.004772027439886549	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9996805733528783	WITHOUT_CLASSIFICATION	3.194266471217186E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9996805733528783	WITHOUT_CLASSIFICATION	3.194266471217186E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9994001206431434	WITHOUT_CLASSIFICATION	5.998793568564722E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9994021310642309	WITHOUT_CLASSIFICATION	5.978689357690255E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9994001206431434	WITHOUT_CLASSIFICATION	5.998793568564722E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999851649085238	WITHOUT_CLASSIFICATION	1.4835091476193826E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999479991032993	WITHOUT_CLASSIFICATION	5.20008967006627E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998917888181077	WITHOUT_CLASSIFICATION	1.0821118189241714E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998275107940906	WITHOUT_CLASSIFICATION	1.724892059094954E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998563225643431	WITHOUT_CLASSIFICATION	1.4367743565699755E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9998934934467816	WITHOUT_CLASSIFICATION	1.065065532184649E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999449982869379	WITHOUT_CLASSIFICATION	5.500171306210142E-4	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999645374309972	WITHOUT_CLASSIFICATION	3.5462569002837306E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998510145933142	WITHOUT_CLASSIFICATION	1.4898540668586798E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999776159781127	WITHOUT_CLASSIFICATION	2.2384021887293953E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999635100997596	WITHOUT_CLASSIFICATION	3.648990024034214E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999787742473029	WITHOUT_CLASSIFICATION	2.122575269709368E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999564694550643	WITHOUT_CLASSIFICATION	4.353054493568347E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999501711973833	WITHOUT_CLASSIFICATION	4.982880261673242E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998998572872769	WITHOUT_CLASSIFICATION	1.0014271272306885E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997492158963712	WITHOUT_CLASSIFICATION	2.507841036288178E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998850401378596	WITHOUT_CLASSIFICATION	1.1495986214041128E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9997250824623447	WITHOUT_CLASSIFICATION	2.7491753765523957E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998747080363191	WITHOUT_CLASSIFICATION	1.2529196368100062E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998715891189899	WITHOUT_CLASSIFICATION	1.2841088101005725E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998910195104156	WITHOUT_CLASSIFICATION	1.0898048958433046E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9989814113489325	WITHOUT_CLASSIFICATION	0.0010185886510675481	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9995916649394674	WITHOUT_CLASSIFICATION	4.0833506053261854E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998917888181077	WITHOUT_CLASSIFICATION	1.0821118189241714E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999395985817531	WITHOUT_CLASSIFICATION	6.040141824686407E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999422194756996	WITHOUT_CLASSIFICATION	5.77805243004525E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986909276439146	WITHOUT_CLASSIFICATION	0.0013090723560853386	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9998902701022874	WITHOUT_CLASSIFICATION	1.0972989771262939E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999834450988616	WITHOUT_CLASSIFICATION	1.6554901138343614E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999878214312498	WITHOUT_CLASSIFICATION	1.2178568750159683E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999851649085238	WITHOUT_CLASSIFICATION	1.4835091476193826E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999851649085238	WITHOUT_CLASSIFICATION	1.4835091476193826E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999342424029076	WITHOUT_CLASSIFICATION	6.57575970924031E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999873517949521	WITHOUT_CLASSIFICATION	1.2648205047890085E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997365805583431	WITHOUT_CLASSIFICATION	2.634194416569034E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999682478142795	WITHOUT_CLASSIFICATION	3.175218572050026E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987434711338816	WITHOUT_CLASSIFICATION	0.0012565288661183945	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9991484563861557	WITHOUT_CLASSIFICATION	8.515436138443375E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9991454826236026	WITHOUT_CLASSIFICATION	8.545173763972792E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999790565117888	WITHOUT_CLASSIFICATION	2.0943488211214683E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999805882891969	WITHOUT_CLASSIFICATION	1.941171080308479E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997981252818607	WITHOUT_CLASSIFICATION	2.0187471813927393E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998510145933142	WITHOUT_CLASSIFICATION	1.4898540668586798E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999357286550519	WITHOUT_CLASSIFICATION	6.427134494819813E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997981252818607	WITHOUT_CLASSIFICATION	2.0187471813927393E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999962868490078	WITHOUT_CLASSIFICATION	3.713150992203621E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999754704944475	WITHOUT_CLASSIFICATION	2.4529505552563756E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999265373123329	WITHOUT_CLASSIFICATION	7.346268766706679E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9991209027974605	WITHOUT_CLASSIFICATION	8.790972025395048E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996471387781771	WITHOUT_CLASSIFICATION	3.5286122182282155E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9993716893407418	WITHOUT_CLASSIFICATION	6.283106592582327E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999820164472648	WITHOUT_CLASSIFICATION	1.7983552735211958E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998743139661085	WITHOUT_CLASSIFICATION	1.2568603389152103E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999551331216657	WITHOUT_CLASSIFICATION	4.4866878334322605E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999429417905609	WITHOUT_CLASSIFICATION	5.7058209439200156E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996500579752343	WITHOUT_CLASSIFICATION	3.4994202476561784E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999626068026934	WITHOUT_CLASSIFICATION	3.739319730663615E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997981252818607	WITHOUT_CLASSIFICATION	2.0187471813927393E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996471387781771	WITHOUT_CLASSIFICATION	3.5286122182282155E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999820164472648	WITHOUT_CLASSIFICATION	1.7983552735211958E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997695138070781	WITHOUT_CLASSIFICATION	2.3048619292196832E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999761200516954	WITHOUT_CLASSIFICATION	2.3879948304583486E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999612384690606	WITHOUT_CLASSIFICATION	3.87615309394003E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999288080994911	WITHOUT_CLASSIFICATION	7.119190050882837E-5	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999615240821262	WITHOUT_CLASSIFICATION	3.847591787377322E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999498045647075	WITHOUT_CLASSIFICATION	5.019543529248632E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999962868490078	WITHOUT_CLASSIFICATION	3.713150992203621E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997786098399255	WITHOUT_CLASSIFICATION	2.213901600744143E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999535262094943	WITHOUT_CLASSIFICATION	4.64737905057508E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999704692238434	WITHOUT_CLASSIFICATION	2.953077615663421E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999813939333101	WITHOUT_CLASSIFICATION	1.8606066689960846E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999809029168665	WITHOUT_CLASSIFICATION	1.9097083133573048E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999583857913639	WITHOUT_CLASSIFICATION	4.161420863608405E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998074076442526	WITHOUT_CLASSIFICATION	1.925923557474421E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998463515777187	WITHOUT_CLASSIFICATION	1.5364842228124298E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999919007401643	WITHOUT_CLASSIFICATION	8.099259835693677E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9974716638300304	WITHOUT_CLASSIFICATION	0.002528336169969659	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9984702837869487	WITHOUT_CLASSIFICATION	0.0015297162130512637	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9987276001907743	WITHOUT_CLASSIFICATION	0.0012723998092256153	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996768049526078	WITHOUT_CLASSIFICATION	3.23195047392159E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9998214779417902	WITHOUT_CLASSIFICATION	1.7852205820973575E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999827795728238	WITHOUT_CLASSIFICATION	1.722042717619813E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999498045647075	WITHOUT_CLASSIFICATION	5.019543529248632E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998870138236026	WITHOUT_CLASSIFICATION	1.1298617639742697E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999339185817303	WITHOUT_CLASSIFICATION	6.608141826968413E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999043352364744	WITHOUT_CLASSIFICATION	9.566476352571783E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999915017978094	WITHOUT_CLASSIFICATION	8.498202190601619E-5	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996813147594029	WITHOUT_CLASSIFICATION	3.186852405970382E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998571300551528	WITHOUT_CLASSIFICATION	1.4286994484715335E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999590448807302	WITHOUT_CLASSIFICATION	4.0955119269870324E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9950703696797693	WITHOUT_CLASSIFICATION	0.004929630320230766	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999088612402922	WITHOUT_CLASSIFICATION	9.113875970774849E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999965637955855	WITHOUT_CLASSIFICATION	3.43620441450315E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999342249102448	WITHOUT_CLASSIFICATION	6.577508975525724E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997761523019449	WITHOUT_CLASSIFICATION	2.2384769805493991E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999685784211846	WITHOUT_CLASSIFICATION	3.1421578815469746E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999943323005657	WITHOUT_CLASSIFICATION	5.6676994342911644E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9991612096245319	WITHOUT_CLASSIFICATION	8.387903754679683E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999946233706329	WITHOUT_CLASSIFICATION	5.376629366975033E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999864213010514	WITHOUT_CLASSIFICATION	1.3578698948549918E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996147585957375	WITHOUT_CLASSIFICATION	3.852414042626608E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999582614902941	WITHOUT_CLASSIFICATION	4.173850970586531E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999447555406975	WITHOUT_CLASSIFICATION	5.5244459302376306E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999161097601108	WITHOUT_CLASSIFICATION	8.389023988918553E-5	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999567711640123	WITHOUT_CLASSIFICATION	4.3228835987592045E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9609136543279533	WITHOUT_CLASSIFICATION	0.039086345672046684	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999553440296144	WITHOUT_CLASSIFICATION	4.465597038563595E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997353267449103	WITHOUT_CLASSIFICATION	2.646732550897995E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997477272602232	WITHOUT_CLASSIFICATION	2.5227273977675705E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9978729370435568	WITHOUT_CLASSIFICATION	0.002127062956443163	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997825546416094	WITHOUT_CLASSIFICATION	2.1744535839055899E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9978035461847252	WITHOUT_CLASSIFICATION	0.0021964538152747623	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999510766648954	WITHOUT_CLASSIFICATION	4.89233351046038E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996793677642	WITHOUT_CLASSIFICATION	3.2063223573680997E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996299593536949	WITHOUT_CLASSIFICATION	3.700406463050119E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9998843192628657	WITHOUT_CLASSIFICATION	1.1568073713438835E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999632489093344	WITHOUT_CLASSIFICATION	3.675109066546962E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9965847004568648	WITHOUT_CLASSIFICATION	0.0034152995431353354	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9998843192628657	WITHOUT_CLASSIFICATION	1.1568073713438835E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996299593536949	WITHOUT_CLASSIFICATION	3.700406463050119E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999632489093344	WITHOUT_CLASSIFICATION	3.675109066546962E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999204468938964	WITHOUT_CLASSIFICATION	7.955310610362948E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999681021404724	WITHOUT_CLASSIFICATION	3.189785952757325E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995161647907459	WITHOUT_CLASSIFICATION	4.838352092540265E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999120031431697	WITHOUT_CLASSIFICATION	8.799685683028793E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999742856519038	WITHOUT_CLASSIFICATION	2.5714348096193358E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9397636968690974	WITHOUT_CLASSIFICATION	0.06023630313090261	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9995473508919501	WITHOUT_CLASSIFICATION	4.52649108049829E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998068223886355	WITHOUT_CLASSIFICATION	1.9317761136446697E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999996524999165	WITHOUT_CLASSIFICATION	3.4750008345766846E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9977784413050921	WITHOUT_CLASSIFICATION	0.002221558694908009	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999543124706457	WITHOUT_CLASSIFICATION	4.5687529354213856E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999056221574608	WITHOUT_CLASSIFICATION	9.437784253916416E-5	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999860046769232	WITHOUT_CLASSIFICATION	1.3995323076806395E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998012163812061	WITHOUT_CLASSIFICATION	1.9878361879389764E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999870952968551	WITHOUT_CLASSIFICATION	1.2904703144807613E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999868170844334	WITHOUT_CLASSIFICATION	1.3182915566629595E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992690504083201	WITHOUT_CLASSIFICATION	7.309495916799046E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999980142098851	WITHOUT_CLASSIFICATION	1.985790114859638E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997579694437954	WITHOUT_CLASSIFICATION	2.4203055620458834E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999552669487198	WITHOUT_CLASSIFICATION	4.473305128019976E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9984977996803525	WITHOUT_CLASSIFICATION	0.0015022003196475257	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999990156374354	WITHOUT_CLASSIFICATION	9.84362564632806E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999111440662182	WITHOUT_CLASSIFICATION	8.88559337818476E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999654885398733	WITHOUT_CLASSIFICATION	3.4511460126598656E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999527616059485	WITHOUT_CLASSIFICATION	4.7238394051570315E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999527616059485	WITHOUT_CLASSIFICATION	4.7238394051570315E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999918672620028	WITHOUT_CLASSIFICATION	8.132737997186438E-6	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999918672620028	WITHOUT_CLASSIFICATION	8.132737997186438E-6	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9997464354208566	WITHOUT_CLASSIFICATION	2.535645791433351E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992690504083201	WITHOUT_CLASSIFICATION	7.309495916799046E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999965070913065	WITHOUT_CLASSIFICATION	3.492908693497977E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999715542043924	WITHOUT_CLASSIFICATION	2.844579560749779E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999009639357305	WITHOUT_CLASSIFICATION	9.903606426964007E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999009639357305	WITHOUT_CLASSIFICATION	9.903606426964007E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999619721236828	WITHOUT_CLASSIFICATION	3.802787631713989E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998904969374595	WITHOUT_CLASSIFICATION	1.0950306254050333E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999520131686187	WITHOUT_CLASSIFICATION	4.798683138137271E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999775503360057	WITHOUT_CLASSIFICATION	2.244966399428131E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.999095853715859	WITHOUT_CLASSIFICATION	9.041462841410043E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999016565155726	WITHOUT_CLASSIFICATION	9.834348442739763E-5	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998626177286316	WITHOUT_CLASSIFICATION	1.373822713684513E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997676824202664	WITHOUT_CLASSIFICATION	2.323175797335863E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999298762414143	WITHOUT_CLASSIFICATION	7.012375858570436E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9994873717566696	WITHOUT_CLASSIFICATION	5.126282433303991E-4	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999452110345686	WITHOUT_CLASSIFICATION	5.47889654315506E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999164808817773	WITHOUT_CLASSIFICATION	8.351911822271071E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999914976711711	WITHOUT_CLASSIFICATION	8.502328828899348E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999361351019767	WITHOUT_CLASSIFICATION	6.386489802333249E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998920247189216	WITHOUT_CLASSIFICATION	1.0797528107836128E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998943531834138	WITHOUT_CLASSIFICATION	1.056468165861706E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155594454744	WITHOUT_CLASSIFICATION	8.444055452564086E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999614005767729	WITHOUT_CLASSIFICATION	3.8599423227217596E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999399222005216	WITHOUT_CLASSIFICATION	6.0077799478472615E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9979459018574127	WITHOUT_CLASSIFICATION	0.002054098142587294	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999432726196236	WITHOUT_CLASSIFICATION	5.672738037652233E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9980361637668831	WITHOUT_CLASSIFICATION	0.0019638362331168887	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998438432871717	WITHOUT_CLASSIFICATION	1.5615671282829887E-4	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999649886343995	WITHOUT_CLASSIFICATION	3.5011365600431515E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997052844339626	WITHOUT_CLASSIFICATION	2.9471556603747197E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999832679639995	WITHOUT_CLASSIFICATION	1.6732036000499388E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999965637955855	WITHOUT_CLASSIFICATION	3.43620441450315E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998592637175282	WITHOUT_CLASSIFICATION	1.4073628247173389E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9986178608491567	WITHOUT_CLASSIFICATION	0.0013821391508433232	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998715235720762	WITHOUT_CLASSIFICATION	1.284764279237757E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998700326534414	WITHOUT_CLASSIFICATION	1.299673465585293E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999885224407987	WITHOUT_CLASSIFICATION	1.1477559201295813E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999885224407987	WITHOUT_CLASSIFICATION	1.1477559201295813E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999792972973957	WITHOUT_CLASSIFICATION	2.070270260439824E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.999976348103412	WITHOUT_CLASSIFICATION	2.3651896588026276E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999633213163409	WITHOUT_CLASSIFICATION	3.667868365911807E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999633213163409	WITHOUT_CLASSIFICATION	3.667868365911807E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997582929231311	WITHOUT_CLASSIFICATION	2.4170707686882245E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994438842427751	WITHOUT_CLASSIFICATION	5.561157572248723E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9987687844031486	WITHOUT_CLASSIFICATION	0.0012312155968513972	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999365087889803	WITHOUT_CLASSIFICATION	6.34912110196375E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.99989797781352	WITHOUT_CLASSIFICATION	1.0202218648003925E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998749153382144	WITHOUT_CLASSIFICATION	1.250846617856881E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999691744512447	WITHOUT_CLASSIFICATION	3.082554875526052E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999452201126947	WITHOUT_CLASSIFICATION	5.4779887305154724E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999452201126947	WITHOUT_CLASSIFICATION	5.4779887305154724E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.99998175137441	WITHOUT_CLASSIFICATION	1.8248625589984582E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999300684838547	WITHOUT_CLASSIFICATION	6.993151614540457E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999300684838547	WITHOUT_CLASSIFICATION	6.993151614540457E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999698018898378	WITHOUT_CLASSIFICATION	3.0198110162326365E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999944775222256	WITHOUT_CLASSIFICATION	5.522477774403859E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999860728128873	WITHOUT_CLASSIFICATION	1.3927187112669433E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999816111305121	WITHOUT_CLASSIFICATION	1.8388869487942055E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999657175040829	WITHOUT_CLASSIFICATION	3.428249591710502E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9972796015637669	WITHOUT_CLASSIFICATION	0.002720398436233024	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999661120965524	WITHOUT_CLASSIFICATION	3.388790344760981E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998886616849538	WITHOUT_CLASSIFICATION	1.1133831504614341E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9986220577579134	WITHOUT_CLASSIFICATION	0.0013779422420866641	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9981532891825299	WITHOUT_CLASSIFICATION	0.0018467108174701704	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999683265600835	WITHOUT_CLASSIFICATION	3.167343991661701E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998873306760339	WITHOUT_CLASSIFICATION	1.1266932396609476E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998873306760339	WITHOUT_CLASSIFICATION	1.1266932396609476E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998873306760339	WITHOUT_CLASSIFICATION	1.1266932396609476E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998873306760339	WITHOUT_CLASSIFICATION	1.1266932396609476E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999406714623387	WITHOUT_CLASSIFICATION	5.9328537661363495E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9961441000167466	WITHOUT_CLASSIFICATION	0.003855899983253403	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999163305335294	WITHOUT_CLASSIFICATION	8.366946647071076E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998835900175704	WITHOUT_CLASSIFICATION	1.1640998242956233E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9986059510918663	WITHOUT_CLASSIFICATION	0.001394048908133583	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999915721851714	WITHOUT_CLASSIFICATION	8.427814828595729E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997215962164993	WITHOUT_CLASSIFICATION	2.784037835006617E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999059030377482	WITHOUT_CLASSIFICATION	9.40969622518139E-5	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999914513034124	WITHOUT_CLASSIFICATION	8.548696587587216E-5	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999568164854402	WITHOUT_CLASSIFICATION	4.31835145597281E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999410947636757	WITHOUT_CLASSIFICATION	5.8905236324304993E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999688875698674	WITHOUT_CLASSIFICATION	3.111243013259419E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997907459821185	WITHOUT_CLASSIFICATION	2.0925401788148576E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999951836735119	WITHOUT_CLASSIFICATION	4.81632648813884E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999410947636757	WITHOUT_CLASSIFICATION	5.8905236324304993E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999443331557385	WITHOUT_CLASSIFICATION	5.566684426146436E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997631020185511	WITHOUT_CLASSIFICATION	2.3689798144892212E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999997652521857	WITHOUT_CLASSIFICATION	2.3474781430230677E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997592373220267	WITHOUT_CLASSIFICATION	2.4076267797333215E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998721659379275	WITHOUT_CLASSIFICATION	1.2783406207261268E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9988580528301501	WITHOUT_CLASSIFICATION	0.001141947169850017	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999854264724154	WITHOUT_CLASSIFICATION	1.4573527584661598E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999263027641879	WITHOUT_CLASSIFICATION	7.369723581209528E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829008945271	WITHOUT_CLASSIFICATION	1.7099105472898265E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998759995417559	WITHOUT_CLASSIFICATION	1.2400045824415934E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829008945271	WITHOUT_CLASSIFICATION	1.7099105472898265E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999158009625134	WITHOUT_CLASSIFICATION	8.419903748661571E-5	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9967365951729698	WITHOUT_CLASSIFICATION	0.0032634048270301537	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998409161064751	WITHOUT_CLASSIFICATION	1.5908389352492928E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998534155716314	WITHOUT_CLASSIFICATION	1.465844283686138E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997128245268202	WITHOUT_CLASSIFICATION	2.8717547317981773E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999965522751338	WITHOUT_CLASSIFICATION	3.447724866258732E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999917296289706	WITHOUT_CLASSIFICATION	8.270371029393707E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999424015193543	WITHOUT_CLASSIFICATION	5.75984806456864E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999917296289706	WITHOUT_CLASSIFICATION	8.270371029393707E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.99990592840185	WITHOUT_CLASSIFICATION	9.407159815000139E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999820906559993	WITHOUT_CLASSIFICATION	1.790934400073191E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999593713526223	WITHOUT_CLASSIFICATION	4.062864737763904E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999846188839993	WITHOUT_CLASSIFICATION	1.538111600076678E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999965522751338	WITHOUT_CLASSIFICATION	3.447724866258732E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999424015193543	WITHOUT_CLASSIFICATION	5.75984806456864E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.99990592840185	WITHOUT_CLASSIFICATION	9.407159815000139E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999685431583261	WITHOUT_CLASSIFICATION	3.14568416739799E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9997691802334258	WITHOUT_CLASSIFICATION	2.3081976657430685E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9996750179942855	WITHOUT_CLASSIFICATION	3.249820057144509E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998566613203208	WITHOUT_CLASSIFICATION	1.4333867967919193E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998628194520979	WITHOUT_CLASSIFICATION	1.3718054790212125E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999957552434341	WITHOUT_CLASSIFICATION	4.244756565884238E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155594454744	WITHOUT_CLASSIFICATION	8.444055452564086E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999820906559993	WITHOUT_CLASSIFICATION	1.790934400073191E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999631106941209	WITHOUT_CLASSIFICATION	3.6889305879030735E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9995899952067688	WITHOUT_CLASSIFICATION	4.100047932312158E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999959393737172	WITHOUT_CLASSIFICATION	4.0606262827976814E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155594454744	WITHOUT_CLASSIFICATION	8.444055452564086E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999216756765189	WITHOUT_CLASSIFICATION	7.832432348107717E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155594454744	WITHOUT_CLASSIFICATION	8.444055452564086E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999878409662332	WITHOUT_CLASSIFICATION	1.2159033766867039E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999275366174551	WITHOUT_CLASSIFICATION	7.246338254491862E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998217988011007	WITHOUT_CLASSIFICATION	1.7820119889932316E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999814407521812	WITHOUT_CLASSIFICATION	1.8559247818798797E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999827504395548	WITHOUT_CLASSIFICATION	1.7249560445231392E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999331305380335	WITHOUT_CLASSIFICATION	6.686946196664057E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999558982540687	WITHOUT_CLASSIFICATION	4.410174593120751E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997250335527486	WITHOUT_CLASSIFICATION	2.7496644725149834E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999758449130559	WITHOUT_CLASSIFICATION	2.4155086944051586E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998773891120643	WITHOUT_CLASSIFICATION	1.226108879357956E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998743302184593	WITHOUT_CLASSIFICATION	1.2566978154068985E-4	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998771828456279	WITHOUT_CLASSIFICATION	1.2281715437203536E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9752747252508853	WITHOUT_CLASSIFICATION	0.02472527474911467	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998407202906084	WITHOUT_CLASSIFICATION	1.592797093916425E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9994715219530104	WITHOUT_CLASSIFICATION	5.284780469897082E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999971852640774	WITHOUT_CLASSIFICATION	2.8147359226062096E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999812512942103	WITHOUT_CLASSIFICATION	1.874870578976424E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9992853252739761	WITHOUT_CLASSIFICATION	7.14674726023832E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999914750111187	WITHOUT_CLASSIFICATION	8.524988881327318E-6	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998304905331509	WITHOUT_CLASSIFICATION	1.6950946684911962E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995430432864982	WITHOUT_CLASSIFICATION	4.569567135017242E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995430432864982	WITHOUT_CLASSIFICATION	4.569567135017242E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999761813491823	WITHOUT_CLASSIFICATION	2.3818650817741057E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999795492351935	WITHOUT_CLASSIFICATION	2.045076480650703E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9996530482360396	WITHOUT_CLASSIFICATION	3.4695176396041925E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999927697745485	WITHOUT_CLASSIFICATION	7.230225451429382E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997160347248787	WITHOUT_CLASSIFICATION	2.8396527512137643E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999358417599495	WITHOUT_CLASSIFICATION	6.415824005045855E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998508607748442	WITHOUT_CLASSIFICATION	1.4913922515583415E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992401251569877	WITHOUT_CLASSIFICATION	7.598748430123355E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9942698790389284	WITHOUT_CLASSIFICATION	0.005730120961071623	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999483242095587	WITHOUT_CLASSIFICATION	5.167579044132042E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998191137556063	WITHOUT_CLASSIFICATION	1.808862443936583E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9996286442075609	WITHOUT_CLASSIFICATION	3.7135579243906616E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998725505604675	WITHOUT_CLASSIFICATION	1.2744943953247912E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999654673148992	WITHOUT_CLASSIFICATION	3.453268510077216E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999962888990216	WITHOUT_CLASSIFICATION	3.7111009784726676E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997420898631904	WITHOUT_CLASSIFICATION	2.5791013680963944E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999911296368768	WITHOUT_CLASSIFICATION	8.870363123194045E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999911296368768	WITHOUT_CLASSIFICATION	8.870363123194045E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999705284361305	WITHOUT_CLASSIFICATION	2.9471563869462918E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997250335527486	WITHOUT_CLASSIFICATION	2.7496644725149834E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989846601915287	WITHOUT_CLASSIFICATION	0.0010153398084713219	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999809526092094	WITHOUT_CLASSIFICATION	1.904739079054639E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998850626280297	WITHOUT_CLASSIFICATION	1.149373719703128E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997615154820287	WITHOUT_CLASSIFICATION	2.3848451797133237E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999069812332294	WITHOUT_CLASSIFICATION	9.301876677060355E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.999661649389064	WITHOUT_CLASSIFICATION	3.3835061093601544E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999822157566053	WITHOUT_CLASSIFICATION	1.778424339463654E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999322399833983	WITHOUT_CLASSIFICATION	6.776001660171503E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999865092980312	WITHOUT_CLASSIFICATION	1.3490701968697167E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999325300682798	WITHOUT_CLASSIFICATION	6.746993172027525E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999608528447984	WITHOUT_CLASSIFICATION	3.914715520158702E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999511668554681	WITHOUT_CLASSIFICATION	4.883314453180801E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999997394620118	WITHOUT_CLASSIFICATION	2.6053798819452856E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998863699775594	WITHOUT_CLASSIFICATION	1.1363002244049335E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999858353402278	WITHOUT_CLASSIFICATION	1.4164659772216227E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999957769392956	WITHOUT_CLASSIFICATION	4.223060704383745E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999092285623811	WITHOUT_CLASSIFICATION	9.07714376188878E-5	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999992616538188	WITHOUT_CLASSIFICATION	7.383461812310938E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996803951368307	WITHOUT_CLASSIFICATION	3.196048631692913E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999448529040822	WITHOUT_CLASSIFICATION	5.514709591791825E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9936214162739425	WITHOUT_CLASSIFICATION	0.006378583726057388	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999823248813269	WITHOUT_CLASSIFICATION	1.7675118673203682E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999739180975734	WITHOUT_CLASSIFICATION	2.6081902426625946E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998686703846275	WITHOUT_CLASSIFICATION	1.3132961537257927E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9995371231964864	WITHOUT_CLASSIFICATION	4.6287680351357976E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996745977688115	WITHOUT_CLASSIFICATION	3.2540223118846293E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999982441620573	WITHOUT_CLASSIFICATION	1.7558379427030532E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9962998785569993	WITHOUT_CLASSIFICATION	0.0037001214430006004	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999871941346988	WITHOUT_CLASSIFICATION	1.280586530121134E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.99989567260349	WITHOUT_CLASSIFICATION	1.0432739650999044E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998885163665582	WITHOUT_CLASSIFICATION	1.1148363344177889E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998295342326692	WITHOUT_CLASSIFICATION	1.704657673309283E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999288335867191	WITHOUT_CLASSIFICATION	7.116641328089954E-4	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9983710227022015	WITHOUT_CLASSIFICATION	0.0016289772977985905	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9462764785267721	WITHOUT_CLASSIFICATION	0.05372352147322792	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999269911173895	WITHOUT_CLASSIFICATION	7.300888261050172E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999269911173895	WITHOUT_CLASSIFICATION	7.300888261050172E-5	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999610892725274	WITHOUT_CLASSIFICATION	3.891072747267706E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999722963591312	WITHOUT_CLASSIFICATION	2.77036408688882E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999932392167547	WITHOUT_CLASSIFICATION	6.760783245289991E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999932392167547	WITHOUT_CLASSIFICATION	6.760783245289991E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999900281495063	WITHOUT_CLASSIFICATION	9.971850493672086E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999419039476797	WITHOUT_CLASSIFICATION	5.809605232032652E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999930584717475	WITHOUT_CLASSIFICATION	6.941528252506798E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999985913504597	WITHOUT_CLASSIFICATION	1.4086495404160824E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998786208305114	WITHOUT_CLASSIFICATION	1.2137916948862331E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999918442096865	WITHOUT_CLASSIFICATION	8.155790313507004E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999918442096865	WITHOUT_CLASSIFICATION	8.155790313507004E-5	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998901056542934	WITHOUT_CLASSIFICATION	1.0989434570664608E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999851649085238	WITHOUT_CLASSIFICATION	1.4835091476193826E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999498132896312	WITHOUT_CLASSIFICATION	5.018671036881282E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999498132896312	WITHOUT_CLASSIFICATION	5.018671036881282E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999729302936711	WITHOUT_CLASSIFICATION	2.706970632882905E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999695786950822	WITHOUT_CLASSIFICATION	3.042130491775601E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999370346516476	WITHOUT_CLASSIFICATION	6.296534835239E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999895080578762	WITHOUT_CLASSIFICATION	1.0491942123774473E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999835285921433	WITHOUT_CLASSIFICATION	1.6471407856706174E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999539604779846	WITHOUT_CLASSIFICATION	4.603952201535422E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999299638858445	WITHOUT_CLASSIFICATION	7.003611415540172E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999807180532936	WITHOUT_CLASSIFICATION	1.9281946706364503E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999970474926708	WITHOUT_CLASSIFICATION	2.952507329192557E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998641763800928	WITHOUT_CLASSIFICATION	1.3582361990715155E-4	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998836358221821	WITHOUT_CLASSIFICATION	1.1636417781797284E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9977406103633707	WITHOUT_CLASSIFICATION	0.0022593896366292325	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999613997565017	WITHOUT_CLASSIFICATION	3.860024349838236E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999599751829666	WITHOUT_CLASSIFICATION	4.0024817033371556E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999558105453931	WITHOUT_CLASSIFICATION	4.418945460682145E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999654128628617	WITHOUT_CLASSIFICATION	3.458713713829854E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998656671283843	WITHOUT_CLASSIFICATION	1.343328716157007E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997592411208154	WITHOUT_CLASSIFICATION	2.407588791846296E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999601309757832	WITHOUT_CLASSIFICATION	3.9869024216862274E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997641717633624	WITHOUT_CLASSIFICATION	2.3582823663773568E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9995627084090245	WITHOUT_CLASSIFICATION	4.3729159097542807E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999043045709705	WITHOUT_CLASSIFICATION	9.569542902954373E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999702445106173	WITHOUT_CLASSIFICATION	2.9755489382673795E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9992956218026656	WITHOUT_CLASSIFICATION	7.04378197334412E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9996528744064551	WITHOUT_CLASSIFICATION	3.471255935449921E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999402435640091	WITHOUT_CLASSIFICATION	5.9756435990968035E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999615710614507	WITHOUT_CLASSIFICATION	3.842893854921636E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994325434495	WITHOUT_CLASSIFICATION	5.674565504518644E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999862128724631	WITHOUT_CLASSIFICATION	1.3787127536848875E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963144841956	WITHOUT_CLASSIFICATION	3.6855158043882827E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999979054706655	WITHOUT_CLASSIFICATION	2.0945293344958178E-5	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999887234004593	WITHOUT_CLASSIFICATION	1.1276599540720165E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999965022713915	WITHOUT_CLASSIFICATION	3.497728608468028E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998501485411434	WITHOUT_CLASSIFICATION	1.498514588566189E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999057828978013	WITHOUT_CLASSIFICATION	9.42171021986959E-5	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999262422067573	WITHOUT_CLASSIFICATION	7.375779324271443E-5	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999087560806913	WITHOUT_CLASSIFICATION	9.124391930869185E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9989517233997579	WITHOUT_CLASSIFICATION	0.0010482766002421057	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999614978898026	WITHOUT_CLASSIFICATION	3.8502110197446876E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999770756109767	WITHOUT_CLASSIFICATION	2.292438902322248E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9998923055680775	WITHOUT_CLASSIFICATION	1.0769443192251374E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999523947548075	WITHOUT_CLASSIFICATION	4.760524519259261E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9992772185934079	WITHOUT_CLASSIFICATION	7.227814065921631E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999816905661701	WITHOUT_CLASSIFICATION	1.8309433829868683E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999199915961158	WITHOUT_CLASSIFICATION	8.000840388420682E-5	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999693476510375	WITHOUT_CLASSIFICATION	3.065234896253802E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999876315436149	WITHOUT_CLASSIFICATION	1.2368456385103088E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999928818501453	WITHOUT_CLASSIFICATION	7.118149854545367E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999643398038066	WITHOUT_CLASSIFICATION	3.566019619341777E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999916461560936	WITHOUT_CLASSIFICATION	8.353843906439797E-6	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996573844059014	WITHOUT_CLASSIFICATION	3.426155940986879E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999966929850412	WITHOUT_CLASSIFICATION	3.3070149588067316E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9985088679151581	WITHOUT_CLASSIFICATION	0.0014911320848418072	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999437616906679	WITHOUT_CLASSIFICATION	5.623830933215852E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999086670425718	WITHOUT_CLASSIFICATION	9.133295742820962E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999933875851701	WITHOUT_CLASSIFICATION	6.612414829938387E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999759869269939	WITHOUT_CLASSIFICATION	2.401307300611258E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999759869269939	WITHOUT_CLASSIFICATION	2.401307300611258E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999923897301644	WITHOUT_CLASSIFICATION	7.61026983561979E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9995735938455068	WITHOUT_CLASSIFICATION	4.2640615449320284E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999936945393628	WITHOUT_CLASSIFICATION	6.305460637124461E-6	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999687423889351	WITHOUT_CLASSIFICATION	3.125761106492554E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999770154195446	WITHOUT_CLASSIFICATION	2.2984580455299595E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997259742979712	WITHOUT_CLASSIFICATION	2.740257020288456E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999945753091075	WITHOUT_CLASSIFICATION	5.42469089254172E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999702131727831	WITHOUT_CLASSIFICATION	2.978682721684144E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999764001466318	WITHOUT_CLASSIFICATION	2.3599853368193508E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999778811329042	WITHOUT_CLASSIFICATION	2.2118867095803535E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999799641177687	WITHOUT_CLASSIFICATION	2.0035882231394212E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9961588714058182	WITHOUT_CLASSIFICATION	0.003841128594181802	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996936381083	WITHOUT_CLASSIFICATION	3.0636189175380583E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999997138343749	WITHOUT_CLASSIFICATION	2.8616562505406864E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995828881726976	WITHOUT_CLASSIFICATION	4.171118273023566E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995828881726976	WITHOUT_CLASSIFICATION	4.171118273023566E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999355675351823	WITHOUT_CLASSIFICATION	6.443246481770213E-5	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9993455956156947	WITHOUT_CLASSIFICATION	6.544043843053857E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998804255068326	WITHOUT_CLASSIFICATION	1.1957449316737324E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999811801212932	WITHOUT_CLASSIFICATION	1.8819878706701888E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999911310989573	WITHOUT_CLASSIFICATION	8.868901042785056E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999270689523001	WITHOUT_CLASSIFICATION	7.293104769992734E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998121851342352	WITHOUT_CLASSIFICATION	1.8781486576468085E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.997245353212818	WITHOUT_CLASSIFICATION	0.00275464678718198	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999985736394821	WITHOUT_CLASSIFICATION	1.4263605179493436E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999760797094678	WITHOUT_CLASSIFICATION	2.3920290532196098E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999723331978901	WITHOUT_CLASSIFICATION	2.7666802109801314E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998969849552679	WITHOUT_CLASSIFICATION	1.0301504473207536E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999909278505584	WITHOUT_CLASSIFICATION	9.072149441611276E-6	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999724975712236	WITHOUT_CLASSIFICATION	2.750242877626838E-5	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998887315630874	WITHOUT_CLASSIFICATION	1.1126843691257573E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998784828253793	WITHOUT_CLASSIFICATION	1.2151717462083409E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999905128870499	WITHOUT_CLASSIFICATION	9.487112950148706E-6	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999680728948303	WITHOUT_CLASSIFICATION	3.19271051697728E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999711083191276	WITHOUT_CLASSIFICATION	2.8891680872348687E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999779918991291	WITHOUT_CLASSIFICATION	2.2008100871028354E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999364989594225	WITHOUT_CLASSIFICATION	6.350104057743571E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999930919716955	WITHOUT_CLASSIFICATION	6.908028304474039E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999863571028637	WITHOUT_CLASSIFICATION	1.3642897136381108E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998865033067946	WITHOUT_CLASSIFICATION	1.1349669320541137E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997870267502683	WITHOUT_CLASSIFICATION	2.1297324973160837E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999904112840474	WITHOUT_CLASSIFICATION	9.588715952609143E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999687109879705	WITHOUT_CLASSIFICATION	3.1289012029493454E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997380760192521	WITHOUT_CLASSIFICATION	2.6192398074787246E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9996647786650175	WITHOUT_CLASSIFICATION	3.3522133498259946E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998161354621456	WITHOUT_CLASSIFICATION	1.838645378543685E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997876464611067	WITHOUT_CLASSIFICATION	2.123535388932703E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999571722341483	WITHOUT_CLASSIFICATION	4.28277658517148E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999942301774497	WITHOUT_CLASSIFICATION	5.769822550272412E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997544705344555	WITHOUT_CLASSIFICATION	2.4552946554440356E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999533093201476	WITHOUT_CLASSIFICATION	4.66906798524981E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999162117753626	WITHOUT_CLASSIFICATION	8.378822463744908E-5	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999786698513701	WITHOUT_CLASSIFICATION	2.1330148629986405E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999773856522154	WITHOUT_CLASSIFICATION	2.2614347784601896E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998616246570748	WITHOUT_CLASSIFICATION	1.383753429252586E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999903100832848	WITHOUT_CLASSIFICATION	9.689916715259782E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9809614393899271	WITHOUT_CLASSIFICATION	0.019038560610072894	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9809614393899271	WITHOUT_CLASSIFICATION	0.019038560610072894	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999933856475929	WITHOUT_CLASSIFICATION	6.614352407155863E-6	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.868210692532728	WITHOUT_CLASSIFICATION	0.13178930746727208	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999927920287703	WITHOUT_CLASSIFICATION	7.20797122965754E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999724879341758	WITHOUT_CLASSIFICATION	2.7512065824241836E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999700432880722	WITHOUT_CLASSIFICATION	2.995671192780346E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9993927992698072	WITHOUT_CLASSIFICATION	6.072007301927678E-4	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999770212109134	WITHOUT_CLASSIFICATION	2.297878908661642E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997254147575115	WITHOUT_CLASSIFICATION	2.745852424883922E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9972695457283034	WITHOUT_CLASSIFICATION	0.0027304542716966723	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998348327236672	WITHOUT_CLASSIFICATION	1.6516727633271818E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165394662103	WITHOUT_CLASSIFICATION	8.346053378973026E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9988192668498574	WITHOUT_CLASSIFICATION	0.0011807331501426104	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9995617013969439	WITHOUT_CLASSIFICATION	4.3829860305614023E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999625603412495	WITHOUT_CLASSIFICATION	3.743965875048428E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997713671292602	WITHOUT_CLASSIFICATION	2.2863287073994335E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9997945407143983	WITHOUT_CLASSIFICATION	2.0545928560169064E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999764334608185	WITHOUT_CLASSIFICATION	2.356653918144448E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9992673425097817	WITHOUT_CLASSIFICATION	7.326574902182234E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994730524043722	WITHOUT_CLASSIFICATION	5.269475956278482E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9978533662902038	WITHOUT_CLASSIFICATION	0.002146633709796135	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999009877109425	WITHOUT_CLASSIFICATION	9.901228905752949E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999956328911274	WITHOUT_CLASSIFICATION	4.367108872606234E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999961404561114	WITHOUT_CLASSIFICATION	3.85954388861429E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998807606428981	WITHOUT_CLASSIFICATION	1.1923935710189516E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9996208424989117	WITHOUT_CLASSIFICATION	3.791575010882779E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999397799108943	WITHOUT_CLASSIFICATION	6.0220089105549805E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9996167906799804	WITHOUT_CLASSIFICATION	3.832093200195811E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9968721089205228	WITHOUT_CLASSIFICATION	0.0031278910794772	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999806084849087	WITHOUT_CLASSIFICATION	1.9391515091297063E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9995780875186281	WITHOUT_CLASSIFICATION	4.219124813719599E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999957160682403	WITHOUT_CLASSIFICATION	4.283931759734781E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999778803968657	WITHOUT_CLASSIFICATION	2.211960313428899E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9998918823613911	WITHOUT_CLASSIFICATION	1.0811763860884537E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997903122382675	WITHOUT_CLASSIFICATION	2.09687761732405E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999388021992378	WITHOUT_CLASSIFICATION	6.119780076225712E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995941017883787	WITHOUT_CLASSIFICATION	4.0589821162128893E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999897541645584	WITHOUT_CLASSIFICATION	1.0245835441594429E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999997398345628	WITHOUT_CLASSIFICATION	2.6016543720464103E-6	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999345300104759	WITHOUT_CLASSIFICATION	6.546998952396729E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999458399251625	WITHOUT_CLASSIFICATION	5.416007483748757E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998711912405067	WITHOUT_CLASSIFICATION	1.288087594933732E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9993925859397833	WITHOUT_CLASSIFICATION	6.074140602166428E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999500073519941	WITHOUT_CLASSIFICATION	4.9992648005961355E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999972916311523	WITHOUT_CLASSIFICATION	2.7083688477051273E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999993827949498	WITHOUT_CLASSIFICATION	6.172050501398174E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996064779046038	WITHOUT_CLASSIFICATION	3.935220953962212E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997987751068393	WITHOUT_CLASSIFICATION	2.0122489316058692E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996936381083	WITHOUT_CLASSIFICATION	3.0636189175380583E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9998717180367594	WITHOUT_CLASSIFICATION	1.282819632405268E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999993647260866	WITHOUT_CLASSIFICATION	6.352739134045918E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.99982342257572	WITHOUT_CLASSIFICATION	1.7657742427988943E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999244063256073	WITHOUT_CLASSIFICATION	7.55936743926841E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999985494483236	WITHOUT_CLASSIFICATION	1.4505516764603416E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9988870956220604	WITHOUT_CLASSIFICATION	0.0011129043779396742	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997100439955674	WITHOUT_CLASSIFICATION	2.899560044325711E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9390851905233385	WITHOUT_CLASSIFICATION	0.060914809476661606	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999919932918938	WITHOUT_CLASSIFICATION	8.006708106299498E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999664186377722	WITHOUT_CLASSIFICATION	3.358136222780306E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9854754392038941	WITHOUT_CLASSIFICATION	0.014524560796105864	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997929032735373	WITHOUT_CLASSIFICATION	0.002070967264627005	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999816779642416	WITHOUT_CLASSIFICATION	1.832203575834478E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9993982277948967	WITHOUT_CLASSIFICATION	6.017722051033183E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998189503030647	WITHOUT_CLASSIFICATION	1.8104969693526806E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997392636636817	WITHOUT_CLASSIFICATION	2.607363363183214E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999978459537759	WITHOUT_CLASSIFICATION	2.154046224103839E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9995515503018512	WITHOUT_CLASSIFICATION	4.484496981489073E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998189503030647	WITHOUT_CLASSIFICATION	1.8104969693526806E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9990223986769975	WITHOUT_CLASSIFICATION	9.776013230025566E-4	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999343601738981	WITHOUT_CLASSIFICATION	6.563982610178531E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999937647415565	WITHOUT_CLASSIFICATION	6.235258443402198E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9975246500861183	WITHOUT_CLASSIFICATION	0.002475349913881695	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998922992450133	WITHOUT_CLASSIFICATION	1.0770075498664457E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9971373681346313	WITHOUT_CLASSIFICATION	0.002862631865368708	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999885940612824	WITHOUT_CLASSIFICATION	1.1405938717653695E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999975117012185	WITHOUT_CLASSIFICATION	2.4882987814985103E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999916249559907	WITHOUT_CLASSIFICATION	8.375044009197903E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9901538570394977	WITHOUT_CLASSIFICATION	0.009846142960502414	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995967090548404	WITHOUT_CLASSIFICATION	4.032909451595584E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9922044289056636	WITHOUT_CLASSIFICATION	0.007795571094336304	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999128845710863	WITHOUT_CLASSIFICATION	8.71154289137277E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999765346921478	WITHOUT_CLASSIFICATION	2.346530785223267E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9995967523729222	WITHOUT_CLASSIFICATION	4.032476270777896E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9936214162739425	WITHOUT_CLASSIFICATION	0.006378583726057388	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9987474771153276	WITHOUT_CLASSIFICATION	0.0012525228846723981	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999770137362545	WITHOUT_CLASSIFICATION	2.298626374554774E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995744239413329	WITHOUT_CLASSIFICATION	4.255760586671101E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.996165324100615	WITHOUT_CLASSIFICATION	0.0038346758993849533	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999992962470508	WITHOUT_CLASSIFICATION	7.037529492072054E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999974277577118	WITHOUT_CLASSIFICATION	2.572242288193657E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9974184447504965	WITHOUT_CLASSIFICATION	0.0025815552495035234	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999712823568	WITHOUT_CLASSIFICATION	2.871764307478807E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999972591885836	WITHOUT_CLASSIFICATION	2.7408114163641996E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9998041361823978	WITHOUT_CLASSIFICATION	1.958638176020886E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9951893019481314	WITHOUT_CLASSIFICATION	0.004810698051868716	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999359119498521	WITHOUT_CLASSIFICATION	6.408805014786577E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9901708242347236	WITHOUT_CLASSIFICATION	0.00982917576527648	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999845226345176	WITHOUT_CLASSIFICATION	1.547736548234764E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999565819454999	WITHOUT_CLASSIFICATION	4.3418054500184385E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997254002779185	WITHOUT_CLASSIFICATION	2.7459972208158766E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9996143355790903	WITHOUT_CLASSIFICATION	3.856644209097743E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999638270956624	WITHOUT_CLASSIFICATION	3.6172904337546985E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999144655739	WITHOUT_CLASSIFICATION	8.553442610134117E-7	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.99999954666248	WITHOUT_CLASSIFICATION	4.5333752005252267E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9995314723109616	WITHOUT_CLASSIFICATION	4.6852768903838244E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999547025804016	WITHOUT_CLASSIFICATION	4.52974195983451E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999731433049148	WITHOUT_CLASSIFICATION	2.6856695085165893E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9996536439790488	WITHOUT_CLASSIFICATION	3.4635602095128793E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999021450031492	WITHOUT_CLASSIFICATION	9.785499685085551E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999021450031492	WITHOUT_CLASSIFICATION	9.785499685085551E-5	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999162121150039	WITHOUT_CLASSIFICATION	8.378788499609818E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999921706864473	WITHOUT_CLASSIFICATION	7.829313552787725E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999565440030823	WITHOUT_CLASSIFICATION	4.3455996917714304E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8098849927424366	WITHOUT_CLASSIFICATION	0.19011500725756322	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999365087889803	WITHOUT_CLASSIFICATION	6.34912110196375E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999365087889803	WITHOUT_CLASSIFICATION	6.34912110196375E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998948078983808	WITHOUT_CLASSIFICATION	1.0519210161910468E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9987796034364631	WITHOUT_CLASSIFICATION	0.0012203965635370006	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998463229142105	WITHOUT_CLASSIFICATION	1.5367708578950653E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999577621054295	WITHOUT_CLASSIFICATION	4.2237894570551474E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999877062020434	WITHOUT_CLASSIFICATION	1.2293797956679918E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9997084446569988	WITHOUT_CLASSIFICATION	2.91555343001267E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997930279567705	WITHOUT_CLASSIFICATION	2.0697204322953165E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999557534811598	WITHOUT_CLASSIFICATION	4.4246518840127365E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999849452120131	WITHOUT_CLASSIFICATION	1.5054787987047991E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998762491527864	WITHOUT_CLASSIFICATION	1.2375084721356146E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998762491527864	WITHOUT_CLASSIFICATION	1.2375084721356146E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997331552290082	WITHOUT_CLASSIFICATION	2.668447709918073E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999497600580537	WITHOUT_CLASSIFICATION	5.023994194629415E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999551331216657	WITHOUT_CLASSIFICATION	4.4866878334322605E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997705276072664	WITHOUT_CLASSIFICATION	2.2947239273366423E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999696560323743	WITHOUT_CLASSIFICATION	3.034396762565332E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998463515777187	WITHOUT_CLASSIFICATION	1.5364842228124298E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693932899796	WITHOUT_CLASSIFICATION	1.3060671002034576E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999824665129846	WITHOUT_CLASSIFICATION	1.7533487015398956E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999188055832305	WITHOUT_CLASSIFICATION	8.119441676946723E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9990957027686956	WITHOUT_CLASSIFICATION	9.042972313044109E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999755129435708	WITHOUT_CLASSIFICATION	2.4487056429118913E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9901538570394977	WITHOUT_CLASSIFICATION	0.009846142960502414	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999971590568442	WITHOUT_CLASSIFICATION	2.840943155851865E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9977349168348297	WITHOUT_CLASSIFICATION	0.002265083165170217	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999954328960512	WITHOUT_CLASSIFICATION	4.56710394879418E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998011287540182	WITHOUT_CLASSIFICATION	1.9887124598170559E-4	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999871581995988	WITHOUT_CLASSIFICATION	1.2841800401194186E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9997049771709791	WITHOUT_CLASSIFICATION	2.9502282902090806E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997413959147124	WITHOUT_CLASSIFICATION	2.586040852875725E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999930252914843	WITHOUT_CLASSIFICATION	6.974708515812242E-6	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995467693117376	WITHOUT_CLASSIFICATION	4.532306882623605E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983654140659938	WITHOUT_CLASSIFICATION	0.00163458593400625	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9983654140659938	WITHOUT_CLASSIFICATION	0.00163458593400625	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999410947636757	WITHOUT_CLASSIFICATION	5.8905236324304993E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999992584122811	WITHOUT_CLASSIFICATION	7.415877188511904E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998869850392978	WITHOUT_CLASSIFICATION	1.1301496070217882E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999792545683523	WITHOUT_CLASSIFICATION	2.0745431647700358E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999758512998453	WITHOUT_CLASSIFICATION	2.4148700154668428E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9996745866610631	WITHOUT_CLASSIFICATION	3.2541333893684504E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998534155716314	WITHOUT_CLASSIFICATION	1.465844283686138E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9993660369312085	WITHOUT_CLASSIFICATION	6.339630687915617E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999685431583261	WITHOUT_CLASSIFICATION	3.14568416739799E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999173951788445	WITHOUT_CLASSIFICATION	8.260482115554414E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155594454744	WITHOUT_CLASSIFICATION	8.444055452564086E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998854169575633	WITHOUT_CLASSIFICATION	1.1458304243682717E-4	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999875600288618	WITHOUT_CLASSIFICATION	1.2439971138321327E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999927704490011	WITHOUT_CLASSIFICATION	7.229550998930488E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999945307271839	WITHOUT_CLASSIFICATION	5.46927281598021E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999842023157498	WITHOUT_CLASSIFICATION	1.5797684250189476E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9997461637529331	WITHOUT_CLASSIFICATION	2.5383624706685695E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998570916551416	WITHOUT_CLASSIFICATION	1.429083448583893E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9991586594471176	WITHOUT_CLASSIFICATION	8.41340552882466E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.968771810653582	WITHOUT_CLASSIFICATION	0.031228189346418037	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9997376484136269	WITHOUT_CLASSIFICATION	2.6235158637311133E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999993590453785	WITHOUT_CLASSIFICATION	6.409546213916477E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999370346516476	WITHOUT_CLASSIFICATION	6.296534835239E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998310654864	WITHOUT_CLASSIFICATION	1.6893451351857038E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999924431898491	WITHOUT_CLASSIFICATION	7.556810150897499E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999924431898491	WITHOUT_CLASSIFICATION	7.556810150897499E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999840803387682	WITHOUT_CLASSIFICATION	1.591966123187298E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999526717972802	WITHOUT_CLASSIFICATION	4.732820271971096E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999857934609169	WITHOUT_CLASSIFICATION	1.420653908320686E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999209632640097	WITHOUT_CLASSIFICATION	7.903673599026295E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999846886545514	WITHOUT_CLASSIFICATION	1.5311345448618817E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998802122663158	WITHOUT_CLASSIFICATION	1.1978773368408985E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9905081053500366	WITHOUT_CLASSIFICATION	0.009491894649963365	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998495710679602	WITHOUT_CLASSIFICATION	1.5042893203983312E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.7507355497482466	DEFECT	0.24926445025175345	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.8714851401565344	WITHOUT_CLASSIFICATION	0.1285148598434656	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9996967944622261	WITHOUT_CLASSIFICATION	3.03205537773747E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9994944334716145	WITHOUT_CLASSIFICATION	5.055665283855068E-4	DEFECT
/*	DEFECT	0.9936633340792874	WITHOUT_CLASSIFICATION	0.006336665920712506	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9997025551322607	WITHOUT_CLASSIFICATION	2.974448677393106E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7612166144093476	DEFECT	0.2387833855906524	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9302885355665421	WITHOUT_CLASSIFICATION	0.06971146443345791	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8922840615562339	WITHOUT_CLASSIFICATION	0.10771593844376612	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9289865551061611	DEFECT	0.07101344489383889	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978599996879409	WITHOUT_CLASSIFICATION	0.002140000312059168	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978599996879409	WITHOUT_CLASSIFICATION	0.002140000312059168	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9781371938470211	WITHOUT_CLASSIFICATION	0.02186280615297884	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999833085751612	WITHOUT_CLASSIFICATION	1.6691424838873204E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8669271754122932	WITHOUT_CLASSIFICATION	0.1330728245877067	DEFECT
// this call is side-effecty	DEFECT	0.9997696755221498	WITHOUT_CLASSIFICATION	2.3032447785024425E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.6795196405813109	WITHOUT_CLASSIFICATION	0.320480359418689	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9991286225251268	WITHOUT_CLASSIFICATION	8.713774748732017E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9006925563507913	WITHOUT_CLASSIFICATION	0.09930744364920872	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9993855897969102	WITHOUT_CLASSIFICATION	6.144102030897989E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9908158372890951	WITHOUT_CLASSIFICATION	0.009184162710904907	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999687250423973	WITHOUT_CLASSIFICATION	3.127495760269938E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9356934649125253	WITHOUT_CLASSIFICATION	0.06430653508747487	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9986416058199377	WITHOUT_CLASSIFICATION	0.0013583941800623985	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.6446988046560107	DEFECT	0.3553011953439893	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9990999213467895	DEFECT	9.000786532106551E-4	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.7211864261048623	DEFECT	0.2788135738951379	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.6287670563623238	WITHOUT_CLASSIFICATION	0.3712329436376762	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.886208904824478	WITHOUT_CLASSIFICATION	0.11379109517552208	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9500093102758865	WITHOUT_CLASSIFICATION	0.04999068972411348	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9845552441801018	WITHOUT_CLASSIFICATION	0.01544475581989816	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978599996879409	WITHOUT_CLASSIFICATION	0.002140000312059168	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9829181020289622	DEFECT	0.017081897971037794	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.8848470257335483	WITHOUT_CLASSIFICATION	0.11515297426645156	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9997474488859613	WITHOUT_CLASSIFICATION	2.525511140385953E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9957204495165111	WITHOUT_CLASSIFICATION	0.00427955048348891	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9905848077565248	WITHOUT_CLASSIFICATION	0.009415192243475154	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9969523238476669	WITHOUT_CLASSIFICATION	0.00304767615233325	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9210580729850639	WITHOUT_CLASSIFICATION	0.078941927014936	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9282880769364427	WITHOUT_CLASSIFICATION	0.07171192306355736	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9959701881907811	WITHOUT_CLASSIFICATION	0.0040298118092188945	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9528251005496544	WITHOUT_CLASSIFICATION	0.04717489945034556	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9997015989834581	WITHOUT_CLASSIFICATION	2.984010165418336E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9935704927613461	WITHOUT_CLASSIFICATION	0.006429507238653938	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9765053158203203	WITHOUT_CLASSIFICATION	0.02349468417967974	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9994518246704001	WITHOUT_CLASSIFICATION	5.481753295999881E-4	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9851267826285347	WITHOUT_CLASSIFICATION	0.014873217371465382	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7351531517524916	WITHOUT_CLASSIFICATION	0.2648468482475084	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.999972316368439	DEFECT	2.7683631561040125E-5	WITHOUT_CLASSIFICATION
