//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999505220845423	WITHOUT_CLASSIFICATION	4.947791545767519E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9990608198417261	WITHOUT_CLASSIFICATION	9.391801582737331E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998893553692887	WITHOUT_CLASSIFICATION	1.1064463071132004E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999472653149802	WITHOUT_CLASSIFICATION	5.2734685019641096E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999472653149802	WITHOUT_CLASSIFICATION	5.2734685019641096E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999928701555361	WITHOUT_CLASSIFICATION	7.129844463964186E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998460295975609	WITHOUT_CLASSIFICATION	1.539704024391901E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999677767714786	WITHOUT_CLASSIFICATION	3.2223228521289E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999603781632064	WITHOUT_CLASSIFICATION	3.9621836793604615E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998143615992457	WITHOUT_CLASSIFICATION	1.8563840075430364E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998143615992457	WITHOUT_CLASSIFICATION	1.8563840075430364E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998172820000397	WITHOUT_CLASSIFICATION	1.827179999602935E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999586386321361	WITHOUT_CLASSIFICATION	4.136136786390327E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999566322573532	WITHOUT_CLASSIFICATION	4.336774264671449E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999937478039272	WITHOUT_CLASSIFICATION	6.25219607280005E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999519987624903	WITHOUT_CLASSIFICATION	4.800123750970059E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9996681612156112	WITHOUT_CLASSIFICATION	3.318387843887712E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9996709057128578	WITHOUT_CLASSIFICATION	3.2909428714225387E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9883816034213148	WITHOUT_CLASSIFICATION	0.011618396578685125	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999351044518329	WITHOUT_CLASSIFICATION	6.489554816716786E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999573148963362	WITHOUT_CLASSIFICATION	4.268510366373016E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999340815635867	WITHOUT_CLASSIFICATION	6.591843641331674E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999340815635867	WITHOUT_CLASSIFICATION	6.591843641331674E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994854270806675	WITHOUT_CLASSIFICATION	5.145729193325875E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9997214077101287	WITHOUT_CLASSIFICATION	2.785922898713376E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998830774717187	WITHOUT_CLASSIFICATION	1.1692252828135656E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999145499624215	WITHOUT_CLASSIFICATION	8.545003757855866E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9964651524156091	WITHOUT_CLASSIFICATION	0.0035348475843909734	DEFECT
/**	WITHOUT_CLASSIFICATION	0.777062940611526	WITHOUT_CLASSIFICATION	0.22293705938847402	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.777062940611526	WITHOUT_CLASSIFICATION	0.22293705938847402	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996893067644155	WITHOUT_CLASSIFICATION	3.1069323558456077E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999963823288155	WITHOUT_CLASSIFICATION	3.6176711844833886E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999580749168926	WITHOUT_CLASSIFICATION	4.192508310738676E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997984083413766	WITHOUT_CLASSIFICATION	2.0159165862337572E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999392587637355	WITHOUT_CLASSIFICATION	6.074123626464579E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997671427940797	WITHOUT_CLASSIFICATION	2.3285720592011464E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999514459879891	WITHOUT_CLASSIFICATION	4.8554012010796034E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.5047691546009868	DEFECT	0.4952308453990132	WITHOUT_CLASSIFICATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999868446605078	WITHOUT_CLASSIFICATION	1.3155339492205523E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999868446605078	WITHOUT_CLASSIFICATION	1.3155339492205523E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.99988583490014	WITHOUT_CLASSIFICATION	1.141650998599432E-4	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9987562214536875	WITHOUT_CLASSIFICATION	0.0012437785463124732	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997390750890519	WITHOUT_CLASSIFICATION	2.609249109480747E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999059541083487	WITHOUT_CLASSIFICATION	9.404589165128177E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999901517808478	WITHOUT_CLASSIFICATION	9.848219152262043E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999996721469354	WITHOUT_CLASSIFICATION	3.2785306462113335E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9978585965236896	WITHOUT_CLASSIFICATION	0.002141403476310498	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9993428410586437	WITHOUT_CLASSIFICATION	6.571589413562694E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999555255257534	WITHOUT_CLASSIFICATION	4.447447424662234E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999097976186764	WITHOUT_CLASSIFICATION	9.0202381323724E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998911217648659	WITHOUT_CLASSIFICATION	1.0887823513406398E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.999939485767967	WITHOUT_CLASSIFICATION	6.051423203307551E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999857886011966	WITHOUT_CLASSIFICATION	1.421139880342918E-5	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990802665164419	WITHOUT_CLASSIFICATION	9.197334835580355E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999676043274638	WITHOUT_CLASSIFICATION	3.2395672536204265E-4	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9994521762500167	WITHOUT_CLASSIFICATION	5.478237499832934E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999744628168092	WITHOUT_CLASSIFICATION	2.5537183190756712E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996449011166714	WITHOUT_CLASSIFICATION	3.5509888332867597E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999516211952939	WITHOUT_CLASSIFICATION	4.8378804706000446E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999662989463816	WITHOUT_CLASSIFICATION	3.370105361839867E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999690032600943	WITHOUT_CLASSIFICATION	3.099673990570996E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998704681744	WITHOUT_CLASSIFICATION	1.2953182550259372E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999688220820144	WITHOUT_CLASSIFICATION	3.117791798549726E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996271117083647	WITHOUT_CLASSIFICATION	3.7288829163524133E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9969541788319094	WITHOUT_CLASSIFICATION	0.003045821168090593	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998349905165943	WITHOUT_CLASSIFICATION	1.6500948340566107E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998732819859069	WITHOUT_CLASSIFICATION	1.267180140931059E-4	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999986011505353	WITHOUT_CLASSIFICATION	1.398849464623237E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998624852650021	WITHOUT_CLASSIFICATION	1.3751473499795276E-4	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999868104327589	WITHOUT_CLASSIFICATION	1.3189567241068431E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999985896422986	WITHOUT_CLASSIFICATION	1.4103577014341267E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999836640076301	WITHOUT_CLASSIFICATION	1.6335992369952697E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999765412761712	WITHOUT_CLASSIFICATION	2.3458723828863653E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995167885671129	WITHOUT_CLASSIFICATION	4.8321143288718605E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998834322251321	WITHOUT_CLASSIFICATION	1.1656777486783074E-4	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999556969194342	WITHOUT_CLASSIFICATION	4.4303080565804746E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995167885671129	WITHOUT_CLASSIFICATION	4.8321143288718605E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9998012154408523	WITHOUT_CLASSIFICATION	1.987845591477354E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999717804563706	WITHOUT_CLASSIFICATION	2.8219543629404994E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999443974323529	WITHOUT_CLASSIFICATION	5.560256764711888E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999788255871027	WITHOUT_CLASSIFICATION	2.1174412897214443E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999887033128558	WITHOUT_CLASSIFICATION	1.1296687144216019E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999887033128558	WITHOUT_CLASSIFICATION	1.1296687144216019E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998685014745042	WITHOUT_CLASSIFICATION	1.3149852549574546E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999989669065917	WITHOUT_CLASSIFICATION	1.0330934082948593E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999992600655894	WITHOUT_CLASSIFICATION	7.399344106090585E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999404597546282	WITHOUT_CLASSIFICATION	5.9540245371934226E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999936281055739	WITHOUT_CLASSIFICATION	6.371894426103201E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999515998847183	WITHOUT_CLASSIFICATION	4.84001152818562E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999859087967744	WITHOUT_CLASSIFICATION	1.4091203225476845E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999591091893972	WITHOUT_CLASSIFICATION	4.089081060280065E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999380553787638	WITHOUT_CLASSIFICATION	6.19446212362029E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966810382769	WITHOUT_CLASSIFICATION	3.3189617231359107E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966810382769	WITHOUT_CLASSIFICATION	3.3189617231359107E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999021464566721	WITHOUT_CLASSIFICATION	9.785354332781976E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998760532574295	WITHOUT_CLASSIFICATION	1.239467425705257E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998747939220861	WITHOUT_CLASSIFICATION	1.252060779139485E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966810382769	WITHOUT_CLASSIFICATION	3.3189617231359107E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999021464566721	WITHOUT_CLASSIFICATION	9.785354332781976E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999021464566721	WITHOUT_CLASSIFICATION	9.785354332781976E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999137529121125	WITHOUT_CLASSIFICATION	8.624708788752251E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999549160082026	WITHOUT_CLASSIFICATION	4.5083991797406005E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999887883014019	WITHOUT_CLASSIFICATION	1.1211698598044962E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999786901996737	WITHOUT_CLASSIFICATION	2.1309800326302198E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994362813946738	WITHOUT_CLASSIFICATION	5.637186053262345E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994362813946738	WITHOUT_CLASSIFICATION	5.637186053262345E-4	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998547133971954	WITHOUT_CLASSIFICATION	1.4528660280453638E-4	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999475790159891	WITHOUT_CLASSIFICATION	5.242098401090645E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.999960302479303	WITHOUT_CLASSIFICATION	3.969752069701743E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998853527563369	WITHOUT_CLASSIFICATION	1.1464724366308915E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998853527563369	WITHOUT_CLASSIFICATION	1.1464724366308915E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9992669012827903	WITHOUT_CLASSIFICATION	7.330987172097967E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996774639018534	WITHOUT_CLASSIFICATION	3.22536098146652E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.996617537582957	WITHOUT_CLASSIFICATION	0.0033824624170429064	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9998438679470523	WITHOUT_CLASSIFICATION	1.56132052947676E-4	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999981935256341	WITHOUT_CLASSIFICATION	1.8064743659002693E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999904109125435	WITHOUT_CLASSIFICATION	9.589087456504113E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998876602964007	WITHOUT_CLASSIFICATION	1.1233970359931291E-4	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999774173808281	WITHOUT_CLASSIFICATION	2.2582619171832924E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.996617537582957	WITHOUT_CLASSIFICATION	0.0033824624170429064	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.999890798926806	WITHOUT_CLASSIFICATION	1.092010731940293E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999810128909865	WITHOUT_CLASSIFICATION	1.8987109013468865E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999810128909865	WITHOUT_CLASSIFICATION	1.8987109013468865E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999978857586777	WITHOUT_CLASSIFICATION	2.1142413223254968E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999943748106891	WITHOUT_CLASSIFICATION	5.625189310894211E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997137430371877	WITHOUT_CLASSIFICATION	2.862569628122412E-4	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999237652406157	WITHOUT_CLASSIFICATION	7.623475938429796E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999780282602955	WITHOUT_CLASSIFICATION	2.1971739704573513E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9998944361452671	WITHOUT_CLASSIFICATION	1.0556385473297108E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999006548027258	WITHOUT_CLASSIFICATION	9.934519727416703E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999878282204081	WITHOUT_CLASSIFICATION	1.217177959183696E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999721279827767	WITHOUT_CLASSIFICATION	2.7872017223315574E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999721279827767	WITHOUT_CLASSIFICATION	2.7872017223315574E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999505220845423	WITHOUT_CLASSIFICATION	4.947791545767519E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999609469754562	WITHOUT_CLASSIFICATION	3.905302454386358E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999150243126911	WITHOUT_CLASSIFICATION	8.497568730893786E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999419025895432	WITHOUT_CLASSIFICATION	5.809741045681946E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999533339365285	WITHOUT_CLASSIFICATION	4.666606347139687E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998540308979341	WITHOUT_CLASSIFICATION	1.4596910206590493E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9992511633885406	WITHOUT_CLASSIFICATION	7.48836611459429E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9998387446190096	WITHOUT_CLASSIFICATION	1.612553809904409E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9996659893889629	WITHOUT_CLASSIFICATION	3.3401061103704424E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998180176248064	WITHOUT_CLASSIFICATION	1.8198237519362822E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9998540308979341	WITHOUT_CLASSIFICATION	1.4596910206590493E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9978158494744572	WITHOUT_CLASSIFICATION	0.002184150525542738	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9995998112755474	WITHOUT_CLASSIFICATION	4.001887244526261E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999587917772941	WITHOUT_CLASSIFICATION	4.1208222705967765E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999410298914957	WITHOUT_CLASSIFICATION	5.897010850434432E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9997710947336713	WITHOUT_CLASSIFICATION	2.2890526632875623E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999472653149802	WITHOUT_CLASSIFICATION	5.2734685019641096E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996808711593553	WITHOUT_CLASSIFICATION	3.19128840644707E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999664097841305	WITHOUT_CLASSIFICATION	3.359021586946571E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997985343303462	WITHOUT_CLASSIFICATION	2.0146566965389143E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.99986884320977	WITHOUT_CLASSIFICATION	1.3115679023001882E-4	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999340270187507	WITHOUT_CLASSIFICATION	6.597298124935602E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998883699976368	WITHOUT_CLASSIFICATION	1.1163000236319727E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999295394320733	WITHOUT_CLASSIFICATION	7.046056792672428E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9989995134982824	WITHOUT_CLASSIFICATION	0.001000486501717591	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995467470754118	WITHOUT_CLASSIFICATION	4.5325292458824707E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999671736740752	WITHOUT_CLASSIFICATION	3.282632592492884E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9996659893889629	WITHOUT_CLASSIFICATION	3.3401061103704424E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999340270187507	WITHOUT_CLASSIFICATION	6.597298124935602E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999928701555361	WITHOUT_CLASSIFICATION	7.129844463964186E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998902431604357	WITHOUT_CLASSIFICATION	1.0975683956433964E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999063708968987	WITHOUT_CLASSIFICATION	9.362910310126444E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999800150706316	WITHOUT_CLASSIFICATION	1.998492936839513E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999420452142658	WITHOUT_CLASSIFICATION	5.795478573426285E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9981081906825167	WITHOUT_CLASSIFICATION	0.001891809317483342	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999936219041776	WITHOUT_CLASSIFICATION	6.378095822397994E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997683677425033	WITHOUT_CLASSIFICATION	2.3163225749665977E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997683677425033	WITHOUT_CLASSIFICATION	2.3163225749665977E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999977124667428	WITHOUT_CLASSIFICATION	2.2875332571133567E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999969926458252	WITHOUT_CLASSIFICATION	3.007354174808417E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998301055363059	WITHOUT_CLASSIFICATION	1.698944636941395E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999155310942524	WITHOUT_CLASSIFICATION	8.446890574766511E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999996822302783	WITHOUT_CLASSIFICATION	3.1776972170385612E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999723159418076	WITHOUT_CLASSIFICATION	2.768405819245157E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999930506434437	WITHOUT_CLASSIFICATION	6.949356556398448E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998460295975609	WITHOUT_CLASSIFICATION	1.539704024391901E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999501562488802	WITHOUT_CLASSIFICATION	4.98437511198515E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999501562488802	WITHOUT_CLASSIFICATION	4.98437511198515E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999501562488802	WITHOUT_CLASSIFICATION	4.98437511198515E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999871036136635	WITHOUT_CLASSIFICATION	1.2896386336585839E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999501562488802	WITHOUT_CLASSIFICATION	4.98437511198515E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998829419573759	WITHOUT_CLASSIFICATION	1.1705804262410823E-4	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9990491040793285	WITHOUT_CLASSIFICATION	9.508959206714575E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998495010462509	WITHOUT_CLASSIFICATION	1.5049895374904317E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9996659893889629	WITHOUT_CLASSIFICATION	3.3401061103704424E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999340270187507	WITHOUT_CLASSIFICATION	6.597298124935602E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999340270187507	WITHOUT_CLASSIFICATION	6.597298124935602E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999707992522076	WITHOUT_CLASSIFICATION	2.9200747792436587E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999794002049642	WITHOUT_CLASSIFICATION	2.0599795035738792E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999425346420233	WITHOUT_CLASSIFICATION	5.746535797661068E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999603781632064	WITHOUT_CLASSIFICATION	3.9621836793604615E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999603781632064	WITHOUT_CLASSIFICATION	3.9621836793604615E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9997705904321498	WITHOUT_CLASSIFICATION	2.294095678501239E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999702495181413	WITHOUT_CLASSIFICATION	2.9750481858785618E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9997991722645309	WITHOUT_CLASSIFICATION	2.0082773546912033E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9997393299478211	WITHOUT_CLASSIFICATION	2.606700521788691E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9997592967518375	WITHOUT_CLASSIFICATION	2.4070324816255872E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9996729320292619	WITHOUT_CLASSIFICATION	3.2706797073816726E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998143615992457	WITHOUT_CLASSIFICATION	1.8563840075430364E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9996728539592274	WITHOUT_CLASSIFICATION	3.271460407725306E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9996728539592274	WITHOUT_CLASSIFICATION	3.271460407725306E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998172820000397	WITHOUT_CLASSIFICATION	1.827179999602935E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998172820000397	WITHOUT_CLASSIFICATION	1.827179999602935E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9994309182684807	WITHOUT_CLASSIFICATION	5.690817315192884E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9994309182684807	WITHOUT_CLASSIFICATION	5.690817315192884E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998142367061936	WITHOUT_CLASSIFICATION	1.8576329380638314E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998142367061936	WITHOUT_CLASSIFICATION	1.8576329380638314E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999603781632064	WITHOUT_CLASSIFICATION	3.9621836793604615E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9998143615992457	WITHOUT_CLASSIFICATION	1.8563840075430364E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9996728539592274	WITHOUT_CLASSIFICATION	3.271460407725306E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9996728539592274	WITHOUT_CLASSIFICATION	3.271460407725306E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998172820000397	WITHOUT_CLASSIFICATION	1.827179999602935E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9994309182684807	WITHOUT_CLASSIFICATION	5.690817315192884E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9994309182684807	WITHOUT_CLASSIFICATION	5.690817315192884E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998142367061936	WITHOUT_CLASSIFICATION	1.8576329380638314E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999633402611493	WITHOUT_CLASSIFICATION	3.6659738850811495E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998704947681859	WITHOUT_CLASSIFICATION	1.2950523181410727E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.999931292326787	WITHOUT_CLASSIFICATION	6.870767321299748E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999744503094234	WITHOUT_CLASSIFICATION	2.5549690576569506E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999207243407658	WITHOUT_CLASSIFICATION	7.927565923405942E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9996679304260817	WITHOUT_CLASSIFICATION	3.32069573918279E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9905519722403846	WITHOUT_CLASSIFICATION	0.009448027759615422	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9795888043368707	WITHOUT_CLASSIFICATION	0.020411195663129367	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998071156755776	WITHOUT_CLASSIFICATION	1.9288432442243707E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999941849862165	WITHOUT_CLASSIFICATION	5.815013783462172E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998381510895011	WITHOUT_CLASSIFICATION	1.6184891049875812E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998824866508229	WITHOUT_CLASSIFICATION	1.1751334917713005E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998685014745042	WITHOUT_CLASSIFICATION	1.3149852549574546E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9996679304260817	WITHOUT_CLASSIFICATION	3.32069573918279E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9990208192750772	WITHOUT_CLASSIFICATION	9.79180724922713E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999529506401503	WITHOUT_CLASSIFICATION	4.704935984966371E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999529506401503	WITHOUT_CLASSIFICATION	4.704935984966371E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998471938175665	WITHOUT_CLASSIFICATION	1.5280618243361028E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999582356820002	WITHOUT_CLASSIFICATION	4.176431799979183E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9984661086590618	WITHOUT_CLASSIFICATION	0.001533891340938172	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991021208834625	WITHOUT_CLASSIFICATION	8.978791165374254E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991021208834625	WITHOUT_CLASSIFICATION	8.978791165374254E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999519987624903	WITHOUT_CLASSIFICATION	4.800123750970059E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999409524922024	WITHOUT_CLASSIFICATION	5.904750779760887E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999409524922024	WITHOUT_CLASSIFICATION	5.904750779760887E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998187198771455	WITHOUT_CLASSIFICATION	1.8128012285448464E-4	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9998729231404475	WITHOUT_CLASSIFICATION	1.270768595525037E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999573148963362	WITHOUT_CLASSIFICATION	4.268510366373016E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9997249822100067	WITHOUT_CLASSIFICATION	2.75017789993273E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9996681612156112	WITHOUT_CLASSIFICATION	3.318387843887712E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8355545892106406	WITHOUT_CLASSIFICATION	0.16444541078935937	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9996671122707897	WITHOUT_CLASSIFICATION	3.328877292102608E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999485172648357	WITHOUT_CLASSIFICATION	5.1482735164255846E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999759644281724	WITHOUT_CLASSIFICATION	2.4035571827688942E-5	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999544413473754	WITHOUT_CLASSIFICATION	4.555865262456297E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999868196053917	WITHOUT_CLASSIFICATION	1.3180394608348125E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999145499624215	WITHOUT_CLASSIFICATION	8.545003757855866E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999931788570927	WITHOUT_CLASSIFICATION	6.821142907215572E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999400796031036	WITHOUT_CLASSIFICATION	5.99203968963598E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9996652658277312	WITHOUT_CLASSIFICATION	3.347341722687604E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999341872534009	WITHOUT_CLASSIFICATION	6.58127465990773E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999442557337982	WITHOUT_CLASSIFICATION	5.574426620187772E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999654318302645	WITHOUT_CLASSIFICATION	3.4568169735415425E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999573148963362	WITHOUT_CLASSIFICATION	4.268510366373016E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999120365856335	WITHOUT_CLASSIFICATION	8.796341436652982E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999496514741052	WITHOUT_CLASSIFICATION	5.0348525894784866E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996826404014476	WITHOUT_CLASSIFICATION	3.173595985523472E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9996681612156112	WITHOUT_CLASSIFICATION	3.318387843887712E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999654318302645	WITHOUT_CLASSIFICATION	3.4568169735415425E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999120365856335	WITHOUT_CLASSIFICATION	8.796341436652982E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996826404014476	WITHOUT_CLASSIFICATION	3.173595985523472E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999198558342827	WITHOUT_CLASSIFICATION	8.01441657173502E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999198558342827	WITHOUT_CLASSIFICATION	8.01441657173502E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999340815635867	WITHOUT_CLASSIFICATION	6.591843641331674E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999439168948018	WITHOUT_CLASSIFICATION	5.608310519827441E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9998627422507208	WITHOUT_CLASSIFICATION	1.3725774927920596E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999896710781553	WITHOUT_CLASSIFICATION	1.0328921844660485E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999902917820842	WITHOUT_CLASSIFICATION	9.708217915820137E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999736634251019	WITHOUT_CLASSIFICATION	2.6336574898126656E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999841372492437	WITHOUT_CLASSIFICATION	1.5862750756188487E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995153738623164	WITHOUT_CLASSIFICATION	4.846261376836187E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999555900827481	WITHOUT_CLASSIFICATION	4.4409917251846615E-5	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999841372492437	WITHOUT_CLASSIFICATION	1.5862750756188487E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9997214077101287	WITHOUT_CLASSIFICATION	2.785922898713376E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998055072700356	WITHOUT_CLASSIFICATION	1.9449272996443798E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999654318302645	WITHOUT_CLASSIFICATION	3.4568169735415425E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998538414668787	WITHOUT_CLASSIFICATION	1.4615853312121877E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999266919907283	WITHOUT_CLASSIFICATION	7.330800927173294E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9990141756592448	WITHOUT_CLASSIFICATION	9.858243407551977E-4	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999047697557217	WITHOUT_CLASSIFICATION	9.523024427829603E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999037330637681	WITHOUT_CLASSIFICATION	9.626693623177016E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999885323605936	WITHOUT_CLASSIFICATION	1.146763940650938E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998639297198668	WITHOUT_CLASSIFICATION	1.3607028013322815E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999883367272908	WITHOUT_CLASSIFICATION	1.1663272709195441E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999341971155862	WITHOUT_CLASSIFICATION	6.580288441389915E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999346396753214	WITHOUT_CLASSIFICATION	6.536032467864856E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9993669615603066	WITHOUT_CLASSIFICATION	6.330384396934801E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999145499624215	WITHOUT_CLASSIFICATION	8.545003757855866E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999575845752626	WITHOUT_CLASSIFICATION	4.241542473735195E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997291146503117	WITHOUT_CLASSIFICATION	2.708853496884037E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999720691905517	WITHOUT_CLASSIFICATION	2.79308094482002E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999557450092006	WITHOUT_CLASSIFICATION	4.425499079943271E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.999955844234691	WITHOUT_CLASSIFICATION	4.4155765309128183E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999136063840853	WITHOUT_CLASSIFICATION	8.639361591475019E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997864895598	WITHOUT_CLASSIFICATION	2.1351044023329785E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999535211971002	WITHOUT_CLASSIFICATION	4.647880289976359E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999414446876116	WITHOUT_CLASSIFICATION	5.855531238832812E-5	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999031084333445	WITHOUT_CLASSIFICATION	9.68915666554665E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997216312409144	WITHOUT_CLASSIFICATION	2.7836875908556223E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997216312409144	WITHOUT_CLASSIFICATION	2.7836875908556223E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998655066939598	WITHOUT_CLASSIFICATION	1.344933060401692E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999027490168104	WITHOUT_CLASSIFICATION	9.725098318958283E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9997929178895294	WITHOUT_CLASSIFICATION	2.0708211047061725E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999287520371204	WITHOUT_CLASSIFICATION	7.124796287950178E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998578429552711	WITHOUT_CLASSIFICATION	1.4215704472887402E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998123918180761	WITHOUT_CLASSIFICATION	1.876081819237839E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998146779122377	WITHOUT_CLASSIFICATION	1.8532208776223655E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999875195464218	WITHOUT_CLASSIFICATION	1.2480453578211521E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999078140993	WITHOUT_CLASSIFICATION	9.218590069994722E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998647346545001	WITHOUT_CLASSIFICATION	1.352653454999237E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999007760542084	WITHOUT_CLASSIFICATION	9.922394579166029E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9985937553214259	WITHOUT_CLASSIFICATION	0.0014062446785740158	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.997664100867125	WITHOUT_CLASSIFICATION	0.0023358991328750033	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998545178041991	WITHOUT_CLASSIFICATION	1.4548219580092577E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998760435265877	WITHOUT_CLASSIFICATION	1.2395647341233282E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9981558138202407	WITHOUT_CLASSIFICATION	0.0018441861797594285	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999286931073579	WITHOUT_CLASSIFICATION	7.130689264207102E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999597312654251	WITHOUT_CLASSIFICATION	4.026873457485279E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9960613640172656	WITHOUT_CLASSIFICATION	0.003938635982734343	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9998321983698266	WITHOUT_CLASSIFICATION	1.6780163017343384E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9998321983698266	WITHOUT_CLASSIFICATION	1.6780163017343384E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998567512497036	WITHOUT_CLASSIFICATION	1.4324875029633616E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998567512497036	WITHOUT_CLASSIFICATION	1.4324875029633616E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999414446876116	WITHOUT_CLASSIFICATION	5.855531238832812E-5	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9970191042714218	WITHOUT_CLASSIFICATION	0.0029808957285781183	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984225211073224	WITHOUT_CLASSIFICATION	0.0015774788926774923	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996891020854637	WITHOUT_CLASSIFICATION	3.1089791453630576E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984225211073224	WITHOUT_CLASSIFICATION	0.0015774788926774923	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996891020854637	WITHOUT_CLASSIFICATION	3.1089791453630576E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996422645674182	WITHOUT_CLASSIFICATION	3.57735432581759E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9989905450943644	WITHOUT_CLASSIFICATION	0.0010094549056356007	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999009863414376	WITHOUT_CLASSIFICATION	9.901365856232105E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.999984235826199	WITHOUT_CLASSIFICATION	1.5764173801020762E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996571554620551	WITHOUT_CLASSIFICATION	3.4284453794479724E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998946439286306	WITHOUT_CLASSIFICATION	1.0535607136942656E-4	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9997490062766036	WITHOUT_CLASSIFICATION	2.5099372339639246E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9993703001621799	WITHOUT_CLASSIFICATION	6.296998378202234E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9987857052773721	WITHOUT_CLASSIFICATION	0.001214294722627874	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991746010577	WITHOUT_CLASSIFICATION	8.253989422850766E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999520493849403	WITHOUT_CLASSIFICATION	4.7950615059790865E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9991890539794668	WITHOUT_CLASSIFICATION	8.109460205331621E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999878671261088	WITHOUT_CLASSIFICATION	1.2132873891138036E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998691376726262	WITHOUT_CLASSIFICATION	1.3086232737380795E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998691376726262	WITHOUT_CLASSIFICATION	1.3086232737380795E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982632585336522	WITHOUT_CLASSIFICATION	0.0017367414663478622	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982632585336522	WITHOUT_CLASSIFICATION	0.0017367414663478622	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999028943936227	WITHOUT_CLASSIFICATION	9.710560637729716E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996422645674182	WITHOUT_CLASSIFICATION	3.57735432581759E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997644180180324	WITHOUT_CLASSIFICATION	2.3558198196756822E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.99960657334155	WITHOUT_CLASSIFICATION	3.9342665844999976E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9995450549402763	WITHOUT_CLASSIFICATION	4.549450597236222E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996441045718221	WITHOUT_CLASSIFICATION	3.558954281779423E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9285977743316495	WITHOUT_CLASSIFICATION	0.07140222566835054	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996422645674182	WITHOUT_CLASSIFICATION	3.57735432581759E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996441045718221	WITHOUT_CLASSIFICATION	3.558954281779423E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9285977743316495	WITHOUT_CLASSIFICATION	0.07140222566835054	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998167074747479	WITHOUT_CLASSIFICATION	1.8329252525205484E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999434462371316	WITHOUT_CLASSIFICATION	5.655376286841129E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999105013486506	WITHOUT_CLASSIFICATION	8.949865134941747E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996422645674182	WITHOUT_CLASSIFICATION	3.57735432581759E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996422645674182	WITHOUT_CLASSIFICATION	3.57735432581759E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999165268375894	WITHOUT_CLASSIFICATION	8.347316241065925E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999083746357352	WITHOUT_CLASSIFICATION	9.162536426473733E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999384709252462	WITHOUT_CLASSIFICATION	6.152907475378682E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999476380401314	WITHOUT_CLASSIFICATION	5.236195986862676E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998571515655139	WITHOUT_CLASSIFICATION	1.4284843448616726E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999939801304448	WITHOUT_CLASSIFICATION	6.019869555120353E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999311515000278	WITHOUT_CLASSIFICATION	6.884849997225948E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999966273823859	WITHOUT_CLASSIFICATION	3.372617614092367E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998337967389538	WITHOUT_CLASSIFICATION	1.6620326104623248E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999173927424883	WITHOUT_CLASSIFICATION	8.260725751174227E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999202976973485	WITHOUT_CLASSIFICATION	7.970230265152879E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999892672376557	WITHOUT_CLASSIFICATION	1.0732762344428144E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999929542814724	WITHOUT_CLASSIFICATION	7.0457185276732185E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999266375411814	WITHOUT_CLASSIFICATION	7.33624588185753E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998123863158235	WITHOUT_CLASSIFICATION	1.8761368417647578E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999925551798883	WITHOUT_CLASSIFICATION	7.444820111724889E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997984083413766	WITHOUT_CLASSIFICATION	2.0159165862337572E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998124469361481	WITHOUT_CLASSIFICATION	1.8755306385193453E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996932220835586	WITHOUT_CLASSIFICATION	3.0677791644138626E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996891020854637	WITHOUT_CLASSIFICATION	3.1089791453630576E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999419397862598	WITHOUT_CLASSIFICATION	5.8060213740130056E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997984083413766	WITHOUT_CLASSIFICATION	2.0159165862337572E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.852320227601519	WITHOUT_CLASSIFICATION	0.14767977239848104	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999969420098423	WITHOUT_CLASSIFICATION	3.0579901577560387E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9980936694536234	WITHOUT_CLASSIFICATION	0.0019063305463766329	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999570363593683	WITHOUT_CLASSIFICATION	4.2963640631685756E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998577358069726	WITHOUT_CLASSIFICATION	1.4226419302740053E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999393110870938	WITHOUT_CLASSIFICATION	6.068891290628234E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.998066773744102	WITHOUT_CLASSIFICATION	0.0019332262558980375	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999804705984338	WITHOUT_CLASSIFICATION	1.9529401566267467E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998892895499922	WITHOUT_CLASSIFICATION	1.1071045000782628E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999095192442017	WITHOUT_CLASSIFICATION	9.048075579830448E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9956431512916599	WITHOUT_CLASSIFICATION	0.004356848708340148	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998036964858646	WITHOUT_CLASSIFICATION	1.9630351413541693E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999933029861803	WITHOUT_CLASSIFICATION	6.697013819752766E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999864082645712	WITHOUT_CLASSIFICATION	1.3591735428796254E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990404364188487	WITHOUT_CLASSIFICATION	9.595635811513501E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999419103908074	WITHOUT_CLASSIFICATION	5.8089609192738964E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9946566411017078	WITHOUT_CLASSIFICATION	0.005343358898292158	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998863199138052	WITHOUT_CLASSIFICATION	1.1368008619481421E-4	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999870676813654	WITHOUT_CLASSIFICATION	1.2932318634593744E-4	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9994570343500798	WITHOUT_CLASSIFICATION	5.429656499202066E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999962345959488	WITHOUT_CLASSIFICATION	3.765404051210972E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178870722629	WITHOUT_CLASSIFICATION	1.8211292773710928E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998073230516241	WITHOUT_CLASSIFICATION	1.926769483758332E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878248821962	WITHOUT_CLASSIFICATION	1.217511780380766E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998634914883521	WITHOUT_CLASSIFICATION	1.3650851164792498E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998744982677547	WITHOUT_CLASSIFICATION	1.2550173224535862E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999965413673845	WITHOUT_CLASSIFICATION	3.45863261553554E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999956190583582	WITHOUT_CLASSIFICATION	4.380941641841625E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718583054781	WITHOUT_CLASSIFICATION	2.814169452194578E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813509765016	WITHOUT_CLASSIFICATION	1.8649023498297973E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998704124703518	WITHOUT_CLASSIFICATION	1.2958752964824523E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999319280331277	WITHOUT_CLASSIFICATION	6.807196687229691E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998622603716937	WITHOUT_CLASSIFICATION	1.3773962830633632E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998453004718989	WITHOUT_CLASSIFICATION	1.5469952810108153E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998926707064273	WITHOUT_CLASSIFICATION	1.0732929357276534E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998055867471061	WITHOUT_CLASSIFICATION	1.9441325289390994E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997198017390457	WITHOUT_CLASSIFICATION	2.8019826095434863E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999922757771091	WITHOUT_CLASSIFICATION	7.724222890904382E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999911495396211	WITHOUT_CLASSIFICATION	8.850460378979647E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999159858275674	WITHOUT_CLASSIFICATION	8.401417243255796E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998567215243438	WITHOUT_CLASSIFICATION	1.432784756562553E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997949407998113	WITHOUT_CLASSIFICATION	2.050592001887221E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998167074747479	WITHOUT_CLASSIFICATION	1.8329252525205484E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999348456837076	WITHOUT_CLASSIFICATION	6.515431629241363E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999360997012644	WITHOUT_CLASSIFICATION	6.39002987356188E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999409184759791	WITHOUT_CLASSIFICATION	5.908152402083425E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999524038717829	WITHOUT_CLASSIFICATION	4.759612821722704E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999360058866807	WITHOUT_CLASSIFICATION	6.399411331923903E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998751534578298	WITHOUT_CLASSIFICATION	1.2484654217010448E-4	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9993732108783796	WITHOUT_CLASSIFICATION	6.267891216204733E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9989813838587045	WITHOUT_CLASSIFICATION	0.0010186161412955802	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9992668329483889	WITHOUT_CLASSIFICATION	7.331670516110441E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99980564489348	WITHOUT_CLASSIFICATION	1.943551065200171E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998520320833573	WITHOUT_CLASSIFICATION	1.4796791664267682E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999821238603845	WITHOUT_CLASSIFICATION	1.7876139615510594E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998124211797809	WITHOUT_CLASSIFICATION	1.8757882021903653E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9989394543920092	WITHOUT_CLASSIFICATION	0.00106054560799085	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999824151205584	WITHOUT_CLASSIFICATION	1.7584879441583145E-5	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999308307776321	WITHOUT_CLASSIFICATION	6.91692223678911E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9968046293735908	WITHOUT_CLASSIFICATION	0.003195370626409204	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998247808907627	WITHOUT_CLASSIFICATION	1.7521910923735544E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998660425330929	WITHOUT_CLASSIFICATION	1.3395746690715249E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998090997785084	WITHOUT_CLASSIFICATION	1.9090022149161477E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999891701816495	WITHOUT_CLASSIFICATION	1.0829818350501575E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999919585332326	WITHOUT_CLASSIFICATION	8.041466767276404E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9991652720306243	WITHOUT_CLASSIFICATION	8.347279693755854E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997356745975341	WITHOUT_CLASSIFICATION	2.6432540246593134E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997681210476921	WITHOUT_CLASSIFICATION	2.318789523079233E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.99976058005695	WITHOUT_CLASSIFICATION	2.394199430500279E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999159858275674	WITHOUT_CLASSIFICATION	8.401417243255796E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997776437882117	WITHOUT_CLASSIFICATION	2.223562117882321E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999539820840979	WITHOUT_CLASSIFICATION	4.601791590204676E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999086953382568	WITHOUT_CLASSIFICATION	9.130466174314264E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999922757771091	WITHOUT_CLASSIFICATION	7.724222890904382E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998187496355674	WITHOUT_CLASSIFICATION	1.812503644327138E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999422246469696	WITHOUT_CLASSIFICATION	5.777535303029314E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9994870162577423	WITHOUT_CLASSIFICATION	5.129837422576263E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9980990991607415	WITHOUT_CLASSIFICATION	0.0019009008392585857	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996991535281503	WITHOUT_CLASSIFICATION	3.008464718496524E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998568628644017	WITHOUT_CLASSIFICATION	1.431371355983742E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998399936431587	WITHOUT_CLASSIFICATION	1.6000635684138885E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99975052926853	WITHOUT_CLASSIFICATION	2.494707314699577E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99990479839665	WITHOUT_CLASSIFICATION	9.52016033499464E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998763339408756	WITHOUT_CLASSIFICATION	1.2366605912437305E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995829315255675	WITHOUT_CLASSIFICATION	4.170684744324464E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999535416531077	WITHOUT_CLASSIFICATION	4.645834689236845E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998167074747479	WITHOUT_CLASSIFICATION	1.8329252525205484E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999228980681916	WITHOUT_CLASSIFICATION	7.710193180834616E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999791615199567	WITHOUT_CLASSIFICATION	2.0838480043291497E-5	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9995407055144122	WITHOUT_CLASSIFICATION	4.592944855877655E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999754464951064	WITHOUT_CLASSIFICATION	2.4553504893594466E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998198631748483	WITHOUT_CLASSIFICATION	1.8013682515171612E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9992334265518311	WITHOUT_CLASSIFICATION	7.665734481689777E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998326558713928	WITHOUT_CLASSIFICATION	1.6734412860720297E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999084282864334	WITHOUT_CLASSIFICATION	9.157171356664866E-5	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999626775447791	WITHOUT_CLASSIFICATION	3.7322455220933736E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9883816034213148	WITHOUT_CLASSIFICATION	0.011618396578685125	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.999864811891406	WITHOUT_CLASSIFICATION	1.3518810859405796E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999864374775173	WITHOUT_CLASSIFICATION	1.3562522482702324E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999922757771091	WITHOUT_CLASSIFICATION	7.724222890904382E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999159858275674	WITHOUT_CLASSIFICATION	8.401417243255796E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9971010202114898	WITHOUT_CLASSIFICATION	0.002898979788510212	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999896151943503	WITHOUT_CLASSIFICATION	1.0384805649838982E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9768204018974668	WITHOUT_CLASSIFICATION	0.023179598102533283	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999159858275674	WITHOUT_CLASSIFICATION	8.401417243255796E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999232480469054	WITHOUT_CLASSIFICATION	7.675195309466241E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999754464951064	WITHOUT_CLASSIFICATION	2.4553504893594466E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9959256021885511	WITHOUT_CLASSIFICATION	0.004074397811448926	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9962894646474266	WITHOUT_CLASSIFICATION	0.003710535352573299	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999989622215486	WITHOUT_CLASSIFICATION	1.037778451395261E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998568628644017	WITHOUT_CLASSIFICATION	1.431371355983742E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998399936431587	WITHOUT_CLASSIFICATION	1.6000635684138885E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99975052926853	WITHOUT_CLASSIFICATION	2.494707314699577E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999450894187875	WITHOUT_CLASSIFICATION	5.4910581212587716E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9998465474850682	WITHOUT_CLASSIFICATION	1.5345251493185515E-4	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998109862131378	WITHOUT_CLASSIFICATION	1.890137868621642E-4	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9996554836678688	WITHOUT_CLASSIFICATION	3.445163321311937E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9991130996009819	WITHOUT_CLASSIFICATION	8.869003990181041E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999159858275674	WITHOUT_CLASSIFICATION	8.401417243255796E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99990479839665	WITHOUT_CLASSIFICATION	9.52016033499464E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998763339408756	WITHOUT_CLASSIFICATION	1.2366605912437305E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882576946033	WITHOUT_CLASSIFICATION	1.1742305396726422E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998393410710201	WITHOUT_CLASSIFICATION	1.606589289797739E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999022542733338	WITHOUT_CLASSIFICATION	9.774572666627585E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9996832710512561	WITHOUT_CLASSIFICATION	3.1672894874390045E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.997597247445728	WITHOUT_CLASSIFICATION	0.0024027525542720638	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9983078383234666	WITHOUT_CLASSIFICATION	0.0016921616765334263	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998343829092396	WITHOUT_CLASSIFICATION	1.6561709076037465E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999353925091854	WITHOUT_CLASSIFICATION	6.460749081451293E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999900543185222	WITHOUT_CLASSIFICATION	9.945681477864474E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998744982677547	WITHOUT_CLASSIFICATION	1.2550173224535862E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813509765016	WITHOUT_CLASSIFICATION	1.8649023498297973E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999955458206176	WITHOUT_CLASSIFICATION	4.454179382391493E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999134384726707	WITHOUT_CLASSIFICATION	8.656152732926645E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999043550915556	WITHOUT_CLASSIFICATION	9.564490844440523E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.984081713053249	WITHOUT_CLASSIFICATION	0.01591828694675098	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998704124703518	WITHOUT_CLASSIFICATION	1.2958752964824523E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614608936515	WITHOUT_CLASSIFICATION	1.3853910634852316E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999919585332326	WITHOUT_CLASSIFICATION	8.041466767276404E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.997464646882179	WITHOUT_CLASSIFICATION	0.002535353117820937	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9989611967532263	WITHOUT_CLASSIFICATION	0.0010388032467736985	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999442092584071	WITHOUT_CLASSIFICATION	5.5790741592805495E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999302664861917	WITHOUT_CLASSIFICATION	6.973351380835405E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999949530410225	WITHOUT_CLASSIFICATION	5.0469589774835625E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998258492822992	WITHOUT_CLASSIFICATION	1.7415071770069868E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995671527735088	WITHOUT_CLASSIFICATION	4.3284722649120956E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999804705984338	WITHOUT_CLASSIFICATION	1.9529401566267467E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999863630812063	WITHOUT_CLASSIFICATION	1.363691879370385E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998536697337358	WITHOUT_CLASSIFICATION	1.4633026626428706E-4	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999260132463057	WITHOUT_CLASSIFICATION	7.398675369434633E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999743660612047	WITHOUT_CLASSIFICATION	2.5633938795252084E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999693189329054	WITHOUT_CLASSIFICATION	3.0681067094555036E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998811435115156	WITHOUT_CLASSIFICATION	1.1885648848441728E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998852769389894	WITHOUT_CLASSIFICATION	1.1472306101055443E-4	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998480273582458	WITHOUT_CLASSIFICATION	1.519726417542032E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996907925722471	WITHOUT_CLASSIFICATION	3.092074277529088E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996149836502435	WITHOUT_CLASSIFICATION	3.8501634975646225E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9989880699957557	WITHOUT_CLASSIFICATION	0.0010119300042442994	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9868256529358808	WITHOUT_CLASSIFICATION	0.013174347064119256	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992285148573001	WITHOUT_CLASSIFICATION	7.714851426998533E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994750326483124	WITHOUT_CLASSIFICATION	5.249673516875811E-4	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9994122227492229	WITHOUT_CLASSIFICATION	5.877772507769885E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998860953253907	WITHOUT_CLASSIFICATION	1.1390467460921197E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992285148573001	WITHOUT_CLASSIFICATION	7.714851426998533E-4	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.99966983589337	WITHOUT_CLASSIFICATION	3.301641066300135E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995279360192107	WITHOUT_CLASSIFICATION	4.7206398078921053E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999179171497575	WITHOUT_CLASSIFICATION	8.208285024254078E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999005346417175	WITHOUT_CLASSIFICATION	9.946535828256014E-5	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9993839356687796	WITHOUT_CLASSIFICATION	6.160643312204082E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999829452495391	WITHOUT_CLASSIFICATION	1.7054750460894507E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999494423703024	WITHOUT_CLASSIFICATION	5.0557629697605634E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999351683590646	WITHOUT_CLASSIFICATION	6.483164093543015E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999351683590646	WITHOUT_CLASSIFICATION	6.483164093543015E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999789970073196	WITHOUT_CLASSIFICATION	2.1002992680483922E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997738634201528	WITHOUT_CLASSIFICATION	2.2613657984722974E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996360073726155	WITHOUT_CLASSIFICATION	3.639926273844518E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999331519405007	WITHOUT_CLASSIFICATION	6.684805949933009E-5	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9973059426747578	WITHOUT_CLASSIFICATION	0.002694057325242133	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999476157521231	WITHOUT_CLASSIFICATION	5.2384247876942786E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999975490401083	WITHOUT_CLASSIFICATION	2.450959891616563E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999633865268314	WITHOUT_CLASSIFICATION	3.661347316857186E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999668378635771	WITHOUT_CLASSIFICATION	3.316213642289737E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999914024735582	WITHOUT_CLASSIFICATION	8.59752644173725E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999755134300488	WITHOUT_CLASSIFICATION	2.448656995125799E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999051912983646	WITHOUT_CLASSIFICATION	9.480870163538269E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999630862563734	WITHOUT_CLASSIFICATION	3.6913743626559964E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9990668812977122	WITHOUT_CLASSIFICATION	9.331187022877743E-4	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998970610556387	WITHOUT_CLASSIFICATION	1.0293894436125102E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999559595266135	WITHOUT_CLASSIFICATION	4.4040473386499333E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997439110669855	WITHOUT_CLASSIFICATION	2.5608893301457095E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9989017250538822	WITHOUT_CLASSIFICATION	0.001098274946117832	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999811718392863	WITHOUT_CLASSIFICATION	1.8828160713647248E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998577916735909	WITHOUT_CLASSIFICATION	1.422083264091034E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998949723856249	WITHOUT_CLASSIFICATION	1.0502761437520235E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998524722124186	WITHOUT_CLASSIFICATION	1.4752778758129784E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999771229879504	WITHOUT_CLASSIFICATION	2.2877012049529727E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999445546981666	WITHOUT_CLASSIFICATION	5.544530183335061E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998565883093116	WITHOUT_CLASSIFICATION	1.434116906883254E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9994502788203473	WITHOUT_CLASSIFICATION	5.497211796525842E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9989212703009663	WITHOUT_CLASSIFICATION	0.001078729699033603	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996212383747938	WITHOUT_CLASSIFICATION	3.787616252061949E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9946995493811753	WITHOUT_CLASSIFICATION	0.005300450618824684	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9990565634626224	WITHOUT_CLASSIFICATION	9.434365373775072E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999015208625814	WITHOUT_CLASSIFICATION	9.847913741856075E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999551930312163	WITHOUT_CLASSIFICATION	4.4806968783761625E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998998192655736	WITHOUT_CLASSIFICATION	1.0018073442637075E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999592337262426	WITHOUT_CLASSIFICATION	4.0766273757503566E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999156679695768	WITHOUT_CLASSIFICATION	8.433203042322633E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999256764337113	WITHOUT_CLASSIFICATION	7.432356628870676E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9981116922811994	WITHOUT_CLASSIFICATION	0.001888307718800482	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999623347544778	WITHOUT_CLASSIFICATION	3.766524552222291E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8329797380326791	WITHOUT_CLASSIFICATION	0.16702026196732092	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999370954936819	WITHOUT_CLASSIFICATION	6.290450631809791E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998044882488846	WITHOUT_CLASSIFICATION	1.9551175111538925E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998167074747479	WITHOUT_CLASSIFICATION	1.8329252525205484E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998167074747479	WITHOUT_CLASSIFICATION	1.8329252525205484E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997154728450802	WITHOUT_CLASSIFICATION	2.845271549198267E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998934971144197	WITHOUT_CLASSIFICATION	1.0650288558031945E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999917149060421	WITHOUT_CLASSIFICATION	8.285093957914865E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999982842743371	WITHOUT_CLASSIFICATION	1.7157256628911283E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999044669194072	WITHOUT_CLASSIFICATION	9.553308059295174E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9993491030237652	WITHOUT_CLASSIFICATION	6.508969762347529E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9996055683819789	WITHOUT_CLASSIFICATION	3.9443161802111247E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999972020332202	WITHOUT_CLASSIFICATION	2.7979667799321293E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999989935782004	WITHOUT_CLASSIFICATION	1.0064217995257813E-6	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999842193199701	WITHOUT_CLASSIFICATION	1.57806800298997E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997491156217159	WITHOUT_CLASSIFICATION	2.508843782841998E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999680751635049	WITHOUT_CLASSIFICATION	3.192483649513897E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996100051153889	WITHOUT_CLASSIFICATION	3.899948846110927E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998180514585627	WITHOUT_CLASSIFICATION	1.8194854143713395E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998446624818423	WITHOUT_CLASSIFICATION	1.55337518157741E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999810921105419	WITHOUT_CLASSIFICATION	1.8907889458140693E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998107303658175	WITHOUT_CLASSIFICATION	1.892696341825364E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994464309969963	WITHOUT_CLASSIFICATION	5.535690030038457E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998214152259256	WITHOUT_CLASSIFICATION	1.7858477407441248E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997940343526022	WITHOUT_CLASSIFICATION	2.0596564739782747E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994464309969963	WITHOUT_CLASSIFICATION	5.535690030038457E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999794099987298	WITHOUT_CLASSIFICATION	2.059000127030018E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999884565736962	WITHOUT_CLASSIFICATION	1.154342630386136E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999968528536838	WITHOUT_CLASSIFICATION	3.147146316191297E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998226769829013	WITHOUT_CLASSIFICATION	1.7732301709870045E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.999942081439446	WITHOUT_CLASSIFICATION	5.791856055415187E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999802979621456	WITHOUT_CLASSIFICATION	1.9702037854364786E-5	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998966357538994	WITHOUT_CLASSIFICATION	1.0336424610058928E-4	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998849183388845	WITHOUT_CLASSIFICATION	1.1508166111549947E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998076087054407	WITHOUT_CLASSIFICATION	1.9239129455929163E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9998269970085032	WITHOUT_CLASSIFICATION	1.730029914968695E-4	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999334365031469	WITHOUT_CLASSIFICATION	6.656349685314715E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999799821157821	WITHOUT_CLASSIFICATION	2.0017884217964433E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999901729187739	WITHOUT_CLASSIFICATION	9.82708122603165E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996572816304059	WITHOUT_CLASSIFICATION	3.427183695940649E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999367560095792	WITHOUT_CLASSIFICATION	6.324399042088919E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992015935491655	WITHOUT_CLASSIFICATION	7.984064508344904E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995735262565687	WITHOUT_CLASSIFICATION	4.2647374343121516E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9933826871412456	WITHOUT_CLASSIFICATION	0.006617312858754425	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998804886494362	WITHOUT_CLASSIFICATION	1.1951135056383072E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999810675935441	WITHOUT_CLASSIFICATION	1.8932406455916346E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999344003455393	WITHOUT_CLASSIFICATION	6.559965446075438E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.996294702897249	WITHOUT_CLASSIFICATION	0.0037052971027509056	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999900912371468	WITHOUT_CLASSIFICATION	9.90876285319436E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999362437498	WITHOUT_CLASSIFICATION	6.375625009122129E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997775443646572	WITHOUT_CLASSIFICATION	2.2245563534292406E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9981521174562504	WITHOUT_CLASSIFICATION	0.0018478825437494679	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998947395488295	WITHOUT_CLASSIFICATION	1.0526045117063761E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998811435115156	WITHOUT_CLASSIFICATION	1.1885648848441728E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9982459284491735	WITHOUT_CLASSIFICATION	0.0017540715508265407	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997627688681145	WITHOUT_CLASSIFICATION	2.3723113188553436E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9938787780696889	WITHOUT_CLASSIFICATION	0.006121221930311057	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999298707163381	WITHOUT_CLASSIFICATION	7.012928366194176E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999346040935824	WITHOUT_CLASSIFICATION	6.539590641756487E-5	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.999827415271554	WITHOUT_CLASSIFICATION	1.7258472844598903E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9995936504321608	WITHOUT_CLASSIFICATION	4.063495678392023E-4	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999815696274917	WITHOUT_CLASSIFICATION	1.8430372508254286E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999708835297979	WITHOUT_CLASSIFICATION	2.911647020220063E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999971144051399	WITHOUT_CLASSIFICATION	2.885594860099968E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999953420768569	WITHOUT_CLASSIFICATION	4.657923143122428E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999565391314575	WITHOUT_CLASSIFICATION	4.346086854244691E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9992333716833665	WITHOUT_CLASSIFICATION	7.666283166335184E-4	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9995863727985691	WITHOUT_CLASSIFICATION	4.1362720143094437E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999965789736144	WITHOUT_CLASSIFICATION	3.4210263856555885E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999216951591104	WITHOUT_CLASSIFICATION	7.830484088958193E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998225729386577	WITHOUT_CLASSIFICATION	1.7742706134231078E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999685055692487	WITHOUT_CLASSIFICATION	3.1494430751302175E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999647380479363	WITHOUT_CLASSIFICATION	3.5261952063689665E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999992994931452	WITHOUT_CLASSIFICATION	7.005068548041353E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999965171948093	WITHOUT_CLASSIFICATION	3.4828051907068E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999873369120988	WITHOUT_CLASSIFICATION	1.2663087901074222E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998652724322497	WITHOUT_CLASSIFICATION	1.3472756775037274E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999092046829134	WITHOUT_CLASSIFICATION	9.079531708651887E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999696951515942	WITHOUT_CLASSIFICATION	3.030484840586836E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9989288977205223	WITHOUT_CLASSIFICATION	0.0010711022794776552	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999919229124573	WITHOUT_CLASSIFICATION	8.077087542692534E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9969097836302923	WITHOUT_CLASSIFICATION	0.003090216369707756	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999377264176429	WITHOUT_CLASSIFICATION	6.227358235718825E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999827323435649	WITHOUT_CLASSIFICATION	1.7267656435099424E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997285438928158	WITHOUT_CLASSIFICATION	2.7145610718419934E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996620885288788	WITHOUT_CLASSIFICATION	3.379114711211782E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998033437057231	WITHOUT_CLASSIFICATION	1.9665629427689912E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998892777318048	WITHOUT_CLASSIFICATION	1.1072226819513518E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999804290779691	WITHOUT_CLASSIFICATION	1.957092203081923E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9938579341907251	WITHOUT_CLASSIFICATION	0.0061420658092748905	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999743766564557	WITHOUT_CLASSIFICATION	2.562334354429904E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998250496222862	WITHOUT_CLASSIFICATION	1.7495037771378353E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999743766564557	WITHOUT_CLASSIFICATION	2.562334354429904E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992758926728884	WITHOUT_CLASSIFICATION	7.241073271116044E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999651357613533	WITHOUT_CLASSIFICATION	3.4864238646664676E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999277934066052	WITHOUT_CLASSIFICATION	7.220659339478424E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999831244252385	WITHOUT_CLASSIFICATION	1.6875574761525043E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999898267559753	WITHOUT_CLASSIFICATION	1.0173244024698304E-4	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998337775197516	WITHOUT_CLASSIFICATION	1.6622248024848992E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999209596316201	WITHOUT_CLASSIFICATION	7.904036837990106E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.99862985409068	WITHOUT_CLASSIFICATION	0.0013701459093201156	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999913563871894	WITHOUT_CLASSIFICATION	8.643612810555132E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999959721397046	WITHOUT_CLASSIFICATION	4.027860295374724E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999048275617918	WITHOUT_CLASSIFICATION	9.517243820820687E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998270672850541	WITHOUT_CLASSIFICATION	1.7293271494589886E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993689576788843	WITHOUT_CLASSIFICATION	6.310423211155701E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9690819753752882	WITHOUT_CLASSIFICATION	0.030918024624711795	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999948440910994	WITHOUT_CLASSIFICATION	5.1559089006335516E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999761214884865	WITHOUT_CLASSIFICATION	2.3878511513490553E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999574419351512	WITHOUT_CLASSIFICATION	4.255806484870257E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999574419351512	WITHOUT_CLASSIFICATION	4.255806484870257E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999842193199701	WITHOUT_CLASSIFICATION	1.57806800298997E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998888731976745	WITHOUT_CLASSIFICATION	1.1112680232539798E-4	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999906980102798	WITHOUT_CLASSIFICATION	9.301989720174764E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9993970236194266	WITHOUT_CLASSIFICATION	6.02976380573474E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9997947762532763	WITHOUT_CLASSIFICATION	2.0522374672373505E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999922726080448	WITHOUT_CLASSIFICATION	7.727391955200945E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9960341482574196	WITHOUT_CLASSIFICATION	0.003965851742580405	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998675878979202	WITHOUT_CLASSIFICATION	1.3241210207986856E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999864195886543	WITHOUT_CLASSIFICATION	1.3580411345637333E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998680856799328	WITHOUT_CLASSIFICATION	1.319143200672189E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998481819411928	WITHOUT_CLASSIFICATION	1.5181805880710655E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999872651676371	WITHOUT_CLASSIFICATION	1.2734832362916226E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999911531471141	WITHOUT_CLASSIFICATION	8.846852885902803E-5	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999277088670203	WITHOUT_CLASSIFICATION	7.229113297971711E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999573014411673	WITHOUT_CLASSIFICATION	4.269855883270103E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999462131838232	WITHOUT_CLASSIFICATION	5.378681617685097E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9996324945092309	WITHOUT_CLASSIFICATION	3.675054907691319E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9993486498013944	WITHOUT_CLASSIFICATION	6.513501986055675E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999090356170554	WITHOUT_CLASSIFICATION	9.096438294459124E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999546400262203	WITHOUT_CLASSIFICATION	4.5359973779659024E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999878855444128	WITHOUT_CLASSIFICATION	1.2114455587195422E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999786824806016	WITHOUT_CLASSIFICATION	2.131751939845782E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999864830286882	WITHOUT_CLASSIFICATION	1.3516971311831678E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999435708345343	WITHOUT_CLASSIFICATION	5.6429165465643524E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.999738286535379	WITHOUT_CLASSIFICATION	2.6171346462106016E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999871085203956	WITHOUT_CLASSIFICATION	1.2891479604384082E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997446752292625	WITHOUT_CLASSIFICATION	2.5532477073753144E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9984687375816742	WITHOUT_CLASSIFICATION	0.0015312624183259065	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998570441721949	WITHOUT_CLASSIFICATION	1.4295582780511043E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996878796195293	WITHOUT_CLASSIFICATION	3.1212038047069996E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999855655569053	WITHOUT_CLASSIFICATION	1.4434443094692826E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999921285781574	WITHOUT_CLASSIFICATION	7.871421842632202E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.99796568188879	WITHOUT_CLASSIFICATION	0.0020343181112100995	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998701514780625	WITHOUT_CLASSIFICATION	1.298485219376177E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998581265719217	WITHOUT_CLASSIFICATION	1.4187342807823938E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999983189567584	WITHOUT_CLASSIFICATION	1.6810432415976757E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999710113389949	WITHOUT_CLASSIFICATION	2.8988661005068116E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999803272542432	WITHOUT_CLASSIFICATION	1.967274575675235E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999203769835986	WITHOUT_CLASSIFICATION	7.962301640147548E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9968928023390782	WITHOUT_CLASSIFICATION	0.0031071976609217834	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999697473179773	WITHOUT_CLASSIFICATION	3.0252682022707204E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998126807320007	WITHOUT_CLASSIFICATION	1.8731926799930488E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9998593117764998	WITHOUT_CLASSIFICATION	1.4068822350027808E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9706216647093638	WITHOUT_CLASSIFICATION	0.029378335290636163	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991276878814424	WITHOUT_CLASSIFICATION	8.723121185577256E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9784359092562352	WITHOUT_CLASSIFICATION	0.021564090743764704	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.964575285010875	WITHOUT_CLASSIFICATION	0.03542471498912493	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999969376346075	WITHOUT_CLASSIFICATION	3.0623653924788742E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998240168149342	WITHOUT_CLASSIFICATION	1.7598318506577656E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999603872845483	WITHOUT_CLASSIFICATION	3.9612715451669384E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998126807320007	WITHOUT_CLASSIFICATION	1.8731926799930488E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999463878311556	WITHOUT_CLASSIFICATION	5.36121688442564E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999918425130037	WITHOUT_CLASSIFICATION	8.157486996304194E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999494964785284	WITHOUT_CLASSIFICATION	5.050352147154548E-5	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998506021818456	WITHOUT_CLASSIFICATION	1.493978181543883E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999232480469054	WITHOUT_CLASSIFICATION	7.675195309466241E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999232480469054	WITHOUT_CLASSIFICATION	7.675195309466241E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999971024441173	WITHOUT_CLASSIFICATION	2.897555882571614E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999272205623129	WITHOUT_CLASSIFICATION	7.277943768710172E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999678346562332	WITHOUT_CLASSIFICATION	3.216534376672261E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9989049138258829	WITHOUT_CLASSIFICATION	0.0010950861741171301	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997776252728456	WITHOUT_CLASSIFICATION	2.223747271542414E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999521506800119	WITHOUT_CLASSIFICATION	4.7849319988141075E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999896678601615	WITHOUT_CLASSIFICATION	1.0332139838497019E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998160225336772	WITHOUT_CLASSIFICATION	1.8397746632277628E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999196921383582	WITHOUT_CLASSIFICATION	8.030786164171756E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996535523144052	WITHOUT_CLASSIFICATION	3.464476855947309E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9996690052440458	WITHOUT_CLASSIFICATION	3.309947559541995E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998567091357569	WITHOUT_CLASSIFICATION	1.4329086424314186E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999681878748057	WITHOUT_CLASSIFICATION	3.181212519428956E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9959753151646684	WITHOUT_CLASSIFICATION	0.004024684835331637	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999147829635278	WITHOUT_CLASSIFICATION	8.521703647222785E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997582243401493	WITHOUT_CLASSIFICATION	2.417756598506585E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9530877972138494	WITHOUT_CLASSIFICATION	0.0469122027861507	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998868874635984	WITHOUT_CLASSIFICATION	1.131125364014934E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999766160029001	WITHOUT_CLASSIFICATION	2.3383997099945206E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996177442610887	WITHOUT_CLASSIFICATION	3.8225573891124113E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999129330705163	WITHOUT_CLASSIFICATION	8.706692948357544E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999988370020345	WITHOUT_CLASSIFICATION	1.1629979654319892E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9998726118969851	WITHOUT_CLASSIFICATION	1.2738810301490773E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999722492335457	WITHOUT_CLASSIFICATION	2.775076645442478E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999712447860819	WITHOUT_CLASSIFICATION	2.8755213918068038E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999548430601419	WITHOUT_CLASSIFICATION	4.515693985797851E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999983830023932	WITHOUT_CLASSIFICATION	1.6169976067955563E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999049359494918	WITHOUT_CLASSIFICATION	9.506405050823888E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999678067478665	WITHOUT_CLASSIFICATION	3.2193252133569274E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999416493951446	WITHOUT_CLASSIFICATION	5.835060485529193E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999049359494918	WITHOUT_CLASSIFICATION	9.506405050823888E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999285200398864	WITHOUT_CLASSIFICATION	7.147996011358183E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999871672598809	WITHOUT_CLASSIFICATION	1.2832740119154714E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998618290060047	WITHOUT_CLASSIFICATION	1.3817099399528236E-4	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996455541482773	WITHOUT_CLASSIFICATION	3.5444585172276225E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998300782819823	WITHOUT_CLASSIFICATION	1.6992171801763064E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998481819411928	WITHOUT_CLASSIFICATION	1.5181805880710655E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998922548836043	WITHOUT_CLASSIFICATION	1.0774511639565038E-4	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998258492822992	WITHOUT_CLASSIFICATION	1.7415071770069868E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9986805513915907	WITHOUT_CLASSIFICATION	0.0013194486084091713	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999075333334689	WITHOUT_CLASSIFICATION	9.246666653109887E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999691470127742	WITHOUT_CLASSIFICATION	3.085298722583289E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999687774526067	WITHOUT_CLASSIFICATION	3.122254739326293E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.99998223549623	WITHOUT_CLASSIFICATION	1.7764503770000844E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999657984581766	WITHOUT_CLASSIFICATION	3.420154182338054E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999147394157063	WITHOUT_CLASSIFICATION	8.526058429367148E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999800303525172	WITHOUT_CLASSIFICATION	1.9969647482801663E-4	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999335808140899	WITHOUT_CLASSIFICATION	6.641918591019864E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9997234862567564	WITHOUT_CLASSIFICATION	2.7651374324354005E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999808508871733	WITHOUT_CLASSIFICATION	1.914911282686031E-5	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998696220531004	WITHOUT_CLASSIFICATION	1.3037794689960112E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999252084526326	WITHOUT_CLASSIFICATION	7.479154736752556E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999534547337383	WITHOUT_CLASSIFICATION	4.6545266261738836E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999547046713048	WITHOUT_CLASSIFICATION	4.52953286951672E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999989421258086	WITHOUT_CLASSIFICATION	1.0578741913980598E-5	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998729233020482	WITHOUT_CLASSIFICATION	1.270766979518419E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998664030860531	WITHOUT_CLASSIFICATION	1.3359691394677895E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9980476053606949	WITHOUT_CLASSIFICATION	0.0019523946393049747	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999449813921769	WITHOUT_CLASSIFICATION	5.5018607823139274E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999298843268618	WITHOUT_CLASSIFICATION	7.011567313826762E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997847832306218	WITHOUT_CLASSIFICATION	2.1521676937823016E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996696571354385	WITHOUT_CLASSIFICATION	3.303428645614491E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9977326228607893	WITHOUT_CLASSIFICATION	0.0022673771392107463	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999979302631631	WITHOUT_CLASSIFICATION	2.0697368368865212E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999121420152796	WITHOUT_CLASSIFICATION	8.785798472050458E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999988389072553	WITHOUT_CLASSIFICATION	1.1610927446155805E-6	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997477167726694	WITHOUT_CLASSIFICATION	2.522832273306452E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999449067112943	WITHOUT_CLASSIFICATION	5.5093288705756475E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997095389038764	WITHOUT_CLASSIFICATION	2.9046109612361346E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997666406039052	WITHOUT_CLASSIFICATION	2.333593960948949E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9993260847538759	WITHOUT_CLASSIFICATION	6.739152461242335E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.99999350081683	WITHOUT_CLASSIFICATION	6.499183169861581E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999763951154109	WITHOUT_CLASSIFICATION	2.360488458905933E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998714205404468	WITHOUT_CLASSIFICATION	1.2857945955327863E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999952362516665	WITHOUT_CLASSIFICATION	4.763748333418616E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999185527238434	WITHOUT_CLASSIFICATION	8.14472761566249E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999986462643569	WITHOUT_CLASSIFICATION	1.3537356430352553E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9991419322741911	WITHOUT_CLASSIFICATION	8.580677258089837E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998574184928902	WITHOUT_CLASSIFICATION	1.4258150710984467E-4	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998928220444981	WITHOUT_CLASSIFICATION	1.0717795550179315E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992277354029351	WITHOUT_CLASSIFICATION	7.72264597064931E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9996604330508299	WITHOUT_CLASSIFICATION	3.395669491701158E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997228183076851	WITHOUT_CLASSIFICATION	2.771816923148779E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997994798836216	WITHOUT_CLASSIFICATION	2.0052011637836963E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999882761840522	WITHOUT_CLASSIFICATION	1.172381594785476E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999817723399683	WITHOUT_CLASSIFICATION	1.8227660031684242E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9998834628962354	WITHOUT_CLASSIFICATION	1.1653710376452331E-4	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998587583480862	WITHOUT_CLASSIFICATION	1.4124165191363198E-4	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998751354658109	WITHOUT_CLASSIFICATION	1.2486453418914903E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997847832306218	WITHOUT_CLASSIFICATION	2.1521676937823016E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997890750964112	WITHOUT_CLASSIFICATION	2.1092490358877168E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999763508361234	WITHOUT_CLASSIFICATION	2.3649163876692276E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999717619876034	WITHOUT_CLASSIFICATION	2.8238012396605253E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999277418627912	WITHOUT_CLASSIFICATION	7.225813720878794E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999990163745136	WITHOUT_CLASSIFICATION	9.836254863905081E-7	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9993660813792332	WITHOUT_CLASSIFICATION	6.339186207667323E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996989387091559	WITHOUT_CLASSIFICATION	3.010612908440369E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999926887202355	WITHOUT_CLASSIFICATION	7.31127976446882E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999538791970302	WITHOUT_CLASSIFICATION	4.6120802969770514E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997692339772041	WITHOUT_CLASSIFICATION	2.3076602279594388E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9988384798737155	WITHOUT_CLASSIFICATION	0.001161520126284524	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999576777068722	WITHOUT_CLASSIFICATION	4.2322293127793916E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999967562400182	WITHOUT_CLASSIFICATION	3.2437599819510234E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997949433650635	WITHOUT_CLASSIFICATION	2.0505663493647743E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992758926728884	WITHOUT_CLASSIFICATION	7.241073271116044E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.99984687155425	WITHOUT_CLASSIFICATION	1.53128445749997E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9992407147594168	WITHOUT_CLASSIFICATION	7.592852405832329E-4	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998021062960091	WITHOUT_CLASSIFICATION	1.9789370399087423E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999722653825969	WITHOUT_CLASSIFICATION	2.7734617403073066E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999807894132711	WITHOUT_CLASSIFICATION	1.9210586729027502E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998807425207521	WITHOUT_CLASSIFICATION	1.1925747924790591E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998807425207521	WITHOUT_CLASSIFICATION	1.1925747924790591E-4	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999629619792219	WITHOUT_CLASSIFICATION	3.703802077823248E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999789682561733	WITHOUT_CLASSIFICATION	2.1031743826725032E-5	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999770844465089	WITHOUT_CLASSIFICATION	2.2915553491103174E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999106511015957	WITHOUT_CLASSIFICATION	8.934889840430254E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999909680297256	WITHOUT_CLASSIFICATION	9.031970274399021E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998926524365285	WITHOUT_CLASSIFICATION	1.0734756347162017E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999496103384493	WITHOUT_CLASSIFICATION	5.038966155067513E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999058553398539	WITHOUT_CLASSIFICATION	9.41446601461063E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999058553398539	WITHOUT_CLASSIFICATION	9.41446601461063E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999665216924146	WITHOUT_CLASSIFICATION	3.3478307585398104E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999564817028167	WITHOUT_CLASSIFICATION	4.3518297183154834E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998532811659809	WITHOUT_CLASSIFICATION	1.4671883401908752E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998585609324636	WITHOUT_CLASSIFICATION	1.414390675363929E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998585609324636	WITHOUT_CLASSIFICATION	1.414390675363929E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998585609324636	WITHOUT_CLASSIFICATION	1.414390675363929E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999537897771417	WITHOUT_CLASSIFICATION	4.621022285843535E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999154258812116	WITHOUT_CLASSIFICATION	8.457411878836821E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999963898177693	WITHOUT_CLASSIFICATION	3.6101822307423616E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998308614210645	WITHOUT_CLASSIFICATION	1.6913857893547198E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999936860909665	WITHOUT_CLASSIFICATION	6.313909033493163E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999889616684284	WITHOUT_CLASSIFICATION	1.1038331571619521E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999661072591415	WITHOUT_CLASSIFICATION	3.3892740858558454E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9506460132672607	WITHOUT_CLASSIFICATION	0.04935398673273919	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999881585240706	WITHOUT_CLASSIFICATION	1.184147592922702E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.999928302273332	WITHOUT_CLASSIFICATION	7.169772666800076E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998936428575553	WITHOUT_CLASSIFICATION	1.0635714244464202E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9986604748145348	WITHOUT_CLASSIFICATION	0.001339525185465207	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999834798963066	WITHOUT_CLASSIFICATION	1.652010369331149E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999729503547314	WITHOUT_CLASSIFICATION	2.7049645268610782E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999910201900654	WITHOUT_CLASSIFICATION	8.979809934672043E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999863964368129	WITHOUT_CLASSIFICATION	1.3603563187139734E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999163626489992	WITHOUT_CLASSIFICATION	8.36373510008318E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998807425207521	WITHOUT_CLASSIFICATION	1.1925747924790591E-4	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999808651105057	WITHOUT_CLASSIFICATION	1.9134889494300044E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9221538459181698	WITHOUT_CLASSIFICATION	0.07784615408183021	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997850291131508	WITHOUT_CLASSIFICATION	2.1497088684914033E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999509395189694	WITHOUT_CLASSIFICATION	4.906048103061588E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999396251072016	WITHOUT_CLASSIFICATION	6.0374892798458645E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998711543095616	WITHOUT_CLASSIFICATION	1.2884569043841143E-4	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999888325092454	WITHOUT_CLASSIFICATION	1.1167490754704776E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9996169769827962	WITHOUT_CLASSIFICATION	3.83023017203853E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998816344717396	WITHOUT_CLASSIFICATION	1.1836552826033539E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998763331674532	WITHOUT_CLASSIFICATION	1.2366683254683928E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9991476261611956	WITHOUT_CLASSIFICATION	8.523738388043796E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999389152016294	WITHOUT_CLASSIFICATION	6.108479837059495E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9996097603037608	WITHOUT_CLASSIFICATION	3.902396962391947E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997646698639782	WITHOUT_CLASSIFICATION	2.3533013602183405E-4	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999776348495217	WITHOUT_CLASSIFICATION	2.2365150478215534E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8611266212432057	WITHOUT_CLASSIFICATION	0.1388733787567942	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9992458422848816	WITHOUT_CLASSIFICATION	7.541577151183127E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999799557258893	WITHOUT_CLASSIFICATION	2.0044274110722635E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999779063923653	WITHOUT_CLASSIFICATION	2.2093607634708744E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999779063923653	WITHOUT_CLASSIFICATION	2.2093607634708744E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999892326736351	WITHOUT_CLASSIFICATION	1.0767326364897648E-4	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999569773508178	WITHOUT_CLASSIFICATION	4.3022649182276955E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998772838829288	WITHOUT_CLASSIFICATION	1.2271611707123957E-4	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999497453072251	WITHOUT_CLASSIFICATION	5.025469277493185E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996129968569424	WITHOUT_CLASSIFICATION	3.870031430575797E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999791572894756	WITHOUT_CLASSIFICATION	2.084271052434914E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9997891925332356	WITHOUT_CLASSIFICATION	2.108074667644226E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998963269968532	WITHOUT_CLASSIFICATION	1.0367300314690878E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999963354338001	WITHOUT_CLASSIFICATION	3.6645661998997435E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999584472299328	WITHOUT_CLASSIFICATION	4.155277006728343E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999181241667081	WITHOUT_CLASSIFICATION	8.187583329189322E-4	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995822352449093	WITHOUT_CLASSIFICATION	4.177647550906362E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999939464714327	WITHOUT_CLASSIFICATION	6.053528567351356E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999165979299997	WITHOUT_CLASSIFICATION	8.340207000042172E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999913337089417	WITHOUT_CLASSIFICATION	8.666291058277133E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9992346366183414	WITHOUT_CLASSIFICATION	7.653633816586902E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999762738851763	WITHOUT_CLASSIFICATION	2.3726114823606504E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999762738851763	WITHOUT_CLASSIFICATION	2.3726114823606504E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998086409544369	WITHOUT_CLASSIFICATION	1.9135904556319763E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.99711615473646	WITHOUT_CLASSIFICATION	0.002883845263540022	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9993317674360074	WITHOUT_CLASSIFICATION	6.682325639926074E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9993317674360074	WITHOUT_CLASSIFICATION	6.682325639926074E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997566511471853	WITHOUT_CLASSIFICATION	2.4334885281474883E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996043509650611	WITHOUT_CLASSIFICATION	3.956490349389697E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999896061425291	WITHOUT_CLASSIFICATION	1.0393857470899003E-4	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.998065683185576	WITHOUT_CLASSIFICATION	0.0019343168144239629	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991380928675336	WITHOUT_CLASSIFICATION	8.619071324663801E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998403535941967	WITHOUT_CLASSIFICATION	1.5964640580335294E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999517886298913	WITHOUT_CLASSIFICATION	4.821137010876347E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.998065683185576	WITHOUT_CLASSIFICATION	0.0019343168144239629	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9978247669659065	WITHOUT_CLASSIFICATION	0.0021752330340935634	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998623443205019	WITHOUT_CLASSIFICATION	1.3765567949811306E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999211951189781	WITHOUT_CLASSIFICATION	7.880488102188796E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998087952969783	WITHOUT_CLASSIFICATION	1.9120470302174596E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9997269286356106	WITHOUT_CLASSIFICATION	2.730713643893697E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999994588299039	WITHOUT_CLASSIFICATION	5.411700961017129E-6	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999595062453541	WITHOUT_CLASSIFICATION	4.0493754645860186E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999317516552734	WITHOUT_CLASSIFICATION	6.824834472667088E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997813719293059	WITHOUT_CLASSIFICATION	2.1862807069396943E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9993476157746459	WITHOUT_CLASSIFICATION	6.52384225354205E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999883369477555	WITHOUT_CLASSIFICATION	1.1663052244503718E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998579797796227	WITHOUT_CLASSIFICATION	1.420202203774166E-4	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999108429356772	WITHOUT_CLASSIFICATION	8.915706432284111E-5	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999870781552435	WITHOUT_CLASSIFICATION	1.2921844756622395E-5	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999912960648153	WITHOUT_CLASSIFICATION	8.703935184686746E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998944604639393	WITHOUT_CLASSIFICATION	1.0553953606071954E-4	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999686226023172	WITHOUT_CLASSIFICATION	3.1377397682717846E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9991310372600223	WITHOUT_CLASSIFICATION	8.689627399778107E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9991310372600223	WITHOUT_CLASSIFICATION	8.689627399778107E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999595062453541	WITHOUT_CLASSIFICATION	4.0493754645860186E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9992244774121715	WITHOUT_CLASSIFICATION	7.755225878286422E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9995941057087738	WITHOUT_CLASSIFICATION	4.0589429122612727E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9953579612693146	WITHOUT_CLASSIFICATION	0.004642038730685347	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9996643609254919	WITHOUT_CLASSIFICATION	3.356390745081375E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999902693330759	WITHOUT_CLASSIFICATION	9.730666924060607E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999810128909865	WITHOUT_CLASSIFICATION	1.8987109013468865E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9998980251848996	WITHOUT_CLASSIFICATION	1.0197481510041864E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9986381882036147	WITHOUT_CLASSIFICATION	0.001361811796385322	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999960031645755	WITHOUT_CLASSIFICATION	3.996835424485842E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999379414970894	WITHOUT_CLASSIFICATION	6.205850291066292E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999742698771624	WITHOUT_CLASSIFICATION	2.5730122837591762E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9974237369383917	WITHOUT_CLASSIFICATION	0.002576263061608282	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9992569725751697	WITHOUT_CLASSIFICATION	7.430274248303076E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999967261277953	WITHOUT_CLASSIFICATION	3.2738722045901305E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999537846278526	WITHOUT_CLASSIFICATION	4.6215372147534486E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999922370251425	WITHOUT_CLASSIFICATION	7.762974857441833E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999969952447048	WITHOUT_CLASSIFICATION	3.004755295253773E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999125051403571	WITHOUT_CLASSIFICATION	8.749485964286695E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999825173934703	WITHOUT_CLASSIFICATION	1.748260652962168E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999473424798322	WITHOUT_CLASSIFICATION	5.2657520167738826E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999740913943018	WITHOUT_CLASSIFICATION	2.5908605698241867E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998049686063463	WITHOUT_CLASSIFICATION	1.9503139365370606E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999313811683306	WITHOUT_CLASSIFICATION	6.861883166935568E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999927409925813	WITHOUT_CLASSIFICATION	7.25900741874417E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999986200325174	WITHOUT_CLASSIFICATION	1.3799674825899192E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999910180714131	WITHOUT_CLASSIFICATION	8.98192858691353E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999582396592149	WITHOUT_CLASSIFICATION	4.176034078495894E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999755827066532	WITHOUT_CLASSIFICATION	2.4417293346718827E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999930746442299	WITHOUT_CLASSIFICATION	6.925355770021892E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.998754950159024	WITHOUT_CLASSIFICATION	0.0012450498409759087	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999537846278526	WITHOUT_CLASSIFICATION	4.6215372147534486E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999978848754788	WITHOUT_CLASSIFICATION	2.1151245211974096E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998366290281592	WITHOUT_CLASSIFICATION	1.6337097184079396E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999822015004821	WITHOUT_CLASSIFICATION	1.7798499517838583E-5	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999820130301762	WITHOUT_CLASSIFICATION	1.7986969823802185E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9993080063993945	WITHOUT_CLASSIFICATION	6.919936006054781E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998405251295158	WITHOUT_CLASSIFICATION	1.5947487048413318E-4	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999526483873964	WITHOUT_CLASSIFICATION	4.735161260365057E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998732048822229	WITHOUT_CLASSIFICATION	1.267951177771066E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9993858989457681	WITHOUT_CLASSIFICATION	6.141010542318652E-4	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999586759749673	WITHOUT_CLASSIFICATION	4.132402503268565E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997270054270739	WITHOUT_CLASSIFICATION	2.7299457292612335E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6486779944343785	WITHOUT_CLASSIFICATION	0.35132200556562165	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997413702092075	WITHOUT_CLASSIFICATION	2.5862979079248685E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997786954630495	WITHOUT_CLASSIFICATION	2.2130453695045547E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999414268887892	WITHOUT_CLASSIFICATION	5.8573111210766646E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9992245686486849	WITHOUT_CLASSIFICATION	7.754313513152047E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997278774617754	WITHOUT_CLASSIFICATION	2.721225382246772E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999861982093606	WITHOUT_CLASSIFICATION	1.3801790639297468E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999814461093774	WITHOUT_CLASSIFICATION	1.8553890622597852E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995593723774014	WITHOUT_CLASSIFICATION	4.406276225985681E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991380928675336	WITHOUT_CLASSIFICATION	8.619071324663801E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994110412967	WITHOUT_CLASSIFICATION	5.8895870323646E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999537846278526	WITHOUT_CLASSIFICATION	4.6215372147534486E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9983328328231099	WITHOUT_CLASSIFICATION	0.0016671671768900668	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999754293240083	WITHOUT_CLASSIFICATION	2.4570675991701353E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999712929448	WITHOUT_CLASSIFICATION	2.870705519990698E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999711662487092	WITHOUT_CLASSIFICATION	2.88337512908088E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998967348758836	WITHOUT_CLASSIFICATION	1.0326512411638975E-4	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999906397151376	WITHOUT_CLASSIFICATION	9.360284862402603E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996547068283178	WITHOUT_CLASSIFICATION	3.452931716821414E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999882166412964	WITHOUT_CLASSIFICATION	1.1783358703524148E-5	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9850522928611023	WITHOUT_CLASSIFICATION	0.014947707138897664	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998564298330606	WITHOUT_CLASSIFICATION	1.4357016693944811E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999866015968523	WITHOUT_CLASSIFICATION	1.339840314773922E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999969728026852	WITHOUT_CLASSIFICATION	3.0271973148358167E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999289677171955	WITHOUT_CLASSIFICATION	7.103228280458034E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999289677171955	WITHOUT_CLASSIFICATION	7.103228280458034E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999966880569106	WITHOUT_CLASSIFICATION	3.3119430893887622E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997434918959913	WITHOUT_CLASSIFICATION	2.565081040086679E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999963855140155	WITHOUT_CLASSIFICATION	3.6144859845463242E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999992259398657	WITHOUT_CLASSIFICATION	7.740601343042643E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998456520891642	WITHOUT_CLASSIFICATION	1.543479108357944E-4	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999377573578944	WITHOUT_CLASSIFICATION	6.224264210562622E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9994113407203663	WITHOUT_CLASSIFICATION	5.886592796336331E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997496010250547	WITHOUT_CLASSIFICATION	2.5039897494524843E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999715214011641	WITHOUT_CLASSIFICATION	2.8478598835980367E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999684227620542	WITHOUT_CLASSIFICATION	3.1577237945778796E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999059900523388	WITHOUT_CLASSIFICATION	9.400994766105725E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999059900523388	WITHOUT_CLASSIFICATION	9.400994766105725E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9997566362281469	WITHOUT_CLASSIFICATION	2.4336377185311354E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999203333009271	WITHOUT_CLASSIFICATION	7.966669907289716E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9983851621488968	WITHOUT_CLASSIFICATION	0.0016148378511032682	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997025310234123	WITHOUT_CLASSIFICATION	2.974689765876588E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999992570817594	WITHOUT_CLASSIFICATION	7.4291824059404196E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9993388735499192	WITHOUT_CLASSIFICATION	6.611264500806935E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998201261673445	WITHOUT_CLASSIFICATION	1.798738326554557E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991651553136864	WITHOUT_CLASSIFICATION	8.348446863136262E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998670551370498	WITHOUT_CLASSIFICATION	1.3294486295019784E-4	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998646624381712	WITHOUT_CLASSIFICATION	1.353375618288697E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999636053977418	WITHOUT_CLASSIFICATION	3.6394602258197886E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998070609088934	WITHOUT_CLASSIFICATION	1.929390911066393E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999095192442017	WITHOUT_CLASSIFICATION	9.048075579830448E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999460360697016	WITHOUT_CLASSIFICATION	5.396393029839134E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992669012827903	WITHOUT_CLASSIFICATION	7.330987172097967E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999122881561043	WITHOUT_CLASSIFICATION	8.77118438956329E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9883816034213148	WITHOUT_CLASSIFICATION	0.011618396578685125	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996932220835586	WITHOUT_CLASSIFICATION	3.0677791644138626E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999893927408198	WITHOUT_CLASSIFICATION	1.0607259180190348E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.99993831193974	WITHOUT_CLASSIFICATION	6.168806025994856E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996177442610887	WITHOUT_CLASSIFICATION	3.8225573891124113E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999629906581438	WITHOUT_CLASSIFICATION	3.700934185623052E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9994399129505561	WITHOUT_CLASSIFICATION	5.600870494437881E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998938592462802	WITHOUT_CLASSIFICATION	1.061407537198394E-4	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999209585845652	WITHOUT_CLASSIFICATION	7.904141543482135E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998857070089916	WITHOUT_CLASSIFICATION	1.1429299100832973E-4	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998666622548967	WITHOUT_CLASSIFICATION	1.3333774510321424E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999982944078909	WITHOUT_CLASSIFICATION	1.7055921091103365E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999379923935288	WITHOUT_CLASSIFICATION	6.200760647121371E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999043550915556	WITHOUT_CLASSIFICATION	9.564490844440523E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9960004574018989	WITHOUT_CLASSIFICATION	0.003999542598101117	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999613935904343	WITHOUT_CLASSIFICATION	3.860640956560386E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998875851746	WITHOUT_CLASSIFICATION	1.1241482546072718E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998255848664215	WITHOUT_CLASSIFICATION	1.7441513357846166E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998996608055108	WITHOUT_CLASSIFICATION	1.0033919448917687E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999965377711242	WITHOUT_CLASSIFICATION	3.462228875905009E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999821295208952	WITHOUT_CLASSIFICATION	1.7870479104805347E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999744609263523	WITHOUT_CLASSIFICATION	2.553907364769641E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999828518410442	WITHOUT_CLASSIFICATION	1.7148158955716983E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9988376073373345	WITHOUT_CLASSIFICATION	0.0011623926626654203	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9996316853250053	WITHOUT_CLASSIFICATION	3.683146749945603E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999883238506839	WITHOUT_CLASSIFICATION	1.1676149316096685E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.999937111121603	WITHOUT_CLASSIFICATION	6.28888783970812E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997291520411618	WITHOUT_CLASSIFICATION	2.708479588382435E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999051932129501	WITHOUT_CLASSIFICATION	9.480678704989946E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9988811607621053	WITHOUT_CLASSIFICATION	0.0011188392378947273	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999663356305298	WITHOUT_CLASSIFICATION	3.3664369470125855E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999333772188128	WITHOUT_CLASSIFICATION	6.662278118729382E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999788825544634	WITHOUT_CLASSIFICATION	2.1117445536498805E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9985045341118196	WITHOUT_CLASSIFICATION	0.001495465888180398	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999429691376898	WITHOUT_CLASSIFICATION	5.703086231019155E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999884418344485	WITHOUT_CLASSIFICATION	1.1558165551496558E-4	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999507512686294	WITHOUT_CLASSIFICATION	4.9248731370547376E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999134795292188	WITHOUT_CLASSIFICATION	8.652047078118151E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999507512686294	WITHOUT_CLASSIFICATION	4.9248731370547376E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9892859371905319	WITHOUT_CLASSIFICATION	0.010714062809467982	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9932204240850045	WITHOUT_CLASSIFICATION	0.0067795759149954764	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999429203736334	WITHOUT_CLASSIFICATION	5.7079626366607175E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999914086070627	WITHOUT_CLASSIFICATION	8.591392937380971E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998383977013408	WITHOUT_CLASSIFICATION	1.6160229865935756E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999429203736334	WITHOUT_CLASSIFICATION	5.7079626366607175E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999934897268477	WITHOUT_CLASSIFICATION	6.510273152297068E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996063285896669	WITHOUT_CLASSIFICATION	3.936714103330627E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999499859276951	WITHOUT_CLASSIFICATION	5.001407230474383E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999509552999768	WITHOUT_CLASSIFICATION	4.904470002322481E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999865409245189	WITHOUT_CLASSIFICATION	1.3459075481213229E-5	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999653979050728	WITHOUT_CLASSIFICATION	3.4602094927196846E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999988866923069	WITHOUT_CLASSIFICATION	1.1133076931983034E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998583278436882	WITHOUT_CLASSIFICATION	1.416721563118139E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999798792521246	WITHOUT_CLASSIFICATION	2.0120747875398807E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999443639782097	WITHOUT_CLASSIFICATION	5.5636021790201276E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9989101591222996	WITHOUT_CLASSIFICATION	0.0010898408777003893	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999402466298398	WITHOUT_CLASSIFICATION	5.9753370160297645E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9997926201021081	WITHOUT_CLASSIFICATION	2.073798978918267E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999323384704285	WITHOUT_CLASSIFICATION	6.766152957140969E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998964991884784	WITHOUT_CLASSIFICATION	1.0350081152145895E-4	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999579045207432	WITHOUT_CLASSIFICATION	4.209547925680349E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9992203036148403	WITHOUT_CLASSIFICATION	7.796963851598363E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999459916550158	WITHOUT_CLASSIFICATION	5.400834498420352E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998512837330674	WITHOUT_CLASSIFICATION	1.4871626693268883E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9974983386075895	WITHOUT_CLASSIFICATION	0.002501661392410464	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9992163534233158	WITHOUT_CLASSIFICATION	7.83646576684142E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9995860452531774	WITHOUT_CLASSIFICATION	4.1395474682253303E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996939646426459	WITHOUT_CLASSIFICATION	3.0603535735398925E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9988666734289093	WITHOUT_CLASSIFICATION	0.001133326571090697	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9104259029018974	WITHOUT_CLASSIFICATION	0.08957409709810264	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.986106040900848	WITHOUT_CLASSIFICATION	0.013893959099152042	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999897219147005	WITHOUT_CLASSIFICATION	1.0278085299407663E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999175777564271	WITHOUT_CLASSIFICATION	8.242224357286601E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998864996694592	WITHOUT_CLASSIFICATION	1.1350033054076069E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999931952439289	WITHOUT_CLASSIFICATION	6.80475607108076E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998591560129015	WITHOUT_CLASSIFICATION	1.4084398709847724E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9768204018974668	WITHOUT_CLASSIFICATION	0.023179598102533283	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9974983386075895	WITHOUT_CLASSIFICATION	0.002501661392410464	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999635944258919	WITHOUT_CLASSIFICATION	3.64055741081764E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9994788475156015	WITHOUT_CLASSIFICATION	5.211524843984262E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997144654852164	WITHOUT_CLASSIFICATION	2.855345147835948E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998384080341327	WITHOUT_CLASSIFICATION	1.615919658672954E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999963088016981	WITHOUT_CLASSIFICATION	3.6911983018164123E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999755678690346	WITHOUT_CLASSIFICATION	2.4432130965386128E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.990516182203799	WITHOUT_CLASSIFICATION	0.009483817796201057	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998509613297379	WITHOUT_CLASSIFICATION	1.4903867026194454E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989750122886626	WITHOUT_CLASSIFICATION	0.0010249877113374117	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999131503401459	WITHOUT_CLASSIFICATION	8.684965985402377E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999993993588677	WITHOUT_CLASSIFICATION	6.006411323351409E-7	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999673436073709	WITHOUT_CLASSIFICATION	3.265639262906782E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999009188190956	WITHOUT_CLASSIFICATION	9.908118090442802E-5	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999828576820613	WITHOUT_CLASSIFICATION	1.7142317938684596E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999871925898563	WITHOUT_CLASSIFICATION	1.2807410143689932E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999347588119882	WITHOUT_CLASSIFICATION	6.524118801183511E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.998293731143879	WITHOUT_CLASSIFICATION	0.0017062688561210269	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997995989497627	WITHOUT_CLASSIFICATION	2.004010502374489E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994946172688625	WITHOUT_CLASSIFICATION	5.05382731137648E-4	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9990381167996766	WITHOUT_CLASSIFICATION	9.618832003234565E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997243790761636	WITHOUT_CLASSIFICATION	2.7562092383641044E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997243790761636	WITHOUT_CLASSIFICATION	2.7562092383641044E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999393110870938	WITHOUT_CLASSIFICATION	6.068891290628234E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997243790761636	WITHOUT_CLASSIFICATION	2.7562092383641044E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997243790761636	WITHOUT_CLASSIFICATION	2.7562092383641044E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9859452732669238	WITHOUT_CLASSIFICATION	0.014054726733076242	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9983880118024896	WITHOUT_CLASSIFICATION	0.0016119881975103746	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998333681938419	WITHOUT_CLASSIFICATION	1.6663180615803725E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998333681938419	WITHOUT_CLASSIFICATION	1.6663180615803725E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.998066773744102	WITHOUT_CLASSIFICATION	0.0019332262558980375	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999874356657246	WITHOUT_CLASSIFICATION	1.2564334275436392E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9967073323830263	WITHOUT_CLASSIFICATION	0.0032926676169736605	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999195852642403	WITHOUT_CLASSIFICATION	8.041473575967617E-5	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998411508190584	WITHOUT_CLASSIFICATION	1.5884918094154421E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998830605001807	WITHOUT_CLASSIFICATION	1.1693949981937583E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994481074088915	WITHOUT_CLASSIFICATION	5.518925911085241E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999276936312598	WITHOUT_CLASSIFICATION	7.230636874024095E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998713196914123	WITHOUT_CLASSIFICATION	1.2868030858770478E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998018333157696	WITHOUT_CLASSIFICATION	1.9816668423034762E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996534991748326	WITHOUT_CLASSIFICATION	3.465008251673281E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9974271798142207	WITHOUT_CLASSIFICATION	0.0025728201857793177	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999804290779691	WITHOUT_CLASSIFICATION	1.957092203081923E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999116592223182	WITHOUT_CLASSIFICATION	8.83407776818368E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.99845991968696	WITHOUT_CLASSIFICATION	0.0015400803130399198	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9996248644383269	WITHOUT_CLASSIFICATION	3.751355616731932E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9993072285886644	WITHOUT_CLASSIFICATION	6.927714113355265E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999839857855098	WITHOUT_CLASSIFICATION	1.6014214490176393E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999804290779691	WITHOUT_CLASSIFICATION	1.957092203081923E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9992163534233158	WITHOUT_CLASSIFICATION	7.83646576684142E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9996189605370566	WITHOUT_CLASSIFICATION	3.810394629433878E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994750326483124	WITHOUT_CLASSIFICATION	5.249673516875811E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992285148573001	WITHOUT_CLASSIFICATION	7.714851426998533E-4	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999279492976286	WITHOUT_CLASSIFICATION	7.205070237135214E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998958164877059	WITHOUT_CLASSIFICATION	1.0418351229420836E-4	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999469945647299	WITHOUT_CLASSIFICATION	5.300543527006844E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997624276818671	WITHOUT_CLASSIFICATION	2.3757231813293725E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999640124131755	WITHOUT_CLASSIFICATION	3.598758682459394E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999992326657883	WITHOUT_CLASSIFICATION	7.673342116616208E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999865410355444	WITHOUT_CLASSIFICATION	1.345896445560543E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999111498880485	WITHOUT_CLASSIFICATION	8.885011195143126E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9995917366369688	WITHOUT_CLASSIFICATION	4.082633630311778E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998550491125509	WITHOUT_CLASSIFICATION	1.449508874491366E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9932537309867702	WITHOUT_CLASSIFICATION	0.006746269013229855	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999315216876575	WITHOUT_CLASSIFICATION	6.84783123425574E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999625479745197	WITHOUT_CLASSIFICATION	3.745202548034524E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998117317938293	WITHOUT_CLASSIFICATION	1.8826820617079775E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9997895923538264	WITHOUT_CLASSIFICATION	2.1040764617358574E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997426801958882	WITHOUT_CLASSIFICATION	2.5731980411179234E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995277521733663	WITHOUT_CLASSIFICATION	4.7224782663371717E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9993064996514435	WITHOUT_CLASSIFICATION	6.935003485565084E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999989860548569	WITHOUT_CLASSIFICATION	1.013945143001001E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999640124131755	WITHOUT_CLASSIFICATION	3.598758682459394E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998899140003324	WITHOUT_CLASSIFICATION	1.1008599966762151E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9998862037448786	WITHOUT_CLASSIFICATION	1.137962551213524E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997699564983092	WITHOUT_CLASSIFICATION	2.3004350169087039E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999353925091854	WITHOUT_CLASSIFICATION	6.460749081451293E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998599408248536	WITHOUT_CLASSIFICATION	1.4005917514633558E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998837460342564	WITHOUT_CLASSIFICATION	1.1625396574345194E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999177111148767	WITHOUT_CLASSIFICATION	8.228888512320248E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9998834174940184	WITHOUT_CLASSIFICATION	1.1658250598158701E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9998609514756112	WITHOUT_CLASSIFICATION	1.3904852438889625E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999909547736029	WITHOUT_CLASSIFICATION	9.045226397104972E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999976620686102	WITHOUT_CLASSIFICATION	2.337931389795988E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999747336704796	WITHOUT_CLASSIFICATION	2.5266329520312202E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999359600082097	WITHOUT_CLASSIFICATION	6.4039991790251E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999463474638631	WITHOUT_CLASSIFICATION	5.365253613678575E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994458499471777	WITHOUT_CLASSIFICATION	5.541500528222803E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999909547736029	WITHOUT_CLASSIFICATION	9.045226397104972E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999944274849069	WITHOUT_CLASSIFICATION	5.572515093164995E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9975037769272425	WITHOUT_CLASSIFICATION	0.002496223072757494	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998577916735909	WITHOUT_CLASSIFICATION	1.422083264091034E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999674651185316	WITHOUT_CLASSIFICATION	3.2534881468369464E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.999954279089639	WITHOUT_CLASSIFICATION	4.572091036114792E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999521033332442	WITHOUT_CLASSIFICATION	4.789666675581125E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998880746391646	WITHOUT_CLASSIFICATION	1.1192536083533542E-4	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999795838849202	WITHOUT_CLASSIFICATION	2.0416115079792437E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998330314329865	WITHOUT_CLASSIFICATION	1.669685670134922E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995940935512501	WITHOUT_CLASSIFICATION	4.0590644875003446E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995940935512501	WITHOUT_CLASSIFICATION	4.0590644875003446E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995940935512501	WITHOUT_CLASSIFICATION	4.0590644875003446E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999079949122869	WITHOUT_CLASSIFICATION	9.200508771302315E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999079949122869	WITHOUT_CLASSIFICATION	9.200508771302315E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9988781608432746	WITHOUT_CLASSIFICATION	0.0011218391567253425	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999948384345642	WITHOUT_CLASSIFICATION	5.161565435916058E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997712043759411	WITHOUT_CLASSIFICATION	2.287956240587783E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9998129187218869	WITHOUT_CLASSIFICATION	1.8708127811296464E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.998886746593057	WITHOUT_CLASSIFICATION	0.0011132534069430108	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998082118771086	WITHOUT_CLASSIFICATION	1.917881228914303E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998336048674438	WITHOUT_CLASSIFICATION	1.6639513255613863E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996200480264769	WITHOUT_CLASSIFICATION	3.7995197352316866E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443794393705	WITHOUT_CLASSIFICATION	5.56205606293708E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998082118771086	WITHOUT_CLASSIFICATION	1.917881228914303E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998336048674438	WITHOUT_CLASSIFICATION	1.6639513255613863E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999768537623924	WITHOUT_CLASSIFICATION	2.3146237607473693E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998595911753352	WITHOUT_CLASSIFICATION	1.404088246649125E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999898653865762	WITHOUT_CLASSIFICATION	1.0134613423851914E-5	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9997483320364421	WITHOUT_CLASSIFICATION	2.516679635578893E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998874677389741	WITHOUT_CLASSIFICATION	1.1253226102582799E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999219306071537	WITHOUT_CLASSIFICATION	7.806939284627191E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999344374386483	WITHOUT_CLASSIFICATION	6.556256135175221E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999988259943381	WITHOUT_CLASSIFICATION	1.1740056619053136E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995323350608536	WITHOUT_CLASSIFICATION	4.676649391464174E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9945957225342261	WITHOUT_CLASSIFICATION	0.005404277465773923	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999729040186483	WITHOUT_CLASSIFICATION	2.70959813516913E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999702188609594	WITHOUT_CLASSIFICATION	2.9781139040608825E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998469913378506	WITHOUT_CLASSIFICATION	1.5300866214942375E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995302042646331	WITHOUT_CLASSIFICATION	4.697957353669349E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999407942426762	WITHOUT_CLASSIFICATION	5.920575732381303E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999252997903264	WITHOUT_CLASSIFICATION	7.470020967352359E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9979556660014015	WITHOUT_CLASSIFICATION	0.002044333998598427	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999934328912846	WITHOUT_CLASSIFICATION	6.567108715400059E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9996849426048765	WITHOUT_CLASSIFICATION	3.150573951235469E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999632553049955	WITHOUT_CLASSIFICATION	3.6744695004533524E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999985675098897	WITHOUT_CLASSIFICATION	1.4324901102904192E-6	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9991546759528793	WITHOUT_CLASSIFICATION	8.45324047120696E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998053078973534	WITHOUT_CLASSIFICATION	1.9469210264661137E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998088116788679	WITHOUT_CLASSIFICATION	1.9118832113199373E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999151710892	WITHOUT_CLASSIFICATION	8.482891078021976E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322466208249	WITHOUT_CLASSIFICATION	1.677533791750747E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995629727895521	WITHOUT_CLASSIFICATION	4.370272104478891E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997491156217159	WITHOUT_CLASSIFICATION	2.508843782841998E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997491156217159	WITHOUT_CLASSIFICATION	2.508843782841998E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996029692841724	WITHOUT_CLASSIFICATION	3.970307158275451E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9993973695454376	WITHOUT_CLASSIFICATION	6.026304545624552E-4	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.99990493644246	WITHOUT_CLASSIFICATION	9.50635575398887E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999754720067431	WITHOUT_CLASSIFICATION	2.452799325684375E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998733897476217	WITHOUT_CLASSIFICATION	1.2661025237821507E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9992920236866148	WITHOUT_CLASSIFICATION	7.079763133850339E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999926620372072	WITHOUT_CLASSIFICATION	7.337962792758393E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999810921105419	WITHOUT_CLASSIFICATION	1.8907889458140693E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998670068025335	WITHOUT_CLASSIFICATION	1.3299319746651588E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641866396873	WITHOUT_CLASSIFICATION	1.3581336031269064E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998647636216362	WITHOUT_CLASSIFICATION	1.3523637836380072E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9990879368937402	WITHOUT_CLASSIFICATION	9.120631062597884E-4	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997254257916931	WITHOUT_CLASSIFICATION	2.745742083069703E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985689045150848	WITHOUT_CLASSIFICATION	0.0014310954849152298	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9994459391403517	WITHOUT_CLASSIFICATION	5.540608596482131E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999834659886276	WITHOUT_CLASSIFICATION	1.6534011372406483E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998636581545368	WITHOUT_CLASSIFICATION	1.3634184546313947E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999864843592018	WITHOUT_CLASSIFICATION	1.3515640798186467E-5	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999960046934991	WITHOUT_CLASSIFICATION	3.99530650091257E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985689045150848	WITHOUT_CLASSIFICATION	0.0014310954849152298	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985689045150848	WITHOUT_CLASSIFICATION	0.0014310954849152298	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998653378921543	WITHOUT_CLASSIFICATION	1.3466210784578964E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999860303038623	WITHOUT_CLASSIFICATION	1.396969613767655E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998254647289836	WITHOUT_CLASSIFICATION	1.7453527101642273E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999290732311222	WITHOUT_CLASSIFICATION	7.092676887775007E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997646698639782	WITHOUT_CLASSIFICATION	2.3533013602183405E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999252997903264	WITHOUT_CLASSIFICATION	7.470020967352359E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999307141044492	WITHOUT_CLASSIFICATION	6.928589555076329E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999545021816515	WITHOUT_CLASSIFICATION	4.5497818348596544E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999141733562995	WITHOUT_CLASSIFICATION	8.582664370042882E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998735887685507	WITHOUT_CLASSIFICATION	1.264112314493894E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9995475904302659	WITHOUT_CLASSIFICATION	4.5240956973409044E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998496565300398	WITHOUT_CLASSIFICATION	1.5034346996020302E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999703317034303	WITHOUT_CLASSIFICATION	2.9668296569689977E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999703317034303	WITHOUT_CLASSIFICATION	2.9668296569689977E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999703317034303	WITHOUT_CLASSIFICATION	2.9668296569689977E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999703317034303	WITHOUT_CLASSIFICATION	2.9668296569689977E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640981930212	WITHOUT_CLASSIFICATION	1.3590180697873453E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9996325253082264	WITHOUT_CLASSIFICATION	3.6747469177352064E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597455848649	WITHOUT_CLASSIFICATION	2.402544151350766E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9985904811581118	WITHOUT_CLASSIFICATION	0.0014095188418882492	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999854687984149	WITHOUT_CLASSIFICATION	1.4531201585101718E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998378746313941	WITHOUT_CLASSIFICATION	1.62125368605858E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998618480724407	WITHOUT_CLASSIFICATION	1.3815192755921348E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999714448105488	WITHOUT_CLASSIFICATION	2.8555189451279243E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999904158868786	WITHOUT_CLASSIFICATION	9.58411312145496E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999923123457368	WITHOUT_CLASSIFICATION	7.687654263060392E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999050601581408	WITHOUT_CLASSIFICATION	9.49398418591365E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999021696614674	WITHOUT_CLASSIFICATION	9.783033853260206E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998533691451317	WITHOUT_CLASSIFICATION	1.4663085486838615E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999169182845554	WITHOUT_CLASSIFICATION	8.308171544458349E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999940561276731	WITHOUT_CLASSIFICATION	5.943872326834227E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999940561276731	WITHOUT_CLASSIFICATION	5.943872326834227E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999618394321549	WITHOUT_CLASSIFICATION	3.816056784513868E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999686737760772	WITHOUT_CLASSIFICATION	3.1326223922735E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999963431120292	WITHOUT_CLASSIFICATION	3.6568879708456153E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997653552647434	WITHOUT_CLASSIFICATION	2.3464473525663796E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997653552647434	WITHOUT_CLASSIFICATION	2.3464473525663796E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9994192654287869	WITHOUT_CLASSIFICATION	5.807345712131629E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995940935512501	WITHOUT_CLASSIFICATION	4.0590644875003446E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9998900482663939	WITHOUT_CLASSIFICATION	1.0995173360601593E-4	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999687110220409	WITHOUT_CLASSIFICATION	3.128897795912403E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999992190657488	WITHOUT_CLASSIFICATION	7.809342510275186E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9949843259952156	WITHOUT_CLASSIFICATION	0.0050156740047843824	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998123863158235	WITHOUT_CLASSIFICATION	1.8761368417647578E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9993027676136516	WITHOUT_CLASSIFICATION	6.972323863483916E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999811952920654	WITHOUT_CLASSIFICATION	1.8804707934501407E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998645447540624	WITHOUT_CLASSIFICATION	1.3545524593768722E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999474086727557	WITHOUT_CLASSIFICATION	5.2591327244390804E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997207257474516	WITHOUT_CLASSIFICATION	2.7927425254836057E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998155299785895	WITHOUT_CLASSIFICATION	1.844700214105239E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999617410037026	WITHOUT_CLASSIFICATION	3.825899629740251E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999662572531	WITHOUT_CLASSIFICATION	3.3742746901621804E-7	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999981978997726	WITHOUT_CLASSIFICATION	1.8021002274537445E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999979076151584	WITHOUT_CLASSIFICATION	2.0923848416943096E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999973542710751	WITHOUT_CLASSIFICATION	2.6457289250391847E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999620890911222	WITHOUT_CLASSIFICATION	3.7910908877951424E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996245212206575	WITHOUT_CLASSIFICATION	3.754787793425597E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9960245040270648	WITHOUT_CLASSIFICATION	0.00397549597293526	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998926026426911	WITHOUT_CLASSIFICATION	1.0739735730882419E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999805493121774	WITHOUT_CLASSIFICATION	1.9450687822634083E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998225729386577	WITHOUT_CLASSIFICATION	1.7742706134231078E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999946009928317	WITHOUT_CLASSIFICATION	5.399007168391552E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999068329803101	WITHOUT_CLASSIFICATION	9.316701968988991E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9991918806298847	WITHOUT_CLASSIFICATION	8.081193701151916E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999856856478655	WITHOUT_CLASSIFICATION	1.4314352134420974E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992713632290788	WITHOUT_CLASSIFICATION	7.286367709210648E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997582243401493	WITHOUT_CLASSIFICATION	2.417756598506585E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999965552809396	WITHOUT_CLASSIFICATION	3.4447190603617554E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999812401789594	WITHOUT_CLASSIFICATION	1.8759821040627133E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999581857401239	WITHOUT_CLASSIFICATION	4.181425987611942E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9978685000634385	WITHOUT_CLASSIFICATION	0.0021314999365614953	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998745420967821	WITHOUT_CLASSIFICATION	1.254579032179143E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997582895650016	WITHOUT_CLASSIFICATION	2.4171043499843947E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998971796745822	WITHOUT_CLASSIFICATION	1.0282032541782823E-4	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999895705222028	WITHOUT_CLASSIFICATION	1.0429477797206214E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996170480516049	WITHOUT_CLASSIFICATION	3.829519483950859E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998842546010215	WITHOUT_CLASSIFICATION	1.1574539897862559E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999574419351512	WITHOUT_CLASSIFICATION	4.255806484870257E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999822864295339	WITHOUT_CLASSIFICATION	1.771357046610413E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.99994347484447	WITHOUT_CLASSIFICATION	5.6525155529950835E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999860589677912	WITHOUT_CLASSIFICATION	1.3941032208690446E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999461008352991	WITHOUT_CLASSIFICATION	5.3899164700982704E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983442216276021	WITHOUT_CLASSIFICATION	0.0016557783723979036	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9987711219433273	WITHOUT_CLASSIFICATION	0.0012288780566727976	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996160205739361	WITHOUT_CLASSIFICATION	3.8397942606403096E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999639400662099	WITHOUT_CLASSIFICATION	3.605993379004258E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999653722862005	WITHOUT_CLASSIFICATION	3.462771379950294E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.999957732397727	WITHOUT_CLASSIFICATION	4.226760227296817E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999867843859341	WITHOUT_CLASSIFICATION	1.321561406581819E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998263096907806	WITHOUT_CLASSIFICATION	1.7369030921930787E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999783322661803	WITHOUT_CLASSIFICATION	2.1667733819773546E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998152300439657	WITHOUT_CLASSIFICATION	1.847699560342611E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999812908613152	WITHOUT_CLASSIFICATION	1.8709138684949927E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998782831979618	WITHOUT_CLASSIFICATION	1.2171680203826519E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999310829797723	WITHOUT_CLASSIFICATION	6.89170202276536E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999255209204163	WITHOUT_CLASSIFICATION	7.447907958368439E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999322565517352	WITHOUT_CLASSIFICATION	6.774344826480489E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999857924123586	WITHOUT_CLASSIFICATION	1.420758764146322E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9994298475553837	WITHOUT_CLASSIFICATION	5.701524446163435E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999621397046867	WITHOUT_CLASSIFICATION	3.786029531329023E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999378289329691	WITHOUT_CLASSIFICATION	6.217106703078931E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999600959868736	WITHOUT_CLASSIFICATION	3.990401312627181E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999724148155056	WITHOUT_CLASSIFICATION	2.758518449436208E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999968046429513	WITHOUT_CLASSIFICATION	3.195357048746742E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999807337516132	WITHOUT_CLASSIFICATION	1.9266248386784974E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998485133782072	WITHOUT_CLASSIFICATION	1.5148662179276394E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999905649431667	WITHOUT_CLASSIFICATION	9.435056833255608E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999756728974407	WITHOUT_CLASSIFICATION	2.4327102559293848E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9997813922234157	WITHOUT_CLASSIFICATION	2.186077765842284E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999549979625587	WITHOUT_CLASSIFICATION	4.50020374413687E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999828662829694	WITHOUT_CLASSIFICATION	1.7133717030635967E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998510084187079	WITHOUT_CLASSIFICATION	1.4899158129206083E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999519484353305	WITHOUT_CLASSIFICATION	4.8051564669486535E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999579045207432	WITHOUT_CLASSIFICATION	4.209547925680349E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996848035483	WITHOUT_CLASSIFICATION	3.151964517000907E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9995942245723664	WITHOUT_CLASSIFICATION	4.057754276336764E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999227380791118	WITHOUT_CLASSIFICATION	7.726192088824125E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999735337020915	WITHOUT_CLASSIFICATION	2.6466297908499885E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999468672844076	WITHOUT_CLASSIFICATION	5.31327155924787E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9984489336821796	WITHOUT_CLASSIFICATION	0.0015510663178203955	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996554445118808	WITHOUT_CLASSIFICATION	3.445554881190618E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9994485197056286	WITHOUT_CLASSIFICATION	5.514802943713548E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998660697217719	WITHOUT_CLASSIFICATION	1.339302782279629E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.99987419351503	WITHOUT_CLASSIFICATION	1.2580648497003468E-4	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9988978108787844	WITHOUT_CLASSIFICATION	0.001102189121215627	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999525574603333	WITHOUT_CLASSIFICATION	4.74425396666469E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999719327381252	WITHOUT_CLASSIFICATION	2.8067261874675984E-5	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999967530132284	WITHOUT_CLASSIFICATION	3.2469867715630626E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999394497836654	WITHOUT_CLASSIFICATION	6.0550216334506205E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999467028076772	WITHOUT_CLASSIFICATION	5.32971923227217E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999686680682088	WITHOUT_CLASSIFICATION	3.133193179112529E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999662625917379	WITHOUT_CLASSIFICATION	3.373740826209975E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999662625917379	WITHOUT_CLASSIFICATION	3.373740826209975E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999237880757961	WITHOUT_CLASSIFICATION	7.621192420390933E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9992965323264641	WITHOUT_CLASSIFICATION	7.034676735358118E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998060865539072	WITHOUT_CLASSIFICATION	1.9391344609275048E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9976741980481726	WITHOUT_CLASSIFICATION	0.002325801951827433	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998238365381692	WITHOUT_CLASSIFICATION	1.761634618307719E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998484659948727	WITHOUT_CLASSIFICATION	0.0015153400512728987	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998600550808151	WITHOUT_CLASSIFICATION	1.3994491918481079E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999678813070497	WITHOUT_CLASSIFICATION	3.2118692950232575E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.998870428773443	WITHOUT_CLASSIFICATION	0.0011295712265569741	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999915029784923	WITHOUT_CLASSIFICATION	8.497021507685036E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9990743389858573	WITHOUT_CLASSIFICATION	9.25661014142727E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999399843069371	WITHOUT_CLASSIFICATION	6.001569306279239E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999781636328625	WITHOUT_CLASSIFICATION	2.1836367137470465E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995545707959593	WITHOUT_CLASSIFICATION	4.4542920404071017E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999553923571249	WITHOUT_CLASSIFICATION	4.460764287505253E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963901382265772	WITHOUT_CLASSIFICATION	0.0036098617734227774	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963901382265772	WITHOUT_CLASSIFICATION	0.0036098617734227774	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999231779672176	WITHOUT_CLASSIFICATION	7.682203278239624E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996660221636151	WITHOUT_CLASSIFICATION	3.3397783638481655E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999679975673478	WITHOUT_CLASSIFICATION	3.2002432652299915E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999926553608283	WITHOUT_CLASSIFICATION	7.344639171704139E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999982878988893	WITHOUT_CLASSIFICATION	1.7121011106968614E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918328735051	WITHOUT_CLASSIFICATION	8.167126494925664E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999918328735051	WITHOUT_CLASSIFICATION	8.167126494925664E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998883626287837	WITHOUT_CLASSIFICATION	1.1163737121622563E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999522450953585	WITHOUT_CLASSIFICATION	4.7754904641546925E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999628748937158	WITHOUT_CLASSIFICATION	3.712510628410319E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9987364526670076	WITHOUT_CLASSIFICATION	0.0012635473329924477	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999466138527747	WITHOUT_CLASSIFICATION	5.338614722516568E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999660682386387	WITHOUT_CLASSIFICATION	3.3931761361295926E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999163626489992	WITHOUT_CLASSIFICATION	8.36373510008318E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999660367098085	WITHOUT_CLASSIFICATION	3.396329019137366E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.991039620384346	WITHOUT_CLASSIFICATION	0.008960379615653985	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992277354029351	WITHOUT_CLASSIFICATION	7.72264597064931E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999277418627912	WITHOUT_CLASSIFICATION	7.225813720878794E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998536490229399	WITHOUT_CLASSIFICATION	1.4635097705995424E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999441424336343	WITHOUT_CLASSIFICATION	5.585756636569984E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992669012827903	WITHOUT_CLASSIFICATION	7.330987172097967E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9985594895270086	WITHOUT_CLASSIFICATION	0.0014405104729914887	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999434284246428	WITHOUT_CLASSIFICATION	5.6571575357112123E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.992219130160255	WITHOUT_CLASSIFICATION	0.00778086983974502	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997744050158867	WITHOUT_CLASSIFICATION	2.2559498411327933E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999878841858405	WITHOUT_CLASSIFICATION	1.2115814159504677E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998337120296004	WITHOUT_CLASSIFICATION	1.662879703996821E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999099889454435	WITHOUT_CLASSIFICATION	9.001105455646713E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999523482749292	WITHOUT_CLASSIFICATION	4.765172507088159E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998686078596863	WITHOUT_CLASSIFICATION	1.3139214031357565E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995995792868897	WITHOUT_CLASSIFICATION	4.004207131102243E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999713885289379	WITHOUT_CLASSIFICATION	2.8611471062123246E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998287283094	WITHOUT_CLASSIFICATION	1.7127169063004318E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999920451696926	WITHOUT_CLASSIFICATION	7.954830307395315E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999762738851763	WITHOUT_CLASSIFICATION	2.3726114823606504E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995345890321636	WITHOUT_CLASSIFICATION	4.6541096783639884E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9998575544744619	WITHOUT_CLASSIFICATION	1.424455255381343E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.962893451037823	WITHOUT_CLASSIFICATION	0.037106548962177036	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9923917908166684	WITHOUT_CLASSIFICATION	0.007608209183331657	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998314981830305	WITHOUT_CLASSIFICATION	1.685018169695051E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999631988922544	WITHOUT_CLASSIFICATION	3.6801107745601324E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.999875548646107	WITHOUT_CLASSIFICATION	1.24451353893159E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999321600148665	WITHOUT_CLASSIFICATION	6.783998513344568E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999654345027117	WITHOUT_CLASSIFICATION	3.456549728825159E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999471698939272	WITHOUT_CLASSIFICATION	5.283010607278439E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998462401042751	WITHOUT_CLASSIFICATION	1.537598957248368E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.99994980614101	WITHOUT_CLASSIFICATION	5.019385898996433E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9983374603676746	WITHOUT_CLASSIFICATION	0.001662539632325327	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9987348997055787	WITHOUT_CLASSIFICATION	0.0012651002944212664	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9996391601713568	WITHOUT_CLASSIFICATION	3.6083982864332524E-4	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9991871329739875	WITHOUT_CLASSIFICATION	8.128670260125587E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999654345027117	WITHOUT_CLASSIFICATION	3.456549728825159E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999471698939272	WITHOUT_CLASSIFICATION	5.283010607278439E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998599078142829	WITHOUT_CLASSIFICATION	1.4009218571702826E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998513509605105	WITHOUT_CLASSIFICATION	1.486490394895164E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999980536597723	WITHOUT_CLASSIFICATION	1.946340227743116E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997537558502292	WITHOUT_CLASSIFICATION	2.462441497708398E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9996848730213146	WITHOUT_CLASSIFICATION	3.151269786853732E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9968221044519042	WITHOUT_CLASSIFICATION	0.003177895548095761	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999931443873157	WITHOUT_CLASSIFICATION	6.855612684298799E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9995550444023925	WITHOUT_CLASSIFICATION	4.449555976074302E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999916368058417	WITHOUT_CLASSIFICATION	8.363194158328014E-6	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999793890596542	WITHOUT_CLASSIFICATION	2.0610940345767718E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998677270437694	WITHOUT_CLASSIFICATION	1.3227295623062207E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999793890596542	WITHOUT_CLASSIFICATION	2.0610940345767718E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9994754654429677	WITHOUT_CLASSIFICATION	5.245345570321745E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996133504673742	WITHOUT_CLASSIFICATION	3.866495326257468E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9994754654429677	WITHOUT_CLASSIFICATION	5.245345570321745E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999832009754362	WITHOUT_CLASSIFICATION	1.6799024563792463E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9933594767531575	WITHOUT_CLASSIFICATION	0.0066405232468425765	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9993085425164902	WITHOUT_CLASSIFICATION	6.914574835098307E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9993085425164902	WITHOUT_CLASSIFICATION	6.914574835098307E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9996055683819789	WITHOUT_CLASSIFICATION	3.9443161802111247E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996072469328936	WITHOUT_CLASSIFICATION	3.9275306710636075E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9996055683819789	WITHOUT_CLASSIFICATION	3.9443161802111247E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585737248865	WITHOUT_CLASSIFICATION	1.4142627511347665E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999130881896624	WITHOUT_CLASSIFICATION	8.691181033758154E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998618810087604	WITHOUT_CLASSIFICATION	1.38118991239651E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9997485991035485	WITHOUT_CLASSIFICATION	2.5140089645142555E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996826404014476	WITHOUT_CLASSIFICATION	3.173595985523472E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9998647068419186	WITHOUT_CLASSIFICATION	1.3529315808137143E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9984867186876478	WITHOUT_CLASSIFICATION	0.001513281312352213	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999551735665746	WITHOUT_CLASSIFICATION	4.4826433425375994E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996607923523375	WITHOUT_CLASSIFICATION	3.3920764766248116E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999955588308195	WITHOUT_CLASSIFICATION	4.441169180501794E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999347687672943	WITHOUT_CLASSIFICATION	6.523123270566248E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999517787681481	WITHOUT_CLASSIFICATION	4.82212318519509E-5	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999272651935794	WITHOUT_CLASSIFICATION	7.273480642054881E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999526983210535	WITHOUT_CLASSIFICATION	4.7301678946433336E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998518330252879	WITHOUT_CLASSIFICATION	1.4816697471218765E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9996694961503707	WITHOUT_CLASSIFICATION	3.305038496293822E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999850136666976	WITHOUT_CLASSIFICATION	1.498633330239818E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9994666284009098	WITHOUT_CLASSIFICATION	5.333715990901194E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998147178527315	WITHOUT_CLASSIFICATION	1.8528214726841615E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999851960391082	WITHOUT_CLASSIFICATION	1.4803960891805387E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998663129219687	WITHOUT_CLASSIFICATION	1.3368707803132905E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9986333037421877	WITHOUT_CLASSIFICATION	0.001366696257812209	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9993188784423924	WITHOUT_CLASSIFICATION	6.811215576075641E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998618810087604	WITHOUT_CLASSIFICATION	1.38118991239651E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999319120815054	WITHOUT_CLASSIFICATION	6.808791849457714E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999101543399994	WITHOUT_CLASSIFICATION	8.984566000056359E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986646871124357	WITHOUT_CLASSIFICATION	0.0013353128875643367	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9998685875564425	WITHOUT_CLASSIFICATION	1.3141244355748417E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999893151482966	WITHOUT_CLASSIFICATION	1.0684851703340766E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999849951272554	WITHOUT_CLASSIFICATION	1.5004872744593246E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585737248865	WITHOUT_CLASSIFICATION	1.4142627511347665E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998585737248865	WITHOUT_CLASSIFICATION	1.4142627511347665E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998931002956954	WITHOUT_CLASSIFICATION	1.0689970430448712E-4	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999849804371865	WITHOUT_CLASSIFICATION	1.5019562813476076E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998929354623849	WITHOUT_CLASSIFICATION	1.0706453761509481E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999471792227218	WITHOUT_CLASSIFICATION	5.282077727815327E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9976024241148672	WITHOUT_CLASSIFICATION	0.0023975758851327226	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9993507945863256	WITHOUT_CLASSIFICATION	6.492054136743386E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9994814055127548	WITHOUT_CLASSIFICATION	5.185944872452829E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999589195918342	WITHOUT_CLASSIFICATION	4.1080408165793E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997440422046108	WITHOUT_CLASSIFICATION	2.5595779538926917E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996940203293287	WITHOUT_CLASSIFICATION	3.0597967067124354E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996607923523375	WITHOUT_CLASSIFICATION	3.3920764766248116E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999924810306324	WITHOUT_CLASSIFICATION	7.518969367596566E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996940203293287	WITHOUT_CLASSIFICATION	3.0597967067124354E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999528678670262	WITHOUT_CLASSIFICATION	4.713213297377536E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999935694208848	WITHOUT_CLASSIFICATION	6.430579115206372E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999227495639078	WITHOUT_CLASSIFICATION	7.725043609219168E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9997239551208159	WITHOUT_CLASSIFICATION	2.760448791841254E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994798424482106	WITHOUT_CLASSIFICATION	5.201575517892679E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9986708497474226	WITHOUT_CLASSIFICATION	0.0013291502525773742	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999548542637513	WITHOUT_CLASSIFICATION	4.51457362488306E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999568718562666	WITHOUT_CLASSIFICATION	4.312814373330302E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.99994126214436	WITHOUT_CLASSIFICATION	5.8737855640114984E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999382318877681	WITHOUT_CLASSIFICATION	6.17681122318433E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9996742460642182	WITHOUT_CLASSIFICATION	3.257539357817545E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999583278917545	WITHOUT_CLASSIFICATION	4.167210824552175E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996940203293287	WITHOUT_CLASSIFICATION	3.0597967067124354E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994798424482106	WITHOUT_CLASSIFICATION	5.201575517892679E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999548542637513	WITHOUT_CLASSIFICATION	4.51457362488306E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997569086446665	WITHOUT_CLASSIFICATION	2.4309135533358988E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.99999351511222	WITHOUT_CLASSIFICATION	6.484887780000504E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999616301401262	WITHOUT_CLASSIFICATION	3.83698598738548E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998416224960568	WITHOUT_CLASSIFICATION	1.5837750394323623E-4	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999574135313104	WITHOUT_CLASSIFICATION	4.258646868956542E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999340815635867	WITHOUT_CLASSIFICATION	6.591843641331674E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999528678670262	WITHOUT_CLASSIFICATION	4.713213297377536E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996608130727903	WITHOUT_CLASSIFICATION	3.3918692720967606E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999455767347495	WITHOUT_CLASSIFICATION	5.442326525047942E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999189900651781	WITHOUT_CLASSIFICATION	8.100993482191531E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999967390164251	WITHOUT_CLASSIFICATION	3.2609835749066976E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999696912568182	WITHOUT_CLASSIFICATION	3.0308743181833933E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999477107143695	WITHOUT_CLASSIFICATION	5.2289285630580176E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999832009754362	WITHOUT_CLASSIFICATION	1.6799024563792463E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997801406067067	WITHOUT_CLASSIFICATION	2.1985939329327285E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999876844183403	WITHOUT_CLASSIFICATION	1.2315581659763908E-5	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9956002715036669	WITHOUT_CLASSIFICATION	0.004399728496333107	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9964497313434454	WITHOUT_CLASSIFICATION	0.0035502686565545842	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9973340604497323	WITHOUT_CLASSIFICATION	0.0026659395502677094	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9995645150824325	WITHOUT_CLASSIFICATION	4.3548491756747825E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9998290420029152	WITHOUT_CLASSIFICATION	1.7095799708475234E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997095856170346	WITHOUT_CLASSIFICATION	2.904143829653812E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999340815635867	WITHOUT_CLASSIFICATION	6.591843641331674E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998574763786535	WITHOUT_CLASSIFICATION	1.4252362134649157E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999347665794397	WITHOUT_CLASSIFICATION	6.523342056029944E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9997391811035263	WITHOUT_CLASSIFICATION	2.6081889647362126E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998706254313351	WITHOUT_CLASSIFICATION	1.2937456866489054E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999460628928304	WITHOUT_CLASSIFICATION	5.393710716959025E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998571512039998	WITHOUT_CLASSIFICATION	1.4284879600030825E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999678391635183	WITHOUT_CLASSIFICATION	3.2160836481695817E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9833589725717488	WITHOUT_CLASSIFICATION	0.01664102742825118	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998892904637803	WITHOUT_CLASSIFICATION	1.1070953621970785E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.99996031161168	WITHOUT_CLASSIFICATION	3.968838832005296E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999359666299296	WITHOUT_CLASSIFICATION	6.403337007048359E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997921209639502	WITHOUT_CLASSIFICATION	2.078790360497149E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999641592748282	WITHOUT_CLASSIFICATION	3.5840725171757484E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999890051472466	WITHOUT_CLASSIFICATION	1.0994852753379193E-5	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9992478879868315	WITHOUT_CLASSIFICATION	7.521120131684152E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999989804682441	WITHOUT_CLASSIFICATION	1.0195317558913488E-5	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999685976675567	WITHOUT_CLASSIFICATION	3.1402332443143945E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9994157978504551	WITHOUT_CLASSIFICATION	5.842021495448769E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999945309061028	WITHOUT_CLASSIFICATION	5.469093897208092E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999422484863717	WITHOUT_CLASSIFICATION	5.7751513628203964E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998480095913409	WITHOUT_CLASSIFICATION	1.519904086591522E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999377051224161	WITHOUT_CLASSIFICATION	6.229487758388414E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9728320711631143	WITHOUT_CLASSIFICATION	0.027167928836885683	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999039110149796	WITHOUT_CLASSIFICATION	9.608898502032504E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995407481394176	WITHOUT_CLASSIFICATION	4.592518605823443E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998106335042276	WITHOUT_CLASSIFICATION	1.8936649577238853E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9976740159933272	WITHOUT_CLASSIFICATION	0.00232598400667273	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998436073614715	WITHOUT_CLASSIFICATION	1.5639263852848734E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9993476157746459	WITHOUT_CLASSIFICATION	6.52384225354205E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999958686099802	WITHOUT_CLASSIFICATION	4.1313900197980376E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994110412967	WITHOUT_CLASSIFICATION	5.8895870323646E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996026791294953	WITHOUT_CLASSIFICATION	3.973208705046472E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997496611910378	WITHOUT_CLASSIFICATION	2.5033880896217715E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999173230562659	WITHOUT_CLASSIFICATION	8.26769437341614E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9959829895028111	WITHOUT_CLASSIFICATION	0.0040170104971889034	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997496611910378	WITHOUT_CLASSIFICATION	2.5033880896217715E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996026791294953	WITHOUT_CLASSIFICATION	3.973208705046472E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999173230562659	WITHOUT_CLASSIFICATION	8.26769437341614E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999726102920283	WITHOUT_CLASSIFICATION	2.738970797171963E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999518564943466	WITHOUT_CLASSIFICATION	4.814350565345974E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997802799574566	WITHOUT_CLASSIFICATION	2.1972004254341952E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999153759544864	WITHOUT_CLASSIFICATION	8.462404551359956E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999893817309707	WITHOUT_CLASSIFICATION	1.0618269029245693E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9633770933343329	WITHOUT_CLASSIFICATION	0.036622906665667095	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999329432201636	WITHOUT_CLASSIFICATION	6.705677983637183E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996496271434132	WITHOUT_CLASSIFICATION	3.503728565868542E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999988921867244	WITHOUT_CLASSIFICATION	1.107813275485298E-6	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9990562768429998	WITHOUT_CLASSIFICATION	9.437231570001185E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999447907569081	WITHOUT_CLASSIFICATION	5.520924309196601E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998119793725739	WITHOUT_CLASSIFICATION	1.880206274260562E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998125738757964	WITHOUT_CLASSIFICATION	1.8742612420372348E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998161156126325	WITHOUT_CLASSIFICATION	1.8388438736744803E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999967689594822	WITHOUT_CLASSIFICATION	3.2310405177954516E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999753088485445	WITHOUT_CLASSIFICATION	2.469115145557623E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993239221918149	WITHOUT_CLASSIFICATION	6.760778081851855E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999953605443911	WITHOUT_CLASSIFICATION	4.639455608959671E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9995062864120164	WITHOUT_CLASSIFICATION	4.937135879835682E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999669477391196	WITHOUT_CLASSIFICATION	3.305226088030348E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9984951725635768	WITHOUT_CLASSIFICATION	0.001504827436423222	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999978879474033	WITHOUT_CLASSIFICATION	2.1120525966424995E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998858350509185	WITHOUT_CLASSIFICATION	1.1416494908142302E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999557454271474	WITHOUT_CLASSIFICATION	4.425457285261621E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999642033517062	WITHOUT_CLASSIFICATION	3.579664829382018E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999642033517062	WITHOUT_CLASSIFICATION	3.579664829382018E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999787454287314	WITHOUT_CLASSIFICATION	2.1254571268565462E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999787454287314	WITHOUT_CLASSIFICATION	2.1254571268565462E-5	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.99958454508782	WITHOUT_CLASSIFICATION	4.154549121799882E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993239221918149	WITHOUT_CLASSIFICATION	6.760778081851855E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999530853936482	WITHOUT_CLASSIFICATION	4.691460635182891E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999561873283191	WITHOUT_CLASSIFICATION	4.38126716807991E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998976953391511	WITHOUT_CLASSIFICATION	1.0230466084895981E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998976953391511	WITHOUT_CLASSIFICATION	1.0230466084895981E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999496253938288	WITHOUT_CLASSIFICATION	5.0374606171201344E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998928746538984	WITHOUT_CLASSIFICATION	1.0712534610153697E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999416587954185	WITHOUT_CLASSIFICATION	5.834120458153429E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.999980711215372	WITHOUT_CLASSIFICATION	1.9288784628011955E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993990620041503	WITHOUT_CLASSIFICATION	6.009379958496404E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9993948176118843	WITHOUT_CLASSIFICATION	6.051823881156601E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997724427677529	WITHOUT_CLASSIFICATION	2.275572322470486E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999643517116911	WITHOUT_CLASSIFICATION	3.564828830888893E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999184632171435	WITHOUT_CLASSIFICATION	8.153678285653005E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9978510149273955	WITHOUT_CLASSIFICATION	0.0021489850726045716	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999335415081161	WITHOUT_CLASSIFICATION	6.645849188389056E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998901264463166	WITHOUT_CLASSIFICATION	1.0987355368347831E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999251456155167	WITHOUT_CLASSIFICATION	7.485438448328986E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.999925521262924	WITHOUT_CLASSIFICATION	7.447873707600777E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999111626457153	WITHOUT_CLASSIFICATION	8.883735428473905E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997723102433729	WITHOUT_CLASSIFICATION	2.276897566272609E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706528916892	WITHOUT_CLASSIFICATION	1.293471083108119E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999012579307222	WITHOUT_CLASSIFICATION	9.874206927792988E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999517016379407	WITHOUT_CLASSIFICATION	4.829836205938852E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9997063957152328	WITHOUT_CLASSIFICATION	2.936042847673019E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999585690305812	WITHOUT_CLASSIFICATION	4.143096941878934E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9949715677675697	WITHOUT_CLASSIFICATION	0.005028432232430333	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999984490468781	WITHOUT_CLASSIFICATION	1.5509531218954377E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999736462518277	WITHOUT_CLASSIFICATION	2.635374817221528E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999576777068722	WITHOUT_CLASSIFICATION	4.2322293127793916E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998181173184265	WITHOUT_CLASSIFICATION	1.8188268157350889E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.99996031161168	WITHOUT_CLASSIFICATION	3.968838832005296E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997619798954883	WITHOUT_CLASSIFICATION	2.380201045116992E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9988537472773853	WITHOUT_CLASSIFICATION	0.0011462527226147228	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998067435650498	WITHOUT_CLASSIFICATION	1.9325643495016946E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998055666764025	WITHOUT_CLASSIFICATION	1.9443332359748695E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998713478612997	WITHOUT_CLASSIFICATION	1.2865213870035498E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998713478612997	WITHOUT_CLASSIFICATION	1.2865213870035498E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999624306591378	WITHOUT_CLASSIFICATION	3.756934086222155E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999626415559303	WITHOUT_CLASSIFICATION	3.7358444069714645E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999515932146557	WITHOUT_CLASSIFICATION	4.840678534428204E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999515932146557	WITHOUT_CLASSIFICATION	4.840678534428204E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9993080063993945	WITHOUT_CLASSIFICATION	6.919936006054781E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9992427453416658	WITHOUT_CLASSIFICATION	7.572546583341363E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9989205647932557	WITHOUT_CLASSIFICATION	0.0010794352067442215	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997646698639782	WITHOUT_CLASSIFICATION	2.3533013602183405E-4	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.999865410355444	WITHOUT_CLASSIFICATION	1.345896445560543E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997522982914233	WITHOUT_CLASSIFICATION	2.4770170857674607E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999633402611493	WITHOUT_CLASSIFICATION	3.6659738850811495E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999520936087988	WITHOUT_CLASSIFICATION	4.790639120131473E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999520936087988	WITHOUT_CLASSIFICATION	4.790639120131473E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999370412251511	WITHOUT_CLASSIFICATION	6.295877484891115E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999415729894975	WITHOUT_CLASSIFICATION	5.84270105025093E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999415729894975	WITHOUT_CLASSIFICATION	5.84270105025093E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999691658828623	WITHOUT_CLASSIFICATION	3.0834117137650027E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999460784583771	WITHOUT_CLASSIFICATION	5.3921541622922863E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999834276394615	WITHOUT_CLASSIFICATION	1.657236053853598E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999835364039497	WITHOUT_CLASSIFICATION	1.646359605028236E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999272678998254	WITHOUT_CLASSIFICATION	7.273210017452687E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.997696447535165	WITHOUT_CLASSIFICATION	0.0023035524648350823	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9991392917412221	WITHOUT_CLASSIFICATION	8.607082587779157E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9997416813339672	WITHOUT_CLASSIFICATION	2.5831866603280573E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9987605817111789	WITHOUT_CLASSIFICATION	0.0012394182888210842	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9983803284585107	WITHOUT_CLASSIFICATION	0.001619671541489443	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999190970129402	WITHOUT_CLASSIFICATION	8.090298705971069E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998577358069726	WITHOUT_CLASSIFICATION	1.4226419302740053E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998577358069726	WITHOUT_CLASSIFICATION	1.4226419302740053E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998577358069726	WITHOUT_CLASSIFICATION	1.4226419302740053E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998577358069726	WITHOUT_CLASSIFICATION	1.4226419302740053E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999352079921224	WITHOUT_CLASSIFICATION	6.47920078775526E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9960814101724863	WITHOUT_CLASSIFICATION	0.003918589827513681	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9998974421129374	WITHOUT_CLASSIFICATION	1.0255788706253344E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998345348099126	WITHOUT_CLASSIFICATION	1.6546519008748663E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9982500515716961	WITHOUT_CLASSIFICATION	0.0017499484283038573	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997846354399434	WITHOUT_CLASSIFICATION	2.1536456005650747E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997367670895554	WITHOUT_CLASSIFICATION	2.632329104446207E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998706024563048	WITHOUT_CLASSIFICATION	1.2939754369526457E-4	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9998761523977086	WITHOUT_CLASSIFICATION	1.2384760229151203E-4	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999576317463879	WITHOUT_CLASSIFICATION	4.236825361207226E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998839455680393	WITHOUT_CLASSIFICATION	1.1605443196075499E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9987456151316253	WITHOUT_CLASSIFICATION	0.0012543848683746587	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997510947270432	WITHOUT_CLASSIFICATION	2.489052729569066E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999909688700948	WITHOUT_CLASSIFICATION	9.031129905237385E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998839455680393	WITHOUT_CLASSIFICATION	1.1605443196075499E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999361643651398	WITHOUT_CLASSIFICATION	6.383563486027671E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997758589770613	WITHOUT_CLASSIFICATION	2.2414102293869374E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999958677124503	WITHOUT_CLASSIFICATION	4.1322875496069295E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996605013715641	WITHOUT_CLASSIFICATION	3.394986284358522E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999920621547722	WITHOUT_CLASSIFICATION	7.937845227802583E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9986244739314866	WITHOUT_CLASSIFICATION	0.0013755260685134687	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999737465989691	WITHOUT_CLASSIFICATION	2.6253401030967255E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999123856659169	WITHOUT_CLASSIFICATION	8.761433408302035E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718248594517	WITHOUT_CLASSIFICATION	2.817514054836312E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9997889059268925	WITHOUT_CLASSIFICATION	2.1109407310753632E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718248594517	WITHOUT_CLASSIFICATION	2.817514054836312E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9997536769837234	WITHOUT_CLASSIFICATION	2.4632301627660176E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999141412541758	WITHOUT_CLASSIFICATION	8.585874582420063E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996866742538857	WITHOUT_CLASSIFICATION	3.1332574611426194E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997744677389373	WITHOUT_CLASSIFICATION	2.255322610627504E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9993585180184096	WITHOUT_CLASSIFICATION	6.414819815904919E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999986646750469	WITHOUT_CLASSIFICATION	1.3353249531037167E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998703670126327	WITHOUT_CLASSIFICATION	1.2963298736722275E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998593571830594	WITHOUT_CLASSIFICATION	1.4064281694061627E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998703670126327	WITHOUT_CLASSIFICATION	1.2963298736722275E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999874462097399	WITHOUT_CLASSIFICATION	1.2553790260094256E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999738157231244	WITHOUT_CLASSIFICATION	2.6184276875647255E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999572368349879	WITHOUT_CLASSIFICATION	4.2763165012030675E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999951052010714	WITHOUT_CLASSIFICATION	4.894798928541589E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999986646750469	WITHOUT_CLASSIFICATION	1.3353249531037167E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998593571830594	WITHOUT_CLASSIFICATION	1.4064281694061627E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999874462097399	WITHOUT_CLASSIFICATION	1.2553790260094256E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999569973312358	WITHOUT_CLASSIFICATION	4.300266876421982E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9998666116034116	WITHOUT_CLASSIFICATION	1.3338839658832933E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999041545567297	WITHOUT_CLASSIFICATION	9.584544327034708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998167252362182	WITHOUT_CLASSIFICATION	1.8327476378185578E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997354573450357	WITHOUT_CLASSIFICATION	2.6454265496435943E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999349324039593	WITHOUT_CLASSIFICATION	6.50675960407931E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706528916892	WITHOUT_CLASSIFICATION	1.293471083108119E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999738157231244	WITHOUT_CLASSIFICATION	2.6184276875647255E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999691728496257	WITHOUT_CLASSIFICATION	3.082715037430672E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991447299176197	WITHOUT_CLASSIFICATION	8.552700823801677E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999629814225044	WITHOUT_CLASSIFICATION	3.701857749547645E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706528916892	WITHOUT_CLASSIFICATION	1.293471083108119E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998581094836502	WITHOUT_CLASSIFICATION	1.4189051634986183E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706528916892	WITHOUT_CLASSIFICATION	1.293471083108119E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999737789775193	WITHOUT_CLASSIFICATION	2.622102248074247E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998857070089916	WITHOUT_CLASSIFICATION	1.1429299100832973E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997439320362628	WITHOUT_CLASSIFICATION	2.5606796373731983E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999705159720834	WITHOUT_CLASSIFICATION	2.94840279166171E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999613935904343	WITHOUT_CLASSIFICATION	3.860640956560386E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999084124663022	WITHOUT_CLASSIFICATION	9.158753369778577E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999337028350941	WITHOUT_CLASSIFICATION	6.629716490600666E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997570221672089	WITHOUT_CLASSIFICATION	2.4297783279110261E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999774099440166	WITHOUT_CLASSIFICATION	2.259005598331481E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998968563674004	WITHOUT_CLASSIFICATION	1.0314363259954862E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999633326044906	WITHOUT_CLASSIFICATION	3.6667395509351466E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998968563674004	WITHOUT_CLASSIFICATION	1.0314363259954862E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9676576003838915	WITHOUT_CLASSIFICATION	0.03234239961610847	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9997948355450381	WITHOUT_CLASSIFICATION	2.0516445496186408E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999407747145207	WITHOUT_CLASSIFICATION	5.92252854792957E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999958041112891	WITHOUT_CLASSIFICATION	4.1958887108756684E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999744329018725	WITHOUT_CLASSIFICATION	2.5567098127489367E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.999640663419914	WITHOUT_CLASSIFICATION	3.5933658008600877E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999769821234451	WITHOUT_CLASSIFICATION	2.301787655490403E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996888182861726	WITHOUT_CLASSIFICATION	3.111817138274625E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9990373225845933	WITHOUT_CLASSIFICATION	9.626774154065826E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9990373225845933	WITHOUT_CLASSIFICATION	9.626774154065826E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999839119713023	WITHOUT_CLASSIFICATION	1.6088028697751677E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.99983706473753	WITHOUT_CLASSIFICATION	1.6293526247000215E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999984983412553	WITHOUT_CLASSIFICATION	1.5016587446908304E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9993410624710827	WITHOUT_CLASSIFICATION	6.589375289173837E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998787031781746	WITHOUT_CLASSIFICATION	1.2129682182533367E-4	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998584113794863	WITHOUT_CLASSIFICATION	1.4158862051382468E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9964971525014831	WITHOUT_CLASSIFICATION	0.0035028474985168345	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9900276691931792	WITHOUT_CLASSIFICATION	0.009972330806820872	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999429691376898	WITHOUT_CLASSIFICATION	5.703086231019155E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997359143109517	WITHOUT_CLASSIFICATION	2.640856890484234E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9996112883791143	WITHOUT_CLASSIFICATION	3.8871162088577983E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998065266067783	WITHOUT_CLASSIFICATION	1.9347339322173541E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999024426582481	WITHOUT_CLASSIFICATION	9.755734175190317E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999914086070627	WITHOUT_CLASSIFICATION	8.591392937380971E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996744157490135	WITHOUT_CLASSIFICATION	3.255842509865836E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998896488159835	WITHOUT_CLASSIFICATION	1.1035118401658879E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998896488159835	WITHOUT_CLASSIFICATION	1.1035118401658879E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999698158411152	WITHOUT_CLASSIFICATION	3.0184158884761363E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997570221672089	WITHOUT_CLASSIFICATION	2.4297783279110261E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9986680741770942	WITHOUT_CLASSIFICATION	0.0013319258229056864	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999766166410627	WITHOUT_CLASSIFICATION	2.338335893733669E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998029782263944	WITHOUT_CLASSIFICATION	1.9702177360550932E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996684074737927	WITHOUT_CLASSIFICATION	3.315925262072919E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998760844614363	WITHOUT_CLASSIFICATION	1.239155385636668E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9993056293886756	WITHOUT_CLASSIFICATION	6.94370611324413E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999501276050062	WITHOUT_CLASSIFICATION	4.987239499371958E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998843165334528	WITHOUT_CLASSIFICATION	1.1568346654723003E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999800335142317	WITHOUT_CLASSIFICATION	1.9966485768209306E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998177568539465	WITHOUT_CLASSIFICATION	1.82243146053534E-4	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999915175740517	WITHOUT_CLASSIFICATION	8.482425948236878E-6	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999902840317776	WITHOUT_CLASSIFICATION	9.71596822245535E-6	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999995370247252	WITHOUT_CLASSIFICATION	4.6297527485476164E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998802303754101	WITHOUT_CLASSIFICATION	1.1976962458987897E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999807331931594	WITHOUT_CLASSIFICATION	1.926680684055849E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999950931095599	WITHOUT_CLASSIFICATION	4.906890440160486E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999197183668374	WITHOUT_CLASSIFICATION	8.028163316260636E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999980063607667	WITHOUT_CLASSIFICATION	1.99363923328605E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998418291200699	WITHOUT_CLASSIFICATION	1.5817087993013208E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999733163643546	WITHOUT_CLASSIFICATION	2.668363564540311E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9981288293481695	WITHOUT_CLASSIFICATION	0.0018711706518304747	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999965468782829	WITHOUT_CLASSIFICATION	3.453121717100483E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999483143951562	WITHOUT_CLASSIFICATION	5.1685604843751226E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9997799099519037	WITHOUT_CLASSIFICATION	2.200900480963335E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998618895983059	WITHOUT_CLASSIFICATION	1.3811040169419182E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998329530974961	WITHOUT_CLASSIFICATION	1.6704690250385034E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999844770155184	WITHOUT_CLASSIFICATION	1.552298448160837E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9990723148863832	WITHOUT_CLASSIFICATION	9.276851136169661E-4	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998082118771086	WITHOUT_CLASSIFICATION	1.917881228914303E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998354674840314	WITHOUT_CLASSIFICATION	1.645325159685124E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998334743805365	WITHOUT_CLASSIFICATION	1.6652561946354992E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9996959116417361	WITHOUT_CLASSIFICATION	3.040883582639499E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9986309505273875	WITHOUT_CLASSIFICATION	0.001369049472612515	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9962895861210471	WITHOUT_CLASSIFICATION	0.003710413878952836	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9281224471187762	WITHOUT_CLASSIFICATION	0.07187755288122374	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999101456398971	WITHOUT_CLASSIFICATION	8.985436010296707E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999101456398971	WITHOUT_CLASSIFICATION	8.985436010296707E-5	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999531437597741	WITHOUT_CLASSIFICATION	4.685624022601054E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999744257660144	WITHOUT_CLASSIFICATION	2.557423398573084E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999817334663477	WITHOUT_CLASSIFICATION	1.8266533652322504E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999817334663477	WITHOUT_CLASSIFICATION	1.8266533652322504E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999870383823152	WITHOUT_CLASSIFICATION	1.2961617684850252E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999276936312598	WITHOUT_CLASSIFICATION	7.230636874024095E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999924058425469	WITHOUT_CLASSIFICATION	7.594157453098202E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999985866011201	WITHOUT_CLASSIFICATION	1.4133988799566656E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998136076026172	WITHOUT_CLASSIFICATION	1.863923973829209E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998552882913974	WITHOUT_CLASSIFICATION	1.4471170860258818E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998552882913974	WITHOUT_CLASSIFICATION	1.4471170860258818E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9996912658840541	WITHOUT_CLASSIFICATION	3.087341159459652E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998585737248865	WITHOUT_CLASSIFICATION	1.4142627511347665E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999340712691867	WITHOUT_CLASSIFICATION	6.592873081336193E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999340712691867	WITHOUT_CLASSIFICATION	6.592873081336193E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999624205163137	WITHOUT_CLASSIFICATION	3.757948368626127E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999395520614912	WITHOUT_CLASSIFICATION	6.044793850874387E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999251074548128	WITHOUT_CLASSIFICATION	7.489254518725888E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.999992861988698	WITHOUT_CLASSIFICATION	7.1380113021278645E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999973533624024	WITHOUT_CLASSIFICATION	2.6466375976102797E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999421348666083	WITHOUT_CLASSIFICATION	5.786513339175756E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998772622274966	WITHOUT_CLASSIFICATION	1.2273777250336367E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999775633718848	WITHOUT_CLASSIFICATION	2.2436628115098457E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999962914378644	WITHOUT_CLASSIFICATION	3.708562135503303E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999044121401047	WITHOUT_CLASSIFICATION	9.55878598952386E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998295975918317	WITHOUT_CLASSIFICATION	1.7040240816827826E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9983311352878622	WITHOUT_CLASSIFICATION	0.0016688647121377795	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999421222977334	WITHOUT_CLASSIFICATION	5.7877702266476E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998158503349506	WITHOUT_CLASSIFICATION	1.8414966504934908E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999353569904993	WITHOUT_CLASSIFICATION	6.464300950075295E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998541440320727	WITHOUT_CLASSIFICATION	1.458559679272125E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999870208117932	WITHOUT_CLASSIFICATION	1.2979188206792654E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9995993967443783	WITHOUT_CLASSIFICATION	4.006032556217894E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9998990853787169	WITHOUT_CLASSIFICATION	1.0091462128316927E-4	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9995338149037539	WITHOUT_CLASSIFICATION	4.6618509624600556E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9991712005390707	WITHOUT_CLASSIFICATION	8.287994609292374E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998989501149527	WITHOUT_CLASSIFICATION	1.010498850473325E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998296226114076	WITHOUT_CLASSIFICATION	1.7037738859249565E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9987775851291814	WITHOUT_CLASSIFICATION	0.0012224148708186982	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9992698352462879	WITHOUT_CLASSIFICATION	7.301647537121529E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999006919325822	WITHOUT_CLASSIFICATION	9.930806741772896E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999489113461558	WITHOUT_CLASSIFICATION	5.108865384412012E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999982977825624	WITHOUT_CLASSIFICATION	1.7022174376620975E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999702188609594	WITHOUT_CLASSIFICATION	2.9781139040608825E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999934328912846	WITHOUT_CLASSIFICATION	6.567108715400059E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999610615550182	WITHOUT_CLASSIFICATION	3.8938444981770987E-5	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999677511127826	WITHOUT_CLASSIFICATION	3.2248887217464433E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999952210987803	WITHOUT_CLASSIFICATION	4.778901219717514E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998575322069022	WITHOUT_CLASSIFICATION	1.4246779309777096E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998648753048922	WITHOUT_CLASSIFICATION	1.3512469510788805E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998666670378328	WITHOUT_CLASSIFICATION	1.3333296216726134E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998099263255044	WITHOUT_CLASSIFICATION	1.9007367449557768E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999167853647143	WITHOUT_CLASSIFICATION	8.321463528569924E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999495535291616	WITHOUT_CLASSIFICATION	5.04464708383612E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999532009649584	WITHOUT_CLASSIFICATION	4.679903504159665E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9998513704056622	WITHOUT_CLASSIFICATION	1.4862959433769403E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999371053227148	WITHOUT_CLASSIFICATION	6.289467728511537E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9991839754875779	WITHOUT_CLASSIFICATION	8.160245124222326E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999766922051734	WITHOUT_CLASSIFICATION	2.3307794826638458E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998484376790062	WITHOUT_CLASSIFICATION	1.5156232099378382E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999192683145153	WITHOUT_CLASSIFICATION	8.073168548474294E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997495021944078	WITHOUT_CLASSIFICATION	2.504978055921566E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999854600863239	WITHOUT_CLASSIFICATION	1.4539913676100501E-5	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999465197062603	WITHOUT_CLASSIFICATION	5.348029373975606E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999856279178904	WITHOUT_CLASSIFICATION	1.4372082109646521E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997603480695436	WITHOUT_CLASSIFICATION	2.3965193045644926E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999374685343057	WITHOUT_CLASSIFICATION	6.25314656944271E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9988489600326629	WITHOUT_CLASSIFICATION	0.0011510399673370887	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999404620206668	WITHOUT_CLASSIFICATION	5.9537979333220634E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9978601900612977	WITHOUT_CLASSIFICATION	0.002139809938702277	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999978163436109	WITHOUT_CLASSIFICATION	2.183656389095638E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999570723482465	WITHOUT_CLASSIFICATION	4.2927651753509334E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999570723482465	WITHOUT_CLASSIFICATION	4.2927651753509334E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999933805628644	WITHOUT_CLASSIFICATION	6.619437135654614E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9992287038710822	WITHOUT_CLASSIFICATION	7.712961289178983E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999822056233652	WITHOUT_CLASSIFICATION	1.7794376634870636E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999457730830251	WITHOUT_CLASSIFICATION	5.4226916974890624E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999700166072857	WITHOUT_CLASSIFICATION	2.998339271436432E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996552499817002	WITHOUT_CLASSIFICATION	3.4475001829976476E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999848271905114	WITHOUT_CLASSIFICATION	1.517280948853013E-5	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999758693164577	WITHOUT_CLASSIFICATION	2.4130683542388067E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9996864527370065	WITHOUT_CLASSIFICATION	3.135472629934986E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999615152040892	WITHOUT_CLASSIFICATION	3.848479591093404E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999212020555935	WITHOUT_CLASSIFICATION	7.879794440638424E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.995595675505338	WITHOUT_CLASSIFICATION	0.004404324494662012	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991196309314	WITHOUT_CLASSIFICATION	8.803690687181076E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999990215301094	WITHOUT_CLASSIFICATION	9.784698905671683E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994458499471777	WITHOUT_CLASSIFICATION	5.541500528222803E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994458499471777	WITHOUT_CLASSIFICATION	5.541500528222803E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9998729231404475	WITHOUT_CLASSIFICATION	1.270768595525037E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9988811771165627	WITHOUT_CLASSIFICATION	0.0011188228834373834	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998131136269666	WITHOUT_CLASSIFICATION	1.8688637303343217E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999612758179623	WITHOUT_CLASSIFICATION	3.872418203768348E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999909547736029	WITHOUT_CLASSIFICATION	9.045226397104972E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965926240776	WITHOUT_CLASSIFICATION	1.0340737592234017E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999339729429747	WITHOUT_CLASSIFICATION	6.602705702536973E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9969778740788348	WITHOUT_CLASSIFICATION	0.0030221259211652826	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999958830685779	WITHOUT_CLASSIFICATION	4.116931422070581E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998275617472191	WITHOUT_CLASSIFICATION	1.7243825278103836E-4	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999287778970418	WITHOUT_CLASSIFICATION	7.122210295822032E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997545190203011	WITHOUT_CLASSIFICATION	2.4548097969897273E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999569083149147	WITHOUT_CLASSIFICATION	4.309168508533745E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999315399686777	WITHOUT_CLASSIFICATION	6.84600313223085E-5	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997634178639621	WITHOUT_CLASSIFICATION	2.3658213603790926E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997776437882117	WITHOUT_CLASSIFICATION	2.223562117882321E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999989622215486	WITHOUT_CLASSIFICATION	1.037778451395261E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998767384552556	WITHOUT_CLASSIFICATION	1.2326154474438816E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999563761927386	WITHOUT_CLASSIFICATION	4.362380726139276E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999195755362564	WITHOUT_CLASSIFICATION	8.04244637435325E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999289905535007	WITHOUT_CLASSIFICATION	7.100944649930199E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999931184488199	WITHOUT_CLASSIFICATION	6.8815511801233626E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999848287740042	WITHOUT_CLASSIFICATION	1.5171225995903678E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9995323350608536	WITHOUT_CLASSIFICATION	4.676649391464174E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999453887709495	WITHOUT_CLASSIFICATION	5.4611229050569225E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999280197036216	WITHOUT_CLASSIFICATION	7.198029637848877E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997857762014318	WITHOUT_CLASSIFICATION	2.1422379856811583E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9994557475124832	WITHOUT_CLASSIFICATION	5.442524875167617E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9997780529937393	WITHOUT_CLASSIFICATION	2.2194700626067417E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996327973210156	WITHOUT_CLASSIFICATION	3.672026789843167E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999521263826847	WITHOUT_CLASSIFICATION	4.787361731520101E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999992958255983	WITHOUT_CLASSIFICATION	7.041744017030857E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995021140547647	WITHOUT_CLASSIFICATION	4.978859452352898E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999965183389888	WITHOUT_CLASSIFICATION	3.4816610112060245E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998206829265283	WITHOUT_CLASSIFICATION	1.7931707347162995E-4	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999860690933454	WITHOUT_CLASSIFICATION	1.3930906654609326E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9995706935969808	WITHOUT_CLASSIFICATION	4.2930640301918634E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9997564927428053	WITHOUT_CLASSIFICATION	2.4350725719461287E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999979917161541	WITHOUT_CLASSIFICATION	2.008283845870443E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.982679122584418	WITHOUT_CLASSIFICATION	0.017320877415582015	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.982679122584418	WITHOUT_CLASSIFICATION	0.017320877415582015	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999793404130903	WITHOUT_CLASSIFICATION	2.065958690970574E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8400928424920806	WITHOUT_CLASSIFICATION	0.15990715750791934	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999961279040186	WITHOUT_CLASSIFICATION	3.872095981342175E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999445418744564	WITHOUT_CLASSIFICATION	5.54581255435813E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9994053341673244	WITHOUT_CLASSIFICATION	5.946658326756001E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9982485591523578	WITHOUT_CLASSIFICATION	0.001751440847642266	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999711529272948	WITHOUT_CLASSIFICATION	2.8847072705249942E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997667744629122	WITHOUT_CLASSIFICATION	2.332255370877482E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9961261499874483	WITHOUT_CLASSIFICATION	0.0038738500125517403	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997350158571323	WITHOUT_CLASSIFICATION	2.649841428676696E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639909980235	WITHOUT_CLASSIFICATION	1.360090019764147E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985689045150848	WITHOUT_CLASSIFICATION	0.0014310954849152298	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9991198138293715	WITHOUT_CLASSIFICATION	8.801861706285787E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999173843793449	WITHOUT_CLASSIFICATION	8.261562065513554E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9996645771971248	WITHOUT_CLASSIFICATION	3.354228028752783E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9995986766969606	WITHOUT_CLASSIFICATION	4.0132330303943754E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999600760072175	WITHOUT_CLASSIFICATION	3.992399278257726E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.997555089000174	WITHOUT_CLASSIFICATION	0.0024449109998259957	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9995016754563991	WITHOUT_CLASSIFICATION	4.983245436007721E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9997683314731192	WITHOUT_CLASSIFICATION	2.316685268807756E-4	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998915307446097	WITHOUT_CLASSIFICATION	1.084692553902445E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999899150699538	WITHOUT_CLASSIFICATION	1.0084930046184085E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999918545085646	WITHOUT_CLASSIFICATION	8.145491435433138E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997677472182136	WITHOUT_CLASSIFICATION	2.3225278178638168E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9993762925456785	WITHOUT_CLASSIFICATION	6.237074543215566E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999111267291193	WITHOUT_CLASSIFICATION	8.887327088069789E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997642487689998	WITHOUT_CLASSIFICATION	2.357512310000971E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9997619011533233	WITHOUT_CLASSIFICATION	2.380988466765453E-4	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999621979301924	WITHOUT_CLASSIFICATION	3.780206980764261E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9994190707831497	WITHOUT_CLASSIFICATION	5.809292168503846E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999970516125812	WITHOUT_CLASSIFICATION	2.9483874187318914E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999311891921259	WITHOUT_CLASSIFICATION	6.881080787412015E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999332747325692	WITHOUT_CLASSIFICATION	6.67252674308761E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998564298330606	WITHOUT_CLASSIFICATION	1.4357016693944811E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998861581355456	WITHOUT_CLASSIFICATION	1.1384186445438084E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999459916550158	WITHOUT_CLASSIFICATION	5.400834498420352E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998573807951568	WITHOUT_CLASSIFICATION	1.4261920484322037E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999757852070286	WITHOUT_CLASSIFICATION	2.4214792971436506E-5	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999431913288747	WITHOUT_CLASSIFICATION	5.680867112534056E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999312394585599	WITHOUT_CLASSIFICATION	6.876054144013001E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999769615459569	WITHOUT_CLASSIFICATION	2.303845404310644E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.998985600333418	WITHOUT_CLASSIFICATION	0.0010143996665819587	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999086459140109	WITHOUT_CLASSIFICATION	9.135408598915249E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999859160061263	WITHOUT_CLASSIFICATION	1.4083993873667185E-5	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999981448546427	WITHOUT_CLASSIFICATION	1.8551453573565072E-6	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9993923621580134	WITHOUT_CLASSIFICATION	6.076378419866001E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995401055021202	WITHOUT_CLASSIFICATION	4.598944978797506E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991196309314	WITHOUT_CLASSIFICATION	8.803690687181076E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9998746826466405	WITHOUT_CLASSIFICATION	1.2531735335954665E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999952775047336	WITHOUT_CLASSIFICATION	4.722495266471577E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997193449376048	WITHOUT_CLASSIFICATION	2.806550623951771E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999143881412965	WITHOUT_CLASSIFICATION	8.561185870356732E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999996775876814	WITHOUT_CLASSIFICATION	3.224123186211443E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9987490443160105	WITHOUT_CLASSIFICATION	0.0012509556839894714	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9977080644737762	WITHOUT_CLASSIFICATION	0.0022919355262237475	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.6314425152239154	DEFECT	0.36855748477608474	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999923123457368	WITHOUT_CLASSIFICATION	7.687654263060392E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9992778319679264	WITHOUT_CLASSIFICATION	7.221680320735203E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9275607121307334	WITHOUT_CLASSIFICATION	0.07243928786926661	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994946172688625	WITHOUT_CLASSIFICATION	5.05382731137648E-4	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999863154168375	WITHOUT_CLASSIFICATION	1.3684583162625045E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9971345658900331	WITHOUT_CLASSIFICATION	0.002865434109966839	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998347331654694	WITHOUT_CLASSIFICATION	1.652668345305344E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996520339354964	WITHOUT_CLASSIFICATION	3.479660645036037E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999959552626806	WITHOUT_CLASSIFICATION	4.0447373194259855E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9996248868985099	WITHOUT_CLASSIFICATION	3.751131014900923E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998347331654694	WITHOUT_CLASSIFICATION	1.652668345305344E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989215408944087	WITHOUT_CLASSIFICATION	0.0010784591055913526	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999625447135738	WITHOUT_CLASSIFICATION	3.7455286426188695E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999911322174666	WITHOUT_CLASSIFICATION	8.867782533449611E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.997666781270928	WITHOUT_CLASSIFICATION	0.002333218729072044	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999901282505534	WITHOUT_CLASSIFICATION	9.87174944660211E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9969370914083618	WITHOUT_CLASSIFICATION	0.0030629085916382623	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999804800393581	WITHOUT_CLASSIFICATION	1.951996064190074E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999508391526309	WITHOUT_CLASSIFICATION	4.916084736920656E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999946088605901	WITHOUT_CLASSIFICATION	5.391139409907449E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9974030697515053	WITHOUT_CLASSIFICATION	0.0025969302484946805	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995815832236202	WITHOUT_CLASSIFICATION	4.184167763797507E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9694783826763537	WITHOUT_CLASSIFICATION	0.03052161732364626	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998616084796186	WITHOUT_CLASSIFICATION	1.383915203813877E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999981626661442	WITHOUT_CLASSIFICATION	1.837333855811553E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999550613752484	WITHOUT_CLASSIFICATION	4.4938624751634855E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9981288293481695	WITHOUT_CLASSIFICATION	0.0018711706518304747	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.997471633579995	WITHOUT_CLASSIFICATION	0.002528366420004938	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999647860380932	WITHOUT_CLASSIFICATION	3.521396190683873E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9989982940480642	WITHOUT_CLASSIFICATION	0.0010017059519358584	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9953304543734339	WITHOUT_CLASSIFICATION	0.004669545626566118	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999995937986638	WITHOUT_CLASSIFICATION	4.06201336194529E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999511870257359	WITHOUT_CLASSIFICATION	4.881297426414309E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9940058392824322	WITHOUT_CLASSIFICATION	0.0059941607175677345	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999398100082	WITHOUT_CLASSIFICATION	6.018999172591167E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999972149836056	WITHOUT_CLASSIFICATION	2.7850163943556073E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9997227105337602	WITHOUT_CLASSIFICATION	2.772894662397737E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9996173175883534	WITHOUT_CLASSIFICATION	3.826824116466594E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999474086727557	WITHOUT_CLASSIFICATION	5.2591327244390804E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9931283737896828	WITHOUT_CLASSIFICATION	0.0068716262103172936	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999865594577524	WITHOUT_CLASSIFICATION	1.344054224756984E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999411345641074	WITHOUT_CLASSIFICATION	5.886543589248254E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9994496768465777	WITHOUT_CLASSIFICATION	5.503231534223896E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9995138523871381	WITHOUT_CLASSIFICATION	4.8614761286195116E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999619389892678	WITHOUT_CLASSIFICATION	3.806101073218905E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999987486145135	WITHOUT_CLASSIFICATION	1.2513854864617722E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994647847695	WITHOUT_CLASSIFICATION	5.352152304082933E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999062219504143	WITHOUT_CLASSIFICATION	9.377804958560371E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9998142924006566	WITHOUT_CLASSIFICATION	1.857075993435264E-4	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999386941135083	WITHOUT_CLASSIFICATION	6.130588649167408E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9994485197056286	WITHOUT_CLASSIFICATION	5.514802943713548E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998782984501489	WITHOUT_CLASSIFICATION	1.2170154985120808E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998782984501489	WITHOUT_CLASSIFICATION	1.2170154985120808E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998484659948727	WITHOUT_CLASSIFICATION	0.0015153400512728987	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999915029784923	WITHOUT_CLASSIFICATION	8.497021507685036E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999926553608283	WITHOUT_CLASSIFICATION	7.344639171704139E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.777062940611526	WITHOUT_CLASSIFICATION	0.22293705938847402	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997646698639782	WITHOUT_CLASSIFICATION	2.3533013602183405E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997646698639782	WITHOUT_CLASSIFICATION	2.3533013602183405E-4	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998730086032306	WITHOUT_CLASSIFICATION	1.2699139676942704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9985594895270086	WITHOUT_CLASSIFICATION	0.0014405104729914887	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996638772573408	WITHOUT_CLASSIFICATION	3.3612274265913607E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999099889454435	WITHOUT_CLASSIFICATION	9.001105455646713E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999980321626745	WITHOUT_CLASSIFICATION	1.9678373255091884E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9994165098633668	WITHOUT_CLASSIFICATION	5.834901366330571E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999584634767597	WITHOUT_CLASSIFICATION	4.153652324029825E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999442065838829	WITHOUT_CLASSIFICATION	5.57934161170483E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999827843280831	WITHOUT_CLASSIFICATION	1.7215671916858694E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999128140304099	WITHOUT_CLASSIFICATION	8.718596959007285E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999128140304099	WITHOUT_CLASSIFICATION	8.718596959007285E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996551038531171	WITHOUT_CLASSIFICATION	3.4489614688293114E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999340043299899	WITHOUT_CLASSIFICATION	6.599567001007868E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.99994126214436	WITHOUT_CLASSIFICATION	5.8737855640114984E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9996881231173103	WITHOUT_CLASSIFICATION	3.1187688268973293E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999561243222127	WITHOUT_CLASSIFICATION	4.387567778729413E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997801406067067	WITHOUT_CLASSIFICATION	2.1985939329327285E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998048240053454	WITHOUT_CLASSIFICATION	1.9517599465465382E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999710789861582	WITHOUT_CLASSIFICATION	2.8921013841865896E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997836996784446	WITHOUT_CLASSIFICATION	2.1630032155538066E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9993036525680847	WITHOUT_CLASSIFICATION	6.963474319151644E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999650315627893	WITHOUT_CLASSIFICATION	3.4968437210736014E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9974030697515053	WITHOUT_CLASSIFICATION	0.0025969302484946805	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999975144747718	WITHOUT_CLASSIFICATION	2.485525228219107E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9982681733462441	WITHOUT_CLASSIFICATION	0.0017318266537558837	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999819021281584	WITHOUT_CLASSIFICATION	1.8097871841558857E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.999952665889355	WITHOUT_CLASSIFICATION	4.733411064494963E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997608386543957	WITHOUT_CLASSIFICATION	2.3916134560437018E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9995759460060092	WITHOUT_CLASSIFICATION	4.2405399399078446E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999738739221438	WITHOUT_CLASSIFICATION	2.6126077856203995E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999799504864186	WITHOUT_CLASSIFICATION	2.0049513581370568E-5	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9993447794375055	WITHOUT_CLASSIFICATION	6.552205624944718E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982944284737179	WITHOUT_CLASSIFICATION	0.0017055715262821506	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9982944284737179	WITHOUT_CLASSIFICATION	0.0017055715262821506	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998839455680393	WITHOUT_CLASSIFICATION	1.1605443196075499E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999125226544	WITHOUT_CLASSIFICATION	8.747734560102108E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998565911323556	WITHOUT_CLASSIFICATION	1.4340886764442243E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996532634055384	WITHOUT_CLASSIFICATION	3.467365944615703E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999443974323529	WITHOUT_CLASSIFICATION	5.560256764711888E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999952593786907	WITHOUT_CLASSIFICATION	4.740621309288487E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997744677389373	WITHOUT_CLASSIFICATION	2.255322610627504E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9990474676506744	WITHOUT_CLASSIFICATION	9.525323493256122E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999569973312358	WITHOUT_CLASSIFICATION	4.300266876421982E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999059541083487	WITHOUT_CLASSIFICATION	9.404589165128177E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998706528916892	WITHOUT_CLASSIFICATION	1.293471083108119E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997746908907095	WITHOUT_CLASSIFICATION	2.253091092905823E-4	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999799028705684	WITHOUT_CLASSIFICATION	2.0097129431591873E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999857886011966	WITHOUT_CLASSIFICATION	1.421139880342918E-5	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999993185307478	WITHOUT_CLASSIFICATION	6.814692521928103E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999688220820144	WITHOUT_CLASSIFICATION	3.117791798549726E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9993176223664658	WITHOUT_CLASSIFICATION	6.823776335341192E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996271117083647	WITHOUT_CLASSIFICATION	3.7288829163524133E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999114481595839	WITHOUT_CLASSIFICATION	8.855184041610103E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9162780157237347	WITHOUT_CLASSIFICATION	0.08372198427626522	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999029231473059	WITHOUT_CLASSIFICATION	9.707685269411454E-5	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997484486138	WITHOUT_CLASSIFICATION	2.515513862045432E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999251074548128	WITHOUT_CLASSIFICATION	7.489254518725888E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998411660982	WITHOUT_CLASSIFICATION	1.5883390190602166E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999887033128558	WITHOUT_CLASSIFICATION	1.1296687144216019E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999887033128558	WITHOUT_CLASSIFICATION	1.1296687144216019E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996774639018534	WITHOUT_CLASSIFICATION	3.22536098146652E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997137430371877	WITHOUT_CLASSIFICATION	2.862569628122412E-4	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999833097129943	WITHOUT_CLASSIFICATION	1.6690287005726413E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999710451144773	WITHOUT_CLASSIFICATION	2.8954885522731684E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999825319440795	WITHOUT_CLASSIFICATION	1.7468055920557206E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9997711309471969	WITHOUT_CLASSIFICATION	2.2886905280307483E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.995504282724987	WITHOUT_CLASSIFICATION	0.004495717275012915	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9997670331668054	WITHOUT_CLASSIFICATION	2.329668331946126E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.8449065457965381	DEFECT	0.15509345420346185	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.7206251018599683	WITHOUT_CLASSIFICATION	0.27937489814003175	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9997745137581668	WITHOUT_CLASSIFICATION	2.2548624183306941E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9996321069269073	WITHOUT_CLASSIFICATION	3.6789307309277033E-4	DEFECT
/*	DEFECT	0.9883816034213148	WITHOUT_CLASSIFICATION	0.011618396578685125	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9995952697709416	WITHOUT_CLASSIFICATION	4.047302290583278E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.6451216162738906	DEFECT	0.3548783837261092	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9634192068906714	WITHOUT_CLASSIFICATION	0.036580793109328616	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8749764893958346	WITHOUT_CLASSIFICATION	0.12502351060416542	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8757618778438911	DEFECT	0.12423812215610885	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9949388813930863	WITHOUT_CLASSIFICATION	0.00506111860691369	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9949388813930863	WITHOUT_CLASSIFICATION	0.00506111860691369	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9468390085627425	WITHOUT_CLASSIFICATION	0.05316099143725748	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999986314809019	WITHOUT_CLASSIFICATION	1.368519098103009E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9358670409782155	WITHOUT_CLASSIFICATION	0.0641329590217845	DEFECT
// this call is side-effecty	DEFECT	0.9997958790042115	WITHOUT_CLASSIFICATION	2.0412099578851915E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.8230972110432052	WITHOUT_CLASSIFICATION	0.1769027889567948	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.999044190669973	WITHOUT_CLASSIFICATION	9.558093300270624E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8887004580673304	WITHOUT_CLASSIFICATION	0.1112995419326695	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9994746220358971	WITHOUT_CLASSIFICATION	5.253779641028984E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9921984283838043	WITHOUT_CLASSIFICATION	0.007801571616195642	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999753119891714	WITHOUT_CLASSIFICATION	2.4688010828559405E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9365610591881259	WITHOUT_CLASSIFICATION	0.0634389408118741	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9995639416080077	WITHOUT_CLASSIFICATION	4.360583919924003E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.658127584821424	DEFECT	0.3418724151785761	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9892036937593798	DEFECT	0.010796306240620229	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5916759004397297	DEFECT	0.4083240995602702	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.982811681329714	WITHOUT_CLASSIFICATION	0.017188318670286043	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9824805295538629	WITHOUT_CLASSIFICATION	0.01751947044613711	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9889215483858926	WITHOUT_CLASSIFICATION	0.011078451614107289	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9911911988957072	WITHOUT_CLASSIFICATION	0.00880880110429289	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9949388813930863	WITHOUT_CLASSIFICATION	0.00506111860691369	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9714913301254952	DEFECT	0.028508669874504868	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.979399676218082	WITHOUT_CLASSIFICATION	0.02060032378191804	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9998818106869803	WITHOUT_CLASSIFICATION	1.1818931301964443E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9932637095849716	WITHOUT_CLASSIFICATION	0.006736290415028478	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9820458207885017	WITHOUT_CLASSIFICATION	0.01795417921149834	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9995819588035871	WITHOUT_CLASSIFICATION	4.180411964129831E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9077027785424047	WITHOUT_CLASSIFICATION	0.09229722145759531	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9867248520415378	WITHOUT_CLASSIFICATION	0.013275147958462154	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9919778008884073	WITHOUT_CLASSIFICATION	0.008022199111592779	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8880691956139337	WITHOUT_CLASSIFICATION	0.11193080438606623	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.999828591696378	WITHOUT_CLASSIFICATION	1.714083036220006E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9973554643722998	WITHOUT_CLASSIFICATION	0.0026445356277001045	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9787383605105408	WITHOUT_CLASSIFICATION	0.02126163948945929	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.997887939530136	WITHOUT_CLASSIFICATION	0.0021120604698640034	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9818133175758135	WITHOUT_CLASSIFICATION	0.018186682424186522	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.5446431931099992	WITHOUT_CLASSIFICATION	0.4553568068900008	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999952295608372	DEFECT	4.770439162784711E-6	WITHOUT_CLASSIFICATION
