//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9990604795386889	WITHOUT_CLASSIFICATION	9.395204613109791E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995166725633602	WITHOUT_CLASSIFICATION	4.8332743663970706E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9996532317113815	WITHOUT_CLASSIFICATION	3.4676828861849587E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998221101345198	WITHOUT_CLASSIFICATION	1.7788986548016944E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998221101345198	WITHOUT_CLASSIFICATION	1.7788986548016944E-4	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999544529602361	WITHOUT_CLASSIFICATION	4.5547039763843656E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996888635409878	WITHOUT_CLASSIFICATION	3.111364590122439E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9994579971112189	WITHOUT_CLASSIFICATION	5.420028887810783E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9998560750568282	WITHOUT_CLASSIFICATION	1.4392494317183225E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9997266508731761	WITHOUT_CLASSIFICATION	2.7334912682392147E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9997266508731761	WITHOUT_CLASSIFICATION	2.7334912682392147E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996722264292875	WITHOUT_CLASSIFICATION	3.277735707124489E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9986766204180445	WITHOUT_CLASSIFICATION	0.001323379581955502	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997239643062558	WITHOUT_CLASSIFICATION	2.7603569374425437E-4	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997046289386062	WITHOUT_CLASSIFICATION	2.95371061393732E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9961752341772362	WITHOUT_CLASSIFICATION	0.003824765822763754	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9997226467413625	WITHOUT_CLASSIFICATION	2.7735325863761473E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996722754911934	WITHOUT_CLASSIFICATION	3.277245088065632E-4	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996699709440251	WITHOUT_CLASSIFICATION	3.3002905597494123E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999246814563438	WITHOUT_CLASSIFICATION	7.531854365611455E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9997209290278708	WITHOUT_CLASSIFICATION	2.790709721291385E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9989852180512333	WITHOUT_CLASSIFICATION	0.0010147819487666347	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996591384773722	WITHOUT_CLASSIFICATION	3.408615226278425E-4	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.8676097740691899	WITHOUT_CLASSIFICATION	0.13239022593081	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9991097784874612	WITHOUT_CLASSIFICATION	8.902215125389183E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9991097784874612	WITHOUT_CLASSIFICATION	8.902215125389183E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996787381684881	WITHOUT_CLASSIFICATION	3.2126183151195406E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999208122476129	WITHOUT_CLASSIFICATION	7.918775238707911E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9992712171802743	WITHOUT_CLASSIFICATION	7.287828197256338E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997542833105748	WITHOUT_CLASSIFICATION	2.457166894252691E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997442457832565	WITHOUT_CLASSIFICATION	2.557542167434659E-4	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993078140455584	WITHOUT_CLASSIFICATION	6.921859544416059E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9944167878996093	WITHOUT_CLASSIFICATION	0.005583212100390765	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999258763677728	WITHOUT_CLASSIFICATION	7.41236322271906E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999258763677728	WITHOUT_CLASSIFICATION	7.41236322271906E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9985899488488263	WITHOUT_CLASSIFICATION	0.0014100511511736728	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9976349736617817	WITHOUT_CLASSIFICATION	0.002365026338218323	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9992692338119544	WITHOUT_CLASSIFICATION	7.307661880455879E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995437206124252	WITHOUT_CLASSIFICATION	4.5627938757473416E-4	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9981905294651326	WITHOUT_CLASSIFICATION	0.0018094705348673027	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999873967062342	WITHOUT_CLASSIFICATION	1.2603293765837735E-5	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9890764718968963	WITHOUT_CLASSIFICATION	0.010923528103103802	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995007088086628	WITHOUT_CLASSIFICATION	4.992911913372467E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9997917007097795	WITHOUT_CLASSIFICATION	2.08299290220575E-4	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9995506187950808	WITHOUT_CLASSIFICATION	4.4938120491930017E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997216064911446	WITHOUT_CLASSIFICATION	2.7839350885536295E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997327239572941	WITHOUT_CLASSIFICATION	2.6727604270582905E-4	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999941339606746	WITHOUT_CLASSIFICATION	5.866039325338556E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9994097338101372	WITHOUT_CLASSIFICATION	5.902661898628648E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9975376164701762	WITHOUT_CLASSIFICATION	0.002462383529823741	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999049775543649	WITHOUT_CLASSIFICATION	9.502244563509473E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997465251753683	WITHOUT_CLASSIFICATION	2.534748246316424E-4	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9995813844781091	WITHOUT_CLASSIFICATION	4.186155218908336E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998044734393589	WITHOUT_CLASSIFICATION	1.955265606410141E-4	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997719346711884	WITHOUT_CLASSIFICATION	2.2806532881153652E-4	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998859430456448	WITHOUT_CLASSIFICATION	1.1405695435514726E-4	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998864933900625	WITHOUT_CLASSIFICATION	1.1350660993744386E-4	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988547606328307	WITHOUT_CLASSIFICATION	0.0011452393671693446	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998667231871385	WITHOUT_CLASSIFICATION	1.3327681286145503E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9987965575664566	WITHOUT_CLASSIFICATION	0.0012034424335434224	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9990994577344857	WITHOUT_CLASSIFICATION	9.005422655142552E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9997054804490125	WITHOUT_CLASSIFICATION	2.9451955098739994E-4	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9988033810535804	WITHOUT_CLASSIFICATION	0.00119661894641958	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997734750683738	WITHOUT_CLASSIFICATION	2.2652493162627038E-4	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999661237673294	WITHOUT_CLASSIFICATION	3.387623267059635E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9991506801820383	WITHOUT_CLASSIFICATION	8.493198179617383E-4	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9992562286427542	WITHOUT_CLASSIFICATION	7.437713572457893E-4	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9995070624469496	WITHOUT_CLASSIFICATION	4.929375530503905E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999704752661168	WITHOUT_CLASSIFICATION	2.952473388321029E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998026818737679	WITHOUT_CLASSIFICATION	1.9731812623219615E-4	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9998975556687111	WITHOUT_CLASSIFICATION	1.024443312889796E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999704752661168	WITHOUT_CLASSIFICATION	2.952473388321029E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9993651915947623	WITHOUT_CLASSIFICATION	6.348084052376846E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9972959453170986	WITHOUT_CLASSIFICATION	0.002704054682901387	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9996484644251729	WITHOUT_CLASSIFICATION	3.5153557482710935E-4	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9996754193812005	WITHOUT_CLASSIFICATION	3.2458061879947465E-4	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99988650822954	WITHOUT_CLASSIFICATION	1.1349177046016806E-4	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99988650822954	WITHOUT_CLASSIFICATION	1.1349177046016806E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999258763677728	WITHOUT_CLASSIFICATION	7.41236322271906E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9978936233924566	WITHOUT_CLASSIFICATION	0.0021063766075434844	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999706441038624	WITHOUT_CLASSIFICATION	2.9355896137563853E-5	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9996299554670428	WITHOUT_CLASSIFICATION	3.7004453295719306E-4	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998742181961158	WITHOUT_CLASSIFICATION	1.2578180388419794E-4	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998718180814286	WITHOUT_CLASSIFICATION	1.281819185713535E-4	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9998370021834565	WITHOUT_CLASSIFICATION	1.6299781654355913E-4	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9995750008634874	WITHOUT_CLASSIFICATION	4.2499913651267455E-4	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9996438068736851	WITHOUT_CLASSIFICATION	3.561931263148008E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998215144591865	WITHOUT_CLASSIFICATION	1.7848554081355966E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998215144591865	WITHOUT_CLASSIFICATION	1.7848554081355966E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995737794667298	WITHOUT_CLASSIFICATION	4.262205332701712E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9995847073117738	WITHOUT_CLASSIFICATION	4.152926882261163E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997469919759387	WITHOUT_CLASSIFICATION	2.5300802406127916E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998215144591865	WITHOUT_CLASSIFICATION	1.7848554081355966E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995737794667298	WITHOUT_CLASSIFICATION	4.262205332701712E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995737794667298	WITHOUT_CLASSIFICATION	4.262205332701712E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997888509002689	WITHOUT_CLASSIFICATION	2.1114909973109894E-4	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9996991048783591	WITHOUT_CLASSIFICATION	3.008951216408619E-4	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9976479212473762	WITHOUT_CLASSIFICATION	0.0023520787526237295	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9993477760721199	WITHOUT_CLASSIFICATION	6.522239278800558E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9984189864004496	WITHOUT_CLASSIFICATION	0.0015810135995503434	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9984189864004496	WITHOUT_CLASSIFICATION	0.0015810135995503434	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.998814469770491	WITHOUT_CLASSIFICATION	0.0011855302295089793	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9991046755990938	WITHOUT_CLASSIFICATION	8.953244009062839E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9998433577288949	WITHOUT_CLASSIFICATION	1.5664227110503975E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996554079340083	WITHOUT_CLASSIFICATION	3.4459206599178225E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996554079340083	WITHOUT_CLASSIFICATION	3.4459206599178225E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9990821944511687	WITHOUT_CLASSIFICATION	9.178055488312944E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.992624366892625	WITHOUT_CLASSIFICATION	0.007375633107375059	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981399566947177	WITHOUT_CLASSIFICATION	0.001860043305282254	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9919080470502912	WITHOUT_CLASSIFICATION	0.008091952949708709	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9998821743057944	WITHOUT_CLASSIFICATION	1.1782569420559214E-4	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999602249684964	WITHOUT_CLASSIFICATION	3.977503150359246E-4	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9992723100040029	WITHOUT_CLASSIFICATION	7.276899959971946E-4	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9997898739279629	WITHOUT_CLASSIFICATION	2.1012607203711552E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981399566947177	WITHOUT_CLASSIFICATION	0.001860043305282254	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9996122871922746	WITHOUT_CLASSIFICATION	3.877128077254099E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9996697967325354	WITHOUT_CLASSIFICATION	3.302032674644695E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9996697967325354	WITHOUT_CLASSIFICATION	3.302032674644695E-4	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999310830843428	WITHOUT_CLASSIFICATION	6.891691565721619E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999009027497872	WITHOUT_CLASSIFICATION	9.909725021280871E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9990521156692408	WITHOUT_CLASSIFICATION	9.478843307592763E-4	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9978978468972116	WITHOUT_CLASSIFICATION	0.0021021531027884694	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997898739279629	WITHOUT_CLASSIFICATION	2.1012607203711552E-4	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9996301937589185	WITHOUT_CLASSIFICATION	3.698062410815866E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999103058887039	WITHOUT_CLASSIFICATION	8.96941112960947E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998528616657331	WITHOUT_CLASSIFICATION	1.471383342670012E-4	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998523512092429	WITHOUT_CLASSIFICATION	1.4764879075710181E-4	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998523512092429	WITHOUT_CLASSIFICATION	1.4764879075710181E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9990604795386889	WITHOUT_CLASSIFICATION	9.395204613109791E-4	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9995446018195517	WITHOUT_CLASSIFICATION	4.553981804483119E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9997715088138827	WITHOUT_CLASSIFICATION	2.2849118611741883E-4	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9996911831309238	WITHOUT_CLASSIFICATION	3.088168690763106E-4	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9997235105944416	WITHOUT_CLASSIFICATION	2.7648940555832264E-4	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9995486779068644	WITHOUT_CLASSIFICATION	4.5132209313559634E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9989354087234525	WITHOUT_CLASSIFICATION	0.0010645912765474123	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9997726435066187	WITHOUT_CLASSIFICATION	2.273564933812398E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997240779709586	WITHOUT_CLASSIFICATION	2.7592202904136E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9996856881874416	WITHOUT_CLASSIFICATION	3.1431181255839536E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9995486779068644	WITHOUT_CLASSIFICATION	4.5132209313559634E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9988498707706315	WITHOUT_CLASSIFICATION	0.0011501292293685246	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999280574155051	WITHOUT_CLASSIFICATION	7.194258449490123E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9997235105944416	WITHOUT_CLASSIFICATION	2.7648940555832264E-4	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9997334856635598	WITHOUT_CLASSIFICATION	2.665143364402267E-4	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9994838978810766	WITHOUT_CLASSIFICATION	5.161021189233884E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9998221101345198	WITHOUT_CLASSIFICATION	1.7788986548016944E-4	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991969702730604	WITHOUT_CLASSIFICATION	8.030297269396369E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997633887316976	WITHOUT_CLASSIFICATION	2.3661126830236035E-4	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997134267608985	WITHOUT_CLASSIFICATION	2.8657323910152215E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9995534841239166	WITHOUT_CLASSIFICATION	4.465158760833896E-4	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999731064392561	WITHOUT_CLASSIFICATION	2.6893560743892505E-4	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9995151122520335	WITHOUT_CLASSIFICATION	4.848877479665903E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9992717634630358	WITHOUT_CLASSIFICATION	7.282365369641264E-4	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9997913659790815	WITHOUT_CLASSIFICATION	2.0863402091847403E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9993241839616182	WITHOUT_CLASSIFICATION	6.758160383819707E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9989772965681263	WITHOUT_CLASSIFICATION	0.001022703431873718	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997240779709586	WITHOUT_CLASSIFICATION	2.7592202904136E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999731064392561	WITHOUT_CLASSIFICATION	2.6893560743892505E-4	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999544529602361	WITHOUT_CLASSIFICATION	4.5547039763843656E-5	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.999353754869587	WITHOUT_CLASSIFICATION	6.462451304130523E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997223952101595	WITHOUT_CLASSIFICATION	2.7760478984048645E-4	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9994659079339581	WITHOUT_CLASSIFICATION	5.340920660418788E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9987821892218469	WITHOUT_CLASSIFICATION	0.0012178107781530842	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998534836287832	WITHOUT_CLASSIFICATION	1.4651637121673418E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995902057070023	WITHOUT_CLASSIFICATION	4.097942929977187E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9995902057070023	WITHOUT_CLASSIFICATION	4.097942929977187E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997635462880078	WITHOUT_CLASSIFICATION	2.3645371199220979E-4	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9996979635349885	WITHOUT_CLASSIFICATION	3.020364650115532E-4	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.99983233291749	WITHOUT_CLASSIFICATION	1.6766708250995113E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999771755653043	WITHOUT_CLASSIFICATION	2.2824434695695804E-4	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998123301032011	WITHOUT_CLASSIFICATION	1.876698967988747E-4	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9993522385093058	WITHOUT_CLASSIFICATION	6.477614906941554E-4	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9996893361767772	WITHOUT_CLASSIFICATION	3.1066382322280257E-4	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996888635409878	WITHOUT_CLASSIFICATION	3.111364590122439E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9998468984424438	WITHOUT_CLASSIFICATION	1.5310155755619636E-4	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9998468984424438	WITHOUT_CLASSIFICATION	1.5310155755619636E-4	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9998468984424438	WITHOUT_CLASSIFICATION	1.5310155755619636E-4	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9994488443042921	WITHOUT_CLASSIFICATION	5.511556957077296E-4	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9998468984424438	WITHOUT_CLASSIFICATION	1.5310155755619636E-4	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998460048212833	WITHOUT_CLASSIFICATION	1.5399517871680636E-4	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9997897400221855	WITHOUT_CLASSIFICATION	2.1025997781465552E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998733210044644	WITHOUT_CLASSIFICATION	1.2667899553561726E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997240779709586	WITHOUT_CLASSIFICATION	2.7592202904136E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999731064392561	WITHOUT_CLASSIFICATION	2.6893560743892505E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999731064392561	WITHOUT_CLASSIFICATION	2.6893560743892505E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9998781179535611	WITHOUT_CLASSIFICATION	1.2188204643904835E-4	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.999818725191666	WITHOUT_CLASSIFICATION	1.8127480833397163E-4	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9991348674412519	WITHOUT_CLASSIFICATION	8.65132558748013E-4	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9998560750568282	WITHOUT_CLASSIFICATION	1.4392494317183225E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9998560750568282	WITHOUT_CLASSIFICATION	1.4392494317183225E-4	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.999470005148058	WITHOUT_CLASSIFICATION	5.299948519421746E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9997486016089656	WITHOUT_CLASSIFICATION	2.513983910343577E-4	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9997692989063847	WITHOUT_CLASSIFICATION	2.3070109361527627E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9997991148529253	WITHOUT_CLASSIFICATION	2.0088514707477845E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9997549532629951	WITHOUT_CLASSIFICATION	2.4504673700478886E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9997266508731761	WITHOUT_CLASSIFICATION	2.7334912682392147E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997237560316062	WITHOUT_CLASSIFICATION	2.7624396839383644E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997237560316062	WITHOUT_CLASSIFICATION	2.7624396839383644E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996722264292875	WITHOUT_CLASSIFICATION	3.277735707124489E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996722264292875	WITHOUT_CLASSIFICATION	3.277735707124489E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9998504157841313	WITHOUT_CLASSIFICATION	1.4958421586877988E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9998504157841313	WITHOUT_CLASSIFICATION	1.4958421586877988E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996635990620615	WITHOUT_CLASSIFICATION	3.364009379384445E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996635990620615	WITHOUT_CLASSIFICATION	3.364009379384445E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9998560750568282	WITHOUT_CLASSIFICATION	1.4392494317183225E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9997266508731761	WITHOUT_CLASSIFICATION	2.7334912682392147E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997237560316062	WITHOUT_CLASSIFICATION	2.7624396839383644E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997237560316062	WITHOUT_CLASSIFICATION	2.7624396839383644E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996722264292875	WITHOUT_CLASSIFICATION	3.277735707124489E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9998504157841313	WITHOUT_CLASSIFICATION	1.4958421586877988E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9998504157841313	WITHOUT_CLASSIFICATION	1.4958421586877988E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9996635990620615	WITHOUT_CLASSIFICATION	3.364009379384445E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997893213773729	WITHOUT_CLASSIFICATION	2.1067862262717313E-4	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999278805977571	WITHOUT_CLASSIFICATION	7.211940224290249E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9991750322030587	WITHOUT_CLASSIFICATION	8.249677969412565E-4	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999111388254543	WITHOUT_CLASSIFICATION	8.886117454556118E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9990563903464611	WITHOUT_CLASSIFICATION	9.436096535389538E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9530875781797448	WITHOUT_CLASSIFICATION	0.04691242182025524	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9984058370801112	WITHOUT_CLASSIFICATION	0.0015941629198887425	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9986269039419735	WITHOUT_CLASSIFICATION	0.00137309605802656	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9988560880133749	WITHOUT_CLASSIFICATION	0.0011439119866251404	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9996911641081493	WITHOUT_CLASSIFICATION	3.088358918506546E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9997120935854565	WITHOUT_CLASSIFICATION	2.879064145434682E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999258763677728	WITHOUT_CLASSIFICATION	7.41236322271906E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999657268641086	WITHOUT_CLASSIFICATION	3.4273135891407905E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999473089263811	WITHOUT_CLASSIFICATION	5.269107361889967E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999473089263811	WITHOUT_CLASSIFICATION	5.269107361889967E-4	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9992421501759517	WITHOUT_CLASSIFICATION	7.578498240482536E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998588806216184	WITHOUT_CLASSIFICATION	1.4111937838159384E-4	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9988135711140842	WITHOUT_CLASSIFICATION	0.0011864288859158802	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9983053291094969	WITHOUT_CLASSIFICATION	0.0016946708905031355	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9983053291094969	WITHOUT_CLASSIFICATION	0.0016946708905031355	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9961752341772362	WITHOUT_CLASSIFICATION	0.003824765822763754	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9928094653096431	WITHOUT_CLASSIFICATION	0.00719053469035687	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9928094653096431	WITHOUT_CLASSIFICATION	0.00719053469035687	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9987009977655078	WITHOUT_CLASSIFICATION	0.0012990022344922978	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9996352666760836	WITHOUT_CLASSIFICATION	3.647333239164646E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9996699709440251	WITHOUT_CLASSIFICATION	3.3002905597494123E-4	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8086067107685484	WITHOUT_CLASSIFICATION	0.19139328923145163	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9997226467413625	WITHOUT_CLASSIFICATION	2.7735325863761473E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997257895484087	WITHOUT_CLASSIFICATION	2.7421045159124437E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999719347761075	WITHOUT_CLASSIFICATION	2.80652238925098E-4	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998031416079504	WITHOUT_CLASSIFICATION	1.968583920496067E-4	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9996085393771067	WITHOUT_CLASSIFICATION	3.9146062289333305E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9996591384773722	WITHOUT_CLASSIFICATION	3.408615226278425E-4	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999895223773762	WITHOUT_CLASSIFICATION	1.0477622623794617E-4	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996699709440251	WITHOUT_CLASSIFICATION	3.3002905597494123E-4	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9997332909149076	WITHOUT_CLASSIFICATION	2.6670908509245637E-4	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9997499156425341	WITHOUT_CLASSIFICATION	2.500843574659429E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997215583174148	WITHOUT_CLASSIFICATION	2.7844168258517343E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9997332909149076	WITHOUT_CLASSIFICATION	2.6670908509245637E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997215583174148	WITHOUT_CLASSIFICATION	2.7844168258517343E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997232058833583	WITHOUT_CLASSIFICATION	2.767941166417297E-4	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997232058833583	WITHOUT_CLASSIFICATION	2.767941166417297E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9996603630036844	WITHOUT_CLASSIFICATION	3.3963699631553093E-4	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999901956668878	WITHOUT_CLASSIFICATION	9.804333112198696E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9998965905678001	WITHOUT_CLASSIFICATION	1.034094321998928E-4	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9997709680018557	WITHOUT_CLASSIFICATION	2.2903199814428788E-4	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997980433235043	WITHOUT_CLASSIFICATION	2.0195667649569514E-4	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9996819106052123	WITHOUT_CLASSIFICATION	3.180893947877383E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9965755558479962	WITHOUT_CLASSIFICATION	0.003424444152003896	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997980433235043	WITHOUT_CLASSIFICATION	2.0195667649569514E-4	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9997209290278708	WITHOUT_CLASSIFICATION	2.790709721291385E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9992206035193735	WITHOUT_CLASSIFICATION	7.793964806264902E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9993707940846377	WITHOUT_CLASSIFICATION	6.292059153623598E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9998988815333437	WITHOUT_CLASSIFICATION	1.0111846665633707E-4	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999496691004391	WITHOUT_CLASSIFICATION	5.033089956093031E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9997700992570406	WITHOUT_CLASSIFICATION	2.2990074295949707E-4	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9994586390549927	WITHOUT_CLASSIFICATION	5.41360945007277E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999716081478379	WITHOUT_CLASSIFICATION	2.8391852162007835E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9996940286115218	WITHOUT_CLASSIFICATION	3.0597138847817166E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9992928558825948	WITHOUT_CLASSIFICATION	7.071441174052909E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997331477447748	WITHOUT_CLASSIFICATION	2.6685225522516906E-4	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9991441148156763	WITHOUT_CLASSIFICATION	8.558851843237325E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996591384773722	WITHOUT_CLASSIFICATION	3.408615226278425E-4	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9996912016414214	WITHOUT_CLASSIFICATION	3.087983585784807E-4	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999642382641236	WITHOUT_CLASSIFICATION	3.57617358764038E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9996450724424172	WITHOUT_CLASSIFICATION	3.549275575828378E-4	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999686879843434	WITHOUT_CLASSIFICATION	3.131201565659793E-4	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.999686879843434	WITHOUT_CLASSIFICATION	3.131201565659793E-4	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9997029874038162	WITHOUT_CLASSIFICATION	2.9701259618367657E-4	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999881209973712	WITHOUT_CLASSIFICATION	1.1879002628776619E-5	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998131925311091	WITHOUT_CLASSIFICATION	1.8680746889087097E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999360988525561	WITHOUT_CLASSIFICATION	6.39011474439015E-4	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9992906023155355	WITHOUT_CLASSIFICATION	7.093976844645154E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994872281051689	WITHOUT_CLASSIFICATION	5.127718948311622E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994872281051689	WITHOUT_CLASSIFICATION	5.127718948311622E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9996813741628005	WITHOUT_CLASSIFICATION	3.186258371995097E-4	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9993537912528566	WITHOUT_CLASSIFICATION	6.46208747143265E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9991624383694131	WITHOUT_CLASSIFICATION	8.375616305869107E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997257895484087	WITHOUT_CLASSIFICATION	2.7421045159124437E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998983750451529	WITHOUT_CLASSIFICATION	1.0162495484712882E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9995352873257188	WITHOUT_CLASSIFICATION	4.647126742811499E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9996281700803492	WITHOUT_CLASSIFICATION	3.718299196507471E-4	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9988999647180072	WITHOUT_CLASSIFICATION	0.001100035281992779	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.998943321835913	WITHOUT_CLASSIFICATION	0.0010566781640870442	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996929026568027	WITHOUT_CLASSIFICATION	3.0709734319737166E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996786288599671	WITHOUT_CLASSIFICATION	3.213711400329745E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9987583808417111	WITHOUT_CLASSIFICATION	0.0012416191582889503	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999103039082251	WITHOUT_CLASSIFICATION	8.969609177494814E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9996194043469019	WITHOUT_CLASSIFICATION	3.805956530982176E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9995311811413459	WITHOUT_CLASSIFICATION	4.6881885865412184E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997471628689607	WITHOUT_CLASSIFICATION	2.5283713103933266E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997471628689607	WITHOUT_CLASSIFICATION	2.5283713103933266E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999360988525561	WITHOUT_CLASSIFICATION	6.39011474439015E-4	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9975885923361947	WITHOUT_CLASSIFICATION	0.0024114076638053544	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9966051427002626	WITHOUT_CLASSIFICATION	0.003394857299737367	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9966051427002626	WITHOUT_CLASSIFICATION	0.003394857299737367	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9990963145743559	WITHOUT_CLASSIFICATION	9.036854256440666E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9984547422611709	WITHOUT_CLASSIFICATION	0.0015452577388290673	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9996604849767988	WITHOUT_CLASSIFICATION	3.3951502320112855E-4	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9995744991874308	WITHOUT_CLASSIFICATION	4.255008125692331E-4	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9979780637677499	WITHOUT_CLASSIFICATION	0.0020219362322501434	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997057086096061	WITHOUT_CLASSIFICATION	2.942913903939047E-4	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999143340241292	WITHOUT_CLASSIFICATION	8.5665975870791E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9974027330295633	WITHOUT_CLASSIFICATION	0.00259726697043677	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9975174364017819	WITHOUT_CLASSIFICATION	0.0024825635982180486	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9995699109465733	WITHOUT_CLASSIFICATION	4.300890534267326E-4	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997173227095361	WITHOUT_CLASSIFICATION	2.8267729046399276E-4	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9995604914617069	WITHOUT_CLASSIFICATION	4.3950853829315535E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999720634726482	WITHOUT_CLASSIFICATION	2.793652735180005E-4	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9995319875218411	WITHOUT_CLASSIFICATION	4.680124781588683E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9995319875218411	WITHOUT_CLASSIFICATION	4.680124781588683E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994109278383625	WITHOUT_CLASSIFICATION	5.890721616374878E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994109278383625	WITHOUT_CLASSIFICATION	5.890721616374878E-4	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9992213313144354	WITHOUT_CLASSIFICATION	7.786686855646601E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9990963145743559	WITHOUT_CLASSIFICATION	9.036854256440666E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9996415357990254	WITHOUT_CLASSIFICATION	3.584642009747044E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999542050195979	WITHOUT_CLASSIFICATION	4.579498040220545E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9993446058790806	WITHOUT_CLASSIFICATION	6.55394120919312E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.998901712241688	WITHOUT_CLASSIFICATION	0.0010982877583120064	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9962948516669907	WITHOUT_CLASSIFICATION	0.003705148333009185	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9990963145743559	WITHOUT_CLASSIFICATION	9.036854256440666E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.998901712241688	WITHOUT_CLASSIFICATION	0.0010982877583120064	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9962948516669907	WITHOUT_CLASSIFICATION	0.003705148333009185	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9992811335631969	WITHOUT_CLASSIFICATION	7.188664368029437E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997637310904097	WITHOUT_CLASSIFICATION	2.3626890959039666E-4	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9985873484185851	WITHOUT_CLASSIFICATION	0.0014126515814148917	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9990963145743559	WITHOUT_CLASSIFICATION	9.036854256440666E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9990963145743559	WITHOUT_CLASSIFICATION	9.036854256440666E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9997834815662883	WITHOUT_CLASSIFICATION	2.1651843371175373E-4	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9997654622630184	WITHOUT_CLASSIFICATION	2.345377369815686E-4	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9989102834318686	WITHOUT_CLASSIFICATION	0.0010897165681314775	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999917818924738	WITHOUT_CLASSIFICATION	8.218107526200494E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9993627799638602	WITHOUT_CLASSIFICATION	6.372200361397933E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999350236314629	WITHOUT_CLASSIFICATION	6.497636853705925E-5	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9993941496270559	WITHOUT_CLASSIFICATION	6.058503729442003E-4	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997133920144304	WITHOUT_CLASSIFICATION	2.866079855695325E-4	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999523087593666	WITHOUT_CLASSIFICATION	4.769124063339783E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9989965012947157	WITHOUT_CLASSIFICATION	0.0010034987052842848	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9997144763400762	WITHOUT_CLASSIFICATION	2.8552365992378113E-4	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999044721265763	WITHOUT_CLASSIFICATION	9.552787342377266E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999128059376551	WITHOUT_CLASSIFICATION	8.719406234492743E-5	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998661694982318	WITHOUT_CLASSIFICATION	1.3383050176819986E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996727745137955	WITHOUT_CLASSIFICATION	3.2722548620437564E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9978400653626943	WITHOUT_CLASSIFICATION	0.0021599346373056346	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997542833105748	WITHOUT_CLASSIFICATION	2.457166894252691E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9991966947780949	WITHOUT_CLASSIFICATION	8.033052219051237E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9991276581369534	WITHOUT_CLASSIFICATION	8.723418630467024E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9994768529886657	WITHOUT_CLASSIFICATION	5.231470113342728E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997542833105748	WITHOUT_CLASSIFICATION	2.457166894252691E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9956088110852346	WITHOUT_CLASSIFICATION	0.004391188914765403	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9995925365425817	WITHOUT_CLASSIFICATION	4.0746345741819756E-4	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9938001615137236	WITHOUT_CLASSIFICATION	0.006199838486276309	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9989354292917321	WITHOUT_CLASSIFICATION	0.001064570708267937	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9995997430995173	WITHOUT_CLASSIFICATION	4.0025690048275643E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9961385212177187	WITHOUT_CLASSIFICATION	0.003861478782281288	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995052852636503	WITHOUT_CLASSIFICATION	4.947147363497617E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9997491274118099	WITHOUT_CLASSIFICATION	2.5087258819008585E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997945898379549	WITHOUT_CLASSIFICATION	2.0541016204512783E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9997398834770701	WITHOUT_CLASSIFICATION	2.601165229299168E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9996650728809718	WITHOUT_CLASSIFICATION	3.3492711902818656E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999507745042897	WITHOUT_CLASSIFICATION	4.9225495710267157E-5	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999382813892117	WITHOUT_CLASSIFICATION	6.171861078829704E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9978969516750379	WITHOUT_CLASSIFICATION	0.0021030483249621433	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9989093709617622	WITHOUT_CLASSIFICATION	0.0010906290382377303	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9996258987848955	WITHOUT_CLASSIFICATION	3.741012151044623E-4	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998596729477058	WITHOUT_CLASSIFICATION	1.403270522942157E-4	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999637001924523	WITHOUT_CLASSIFICATION	3.629980754771159E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.997518020788644	WITHOUT_CLASSIFICATION	0.002481979211355906	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9997831892098451	WITHOUT_CLASSIFICATION	2.168107901548441E-4	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998150974127219	WITHOUT_CLASSIFICATION	1.8490258727803886E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998150974127219	WITHOUT_CLASSIFICATION	1.8490258727803886E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996796970352433	WITHOUT_CLASSIFICATION	3.203029647567276E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997345676150778	WITHOUT_CLASSIFICATION	2.654323849222243E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999810888748999	WITHOUT_CLASSIFICATION	1.8911125100035415E-5	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999728448036426	WITHOUT_CLASSIFICATION	2.7155196357396793E-5	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996781048503706	WITHOUT_CLASSIFICATION	3.218951496294143E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996884310427668	WITHOUT_CLASSIFICATION	3.115689572331152E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996748670282148	WITHOUT_CLASSIFICATION	3.251329717851524E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997128052902763	WITHOUT_CLASSIFICATION	2.8719470972373015E-4	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996779682691198	WITHOUT_CLASSIFICATION	3.2203173088015964E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9993329160479995	WITHOUT_CLASSIFICATION	6.670839520005929E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9993277801694828	WITHOUT_CLASSIFICATION	6.722198305172984E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994698137292695	WITHOUT_CLASSIFICATION	5.301862707304515E-4	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9996105677950764	WITHOUT_CLASSIFICATION	3.8943220492365687E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985304757783462	WITHOUT_CLASSIFICATION	0.0014695242216538154	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9980867047121001	WITHOUT_CLASSIFICATION	0.0019132952878997767	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9992811335631969	WITHOUT_CLASSIFICATION	7.188664368029437E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996923728604942	WITHOUT_CLASSIFICATION	3.076271395058138E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997121001839228	WITHOUT_CLASSIFICATION	2.8789981607735076E-4	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9997338744277791	WITHOUT_CLASSIFICATION	2.661255722209488E-4	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9978017085799651	WITHOUT_CLASSIFICATION	0.002198291420034845	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9980085537027493	WITHOUT_CLASSIFICATION	0.00199144629725077	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9985573043623586	WITHOUT_CLASSIFICATION	0.0014426956376415274	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996693478480425	WITHOUT_CLASSIFICATION	3.3065215195751695E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998209415426517	WITHOUT_CLASSIFICATION	1.7905845734826422E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999659527984428	WITHOUT_CLASSIFICATION	3.4047201557198503E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.998196018643638	WITHOUT_CLASSIFICATION	0.0018039813563619762	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9997337771349816	WITHOUT_CLASSIFICATION	2.6622286501853026E-4	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996169266281053	WITHOUT_CLASSIFICATION	3.830733718947186E-4	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9993158308797812	WITHOUT_CLASSIFICATION	6.841691202188019E-4	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997535647664657	WITHOUT_CLASSIFICATION	2.4643523353429003E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997844338871635	WITHOUT_CLASSIFICATION	2.1556611283637316E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9980865175464156	WITHOUT_CLASSIFICATION	0.0019134824535843782	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999735078233557	WITHOUT_CLASSIFICATION	2.649217664429585E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998981299585812	WITHOUT_CLASSIFICATION	1.0187004141888159E-4	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998549578502519	WITHOUT_CLASSIFICATION	1.450421497481423E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986995487671604	WITHOUT_CLASSIFICATION	0.0013004512328395907	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9992865690266028	WITHOUT_CLASSIFICATION	7.134309733971445E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998560385268441	WITHOUT_CLASSIFICATION	1.4396147315581614E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985304757783462	WITHOUT_CLASSIFICATION	0.0014695242216538154	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999239466448202	WITHOUT_CLASSIFICATION	7.605335517985815E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9993050351413064	WITHOUT_CLASSIFICATION	6.949648586936986E-4	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996154192648443	WITHOUT_CLASSIFICATION	3.845807351557716E-4	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994698137292695	WITHOUT_CLASSIFICATION	5.301862707304515E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9997193164332381	WITHOUT_CLASSIFICATION	2.8068356676196185E-4	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9982958511768594	WITHOUT_CLASSIFICATION	0.0017041488231405607	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995134412706237	WITHOUT_CLASSIFICATION	4.86558729376271E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9986971738010049	WITHOUT_CLASSIFICATION	0.0013028261989950663	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992168918841444	WITHOUT_CLASSIFICATION	7.831081158555324E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996659290647862	WITHOUT_CLASSIFICATION	3.340709352137346E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997809833044324	WITHOUT_CLASSIFICATION	2.1901669556764557E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995780027266976	WITHOUT_CLASSIFICATION	4.2199727330238964E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994995160963523	WITHOUT_CLASSIFICATION	5.004839036475995E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9997198590031559	WITHOUT_CLASSIFICATION	2.8014099684410456E-4	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9992811335631969	WITHOUT_CLASSIFICATION	7.188664368029437E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994698137292695	WITHOUT_CLASSIFICATION	5.301862707304515E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998565120954727	WITHOUT_CLASSIFICATION	1.434879045272575E-4	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998533099764029	WITHOUT_CLASSIFICATION	1.4669002359717518E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998474905827947	WITHOUT_CLASSIFICATION	1.525094172052894E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9990773953019504	WITHOUT_CLASSIFICATION	9.226046980495013E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9987001146766	WITHOUT_CLASSIFICATION	0.0012998853233999572	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998212610417632	WITHOUT_CLASSIFICATION	1.7873895823674072E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9986227362642994	WITHOUT_CLASSIFICATION	0.001377263735700581	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9997411954211167	WITHOUT_CLASSIFICATION	2.58804578883209E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996722754911934	WITHOUT_CLASSIFICATION	3.277245088065632E-4	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994698137292695	WITHOUT_CLASSIFICATION	5.301862707304515E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985304757783462	WITHOUT_CLASSIFICATION	0.0014695242216538154	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9967116539410251	WITHOUT_CLASSIFICATION	0.0032883460589748195	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9997110432937838	WITHOUT_CLASSIFICATION	2.889567062162435E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9883412927517847	WITHOUT_CLASSIFICATION	0.01165870724821533	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985304757783462	WITHOUT_CLASSIFICATION	0.0014695242216538154	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998491250828901	WITHOUT_CLASSIFICATION	1.5087491710980938E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998474905827947	WITHOUT_CLASSIFICATION	1.525094172052894E-4	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9996237514228745	WITHOUT_CLASSIFICATION	3.762485771254326E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9962759629947578	WITHOUT_CLASSIFICATION	0.0037240370052421443	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9867028375296896	WITHOUT_CLASSIFICATION	0.01329716247031048	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992168918841444	WITHOUT_CLASSIFICATION	7.831081158555324E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9996659290647862	WITHOUT_CLASSIFICATION	3.340709352137346E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9997642841389301	WITHOUT_CLASSIFICATION	2.3571586106980942E-4	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9997863545564293	WITHOUT_CLASSIFICATION	2.1364544357070647E-4	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.998914358603228	WITHOUT_CLASSIFICATION	0.0010856413967719964	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9983469481078192	WITHOUT_CLASSIFICATION	0.0016530518921807702	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.6253304181101754	WITHOUT_CLASSIFICATION	0.37466958188982463	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985304757783462	WITHOUT_CLASSIFICATION	0.0014695242216538154	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997809833044324	WITHOUT_CLASSIFICATION	2.1901669556764557E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995780027266976	WITHOUT_CLASSIFICATION	4.2199727330238964E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998121766377553	WITHOUT_CLASSIFICATION	1.8782336224462857E-4	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996226760053527	WITHOUT_CLASSIFICATION	3.7732399464726526E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9996722016027991	WITHOUT_CLASSIFICATION	3.2779839720089573E-4	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9995185308597943	WITHOUT_CLASSIFICATION	4.8146914020577033E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9997217513397703	WITHOUT_CLASSIFICATION	2.782486602296974E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9994622010214538	WITHOUT_CLASSIFICATION	5.377989785462326E-4	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998489870824638	WITHOUT_CLASSIFICATION	1.5101291753622542E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9997386968715385	WITHOUT_CLASSIFICATION	2.613031284615031E-4	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999372171075505	WITHOUT_CLASSIFICATION	6.278289244956273E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996884310427668	WITHOUT_CLASSIFICATION	3.115689572331152E-4	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999315312312675	WITHOUT_CLASSIFICATION	6.846876873242226E-5	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9997108661068348	WITHOUT_CLASSIFICATION	2.8913389316519936E-4	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996919851930897	WITHOUT_CLASSIFICATION	3.080148069103548E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9994333835436474	WITHOUT_CLASSIFICATION	5.666164563525762E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996748670282148	WITHOUT_CLASSIFICATION	3.251329717851524E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996746678334896	WITHOUT_CLASSIFICATION	3.253321665104379E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998981299585812	WITHOUT_CLASSIFICATION	1.0187004141888159E-4	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9987914095831262	WITHOUT_CLASSIFICATION	0.0012085904168737407	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9986153897079783	WITHOUT_CLASSIFICATION	0.0013846102920217413	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9993081380793216	WITHOUT_CLASSIFICATION	6.918619206784298E-4	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9997766523799143	WITHOUT_CLASSIFICATION	2.233476200856992E-4	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999527698092391	WITHOUT_CLASSIFICATION	4.723019076084179E-5	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9992323801745749	WITHOUT_CLASSIFICATION	7.67619825424968E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9984674539583948	WITHOUT_CLASSIFICATION	0.0015325460416052469	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995052852636503	WITHOUT_CLASSIFICATION	4.947147363497617E-4	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997026180061119	WITHOUT_CLASSIFICATION	2.973819938880213E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9983610185030654	WITHOUT_CLASSIFICATION	0.0016389814969346931	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9996263736109939	WITHOUT_CLASSIFICATION	3.736263890061145E-4	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999783996662099	WITHOUT_CLASSIFICATION	2.1600333790104364E-4	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9994960044490745	WITHOUT_CLASSIFICATION	5.039955509255232E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9991741684251214	WITHOUT_CLASSIFICATION	8.258315748786603E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996012589692933	WITHOUT_CLASSIFICATION	3.9874103070671694E-4	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995202398610954	WITHOUT_CLASSIFICATION	4.797601389046763E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998560476429488	WITHOUT_CLASSIFICATION	1.439523570512237E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998745057036563	WITHOUT_CLASSIFICATION	1.2549429634365738E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999750047407379	WITHOUT_CLASSIFICATION	2.4995259262100214E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997385320155338	WITHOUT_CLASSIFICATION	2.6146798446623383E-4	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9975792106193654	WITHOUT_CLASSIFICATION	0.0024207893806345686	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997905006054603	WITHOUT_CLASSIFICATION	0.00209499394539698	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998727858491467	WITHOUT_CLASSIFICATION	1.2721415085333295E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9996699894131584	WITHOUT_CLASSIFICATION	3.3001058684156226E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9975792106193654	WITHOUT_CLASSIFICATION	0.0024207893806345686	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998218990583622	WITHOUT_CLASSIFICATION	1.781009416377434E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998540748642276	WITHOUT_CLASSIFICATION	1.4592513577236997E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997833027890776	WITHOUT_CLASSIFICATION	2.1669721092237369E-4	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9995652793962913	WITHOUT_CLASSIFICATION	4.347206037087197E-4	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.99561405560601	WITHOUT_CLASSIFICATION	0.004385944393990025	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9995277140301263	WITHOUT_CLASSIFICATION	4.722859698736151E-4	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9996052055744709	WITHOUT_CLASSIFICATION	3.9479442552913E-4	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9994932017866723	WITHOUT_CLASSIFICATION	5.067982133276217E-4	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9994932017866723	WITHOUT_CLASSIFICATION	5.067982133276217E-4	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999512518032353	WITHOUT_CLASSIFICATION	4.8748196764713153E-4	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9991021124379175	WITHOUT_CLASSIFICATION	8.978875620824579E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9991283670439787	WITHOUT_CLASSIFICATION	8.716329560213659E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998068900641729	WITHOUT_CLASSIFICATION	1.9310993582702016E-4	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997130172386361	WITHOUT_CLASSIFICATION	2.8698276136384726E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9994646035247322	WITHOUT_CLASSIFICATION	5.35396475267772E-4	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999168299798962	WITHOUT_CLASSIFICATION	8.317002010383172E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996048989079953	WITHOUT_CLASSIFICATION	3.951010920047293E-4	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9996708266809606	WITHOUT_CLASSIFICATION	3.2917331903943066E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9998231132693796	WITHOUT_CLASSIFICATION	1.7688673062045773E-4	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997953968429336	WITHOUT_CLASSIFICATION	2.0460315706649198E-4	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9997184826725269	WITHOUT_CLASSIFICATION	2.815173274729599E-4	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9986589759552514	WITHOUT_CLASSIFICATION	0.0013410240447486188	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9977451260457654	WITHOUT_CLASSIFICATION	0.0022548739542345864	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9991334219832798	WITHOUT_CLASSIFICATION	8.665780167201277E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9925652226807224	WITHOUT_CLASSIFICATION	0.007434777319277492	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996118186494989	WITHOUT_CLASSIFICATION	3.881813505010481E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9941526425945165	WITHOUT_CLASSIFICATION	0.005847357405483402	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9997658749380873	WITHOUT_CLASSIFICATION	2.34125061912714E-4	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998226189198054	WITHOUT_CLASSIFICATION	1.7738108019469244E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996644792986539	WITHOUT_CLASSIFICATION	3.3552070134609227E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998226189198054	WITHOUT_CLASSIFICATION	1.7738108019469244E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9988229844595112	WITHOUT_CLASSIFICATION	0.0011770155404887048	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9997787366240668	WITHOUT_CLASSIFICATION	2.2126337593315835E-4	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997930992268693	WITHOUT_CLASSIFICATION	2.0690077313058043E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9992293090218264	WITHOUT_CLASSIFICATION	7.706909781735222E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9994241390710248	WITHOUT_CLASSIFICATION	5.758609289751955E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9993939837240741	WITHOUT_CLASSIFICATION	6.0601627592589E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9994732747113725	WITHOUT_CLASSIFICATION	5.26725288627549E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.998877369645944	WITHOUT_CLASSIFICATION	0.0011226303540559854	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999749358315911	WITHOUT_CLASSIFICATION	2.506416840889877E-4	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9994431671444528	WITHOUT_CLASSIFICATION	5.568328555471446E-4	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9995557069422514	WITHOUT_CLASSIFICATION	4.44293057748641E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9993606200475302	WITHOUT_CLASSIFICATION	6.393799524698691E-4	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9990402717915778	WITHOUT_CLASSIFICATION	9.597282084221164E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9996091125412652	WITHOUT_CLASSIFICATION	3.90887458734857E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9984208453102392	WITHOUT_CLASSIFICATION	0.001579154689760735	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9994567146266462	WITHOUT_CLASSIFICATION	5.432853733537427E-4	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9925014330093241	WITHOUT_CLASSIFICATION	0.007498566990675958	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9989825824630654	WITHOUT_CLASSIFICATION	0.0010174175369346407	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999880177527722	WITHOUT_CLASSIFICATION	1.1982247227804861E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9992811335631969	WITHOUT_CLASSIFICATION	7.188664368029437E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9992811335631969	WITHOUT_CLASSIFICATION	7.188664368029437E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9992465072689075	WITHOUT_CLASSIFICATION	7.534927310924918E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997713296156365	WITHOUT_CLASSIFICATION	2.2867038436352478E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9997487276719476	WITHOUT_CLASSIFICATION	2.512723280524463E-4	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9998768573110679	WITHOUT_CLASSIFICATION	1.231426889321292E-4	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997996324325267	WITHOUT_CLASSIFICATION	2.0036756747337733E-4	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.995780007297868	WITHOUT_CLASSIFICATION	0.0042199927021320085	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9995420266981929	WITHOUT_CLASSIFICATION	4.579733018070649E-4	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9991995155368217	WITHOUT_CLASSIFICATION	8.004844631781733E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992188139434937	WITHOUT_CLASSIFICATION	7.81186056506328E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999536467875914	WITHOUT_CLASSIFICATION	4.6353212408609156E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9990629520657575	WITHOUT_CLASSIFICATION	9.370479342424492E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9994561651619741	WITHOUT_CLASSIFICATION	5.438348380258961E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9993140726567614	WITHOUT_CLASSIFICATION	6.859273432385964E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.999413304047771	WITHOUT_CLASSIFICATION	5.866959522290345E-4	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.998599813584303	WITHOUT_CLASSIFICATION	0.0014001864156969297	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9979548785730226	WITHOUT_CLASSIFICATION	0.002045121426977359	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9956670906977769	WITHOUT_CLASSIFICATION	0.004332909302223067	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9993713640905513	WITHOUT_CLASSIFICATION	6.286359094487455E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9979548785730226	WITHOUT_CLASSIFICATION	0.002045121426977359	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9997050361805242	WITHOUT_CLASSIFICATION	2.9496381947578137E-4	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9995272259095471	WITHOUT_CLASSIFICATION	4.7277409045294594E-4	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999551837717804	WITHOUT_CLASSIFICATION	4.481622821960165E-4	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9992427684118315	WITHOUT_CLASSIFICATION	7.572315881685214E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9997616920803407	WITHOUT_CLASSIFICATION	2.3830791965919664E-4	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9997592318358001	WITHOUT_CLASSIFICATION	2.407681642000637E-4	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9996766280701885	WITHOUT_CLASSIFICATION	3.233719298114965E-4	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998770923607129	WITHOUT_CLASSIFICATION	1.2290763928713674E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9993808200579785	WITHOUT_CLASSIFICATION	6.191799420216649E-4	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9994426302541191	WITHOUT_CLASSIFICATION	5.573697458809847E-4	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998647789975061	WITHOUT_CLASSIFICATION	1.3522100249375725E-4	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998509765902489	WITHOUT_CLASSIFICATION	1.4902340975103735E-4	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999552788877446	WITHOUT_CLASSIFICATION	4.472111225530245E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9997463451220802	WITHOUT_CLASSIFICATION	2.536548779198075E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999448128495647	WITHOUT_CLASSIFICATION	5.51871504353303E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.99955993582713	WITHOUT_CLASSIFICATION	4.4006417287008483E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9942420677356933	WITHOUT_CLASSIFICATION	0.0057579322643066385	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9993156127402044	WITHOUT_CLASSIFICATION	6.8438725979563E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994625248929152	WITHOUT_CLASSIFICATION	5.374751070848703E-4	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9997306805898089	WITHOUT_CLASSIFICATION	2.693194101911596E-4	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9923245263656539	WITHOUT_CLASSIFICATION	0.007675473634346114	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9964470754805872	WITHOUT_CLASSIFICATION	0.0035529245194127986	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9988187885462145	WITHOUT_CLASSIFICATION	0.0011812114537854577	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9989348942171761	WITHOUT_CLASSIFICATION	0.0010651057828239144	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9989864059865101	WITHOUT_CLASSIFICATION	0.0010135940134898735	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9991999503804287	WITHOUT_CLASSIFICATION	8.000496195712892E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9991741684251214	WITHOUT_CLASSIFICATION	8.258315748786603E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9957808832985372	WITHOUT_CLASSIFICATION	0.0042191167014628906	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9993831232413986	WITHOUT_CLASSIFICATION	6.168767586014301E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9886631596320117	WITHOUT_CLASSIFICATION	0.011336840367988387	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9993968175730933	WITHOUT_CLASSIFICATION	6.031824269067576E-4	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998450094228206	WITHOUT_CLASSIFICATION	1.549905771793546E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9988865906965175	WITHOUT_CLASSIFICATION	0.0011134093034824543	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9998334156996689	WITHOUT_CLASSIFICATION	1.6658430033119392E-4	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999660335890628	WITHOUT_CLASSIFICATION	3.396641093719847E-4	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9996489167549356	WITHOUT_CLASSIFICATION	3.5108324506447037E-4	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9996489167549356	WITHOUT_CLASSIFICATION	3.5108324506447037E-4	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999004461413815	WITHOUT_CLASSIFICATION	9.955385861848374E-5	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998423804547462	WITHOUT_CLASSIFICATION	1.576195452537502E-4	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9992660452151477	WITHOUT_CLASSIFICATION	7.339547848523014E-4	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9993539576317759	WITHOUT_CLASSIFICATION	6.460423682240888E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9997970113583174	WITHOUT_CLASSIFICATION	2.0298864168243942E-4	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9992328358966448	WITHOUT_CLASSIFICATION	7.671641033551278E-4	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9985136804700048	WITHOUT_CLASSIFICATION	0.0014863195299951886	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9986459406116834	WITHOUT_CLASSIFICATION	0.0013540593883164741	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.99960223255879	WITHOUT_CLASSIFICATION	3.9776744121000325E-4	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9997866015514134	WITHOUT_CLASSIFICATION	2.1339844858658463E-4	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9986478090032623	WITHOUT_CLASSIFICATION	0.001352190996737622	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9996561499864334	WITHOUT_CLASSIFICATION	3.438500135665928E-4	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9979249525798125	WITHOUT_CLASSIFICATION	0.00207504742018757	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995362826300697	WITHOUT_CLASSIFICATION	4.6371736993031933E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9997469137802085	WITHOUT_CLASSIFICATION	2.5308621979147926E-4	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9997314429652373	WITHOUT_CLASSIFICATION	2.6855703476273864E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999173825172225	WITHOUT_CLASSIFICATION	8.261748277750248E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9993577255208917	WITHOUT_CLASSIFICATION	6.422744791082356E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9952396927486875	WITHOUT_CLASSIFICATION	0.004760307251312551	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996980929318403	WITHOUT_CLASSIFICATION	3.0190706815964283E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996689761842819	WITHOUT_CLASSIFICATION	3.310238157181561E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997474790827785	WITHOUT_CLASSIFICATION	2.525209172215408E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9954348028649046	WITHOUT_CLASSIFICATION	0.004565197135095316	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9993021576586664	WITHOUT_CLASSIFICATION	6.978423413336132E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997089962438166	WITHOUT_CLASSIFICATION	2.9100375618343425E-4	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9978112870199837	WITHOUT_CLASSIFICATION	0.0021887129800162394	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9983491022035085	WITHOUT_CLASSIFICATION	0.0016508977964915545	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996968678887702	WITHOUT_CLASSIFICATION	3.03132111229854E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9983491022035085	WITHOUT_CLASSIFICATION	0.0016508977964915545	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989390879488454	WITHOUT_CLASSIFICATION	0.001060912051154567	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9995557316736832	WITHOUT_CLASSIFICATION	4.442683263167848E-4	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9997559543001027	WITHOUT_CLASSIFICATION	2.4404569989746046E-4	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999589510031063	WITHOUT_CLASSIFICATION	4.104899689372529E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998326319455492	WITHOUT_CLASSIFICATION	1.6736805445076886E-4	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998250083634226	WITHOUT_CLASSIFICATION	1.7499163657747505E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998092749544425	WITHOUT_CLASSIFICATION	1.9072504555747496E-4	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9984502352954294	WITHOUT_CLASSIFICATION	0.00154976470457058	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999050711093611	WITHOUT_CLASSIFICATION	9.492889063883617E-5	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998223498290811	WITHOUT_CLASSIFICATION	1.776501709189741E-4	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9993386684081704	WITHOUT_CLASSIFICATION	6.613315918295419E-4	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9997882721665846	WITHOUT_CLASSIFICATION	2.1172783341537956E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9991991501299672	WITHOUT_CLASSIFICATION	8.008498700327632E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9980320172369508	WITHOUT_CLASSIFICATION	0.001967982763049303	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9986545303636435	WITHOUT_CLASSIFICATION	0.001345469636356538	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999554541922131	WITHOUT_CLASSIFICATION	4.454580778690647E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9994212867469702	WITHOUT_CLASSIFICATION	5.787132530298587E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9994212867469702	WITHOUT_CLASSIFICATION	5.787132530298587E-4	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9991995155368217	WITHOUT_CLASSIFICATION	8.004844631781733E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9997857470322501	WITHOUT_CLASSIFICATION	2.1425296774984983E-4	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9998895800247188	WITHOUT_CLASSIFICATION	1.1041997528120255E-4	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998552501579135	WITHOUT_CLASSIFICATION	1.4474984208646247E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998630189783962	WITHOUT_CLASSIFICATION	1.3698102160381338E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999125767299438	WITHOUT_CLASSIFICATION	8.742327005607553E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9137860277817802	WITHOUT_CLASSIFICATION	0.08621397221821978	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9984265191787861	WITHOUT_CLASSIFICATION	0.0015734808212138109	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.999584731113436	WITHOUT_CLASSIFICATION	4.15268886563893E-4	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999307153102878	WITHOUT_CLASSIFICATION	6.928468971227974E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998542303666872	WITHOUT_CLASSIFICATION	1.4576963331279616E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999853867574126	WITHOUT_CLASSIFICATION	1.4613242587536497E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9995846325343616	WITHOUT_CLASSIFICATION	4.153674656384923E-4	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999335010566256	WITHOUT_CLASSIFICATION	6.649894337441253E-4	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997938815757047	WITHOUT_CLASSIFICATION	2.0611842429543E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9906811408824839	WITHOUT_CLASSIFICATION	0.00931885911751607	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999287062151131	WITHOUT_CLASSIFICATION	7.12937848868952E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999452124171706	WITHOUT_CLASSIFICATION	5.478758282938971E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9992764013619251	WITHOUT_CLASSIFICATION	7.235986380748876E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9997254320368205	WITHOUT_CLASSIFICATION	2.7456796317949545E-4	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999013457824899	WITHOUT_CLASSIFICATION	9.865421751014822E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.998231074490413	WITHOUT_CLASSIFICATION	0.001768925509586988	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9995490502047919	WITHOUT_CLASSIFICATION	4.5094979520810246E-4	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9996728805519369	WITHOUT_CLASSIFICATION	3.27119448063123E-4	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9996655117297103	WITHOUT_CLASSIFICATION	3.344882702897552E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9997654010975665	WITHOUT_CLASSIFICATION	2.3459890243335803E-4	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9992408445205976	WITHOUT_CLASSIFICATION	7.591554794024395E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9979679512156906	WITHOUT_CLASSIFICATION	0.002032048784309448	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9984318441464599	WITHOUT_CLASSIFICATION	0.0015681558535400849	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9990936642755588	WITHOUT_CLASSIFICATION	9.063357244413126E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999544564781951	WITHOUT_CLASSIFICATION	4.5543521804894453E-5	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996989138220765	WITHOUT_CLASSIFICATION	3.010861779233521E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9995593160329955	WITHOUT_CLASSIFICATION	4.406839670045119E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996283519059813	WITHOUT_CLASSIFICATION	3.716480940186156E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999320468455667	WITHOUT_CLASSIFICATION	6.795315443331292E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998922129450569	WITHOUT_CLASSIFICATION	1.0778705494311592E-4	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9996530090946667	WITHOUT_CLASSIFICATION	3.469909053333266E-4	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9994745798711593	WITHOUT_CLASSIFICATION	5.254201288407302E-4	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9981469925307742	WITHOUT_CLASSIFICATION	0.001853007469225771	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997531312580452	WITHOUT_CLASSIFICATION	2.4686874195479277E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999662780778971	WITHOUT_CLASSIFICATION	3.372192210290131E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.996968180648429	WITHOUT_CLASSIFICATION	0.0030318193515709697	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9977841110491961	WITHOUT_CLASSIFICATION	0.0022158889508040254	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9989356515465637	WITHOUT_CLASSIFICATION	0.0010643484534362732	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9993288421902783	WITHOUT_CLASSIFICATION	6.711578097217265E-4	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999348736542661	WITHOUT_CLASSIFICATION	6.512634573387165E-5	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996120273605649	WITHOUT_CLASSIFICATION	3.8797263943508316E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9990924838920655	WITHOUT_CLASSIFICATION	9.075161079346414E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999662780778971	WITHOUT_CLASSIFICATION	3.372192210290131E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9994199717325494	WITHOUT_CLASSIFICATION	5.80028267450669E-4	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996904190866271	WITHOUT_CLASSIFICATION	3.095809133728367E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999002781098612	WITHOUT_CLASSIFICATION	9.972189013880805E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9993140726567614	WITHOUT_CLASSIFICATION	6.859273432385964E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998491250828901	WITHOUT_CLASSIFICATION	1.5087491710980938E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9998491250828901	WITHOUT_CLASSIFICATION	1.5087491710980938E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9998793900305837	WITHOUT_CLASSIFICATION	1.2060996941637507E-4	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9986491608173355	WITHOUT_CLASSIFICATION	0.0013508391826645154	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997228424189749	WITHOUT_CLASSIFICATION	2.7715758102505716E-4	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9990265879945062	WITHOUT_CLASSIFICATION	9.734120054938904E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996128829842026	WITHOUT_CLASSIFICATION	3.8711701579739846E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995867931778306	WITHOUT_CLASSIFICATION	4.132068221693763E-4	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9998221957790777	WITHOUT_CLASSIFICATION	1.778042209222242E-4	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9989820381639266	WITHOUT_CLASSIFICATION	0.0010179618360734385	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9989858833411402	WITHOUT_CLASSIFICATION	0.0010141166588597192	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9975179366777285	WITHOUT_CLASSIFICATION	0.002482063322271562	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999053146217681	WITHOUT_CLASSIFICATION	9.468537823190048E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999159582841006	WITHOUT_CLASSIFICATION	8.404171589939792E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9995332010394783	WITHOUT_CLASSIFICATION	4.6679896052161216E-4	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999708505437171	WITHOUT_CLASSIFICATION	2.914945628290074E-4	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9992208061558145	WITHOUT_CLASSIFICATION	7.79193844185562E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997483150343198	WITHOUT_CLASSIFICATION	2.5168496568021256E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9985743345640514	WITHOUT_CLASSIFICATION	0.0014256654359485177	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9992089620944159	WITHOUT_CLASSIFICATION	7.910379055840813E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9996905009747103	WITHOUT_CLASSIFICATION	3.094990252897109E-4	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9990765392508553	WITHOUT_CLASSIFICATION	9.234607491448502E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999671032361115	WITHOUT_CLASSIFICATION	3.289676388852192E-5	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999134365029641	WITHOUT_CLASSIFICATION	8.656349703589342E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9884104873411511	WITHOUT_CLASSIFICATION	0.011589512658848871	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998140223232521	WITHOUT_CLASSIFICATION	1.8597767674784105E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.99993318146146	WITHOUT_CLASSIFICATION	6.681853853996938E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9966058365133698	WITHOUT_CLASSIFICATION	0.0033941634866302517	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9993876821136481	WITHOUT_CLASSIFICATION	6.123178863519054E-4	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9990024841732844	WITHOUT_CLASSIFICATION	9.975158267156298E-4	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994140647286124	WITHOUT_CLASSIFICATION	5.859352713876796E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9993876821136481	WITHOUT_CLASSIFICATION	6.123178863519054E-4	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9995787541415696	WITHOUT_CLASSIFICATION	4.2124585843039355E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9994594471877487	WITHOUT_CLASSIFICATION	5.405528122513583E-4	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9986857552351325	WITHOUT_CLASSIFICATION	0.0013142447648675172	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9995981493134022	WITHOUT_CLASSIFICATION	4.018506865978147E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9993604679434543	WITHOUT_CLASSIFICATION	6.395320565456536E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998542303666872	WITHOUT_CLASSIFICATION	1.4576963331279616E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9991491268902178	WITHOUT_CLASSIFICATION	8.508731097821351E-4	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9992323801745749	WITHOUT_CLASSIFICATION	7.67619825424968E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9983502907575529	WITHOUT_CLASSIFICATION	0.00164970924244713	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997139818839114	WITHOUT_CLASSIFICATION	2.860181160885639E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9964384045702931	WITHOUT_CLASSIFICATION	0.0035615954297067865	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998052625142781	WITHOUT_CLASSIFICATION	1.9473748572188348E-4	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9964481272189674	WITHOUT_CLASSIFICATION	0.003551872781032677	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9997226117936354	WITHOUT_CLASSIFICATION	2.773882063645728E-4	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997900763092568	WITHOUT_CLASSIFICATION	2.0992369074313778E-4	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9997828285352867	WITHOUT_CLASSIFICATION	2.1717146471338672E-4	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997448607755353	WITHOUT_CLASSIFICATION	2.5513922446466223E-4	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998496006956319	WITHOUT_CLASSIFICATION	1.503993043680674E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9995449278607966	WITHOUT_CLASSIFICATION	4.5507213920336395E-4	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999707375129233	WITHOUT_CLASSIFICATION	2.9262487076692315E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997294301557582	WITHOUT_CLASSIFICATION	2.705698442417249E-4	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9997663928262379	WITHOUT_CLASSIFICATION	2.3360717376215168E-4	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9998670036072664	WITHOUT_CLASSIFICATION	1.3299639273353978E-4	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9997946463827613	WITHOUT_CLASSIFICATION	2.0535361723864173E-4	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9995934085517945	WITHOUT_CLASSIFICATION	4.0659144820551045E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9996627842460094	WITHOUT_CLASSIFICATION	3.3721575399064415E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9992600974526313	WITHOUT_CLASSIFICATION	7.399025473686757E-4	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9996906258911664	WITHOUT_CLASSIFICATION	3.0937410883358663E-4	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9997064132019582	WITHOUT_CLASSIFICATION	2.9358679804184065E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994504217093559	WITHOUT_CLASSIFICATION	5.49578290644141E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996976358800463	WITHOUT_CLASSIFICATION	3.023641199536811E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9963031812704375	WITHOUT_CLASSIFICATION	0.0036968187295625763	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9996887932984991	WITHOUT_CLASSIFICATION	3.112067015009024E-4	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9997030175928524	WITHOUT_CLASSIFICATION	2.969824071476492E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998401010813074	WITHOUT_CLASSIFICATION	1.5989891869264833E-4	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998634443589742	WITHOUT_CLASSIFICATION	1.3655564102574587E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999698333071806	WITHOUT_CLASSIFICATION	3.0166692819399423E-4	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999265976159143	WITHOUT_CLASSIFICATION	7.340238408571771E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9992852214573601	WITHOUT_CLASSIFICATION	7.147785426399242E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9832851511552209	WITHOUT_CLASSIFICATION	0.016714848844779147	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9997529806125681	WITHOUT_CLASSIFICATION	2.4701938743177933E-4	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998637578836912	WITHOUT_CLASSIFICATION	1.362421163088684E-4	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9996908808587184	WITHOUT_CLASSIFICATION	3.091191412816862E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999530723496162	WITHOUT_CLASSIFICATION	4.6927650383843596E-5	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998573458330114	WITHOUT_CLASSIFICATION	1.4265416698853512E-4	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.99991937962696	WITHOUT_CLASSIFICATION	8.062037303998906E-5	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9981262128921006	WITHOUT_CLASSIFICATION	0.0018737871078994136	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9991636860388471	WITHOUT_CLASSIFICATION	8.363139611530703E-4	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9995701872944275	WITHOUT_CLASSIFICATION	4.298127055724539E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9978302571340047	WITHOUT_CLASSIFICATION	0.002169742865995283	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9984517161596781	WITHOUT_CLASSIFICATION	0.0015482838403219003	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998082964260154	WITHOUT_CLASSIFICATION	1.9170357398461243E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9989635324617213	WITHOUT_CLASSIFICATION	0.001036467538278719	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997219838727331	WITHOUT_CLASSIFICATION	2.780161272667991E-4	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9997618256439035	WITHOUT_CLASSIFICATION	2.3817435609659661E-4	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999325051455983	WITHOUT_CLASSIFICATION	6.74948544017579E-5	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993517591114404	WITHOUT_CLASSIFICATION	6.482408885596038E-4	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998423444986089	WITHOUT_CLASSIFICATION	1.5765550139115354E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994504217093559	WITHOUT_CLASSIFICATION	5.49578290644141E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998749139292173	WITHOUT_CLASSIFICATION	1.2508607078260756E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9996173537236529	WITHOUT_CLASSIFICATION	3.826462763471476E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999782641874576	WITHOUT_CLASSIFICATION	2.1735812542401323E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9996643968493607	WITHOUT_CLASSIFICATION	3.3560315063931956E-4	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9996285978157428	WITHOUT_CLASSIFICATION	3.7140218425716346E-4	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997111017916515	WITHOUT_CLASSIFICATION	2.888982083485557E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997147465677646	WITHOUT_CLASSIFICATION	2.852534322353913E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999313405036353	WITHOUT_CLASSIFICATION	6.865949636470722E-5	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9997406867473188	WITHOUT_CLASSIFICATION	2.5931325268117346E-4	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9986847718185867	WITHOUT_CLASSIFICATION	0.0013152281814133283	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.99887346221945	WITHOUT_CLASSIFICATION	0.0011265377805500393	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998732521081414	WITHOUT_CLASSIFICATION	1.2674789185862902E-4	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999877557119706	WITHOUT_CLASSIFICATION	1.2244288029394107E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989390879488454	WITHOUT_CLASSIFICATION	0.001060912051154567	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9988696240072151	WITHOUT_CLASSIFICATION	0.0011303759927848345	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9992153719452509	WITHOUT_CLASSIFICATION	7.846280547490772E-4	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9993537713304993	WITHOUT_CLASSIFICATION	6.462286695006009E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9998715637288694	WITHOUT_CLASSIFICATION	1.2843627113054334E-4	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9997521587226514	WITHOUT_CLASSIFICATION	2.4784127734854626E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989079000418174	WITHOUT_CLASSIFICATION	0.0010920999581825793	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989079000418174	WITHOUT_CLASSIFICATION	0.0010920999581825793	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997553844028045	WITHOUT_CLASSIFICATION	2.4461559719552025E-4	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9979449689031599	WITHOUT_CLASSIFICATION	0.0020550310968401957	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997922879887854	WITHOUT_CLASSIFICATION	2.0771201121467977E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996736474456435	WITHOUT_CLASSIFICATION	3.2635255435650625E-4	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9992839379224452	WITHOUT_CLASSIFICATION	7.16062077554861E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998393498055324	WITHOUT_CLASSIFICATION	1.6065019446773808E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9988693899281683	WITHOUT_CLASSIFICATION	0.0011306100718317211	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9941580856805138	WITHOUT_CLASSIFICATION	0.005841914319486201	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9941580856805138	WITHOUT_CLASSIFICATION	0.005841914319486201	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9991984733466882	WITHOUT_CLASSIFICATION	8.015266533119148E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9996391978925641	WITHOUT_CLASSIFICATION	3.6080210743590557E-4	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9995082940024492	WITHOUT_CLASSIFICATION	4.917059975507818E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995363429551818	WITHOUT_CLASSIFICATION	4.636570448182203E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995363429551818	WITHOUT_CLASSIFICATION	4.636570448182203E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995363429551818	WITHOUT_CLASSIFICATION	4.636570448182203E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9997264155314021	WITHOUT_CLASSIFICATION	2.735844685978598E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997911837316372	WITHOUT_CLASSIFICATION	2.088162683627971E-4	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9997596915556966	WITHOUT_CLASSIFICATION	2.4030844430345717E-4	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999650564573659	WITHOUT_CLASSIFICATION	3.4943542634144975E-5	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9995882291641184	WITHOUT_CLASSIFICATION	4.117708358816916E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999247875911278	WITHOUT_CLASSIFICATION	7.521240887211676E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997169995525468	WITHOUT_CLASSIFICATION	2.830004474533236E-4	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.979527560243358	WITHOUT_CLASSIFICATION	0.020472439756642064	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999035046942663	WITHOUT_CLASSIFICATION	9.649530573377585E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9997036293720855	WITHOUT_CLASSIFICATION	2.9637062791454123E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9997969136908754	WITHOUT_CLASSIFICATION	2.0308630912455693E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9993757380347782	WITHOUT_CLASSIFICATION	6.242619652218361E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999608737018132	WITHOUT_CLASSIFICATION	3.9126298186846754E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999277614370456	WITHOUT_CLASSIFICATION	7.223856295443931E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999892403686749	WITHOUT_CLASSIFICATION	1.0759631325101011E-4	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999441472425135	WITHOUT_CLASSIFICATION	5.58527574864921E-4	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9992922004850981	WITHOUT_CLASSIFICATION	7.077995149017657E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9989079000418174	WITHOUT_CLASSIFICATION	0.0010920999581825793	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999670201782235	WITHOUT_CLASSIFICATION	3.2979821776504457E-4	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9854494334195352	WITHOUT_CLASSIFICATION	0.014550566580464941	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998055295321506	WITHOUT_CLASSIFICATION	1.9447046784930948E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999717629583985	WITHOUT_CLASSIFICATION	2.823704160149159E-4	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9997355991001523	WITHOUT_CLASSIFICATION	2.644008998477654E-4	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999719508388232	WITHOUT_CLASSIFICATION	2.8049161176726634E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999630789320487	WITHOUT_CLASSIFICATION	3.6921067951299017E-4	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999750931781841	WITHOUT_CLASSIFICATION	2.4906821815937447E-5	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999860598362954	WITHOUT_CLASSIFICATION	1.3940163704605639E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998772685865401	WITHOUT_CLASSIFICATION	1.2273141345984522E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9963531113553291	WITHOUT_CLASSIFICATION	0.003646888644670767	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999770119851555	WITHOUT_CLASSIFICATION	2.2988014844487582E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9997273037318855	WITHOUT_CLASSIFICATION	2.726962681145105E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997549049546006	WITHOUT_CLASSIFICATION	2.4509504539939987E-4	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9996710082908996	WITHOUT_CLASSIFICATION	3.2899170910044936E-4	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9996656540685132	WITHOUT_CLASSIFICATION	3.3434593148690643E-4	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9995494085385533	WITHOUT_CLASSIFICATION	4.505914614466196E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9998439774129223	WITHOUT_CLASSIFICATION	1.5602258707769637E-4	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996346502014902	WITHOUT_CLASSIFICATION	3.65349798509845E-4	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996346502014902	WITHOUT_CLASSIFICATION	3.65349798509845E-4	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9996204635216784	WITHOUT_CLASSIFICATION	3.7953647832152907E-4	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9996010332473826	WITHOUT_CLASSIFICATION	3.9896675261738503E-4	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996111245990036	WITHOUT_CLASSIFICATION	3.8887540099642634E-4	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997183545388539	WITHOUT_CLASSIFICATION	2.8164546114605734E-4	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9989735771104928	WITHOUT_CLASSIFICATION	0.0010264228895071543	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999920150228372	WITHOUT_CLASSIFICATION	7.984977162792563E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999719814132005	WITHOUT_CLASSIFICATION	2.801858679951341E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998774019648802	WITHOUT_CLASSIFICATION	1.2259803511982816E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998307913375479	WITHOUT_CLASSIFICATION	1.6920866245213472E-4	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998848137703888	WITHOUT_CLASSIFICATION	1.1518622961117875E-4	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9985102546117276	WITHOUT_CLASSIFICATION	0.0014897453882723906	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996991432535389	WITHOUT_CLASSIFICATION	3.008567464610973E-4	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9989377333161907	WITHOUT_CLASSIFICATION	0.0010622666838092814	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999737436521174	WITHOUT_CLASSIFICATION	2.6256347882606766E-4	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998117337568773	WITHOUT_CLASSIFICATION	1.882662431227049E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999521217439189	WITHOUT_CLASSIFICATION	4.787825608109912E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999521217439189	WITHOUT_CLASSIFICATION	4.787825608109912E-4	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.998811157639125	WITHOUT_CLASSIFICATION	0.0011888423608750055	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999653379446996	WITHOUT_CLASSIFICATION	3.4662055300552035E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998178756295553	WITHOUT_CLASSIFICATION	1.8212437044462163E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998178756295553	WITHOUT_CLASSIFICATION	1.8212437044462163E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998112693575739	WITHOUT_CLASSIFICATION	1.887306424261275E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996975185776664	WITHOUT_CLASSIFICATION	3.024814223335131E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9986095385334355	WITHOUT_CLASSIFICATION	0.0013904614665644713	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9972155678363038	WITHOUT_CLASSIFICATION	0.0027844321636962127	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997305878730471	WITHOUT_CLASSIFICATION	2.6941212695281525E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9989317130197861	WITHOUT_CLASSIFICATION	0.0010682869802139561	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9990406414855544	WITHOUT_CLASSIFICATION	9.593585144456243E-4	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9972155678363038	WITHOUT_CLASSIFICATION	0.0027844321636962127	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999235659050334	WITHOUT_CLASSIFICATION	7.643409496668945E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9979021215241698	WITHOUT_CLASSIFICATION	0.0020978784758302303	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999538961676574	WITHOUT_CLASSIFICATION	4.610383234256365E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9978744471767771	WITHOUT_CLASSIFICATION	0.002125552823222979	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9990817762710984	WITHOUT_CLASSIFICATION	9.18223728901578E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9998125125623889	WITHOUT_CLASSIFICATION	1.8748743761103794E-4	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995942835365245	WITHOUT_CLASSIFICATION	4.0571646347548144E-4	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9993908540984314	WITHOUT_CLASSIFICATION	6.091459015685779E-4	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997680132279193	WITHOUT_CLASSIFICATION	2.3198677208059775E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9943040134221335	WITHOUT_CLASSIFICATION	0.0056959865778665325	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997995569619166	WITHOUT_CLASSIFICATION	2.0044303808342407E-4	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9995202115191436	WITHOUT_CLASSIFICATION	4.797884808564522E-4	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9995377842814052	WITHOUT_CLASSIFICATION	4.622157185949233E-4	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9998317703777716	WITHOUT_CLASSIFICATION	1.682296222284714E-4	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9996962701284677	WITHOUT_CLASSIFICATION	3.037298715321897E-4	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999279080335224	WITHOUT_CLASSIFICATION	7.209196647754083E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998253346986661	WITHOUT_CLASSIFICATION	1.7466530133401363E-4	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9989734056575518	WITHOUT_CLASSIFICATION	0.0010265943424481731	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9989734056575518	WITHOUT_CLASSIFICATION	0.0010265943424481731	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995942835365245	WITHOUT_CLASSIFICATION	4.0571646347548144E-4	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9959780069049811	WITHOUT_CLASSIFICATION	0.004021993095018976	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999379991798634	WITHOUT_CLASSIFICATION	6.200082013659199E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9995851493434857	WITHOUT_CLASSIFICATION	4.1485065651414543E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998514599835486	WITHOUT_CLASSIFICATION	1.4854001645142183E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9996697967325354	WITHOUT_CLASSIFICATION	3.302032674644695E-4	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9995510598845869	WITHOUT_CLASSIFICATION	4.4894011541308604E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9995696399498134	WITHOUT_CLASSIFICATION	4.303600501866033E-4	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9994327973709588	WITHOUT_CLASSIFICATION	5.672026290411303E-4	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9996019637084678	WITHOUT_CLASSIFICATION	3.980362915322567E-4	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999536274909929	WITHOUT_CLASSIFICATION	4.637250900710366E-4	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9967672643902014	WITHOUT_CLASSIFICATION	0.0032327356097986825	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9987191266715518	WITHOUT_CLASSIFICATION	0.001280873328448162	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999332046630336	WITHOUT_CLASSIFICATION	6.679533696638137E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998858633937078	WITHOUT_CLASSIFICATION	1.1413660629225402E-4	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997090938285328	WITHOUT_CLASSIFICATION	2.9090617146710794E-4	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999534312666082	WITHOUT_CLASSIFICATION	4.656873339192745E-5	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9995849325277867	WITHOUT_CLASSIFICATION	4.150674722132065E-4	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9993333552841801	WITHOUT_CLASSIFICATION	6.666447158198401E-4	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997903475172553	WITHOUT_CLASSIFICATION	2.0965248274472942E-4	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9995146904134028	WITHOUT_CLASSIFICATION	4.853095865971587E-4	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9981334769185577	WITHOUT_CLASSIFICATION	0.0018665230814423415	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999250990113814	WITHOUT_CLASSIFICATION	7.490098861859526E-4	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9998224537037027	WITHOUT_CLASSIFICATION	1.7754629629729383E-4	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999581725658274	WITHOUT_CLASSIFICATION	4.1827434172521135E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9996469771655927	WITHOUT_CLASSIFICATION	3.53022834407266E-4	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997510686081749	WITHOUT_CLASSIFICATION	2.4893139182509345E-4	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998989494611964	WITHOUT_CLASSIFICATION	1.0105053880365741E-4	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999258390786493	WITHOUT_CLASSIFICATION	7.416092135066244E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9993917863957347	WITHOUT_CLASSIFICATION	6.082136042653064E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998858633937078	WITHOUT_CLASSIFICATION	1.1413660629225402E-4	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9997855171072086	WITHOUT_CLASSIFICATION	2.1448289279139775E-4	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998033540355299	WITHOUT_CLASSIFICATION	1.966459644701846E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9995578332886588	WITHOUT_CLASSIFICATION	4.421667113412551E-4	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9994017661154735	WITHOUT_CLASSIFICATION	5.982338845264206E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9967474081118483	WITHOUT_CLASSIFICATION	0.0032525918881517774	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9997575699127906	WITHOUT_CLASSIFICATION	2.4243008720934445E-4	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9993007122942638	WITHOUT_CLASSIFICATION	6.992877057362034E-4	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996360383864522	WITHOUT_CLASSIFICATION	3.639616135478044E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9991052729134229	WITHOUT_CLASSIFICATION	8.947270865771412E-4	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999807750525255	WITHOUT_CLASSIFICATION	1.9224947474499947E-4	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9994023902043093	WITHOUT_CLASSIFICATION	5.976097956906871E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9861295677238201	WITHOUT_CLASSIFICATION	0.01387043227618004	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9987668807800562	WITHOUT_CLASSIFICATION	0.0012331192199438212	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9992336899202316	WITHOUT_CLASSIFICATION	7.663100797683979E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998094532634985	WITHOUT_CLASSIFICATION	1.905467365014552E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9991971749444326	WITHOUT_CLASSIFICATION	8.028250555673187E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995096902966762	WITHOUT_CLASSIFICATION	4.903097033237939E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999588295841385	WITHOUT_CLASSIFICATION	4.117041586150773E-4	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999642808792575	WITHOUT_CLASSIFICATION	3.571912074250217E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995746882926904	WITHOUT_CLASSIFICATION	4.2531170730966916E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997305878730471	WITHOUT_CLASSIFICATION	2.6941212695281525E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999833416410316	WITHOUT_CLASSIFICATION	1.665835896835104E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998858633937078	WITHOUT_CLASSIFICATION	1.1413660629225402E-4	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997635368712834	WITHOUT_CLASSIFICATION	2.3646312871655729E-4	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998109534168458	WITHOUT_CLASSIFICATION	1.8904658315416716E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9996383282454367	WITHOUT_CLASSIFICATION	3.616717545632212E-4	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999637091045836	WITHOUT_CLASSIFICATION	3.629089541640351E-4	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998929876584881	WITHOUT_CLASSIFICATION	1.0701234151199139E-4	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999863662967586	WITHOUT_CLASSIFICATION	1.3633703241401244E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994957675016394	WITHOUT_CLASSIFICATION	5.042324983606688E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9997002963484986	WITHOUT_CLASSIFICATION	2.997036515015162E-4	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9229447599031526	WITHOUT_CLASSIFICATION	0.07705524009684739	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9932754089372943	WITHOUT_CLASSIFICATION	0.0067245910627056656	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996357910148408	WITHOUT_CLASSIFICATION	3.642089851591806E-4	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998988544940675	WITHOUT_CLASSIFICATION	1.0114550593253562E-4	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996522862528265	WITHOUT_CLASSIFICATION	3.477137471733772E-4	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996522862528265	WITHOUT_CLASSIFICATION	3.477137471733772E-4	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999767043392772	WITHOUT_CLASSIFICATION	2.32956607227455E-5	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9994170287763217	WITHOUT_CLASSIFICATION	5.829712236783631E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997631732394502	WITHOUT_CLASSIFICATION	2.368267605498884E-4	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9981011656980321	WITHOUT_CLASSIFICATION	0.0018988343019678432	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998538093264331	WITHOUT_CLASSIFICATION	1.4619067356685272E-4	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9993770976068301	WITHOUT_CLASSIFICATION	6.229023931698915E-4	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9995126286858798	WITHOUT_CLASSIFICATION	4.873713141203021E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9993258288684165	WITHOUT_CLASSIFICATION	6.74171131583429E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999831027171324	WITHOUT_CLASSIFICATION	1.6897282867606267E-4	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999378828493607	WITHOUT_CLASSIFICATION	6.211715063929649E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9993135301094126	WITHOUT_CLASSIFICATION	6.864698905875002E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9993135301094126	WITHOUT_CLASSIFICATION	6.864698905875002E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9978927966141494	WITHOUT_CLASSIFICATION	0.0021072033858505054	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998659471131709	WITHOUT_CLASSIFICATION	1.3405288682906202E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995433343363843	WITHOUT_CLASSIFICATION	4.5666566361568555E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9978085904962497	WITHOUT_CLASSIFICATION	0.0021914095037502295	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9996390333275932	WITHOUT_CLASSIFICATION	3.6096667240682044E-4	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9941053958725417	WITHOUT_CLASSIFICATION	0.005894604127458321	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9995769274102577	WITHOUT_CLASSIFICATION	4.230725897422566E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990856974769765	WITHOUT_CLASSIFICATION	9.143025230235244E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9991586123177651	WITHOUT_CLASSIFICATION	8.413876822349252E-4	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999346380271771	WITHOUT_CLASSIFICATION	6.536197282290545E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998524123558964	WITHOUT_CLASSIFICATION	1.4758764410352065E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997945898379549	WITHOUT_CLASSIFICATION	2.0541016204512783E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9980796544091708	WITHOUT_CLASSIFICATION	0.0019203455908292208	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9990821944511687	WITHOUT_CLASSIFICATION	9.178055488312944E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994698137292695	WITHOUT_CLASSIFICATION	5.301862707304515E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9996722754911934	WITHOUT_CLASSIFICATION	3.277245088065632E-4	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9991276581369534	WITHOUT_CLASSIFICATION	8.723418630467024E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998247051098514	WITHOUT_CLASSIFICATION	1.7529489014846657E-4	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999908117901258	WITHOUT_CLASSIFICATION	9.188209874200547E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9981394586698173	WITHOUT_CLASSIFICATION	0.0018605413301827486	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9994610853834587	WITHOUT_CLASSIFICATION	5.389146165413986E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999206350318444	WITHOUT_CLASSIFICATION	7.936496815568726E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9997558713597915	WITHOUT_CLASSIFICATION	2.4412864020850506E-4	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996229256189166	WITHOUT_CLASSIFICATION	3.7707438108336227E-4	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999704796943314	WITHOUT_CLASSIFICATION	2.9520305668602947E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9996665198410958	WITHOUT_CLASSIFICATION	3.334801589042323E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9992755324803354	WITHOUT_CLASSIFICATION	7.244675196646467E-4	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996919851930897	WITHOUT_CLASSIFICATION	3.080148069103548E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9990987501695232	WITHOUT_CLASSIFICATION	9.012498304768183E-4	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999517427170306	WITHOUT_CLASSIFICATION	4.825728296946077E-5	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999514496266311	WITHOUT_CLASSIFICATION	4.855037336890278E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997137856696096	WITHOUT_CLASSIFICATION	2.8621433039042766E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999848141120506	WITHOUT_CLASSIFICATION	1.5185887949371376E-5	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997343587356616	WITHOUT_CLASSIFICATION	2.6564126433843157E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9996386335291244	WITHOUT_CLASSIFICATION	3.613664708755242E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9997374138636768	WITHOUT_CLASSIFICATION	2.6258613632327665E-4	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998578598113599	WITHOUT_CLASSIFICATION	1.421401886402095E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9992950590794767	WITHOUT_CLASSIFICATION	7.049409205232241E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997903085654289	WITHOUT_CLASSIFICATION	2.0969143457104882E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9997555653892459	WITHOUT_CLASSIFICATION	2.444346107540563E-4	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996202250576647	WITHOUT_CLASSIFICATION	3.797749423352738E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9994299423056348	WITHOUT_CLASSIFICATION	5.700576943652578E-4	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998264182238389	WITHOUT_CLASSIFICATION	1.7358177616112996E-4	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9995617778749225	WITHOUT_CLASSIFICATION	4.382221250774742E-4	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9996630748469147	WITHOUT_CLASSIFICATION	3.3692515308534715E-4	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9990285364647583	WITHOUT_CLASSIFICATION	9.714635352416382E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9986500658559342	WITHOUT_CLASSIFICATION	0.0013499341440658087	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9988639825089914	WITHOUT_CLASSIFICATION	0.0011360174910086222	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997272931317338	WITHOUT_CLASSIFICATION	2.727068682662177E-4	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997731069192055	WITHOUT_CLASSIFICATION	2.268930807945917E-4	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997272931317338	WITHOUT_CLASSIFICATION	2.727068682662177E-4	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9979180080632943	WITHOUT_CLASSIFICATION	0.0020819919367056554	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9996075390553133	WITHOUT_CLASSIFICATION	3.9246094468663726E-4	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997916696671723	WITHOUT_CLASSIFICATION	2.0833033282773963E-4	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998628496273003	WITHOUT_CLASSIFICATION	1.3715037269975615E-4	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9995669301911012	WITHOUT_CLASSIFICATION	4.330698088987769E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997916696671723	WITHOUT_CLASSIFICATION	2.0833033282773963E-4	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998930921012187	WITHOUT_CLASSIFICATION	1.0690789878140614E-4	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995177981653395	WITHOUT_CLASSIFICATION	4.822018346605061E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998592181186832	WITHOUT_CLASSIFICATION	1.4078188131688124E-4	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999433800566914	WITHOUT_CLASSIFICATION	5.661994330859819E-4	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999216817278215	WITHOUT_CLASSIFICATION	7.831827217858534E-5	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996674970625843	WITHOUT_CLASSIFICATION	3.325029374157765E-4	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999016257663811	WITHOUT_CLASSIFICATION	9.837423361888328E-5	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.997270104814355	WITHOUT_CLASSIFICATION	0.00272989518564505	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9992289294035439	WITHOUT_CLASSIFICATION	7.710705964561305E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996908235914919	WITHOUT_CLASSIFICATION	3.09176408508168E-4	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9998170783031134	WITHOUT_CLASSIFICATION	1.8292169688655108E-4	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998401499236669	WITHOUT_CLASSIFICATION	1.5985007633322016E-4	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9997524757723598	WITHOUT_CLASSIFICATION	2.475242276402304E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998156806907912	WITHOUT_CLASSIFICATION	1.8431930920883446E-4	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999125214872048	WITHOUT_CLASSIFICATION	8.747851279518847E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9978139373696919	WITHOUT_CLASSIFICATION	0.0021860626303080526	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.990519558636779	WITHOUT_CLASSIFICATION	0.009480441363220921	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9996774523641612	WITHOUT_CLASSIFICATION	3.2254763583888096E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993884254274691	WITHOUT_CLASSIFICATION	6.115745725308463E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9991663704082784	WITHOUT_CLASSIFICATION	8.336295917216906E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9993278265632295	WITHOUT_CLASSIFICATION	6.721734367704838E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9991125412598895	WITHOUT_CLASSIFICATION	8.874587401104946E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9971032497132302	WITHOUT_CLASSIFICATION	0.0028967502867699455	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9923394146604257	WITHOUT_CLASSIFICATION	0.007660585339574273	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9993321695111463	WITHOUT_CLASSIFICATION	6.678304888537039E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999681989856742	WITHOUT_CLASSIFICATION	3.180101432580456E-4	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9990683624801915	WITHOUT_CLASSIFICATION	9.316375198084705E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9988593453232966	WITHOUT_CLASSIFICATION	0.0011406546767034201	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9998815281393716	WITHOUT_CLASSIFICATION	1.1847186062836355E-4	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9883412927517847	WITHOUT_CLASSIFICATION	0.01165870724821533	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993884254274691	WITHOUT_CLASSIFICATION	6.115745725308463E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9995567841234847	WITHOUT_CLASSIFICATION	4.4321587651523155E-4	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9987227807432435	WITHOUT_CLASSIFICATION	0.0012772192567565683	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9978964648355899	WITHOUT_CLASSIFICATION	0.002103535164410147	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9992676352070218	WITHOUT_CLASSIFICATION	7.323647929781069E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9997662519981145	WITHOUT_CLASSIFICATION	2.3374800188545E-4	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9995754700796574	WITHOUT_CLASSIFICATION	4.2452992034252597E-4	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9995533537453108	WITHOUT_CLASSIFICATION	4.4664625468922086E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9996774523641612	WITHOUT_CLASSIFICATION	3.2254763583888096E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9991993097987669	WITHOUT_CLASSIFICATION	8.006902012329643E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.999149363200853	WITHOUT_CLASSIFICATION	8.506367991470248E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999793416060307	WITHOUT_CLASSIFICATION	2.065839396931159E-5	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995148151756239	WITHOUT_CLASSIFICATION	4.851848243760688E-4	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9992718660464648	WITHOUT_CLASSIFICATION	7.281339535351853E-4	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996555015921919	WITHOUT_CLASSIFICATION	3.4449840780812917E-4	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9992538504885911	WITHOUT_CLASSIFICATION	7.461495114088777E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998250579088632	WITHOUT_CLASSIFICATION	1.7494209113680384E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999656013683218	WITHOUT_CLASSIFICATION	3.439863167820862E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9988333591524586	WITHOUT_CLASSIFICATION	0.0011666408475414403	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9988727214028694	WITHOUT_CLASSIFICATION	0.0011272785971305323	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9982851898539915	WITHOUT_CLASSIFICATION	0.0017148101460084824	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992091118644333	WITHOUT_CLASSIFICATION	7.908881355667523E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992091118644333	WITHOUT_CLASSIFICATION	7.908881355667523E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995997430995173	WITHOUT_CLASSIFICATION	4.0025690048275643E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992091118644333	WITHOUT_CLASSIFICATION	7.908881355667523E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992091118644333	WITHOUT_CLASSIFICATION	7.908881355667523E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9994444309923198	WITHOUT_CLASSIFICATION	5.555690076800926E-4	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9990204372476195	WITHOUT_CLASSIFICATION	9.795627523805316E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999659172777609	WITHOUT_CLASSIFICATION	3.4082722239107293E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999659172777609	WITHOUT_CLASSIFICATION	3.4082722239107293E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9961385212177187	WITHOUT_CLASSIFICATION	0.003861478782281288	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999335281418302	WITHOUT_CLASSIFICATION	6.647185816981378E-4	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9991693198819588	WITHOUT_CLASSIFICATION	8.306801180412722E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998727282859569	WITHOUT_CLASSIFICATION	1.2727171404319792E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9993028475089172	WITHOUT_CLASSIFICATION	6.971524910828814E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9987182671984147	WITHOUT_CLASSIFICATION	0.0012817328015852704	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9988480092780155	WITHOUT_CLASSIFICATION	0.0011519907219845508	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9995094135137206	WITHOUT_CLASSIFICATION	4.905864862793864E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9986266929425416	WITHOUT_CLASSIFICATION	0.0013733070574583847	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9923802253907094	WITHOUT_CLASSIFICATION	0.007619774609290583	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997827362172365	WITHOUT_CLASSIFICATION	2.1726378276352618E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9991298970459425	WITHOUT_CLASSIFICATION	8.701029540576513E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997089962438166	WITHOUT_CLASSIFICATION	2.9100375618343425E-4	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9991382223348445	WITHOUT_CLASSIFICATION	8.617776651554206E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999819732247888	WITHOUT_CLASSIFICATION	1.802677521119384E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9924023140308714	WITHOUT_CLASSIFICATION	0.007597685969128513	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999211774956106	WITHOUT_CLASSIFICATION	7.882250438945516E-5	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9996383192760102	WITHOUT_CLASSIFICATION	3.616807239898371E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9997089962438166	WITHOUT_CLASSIFICATION	2.9100375618343425E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9991663704082784	WITHOUT_CLASSIFICATION	8.336295917216906E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9993471997211689	WITHOUT_CLASSIFICATION	6.528002788310468E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997905006054603	WITHOUT_CLASSIFICATION	0.00209499394539698	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9975792106193654	WITHOUT_CLASSIFICATION	0.0024207893806345686	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9993215770503441	WITHOUT_CLASSIFICATION	6.784229496559917E-4	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998387277683598	WITHOUT_CLASSIFICATION	1.612722316400947E-4	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9994691261663978	WITHOUT_CLASSIFICATION	5.308738336022082E-4	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9996904847118259	WITHOUT_CLASSIFICATION	3.0951528817410985E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9996431538493785	WITHOUT_CLASSIFICATION	3.5684615062151176E-4	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9996539609839821	WITHOUT_CLASSIFICATION	3.460390160179088E-4	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9992901576469059	WITHOUT_CLASSIFICATION	7.098423530941147E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998457921980798	WITHOUT_CLASSIFICATION	1.5420780192025487E-4	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999088248972687	WITHOUT_CLASSIFICATION	9.117510273128083E-5	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998680579133034	WITHOUT_CLASSIFICATION	1.319420866967736E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9987328043621833	WITHOUT_CLASSIFICATION	0.0012671956378167534	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999129873125739	WITHOUT_CLASSIFICATION	8.701268742599575E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9997194781465828	WITHOUT_CLASSIFICATION	2.805218534171396E-4	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997647273481421	WITHOUT_CLASSIFICATION	2.352726518578569E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9986899614029162	WITHOUT_CLASSIFICATION	0.001310038597083771	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995983178026574	WITHOUT_CLASSIFICATION	4.0168219734260135E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9992448946569764	WITHOUT_CLASSIFICATION	7.551053430236213E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.998646267990596	WITHOUT_CLASSIFICATION	0.0013537320094040284	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9994632188474977	WITHOUT_CLASSIFICATION	5.367811525023458E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9996431538493785	WITHOUT_CLASSIFICATION	3.5684615062151176E-4	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9993662779310764	WITHOUT_CLASSIFICATION	6.337220689236229E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9993599932197249	WITHOUT_CLASSIFICATION	6.400067802750121E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9990731562419015	WITHOUT_CLASSIFICATION	9.268437580984383E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997386968715385	WITHOUT_CLASSIFICATION	2.613031284615031E-4	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9992928558825948	WITHOUT_CLASSIFICATION	7.071441174052909E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.99949715031252	WITHOUT_CLASSIFICATION	5.028496874799693E-4	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9992928558825948	WITHOUT_CLASSIFICATION	7.071441174052909E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9992628502421763	WITHOUT_CLASSIFICATION	7.371497578236814E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998215452434175	WITHOUT_CLASSIFICATION	1.7845475658258888E-4	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.998526460014368	WITHOUT_CLASSIFICATION	0.0014735399856320996	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999799484288605	WITHOUT_CLASSIFICATION	2.0051571139499146E-4	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9996269623760339	WITHOUT_CLASSIFICATION	3.730376239661651E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9993423514346438	WITHOUT_CLASSIFICATION	6.576485653563467E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994334329098283	WITHOUT_CLASSIFICATION	5.665670901716992E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998215452434175	WITHOUT_CLASSIFICATION	1.7845475658258888E-4	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998992487846166	WITHOUT_CLASSIFICATION	1.0075121538347314E-4	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9985253846155169	WITHOUT_CLASSIFICATION	0.0014746153844830314	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998226189198054	WITHOUT_CLASSIFICATION	1.7738108019469244E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999009738239604	WITHOUT_CLASSIFICATION	9.902617603966173E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9996857905274066	WITHOUT_CLASSIFICATION	3.1420947259344E-4	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998056866497322	WITHOUT_CLASSIFICATION	1.9431335026779927E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9995994685853801	WITHOUT_CLASSIFICATION	4.0053141461988154E-4	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997003566784924	WITHOUT_CLASSIFICATION	2.99643321507634E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996911641081493	WITHOUT_CLASSIFICATION	3.088358918506546E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996713456175272	WITHOUT_CLASSIFICATION	3.2865438247281156E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996713456175272	WITHOUT_CLASSIFICATION	3.2865438247281156E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996713456175272	WITHOUT_CLASSIFICATION	3.2865438247281156E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998072164424598	WITHOUT_CLASSIFICATION	1.927835575401476E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998072164424598	WITHOUT_CLASSIFICATION	1.927835575401476E-4	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9988264097239595	WITHOUT_CLASSIFICATION	0.001173590276040476	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999423644467345	WITHOUT_CLASSIFICATION	5.763555326556504E-5	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997321673446277	WITHOUT_CLASSIFICATION	2.6783265537231286E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9989795390125585	WITHOUT_CLASSIFICATION	0.00102046098744148	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996779736544833	WITHOUT_CLASSIFICATION	3.220263455166298E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99969822825642	WITHOUT_CLASSIFICATION	3.017717435799705E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998194246398056	WITHOUT_CLASSIFICATION	1.805753601944113E-4	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997736515890665	WITHOUT_CLASSIFICATION	2.2634841093337052E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998846523048406	WITHOUT_CLASSIFICATION	1.1534769515948279E-4	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9993956505861894	WITHOUT_CLASSIFICATION	6.043494138105583E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9994524804662119	WITHOUT_CLASSIFICATION	5.475195337881216E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9992280048802948	WITHOUT_CLASSIFICATION	7.719951197051926E-4	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997760951452974	WITHOUT_CLASSIFICATION	2.239048547026998E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999079835268598	WITHOUT_CLASSIFICATION	9.201647314019292E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9985366563266048	WITHOUT_CLASSIFICATION	0.0014633436733951402	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997023583554259	WITHOUT_CLASSIFICATION	2.976416445741483E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998639438949583	WITHOUT_CLASSIFICATION	1.3605610504181085E-4	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9991995155368217	WITHOUT_CLASSIFICATION	8.004844631781733E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996682206540407	WITHOUT_CLASSIFICATION	3.3177934595938135E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999701390809855	WITHOUT_CLASSIFICATION	2.9860919014497076E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9986624686242016	WITHOUT_CLASSIFICATION	0.001337531375798479	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9988713911909958	WITHOUT_CLASSIFICATION	0.0011286088090042565	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999182250976436	WITHOUT_CLASSIFICATION	8.177490235636155E-5	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9993396506123639	WITHOUT_CLASSIFICATION	6.603493876362097E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9998715499747515	WITHOUT_CLASSIFICATION	1.284500252485648E-4	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9991096910970203	WITHOUT_CLASSIFICATION	8.90308902979703E-4	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9852183935445983	WITHOUT_CLASSIFICATION	0.01478160645540183	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999831240446065	WITHOUT_CLASSIFICATION	1.6875955393469012E-5	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996663504375936	WITHOUT_CLASSIFICATION	3.336495624065025E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661856309382	WITHOUT_CLASSIFICATION	3.3381436906178914E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992188139434937	WITHOUT_CLASSIFICATION	7.81186056506328E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992188139434937	WITHOUT_CLASSIFICATION	7.81186056506328E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9995725477707487	WITHOUT_CLASSIFICATION	4.274522292513591E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.997615440070939	WITHOUT_CLASSIFICATION	0.002384559929060931	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996217587608792	WITHOUT_CLASSIFICATION	3.782412391207798E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997704852203468	WITHOUT_CLASSIFICATION	2.2951477965319742E-4	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9993574278232223	WITHOUT_CLASSIFICATION	6.425721767776711E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9998641014803615	WITHOUT_CLASSIFICATION	1.3589851963849122E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.999413304047771	WITHOUT_CLASSIFICATION	5.866959522290345E-4	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9986709803104018	WITHOUT_CLASSIFICATION	0.0013290196895981608	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9988391579303851	WITHOUT_CLASSIFICATION	0.0011608420696147918	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997529685625766	WITHOUT_CLASSIFICATION	2.4703143742345226E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9930840463154103	WITHOUT_CLASSIFICATION	0.006915953684589846	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9989661402244354	WITHOUT_CLASSIFICATION	0.0010338597755646323	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9991658479718036	WITHOUT_CLASSIFICATION	8.341520281964343E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9993198592721589	WITHOUT_CLASSIFICATION	6.801407278410617E-4	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9991280761209891	WITHOUT_CLASSIFICATION	8.719238790109926E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997529685625766	WITHOUT_CLASSIFICATION	2.4703143742345226E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997529685625766	WITHOUT_CLASSIFICATION	2.4703143742345226E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9992833125973727	WITHOUT_CLASSIFICATION	7.16687402627254E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9996560377940416	WITHOUT_CLASSIFICATION	3.4396220595845587E-4	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999661608420853	WITHOUT_CLASSIFICATION	3.3839157914689936E-5	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9994493000986846	WITHOUT_CLASSIFICATION	5.506999013153956E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997549049546006	WITHOUT_CLASSIFICATION	2.4509504539939987E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9986624686242016	WITHOUT_CLASSIFICATION	0.001337531375798479	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9994251785798551	WITHOUT_CLASSIFICATION	5.748214201448953E-4	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996391978925641	WITHOUT_CLASSIFICATION	3.6080210743590557E-4	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9997040673011484	WITHOUT_CLASSIFICATION	2.9593269885175413E-4	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997149874627903	WITHOUT_CLASSIFICATION	2.850125372097064E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997085384156469	WITHOUT_CLASSIFICATION	2.9146158435312076E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997293008081468	WITHOUT_CLASSIFICATION	2.706991918531709E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997098051984019	WITHOUT_CLASSIFICATION	2.9019480159807494E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997098051984019	WITHOUT_CLASSIFICATION	2.9019480159807494E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997098051984019	WITHOUT_CLASSIFICATION	2.9019480159807494E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997098051984019	WITHOUT_CLASSIFICATION	2.9019480159807494E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997092800858923	WITHOUT_CLASSIFICATION	2.907199141077037E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9973194143397	WITHOUT_CLASSIFICATION	0.0026805856602999754	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9952377751205888	WITHOUT_CLASSIFICATION	0.0047622248794112355	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999251696917529	WITHOUT_CLASSIFICATION	7.483030824709969E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996690742710332	WITHOUT_CLASSIFICATION	3.309257289666599E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997274081867062	WITHOUT_CLASSIFICATION	2.725918132937295E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998740153379079	WITHOUT_CLASSIFICATION	1.259846620920843E-4	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998916502838953	WITHOUT_CLASSIFICATION	1.0834971610469245E-4	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998933139949157	WITHOUT_CLASSIFICATION	1.0668600508442506E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996591821488994	WITHOUT_CLASSIFICATION	3.4081785110063684E-4	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.998922595221656	WITHOUT_CLASSIFICATION	0.0010774047783439085	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999717829767617	WITHOUT_CLASSIFICATION	2.8217023238300145E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.999373171718484	WITHOUT_CLASSIFICATION	6.268282815159092E-4	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999026574342023	WITHOUT_CLASSIFICATION	9.734256579774419E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999026574342023	WITHOUT_CLASSIFICATION	9.734256579774419E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9954663372644509	WITHOUT_CLASSIFICATION	0.004533662735549105	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9997996714182434	WITHOUT_CLASSIFICATION	2.0032858175662478E-4	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999367295066783	WITHOUT_CLASSIFICATION	6.327049332172856E-5	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112172450069	WITHOUT_CLASSIFICATION	3.8878275499313805E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9994799743399106	WITHOUT_CLASSIFICATION	5.200256600893511E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996713456175272	WITHOUT_CLASSIFICATION	3.2865438247281156E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9957628030362267	WITHOUT_CLASSIFICATION	0.004237196963773347	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998376762741269	WITHOUT_CLASSIFICATION	1.623237258731304E-4	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999561681121011	WITHOUT_CLASSIFICATION	4.383188789889694E-4	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9994032837138587	WITHOUT_CLASSIFICATION	5.967162861413534E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996727745137955	WITHOUT_CLASSIFICATION	3.2722548620437564E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997576663872619	WITHOUT_CLASSIFICATION	2.4233361273809031E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998065148468197	WITHOUT_CLASSIFICATION	1.934851531802496E-4	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9990445859255717	WITHOUT_CLASSIFICATION	9.55414074428462E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999497958053734	WITHOUT_CLASSIFICATION	5.020419462670956E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9987277147786042	WITHOUT_CLASSIFICATION	0.0012722852213957953	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9988494616568567	WITHOUT_CLASSIFICATION	0.0011505383431433414	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997201419468579	WITHOUT_CLASSIFICATION	2.798580531421215E-4	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9998989993881502	WITHOUT_CLASSIFICATION	1.0100061184984832E-4	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999129189464167	WITHOUT_CLASSIFICATION	8.708105358328911E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998864809346244	WITHOUT_CLASSIFICATION	1.1351906537553297E-4	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998843514121117	WITHOUT_CLASSIFICATION	1.1564858788832805E-4	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9996849522048827	WITHOUT_CLASSIFICATION	3.150477951173274E-4	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9991340788611006	WITHOUT_CLASSIFICATION	8.659211388994723E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9995724877502891	WITHOUT_CLASSIFICATION	4.2751224971098893E-4	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9991703044635392	WITHOUT_CLASSIFICATION	8.296955364608316E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9983451747107787	WITHOUT_CLASSIFICATION	0.001654825289221269	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9985136804700048	WITHOUT_CLASSIFICATION	0.0014863195299951886	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9996874527824077	WITHOUT_CLASSIFICATION	3.1254721759233433E-4	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9992554623334285	WITHOUT_CLASSIFICATION	7.445376665714901E-4	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9979214963383105	WITHOUT_CLASSIFICATION	0.0020785036616894725	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998946713914911	WITHOUT_CLASSIFICATION	1.053286085089124E-4	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9996211197055689	WITHOUT_CLASSIFICATION	3.7888029443113497E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997483150343198	WITHOUT_CLASSIFICATION	2.5168496568021256E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997644976583093	WITHOUT_CLASSIFICATION	2.3550234169060616E-4	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9994125530195193	WITHOUT_CLASSIFICATION	5.87446980480715E-4	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9991298830681465	WITHOUT_CLASSIFICATION	8.701169318535212E-4	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9991359792743212	WITHOUT_CLASSIFICATION	8.640207256787753E-4	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9993812399450089	WITHOUT_CLASSIFICATION	6.187600549911486E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999341500775079	WITHOUT_CLASSIFICATION	6.584992249218491E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9997980623018168	WITHOUT_CLASSIFICATION	2.0193769818322091E-4	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996376349155693	WITHOUT_CLASSIFICATION	3.6236508443061237E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9990848838744443	WITHOUT_CLASSIFICATION	9.151161255557367E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9990756382466132	WITHOUT_CLASSIFICATION	9.243617533868485E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9994212867469702	WITHOUT_CLASSIFICATION	5.787132530298587E-4	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9992240758874174	WITHOUT_CLASSIFICATION	7.75924112582698E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9991194687488383	WITHOUT_CLASSIFICATION	8.805312511617454E-4	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9997399274990276	WITHOUT_CLASSIFICATION	2.600725009722791E-4	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9900182255487762	WITHOUT_CLASSIFICATION	0.009981774451223875	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9991828961720589	WITHOUT_CLASSIFICATION	8.171038279411376E-4	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996374568558807	WITHOUT_CLASSIFICATION	3.6254314411937464E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9930312277239732	WITHOUT_CLASSIFICATION	0.006968772276026776	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9998258051270741	WITHOUT_CLASSIFICATION	1.741948729259663E-4	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9981931105161824	WITHOUT_CLASSIFICATION	0.001806889483817605	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9996344340699338	WITHOUT_CLASSIFICATION	3.6556593006613027E-4	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998176004953361	WITHOUT_CLASSIFICATION	1.8239950466389422E-4	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9988287419823589	WITHOUT_CLASSIFICATION	0.0011712580176409958	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999131818238963	WITHOUT_CLASSIFICATION	8.68181761036323E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998278695498122	WITHOUT_CLASSIFICATION	1.7213045018783107E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999356122389355	WITHOUT_CLASSIFICATION	6.438776106451798E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9992774253183382	WITHOUT_CLASSIFICATION	7.225746816618161E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999568256165294	WITHOUT_CLASSIFICATION	4.3174383470597454E-4	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9995807131127088	WITHOUT_CLASSIFICATION	4.192868872910928E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998507077073218	WITHOUT_CLASSIFICATION	1.4929229267830852E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9996038335078764	WITHOUT_CLASSIFICATION	3.9616649212355836E-4	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9956541289971472	WITHOUT_CLASSIFICATION	0.004345871002852819	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999365964549935	WITHOUT_CLASSIFICATION	6.34035450064973E-4	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9995465631019247	WITHOUT_CLASSIFICATION	4.5343689807542483E-4	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999440951521523	WITHOUT_CLASSIFICATION	5.5904847847717495E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9996863031117589	WITHOUT_CLASSIFICATION	3.1369688824104834E-4	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9996576850111835	WITHOUT_CLASSIFICATION	3.4231498881658946E-4	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9994117806528001	WITHOUT_CLASSIFICATION	5.882193471999518E-4	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9990480321844851	WITHOUT_CLASSIFICATION	9.51967815514928E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9997203585808048	WITHOUT_CLASSIFICATION	2.796414191951982E-4	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9990840705962526	WITHOUT_CLASSIFICATION	9.159294037474516E-4	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9988361009630262	WITHOUT_CLASSIFICATION	0.001163899036973868	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9993749256813932	WITHOUT_CLASSIFICATION	6.250743186068448E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999673000469771	WITHOUT_CLASSIFICATION	3.269995302292997E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997969303146922	WITHOUT_CLASSIFICATION	2.030696853077768E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997186674337372	WITHOUT_CLASSIFICATION	2.813325662628558E-4	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9964833320630915	WITHOUT_CLASSIFICATION	0.0035166679369084386	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998867579113285	WITHOUT_CLASSIFICATION	1.1324208867152434E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9992895296326755	WITHOUT_CLASSIFICATION	7.10470367324497E-4	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9998629352292744	WITHOUT_CLASSIFICATION	1.3706477072552862E-4	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9994853963305743	WITHOUT_CLASSIFICATION	5.146036694257212E-4	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9972182749283603	WITHOUT_CLASSIFICATION	0.0027817250716397827	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9982879527696348	WITHOUT_CLASSIFICATION	0.0017120472303651635	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9956338091596669	WITHOUT_CLASSIFICATION	0.004366190840333039	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9991515527378564	WITHOUT_CLASSIFICATION	8.484472621436343E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9996325183970942	WITHOUT_CLASSIFICATION	3.6748160290573414E-4	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994573032705366	WITHOUT_CLASSIFICATION	5.426967294632801E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9998249579066967	WITHOUT_CLASSIFICATION	1.7504209330332514E-4	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999855285771261	WITHOUT_CLASSIFICATION	1.4471422873895285E-4	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999044441975212	WITHOUT_CLASSIFICATION	9.555580247874408E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9997097934050948	WITHOUT_CLASSIFICATION	2.9020659490526133E-4	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9992973652024213	WITHOUT_CLASSIFICATION	7.026347975786566E-4	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9997753209182659	WITHOUT_CLASSIFICATION	2.246790817341309E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999131794544432	WITHOUT_CLASSIFICATION	8.682054555680394E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999131794544432	WITHOUT_CLASSIFICATION	8.682054555680394E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9989887875464847	WITHOUT_CLASSIFICATION	0.001011212453515408	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9987808263509964	WITHOUT_CLASSIFICATION	0.001219173649003599	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9947978295675267	WITHOUT_CLASSIFICATION	0.0052021704324733105	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9970325886812831	WITHOUT_CLASSIFICATION	0.002967411318716949	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998971024960814	WITHOUT_CLASSIFICATION	0.001028975039185956	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9997873613400635	WITHOUT_CLASSIFICATION	2.1263865993641817E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999292001734923	WITHOUT_CLASSIFICATION	7.079982650769579E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9982334545823498	WITHOUT_CLASSIFICATION	0.0017665454176502033	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997662908314481	WITHOUT_CLASSIFICATION	2.3370916855195247E-4	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9995871567589762	WITHOUT_CLASSIFICATION	4.128432410237516E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995589864013318	WITHOUT_CLASSIFICATION	4.4101359866814536E-4	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9981435091835521	WITHOUT_CLASSIFICATION	0.0018564908164478795	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997757892731245	WITHOUT_CLASSIFICATION	2.2421072687547287E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9997492693478178	WITHOUT_CLASSIFICATION	2.5073065218216635E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9978104642191291	WITHOUT_CLASSIFICATION	0.0021895357808709402	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9978104642191291	WITHOUT_CLASSIFICATION	0.0021895357808709402	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999932806824385	WITHOUT_CLASSIFICATION	6.719317561496312E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996328261977725	WITHOUT_CLASSIFICATION	3.6717380222750447E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998701024520676	WITHOUT_CLASSIFICATION	1.2989754793230686E-4	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995906375572194	WITHOUT_CLASSIFICATION	4.0936244278051795E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999081881715272	WITHOUT_CLASSIFICATION	9.181182847287623E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9997189646787036	WITHOUT_CLASSIFICATION	2.810353212964223E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9997189646787036	WITHOUT_CLASSIFICATION	2.810353212964223E-4	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997722821414539	WITHOUT_CLASSIFICATION	2.2771785854613187E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999782590197404	WITHOUT_CLASSIFICATION	2.1740980259556976E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.998083441133594	WITHOUT_CLASSIFICATION	0.0019165588664058976	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9905031952883352	WITHOUT_CLASSIFICATION	0.009496804711664761	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9994751681315085	WITHOUT_CLASSIFICATION	5.248318684914522E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9994516389816589	WITHOUT_CLASSIFICATION	5.483610183411601E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9992922004850981	WITHOUT_CLASSIFICATION	7.077995149017657E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9997070602176221	WITHOUT_CLASSIFICATION	2.9293978237781166E-4	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9837063932630755	WITHOUT_CLASSIFICATION	0.016293606736924558	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9978302571340047	WITHOUT_CLASSIFICATION	0.002169742865995283	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9996643968493607	WITHOUT_CLASSIFICATION	3.3560315063931956E-4	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.996269978041836	WITHOUT_CLASSIFICATION	0.0037300219581640043	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9997372775296873	WITHOUT_CLASSIFICATION	2.627224703127423E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9990821944511687	WITHOUT_CLASSIFICATION	9.178055488312944E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9921495747914332	WITHOUT_CLASSIFICATION	0.00785042520856676	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9994856529980607	WITHOUT_CLASSIFICATION	5.143470019393316E-4	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.994585575831386	WITHOUT_CLASSIFICATION	0.005414424168614128	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9996942928931906	WITHOUT_CLASSIFICATION	3.0570710680933764E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9996820092358908	WITHOUT_CLASSIFICATION	3.1799076410926326E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997096488428413	WITHOUT_CLASSIFICATION	2.90351157158747E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9975234362725698	WITHOUT_CLASSIFICATION	0.0024765637274301922	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9997696257759797	WITHOUT_CLASSIFICATION	2.303742240203158E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9997293008081468	WITHOUT_CLASSIFICATION	2.706991918531709E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997450742528113	WITHOUT_CLASSIFICATION	2.5492574718868487E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998084259953374	WITHOUT_CLASSIFICATION	1.9157400466270787E-4	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999189551248849	WITHOUT_CLASSIFICATION	8.104487511502933E-5	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9997053501768133	WITHOUT_CLASSIFICATION	2.9464982318674643E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999521217439189	WITHOUT_CLASSIFICATION	4.787825608109912E-4	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.99803938564453	WITHOUT_CLASSIFICATION	0.0019606143554699775	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9996698809651976	WITHOUT_CLASSIFICATION	3.301190348024254E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9976886089632062	WITHOUT_CLASSIFICATION	0.0023113910367938066	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9995347537326911	WITHOUT_CLASSIFICATION	4.6524626730901916E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997591227299096	WITHOUT_CLASSIFICATION	2.4087727009031284E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.999810194135297	WITHOUT_CLASSIFICATION	1.8980586470302915E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.99987243580584	WITHOUT_CLASSIFICATION	1.275641941601348E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9992216859556554	WITHOUT_CLASSIFICATION	7.783140443445604E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9992428652915983	WITHOUT_CLASSIFICATION	7.571347084015388E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9997405598891587	WITHOUT_CLASSIFICATION	2.594401108412664E-4	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9991771501478591	WITHOUT_CLASSIFICATION	8.228498521409454E-4	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9984523407022154	WITHOUT_CLASSIFICATION	0.001547659297784615	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9993422256783081	WITHOUT_CLASSIFICATION	6.577743216918578E-4	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9982774198814209	WITHOUT_CLASSIFICATION	0.0017225801185790754	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9992216859556554	WITHOUT_CLASSIFICATION	7.783140443445604E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993779232874306	WITHOUT_CLASSIFICATION	6.220767125694569E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9990053454468883	WITHOUT_CLASSIFICATION	9.946545531115817E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9998982248786823	WITHOUT_CLASSIFICATION	1.0177512131767128E-4	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998760415291389	WITHOUT_CLASSIFICATION	1.2395847086102733E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9980142715813953	WITHOUT_CLASSIFICATION	0.001985728418604653	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9959711033375963	WITHOUT_CLASSIFICATION	0.0040288966624037375	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993786546319054	WITHOUT_CLASSIFICATION	6.213453680945587E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9997281583255586	WITHOUT_CLASSIFICATION	2.718416744413904E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997349088742264	WITHOUT_CLASSIFICATION	2.6509112577353933E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999376695209465	WITHOUT_CLASSIFICATION	6.233047905349526E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9969673712021958	WITHOUT_CLASSIFICATION	0.0030326287978040987	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999376695209465	WITHOUT_CLASSIFICATION	6.233047905349526E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9986790112074385	WITHOUT_CLASSIFICATION	0.0013209887925614452	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999066935710275	WITHOUT_CLASSIFICATION	9.330642897249441E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9986790112074385	WITHOUT_CLASSIFICATION	0.0013209887925614452	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999858709286985	WITHOUT_CLASSIFICATION	1.4129071301501365E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998402565326366	WITHOUT_CLASSIFICATION	1.5974346736328526E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999427391095878	WITHOUT_CLASSIFICATION	5.7260890412198316E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9992724019879043	WITHOUT_CLASSIFICATION	7.275980120957107E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9992188139434937	WITHOUT_CLASSIFICATION	7.81186056506328E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997215583174148	WITHOUT_CLASSIFICATION	2.7844168258517343E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9985330777533575	WITHOUT_CLASSIFICATION	0.001466922246642529	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9997376591241877	WITHOUT_CLASSIFICATION	2.62340875812293E-4	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9992125073195043	WITHOUT_CLASSIFICATION	7.874926804957186E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9997308787355244	WITHOUT_CLASSIFICATION	2.6912126447560444E-4	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997077350213507	WITHOUT_CLASSIFICATION	2.9226497864935874E-4	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998409620868973	WITHOUT_CLASSIFICATION	1.590379131026739E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998299236712934	WITHOUT_CLASSIFICATION	1.7007632870663457E-4	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9997195285625028	WITHOUT_CLASSIFICATION	2.8047143749722266E-4	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997789879837066	WITHOUT_CLASSIFICATION	2.2101201629337678E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999113104842485	WITHOUT_CLASSIFICATION	8.86895157515093E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9978142435112877	WITHOUT_CLASSIFICATION	0.002185756488712358	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9995528780893097	WITHOUT_CLASSIFICATION	4.4712191069026634E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9993754195071265	WITHOUT_CLASSIFICATION	6.245804928734063E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9993970621511177	WITHOUT_CLASSIFICATION	6.029378488822884E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998534432124796	WITHOUT_CLASSIFICATION	1.4655678752037923E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9987685295590576	WITHOUT_CLASSIFICATION	0.0012314704409424266	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9992724019879043	WITHOUT_CLASSIFICATION	7.275980120957107E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997302251322772	WITHOUT_CLASSIFICATION	2.69774867722867E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9996155823922872	WITHOUT_CLASSIFICATION	3.844176077128132E-4	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9983537365537031	WITHOUT_CLASSIFICATION	0.0016462634462968409	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9996717540351479	WITHOUT_CLASSIFICATION	3.282459648521729E-4	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9994263376738255	WITHOUT_CLASSIFICATION	5.736623261744409E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9992219383946755	WITHOUT_CLASSIFICATION	7.780616053245212E-4	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9994263376738255	WITHOUT_CLASSIFICATION	5.736623261744409E-4	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9992835511898178	WITHOUT_CLASSIFICATION	7.164488101822754E-4	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9965587715986284	WITHOUT_CLASSIFICATION	0.0034412284013716366	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995993548903714	WITHOUT_CLASSIFICATION	4.006451096285432E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999717427207971	WITHOUT_CLASSIFICATION	2.825727920290584E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9996162398614964	WITHOUT_CLASSIFICATION	3.837601385036162E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.998945113312058	WITHOUT_CLASSIFICATION	0.0010548866879419127	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996126003661964	WITHOUT_CLASSIFICATION	3.873996338035915E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9992125073195043	WITHOUT_CLASSIFICATION	7.874926804957186E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996126003661964	WITHOUT_CLASSIFICATION	3.873996338035915E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996930313516698	WITHOUT_CLASSIFICATION	3.0696864833025734E-4	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9997967921298292	WITHOUT_CLASSIFICATION	2.0320787017081006E-4	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9992332132051094	WITHOUT_CLASSIFICATION	7.667867948906151E-4	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9982836561590678	WITHOUT_CLASSIFICATION	0.0017163438409322615	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9987853972529549	WITHOUT_CLASSIFICATION	0.0012146027470450735	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999257245462665	WITHOUT_CLASSIFICATION	7.427545373349255E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998887881416446	WITHOUT_CLASSIFICATION	1.1121185835535092E-4	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998475574330202	WITHOUT_CLASSIFICATION	1.5244256697982057E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9997717306502503	WITHOUT_CLASSIFICATION	2.2826934974980385E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9948616694222425	WITHOUT_CLASSIFICATION	0.005138330577757452	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9996999240874855	WITHOUT_CLASSIFICATION	3.000759125144449E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996126003661964	WITHOUT_CLASSIFICATION	3.873996338035915E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9987853972529549	WITHOUT_CLASSIFICATION	0.0012146027470450735	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998887881416446	WITHOUT_CLASSIFICATION	1.1121185835535092E-4	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9976204237358892	WITHOUT_CLASSIFICATION	0.00237957626411085	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999221546059339	WITHOUT_CLASSIFICATION	7.7845394066061E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9994222113968203	WITHOUT_CLASSIFICATION	5.777886031797218E-4	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998330779573059	WITHOUT_CLASSIFICATION	1.6692204269406173E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996930313516698	WITHOUT_CLASSIFICATION	3.0696864833025734E-4	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9990624337720323	WITHOUT_CLASSIFICATION	9.375662279677832E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9992730736518137	WITHOUT_CLASSIFICATION	7.269263481863855E-4	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992594970092314	WITHOUT_CLASSIFICATION	7.405029907684064E-4	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9988018559364	WITHOUT_CLASSIFICATION	0.0011981440635999902	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9988018559364	WITHOUT_CLASSIFICATION	0.0011981440635999902	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9991286757911173	WITHOUT_CLASSIFICATION	8.713242088826478E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999858709286985	WITHOUT_CLASSIFICATION	1.4129071301501365E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997686246435066	WITHOUT_CLASSIFICATION	2.3137535649342823E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9993151771071408	WITHOUT_CLASSIFICATION	6.848228928592886E-4	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9955639971735069	WITHOUT_CLASSIFICATION	0.004436002826493117	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9990084840196026	WITHOUT_CLASSIFICATION	9.915159803973999E-4	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9989985486476393	WITHOUT_CLASSIFICATION	0.0010014513523607857	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9993862326239323	WITHOUT_CLASSIFICATION	6.137673760677125E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9995747310767163	WITHOUT_CLASSIFICATION	4.252689232836249E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997037984639302	WITHOUT_CLASSIFICATION	2.9620153606982016E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9994944430554444	WITHOUT_CLASSIFICATION	5.055569445555423E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9994788393949955	WITHOUT_CLASSIFICATION	5.211606050044842E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9989289216140834	WITHOUT_CLASSIFICATION	0.0010710783859166526	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9987882142240487	WITHOUT_CLASSIFICATION	0.0012117857759512117	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9989652137091307	WITHOUT_CLASSIFICATION	0.0010347862908693724	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996242816929379	WITHOUT_CLASSIFICATION	3.757183070621305E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9994165059072458	WITHOUT_CLASSIFICATION	5.834940927542364E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998936158539706	WITHOUT_CLASSIFICATION	1.0638414602928632E-4	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9983587449535436	WITHOUT_CLASSIFICATION	0.0016412550464564425	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9982776154312205	WITHOUT_CLASSIFICATION	0.0017223845687795276	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999763076221011	WITHOUT_CLASSIFICATION	2.369237789889415E-4	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9997652722397808	WITHOUT_CLASSIFICATION	2.347277602193041E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9997048315947266	WITHOUT_CLASSIFICATION	2.9516840527352443E-4	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9997412528625457	WITHOUT_CLASSIFICATION	2.5874713745430416E-4	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9973692825636158	WITHOUT_CLASSIFICATION	0.002630717436384247	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9996940849253655	WITHOUT_CLASSIFICATION	3.059150746346016E-4	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997087272762694	WITHOUT_CLASSIFICATION	2.912727237306169E-4	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996640286784212	WITHOUT_CLASSIFICATION	3.359713215787991E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9996622391327142	WITHOUT_CLASSIFICATION	3.377608672857601E-4	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8143255642457868	WITHOUT_CLASSIFICATION	0.1856744357542131	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9983854734348038	WITHOUT_CLASSIFICATION	0.0016145265651962223	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999459543190707	WITHOUT_CLASSIFICATION	5.404568092930998E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999619062574499	WITHOUT_CLASSIFICATION	3.8093742550116526E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9992991952533259	WITHOUT_CLASSIFICATION	7.008047466741192E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9943040134221335	WITHOUT_CLASSIFICATION	0.0056959865778665325	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999070575933283	WITHOUT_CLASSIFICATION	9.29424066716199E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999833416410316	WITHOUT_CLASSIFICATION	1.665835896835104E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997300238193438	WITHOUT_CLASSIFICATION	2.699761806560973E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997266929061811	WITHOUT_CLASSIFICATION	2.733070938189044E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997558713597915	WITHOUT_CLASSIFICATION	2.4412864020850506E-4	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9994477123437533	WITHOUT_CLASSIFICATION	5.522876562466979E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997266929061811	WITHOUT_CLASSIFICATION	2.733070938189044E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997300238193438	WITHOUT_CLASSIFICATION	2.699761806560973E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997558713597915	WITHOUT_CLASSIFICATION	2.4412864020850506E-4	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9997999024174328	WITHOUT_CLASSIFICATION	2.0009758256720782E-4	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9993719160814046	WITHOUT_CLASSIFICATION	6.280839185952796E-4	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9986762711161349	WITHOUT_CLASSIFICATION	0.0013237288838651281	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9996391978925641	WITHOUT_CLASSIFICATION	3.6080210743590557E-4	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999907550852692	WITHOUT_CLASSIFICATION	9.244914730797507E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9996419700313725	WITHOUT_CLASSIFICATION	3.5802996862760385E-4	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999866220246373	WITHOUT_CLASSIFICATION	1.3377975362710703E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997101706061804	WITHOUT_CLASSIFICATION	2.898293938196181E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999904235139538	WITHOUT_CLASSIFICATION	9.576486046199235E-5	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9990697858068778	WITHOUT_CLASSIFICATION	9.302141931223155E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9996737103758053	WITHOUT_CLASSIFICATION	3.262896241946567E-4	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9986575193213523	WITHOUT_CLASSIFICATION	0.0013424806786477659	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997672316692854	WITHOUT_CLASSIFICATION	2.3276833071450318E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9989995539248213	WITHOUT_CLASSIFICATION	0.0010004460751786499	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999907296342537	WITHOUT_CLASSIFICATION	9.270365746296068E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998870353883775	WITHOUT_CLASSIFICATION	1.1296461162253025E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993152899347273	WITHOUT_CLASSIFICATION	6.847100652726147E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999744872711961	WITHOUT_CLASSIFICATION	2.5512728803913977E-5	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9993365151920418	WITHOUT_CLASSIFICATION	6.634848079581814E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9991676034250114	WITHOUT_CLASSIFICATION	8.323965749884995E-4	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9817416028936735	WITHOUT_CLASSIFICATION	0.018258397106326457	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9997784186164065	WITHOUT_CLASSIFICATION	2.2158138359352163E-4	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9990678156860688	WITHOUT_CLASSIFICATION	9.321843139311917E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9982992901968539	WITHOUT_CLASSIFICATION	0.0017007098031460329	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9991676034250114	WITHOUT_CLASSIFICATION	8.323965749884995E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9991676034250114	WITHOUT_CLASSIFICATION	8.323965749884995E-4	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.998611817944981	WITHOUT_CLASSIFICATION	0.0013881820550190212	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.998611817944981	WITHOUT_CLASSIFICATION	0.0013881820550190212	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9989851918959672	WITHOUT_CLASSIFICATION	0.0010148081040326994	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993152899347273	WITHOUT_CLASSIFICATION	6.847100652726147E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997879211176091	WITHOUT_CLASSIFICATION	2.1207888239094876E-4	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996989290713941	WITHOUT_CLASSIFICATION	3.0107092860592047E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991995155368217	WITHOUT_CLASSIFICATION	8.004844631781733E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991995155368217	WITHOUT_CLASSIFICATION	8.004844631781733E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9971482160191114	WITHOUT_CLASSIFICATION	0.002851783980888639	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9997934571374628	WITHOUT_CLASSIFICATION	2.0654286253724225E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998459925332811	WITHOUT_CLASSIFICATION	1.5400746671895738E-4	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9990101162139237	WITHOUT_CLASSIFICATION	9.898837860762876E-4	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9948959590429307	WITHOUT_CLASSIFICATION	0.00510404095706928	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.8545142811944217	WITHOUT_CLASSIFICATION	0.14548571880557834	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9994088347450598	WITHOUT_CLASSIFICATION	5.911652549401153E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9991878466825457	WITHOUT_CLASSIFICATION	8.121533174542678E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9989995539248213	WITHOUT_CLASSIFICATION	0.0010004460751786499	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9970680315670629	WITHOUT_CLASSIFICATION	0.0029319684329369928	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9990674491202302	WITHOUT_CLASSIFICATION	9.325508797697693E-4	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9991371911593457	WITHOUT_CLASSIFICATION	8.628088406541349E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9942793530826028	WITHOUT_CLASSIFICATION	0.005720646917397127	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9994605057760052	WITHOUT_CLASSIFICATION	5.394942239948898E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996691066608836	WITHOUT_CLASSIFICATION	3.3089333911639346E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996627851167221	WITHOUT_CLASSIFICATION	3.3721488327791263E-4	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9989002835055637	WITHOUT_CLASSIFICATION	0.0010997164944362946	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9997558640182966	WITHOUT_CLASSIFICATION	2.4413598170342342E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999681735165891	WITHOUT_CLASSIFICATION	3.182648341090775E-4	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9990353578226906	WITHOUT_CLASSIFICATION	9.646421773093566E-4	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9993110743053821	WITHOUT_CLASSIFICATION	6.889256946178115E-4	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9994347989802906	WITHOUT_CLASSIFICATION	5.652010197094128E-4	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997432772110744	WITHOUT_CLASSIFICATION	2.567227889256118E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998936158539706	WITHOUT_CLASSIFICATION	1.0638414602928632E-4	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9978344251508501	WITHOUT_CLASSIFICATION	0.002165574849149945	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999505181871906	WITHOUT_CLASSIFICATION	4.948181280940669E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9991873333852019	WITHOUT_CLASSIFICATION	8.126666147981016E-4	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9998085725850305	WITHOUT_CLASSIFICATION	1.9142741496933725E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9996859476663876	WITHOUT_CLASSIFICATION	3.140523336122689E-4	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9996859476663876	WITHOUT_CLASSIFICATION	3.140523336122689E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9967474081118483	WITHOUT_CLASSIFICATION	0.0032525918881517774	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9988550208014065	WITHOUT_CLASSIFICATION	0.0011449791985934654	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9983004344966349	WITHOUT_CLASSIFICATION	0.00169956550336505	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997549049546006	WITHOUT_CLASSIFICATION	2.4509504539939987E-4	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9992901576469059	WITHOUT_CLASSIFICATION	7.098423530941147E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9977995582665179	WITHOUT_CLASSIFICATION	0.002200441733482165	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997893213773729	WITHOUT_CLASSIFICATION	2.1067862262717313E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997391876525159	WITHOUT_CLASSIFICATION	2.6081234748408276E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997391876525159	WITHOUT_CLASSIFICATION	2.6081234748408276E-4	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9992323281331069	WITHOUT_CLASSIFICATION	7.676718668930045E-4	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9998307027415047	WITHOUT_CLASSIFICATION	1.692972584953574E-4	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9998307027415047	WITHOUT_CLASSIFICATION	1.692972584953574E-4	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997437802372338	WITHOUT_CLASSIFICATION	2.562197627662387E-4	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9997353484617661	WITHOUT_CLASSIFICATION	2.646515382339225E-4	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9996515722257346	WITHOUT_CLASSIFICATION	3.4842777426540044E-4	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9995999075517032	WITHOUT_CLASSIFICATION	4.000924482967587E-4	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9994930963468774	WITHOUT_CLASSIFICATION	5.069036531225379E-4	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9986889889263224	WITHOUT_CLASSIFICATION	0.0013110110736776618	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993417195369462	WITHOUT_CLASSIFICATION	6.582804630538374E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.998834254456976	WITHOUT_CLASSIFICATION	0.0011657455430240254	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9936996713088504	WITHOUT_CLASSIFICATION	0.006300328691149572	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994154661392245	WITHOUT_CLASSIFICATION	5.845338607755116E-4	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9991234862121672	WITHOUT_CLASSIFICATION	8.765137878327807E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9995253775085879	WITHOUT_CLASSIFICATION	4.7462249141200414E-4	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995886332443032	WITHOUT_CLASSIFICATION	4.1136675569671476E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9992712845483666	WITHOUT_CLASSIFICATION	7.287154516335192E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9983373352767173	WITHOUT_CLASSIFICATION	0.0016626647232827326	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9980038887921246	WITHOUT_CLASSIFICATION	0.001996111207875378	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9977224366123137	WITHOUT_CLASSIFICATION	0.002277563387686296	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999820395545464	WITHOUT_CLASSIFICATION	1.7960445453602724E-4	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9994252193998004	WITHOUT_CLASSIFICATION	5.747806001996204E-4	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.999690668757758	WITHOUT_CLASSIFICATION	3.0933124224203555E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996056052119072	WITHOUT_CLASSIFICATION	3.9439478809275664E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9994076158984391	WITHOUT_CLASSIFICATION	5.923841015609453E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9872845202562975	WITHOUT_CLASSIFICATION	0.012715479743702348	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999310819919695	WITHOUT_CLASSIFICATION	6.89180080305286E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996056052119072	WITHOUT_CLASSIFICATION	3.9439478809275664E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9991332406547254	WITHOUT_CLASSIFICATION	8.667593452745371E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996743739814624	WITHOUT_CLASSIFICATION	3.256260185375903E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999036356818888	WITHOUT_CLASSIFICATION	9.636431811121345E-5	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998263067411495	WITHOUT_CLASSIFICATION	1.736932588505714E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995943677936197	WITHOUT_CLASSIFICATION	4.05632206380396E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9992088420009726	WITHOUT_CLASSIFICATION	7.911579990274385E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999589674559122	WITHOUT_CLASSIFICATION	4.103254408781137E-4	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9987711377288182	WITHOUT_CLASSIFICATION	0.0012288622711818312	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997742113733008	WITHOUT_CLASSIFICATION	2.2578862669924246E-4	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9996511280853052	WITHOUT_CLASSIFICATION	3.488719146947457E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997742113733008	WITHOUT_CLASSIFICATION	2.2578862669924246E-4	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9994383455785071	WITHOUT_CLASSIFICATION	5.616544214928564E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995421788256575	WITHOUT_CLASSIFICATION	4.578211743425558E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9961702984631889	WITHOUT_CLASSIFICATION	0.0038297015368111108	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9983005987862197	WITHOUT_CLASSIFICATION	0.0016994012137803122	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.99904425993138	WITHOUT_CLASSIFICATION	9.557400686200368E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998303486550694	WITHOUT_CLASSIFICATION	1.696513449305804E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996285994988671	WITHOUT_CLASSIFICATION	3.7140050113288863E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994678606737418	WITHOUT_CLASSIFICATION	5.3213932625821E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996285994988671	WITHOUT_CLASSIFICATION	3.7140050113288863E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997093104250994	WITHOUT_CLASSIFICATION	2.906895749006222E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9958934237270394	WITHOUT_CLASSIFICATION	0.004106576272960619	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997094491301992	WITHOUT_CLASSIFICATION	2.9055086980080727E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9990888150699689	WITHOUT_CLASSIFICATION	9.111849300309407E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998303486550694	WITHOUT_CLASSIFICATION	1.696513449305804E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994678606737418	WITHOUT_CLASSIFICATION	5.3213932625821E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997093104250994	WITHOUT_CLASSIFICATION	2.906895749006222E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9994171543064482	WITHOUT_CLASSIFICATION	5.828456935519253E-4	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9991834859913393	WITHOUT_CLASSIFICATION	8.165140086606811E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9992986928615404	WITHOUT_CLASSIFICATION	7.013071384596387E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9993015212093391	WITHOUT_CLASSIFICATION	6.98478790660866E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9993379570005256	WITHOUT_CLASSIFICATION	6.620429994743265E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996691066608836	WITHOUT_CLASSIFICATION	3.3089333911639346E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9958934237270394	WITHOUT_CLASSIFICATION	0.004106576272960619	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999707311886838	WITHOUT_CLASSIFICATION	2.9268811316160177E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.997417688509536	WITHOUT_CLASSIFICATION	0.002582311490463881	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9997347849783607	WITHOUT_CLASSIFICATION	2.6521502163925377E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996691066608836	WITHOUT_CLASSIFICATION	3.3089333911639346E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999365699061666	WITHOUT_CLASSIFICATION	6.343009383340927E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996691066608836	WITHOUT_CLASSIFICATION	3.3089333911639346E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998996821787768	WITHOUT_CLASSIFICATION	1.0031782122328464E-4	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996229256189166	WITHOUT_CLASSIFICATION	3.7707438108336227E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9991849933856238	WITHOUT_CLASSIFICATION	8.150066143761807E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996275080042009	WITHOUT_CLASSIFICATION	3.724919957991972E-4	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9990987501695232	WITHOUT_CLASSIFICATION	9.012498304768183E-4	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9993208817729984	WITHOUT_CLASSIFICATION	6.791182270015705E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997720124724583	WITHOUT_CLASSIFICATION	2.2798752754158325E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9994923766942901	WITHOUT_CLASSIFICATION	5.076233057098144E-4	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9993955362950689	WITHOUT_CLASSIFICATION	6.044637049310892E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999103311417531	WITHOUT_CLASSIFICATION	8.966885824693334E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9993955362950689	WITHOUT_CLASSIFICATION	6.044637049310892E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9896421651954284	WITHOUT_CLASSIFICATION	0.010357834804571562	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9989493307922298	WITHOUT_CLASSIFICATION	0.0010506692077701736	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999454079954213	WITHOUT_CLASSIFICATION	5.4592004578601145E-5	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999687507683165	WITHOUT_CLASSIFICATION	3.1249231683482605E-5	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998652328904005	WITHOUT_CLASSIFICATION	1.3476710959938354E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.997473642924849	WITHOUT_CLASSIFICATION	0.002526357075151015	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9996568523593202	WITHOUT_CLASSIFICATION	3.4314764067986314E-4	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998524678809076	WITHOUT_CLASSIFICATION	1.475321190924213E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9936723479138471	WITHOUT_CLASSIFICATION	0.0063276520861530175	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9936723479138471	WITHOUT_CLASSIFICATION	0.0063276520861530175	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9996496923863241	WITHOUT_CLASSIFICATION	3.5030761367601E-4	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9995664951870076	WITHOUT_CLASSIFICATION	4.3350481299247085E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999519456128751	WITHOUT_CLASSIFICATION	4.805438712490527E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998541980204206	WITHOUT_CLASSIFICATION	1.4580197957939146E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997651151478589	WITHOUT_CLASSIFICATION	2.348848521411356E-4	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997738233831874	WITHOUT_CLASSIFICATION	2.2617661681265138E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9986500658559342	WITHOUT_CLASSIFICATION	0.0013499341440658087	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9991328281270019	WITHOUT_CLASSIFICATION	8.671718729980997E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9986606814459846	WITHOUT_CLASSIFICATION	0.0013393185540154112	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9983813002419668	WITHOUT_CLASSIFICATION	0.0016186997580331082	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9992654569595789	WITHOUT_CLASSIFICATION	7.345430404210766E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998628496273003	WITHOUT_CLASSIFICATION	1.3715037269975615E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992382710334254	WITHOUT_CLASSIFICATION	7.617289665745038E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9989874063638752	WITHOUT_CLASSIFICATION	0.0010125936361248258	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9989874063638752	WITHOUT_CLASSIFICATION	0.0010125936361248258	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.978861847609532	WITHOUT_CLASSIFICATION	0.02113815239046797	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997720124724583	WITHOUT_CLASSIFICATION	2.2798752754158325E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9965359535275049	WITHOUT_CLASSIFICATION	0.0034640464724949856	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9994983792170685	WITHOUT_CLASSIFICATION	5.016207829315057E-4	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9981574046515111	WITHOUT_CLASSIFICATION	0.0018425953484888197	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999091747902769	WITHOUT_CLASSIFICATION	9.08252097231036E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9992159817484767	WITHOUT_CLASSIFICATION	7.840182515231741E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9978263140296172	WITHOUT_CLASSIFICATION	0.0021736859703828165	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9993177303539347	WITHOUT_CLASSIFICATION	6.822696460653207E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9998848459936146	WITHOUT_CLASSIFICATION	1.1515400638548237E-4	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9920731419075779	WITHOUT_CLASSIFICATION	0.007926858092422077	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999293038126141	WITHOUT_CLASSIFICATION	7.069618738588065E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997644780579641	WITHOUT_CLASSIFICATION	2.3552194203593682E-4	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9974341812632892	WITHOUT_CLASSIFICATION	0.0025658187367107463	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9996007068026109	WITHOUT_CLASSIFICATION	3.992931973890906E-4	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9998064759048549	WITHOUT_CLASSIFICATION	1.9352409514516194E-4	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998562673667641	WITHOUT_CLASSIFICATION	1.4373263323587502E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997042212776633	WITHOUT_CLASSIFICATION	2.95778722336575E-4	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994515340484244	WITHOUT_CLASSIFICATION	5.484659515756751E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9983555792418999	WITHOUT_CLASSIFICATION	0.0016444207581001091	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995330753368868	WITHOUT_CLASSIFICATION	4.6692466311312926E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999453539252002	WITHOUT_CLASSIFICATION	5.464607479977089E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998278458913157	WITHOUT_CLASSIFICATION	1.7215410868437828E-4	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.998817167754974	WITHOUT_CLASSIFICATION	0.0011828322450260435	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9995553295187584	WITHOUT_CLASSIFICATION	4.44670481241644E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998082779766816	WITHOUT_CLASSIFICATION	1.917220233184221E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9976478215465485	WITHOUT_CLASSIFICATION	0.002352178453451527	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9940874067494524	WITHOUT_CLASSIFICATION	0.005912593250547488	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9996709257717148	WITHOUT_CLASSIFICATION	3.290742282851183E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9996978360446521	WITHOUT_CLASSIFICATION	3.0216395534786434E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999741524040165	WITHOUT_CLASSIFICATION	2.5847595983494306E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9986700373625929	WITHOUT_CLASSIFICATION	0.0013299626374071115	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9942671224855587	WITHOUT_CLASSIFICATION	0.005732877514441296	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9994860320425116	WITHOUT_CLASSIFICATION	5.139679574883363E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9989795158999752	WITHOUT_CLASSIFICATION	0.0010204841000247408	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9989795158999752	WITHOUT_CLASSIFICATION	0.0010204841000247408	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996189570918421	WITHOUT_CLASSIFICATION	3.8104290815793655E-4	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999482600184248	WITHOUT_CLASSIFICATION	5.173998157520945E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993683396401031	WITHOUT_CLASSIFICATION	6.316603598969602E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993683396401031	WITHOUT_CLASSIFICATION	6.316603598969602E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9997703917455318	WITHOUT_CLASSIFICATION	2.296082544681354E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9995094135137206	WITHOUT_CLASSIFICATION	4.905864862793864E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9981556124761733	WITHOUT_CLASSIFICATION	0.0018443875238266239	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998000315279436	WITHOUT_CLASSIFICATION	1.9996847205636472E-4	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996609671811397	WITHOUT_CLASSIFICATION	3.3903281886033405E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9995374554265071	WITHOUT_CLASSIFICATION	4.625445734928812E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9995374554265071	WITHOUT_CLASSIFICATION	4.625445734928812E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9996887909137138	WITHOUT_CLASSIFICATION	3.1120908628626455E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9997309779484906	WITHOUT_CLASSIFICATION	2.6902205150939945E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9997309779484906	WITHOUT_CLASSIFICATION	2.6902205150939945E-4	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9998279620853905	WITHOUT_CLASSIFICATION	1.7203791460952315E-4	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999807942444703	WITHOUT_CLASSIFICATION	1.9205755529718002E-4	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999226372722497	WITHOUT_CLASSIFICATION	7.736272775022099E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999205604575191	WITHOUT_CLASSIFICATION	7.943954248098905E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999333651300465	WITHOUT_CLASSIFICATION	6.663486995352187E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997323062814291	WITHOUT_CLASSIFICATION	2.676937185709256E-4	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999058042963856	WITHOUT_CLASSIFICATION	9.419570361440756E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9996823571241317	WITHOUT_CLASSIFICATION	3.1764287586829573E-4	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999889065757078	WITHOUT_CLASSIFICATION	1.1093424292191738E-4	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9993034892195418	WITHOUT_CLASSIFICATION	6.96510780458181E-4	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9993010728063485	WITHOUT_CLASSIFICATION	6.98927193651461E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9985727362001474	WITHOUT_CLASSIFICATION	0.0014272637998525252	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9996197606492891	WITHOUT_CLASSIFICATION	3.8023935071088003E-4	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998051773673555	WITHOUT_CLASSIFICATION	1.948226326444278E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9997321673446277	WITHOUT_CLASSIFICATION	2.6783265537231286E-4	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998015096538835	WITHOUT_CLASSIFICATION	1.9849034611657193E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997385678923636	WITHOUT_CLASSIFICATION	2.614321076364636E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9988864713168593	WITHOUT_CLASSIFICATION	0.0011135286831407522	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9995925849336444	WITHOUT_CLASSIFICATION	4.0741506635562087E-4	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9996017960913074	WITHOUT_CLASSIFICATION	3.982039086926717E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9987662946453637	WITHOUT_CLASSIFICATION	0.0012337053546362803	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999846224513611	WITHOUT_CLASSIFICATION	1.537754863889796E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9989630995918901	WITHOUT_CLASSIFICATION	0.0010369004081098223	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9995418267428788	WITHOUT_CLASSIFICATION	4.581732571211237E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9992235377808403	WITHOUT_CLASSIFICATION	7.764622191597171E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.999285288664787	WITHOUT_CLASSIFICATION	7.147113352129167E-4	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9996625613737881	WITHOUT_CLASSIFICATION	3.374386262120038E-4	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999573479628004	WITHOUT_CLASSIFICATION	4.265203719960149E-5	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998639438949583	WITHOUT_CLASSIFICATION	1.3605610504181085E-4	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999182250976436	WITHOUT_CLASSIFICATION	8.177490235636155E-5	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999447794570061	WITHOUT_CLASSIFICATION	5.522054299389688E-4	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9998093676973194	WITHOUT_CLASSIFICATION	1.906323026806158E-4	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999729663902556	WITHOUT_CLASSIFICATION	2.7033609744393333E-4	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9991421960333648	WITHOUT_CLASSIFICATION	8.578039666351422E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997293008081468	WITHOUT_CLASSIFICATION	2.706991918531709E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997021383482082	WITHOUT_CLASSIFICATION	2.97861651791766E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999288781055722	WITHOUT_CLASSIFICATION	7.112189442778341E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9961185969514406	WITHOUT_CLASSIFICATION	0.003881403048559357	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9997379215944249	WITHOUT_CLASSIFICATION	2.620784055751552E-4	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9997365620025456	WITHOUT_CLASSIFICATION	2.634379974544733E-4	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997338366815455	WITHOUT_CLASSIFICATION	2.661633184546152E-4	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9967227477815132	WITHOUT_CLASSIFICATION	0.003277252218486753	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999099337104743	WITHOUT_CLASSIFICATION	9.006628952574088E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9992594595309379	WITHOUT_CLASSIFICATION	7.405404690620711E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9995422851982534	WITHOUT_CLASSIFICATION	4.577148017465474E-4	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999707877913863	WITHOUT_CLASSIFICATION	2.921220861370192E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997809039406763	WITHOUT_CLASSIFICATION	2.1909605932359175E-4	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998032620809629	WITHOUT_CLASSIFICATION	1.9673791903711236E-4	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999210694353935	WITHOUT_CLASSIFICATION	7.893056460650293E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9975143337591392	WITHOUT_CLASSIFICATION	0.0024856662408607347	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999730155353118	WITHOUT_CLASSIFICATION	2.698446468819565E-4	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9965216733470368	WITHOUT_CLASSIFICATION	0.0034783266529631227	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9992978773569885	WITHOUT_CLASSIFICATION	7.021226430114304E-4	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999639650127487	WITHOUT_CLASSIFICATION	3.6034987251303333E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9954013594765224	WITHOUT_CLASSIFICATION	0.004598640523477539	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997887766745502	WITHOUT_CLASSIFICATION	2.1122332544981352E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997887766745502	WITHOUT_CLASSIFICATION	2.1122332544981352E-4	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9987031427942158	WITHOUT_CLASSIFICATION	0.0012968572057842325	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9995125409303346	WITHOUT_CLASSIFICATION	4.8745906966545064E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9994197148379178	WITHOUT_CLASSIFICATION	5.802851620822863E-4	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9997452773249558	WITHOUT_CLASSIFICATION	2.5472267504417874E-4	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999768006968761	WITHOUT_CLASSIFICATION	2.3199303123898202E-4	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995531259910885	WITHOUT_CLASSIFICATION	4.4687400891147723E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999493313825293	WITHOUT_CLASSIFICATION	5.066861747067764E-5	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999304609938793	WITHOUT_CLASSIFICATION	6.953900612065353E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999904155272455	WITHOUT_CLASSIFICATION	9.584472754501821E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9998050196327373	WITHOUT_CLASSIFICATION	1.9498036726269238E-4	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998965316644401	WITHOUT_CLASSIFICATION	1.0346833555986317E-4	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9966976832574173	WITHOUT_CLASSIFICATION	0.0033023167425826334	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999423383862642	WITHOUT_CLASSIFICATION	5.766161373588467E-5	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999366431912482	WITHOUT_CLASSIFICATION	6.335680875175488E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994334329098283	WITHOUT_CLASSIFICATION	5.665670901716992E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994334329098283	WITHOUT_CLASSIFICATION	5.665670901716992E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9996352666760836	WITHOUT_CLASSIFICATION	3.647333239164646E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.998431240225983	WITHOUT_CLASSIFICATION	0.0015687597740170044	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9993473137317421	WITHOUT_CLASSIFICATION	6.526862682578558E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999625290328747	WITHOUT_CLASSIFICATION	3.7470967125295744E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998215452434175	WITHOUT_CLASSIFICATION	1.7845475658258888E-4	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996766280701885	WITHOUT_CLASSIFICATION	3.233719298114965E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9993209530310992	WITHOUT_CLASSIFICATION	6.790469689007636E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9998761187829134	WITHOUT_CLASSIFICATION	1.2388121708667963E-4	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999513688790148	WITHOUT_CLASSIFICATION	4.863112098525209E-5	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999694830359336	WITHOUT_CLASSIFICATION	3.0516964066346577E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9997703692267802	WITHOUT_CLASSIFICATION	2.2963077321973635E-4	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9991092898721062	WITHOUT_CLASSIFICATION	8.907101278938824E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9998411058774241	WITHOUT_CLASSIFICATION	1.588941225757756E-4	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.998063735619724	WITHOUT_CLASSIFICATION	0.0019362643802760958	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999251413280166	WITHOUT_CLASSIFICATION	7.485867198340788E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999239466448202	WITHOUT_CLASSIFICATION	7.605335517985815E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9867028375296896	WITHOUT_CLASSIFICATION	0.01329716247031048	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998809416153819	WITHOUT_CLASSIFICATION	1.1905838461807864E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9997801277581854	WITHOUT_CLASSIFICATION	2.1987224181463402E-4	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9994313027460031	WITHOUT_CLASSIFICATION	5.686972539968693E-4	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9996538618626966	WITHOUT_CLASSIFICATION	3.461381373034019E-4	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9995573572380336	WITHOUT_CLASSIFICATION	4.426427619662787E-4	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9998061313118772	WITHOUT_CLASSIFICATION	1.9386868812272206E-4	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999079835268598	WITHOUT_CLASSIFICATION	9.201647314019292E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999503227545063	WITHOUT_CLASSIFICATION	4.967724549370686E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9989729239474311	WITHOUT_CLASSIFICATION	0.001027076052568853	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998372707562642	WITHOUT_CLASSIFICATION	1.6272924373589195E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9992931011221631	WITHOUT_CLASSIFICATION	7.06898877837E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9994401037456446	WITHOUT_CLASSIFICATION	5.59896254355392E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9973171455720545	WITHOUT_CLASSIFICATION	0.0026828544279455103	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9996237007390015	WITHOUT_CLASSIFICATION	3.762992609984887E-4	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999195317847249	WITHOUT_CLASSIFICATION	8.046821527512016E-5	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99994527431937	WITHOUT_CLASSIFICATION	5.472568062996791E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9990910240745668	WITHOUT_CLASSIFICATION	9.089759254331741E-4	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9993886858031652	WITHOUT_CLASSIFICATION	6.113141968346985E-4	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997989414761188	WITHOUT_CLASSIFICATION	2.0105852388111267E-4	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9991109760314922	WITHOUT_CLASSIFICATION	8.890239685078845E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9997474790827785	WITHOUT_CLASSIFICATION	2.525209172215408E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998890243748891	WITHOUT_CLASSIFICATION	1.1097562511075316E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9985234524852061	WITHOUT_CLASSIFICATION	0.0014765475147938845	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9985234524852061	WITHOUT_CLASSIFICATION	0.0014765475147938845	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9998684268324093	WITHOUT_CLASSIFICATION	1.3157316759062978E-4	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9935556096902602	WITHOUT_CLASSIFICATION	0.0064443903097397585	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9998303499857905	WITHOUT_CLASSIFICATION	1.6965001420952438E-4	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9997852372966002	WITHOUT_CLASSIFICATION	2.14762703399826E-4	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9988102410884766	WITHOUT_CLASSIFICATION	0.0011897589115233205	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9984076479424638	WITHOUT_CLASSIFICATION	0.00159235205753623	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9983635557397671	WITHOUT_CLASSIFICATION	0.0016364442602328996	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9983531295826695	WITHOUT_CLASSIFICATION	0.0016468704173303978	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9974718763906361	WITHOUT_CLASSIFICATION	0.0025281236093639653	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996661700090007	WITHOUT_CLASSIFICATION	3.3382999099926865E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997529685625766	WITHOUT_CLASSIFICATION	2.4703143742345226E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9988992926465367	WITHOUT_CLASSIFICATION	0.001100707353463373	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999402037800617	WITHOUT_CLASSIFICATION	5.979621993833428E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9994409581566253	WITHOUT_CLASSIFICATION	5.590418433747697E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9993884359896376	WITHOUT_CLASSIFICATION	6.115640103624223E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999537148306499	WITHOUT_CLASSIFICATION	4.628516935013207E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.997589506884943	WITHOUT_CLASSIFICATION	0.002410493115057034	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999674588741578	WITHOUT_CLASSIFICATION	3.254112584220395E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999338800706856	WITHOUT_CLASSIFICATION	6.611992931439613E-4	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998562978964683	WITHOUT_CLASSIFICATION	1.4370210353168973E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9977074868385865	WITHOUT_CLASSIFICATION	0.002292513161413472	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999303083181653	WITHOUT_CLASSIFICATION	6.969168183471349E-4	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9992691314760814	WITHOUT_CLASSIFICATION	7.308685239186739E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999691404739154	WITHOUT_CLASSIFICATION	3.0859526084602094E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9996484193464807	WITHOUT_CLASSIFICATION	3.5158065351931423E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9985028239261989	WITHOUT_CLASSIFICATION	0.0014971760738010285	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9990039372215006	WITHOUT_CLASSIFICATION	9.960627784994553E-4	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9989960039887397	WITHOUT_CLASSIFICATION	0.0010039960112603026	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9997303742568437	WITHOUT_CLASSIFICATION	2.696257431563227E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9991593297548184	WITHOUT_CLASSIFICATION	8.406702451815933E-4	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9992742011946475	WITHOUT_CLASSIFICATION	7.257988053525643E-4	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9950146784381986	WITHOUT_CLASSIFICATION	0.004985321561801411	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9932754089372943	WITHOUT_CLASSIFICATION	0.0067245910627056656	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9988523596241996	WITHOUT_CLASSIFICATION	0.0011476403758003168	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.990519558636779	WITHOUT_CLASSIFICATION	0.009480441363220921	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9979816335824004	WITHOUT_CLASSIFICATION	0.0020183664175994877	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9995790604859792	WITHOUT_CLASSIFICATION	4.2093951402075077E-4	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9708950350589203	WITHOUT_CLASSIFICATION	0.029104964941079715	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9992928558825948	WITHOUT_CLASSIFICATION	7.071441174052909E-4	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997240447924728	WITHOUT_CLASSIFICATION	2.759552075271773E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998983602255945	WITHOUT_CLASSIFICATION	1.016397744054862E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9986398614018496	WITHOUT_CLASSIFICATION	0.0013601385981504262	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9916200015515706	WITHOUT_CLASSIFICATION	0.008379998448429482	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999243779065057	WITHOUT_CLASSIFICATION	7.562209349428568E-5	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9992072646189166	WITHOUT_CLASSIFICATION	7.927353810833715E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996170775292189	WITHOUT_CLASSIFICATION	3.829224707811577E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999423383862642	WITHOUT_CLASSIFICATION	5.766161373588467E-5	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999243839942592	WITHOUT_CLASSIFICATION	7.561600574077065E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9971192118445148	WITHOUT_CLASSIFICATION	0.002880788155485149	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9967654469964522	WITHOUT_CLASSIFICATION	0.0032345530035479317	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999588708669905	WITHOUT_CLASSIFICATION	4.1129133009456915E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9997441208009206	WITHOUT_CLASSIFICATION	2.558791990794011E-4	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996684238908086	WITHOUT_CLASSIFICATION	3.315761091914282E-4	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9991762496226259	WITHOUT_CLASSIFICATION	8.237503773741078E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9318442150772361	WITHOUT_CLASSIFICATION	0.06815578492276383	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998933139949157	WITHOUT_CLASSIFICATION	1.0668600508442506E-4	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997250686808409	WITHOUT_CLASSIFICATION	2.7493131915921036E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9826348144893073	WITHOUT_CLASSIFICATION	0.01736518551069263	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9988727214028694	WITHOUT_CLASSIFICATION	0.0011272785971305323	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997660314816106	WITHOUT_CLASSIFICATION	2.33968518389374E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9959711033375963	WITHOUT_CLASSIFICATION	0.0040288966624037375	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999858709286985	WITHOUT_CLASSIFICATION	1.4129071301501365E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9990600983752834	WITHOUT_CLASSIFICATION	9.399016247166118E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999054888222433	WITHOUT_CLASSIFICATION	9.451117775670622E-5	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.989423093690346	WITHOUT_CLASSIFICATION	0.010576906309654022	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999858709286985	WITHOUT_CLASSIFICATION	1.4129071301501365E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9952880336153406	WITHOUT_CLASSIFICATION	0.004711966384659392	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9757959249644345	WITHOUT_CLASSIFICATION	0.02420407503556555	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9996525531811327	WITHOUT_CLASSIFICATION	3.474468188673904E-4	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9963277687668499	WITHOUT_CLASSIFICATION	0.003672231233149999	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999791247640788	WITHOUT_CLASSIFICATION	2.0875235921202193E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993079816642231	WITHOUT_CLASSIFICATION	6.920183357769676E-4	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999174481728794	WITHOUT_CLASSIFICATION	8.255182712055628E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999507491994217	WITHOUT_CLASSIFICATION	4.9250800578301505E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999673115070612	WITHOUT_CLASSIFICATION	3.268849293884263E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9959654855050237	WITHOUT_CLASSIFICATION	0.004034514494976312	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9988052522951518	WITHOUT_CLASSIFICATION	0.001194747704848165	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9726982828014881	WITHOUT_CLASSIFICATION	0.027301717198511884	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9962979245455751	WITHOUT_CLASSIFICATION	0.0037020754544248705	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999468750462849	WITHOUT_CLASSIFICATION	5.312495371509558E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9991392305581587	WITHOUT_CLASSIFICATION	8.607694418412949E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995330753368868	WITHOUT_CLASSIFICATION	4.6692466311312926E-4	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9995786146785411	WITHOUT_CLASSIFICATION	4.2138532145892516E-4	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9994165905967795	WITHOUT_CLASSIFICATION	5.834094032204447E-4	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9939502383882267	WITHOUT_CLASSIFICATION	0.00604976161177319	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9996911045077075	WITHOUT_CLASSIFICATION	3.088954922925356E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9993614114479626	WITHOUT_CLASSIFICATION	6.385885520372404E-4	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9996638239510649	WITHOUT_CLASSIFICATION	3.3617604893502036E-4	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.998864118765661	WITHOUT_CLASSIFICATION	0.0011358812343390831	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9990615060674638	WITHOUT_CLASSIFICATION	9.384939325362766E-4	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999728815487613	WITHOUT_CLASSIFICATION	2.711845123869094E-5	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9964223003486788	WITHOUT_CLASSIFICATION	0.0035776996513210797	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.97012145535421	WITHOUT_CLASSIFICATION	0.029878544645789967	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999497958053734	WITHOUT_CLASSIFICATION	5.020419462670956E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9989890127130222	WITHOUT_CLASSIFICATION	0.0010109872869777672	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999725414459377	WITHOUT_CLASSIFICATION	2.7458554062279157E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9998658509739342	WITHOUT_CLASSIFICATION	1.3414902606589572E-4	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9987336685954329	WITHOUT_CLASSIFICATION	0.0012663314045670724	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9995677817899304	WITHOUT_CLASSIFICATION	4.322182100695391E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9998312880447442	WITHOUT_CLASSIFICATION	1.6871195525582335E-4	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997162805203901	WITHOUT_CLASSIFICATION	2.8371947960995373E-4	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999946503342607	WITHOUT_CLASSIFICATION	5.349665739303781E-5	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9996047232424311	WITHOUT_CLASSIFICATION	3.9527675756896537E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9987690837484711	WITHOUT_CLASSIFICATION	0.0012309162515289887	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9997530785700477	WITHOUT_CLASSIFICATION	2.469214299522255E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9956338091596669	WITHOUT_CLASSIFICATION	0.004366190840333039	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999235429262658	WITHOUT_CLASSIFICATION	7.645707373420258E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999235429262658	WITHOUT_CLASSIFICATION	7.645707373420258E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.998971024960814	WITHOUT_CLASSIFICATION	0.001028975039185956	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997662908314481	WITHOUT_CLASSIFICATION	2.3370916855195247E-4	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995906375572194	WITHOUT_CLASSIFICATION	4.0936244278051795E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9991097784874612	WITHOUT_CLASSIFICATION	8.902215125389183E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997549049546006	WITHOUT_CLASSIFICATION	2.4509504539939987E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997549049546006	WITHOUT_CLASSIFICATION	2.4509504539939987E-4	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9994383993093333	WITHOUT_CLASSIFICATION	5.616006906667089E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9921495747914332	WITHOUT_CLASSIFICATION	0.00785042520856676	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997200158424459	WITHOUT_CLASSIFICATION	2.7998415755417554E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9975234362725698	WITHOUT_CLASSIFICATION	0.0024765637274301922	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9890908758155551	WITHOUT_CLASSIFICATION	0.01090912418444494	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9987923306227006	WITHOUT_CLASSIFICATION	0.0012076693772994761	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998166200655946	WITHOUT_CLASSIFICATION	1.833799344053459E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998652691849685	WITHOUT_CLASSIFICATION	1.3473081503154763E-4	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9910976657642447	WITHOUT_CLASSIFICATION	0.008902334235755304	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995926489303166	WITHOUT_CLASSIFICATION	4.0735106968334224E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995926489303166	WITHOUT_CLASSIFICATION	4.0735106968334224E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9991027082708426	WITHOUT_CLASSIFICATION	8.972917291574687E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9997306164287306	WITHOUT_CLASSIFICATION	2.693835712693653E-4	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9990927835824507	WITHOUT_CLASSIFICATION	9.072164175493451E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999041164856932	WITHOUT_CLASSIFICATION	9.58835143067862E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997686246435066	WITHOUT_CLASSIFICATION	2.3137535649342823E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581402280456	WITHOUT_CLASSIFICATION	3.4185977195444727E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998452809870558	WITHOUT_CLASSIFICATION	1.547190129441784E-4	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9984719412140685	WITHOUT_CLASSIFICATION	0.0015280587859315114	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9996290185704004	WITHOUT_CLASSIFICATION	3.709814295996396E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999249618438621	WITHOUT_CLASSIFICATION	7.503815613787885E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9959654855050237	WITHOUT_CLASSIFICATION	0.004034514494976312	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999119452821337	WITHOUT_CLASSIFICATION	8.805471786632753E-5	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9970083472749616	WITHOUT_CLASSIFICATION	0.0029916527250384776	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998618144255902	WITHOUT_CLASSIFICATION	1.3818557440981583E-4	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9990603921369507	WITHOUT_CLASSIFICATION	9.396078630492749E-4	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999396361062001	WITHOUT_CLASSIFICATION	6.036389379989534E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9990520461218172	WITHOUT_CLASSIFICATION	9.479538781829151E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999796207607099	WITHOUT_CLASSIFICATION	2.037923929010096E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9993242466949975	WITHOUT_CLASSIFICATION	6.757533050025242E-4	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.997483454544443	WITHOUT_CLASSIFICATION	0.002516545455557035	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999094405298758	WITHOUT_CLASSIFICATION	9.055947012418659E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999094405298758	WITHOUT_CLASSIFICATION	9.055947012418659E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996056052119072	WITHOUT_CLASSIFICATION	3.9439478809275664E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9997667968675953	WITHOUT_CLASSIFICATION	2.3320313240473003E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9992529216641268	WITHOUT_CLASSIFICATION	7.470783358732372E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9986518931264072	WITHOUT_CLASSIFICATION	0.001348106873592672	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9996484644251729	WITHOUT_CLASSIFICATION	3.5153557482710935E-4	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9931166783282745	WITHOUT_CLASSIFICATION	0.006883321671725366	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9983005987862197	WITHOUT_CLASSIFICATION	0.0016994012137803122	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9981308482400302	WITHOUT_CLASSIFICATION	0.001869151759969777	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9994171543064482	WITHOUT_CLASSIFICATION	5.828456935519253E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995437206124252	WITHOUT_CLASSIFICATION	4.5627938757473416E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996691066608836	WITHOUT_CLASSIFICATION	3.3089333911639346E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.994886853795659	WITHOUT_CLASSIFICATION	0.0051131462043410465	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9994423225955167	WITHOUT_CLASSIFICATION	5.576774044833802E-4	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999941339606746	WITHOUT_CLASSIFICATION	5.866039325338556E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9998522084550683	WITHOUT_CLASSIFICATION	1.4779154493183613E-4	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988547606328307	WITHOUT_CLASSIFICATION	0.0011452393671693446	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9857519744430174	WITHOUT_CLASSIFICATION	0.014248025556982524	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998667231871385	WITHOUT_CLASSIFICATION	1.3327681286145503E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9985434895395237	WITHOUT_CLASSIFICATION	0.0014565104604762707	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999834825055379	WITHOUT_CLASSIFICATION	1.6517494462070814E-5	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9933637703687647	WITHOUT_CLASSIFICATION	0.006636229631235316	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9988329926681725	WITHOUT_CLASSIFICATION	0.001167007331827494	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999226372722497	WITHOUT_CLASSIFICATION	7.736272775022099E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.8905034677240864	WITHOUT_CLASSIFICATION	0.10949653227591362	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99988650822954	WITHOUT_CLASSIFICATION	1.1349177046016806E-4	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99988650822954	WITHOUT_CLASSIFICATION	1.1349177046016806E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.992624366892625	WITHOUT_CLASSIFICATION	0.007375633107375059	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9990521156692408	WITHOUT_CLASSIFICATION	9.478843307592763E-4	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9975161892138691	WITHOUT_CLASSIFICATION	0.002483810786130918	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9991554825288472	WITHOUT_CLASSIFICATION	8.445174711527554E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9996969713481754	WITHOUT_CLASSIFICATION	3.030286518246597E-4	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9988974988572668	WITHOUT_CLASSIFICATION	0.0011025011427332882	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9954808609467912	WITHOUT_CLASSIFICATION	0.004519139053208847	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998888074060597	WITHOUT_CLASSIFICATION	1.1119259394033023E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9955648848024843	WITHOUT_CLASSIFICATION	0.004435115197515696	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9162245199454778	WITHOUT_CLASSIFICATION	0.08377548005452212	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9986925317402651	WITHOUT_CLASSIFICATION	0.001307468259734887	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9987546897109911	WITHOUT_CLASSIFICATION	0.0012453102890088645	DEFECT
/*	DEFECT	0.9996722754911934	WITHOUT_CLASSIFICATION	3.277245088065632E-4	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9995118531909322	WITHOUT_CLASSIFICATION	4.881468090679088E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9926880081116428	WITHOUT_CLASSIFICATION	0.007311991888357249	DEFECT
// TODO : should this be an error?	DEFECT	0.9996298591380894	WITHOUT_CLASSIFICATION	3.70140861910533E-4	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9990229803906852	WITHOUT_CLASSIFICATION	9.770196093147746E-4	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.855870891054248	DEFECT	0.14412910894575198	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9839756941029971	WITHOUT_CLASSIFICATION	0.016024305897002957	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9839756941029971	WITHOUT_CLASSIFICATION	0.016024305897002957	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.5616638884281635	DEFECT	0.43833611157183633	WITHOUT_CLASSIFICATION
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9996984849376214	WITHOUT_CLASSIFICATION	3.015150623786201E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9970899871865332	WITHOUT_CLASSIFICATION	0.002910012813466737	DEFECT
// this call is side-effecty	DEFECT	0.9996746187899422	WITHOUT_CLASSIFICATION	3.253812100577608E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9717599466391084	WITHOUT_CLASSIFICATION	0.028240053360891616	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9994057026815125	WITHOUT_CLASSIFICATION	5.94297318487563E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9763377549567861	WITHOUT_CLASSIFICATION	0.023662245043213972	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9995073016349187	WITHOUT_CLASSIFICATION	4.926983650813234E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9985919141192272	WITHOUT_CLASSIFICATION	0.001408085880772782	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9978845172913515	WITHOUT_CLASSIFICATION	0.002115482708648553	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9654949398571238	WITHOUT_CLASSIFICATION	0.03450506014287627	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9987298870738601	WITHOUT_CLASSIFICATION	0.0012701129261399	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.766654799468457	WITHOUT_CLASSIFICATION	0.233345200531543	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9374599815931246	WITHOUT_CLASSIFICATION	0.06254001840687537	DEFECT
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.524549726205255	WITHOUT_CLASSIFICATION	0.47545027379474497	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9921362371241369	WITHOUT_CLASSIFICATION	0.007863762875863115	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9995407350856694	WITHOUT_CLASSIFICATION	4.592649143306576E-4	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9998020713075141	WITHOUT_CLASSIFICATION	1.9792869248597226E-4	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9975381161477094	WITHOUT_CLASSIFICATION	0.0024618838522905175	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9839756941029971	WITHOUT_CLASSIFICATION	0.016024305897002957	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.7650642505144656	DEFECT	0.23493574948553436	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.990257931957368	WITHOUT_CLASSIFICATION	0.009742068042632062	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9983371505280836	WITHOUT_CLASSIFICATION	0.0016628494719163993	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9989992808679043	WITHOUT_CLASSIFICATION	0.0010007191320956063	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9883663827085958	WITHOUT_CLASSIFICATION	0.011633617291404176	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9991256211541384	WITHOUT_CLASSIFICATION	8.743788458616952E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.7833182228208686	WITHOUT_CLASSIFICATION	0.2166817771791314	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9998125908014655	WITHOUT_CLASSIFICATION	1.8740919853464912E-4	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.999508973573941	WITHOUT_CLASSIFICATION	4.910264260590422E-4	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9413570247512297	WITHOUT_CLASSIFICATION	0.05864297524877021	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9994369699000604	WITHOUT_CLASSIFICATION	5.630300999397293E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9615005925421206	WITHOUT_CLASSIFICATION	0.038499407457879435	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.997583450683863	WITHOUT_CLASSIFICATION	0.002416549316137032	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.8051326739627249	WITHOUT_CLASSIFICATION	0.19486732603727505	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9987464156779996	WITHOUT_CLASSIFICATION	0.001253584322000359	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6902942231462239	WITHOUT_CLASSIFICATION	0.3097057768537761	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.996336307433011	DEFECT	0.003663692566988894	WITHOUT_CLASSIFICATION
