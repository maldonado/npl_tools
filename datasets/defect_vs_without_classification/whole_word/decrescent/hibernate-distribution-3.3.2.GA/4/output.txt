//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999584455468011	WITHOUT_CLASSIFICATION	4.1554453198946445E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9994073133276149	WITHOUT_CLASSIFICATION	5.926866723850965E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998238832041993	WITHOUT_CLASSIFICATION	1.7611679580063102E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999674200770466	WITHOUT_CLASSIFICATION	3.257992295339147E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999674200770466	WITHOUT_CLASSIFICATION	3.257992295339147E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999910272039171	WITHOUT_CLASSIFICATION	8.972796083007944E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997946366522729	WITHOUT_CLASSIFICATION	2.0536334772710088E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999495841986623	WITHOUT_CLASSIFICATION	5.0415801337811934E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999598535096379	WITHOUT_CLASSIFICATION	4.014649036210822E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999735767735016	WITHOUT_CLASSIFICATION	2.6423226498396114E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999735767735016	WITHOUT_CLASSIFICATION	2.6423226498396114E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996764117707861	WITHOUT_CLASSIFICATION	3.235882292138714E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998109679462778	WITHOUT_CLASSIFICATION	1.890320537223612E-4	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999629437936267	WITHOUT_CLASSIFICATION	3.7056206373216183E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999126154967324	WITHOUT_CLASSIFICATION	8.738450326764041E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998188354293341	WITHOUT_CLASSIFICATION	1.8116457066594588E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999525286959651	WITHOUT_CLASSIFICATION	4.747130403489835E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9995280875396887	WITHOUT_CLASSIFICATION	4.7191246031137707E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9879910030249608	WITHOUT_CLASSIFICATION	0.012008996975039186	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998992854170089	WITHOUT_CLASSIFICATION	1.0071458299115943E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999625723489022	WITHOUT_CLASSIFICATION	3.7427651097836636E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9997774137207333	WITHOUT_CLASSIFICATION	2.225862792667667E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9996235919937572	WITHOUT_CLASSIFICATION	3.7640800624287216E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998336801643632	WITHOUT_CLASSIFICATION	1.6631983563673277E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998953567494354	WITHOUT_CLASSIFICATION	1.0464325056467068E-4	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9743163922045442	WITHOUT_CLASSIFICATION	0.025683607795455667	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7616014193470434	WITHOUT_CLASSIFICATION	0.23839858065295655	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7616014193470434	WITHOUT_CLASSIFICATION	0.23839858065295655	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9994592044943438	WITHOUT_CLASSIFICATION	5.40795505656237E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999921075044377	WITHOUT_CLASSIFICATION	7.892495562307489E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999400614357685	WITHOUT_CLASSIFICATION	5.99385642315032E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998174351951226	WITHOUT_CLASSIFICATION	1.8256480487740712E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999523718715682	WITHOUT_CLASSIFICATION	4.762812843183431E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996960048911003	WITHOUT_CLASSIFICATION	3.039951088996336E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999196571858744	WITHOUT_CLASSIFICATION	8.034281412558625E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.6428091613083317	WITHOUT_CLASSIFICATION	0.3571908386916684	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9997797373861191	WITHOUT_CLASSIFICATION	2.202626138808219E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9997797373861191	WITHOUT_CLASSIFICATION	2.202626138808219E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998212061439145	WITHOUT_CLASSIFICATION	1.7879385608550994E-4	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.987257464845335	WITHOUT_CLASSIFICATION	0.012742535154665039	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9996355465032338	WITHOUT_CLASSIFICATION	3.6445349676624466E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997987985364567	WITHOUT_CLASSIFICATION	2.0120146354317376E-4	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999399923941339	WITHOUT_CLASSIFICATION	6.000760586612478E-5	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999995472880878	WITHOUT_CLASSIFICATION	4.527119122835708E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9941862313988711	WITHOUT_CLASSIFICATION	0.005813768601128819	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9996982296659305	WITHOUT_CLASSIFICATION	3.017703340695311E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998796826626927	WITHOUT_CLASSIFICATION	1.2031733730731155E-4	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998930062158331	WITHOUT_CLASSIFICATION	1.06993784166921E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999575257894683	WITHOUT_CLASSIFICATION	4.247421053177879E-5	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9998993440032498	WITHOUT_CLASSIFICATION	1.0065599675024677E-4	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999942013001237	WITHOUT_CLASSIFICATION	5.798699876263596E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992276724700526	WITHOUT_CLASSIFICATION	7.72327529947394E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9981933509045572	WITHOUT_CLASSIFICATION	0.0018066490954428817	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9980982062091941	WITHOUT_CLASSIFICATION	0.0019017937908059569	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999623220222063	WITHOUT_CLASSIFICATION	3.7677977793642514E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9992064795501273	WITHOUT_CLASSIFICATION	7.935204498726909E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997721722436941	WITHOUT_CLASSIFICATION	2.2782775630590053E-4	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998406530301732	WITHOUT_CLASSIFICATION	1.5934696982683588E-4	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.99998660460009	WITHOUT_CLASSIFICATION	1.339539990993021E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993078011861	WITHOUT_CLASSIFICATION	6.921988140241009E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999386396056072	WITHOUT_CLASSIFICATION	6.136039439279183E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996061314074577	WITHOUT_CLASSIFICATION	3.9386859254239104E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9969211539274841	WITHOUT_CLASSIFICATION	0.003078846072515871	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9996809852932392	WITHOUT_CLASSIFICATION	3.190147067608022E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999369830234899	WITHOUT_CLASSIFICATION	6.30169765101067E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999970484153695	WITHOUT_CLASSIFICATION	2.951584630531343E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9994731201801739	WITHOUT_CLASSIFICATION	5.268798198261926E-4	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999961122044175	WITHOUT_CLASSIFICATION	3.887795582507053E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999964431307388	WITHOUT_CLASSIFICATION	3.5568692612349423E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999694017979465	WITHOUT_CLASSIFICATION	3.059820205357507E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999487247528182	WITHOUT_CLASSIFICATION	5.127524718182271E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9991412986719301	WITHOUT_CLASSIFICATION	8.587013280698008E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999372408133018	WITHOUT_CLASSIFICATION	6.275918669817423E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999950208147643	WITHOUT_CLASSIFICATION	4.9791852356924094E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9991412986719301	WITHOUT_CLASSIFICATION	8.587013280698008E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9996597829901153	WITHOUT_CLASSIFICATION	3.4021700988477174E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9989049353581497	WITHOUT_CLASSIFICATION	0.001095064641850228	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999153405820566	WITHOUT_CLASSIFICATION	8.465941794342773E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999733060024619	WITHOUT_CLASSIFICATION	2.6693997537993723E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999786945531582	WITHOUT_CLASSIFICATION	2.1305446841798748E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999786945531582	WITHOUT_CLASSIFICATION	2.1305446841798748E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997797373861191	WITHOUT_CLASSIFICATION	2.202626138808219E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999990946719676	WITHOUT_CLASSIFICATION	9.05328032468584E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999678926163907	WITHOUT_CLASSIFICATION	3.210738360921831E-5	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999379390561168	WITHOUT_CLASSIFICATION	6.2060943883226E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999871053207431	WITHOUT_CLASSIFICATION	1.2894679256990607E-5	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999838754810067	WITHOUT_CLASSIFICATION	1.6124518993291845E-4	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.999991450789855	WITHOUT_CLASSIFICATION	8.549210145050216E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999334483806569	WITHOUT_CLASSIFICATION	6.655161934309044E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999063214937125	WITHOUT_CLASSIFICATION	9.367850628751043E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946957796637	WITHOUT_CLASSIFICATION	5.304220336265354E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946957796637	WITHOUT_CLASSIFICATION	5.304220336265354E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998278346888865	WITHOUT_CLASSIFICATION	1.7216531111347063E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999238466068701	WITHOUT_CLASSIFICATION	7.615339313000358E-5	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999835897319578	WITHOUT_CLASSIFICATION	1.64102680421998E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999946957796637	WITHOUT_CLASSIFICATION	5.304220336265354E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998278346888865	WITHOUT_CLASSIFICATION	1.7216531111347063E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998278346888865	WITHOUT_CLASSIFICATION	1.7216531111347063E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999868014293179	WITHOUT_CLASSIFICATION	1.319857068210635E-4	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999547424560742	WITHOUT_CLASSIFICATION	4.525754392575324E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999828751318138	WITHOUT_CLASSIFICATION	1.7124868186223045E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999965554630521	WITHOUT_CLASSIFICATION	3.444536947904254E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9989034436806102	WITHOUT_CLASSIFICATION	0.0010965563193897564	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9989034436806102	WITHOUT_CLASSIFICATION	0.0010965563193897564	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9997816950491074	WITHOUT_CLASSIFICATION	2.1830495089249677E-4	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993788236424057	WITHOUT_CLASSIFICATION	6.21176357594359E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999694762998317	WITHOUT_CLASSIFICATION	3.052370016832655E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998734967866794	WITHOUT_CLASSIFICATION	1.265032133207531E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998734967866794	WITHOUT_CLASSIFICATION	1.265032133207531E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9995365327026505	WITHOUT_CLASSIFICATION	4.634672973494547E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995131331798683	WITHOUT_CLASSIFICATION	4.868668201316851E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9982909816769031	WITHOUT_CLASSIFICATION	0.0017090183230968079	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999564070262115	WITHOUT_CLASSIFICATION	4.359297378849727E-5	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999775256429534	WITHOUT_CLASSIFICATION	2.2474357046629406E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999180213502049	WITHOUT_CLASSIFICATION	8.197864979508923E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998057048555319	WITHOUT_CLASSIFICATION	1.9429514446816135E-4	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999671581270959	WITHOUT_CLASSIFICATION	3.284187290399026E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9982909816769031	WITHOUT_CLASSIFICATION	0.0017090183230968079	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9998129527213309	WITHOUT_CLASSIFICATION	1.8704727866913077E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999665810710635	WITHOUT_CLASSIFICATION	3.3418928936541944E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999665810710635	WITHOUT_CLASSIFICATION	3.3418928936541944E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999979144968872	WITHOUT_CLASSIFICATION	2.085503112762445E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999836115839357	WITHOUT_CLASSIFICATION	1.6388416064395017E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996483213933961	WITHOUT_CLASSIFICATION	3.516786066038905E-4	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9990259590579583	WITHOUT_CLASSIFICATION	9.740409420417724E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999669445343835	WITHOUT_CLASSIFICATION	3.3055465616433696E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9998173284117193	WITHOUT_CLASSIFICATION	1.8267158828064173E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9998184174918631	WITHOUT_CLASSIFICATION	1.815825081369944E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999776309355425	WITHOUT_CLASSIFICATION	2.2369064457586054E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999944644407324	WITHOUT_CLASSIFICATION	5.535559267596888E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999944644407324	WITHOUT_CLASSIFICATION	5.535559267596888E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999584455468011	WITHOUT_CLASSIFICATION	4.1554453198946445E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999311086280428	WITHOUT_CLASSIFICATION	6.889137195720232E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999480453108021	WITHOUT_CLASSIFICATION	5.1954689197870104E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999942971979043	WITHOUT_CLASSIFICATION	5.7028020956887616E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999555293519725	WITHOUT_CLASSIFICATION	4.44706480273906E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9997845582909546	WITHOUT_CLASSIFICATION	2.1544170904536637E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9984080279552404	WITHOUT_CLASSIFICATION	0.0015919720447596182	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9997937737887188	WITHOUT_CLASSIFICATION	2.0622621128121824E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9995195501614949	WITHOUT_CLASSIFICATION	4.8044983850521376E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998627182787578	WITHOUT_CLASSIFICATION	1.3728172124221434E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9997845582909546	WITHOUT_CLASSIFICATION	2.1544170904536637E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9988005404632573	WITHOUT_CLASSIFICATION	0.001199459536742666	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9993447486294496	WITHOUT_CLASSIFICATION	6.552513705504982E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999605967444659	WITHOUT_CLASSIFICATION	3.9403255534069655E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999638590680179	WITHOUT_CLASSIFICATION	3.614093198220532E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9997076973761978	WITHOUT_CLASSIFICATION	2.923026238022063E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999674200770466	WITHOUT_CLASSIFICATION	3.257992295339147E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995686694929764	WITHOUT_CLASSIFICATION	4.313305070235718E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999448402213096	WITHOUT_CLASSIFICATION	5.5159778690447224E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997942487670005	WITHOUT_CLASSIFICATION	2.057512329994153E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999235178304435	WITHOUT_CLASSIFICATION	7.648216955648821E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998979881153174	WITHOUT_CLASSIFICATION	1.0201188468256257E-4	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998531578914766	WITHOUT_CLASSIFICATION	1.4684210852336694E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999102257766139	WITHOUT_CLASSIFICATION	8.977422338609216E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9993658989426152	WITHOUT_CLASSIFICATION	6.34101057384782E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9994993614769595	WITHOUT_CLASSIFICATION	5.006385230404799E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999774828875959	WITHOUT_CLASSIFICATION	2.2517112404142348E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9995195501614949	WITHOUT_CLASSIFICATION	4.8044983850521376E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998979881153174	WITHOUT_CLASSIFICATION	1.0201188468256257E-4	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999910272039171	WITHOUT_CLASSIFICATION	8.972796083007944E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999107064207872	WITHOUT_CLASSIFICATION	8.929357921290122E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999009530898323	WITHOUT_CLASSIFICATION	9.904691016776041E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999895679839069	WITHOUT_CLASSIFICATION	1.0432016093098005E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999097884271972	WITHOUT_CLASSIFICATION	9.021157280266639E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9979193340183125	WITHOUT_CLASSIFICATION	0.0020806659816875574	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999609813391457	WITHOUT_CLASSIFICATION	3.901866085431422E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998923694783813	WITHOUT_CLASSIFICATION	1.0763052161854369E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998923694783813	WITHOUT_CLASSIFICATION	1.0763052161854369E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999954054228695	WITHOUT_CLASSIFICATION	4.594577130600595E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999681429783486	WITHOUT_CLASSIFICATION	3.185702165154334E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998721964975618	WITHOUT_CLASSIFICATION	1.2780350243824708E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999487513523354	WITHOUT_CLASSIFICATION	5.1248647664455346E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999935287079394	WITHOUT_CLASSIFICATION	6.471292060559859E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999594477662485	WITHOUT_CLASSIFICATION	4.055223375152554E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999893334969107	WITHOUT_CLASSIFICATION	1.066650308935387E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997946366522729	WITHOUT_CLASSIFICATION	2.0536334772710088E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999619341517137	WITHOUT_CLASSIFICATION	3.8065848286303305E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999619341517137	WITHOUT_CLASSIFICATION	3.8065848286303305E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999619341517137	WITHOUT_CLASSIFICATION	3.8065848286303305E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999788622269898	WITHOUT_CLASSIFICATION	2.1137773010152102E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999619341517137	WITHOUT_CLASSIFICATION	3.8065848286303305E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998736014201408	WITHOUT_CLASSIFICATION	1.2639857985921797E-4	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9988088781373364	WITHOUT_CLASSIFICATION	0.0011911218626635663	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998696811404515	WITHOUT_CLASSIFICATION	1.3031885954856729E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9995195501614949	WITHOUT_CLASSIFICATION	4.8044983850521376E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998979881153174	WITHOUT_CLASSIFICATION	1.0201188468256257E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998979881153174	WITHOUT_CLASSIFICATION	1.0201188468256257E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999728096566698	WITHOUT_CLASSIFICATION	2.7190343330275202E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999533313225716	WITHOUT_CLASSIFICATION	4.666867742834361E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999012845100418	WITHOUT_CLASSIFICATION	9.87154899582194E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999598535096379	WITHOUT_CLASSIFICATION	4.014649036210822E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999598535096379	WITHOUT_CLASSIFICATION	4.014649036210822E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9993917886618094	WITHOUT_CLASSIFICATION	6.082113381905626E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999773186652646	WITHOUT_CLASSIFICATION	2.268133473538895E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9997071821269091	WITHOUT_CLASSIFICATION	2.9281787309089387E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9996509493918619	WITHOUT_CLASSIFICATION	3.4905060813810975E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9996374047929476	WITHOUT_CLASSIFICATION	3.6259520705236506E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9995309165361351	WITHOUT_CLASSIFICATION	4.690834638649636E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999735767735016	WITHOUT_CLASSIFICATION	2.6423226498396114E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9995298369237243	WITHOUT_CLASSIFICATION	4.7016307627576083E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9995298369237243	WITHOUT_CLASSIFICATION	4.7016307627576083E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996764117707861	WITHOUT_CLASSIFICATION	3.235882292138714E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996764117707861	WITHOUT_CLASSIFICATION	3.235882292138714E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999312596807137	WITHOUT_CLASSIFICATION	6.874031928630343E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999312596807137	WITHOUT_CLASSIFICATION	6.874031928630343E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997796878367564	WITHOUT_CLASSIFICATION	2.203121632436286E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997796878367564	WITHOUT_CLASSIFICATION	2.203121632436286E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999598535096379	WITHOUT_CLASSIFICATION	4.014649036210822E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999735767735016	WITHOUT_CLASSIFICATION	2.6423226498396114E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9995298369237243	WITHOUT_CLASSIFICATION	4.7016307627576083E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9995298369237243	WITHOUT_CLASSIFICATION	4.7016307627576083E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9996764117707861	WITHOUT_CLASSIFICATION	3.235882292138714E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999312596807137	WITHOUT_CLASSIFICATION	6.874031928630343E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999312596807137	WITHOUT_CLASSIFICATION	6.874031928630343E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997796878367564	WITHOUT_CLASSIFICATION	2.203121632436286E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999690639892936	WITHOUT_CLASSIFICATION	3.093601070642654E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997853771230956	WITHOUT_CLASSIFICATION	2.146228769044521E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999109378233267	WITHOUT_CLASSIFICATION	8.906217667325737E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999834453271995	WITHOUT_CLASSIFICATION	1.655467280047115E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999313043132688	WITHOUT_CLASSIFICATION	6.86956867311487E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9995206595562324	WITHOUT_CLASSIFICATION	4.793404437676135E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9841321928701581	WITHOUT_CLASSIFICATION	0.015867807129842048	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9388157147614956	WITHOUT_CLASSIFICATION	0.06118428523850431	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997989205927136	WITHOUT_CLASSIFICATION	2.0107940728645833E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999063091259028	WITHOUT_CLASSIFICATION	9.369087409719784E-5	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999807252872404	WITHOUT_CLASSIFICATION	1.927471275960275E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998371583865469	WITHOUT_CLASSIFICATION	1.6284161345314722E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997797373861191	WITHOUT_CLASSIFICATION	2.202626138808219E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9995206595562324	WITHOUT_CLASSIFICATION	4.793404437676135E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9991001637281952	WITHOUT_CLASSIFICATION	8.998362718047596E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999278404685844	WITHOUT_CLASSIFICATION	7.215953141558389E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999278404685844	WITHOUT_CLASSIFICATION	7.215953141558389E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998390809530504	WITHOUT_CLASSIFICATION	1.6091904694963592E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999561612488704	WITHOUT_CLASSIFICATION	4.38387511294723E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9986127249796474	WITHOUT_CLASSIFICATION	0.0013872750203526817	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990179127145055	WITHOUT_CLASSIFICATION	9.820872854946192E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990179127145055	WITHOUT_CLASSIFICATION	9.820872854946192E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998188354293341	WITHOUT_CLASSIFICATION	1.8116457066594588E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994406077935415	WITHOUT_CLASSIFICATION	5.593922064584378E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994406077935415	WITHOUT_CLASSIFICATION	5.593922064584378E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999721489473486	WITHOUT_CLASSIFICATION	2.785105265139997E-4	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9998598514913344	WITHOUT_CLASSIFICATION	1.401485086656638E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999625723489022	WITHOUT_CLASSIFICATION	3.7427651097836636E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9995871384883972	WITHOUT_CLASSIFICATION	4.128615116028733E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999525286959651	WITHOUT_CLASSIFICATION	4.747130403489835E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8173368751751615	WITHOUT_CLASSIFICATION	0.18266312482483846	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9995246925526597	WITHOUT_CLASSIFICATION	4.7530744734021626E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999951056635146	WITHOUT_CLASSIFICATION	4.8943364853965754E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999735077740258	WITHOUT_CLASSIFICATION	2.6492225974254692E-5	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999582668344495	WITHOUT_CLASSIFICATION	4.173316555042831E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999879040012252	WITHOUT_CLASSIFICATION	1.2095998774747573E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998953567494354	WITHOUT_CLASSIFICATION	1.0464325056467068E-4	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975111946153	WITHOUT_CLASSIFICATION	2.4888053847376444E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999112780747926	WITHOUT_CLASSIFICATION	8.872192520736838E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9995201472604459	WITHOUT_CLASSIFICATION	4.7985273955415084E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998982327509741	WITHOUT_CLASSIFICATION	1.0176724902581383E-4	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999506744072747	WITHOUT_CLASSIFICATION	4.932559272532532E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999413046629813	WITHOUT_CLASSIFICATION	5.8695337018707605E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999625723489022	WITHOUT_CLASSIFICATION	3.7427651097836636E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9998291967024837	WITHOUT_CLASSIFICATION	1.7080329751636858E-4	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999138501021506	WITHOUT_CLASSIFICATION	8.614989784937284E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9995681662916582	WITHOUT_CLASSIFICATION	4.3183370834173695E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999525286959651	WITHOUT_CLASSIFICATION	4.747130403489835E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999413046629813	WITHOUT_CLASSIFICATION	5.8695337018707605E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9998291967024837	WITHOUT_CLASSIFICATION	1.7080329751636858E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9995681662916582	WITHOUT_CLASSIFICATION	4.3183370834173695E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999168332756024	WITHOUT_CLASSIFICATION	8.316672439760325E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999168332756024	WITHOUT_CLASSIFICATION	8.316672439760325E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999212475072241	WITHOUT_CLASSIFICATION	7.875249277591282E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9997847582206629	WITHOUT_CLASSIFICATION	2.1524177933717723E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999911738292295	WITHOUT_CLASSIFICATION	8.826170770494211E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999846849969936	WITHOUT_CLASSIFICATION	1.5315003006379686E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999368683095469	WITHOUT_CLASSIFICATION	6.313169045309764E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999979778150931	WITHOUT_CLASSIFICATION	2.022184906907716E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9991702405507623	WITHOUT_CLASSIFICATION	8.297594492376351E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9998224592049187	WITHOUT_CLASSIFICATION	1.775407950813051E-4	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999979778150931	WITHOUT_CLASSIFICATION	2.022184906907716E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9996235919937572	WITHOUT_CLASSIFICATION	3.7640800624287216E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997639406330239	WITHOUT_CLASSIFICATION	2.360593669762402E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999413046629813	WITHOUT_CLASSIFICATION	5.8695337018707605E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9997350473356726	WITHOUT_CLASSIFICATION	2.649526643272711E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9998851513245357	WITHOUT_CLASSIFICATION	1.148486754643687E-4	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9985593792836568	WITHOUT_CLASSIFICATION	0.0014406207163431956	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999346094456131	WITHOUT_CLASSIFICATION	6.539055438691524E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998814347677053	WITHOUT_CLASSIFICATION	1.1856523229469575E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999897857884467	WITHOUT_CLASSIFICATION	1.0214211553285023E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9997081230062108	WITHOUT_CLASSIFICATION	2.918769937892217E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998341466927195	WITHOUT_CLASSIFICATION	1.658533072804709E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9998982620911451	WITHOUT_CLASSIFICATION	1.0173790885494426E-4	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998993479254201	WITHOUT_CLASSIFICATION	1.006520745798259E-4	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9994854823664214	WITHOUT_CLASSIFICATION	5.145176335785614E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998953567494354	WITHOUT_CLASSIFICATION	1.0464325056467068E-4	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999544814007174	WITHOUT_CLASSIFICATION	4.551859928269688E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.99963400830033	WITHOUT_CLASSIFICATION	3.659916996700068E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999529459892803	WITHOUT_CLASSIFICATION	4.7054010719600846E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999322848417134	WITHOUT_CLASSIFICATION	6.771515828656879E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999322848417134	WITHOUT_CLASSIFICATION	6.771515828656879E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999090584629364	WITHOUT_CLASSIFICATION	9.094153706361757E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999995191479518	WITHOUT_CLASSIFICATION	4.808520482071378E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999595413792441	WITHOUT_CLASSIFICATION	4.045862075585111E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998056778470036	WITHOUT_CLASSIFICATION	1.9432215299630527E-4	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999027299764144	WITHOUT_CLASSIFICATION	9.72700235856504E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9996741388430679	WITHOUT_CLASSIFICATION	3.258611569320677E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9996741388430679	WITHOUT_CLASSIFICATION	3.258611569320677E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998553854260778	WITHOUT_CLASSIFICATION	1.4461457392226772E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998385256714656	WITHOUT_CLASSIFICATION	1.614743285344144E-4	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998497432158793	WITHOUT_CLASSIFICATION	1.5025678412064806E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999382102508828	WITHOUT_CLASSIFICATION	6.178974911711227E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998649281331387	WITHOUT_CLASSIFICATION	1.3507186686143532E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998433259738534	WITHOUT_CLASSIFICATION	1.566740261465726E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998103852855031	WITHOUT_CLASSIFICATION	1.8961471449681954E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998550281547839	WITHOUT_CLASSIFICATION	1.4497184521611092E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999036974523692	WITHOUT_CLASSIFICATION	9.630254763078612E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998815274157676	WITHOUT_CLASSIFICATION	1.1847258423235562E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998581824678385	WITHOUT_CLASSIFICATION	1.4181753216145368E-4	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9989768687426829	WITHOUT_CLASSIFICATION	0.001023131257317156	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9977242209050535	WITHOUT_CLASSIFICATION	0.0022757790949465427	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986490523462	WITHOUT_CLASSIFICATION	1.3509476537995767E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998458100589012	WITHOUT_CLASSIFICATION	1.5418994109881265E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9976641405934644	WITHOUT_CLASSIFICATION	0.0023358594065356173	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9997486753500981	WITHOUT_CLASSIFICATION	2.51324649901925E-4	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999764104800638	WITHOUT_CLASSIFICATION	2.3589519936280567E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9978200212000389	WITHOUT_CLASSIFICATION	0.0021799787999610357	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997641309781601	WITHOUT_CLASSIFICATION	2.358690218399921E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997641309781601	WITHOUT_CLASSIFICATION	2.358690218399921E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9997768641344071	WITHOUT_CLASSIFICATION	2.2313586559279453E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9997768641344071	WITHOUT_CLASSIFICATION	2.2313586559279453E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998056778470036	WITHOUT_CLASSIFICATION	1.9432215299630527E-4	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9969901976686073	WITHOUT_CLASSIFICATION	0.003009802331392824	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9962717548804555	WITHOUT_CLASSIFICATION	0.003728245119544566	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996561806641738	WITHOUT_CLASSIFICATION	3.4381933582615306E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9962717548804555	WITHOUT_CLASSIFICATION	0.003728245119544566	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996561806641738	WITHOUT_CLASSIFICATION	3.4381933582615306E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995611080581209	WITHOUT_CLASSIFICATION	4.3889194187912104E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999316027092671	WITHOUT_CLASSIFICATION	6.839729073290386E-4	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999056699096017	WITHOUT_CLASSIFICATION	9.433009039825125E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.999989952811555	WITHOUT_CLASSIFICATION	1.0047188444883183E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9992705423761036	WITHOUT_CLASSIFICATION	7.294576238964539E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998422443533164	WITHOUT_CLASSIFICATION	1.5775564668372776E-4	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998638706005278	WITHOUT_CLASSIFICATION	1.361293994722452E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9996657886309037	WITHOUT_CLASSIFICATION	3.342113690963011E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9989715527627833	WITHOUT_CLASSIFICATION	0.0010284472372166314	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999978378982759	WITHOUT_CLASSIFICATION	2.1621017241071216E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999403774971343	WITHOUT_CLASSIFICATION	5.96225028656306E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9985489396971806	WITHOUT_CLASSIFICATION	0.0014510603028193637	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999885551151934	WITHOUT_CLASSIFICATION	1.144488480658608E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9997510959276321	WITHOUT_CLASSIFICATION	2.489040723678691E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9997510959276321	WITHOUT_CLASSIFICATION	2.489040723678691E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982592387412825	WITHOUT_CLASSIFICATION	0.0017407612587174417	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982592387412825	WITHOUT_CLASSIFICATION	0.0017407612587174417	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.997365750194848	WITHOUT_CLASSIFICATION	0.002634249805152065	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995611080581209	WITHOUT_CLASSIFICATION	4.3889194187912104E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998100971370265	WITHOUT_CLASSIFICATION	1.8990286297342944E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998619493572133	WITHOUT_CLASSIFICATION	1.3805064278669805E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999356453732908	WITHOUT_CLASSIFICATION	6.435462670919869E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994623986710282	WITHOUT_CLASSIFICATION	5.376013289718802E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9880839598987289	WITHOUT_CLASSIFICATION	0.01191604010127111	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995611080581209	WITHOUT_CLASSIFICATION	4.3889194187912104E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994623986710282	WITHOUT_CLASSIFICATION	5.376013289718802E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9880839598987289	WITHOUT_CLASSIFICATION	0.01191604010127111	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998195502787591	WITHOUT_CLASSIFICATION	1.8044972124090113E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999070424197086	WITHOUT_CLASSIFICATION	9.295758029137415E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999098730726377	WITHOUT_CLASSIFICATION	9.012692736228703E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995611080581209	WITHOUT_CLASSIFICATION	4.3889194187912104E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995611080581209	WITHOUT_CLASSIFICATION	4.3889194187912104E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9998861735246156	WITHOUT_CLASSIFICATION	1.1382647538445513E-4	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9998755397099648	WITHOUT_CLASSIFICATION	1.2446029003521555E-4	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9998771554046546	WITHOUT_CLASSIFICATION	1.2284459534548582E-4	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999460393499827	WITHOUT_CLASSIFICATION	5.3960650017359855E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999233174904324	WITHOUT_CLASSIFICATION	7.668250956756776E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999733300477055	WITHOUT_CLASSIFICATION	2.6669952294496953E-5	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9998024470350033	WITHOUT_CLASSIFICATION	1.97552964996754E-4	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999696065042109	WITHOUT_CLASSIFICATION	3.0393495789259052E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997555813032849	WITHOUT_CLASSIFICATION	2.4441869671506324E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9998770187205946	WITHOUT_CLASSIFICATION	1.229812794052913E-4	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999098085393193	WITHOUT_CLASSIFICATION	9.019146068069402E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999944911756598	WITHOUT_CLASSIFICATION	5.508824340194426E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999810112095237	WITHOUT_CLASSIFICATION	1.898879047638669E-5	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998716688943273	WITHOUT_CLASSIFICATION	1.2833110567264216E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997845170083561	WITHOUT_CLASSIFICATION	2.1548299164378257E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9996602089385465	WITHOUT_CLASSIFICATION	3.3979106145342935E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998174351951226	WITHOUT_CLASSIFICATION	1.8256480487740712E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998997785008201	WITHOUT_CLASSIFICATION	1.0022149917985937E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.999702875915284	WITHOUT_CLASSIFICATION	2.971240847160784E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996561806641738	WITHOUT_CLASSIFICATION	3.4381933582615306E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999484173411861	WITHOUT_CLASSIFICATION	5.1582658813880954E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998174351951226	WITHOUT_CLASSIFICATION	1.8256480487740712E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.8204911724261784	WITHOUT_CLASSIFICATION	0.17950882757382156	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999955524980824	WITHOUT_CLASSIFICATION	4.4475019175973575E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.996321002119888	WITHOUT_CLASSIFICATION	0.003678997880112065	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999608324427595	WITHOUT_CLASSIFICATION	3.9167557240491576E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999335386891695	WITHOUT_CLASSIFICATION	6.646131083045878E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9967274545283664	WITHOUT_CLASSIFICATION	0.0032725454716335226	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999829367072893	WITHOUT_CLASSIFICATION	1.7063292710690334E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999914969470622	WITHOUT_CLASSIFICATION	8.5030529378003E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998716003922031	WITHOUT_CLASSIFICATION	1.2839960779690595E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9978409694434834	WITHOUT_CLASSIFICATION	0.002159030556516622	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997701686901417	WITHOUT_CLASSIFICATION	2.2983130985833485E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999817251165662	WITHOUT_CLASSIFICATION	1.827488343379683E-5	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998936725684774	WITHOUT_CLASSIFICATION	1.0632743152267992E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9989017257916367	WITHOUT_CLASSIFICATION	0.0010982742083631952	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997285387526413	WITHOUT_CLASSIFICATION	2.714612473586488E-4	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9985130337446338	WITHOUT_CLASSIFICATION	0.0014869662553661216	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998852604383195	WITHOUT_CLASSIFICATION	1.147395616806118E-4	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9998104551311537	WITHOUT_CLASSIFICATION	1.8954486884622905E-4	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9990360177683653	WITHOUT_CLASSIFICATION	9.639822316348221E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999834066943701	WITHOUT_CLASSIFICATION	1.659330562977805E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998292458101387	WITHOUT_CLASSIFICATION	1.7075418986141753E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998561441545359	WITHOUT_CLASSIFICATION	1.438558454641493E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639889097689	WITHOUT_CLASSIFICATION	1.3601109023110653E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364165102542	WITHOUT_CLASSIFICATION	1.6358348974576081E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998580138987382	WITHOUT_CLASSIFICATION	1.4198610126179312E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999967730907845	WITHOUT_CLASSIFICATION	3.2269092156062266E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999967211402416	WITHOUT_CLASSIFICATION	3.2788597583167005E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657341182053	WITHOUT_CLASSIFICATION	3.426588179465037E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776902368724	WITHOUT_CLASSIFICATION	2.2309763127463225E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998110369305526	WITHOUT_CLASSIFICATION	1.8896306944751312E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438046948681	WITHOUT_CLASSIFICATION	5.619530513177116E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998472131882865	WITHOUT_CLASSIFICATION	1.5278681171348004E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997969795931987	WITHOUT_CLASSIFICATION	2.0302040680131458E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999821609804742	WITHOUT_CLASSIFICATION	1.7839019525796112E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997696169339427	WITHOUT_CLASSIFICATION	2.30383066057219E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9995728054075035	WITHOUT_CLASSIFICATION	4.2719459249652704E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999513698290569	WITHOUT_CLASSIFICATION	4.8630170943100455E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999843201405278	WITHOUT_CLASSIFICATION	1.5679859472182826E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999028581705484	WITHOUT_CLASSIFICATION	9.714182945174777E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9997768461323842	WITHOUT_CLASSIFICATION	2.2315386761589476E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997605427019999	WITHOUT_CLASSIFICATION	2.3945729800011053E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998195502787591	WITHOUT_CLASSIFICATION	1.8044972124090113E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998994738453795	WITHOUT_CLASSIFICATION	1.0052615462055787E-4	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999011946812808	WITHOUT_CLASSIFICATION	9.880531871929394E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999499536750369	WITHOUT_CLASSIFICATION	5.004632496306375E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999534744243367	WITHOUT_CLASSIFICATION	4.652557566337917E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998987745173461	WITHOUT_CLASSIFICATION	1.0122548265382563E-4	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998869170655098	WITHOUT_CLASSIFICATION	1.1308293449023725E-4	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9989287021615856	WITHOUT_CLASSIFICATION	0.0010712978384144257	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9989885183126164	WITHOUT_CLASSIFICATION	0.0010114816873836037	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999014580871329	WITHOUT_CLASSIFICATION	9.85419128671046E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998125218311265	WITHOUT_CLASSIFICATION	1.8747816887341003E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998010265637876	WITHOUT_CLASSIFICATION	1.9897343621251435E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997780101226865	WITHOUT_CLASSIFICATION	2.2198987731356733E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9989429840821699	WITHOUT_CLASSIFICATION	0.0010570159178302156	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999697868295745	WITHOUT_CLASSIFICATION	3.021317042550936E-5	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999366264223315	WITHOUT_CLASSIFICATION	6.337357766853832E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9923663622681251	WITHOUT_CLASSIFICATION	0.007633637731874886	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999554031914016	WITHOUT_CLASSIFICATION	4.45968085983887E-5	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998280800716239	WITHOUT_CLASSIFICATION	1.7191992837612064E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999716674239074	WITHOUT_CLASSIFICATION	2.83325760926343E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998504408662382	WITHOUT_CLASSIFICATION	1.495591337618617E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999702095582746	WITHOUT_CLASSIFICATION	2.9790441725346694E-5	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9991994448849433	WITHOUT_CLASSIFICATION	8.00555115056672E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9994501012173072	WITHOUT_CLASSIFICATION	5.498987826928172E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9996465493632074	WITHOUT_CLASSIFICATION	3.5345063679263896E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998679545737489	WITHOUT_CLASSIFICATION	1.32045426251145E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999028581705484	WITHOUT_CLASSIFICATION	9.714182945174777E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999544756064247	WITHOUT_CLASSIFICATION	4.5524393575198284E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999433049697013	WITHOUT_CLASSIFICATION	5.6695030298669733E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998934807249742	WITHOUT_CLASSIFICATION	1.0651927502581304E-4	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999513698290569	WITHOUT_CLASSIFICATION	4.8630170943100455E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999789388907062	WITHOUT_CLASSIFICATION	2.1061109293796194E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999333743909787	WITHOUT_CLASSIFICATION	6.662560902132181E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996685832853471	WITHOUT_CLASSIFICATION	3.314167146527575E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9990260998730567	WITHOUT_CLASSIFICATION	9.739001269431862E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995451635271335	WITHOUT_CLASSIFICATION	4.548364728665108E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997631708138252	WITHOUT_CLASSIFICATION	2.3682918617493292E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998170313359257	WITHOUT_CLASSIFICATION	1.8296866407424304E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995450319190885	WITHOUT_CLASSIFICATION	4.5496808091140663E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998764307038495	WITHOUT_CLASSIFICATION	1.235692961505793E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991534786001852	WITHOUT_CLASSIFICATION	8.465213998147069E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996394079770599	WITHOUT_CLASSIFICATION	3.6059202294017766E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999723345926207	WITHOUT_CLASSIFICATION	2.766540737932574E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998195502787591	WITHOUT_CLASSIFICATION	1.8044972124090113E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999514397981603	WITHOUT_CLASSIFICATION	4.856020183968215E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998799581162494	WITHOUT_CLASSIFICATION	1.2004188375055211E-4	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9997599827861756	WITHOUT_CLASSIFICATION	2.4001721382444424E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999495343041533	WITHOUT_CLASSIFICATION	5.0465695846721835E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9996380489391616	WITHOUT_CLASSIFICATION	3.619510608383696E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9993595636935283	WITHOUT_CLASSIFICATION	6.404363064716678E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998052641693758	WITHOUT_CLASSIFICATION	1.9473583062421348E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999878371398112	WITHOUT_CLASSIFICATION	1.2162860188803932E-4	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999700424888456	WITHOUT_CLASSIFICATION	2.9957511154488942E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9879910030249608	WITHOUT_CLASSIFICATION	0.012008996975039186	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997900601657845	WITHOUT_CLASSIFICATION	2.0993983421542831E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998725929656926	WITHOUT_CLASSIFICATION	1.2740703430733972E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999513698290569	WITHOUT_CLASSIFICATION	4.8630170943100455E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999028581705484	WITHOUT_CLASSIFICATION	9.714182945174777E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99129716772968	WITHOUT_CLASSIFICATION	0.008702832270319998	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999920833272832	WITHOUT_CLASSIFICATION	7.916672716901471E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9687144420589121	WITHOUT_CLASSIFICATION	0.031285557941087935	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999028581705484	WITHOUT_CLASSIFICATION	9.714182945174777E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999440454272949	WITHOUT_CLASSIFICATION	5.5954572705168154E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999495343041533	WITHOUT_CLASSIFICATION	5.0465695846721835E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9960079437029683	WITHOUT_CLASSIFICATION	0.003992056297031665	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9984518009445498	WITHOUT_CLASSIFICATION	0.0015481990554502322	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999842675526371	WITHOUT_CLASSIFICATION	1.5732447362957935E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997631708138252	WITHOUT_CLASSIFICATION	2.3682918617493292E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998170313359257	WITHOUT_CLASSIFICATION	1.8296866407424304E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995450319190885	WITHOUT_CLASSIFICATION	4.5496808091140663E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999167329459241	WITHOUT_CLASSIFICATION	8.326705407587079E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9998240172067248	WITHOUT_CLASSIFICATION	1.7598279327523934E-4	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996844662591621	WITHOUT_CLASSIFICATION	3.155337408379046E-4	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9992814781657803	WITHOUT_CLASSIFICATION	7.185218342196492E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9948590073835835	WITHOUT_CLASSIFICATION	0.005140992616416559	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999028581705484	WITHOUT_CLASSIFICATION	9.714182945174777E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998764307038495	WITHOUT_CLASSIFICATION	1.235692961505793E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991534786001852	WITHOUT_CLASSIFICATION	8.465213998147069E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808024640785	WITHOUT_CLASSIFICATION	1.9197535921530467E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998546643250917	WITHOUT_CLASSIFICATION	1.4533567490818873E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998927481284089	WITHOUT_CLASSIFICATION	1.0725187159099682E-4	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997270527286343	WITHOUT_CLASSIFICATION	2.729472713657851E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9990405463423079	WITHOUT_CLASSIFICATION	9.594536576921639E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.99797790942187	WITHOUT_CLASSIFICATION	0.002022090578129895	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997680854502596	WITHOUT_CLASSIFICATION	2.3191454974041075E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999264161253055	WITHOUT_CLASSIFICATION	7.358387469445272E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999530849097261	WITHOUT_CLASSIFICATION	4.691509027380658E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998580138987382	WITHOUT_CLASSIFICATION	1.4198610126179312E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776902368724	WITHOUT_CLASSIFICATION	2.2309763127463225E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999846493996679	WITHOUT_CLASSIFICATION	1.5350600332095657E-5	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999006792571228	WITHOUT_CLASSIFICATION	9.932074287721408E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119304312992	WITHOUT_CLASSIFICATION	8.806956870083076E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9887588908829362	WITHOUT_CLASSIFICATION	0.011241109117063823	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998110369305526	WITHOUT_CLASSIFICATION	1.8896306944751312E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999846316002531	WITHOUT_CLASSIFICATION	1.536839974689245E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999702095582746	WITHOUT_CLASSIFICATION	2.9790441725346694E-5	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9978385655626066	WITHOUT_CLASSIFICATION	0.0021614344373934234	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9995593952075164	WITHOUT_CLASSIFICATION	4.4060479248363317E-4	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998405470273205	WITHOUT_CLASSIFICATION	1.5945297267951493E-4	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999323032733551	WITHOUT_CLASSIFICATION	6.769672664488216E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999862219878456	WITHOUT_CLASSIFICATION	1.377801215438598E-5	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998180048736602	WITHOUT_CLASSIFICATION	1.8199512633963324E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999615482639832	WITHOUT_CLASSIFICATION	3.8451736016809486E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999829367072893	WITHOUT_CLASSIFICATION	1.7063292710690334E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998715920409493	WITHOUT_CLASSIFICATION	1.2840795905062814E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9997546498000653	WITHOUT_CLASSIFICATION	2.453501999347182E-4	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999219348463628	WITHOUT_CLASSIFICATION	7.806515363711527E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999937561798914	WITHOUT_CLASSIFICATION	6.243820108602652E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999402081240585	WITHOUT_CLASSIFICATION	5.979187594141306E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998615438141732	WITHOUT_CLASSIFICATION	1.3845618582676258E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998610995405571	WITHOUT_CLASSIFICATION	1.389004594428721E-4	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998134069269556	WITHOUT_CLASSIFICATION	1.8659307304424677E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995778567944366	WITHOUT_CLASSIFICATION	4.2214320556349216E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9993159978202877	WITHOUT_CLASSIFICATION	6.840021797121873E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988835556440281	WITHOUT_CLASSIFICATION	0.0011164443559719835	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9848689784369483	WITHOUT_CLASSIFICATION	0.015131021563051584	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998471832197131	WITHOUT_CLASSIFICATION	0.001528167802869021	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998988130318529	WITHOUT_CLASSIFICATION	0.00101186968147113	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9989826036682986	WITHOUT_CLASSIFICATION	0.0010173963317013628	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998274990560443	WITHOUT_CLASSIFICATION	1.7250094395572946E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998471832197131	WITHOUT_CLASSIFICATION	0.001528167802869021	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9992434436520827	WITHOUT_CLASSIFICATION	7.565563479173219E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993720168979031	WITHOUT_CLASSIFICATION	6.279831020969787E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998973382385762	WITHOUT_CLASSIFICATION	1.0266176142385681E-4	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998487917032364	WITHOUT_CLASSIFICATION	1.5120829676372528E-4	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9949772128827739	WITHOUT_CLASSIFICATION	0.00502278711722619	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999663341855907	WITHOUT_CLASSIFICATION	3.3665814409324955E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999012974367664	WITHOUT_CLASSIFICATION	9.870256323363867E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999334646435197	WITHOUT_CLASSIFICATION	6.653535648024E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999334646435197	WITHOUT_CLASSIFICATION	6.653535648024E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999506126085129	WITHOUT_CLASSIFICATION	4.938739148708822E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997546555965634	WITHOUT_CLASSIFICATION	2.4534440343667235E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997495870125345	WITHOUT_CLASSIFICATION	2.504129874655232E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998871983700561	WITHOUT_CLASSIFICATION	1.1280162994392993E-4	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9975763852145844	WITHOUT_CLASSIFICATION	0.002423614785415585	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999449149820487	WITHOUT_CLASSIFICATION	5.508501795114617E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999953061355128	WITHOUT_CLASSIFICATION	4.693864487230709E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999663577634917	WITHOUT_CLASSIFICATION	3.3642236508310685E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997969971642409	WITHOUT_CLASSIFICATION	2.030028357591601E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999997440630823	WITHOUT_CLASSIFICATION	2.5593691769451405E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999961371865273	WITHOUT_CLASSIFICATION	3.862813472696804E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999389418477438	WITHOUT_CLASSIFICATION	6.105815225619794E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999897285660923	WITHOUT_CLASSIFICATION	1.0271433907691018E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9990497116031019	WITHOUT_CLASSIFICATION	9.502883968982007E-4	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998853857165141	WITHOUT_CLASSIFICATION	1.146142834858322E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9991251185582797	WITHOUT_CLASSIFICATION	8.748814417202661E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9995867406437575	WITHOUT_CLASSIFICATION	4.132593562423948E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9985322086613521	WITHOUT_CLASSIFICATION	0.0014677913386479872	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999822680124153	WITHOUT_CLASSIFICATION	1.7731987584754406E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998086928082893	WITHOUT_CLASSIFICATION	1.9130719171059636E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998886155001339	WITHOUT_CLASSIFICATION	1.1138449986608318E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998099533075506	WITHOUT_CLASSIFICATION	1.9004669244933298E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999876445907221	WITHOUT_CLASSIFICATION	1.2355409277831972E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999377159369637	WITHOUT_CLASSIFICATION	6.228406303629981E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999820185939853	WITHOUT_CLASSIFICATION	1.798140601468977E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9992046989977035	WITHOUT_CLASSIFICATION	7.953010022965329E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9983678870049633	WITHOUT_CLASSIFICATION	0.001632112995036686	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9993494041366637	WITHOUT_CLASSIFICATION	6.505958633362907E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9963308166758251	WITHOUT_CLASSIFICATION	0.003669183324174751	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9989833265474632	WITHOUT_CLASSIFICATION	0.001016673452536696	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998696348819943	WITHOUT_CLASSIFICATION	1.3036511800575712E-4	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999137453726998	WITHOUT_CLASSIFICATION	8.625462730021223E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998635764410453	WITHOUT_CLASSIFICATION	1.3642355895468065E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999519946057139	WITHOUT_CLASSIFICATION	4.8005394286001274E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999111615916255	WITHOUT_CLASSIFICATION	8.883840837451169E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9998996537601005	WITHOUT_CLASSIFICATION	1.0034623989940562E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9966758819620586	WITHOUT_CLASSIFICATION	0.003324118037941472	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999589079570129	WITHOUT_CLASSIFICATION	4.1092042987111306E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9735874330554043	WITHOUT_CLASSIFICATION	0.026412566944595737	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999193900608447	WITHOUT_CLASSIFICATION	8.060993915527026E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998264303071239	WITHOUT_CLASSIFICATION	1.735696928759851E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998195502787591	WITHOUT_CLASSIFICATION	1.8044972124090113E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998195502787591	WITHOUT_CLASSIFICATION	1.8044972124090113E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9996793545016375	WITHOUT_CLASSIFICATION	3.206454983624487E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998867225653206	WITHOUT_CLASSIFICATION	1.1327743467942129E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9997750593750627	WITHOUT_CLASSIFICATION	2.2494062493717557E-4	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999799468618339	WITHOUT_CLASSIFICATION	2.005313816614679E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998485943164666	WITHOUT_CLASSIFICATION	1.5140568353340129E-4	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9990241636562331	WITHOUT_CLASSIFICATION	9.758363437668945E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995344944412592	WITHOUT_CLASSIFICATION	4.655055587408108E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999868231184728	WITHOUT_CLASSIFICATION	1.3176881527327936E-5	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999973553750519	WITHOUT_CLASSIFICATION	2.6446249481943605E-6	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998724976438558	WITHOUT_CLASSIFICATION	1.2750235614416883E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996939353960936	WITHOUT_CLASSIFICATION	3.0606460390642686E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999962067532224	WITHOUT_CLASSIFICATION	3.7932467775993235E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995211182284527	WITHOUT_CLASSIFICATION	4.788817715473004E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997250341211521	WITHOUT_CLASSIFICATION	2.749658788478448E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997939469269346	WITHOUT_CLASSIFICATION	2.0605307306558054E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999699881008518	WITHOUT_CLASSIFICATION	3.0011899148199375E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999042416337689	WITHOUT_CLASSIFICATION	9.57583662310841E-5	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9988762142827666	WITHOUT_CLASSIFICATION	0.0011237857172333027	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9997917093554635	WITHOUT_CLASSIFICATION	2.082906445364957E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997402612871351	WITHOUT_CLASSIFICATION	2.597387128649235E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9988762142827666	WITHOUT_CLASSIFICATION	0.0011237857172333027	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999647928959322	WITHOUT_CLASSIFICATION	3.520710406777216E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999847575909382	WITHOUT_CLASSIFICATION	1.5242409061791936E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999004959966956	WITHOUT_CLASSIFICATION	9.950400330433294E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9990618719620552	WITHOUT_CLASSIFICATION	9.381280379449008E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999173846647683	WITHOUT_CLASSIFICATION	8.261533523167579E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999571372858971	WITHOUT_CLASSIFICATION	4.286271410285319E-5	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998868456580654	WITHOUT_CLASSIFICATION	1.1315434193470526E-4	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998158164024337	WITHOUT_CLASSIFICATION	1.8418359756633033E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997688291601231	WITHOUT_CLASSIFICATION	2.3117083987692888E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999256994629804	WITHOUT_CLASSIFICATION	7.430053701958022E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999606864235385	WITHOUT_CLASSIFICATION	3.9313576461456316E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999525193962109	WITHOUT_CLASSIFICATION	4.7480603789113345E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999734442604703	WITHOUT_CLASSIFICATION	2.6555739529629015E-5	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999915744030113	WITHOUT_CLASSIFICATION	8.425596988702449E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998929508224147	WITHOUT_CLASSIFICATION	1.0704917758537368E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997899824418051	WITHOUT_CLASSIFICATION	2.10017558195064E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997585873807833	WITHOUT_CLASSIFICATION	2.4141261921669654E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9837799911245326	WITHOUT_CLASSIFICATION	0.016220008875467363	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998938448074138	WITHOUT_CLASSIFICATION	1.061551925862079E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999739298235245	WITHOUT_CLASSIFICATION	2.6070176475505226E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999445835838605	WITHOUT_CLASSIFICATION	5.5416416139520886E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9970059160672103	WITHOUT_CLASSIFICATION	0.002994083932789676	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9996589628248334	WITHOUT_CLASSIFICATION	3.4103717516658526E-4	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998734640816	WITHOUT_CLASSIFICATION	1.2653591837008805E-7	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999700751794857	WITHOUT_CLASSIFICATION	2.9924820514313285E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9981090321018712	WITHOUT_CLASSIFICATION	0.0018909678981288045	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998881674242436	WITHOUT_CLASSIFICATION	1.1183257575639143E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998615438141732	WITHOUT_CLASSIFICATION	1.3845618582676258E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9982109381374135	WITHOUT_CLASSIFICATION	0.0017890618625864474	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999713717534258	WITHOUT_CLASSIFICATION	2.862824657420594E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9936341246134917	WITHOUT_CLASSIFICATION	0.006365875386508339	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9998987075157888	WITHOUT_CLASSIFICATION	1.0129248421129337E-4	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998267597858047	WITHOUT_CLASSIFICATION	1.7324021419521207E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9997004196534439	WITHOUT_CLASSIFICATION	2.995803465560953E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9991447180971222	WITHOUT_CLASSIFICATION	8.552819028778136E-4	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999934194198805	WITHOUT_CLASSIFICATION	6.5805801195806755E-6	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999465644527858	WITHOUT_CLASSIFICATION	5.343554721415366E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999469925004413	WITHOUT_CLASSIFICATION	5.30074995588198E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.99995987519152	WITHOUT_CLASSIFICATION	4.012480848000168E-5	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999164979127323	WITHOUT_CLASSIFICATION	8.350208726767433E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9989321947178953	WITHOUT_CLASSIFICATION	0.0010678052821047749	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998244916399884	WITHOUT_CLASSIFICATION	1.7550836001153708E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999920687148083	WITHOUT_CLASSIFICATION	7.931285191666365E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999272138154375	WITHOUT_CLASSIFICATION	7.278618456253914E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997652450068347	WITHOUT_CLASSIFICATION	2.3475499316517027E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999978810990254	WITHOUT_CLASSIFICATION	2.11890097459528E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999734349791618	WITHOUT_CLASSIFICATION	2.656502083815944E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999859779437889	WITHOUT_CLASSIFICATION	1.402205621120519E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999784152560602	WITHOUT_CLASSIFICATION	2.158474393981036E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999750761615274	WITHOUT_CLASSIFICATION	2.4923838472660167E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999890463061904	WITHOUT_CLASSIFICATION	1.0953693809599421E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.999921932346197	WITHOUT_CLASSIFICATION	7.806765380292385E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999544339729993	WITHOUT_CLASSIFICATION	4.556602700059656E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999569557076751	WITHOUT_CLASSIFICATION	4.304429232489907E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999873915775479	WITHOUT_CLASSIFICATION	1.2608422452061644E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9963294851824478	WITHOUT_CLASSIFICATION	0.003670514817552265	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9998626366101365	WITHOUT_CLASSIFICATION	1.3736338986348448E-4	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997405648079721	WITHOUT_CLASSIFICATION	2.594351920278281E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996785561962832	WITHOUT_CLASSIFICATION	3.214438037168132E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999745790692313	WITHOUT_CLASSIFICATION	2.542093076869628E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.994725856252002	WITHOUT_CLASSIFICATION	0.005274143747997901	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999226351551538	WITHOUT_CLASSIFICATION	7.736484484615424E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999635711898042	WITHOUT_CLASSIFICATION	3.6428810195902336E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9871493413138659	WITHOUT_CLASSIFICATION	0.012850658686134135	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9994711803750408	WITHOUT_CLASSIFICATION	5.288196249590999E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997367493575864	WITHOUT_CLASSIFICATION	2.6325064241360503E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9994711803750408	WITHOUT_CLASSIFICATION	5.288196249590999E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992306709503969	WITHOUT_CLASSIFICATION	7.693290496031919E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999660730269577	WITHOUT_CLASSIFICATION	3.392697304229956E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999271431358228	WITHOUT_CLASSIFICATION	7.285686417725585E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999872658603376	WITHOUT_CLASSIFICATION	1.2734139662401112E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999594306292792	WITHOUT_CLASSIFICATION	4.056937072095018E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998911766895254	WITHOUT_CLASSIFICATION	1.0882331047462744E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999156888835767	WITHOUT_CLASSIFICATION	8.43111164233608E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9993534360549353	WITHOUT_CLASSIFICATION	6.465639450647186E-4	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999859073363438	WITHOUT_CLASSIFICATION	1.4092663656282056E-5	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999960841749477	WITHOUT_CLASSIFICATION	3.91582505232029E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9998995013258495	WITHOUT_CLASSIFICATION	1.0049867415041559E-4	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998300485750065	WITHOUT_CLASSIFICATION	1.6995142499360484E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9992437108144633	WITHOUT_CLASSIFICATION	7.562891855367258E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.8519598360590696	WITHOUT_CLASSIFICATION	0.14804016394093047	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999978963056596	WITHOUT_CLASSIFICATION	2.1036943404066373E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999692446737606	WITHOUT_CLASSIFICATION	3.0755326239388853E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999434382517823	WITHOUT_CLASSIFICATION	5.656174821760901E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999434382517823	WITHOUT_CLASSIFICATION	5.656174821760901E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998724976438558	WITHOUT_CLASSIFICATION	1.2750235614416883E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9998374407076095	WITHOUT_CLASSIFICATION	1.62559292390515E-4	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999872745398117	WITHOUT_CLASSIFICATION	1.2725460188377401E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999927935301716	WITHOUT_CLASSIFICATION	7.206469828394548E-5	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9995069103037539	WITHOUT_CLASSIFICATION	4.930896962460601E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999183375421985	WITHOUT_CLASSIFICATION	8.166245780147406E-5	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9445589750161533	WITHOUT_CLASSIFICATION	0.055441024983846676	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998790233203859	WITHOUT_CLASSIFICATION	1.2097667961415261E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999901631091873	WITHOUT_CLASSIFICATION	9.836890812653411E-6	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999837066523271	WITHOUT_CLASSIFICATION	1.6293347672899724E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997040268982629	WITHOUT_CLASSIFICATION	2.959731017371494E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999781571562963	WITHOUT_CLASSIFICATION	2.1842843703710813E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997301604495606	WITHOUT_CLASSIFICATION	2.6983955043929464E-4	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999841951654446	WITHOUT_CLASSIFICATION	1.5804834555404614E-4	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999495136968664	WITHOUT_CLASSIFICATION	5.048630313360413E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9998112610592653	WITHOUT_CLASSIFICATION	1.8873894073467528E-4	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999697506913117	WITHOUT_CLASSIFICATION	3.024930868830194E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9993405143906497	WITHOUT_CLASSIFICATION	6.594856093503461E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999368864568571	WITHOUT_CLASSIFICATION	6.311354314293298E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9997876745992592	WITHOUT_CLASSIFICATION	2.1232540074080187E-4	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999887010318743	WITHOUT_CLASSIFICATION	1.1298968125641013E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999609547362296	WITHOUT_CLASSIFICATION	3.9045263770398443E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999660550076799	WITHOUT_CLASSIFICATION	3.394499232009558E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999237491647938	WITHOUT_CLASSIFICATION	7.625083520627217E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9997837330324948	WITHOUT_CLASSIFICATION	2.1626696750526815E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999858894241452	WITHOUT_CLASSIFICATION	1.4110575854704321E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997993514141835	WITHOUT_CLASSIFICATION	2.0064858581654815E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9981143367125773	WITHOUT_CLASSIFICATION	0.0018856632874227695	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997768737393303	WITHOUT_CLASSIFICATION	2.2312626066964532E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9997994828368587	WITHOUT_CLASSIFICATION	2.0051716314136356E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997918198053909	WITHOUT_CLASSIFICATION	2.081801946089944E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999927735483348	WITHOUT_CLASSIFICATION	7.226451665165155E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9957953864805013	WITHOUT_CLASSIFICATION	0.004204613519498734	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998485071057458	WITHOUT_CLASSIFICATION	1.5149289425409545E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997578552075742	WITHOUT_CLASSIFICATION	2.4214479242583626E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999844021523644	WITHOUT_CLASSIFICATION	1.559784763566781E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999790283931106	WITHOUT_CLASSIFICATION	2.0971606889389593E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999856331984682	WITHOUT_CLASSIFICATION	1.436680153169632E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999401009358396	WITHOUT_CLASSIFICATION	5.989906416038772E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9970926332820862	WITHOUT_CLASSIFICATION	0.0029073667179138354	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9996203357407526	WITHOUT_CLASSIFICATION	3.7966425924735854E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997798380952893	WITHOUT_CLASSIFICATION	2.2016190471065808E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9997779615147862	WITHOUT_CLASSIFICATION	2.2203848521386228E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9860414712973133	WITHOUT_CLASSIFICATION	0.013958528702686586	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9992292918514052	WITHOUT_CLASSIFICATION	7.707081485947147E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9818178595512909	WITHOUT_CLASSIFICATION	0.01818214044870922	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9894546699248817	WITHOUT_CLASSIFICATION	0.0105453300751183	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999924398314767	WITHOUT_CLASSIFICATION	7.560168523315945E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999743608222281	WITHOUT_CLASSIFICATION	2.5639177771893484E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999959539041321	WITHOUT_CLASSIFICATION	4.0460958678989054E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997798380952893	WITHOUT_CLASSIFICATION	2.2016190471065808E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999150296997097	WITHOUT_CLASSIFICATION	8.497030029041024E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9996798974136439	WITHOUT_CLASSIFICATION	3.201025863561102E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999130575391908	WITHOUT_CLASSIFICATION	8.694246080931467E-5	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997992283199267	WITHOUT_CLASSIFICATION	2.007716800732195E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999440454272949	WITHOUT_CLASSIFICATION	5.5954572705168154E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999440454272949	WITHOUT_CLASSIFICATION	5.5954572705168154E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999952814335209	WITHOUT_CLASSIFICATION	4.718566479058674E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993958811192396	WITHOUT_CLASSIFICATION	6.041188807604878E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999735666018311	WITHOUT_CLASSIFICATION	2.6433398168842934E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997074553298372	WITHOUT_CLASSIFICATION	2.925446701628124E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9994673127833569	WITHOUT_CLASSIFICATION	5.326872166432047E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999177872262792	WITHOUT_CLASSIFICATION	8.22127737207997E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999978806138225	WITHOUT_CLASSIFICATION	2.1193861775103997E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996719899683054	WITHOUT_CLASSIFICATION	3.28010031694601E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996328284415266	WITHOUT_CLASSIFICATION	3.671715584733997E-4	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9993865281033496	WITHOUT_CLASSIFICATION	6.134718966503611E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997189465708362	WITHOUT_CLASSIFICATION	2.810534291639423E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998656730230442	WITHOUT_CLASSIFICATION	1.3432697695571746E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999394911927354	WITHOUT_CLASSIFICATION	6.050880726457706E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9968268571318162	WITHOUT_CLASSIFICATION	0.003173142868183728	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998941725675596	WITHOUT_CLASSIFICATION	1.058274324403085E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999341859319567	WITHOUT_CLASSIFICATION	6.581406804336794E-5	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.8131061014057411	WITHOUT_CLASSIFICATION	0.18689389859425884	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998893901368432	WITHOUT_CLASSIFICATION	1.1060986315691687E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999469649424864	WITHOUT_CLASSIFICATION	5.303505751350699E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.99953689674202	WITHOUT_CLASSIFICATION	4.6310325798000707E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999134433965593	WITHOUT_CLASSIFICATION	8.655660344070435E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999985850079668	WITHOUT_CLASSIFICATION	1.4149920332082829E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999652440034989	WITHOUT_CLASSIFICATION	3.47559965011033E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997953610835517	WITHOUT_CLASSIFICATION	2.0463891644838104E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999539725708227	WITHOUT_CLASSIFICATION	4.602742917730607E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999233542473154	WITHOUT_CLASSIFICATION	7.664575268460927E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999921759276088	WITHOUT_CLASSIFICATION	7.824072391109566E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999223020345497	WITHOUT_CLASSIFICATION	7.769796545037307E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.99993998717951	WITHOUT_CLASSIFICATION	6.0012820490026053E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997744912924893	WITHOUT_CLASSIFICATION	2.2550870751072692E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999223020345497	WITHOUT_CLASSIFICATION	7.769796545037307E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999298311552417	WITHOUT_CLASSIFICATION	7.016884475827642E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999632364146771	WITHOUT_CLASSIFICATION	3.676358532295166E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998745888496694	WITHOUT_CLASSIFICATION	1.2541115033066114E-4	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999446880322825	WITHOUT_CLASSIFICATION	5.531196771749326E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998390033789549	WITHOUT_CLASSIFICATION	1.609966210450357E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997040268982629	WITHOUT_CLASSIFICATION	2.959731017371494E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999258574407558	WITHOUT_CLASSIFICATION	7.41425592442564E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998180048736602	WITHOUT_CLASSIFICATION	1.8199512633963324E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.998656595110789	WITHOUT_CLASSIFICATION	0.001343404889211021	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998082703340295	WITHOUT_CLASSIFICATION	1.9172966597055813E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999118697033438	WITHOUT_CLASSIFICATION	8.813029665623072E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999633744137617	WITHOUT_CLASSIFICATION	3.6625586238337133E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999666136521754	WITHOUT_CLASSIFICATION	3.338634782466127E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999673608010101	WITHOUT_CLASSIFICATION	3.263919898988749E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998781464723587	WITHOUT_CLASSIFICATION	1.21853527641155E-4	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998643324147035	WITHOUT_CLASSIFICATION	1.3566758529656055E-4	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999545181557161	WITHOUT_CLASSIFICATION	4.5481844283934845E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998552352735691	WITHOUT_CLASSIFICATION	1.447647264309488E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999847826127545	WITHOUT_CLASSIFICATION	1.521738724557187E-5	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998115737764127	WITHOUT_CLASSIFICATION	1.8842622358727896E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999082276299573	WITHOUT_CLASSIFICATION	9.177237004269903E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999482274677771	WITHOUT_CLASSIFICATION	5.1772532222890385E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999534003644078	WITHOUT_CLASSIFICATION	4.659963559220898E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999841522985319	WITHOUT_CLASSIFICATION	1.5847701468158214E-5	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997594634606687	WITHOUT_CLASSIFICATION	2.4053653933137645E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997726358809346	WITHOUT_CLASSIFICATION	2.2736411906545945E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9974096460299264	WITHOUT_CLASSIFICATION	0.0025903539700735585	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999099577773292	WITHOUT_CLASSIFICATION	9.004222267092951E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999350232971049	WITHOUT_CLASSIFICATION	6.497670289505714E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999659899978591	WITHOUT_CLASSIFICATION	3.4010002140902296E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995573553923793	WITHOUT_CLASSIFICATION	4.426446076206221E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9963411482068864	WITHOUT_CLASSIFICATION	0.003658851793113665	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999778305722006	WITHOUT_CLASSIFICATION	2.216942779943659E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999385648425437	WITHOUT_CLASSIFICATION	6.14351574563459E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999903173478566	WITHOUT_CLASSIFICATION	9.682652143400521E-6	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995426860205588	WITHOUT_CLASSIFICATION	4.573139794411556E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999904978074122	WITHOUT_CLASSIFICATION	9.502192587784366E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997464969695158	WITHOUT_CLASSIFICATION	2.535030304842548E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996304419736592	WITHOUT_CLASSIFICATION	3.695580263407094E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9988045691892751	WITHOUT_CLASSIFICATION	0.0011954308107249888	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999984288716107	WITHOUT_CLASSIFICATION	1.5711283893259902E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999429465047183	WITHOUT_CLASSIFICATION	5.705349528168634E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999849409688661	WITHOUT_CLASSIFICATION	1.5059031133902534E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999923368873124	WITHOUT_CLASSIFICATION	7.663112687622492E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999911259992114	WITHOUT_CLASSIFICATION	8.874000788595248E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.99999692274206	WITHOUT_CLASSIFICATION	3.0772579401084825E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9960283208340578	WITHOUT_CLASSIFICATION	0.0039716791659421425	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9997758672759488	WITHOUT_CLASSIFICATION	2.241327240512196E-4	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998984372782873	WITHOUT_CLASSIFICATION	1.0156272171271147E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999537956568034	WITHOUT_CLASSIFICATION	4.620434319660152E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999234772685057	WITHOUT_CLASSIFICATION	7.652273149430962E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997691557163502	WITHOUT_CLASSIFICATION	2.3084428364974525E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997948496596635	WITHOUT_CLASSIFICATION	2.0515034033651982E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999981125796136	WITHOUT_CLASSIFICATION	1.8874203864089038E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999779237030488	WITHOUT_CLASSIFICATION	2.20762969510951E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9998157374761001	WITHOUT_CLASSIFICATION	1.8426252389992892E-4	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999537069670253	WITHOUT_CLASSIFICATION	4.6293032974703335E-4	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999073310178594	WITHOUT_CLASSIFICATION	9.266898214058922E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999659899978591	WITHOUT_CLASSIFICATION	3.4010002140902296E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997879327888732	WITHOUT_CLASSIFICATION	2.1206721112679083E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999252679503312	WITHOUT_CLASSIFICATION	7.47320496687663E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9996139369189344	WITHOUT_CLASSIFICATION	3.8606308106559783E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999093584233187	WITHOUT_CLASSIFICATION	9.064157668122216E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999984259342315	WITHOUT_CLASSIFICATION	1.5740657685413104E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9992596802605987	WITHOUT_CLASSIFICATION	7.403197394012828E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994871756810528	WITHOUT_CLASSIFICATION	5.128243189472733E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999878092623782	WITHOUT_CLASSIFICATION	1.2190737621886146E-5	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999597407685722	WITHOUT_CLASSIFICATION	4.02592314278527E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9996616218436423	WITHOUT_CLASSIFICATION	3.383781563576981E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9984360294132287	WITHOUT_CLASSIFICATION	0.0015639705867712948	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994946954197681	WITHOUT_CLASSIFICATION	5.053045802320071E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999948320208467	WITHOUT_CLASSIFICATION	5.1679791533125835E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997168873903967	WITHOUT_CLASSIFICATION	2.8311260960338516E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992306709503969	WITHOUT_CLASSIFICATION	7.693290496031919E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.99974334962435	WITHOUT_CLASSIFICATION	2.5665037565002956E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9972434387591681	WITHOUT_CLASSIFICATION	0.002756561240831908	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9997397273319828	WITHOUT_CLASSIFICATION	2.602726680172008E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999560448643083	WITHOUT_CLASSIFICATION	4.395513569162348E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999686030229347	WITHOUT_CLASSIFICATION	3.13969770653221E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996986082235306	WITHOUT_CLASSIFICATION	3.0139177646931926E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996986082235306	WITHOUT_CLASSIFICATION	3.0139177646931926E-4	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999495635045456	WITHOUT_CLASSIFICATION	5.043649545451387E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999588800888852	WITHOUT_CLASSIFICATION	4.111991111477309E-5	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9996244435685017	WITHOUT_CLASSIFICATION	3.755564314982681E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998838991050376	WITHOUT_CLASSIFICATION	1.1610089496231632E-4	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998729303756811	WITHOUT_CLASSIFICATION	1.270696243187993E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998665515976038	WITHOUT_CLASSIFICATION	1.3344840239616848E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999495913309231	WITHOUT_CLASSIFICATION	5.04086690769474E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9958650808046048	WITHOUT_CLASSIFICATION	0.004134919195395171	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9958650808046048	WITHOUT_CLASSIFICATION	0.004134919195395171	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995613347957423	WITHOUT_CLASSIFICATION	4.3866520425773744E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999587235355964	WITHOUT_CLASSIFICATION	4.1276464403530364E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9996813949611607	WITHOUT_CLASSIFICATION	3.1860503883933286E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997887618574008	WITHOUT_CLASSIFICATION	2.112381425991812E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997887618574008	WITHOUT_CLASSIFICATION	2.112381425991812E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997887618574008	WITHOUT_CLASSIFICATION	2.112381425991812E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999364923152247	WITHOUT_CLASSIFICATION	6.350768477524557E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999864730596888	WITHOUT_CLASSIFICATION	1.3526940311191712E-4	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999887061638718	WITHOUT_CLASSIFICATION	1.1293836128173343E-5	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9994190018383535	WITHOUT_CLASSIFICATION	5.809981616464616E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998397094899404	WITHOUT_CLASSIFICATION	1.6029051005950212E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999887041401345	WITHOUT_CLASSIFICATION	1.1295859865540769E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999834876999059	WITHOUT_CLASSIFICATION	1.6512300094159534E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9018540529318813	WITHOUT_CLASSIFICATION	0.09814594706811879	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999980947422929	WITHOUT_CLASSIFICATION	1.9052577071066845E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9998908424767935	WITHOUT_CLASSIFICATION	1.0915752320656328E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998970559572783	WITHOUT_CLASSIFICATION	1.0294404272175228E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9988475429178792	WITHOUT_CLASSIFICATION	0.0011524570821206637	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999881335213524	WITHOUT_CLASSIFICATION	1.1866478647554273E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999918067929403	WITHOUT_CLASSIFICATION	8.193207059754548E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999872923195308	WITHOUT_CLASSIFICATION	1.2707680469207927E-5	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999821621851491	WITHOUT_CLASSIFICATION	1.7837814850883043E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998653506209905	WITHOUT_CLASSIFICATION	1.3464937900955668E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996986082235306	WITHOUT_CLASSIFICATION	3.0139177646931926E-4	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999550308820478	WITHOUT_CLASSIFICATION	4.4969117952096E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9543805315785329	WITHOUT_CLASSIFICATION	0.045619468421467115	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999168678002682	WITHOUT_CLASSIFICATION	8.313219973176261E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999508987118231	WITHOUT_CLASSIFICATION	4.9101288177000115E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999511487079561	WITHOUT_CLASSIFICATION	4.8851292043789966E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998778149150572	WITHOUT_CLASSIFICATION	1.2218508494273524E-4	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999983987681874	WITHOUT_CLASSIFICATION	1.6012318125980916E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997440579727233	WITHOUT_CLASSIFICATION	2.559420272768228E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998163170625392	WITHOUT_CLASSIFICATION	1.8368293746080417E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998657417189143	WITHOUT_CLASSIFICATION	1.3425828108570747E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9992458489152897	WITHOUT_CLASSIFICATION	7.541510847103619E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999705806977873	WITHOUT_CLASSIFICATION	2.941930221270165E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9994788523818632	WITHOUT_CLASSIFICATION	5.211476181368436E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997018400713186	WITHOUT_CLASSIFICATION	2.9815992868138547E-4	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999784264112523	WITHOUT_CLASSIFICATION	2.15735887476164E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.7080907112610159	WITHOUT_CLASSIFICATION	0.29190928873898403	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9993954331392587	WITHOUT_CLASSIFICATION	6.045668607412601E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999990346705132	WITHOUT_CLASSIFICATION	9.653294867999587E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999758807035352	WITHOUT_CLASSIFICATION	2.4119296464838593E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999758807035352	WITHOUT_CLASSIFICATION	2.4119296464838593E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998734478307352	WITHOUT_CLASSIFICATION	1.2655216926481242E-4	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999693140785957	WITHOUT_CLASSIFICATION	3.0685921404330494E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998539026098614	WITHOUT_CLASSIFICATION	1.4609739013861708E-4	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999510010309377	WITHOUT_CLASSIFICATION	4.899896906217693E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996028043526273	WITHOUT_CLASSIFICATION	3.9719564737265395E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999676641642153	WITHOUT_CLASSIFICATION	3.233583578455376E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9997776747182496	WITHOUT_CLASSIFICATION	2.223252817503189E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9997044746272622	WITHOUT_CLASSIFICATION	2.9552537273778984E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999195394269753	WITHOUT_CLASSIFICATION	8.046057302466847E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999511498825313	WITHOUT_CLASSIFICATION	4.885011746879656E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.998764420282868	WITHOUT_CLASSIFICATION	0.0012355797171319234	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995011466270153	WITHOUT_CLASSIFICATION	4.988533729847183E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.99999221872374	WITHOUT_CLASSIFICATION	7.78127626004073E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999256654296332	WITHOUT_CLASSIFICATION	7.43345703667821E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999911622874696	WITHOUT_CLASSIFICATION	8.837712530430032E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995157672073083	WITHOUT_CLASSIFICATION	4.8423279269178414E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999634742607734	WITHOUT_CLASSIFICATION	3.6525739226533786E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999634742607734	WITHOUT_CLASSIFICATION	3.6525739226533786E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998162063575365	WITHOUT_CLASSIFICATION	1.837936424634151E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9978173155865725	WITHOUT_CLASSIFICATION	0.0021826844134274466	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9995008833082354	WITHOUT_CLASSIFICATION	4.991166917645935E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995008833082354	WITHOUT_CLASSIFICATION	4.991166917645935E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997746225808641	WITHOUT_CLASSIFICATION	2.2537741913582316E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997374732314961	WITHOUT_CLASSIFICATION	2.625267685039027E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997917410789725	WITHOUT_CLASSIFICATION	2.0825892102751235E-4	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990750568641288	WITHOUT_CLASSIFICATION	9.249431358712324E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.998784142733451	WITHOUT_CLASSIFICATION	0.0012158572665490336	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998382762533339	WITHOUT_CLASSIFICATION	1.6172374666621734E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999541721562499	WITHOUT_CLASSIFICATION	4.5827843750044666E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990750568641288	WITHOUT_CLASSIFICATION	9.249431358712324E-4	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9958084891864492	WITHOUT_CLASSIFICATION	0.004191510813550866	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998504369435229	WITHOUT_CLASSIFICATION	1.4956305647710039E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999711491569081	WITHOUT_CLASSIFICATION	2.8850843091922048E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998286218480357	WITHOUT_CLASSIFICATION	1.7137815196426924E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998123785167221	WITHOUT_CLASSIFICATION	1.8762148327795011E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999800958254234	WITHOUT_CLASSIFICATION	1.9904174576642152E-5	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998491069657849	WITHOUT_CLASSIFICATION	1.508930342152313E-4	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9998499055461662	WITHOUT_CLASSIFICATION	1.5009445383393796E-4	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999289610375364	WITHOUT_CLASSIFICATION	7.103896246368086E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998582902814738	WITHOUT_CLASSIFICATION	1.4170971852624177E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999438271112041	WITHOUT_CLASSIFICATION	5.617288879587936E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998271567332817	WITHOUT_CLASSIFICATION	1.728432667183234E-4	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998730202252211	WITHOUT_CLASSIFICATION	1.2697977477890866E-4	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999570141505232	WITHOUT_CLASSIFICATION	4.298584947674306E-5	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998946578736905	WITHOUT_CLASSIFICATION	1.0534212630952546E-4	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999879074430732	WITHOUT_CLASSIFICATION	1.209255692679606E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999158543787446	WITHOUT_CLASSIFICATION	8.414562125538016E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9993304019409914	WITHOUT_CLASSIFICATION	6.695980590084901E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9993304019409914	WITHOUT_CLASSIFICATION	6.695980590084901E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998491069657849	WITHOUT_CLASSIFICATION	1.508930342152313E-4	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9986373718202974	WITHOUT_CLASSIFICATION	0.00136262817970254	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999861392511787	WITHOUT_CLASSIFICATION	1.3860748821301408E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9993787196948315	WITHOUT_CLASSIFICATION	6.212803051684572E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9995189734426001	WITHOUT_CLASSIFICATION	4.8102655740000095E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.99997559478731	WITHOUT_CLASSIFICATION	2.44052126899472E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999665810710635	WITHOUT_CLASSIFICATION	3.3418928936541944E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999879503024448	WITHOUT_CLASSIFICATION	1.2049697555207278E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9982056567106271	WITHOUT_CLASSIFICATION	0.0017943432893729916	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999915312052259	WITHOUT_CLASSIFICATION	8.468794774236164E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998901989828677	WITHOUT_CLASSIFICATION	1.0980101713233588E-4	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999734817095042	WITHOUT_CLASSIFICATION	2.6518290495759655E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.998073961243734	WITHOUT_CLASSIFICATION	0.001926038756265986	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9989389027185811	WITHOUT_CLASSIFICATION	0.0010610972814188505	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999988266769795	WITHOUT_CLASSIFICATION	1.1733230205095974E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999265302659041	WITHOUT_CLASSIFICATION	7.346973409584773E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999868750967209	WITHOUT_CLASSIFICATION	1.3124903279117958E-5	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999945552842447	WITHOUT_CLASSIFICATION	5.4447157552204E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998058900344837	WITHOUT_CLASSIFICATION	1.9410996551638622E-4	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999723799887227	WITHOUT_CLASSIFICATION	2.762001127722965E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999605876709373	WITHOUT_CLASSIFICATION	3.941232906272235E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999952483881832	WITHOUT_CLASSIFICATION	4.751611816798799E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999392637102895	WITHOUT_CLASSIFICATION	6.0736289710537735E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999044502982785	WITHOUT_CLASSIFICATION	9.554970172157655E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999833073881756	WITHOUT_CLASSIFICATION	1.6692611824434322E-5	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999999068526486	WITHOUT_CLASSIFICATION	9.314735138895236E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998124020798003	WITHOUT_CLASSIFICATION	1.8759792019975904E-4	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999208725368991	WITHOUT_CLASSIFICATION	7.912746310085907E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999084435582786	WITHOUT_CLASSIFICATION	9.155644172144341E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999721003953569	WITHOUT_CLASSIFICATION	2.7899604643142797E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9980123606227671	WITHOUT_CLASSIFICATION	0.0019876393772328116	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999265302659041	WITHOUT_CLASSIFICATION	7.346973409584773E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999671705624095	WITHOUT_CLASSIFICATION	3.2829437590534975E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998507512451541	WITHOUT_CLASSIFICATION	1.4924875484593128E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999900056668615	WITHOUT_CLASSIFICATION	9.994333138551689E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998746236825039	WITHOUT_CLASSIFICATION	1.25376317496131E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.991871529821319	WITHOUT_CLASSIFICATION	0.00812847017868095	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999401473479246	WITHOUT_CLASSIFICATION	5.98526520754856E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999164592539532	WITHOUT_CLASSIFICATION	8.354074604687017E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998917527350557	WITHOUT_CLASSIFICATION	1.0824726494424274E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9957985223349265	WITHOUT_CLASSIFICATION	0.004201477665073516	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999515006295224	WITHOUT_CLASSIFICATION	4.849937047755279E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.999745491942062	WITHOUT_CLASSIFICATION	2.545080579379917E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8367734413177536	WITHOUT_CLASSIFICATION	0.16322655868224656	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9996029471996916	WITHOUT_CLASSIFICATION	3.97052800308341E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9995486690211204	WITHOUT_CLASSIFICATION	4.51330978879547E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998113849467878	WITHOUT_CLASSIFICATION	1.886150532122584E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9963523489537729	WITHOUT_CLASSIFICATION	0.003647651046227123	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995624417821878	WITHOUT_CLASSIFICATION	4.375582178121256E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999875820574868	WITHOUT_CLASSIFICATION	1.2417942513114856E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997850612288136	WITHOUT_CLASSIFICATION	2.1493877118629952E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996883696577373	WITHOUT_CLASSIFICATION	3.1163034226256516E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.998784142733451	WITHOUT_CLASSIFICATION	0.0012158572665490336	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974236686359	WITHOUT_CLASSIFICATION	2.576331364069619E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999265302659041	WITHOUT_CLASSIFICATION	7.346973409584773E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9982866923707541	WITHOUT_CLASSIFICATION	0.0017133076292459393	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9996296447221413	WITHOUT_CLASSIFICATION	3.703552778586684E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999584604154144	WITHOUT_CLASSIFICATION	4.1539584585638885E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999583650900905	WITHOUT_CLASSIFICATION	4.1634909909465714E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998901465318791	WITHOUT_CLASSIFICATION	1.0985346812086518E-4	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999986831547981	WITHOUT_CLASSIFICATION	1.3168452018778438E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998147203728038	WITHOUT_CLASSIFICATION	1.8527962719611937E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999831407051096	WITHOUT_CLASSIFICATION	1.6859294890353017E-5	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9667394673443551	WITHOUT_CLASSIFICATION	0.03326053265564479	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998417742809618	WITHOUT_CLASSIFICATION	1.5822571903821301E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999982456128077	WITHOUT_CLASSIFICATION	1.7543871923032352E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.99998049712117	WITHOUT_CLASSIFICATION	1.9502878830072263E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999486446111283	WITHOUT_CLASSIFICATION	5.135538887160708E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999486446111283	WITHOUT_CLASSIFICATION	5.135538887160708E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999923892641909	WITHOUT_CLASSIFICATION	7.610735809259662E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997862157831086	WITHOUT_CLASSIFICATION	2.1378421689151664E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.99999790819098	WITHOUT_CLASSIFICATION	2.0918090200986613E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999985862713675	WITHOUT_CLASSIFICATION	1.4137286324219713E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998142861748222	WITHOUT_CLASSIFICATION	1.8571382517795006E-4	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999037530437864	WITHOUT_CLASSIFICATION	9.624695621365363E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999655408054555	WITHOUT_CLASSIFICATION	3.445919454449865E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9996948170091021	WITHOUT_CLASSIFICATION	3.0518299089794424E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999960167472783	WITHOUT_CLASSIFICATION	3.983252721694001E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999542490516979	WITHOUT_CLASSIFICATION	4.575094830209191E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998286886696356	WITHOUT_CLASSIFICATION	1.713113303642966E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998286886696356	WITHOUT_CLASSIFICATION	1.713113303642966E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999810761808559	WITHOUT_CLASSIFICATION	1.8923819144099202E-5	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999280135043704	WITHOUT_CLASSIFICATION	7.198649562952475E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993852166211024	WITHOUT_CLASSIFICATION	6.147833788976674E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997798942683017	WITHOUT_CLASSIFICATION	2.2010573169829262E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999901452775376	WITHOUT_CLASSIFICATION	9.854722462471427E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.998922744039027	WITHOUT_CLASSIFICATION	0.001077255960972932	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996383424988023	WITHOUT_CLASSIFICATION	3.61657501197627E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9992995679587763	WITHOUT_CLASSIFICATION	7.004320412237101E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9997201907713459	WITHOUT_CLASSIFICATION	2.798092286541441E-4	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998287159728414	WITHOUT_CLASSIFICATION	1.712840271586969E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999655437961937	WITHOUT_CLASSIFICATION	3.445620380637938E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997708120987842	WITHOUT_CLASSIFICATION	2.2918790121589583E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998716003922031	WITHOUT_CLASSIFICATION	1.2839960779690595E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9979371610621605	WITHOUT_CLASSIFICATION	0.002062838937839505	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995365327026505	WITHOUT_CLASSIFICATION	4.634672973494547E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999942817898084	WITHOUT_CLASSIFICATION	5.718210191593048E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9879910030249608	WITHOUT_CLASSIFICATION	0.012008996975039186	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999702875915284	WITHOUT_CLASSIFICATION	2.971240847160784E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999875004936084	WITHOUT_CLASSIFICATION	1.2499506391575137E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999811959343826	WITHOUT_CLASSIFICATION	1.8804065617292173E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.99953689674202	WITHOUT_CLASSIFICATION	4.6310325798000707E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999468136876073	WITHOUT_CLASSIFICATION	5.318631239268202E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995088314761001	WITHOUT_CLASSIFICATION	4.911685238999277E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999242744518256	WITHOUT_CLASSIFICATION	7.572554817435218E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999156252443344	WITHOUT_CLASSIFICATION	8.437475566566394E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997758810035858	WITHOUT_CLASSIFICATION	2.2411899641423168E-4	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998318540683803	WITHOUT_CLASSIFICATION	1.681459316196906E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999704403029382	WITHOUT_CLASSIFICATION	2.9559697061727204E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999389533285842	WITHOUT_CLASSIFICATION	6.104667141583866E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119304312992	WITHOUT_CLASSIFICATION	8.806956870083076E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9950520876058935	WITHOUT_CLASSIFICATION	0.004947912394106579	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999317337406207	WITHOUT_CLASSIFICATION	6.826625937926046E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999996499461654	WITHOUT_CLASSIFICATION	3.5005383459815473E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999780198285325	WITHOUT_CLASSIFICATION	2.1980171467501702E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998918582647939	WITHOUT_CLASSIFICATION	1.0814173520616676E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999989603033574	WITHOUT_CLASSIFICATION	1.0396966425348493E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997744004963588	WITHOUT_CLASSIFICATION	2.2559950364110405E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998229477919509	WITHOUT_CLASSIFICATION	1.7705220804910678E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999760524190824	WITHOUT_CLASSIFICATION	2.3947580917626858E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9982514195660548	WITHOUT_CLASSIFICATION	0.0017485804339452233	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997713996605497	WITHOUT_CLASSIFICATION	2.286003394502501E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997981149226697	WITHOUT_CLASSIFICATION	2.018850773301794E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9998887794372473	WITHOUT_CLASSIFICATION	1.1122056275260962E-4	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9996920312513041	WITHOUT_CLASSIFICATION	3.079687486958728E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999899418457585	WITHOUT_CLASSIFICATION	1.005815424150543E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9989599469372884	WITHOUT_CLASSIFICATION	0.0010400530627116492	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999514141910499	WITHOUT_CLASSIFICATION	4.8585808950020614E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999537378965446	WITHOUT_CLASSIFICATION	4.626210345530698E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999714916714694	WITHOUT_CLASSIFICATION	2.850832853072057E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9982803451022548	WITHOUT_CLASSIFICATION	0.001719654897745228	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999219695895628	WITHOUT_CLASSIFICATION	7.803041043726432E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999744964280654	WITHOUT_CLASSIFICATION	2.5503571934652487E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999478339959325	WITHOUT_CLASSIFICATION	5.216600406758341E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998731052236438	WITHOUT_CLASSIFICATION	1.2689477635631017E-4	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999478339959325	WITHOUT_CLASSIFICATION	5.216600406758341E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9746988559086419	WITHOUT_CLASSIFICATION	0.025301144091357974	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9907448173535757	WITHOUT_CLASSIFICATION	0.009255182646424406	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998810525936495	WITHOUT_CLASSIFICATION	1.1894740635062649E-4	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999840434444077	WITHOUT_CLASSIFICATION	1.5956555592237647E-5	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9996620357943584	WITHOUT_CLASSIFICATION	3.379642056416055E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998810525936495	WITHOUT_CLASSIFICATION	1.1894740635062649E-4	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999937666985655	WITHOUT_CLASSIFICATION	6.233301434456071E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9994511573140772	WITHOUT_CLASSIFICATION	5.488426859227902E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999739896826185	WITHOUT_CLASSIFICATION	2.6010317381472185E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999269163818724	WITHOUT_CLASSIFICATION	7.30836181275864E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999781268438384	WITHOUT_CLASSIFICATION	2.1873156161598906E-5	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999511586481111	WITHOUT_CLASSIFICATION	4.884135188895527E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999956418309867	WITHOUT_CLASSIFICATION	4.358169013320204E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9993990117654716	WITHOUT_CLASSIFICATION	6.009882345283796E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999746472967457	WITHOUT_CLASSIFICATION	2.53527032543222E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998729977025985	WITHOUT_CLASSIFICATION	1.270022974015649E-4	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9982295494086473	WITHOUT_CLASSIFICATION	0.0017704505913526856	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998705417784856	WITHOUT_CLASSIFICATION	1.294582215143761E-4	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998332906440394	WITHOUT_CLASSIFICATION	1.667093559607434E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998378067698893	WITHOUT_CLASSIFICATION	1.621932301107466E-4	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998780660931257	WITHOUT_CLASSIFICATION	1.2193390687428518E-4	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9994977571882332	WITHOUT_CLASSIFICATION	5.02242811766781E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9981501974777391	WITHOUT_CLASSIFICATION	0.0018498025222608322	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9968633430908783	WITHOUT_CLASSIFICATION	0.0031366569091216654	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998263880318895	WITHOUT_CLASSIFICATION	1.736119681104995E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9986121687945209	WITHOUT_CLASSIFICATION	0.0013878312054791248	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9995496739641888	WITHOUT_CLASSIFICATION	4.503260358111948E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9992442448543618	WITHOUT_CLASSIFICATION	7.557551456380998E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996606151773056	WITHOUT_CLASSIFICATION	3.3938482269430046E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.997864314015203	WITHOUT_CLASSIFICATION	0.0021356859847970434	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.7327380690852702	WITHOUT_CLASSIFICATION	0.26726193091473	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9759874560357389	WITHOUT_CLASSIFICATION	0.024012543964261092	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999883863878646	WITHOUT_CLASSIFICATION	1.1613612135337494E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9998566516085395	WITHOUT_CLASSIFICATION	1.433483914605395E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.999927386983782	WITHOUT_CLASSIFICATION	7.261301621802828E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999906871164395	WITHOUT_CLASSIFICATION	9.312883560641342E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998656161259162	WITHOUT_CLASSIFICATION	1.3438387408377898E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9687144420589121	WITHOUT_CLASSIFICATION	0.031285557941087935	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9986121687945209	WITHOUT_CLASSIFICATION	0.0013878312054791248	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999511068682022	WITHOUT_CLASSIFICATION	4.889313179779397E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998128692092021	WITHOUT_CLASSIFICATION	1.8713079079799404E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992787022217441	WITHOUT_CLASSIFICATION	7.21297778255913E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9997551090714578	WITHOUT_CLASSIFICATION	2.4489092854221495E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999946546067986	WITHOUT_CLASSIFICATION	5.345393201464293E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999769121312639	WITHOUT_CLASSIFICATION	2.3087868736021682E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9967848256708057	WITHOUT_CLASSIFICATION	0.0032151743291942616	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998257054183796	WITHOUT_CLASSIFICATION	1.7429458162032397E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989772888476622	WITHOUT_CLASSIFICATION	0.0010227111523378077	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999057366689975	WITHOUT_CLASSIFICATION	9.426333100241047E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999957642663765	WITHOUT_CLASSIFICATION	4.235733623528745E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999702771023845	WITHOUT_CLASSIFICATION	2.9722897615582226E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9998422213768714	WITHOUT_CLASSIFICATION	1.5777862312854368E-4	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999792870614718	WITHOUT_CLASSIFICATION	2.071293852827519E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999008703992721	WITHOUT_CLASSIFICATION	9.912960072791584E-5	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999364879189697	WITHOUT_CLASSIFICATION	6.351208103033112E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.997544967848205	WITHOUT_CLASSIFICATION	0.0024550321517950004	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996823432486446	WITHOUT_CLASSIFICATION	3.176567513554488E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987997134059761	WITHOUT_CLASSIFICATION	0.0012002865940239505	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9983848004873686	WITHOUT_CLASSIFICATION	0.001615199512631409	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992991005590546	WITHOUT_CLASSIFICATION	7.008994409454869E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992991005590546	WITHOUT_CLASSIFICATION	7.008994409454869E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999335386891695	WITHOUT_CLASSIFICATION	6.646131083045878E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992991005590546	WITHOUT_CLASSIFICATION	7.008994409454869E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9992991005590546	WITHOUT_CLASSIFICATION	7.008994409454869E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9949977002284572	WITHOUT_CLASSIFICATION	0.0050022997715427255	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995913488517293	WITHOUT_CLASSIFICATION	4.08651148270727E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998098187181769	WITHOUT_CLASSIFICATION	1.9018128182321016E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998098187181769	WITHOUT_CLASSIFICATION	1.9018128182321016E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9967274545283664	WITHOUT_CLASSIFICATION	0.0032725454716335226	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999965894007016	WITHOUT_CLASSIFICATION	3.4105992983940834E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996628529605031	WITHOUT_CLASSIFICATION	3.3714703949692807E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998699558882173	WITHOUT_CLASSIFICATION	1.3004411178284335E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997895458268936	WITHOUT_CLASSIFICATION	2.1045417310636133E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997904714562644	WITHOUT_CLASSIFICATION	2.0952854373549847E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998186759268524	WITHOUT_CLASSIFICATION	1.8132407314760802E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999406557320787	WITHOUT_CLASSIFICATION	5.934426792136282E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998804195133756	WITHOUT_CLASSIFICATION	1.1958048662439565E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9996466983705403	WITHOUT_CLASSIFICATION	3.533016294597552E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9995809254211223	WITHOUT_CLASSIFICATION	4.1907457887768994E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9993074230215495	WITHOUT_CLASSIFICATION	6.925769784505597E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999635711898042	WITHOUT_CLASSIFICATION	3.6428810195902336E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998570586404957	WITHOUT_CLASSIFICATION	1.429413595043819E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9988608373267438	WITHOUT_CLASSIFICATION	0.0011391626732562014	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9994451997385034	WITHOUT_CLASSIFICATION	5.54800261496573E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9994288180317238	WITHOUT_CLASSIFICATION	5.711819682761886E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999707232899905	WITHOUT_CLASSIFICATION	2.9276710009484337E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999635711898042	WITHOUT_CLASSIFICATION	3.6428810195902336E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9995496739641888	WITHOUT_CLASSIFICATION	4.503260358111948E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9998567778422103	WITHOUT_CLASSIFICATION	1.4322215778962184E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998988130318529	WITHOUT_CLASSIFICATION	0.00101186968147113	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998471832197131	WITHOUT_CLASSIFICATION	0.001528167802869021	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9998267432162962	WITHOUT_CLASSIFICATION	1.732567837037539E-4	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999620988957675	WITHOUT_CLASSIFICATION	3.7901104232454585E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999401290881025	WITHOUT_CLASSIFICATION	5.987091189744662E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999947611520615	WITHOUT_CLASSIFICATION	5.238847938499204E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999653997626952	WITHOUT_CLASSIFICATION	3.460023730480159E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999986680751686	WITHOUT_CLASSIFICATION	1.3319248314131285E-6	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997874098224859	WITHOUT_CLASSIFICATION	2.1259017751412606E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998486912224068	WITHOUT_CLASSIFICATION	1.513087775932325E-4	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998153020977102	WITHOUT_CLASSIFICATION	1.8469790228980263E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999836812555222	WITHOUT_CLASSIFICATION	1.6318744477788932E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9923234607874926	WITHOUT_CLASSIFICATION	0.00767653921250745	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999093498454175	WITHOUT_CLASSIFICATION	9.065015458265094E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999655998751544	WITHOUT_CLASSIFICATION	3.44001248455967E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999431586044506	WITHOUT_CLASSIFICATION	5.684139554943102E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9996232295301046	WITHOUT_CLASSIFICATION	3.7677046989533907E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999147131912708	WITHOUT_CLASSIFICATION	8.52868087293039E-5	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999523873883447	WITHOUT_CLASSIFICATION	4.7612611655297436E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9994007150882547	WITHOUT_CLASSIFICATION	5.9928491174542E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999992308047662	WITHOUT_CLASSIFICATION	7.69195233800359E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999653997626952	WITHOUT_CLASSIFICATION	3.460023730480159E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998081070360605	WITHOUT_CLASSIFICATION	1.9189296393944602E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9998256986157507	WITHOUT_CLASSIFICATION	1.743013842494164E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996906901871252	WITHOUT_CLASSIFICATION	3.093098128747289E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999264161253055	WITHOUT_CLASSIFICATION	7.358387469445272E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.99978524278968	WITHOUT_CLASSIFICATION	2.147572103201155E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998347926502216	WITHOUT_CLASSIFICATION	1.652073497783188E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9998726632037859	WITHOUT_CLASSIFICATION	1.2733679621404977E-4	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9998343369240024	WITHOUT_CLASSIFICATION	1.6566307599761063E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9997771333103901	WITHOUT_CLASSIFICATION	2.228666896097602E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99998161204163	WITHOUT_CLASSIFICATION	1.8387958370001196E-5	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999523207680809	WITHOUT_CLASSIFICATION	4.767923191900802E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999686139186803	WITHOUT_CLASSIFICATION	3.1386081319626916E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998936391077162	WITHOUT_CLASSIFICATION	1.063608922838389E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999417955191433	WITHOUT_CLASSIFICATION	5.820448085663252E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991534452706743	WITHOUT_CLASSIFICATION	8.465547293257698E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99998161204163	WITHOUT_CLASSIFICATION	1.8387958370001196E-5	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999916280764455	WITHOUT_CLASSIFICATION	8.371923554447996E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9969638837451832	WITHOUT_CLASSIFICATION	0.003036116254816747	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998086928082893	WITHOUT_CLASSIFICATION	1.9130719171059636E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999125107587248	WITHOUT_CLASSIFICATION	8.74892412752694E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999290994036488	WITHOUT_CLASSIFICATION	7.090059635112468E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998429244389024	WITHOUT_CLASSIFICATION	1.570755610976554E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998890259124783	WITHOUT_CLASSIFICATION	1.1097408752173058E-4	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998003164044432	WITHOUT_CLASSIFICATION	1.9968359555684782E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998031455947094	WITHOUT_CLASSIFICATION	1.9685440529049729E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995192941370071	WITHOUT_CLASSIFICATION	4.8070586299283166E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995192941370071	WITHOUT_CLASSIFICATION	4.8070586299283166E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995192941370071	WITHOUT_CLASSIFICATION	4.8070586299283166E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998923881981884	WITHOUT_CLASSIFICATION	1.0761180181152387E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998923881981884	WITHOUT_CLASSIFICATION	1.0761180181152387E-4	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9992244712435108	WITHOUT_CLASSIFICATION	7.755287564890836E-4	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999925547424137	WITHOUT_CLASSIFICATION	7.445257586346554E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9996406310225286	WITHOUT_CLASSIFICATION	3.593689774713658E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9997262996182563	WITHOUT_CLASSIFICATION	2.7370038174361034E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.997377053571954	WITHOUT_CLASSIFICATION	0.0026229464280459244	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997713620986116	WITHOUT_CLASSIFICATION	2.2863790138842894E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998004605142256	WITHOUT_CLASSIFICATION	1.9953948577448532E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994780985972658	WITHOUT_CLASSIFICATION	5.219014027341857E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999357006097068	WITHOUT_CLASSIFICATION	6.42993902932181E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997713620986116	WITHOUT_CLASSIFICATION	2.2863790138842894E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998004605142256	WITHOUT_CLASSIFICATION	1.9953948577448532E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999675471144456	WITHOUT_CLASSIFICATION	3.245288555441301E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999731960453287	WITHOUT_CLASSIFICATION	2.680395467129728E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999767931878173	WITHOUT_CLASSIFICATION	2.3206812182774788E-5	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999766397678005	WITHOUT_CLASSIFICATION	2.336023219949367E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999901403161056	WITHOUT_CLASSIFICATION	9.859683894389079E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999032237571484	WITHOUT_CLASSIFICATION	9.677624285172214E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999381499260799	WITHOUT_CLASSIFICATION	6.185007392011177E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999983025925845	WITHOUT_CLASSIFICATION	1.6974074155087948E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991624283712525	WITHOUT_CLASSIFICATION	8.375716287475606E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9944374201005852	WITHOUT_CLASSIFICATION	0.005562579899414798	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997176892592723	WITHOUT_CLASSIFICATION	2.823107407277004E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999534419071598	WITHOUT_CLASSIFICATION	4.6558092840145874E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998742355711749	WITHOUT_CLASSIFICATION	1.2576442882507113E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9986437682309353	WITHOUT_CLASSIFICATION	0.001356231769064827	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999405824178645	WITHOUT_CLASSIFICATION	5.9417582135517075E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999248693461168	WITHOUT_CLASSIFICATION	7.513065388327994E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9985573566632313	WITHOUT_CLASSIFICATION	0.0014426433367687647	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999967163134917	WITHOUT_CLASSIFICATION	3.283686508325508E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9996991138779935	WITHOUT_CLASSIFICATION	3.008861220065082E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999900867137729	WITHOUT_CLASSIFICATION	9.913286227038698E-6	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999980397556266	WITHOUT_CLASSIFICATION	1.960244373282358E-6	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.995482842786102	WITHOUT_CLASSIFICATION	0.004517157213898071	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997689539912776	WITHOUT_CLASSIFICATION	2.3104600872231052E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997748919263711	WITHOUT_CLASSIFICATION	2.2510807362879025E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999997233904293	WITHOUT_CLASSIFICATION	2.7660957069434405E-7	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998050053037884	WITHOUT_CLASSIFICATION	1.9499469621170066E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995486818416498	WITHOUT_CLASSIFICATION	4.513181583502877E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996939353960936	WITHOUT_CLASSIFICATION	3.0606460390642686E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996939353960936	WITHOUT_CLASSIFICATION	3.0606460390642686E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998362766971669	WITHOUT_CLASSIFICATION	1.6372330283312918E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9968991611451297	WITHOUT_CLASSIFICATION	0.0031008388548703805	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998483337601659	WITHOUT_CLASSIFICATION	1.5166623983415054E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999668908967441	WITHOUT_CLASSIFICATION	3.3109103255967786E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997761712177512	WITHOUT_CLASSIFICATION	2.2382878224872342E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9989598473692166	WITHOUT_CLASSIFICATION	0.0010401526307834133	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999899842741543	WITHOUT_CLASSIFICATION	1.0015725845622647E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999699881008518	WITHOUT_CLASSIFICATION	3.0011899148199375E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99985263491714	WITHOUT_CLASSIFICATION	1.4736508286007725E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998516023982549	WITHOUT_CLASSIFICATION	1.483976017450504E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998517846991066	WITHOUT_CLASSIFICATION	1.4821530089331454E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9978535504648397	WITHOUT_CLASSIFICATION	0.002146449535160306	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998168909162225	WITHOUT_CLASSIFICATION	1.8310908377756104E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996510353780786	WITHOUT_CLASSIFICATION	3.4896462192129956E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9992575056921064	WITHOUT_CLASSIFICATION	7.424943078935573E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999410174906925	WITHOUT_CLASSIFICATION	5.898250930745066E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997873864590977	WITHOUT_CLASSIFICATION	2.1261354090218172E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999181237217954	WITHOUT_CLASSIFICATION	8.187627820446604E-5	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999238974037896	WITHOUT_CLASSIFICATION	7.610259621036792E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996510353780786	WITHOUT_CLASSIFICATION	3.4896462192129956E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996510353780786	WITHOUT_CLASSIFICATION	3.4896462192129956E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998364690365823	WITHOUT_CLASSIFICATION	1.6353096341764867E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999816153418145	WITHOUT_CLASSIFICATION	1.83846581854389E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998875792576448	WITHOUT_CLASSIFICATION	1.1242074235509067E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999940557027589	WITHOUT_CLASSIFICATION	5.9442972410940315E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997018400713186	WITHOUT_CLASSIFICATION	2.9815992868138547E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999248693461168	WITHOUT_CLASSIFICATION	7.513065388327994E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999037585415916	WITHOUT_CLASSIFICATION	9.624145840830572E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999569754707012	WITHOUT_CLASSIFICATION	4.302452929887025E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999553000832141	WITHOUT_CLASSIFICATION	4.4699916785978886E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998099379733114	WITHOUT_CLASSIFICATION	1.900620266885368E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997659153028261	WITHOUT_CLASSIFICATION	2.3408469717392793E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998326090645736	WITHOUT_CLASSIFICATION	1.6739093542644017E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997532933220878	WITHOUT_CLASSIFICATION	2.4670667791219705E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997532933220878	WITHOUT_CLASSIFICATION	2.4670667791219705E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997532933220878	WITHOUT_CLASSIFICATION	2.4670667791219705E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997532933220878	WITHOUT_CLASSIFICATION	2.4670667791219705E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998457424057722	WITHOUT_CLASSIFICATION	1.5425759422776686E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9992663864757779	WITHOUT_CLASSIFICATION	7.336135242220658E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887522827828	WITHOUT_CLASSIFICATION	3.112477172173416E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9985003334182058	WITHOUT_CLASSIFICATION	0.0014996665817942649	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998970613139737	WITHOUT_CLASSIFICATION	1.0293868602623058E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997948497738345	WITHOUT_CLASSIFICATION	2.0515022616554034E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998634733603452	WITHOUT_CLASSIFICATION	1.3652663965478765E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999953548166639	WITHOUT_CLASSIFICATION	4.645183336091763E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999836087356537	WITHOUT_CLASSIFICATION	1.6391264346295236E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999929229578597	WITHOUT_CLASSIFICATION	7.0770421402941645E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998854929316581	WITHOUT_CLASSIFICATION	1.1450706834187183E-4	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998646559245674	WITHOUT_CLASSIFICATION	1.3534407543264095E-4	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998783134143192	WITHOUT_CLASSIFICATION	1.2168658568078893E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9997876181952472	WITHOUT_CLASSIFICATION	2.1238180475275216E-4	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999797055728111	WITHOUT_CLASSIFICATION	2.0294427188941935E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999797055728111	WITHOUT_CLASSIFICATION	2.0294427188941935E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999524140649868	WITHOUT_CLASSIFICATION	4.758593501317107E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999665483207993	WITHOUT_CLASSIFICATION	3.345167920058704E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999991101192752	WITHOUT_CLASSIFICATION	8.898807248006803E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997033362923199	WITHOUT_CLASSIFICATION	2.96663707680216E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997033362923199	WITHOUT_CLASSIFICATION	2.96663707680216E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9994070854698245	WITHOUT_CLASSIFICATION	5.929145301755093E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995192941370071	WITHOUT_CLASSIFICATION	4.8070586299283166E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9994213802993326	WITHOUT_CLASSIFICATION	5.786197006673109E-4	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999654202834609	WITHOUT_CLASSIFICATION	3.4579716539144684E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999972241307856	WITHOUT_CLASSIFICATION	2.775869214420222E-6	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9946736030745702	WITHOUT_CLASSIFICATION	0.005326396925429773	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997845170083561	WITHOUT_CLASSIFICATION	2.1548299164378257E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9991016820177289	WITHOUT_CLASSIFICATION	8.98317982271127E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999807745098966	WITHOUT_CLASSIFICATION	1.922549010332512E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9997845138949358	WITHOUT_CLASSIFICATION	2.1548610506411895E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.99992680008016	WITHOUT_CLASSIFICATION	7.319991984001187E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9991992697606452	WITHOUT_CLASSIFICATION	8.007302393548759E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9994785607053152	WITHOUT_CLASSIFICATION	5.21439294684814E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999366726865545	WITHOUT_CLASSIFICATION	6.332731344549695E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999995315393745	WITHOUT_CLASSIFICATION	4.6846062552520055E-7	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999970932332386	WITHOUT_CLASSIFICATION	2.9067667614165436E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999966310603752	WITHOUT_CLASSIFICATION	3.3689396248663553E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999946150031587	WITHOUT_CLASSIFICATION	5.384996841358179E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999433688978085	WITHOUT_CLASSIFICATION	5.663110219137298E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995713248988697	WITHOUT_CLASSIFICATION	4.2867510113033105E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9925315360723659	WITHOUT_CLASSIFICATION	0.007468463927634206	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998910279691451	WITHOUT_CLASSIFICATION	1.089720308550031E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999337558446294	WITHOUT_CLASSIFICATION	6.624415537066968E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997652450068347	WITHOUT_CLASSIFICATION	2.3475499316517027E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999924092374175	WITHOUT_CLASSIFICATION	7.590762582516679E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999691626724753	WITHOUT_CLASSIFICATION	3.0837327524758464E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9995742470954487	WITHOUT_CLASSIFICATION	4.2575290455129357E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999982830349478	WITHOUT_CLASSIFICATION	1.716965052199678E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9982363602436155	WITHOUT_CLASSIFICATION	0.0017636397563844718	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999341859319567	WITHOUT_CLASSIFICATION	6.581406804336794E-5	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999956204580197	WITHOUT_CLASSIFICATION	4.379541980341666E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999603592213266	WITHOUT_CLASSIFICATION	3.964077867340996E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999533061329183	WITHOUT_CLASSIFICATION	4.6693867081704446E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9948196296524228	WITHOUT_CLASSIFICATION	0.005180370347577209	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998532617793483	WITHOUT_CLASSIFICATION	1.467382206517718E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9996501392629745	WITHOUT_CLASSIFICATION	3.4986073702551214E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99982371612537	WITHOUT_CLASSIFICATION	1.762838746299622E-4	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999229006911887	WITHOUT_CLASSIFICATION	7.70993088113354E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9995132309696538	WITHOUT_CLASSIFICATION	4.867690303461991E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999105291448941	WITHOUT_CLASSIFICATION	8.947085510584838E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999434382517823	WITHOUT_CLASSIFICATION	5.656174821760901E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997510972007436	WITHOUT_CLASSIFICATION	2.489027992563412E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999292935839043	WITHOUT_CLASSIFICATION	7.070641609575046E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999897934948022	WITHOUT_CLASSIFICATION	1.0206505197683927E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998849961231564	WITHOUT_CLASSIFICATION	1.1500387684363521E-4	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9981511764864547	WITHOUT_CLASSIFICATION	0.001848823513545316	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9975643317281162	WITHOUT_CLASSIFICATION	0.002435668271883719	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9994164491072067	WITHOUT_CLASSIFICATION	5.835508927931796E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999456675153412	WITHOUT_CLASSIFICATION	5.4332484658823194E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.99944302252388	WITHOUT_CLASSIFICATION	5.569774761201142E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999390676432556	WITHOUT_CLASSIFICATION	6.093235674442094E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999886735369534	WITHOUT_CLASSIFICATION	1.1326463046488944E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997959106166276	WITHOUT_CLASSIFICATION	2.0408938337225434E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999882003538738	WITHOUT_CLASSIFICATION	1.1799646126252552E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998412123755436	WITHOUT_CLASSIFICATION	1.5878762445637376E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999990722692484	WITHOUT_CLASSIFICATION	9.277307516037207E-6	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998450052108682	WITHOUT_CLASSIFICATION	1.5499478913178248E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998918833186623	WITHOUT_CLASSIFICATION	1.0811668133771363E-4	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998912158212702	WITHOUT_CLASSIFICATION	1.087841787299434E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.997886792950404	WITHOUT_CLASSIFICATION	0.0021132070495959764	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999816615682157	WITHOUT_CLASSIFICATION	1.8338431784313233E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9977924891387837	WITHOUT_CLASSIFICATION	0.002207510861216334	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999258623848407	WITHOUT_CLASSIFICATION	7.413761515930364E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999868108337517	WITHOUT_CLASSIFICATION	1.3189166248286268E-4	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999766182396654	WITHOUT_CLASSIFICATION	2.3381760334547586E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999912585960482	WITHOUT_CLASSIFICATION	8.741403951781079E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999949046384659	WITHOUT_CLASSIFICATION	5.0953615340711685E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999434070071185	WITHOUT_CLASSIFICATION	5.659299288150484E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998213356674918	WITHOUT_CLASSIFICATION	1.786643325083088E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999990317539279	WITHOUT_CLASSIFICATION	9.682460721036554E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999983389437242	WITHOUT_CLASSIFICATION	1.6610562758009818E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9996773515221935	WITHOUT_CLASSIFICATION	3.226484778065E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999218692629219	WITHOUT_CLASSIFICATION	7.813073707805245E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999482892463244	WITHOUT_CLASSIFICATION	5.171075367565597E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998176349322596	WITHOUT_CLASSIFICATION	1.8236506774046892E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999299985950012	WITHOUT_CLASSIFICATION	7.000140499878221E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9994977571882332	WITHOUT_CLASSIFICATION	5.02242811766781E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995896232045411	WITHOUT_CLASSIFICATION	4.10376795458819E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9992316671533306	WITHOUT_CLASSIFICATION	7.683328466693829E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9998334037354615	WITHOUT_CLASSIFICATION	1.6659626453856513E-4	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999543737184066	WITHOUT_CLASSIFICATION	4.562628159344387E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999977085850401	WITHOUT_CLASSIFICATION	2.291414959888859E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9982691098708917	WITHOUT_CLASSIFICATION	0.0017308901291082763	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9996217953584859	WITHOUT_CLASSIFICATION	3.7820464151414583E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997235344893145	WITHOUT_CLASSIFICATION	2.764655106855539E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999869478354531	WITHOUT_CLASSIFICATION	1.3052164546898263E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999210756707357	WITHOUT_CLASSIFICATION	7.892432926428997E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991193248391275	WITHOUT_CLASSIFICATION	8.806751608725407E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999330631729489	WITHOUT_CLASSIFICATION	6.693682705104521E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999635754145183	WITHOUT_CLASSIFICATION	3.6424585481596726E-5	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999949128349951	WITHOUT_CLASSIFICATION	5.087165004959775E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999426110740883	WITHOUT_CLASSIFICATION	5.738892591164365E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999435789299255	WITHOUT_CLASSIFICATION	5.642107007444713E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999466341683997	WITHOUT_CLASSIFICATION	5.336583160019665E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998031775381659	WITHOUT_CLASSIFICATION	1.968224618341123E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998031775381659	WITHOUT_CLASSIFICATION	1.968224618341123E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999897531263803	WITHOUT_CLASSIFICATION	1.0246873619710231E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9924839062263934	WITHOUT_CLASSIFICATION	0.0075160937736066	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997688618902527	WITHOUT_CLASSIFICATION	2.3113810974726624E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9968521850606015	WITHOUT_CLASSIFICATION	0.0031478149393984797	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9996514783572289	WITHOUT_CLASSIFICATION	3.4852164277116785E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981266102100326	WITHOUT_CLASSIFICATION	0.0018733897899674814	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998718294446519	WITHOUT_CLASSIFICATION	1.2817055534814243E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999298590950028	WITHOUT_CLASSIFICATION	7.014090499717598E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9985314830810169	WITHOUT_CLASSIFICATION	0.0014685169189830797	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999818868981918	WITHOUT_CLASSIFICATION	1.811310180825642E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997325021698593	WITHOUT_CLASSIFICATION	2.674978301407186E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999916625519084	WITHOUT_CLASSIFICATION	8.337448091598965E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999860734308573	WITHOUT_CLASSIFICATION	1.392656914262765E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9992204182363594	WITHOUT_CLASSIFICATION	7.795817636405427E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999323180295975	WITHOUT_CLASSIFICATION	6.768197040249584E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9842017372704579	WITHOUT_CLASSIFICATION	0.015798262729542	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9842017372704579	WITHOUT_CLASSIFICATION	0.015798262729542	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998630084446376	WITHOUT_CLASSIFICATION	1.369915553624243E-4	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998111550893815	WITHOUT_CLASSIFICATION	1.88844910618648E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999311354876933	WITHOUT_CLASSIFICATION	6.886451230667394E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999072391309731	WITHOUT_CLASSIFICATION	9.276086902680063E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999818868100971	WITHOUT_CLASSIFICATION	1.8113189902778586E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999909747223238	WITHOUT_CLASSIFICATION	9.025277676226775E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999909747223238	WITHOUT_CLASSIFICATION	9.025277676226775E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998445536276146	WITHOUT_CLASSIFICATION	1.5544637238531256E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999966886302369	WITHOUT_CLASSIFICATION	3.311369763103872E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999368939250478	WITHOUT_CLASSIFICATION	6.310607495223638E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9930634715998888	WITHOUT_CLASSIFICATION	0.00693652840011107	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9997947609464537	WITHOUT_CLASSIFICATION	2.0523905354625572E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999285973525112	WITHOUT_CLASSIFICATION	7.140264748889069E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998653506209905	WITHOUT_CLASSIFICATION	1.3464937900955668E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999304905119867	WITHOUT_CLASSIFICATION	6.950948801327702E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.979145771811121	WITHOUT_CLASSIFICATION	0.020854228188878995	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999537956568034	WITHOUT_CLASSIFICATION	4.620434319660152E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999093584233187	WITHOUT_CLASSIFICATION	9.064157668122216E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9994484033935769	WITHOUT_CLASSIFICATION	5.515966064230391E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999553127204434	WITHOUT_CLASSIFICATION	4.46872795565301E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995365327026505	WITHOUT_CLASSIFICATION	4.634672973494547E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9971878260976141	WITHOUT_CLASSIFICATION	0.0028121739023859813	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999564666403371	WITHOUT_CLASSIFICATION	4.353335966291534E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9920899273245777	WITHOUT_CLASSIFICATION	0.007910072675422269	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997495612495978	WITHOUT_CLASSIFICATION	2.504387504022214E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998794733401956	WITHOUT_CLASSIFICATION	1.2052665980443394E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998326710168011	WITHOUT_CLASSIFICATION	1.673289831989628E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997971015038931	WITHOUT_CLASSIFICATION	2.028984961069339E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999290622551362	WITHOUT_CLASSIFICATION	7.093774486378373E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998579493078248	WITHOUT_CLASSIFICATION	1.4205069217517081E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9993713821114126	WITHOUT_CLASSIFICATION	6.286178885874382E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999519438055189	WITHOUT_CLASSIFICATION	4.805619448113212E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999988081746437	WITHOUT_CLASSIFICATION	1.1918253562588006E-6	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999294897715979	WITHOUT_CLASSIFICATION	7.051022840213992E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999634742607734	WITHOUT_CLASSIFICATION	3.6525739226533786E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997051062916368	WITHOUT_CLASSIFICATION	2.9489370836320686E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.98288302195704	WITHOUT_CLASSIFICATION	0.017116978042960054	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9856559750821074	WITHOUT_CLASSIFICATION	0.014344024917892538	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997412478825268	WITHOUT_CLASSIFICATION	2.587521174731476E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999491106126789	WITHOUT_CLASSIFICATION	5.088938732109196E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9997756192115851	WITHOUT_CLASSIFICATION	2.2438078841502732E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9998732299041337	WITHOUT_CLASSIFICATION	1.2677009586637168E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999413050647042	WITHOUT_CLASSIFICATION	5.8694935295794065E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999412647289969	WITHOUT_CLASSIFICATION	5.87352710031056E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998473313761425	WITHOUT_CLASSIFICATION	1.526686238575491E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.999932501603295	WITHOUT_CLASSIFICATION	6.749839670495874E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9983072030406034	WITHOUT_CLASSIFICATION	0.0016927969593966614	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999073099226849	WITHOUT_CLASSIFICATION	9.26900773151069E-4	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9981828115390625	WITHOUT_CLASSIFICATION	0.0018171884609374433	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9980452194592808	WITHOUT_CLASSIFICATION	0.0019547805407192005	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999413050647042	WITHOUT_CLASSIFICATION	5.8694935295794065E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999412647289969	WITHOUT_CLASSIFICATION	5.87352710031056E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998723055909172	WITHOUT_CLASSIFICATION	1.2769440908289793E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999823904699335	WITHOUT_CLASSIFICATION	1.7609530066505777E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999979156742617	WITHOUT_CLASSIFICATION	2.084325738347503E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9996001118312544	WITHOUT_CLASSIFICATION	3.998881687456616E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9997174300732038	WITHOUT_CLASSIFICATION	2.8256992679621647E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9982459655953757	WITHOUT_CLASSIFICATION	0.0017540344046243492	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999333866007232	WITHOUT_CLASSIFICATION	6.661339927686447E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9995322464768589	WITHOUT_CLASSIFICATION	4.677535231410892E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999850364830057	WITHOUT_CLASSIFICATION	1.4963516994211299E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999877251441535	WITHOUT_CLASSIFICATION	1.227485584647136E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999847342087875	WITHOUT_CLASSIFICATION	1.5265791212516866E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999877251441535	WITHOUT_CLASSIFICATION	1.227485584647136E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9993824877639691	WITHOUT_CLASSIFICATION	6.17512236030864E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995222327538515	WITHOUT_CLASSIFICATION	4.777672461484613E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9993824877639691	WITHOUT_CLASSIFICATION	6.17512236030864E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998483042779573	WITHOUT_CLASSIFICATION	1.5169572204263188E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9921707611911864	WITHOUT_CLASSIFICATION	0.007829238808813503	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9990215478833548	WITHOUT_CLASSIFICATION	9.78452116645221E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9990215478833548	WITHOUT_CLASSIFICATION	9.78452116645221E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995344944412592	WITHOUT_CLASSIFICATION	4.655055587408108E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995366887652166	WITHOUT_CLASSIFICATION	4.6331123478341563E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995344944412592	WITHOUT_CLASSIFICATION	4.655055587408108E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998658368915099	WITHOUT_CLASSIFICATION	1.3416310849003027E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9997417563396754	WITHOUT_CLASSIFICATION	2.582436603245871E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997862855571027	WITHOUT_CLASSIFICATION	2.1371444289726432E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999694126295967	WITHOUT_CLASSIFICATION	3.05873704032933E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9995681662916582	WITHOUT_CLASSIFICATION	4.3183370834173695E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9997887271719846	WITHOUT_CLASSIFICATION	2.1127282801546696E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9987885027146336	WITHOUT_CLASSIFICATION	0.0012114972853664008	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999349780434663	WITHOUT_CLASSIFICATION	6.502195653362821E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997209612884776	WITHOUT_CLASSIFICATION	2.790387115223682E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999927624028452	WITHOUT_CLASSIFICATION	7.237597154791269E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999058723398921	WITHOUT_CLASSIFICATION	9.412766010788033E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999467998882092	WITHOUT_CLASSIFICATION	5.3200111790714746E-5	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999393697356055	WITHOUT_CLASSIFICATION	6.0630264394435755E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.99995947980972	WITHOUT_CLASSIFICATION	4.052019027997076E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998503878432079	WITHOUT_CLASSIFICATION	1.4961215679207664E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9996390125708675	WITHOUT_CLASSIFICATION	3.609874291325174E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997158546902871	WITHOUT_CLASSIFICATION	2.8414530971290064E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.996931750029626	WITHOUT_CLASSIFICATION	0.0030682499703740423	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998116591910506	WITHOUT_CLASSIFICATION	1.8834080894943048E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997932231167741	WITHOUT_CLASSIFICATION	2.0677688322596815E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998013542798311	WITHOUT_CLASSIFICATION	1.9864572016893838E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9992264841938208	WITHOUT_CLASSIFICATION	7.735158061791939E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999651345632707	WITHOUT_CLASSIFICATION	3.4865436729304017E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997862855571027	WITHOUT_CLASSIFICATION	2.1371444289726432E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999462976255676	WITHOUT_CLASSIFICATION	5.370237443226356E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998484757512457	WITHOUT_CLASSIFICATION	1.515242487542319E-4	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986122705300872	WITHOUT_CLASSIFICATION	0.0013877294699127932	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9997854799737987	WITHOUT_CLASSIFICATION	2.145200262012044E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999978543135024	WITHOUT_CLASSIFICATION	2.1456864976086876E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999733286474943	WITHOUT_CLASSIFICATION	2.6671352505712543E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998658368915099	WITHOUT_CLASSIFICATION	1.3416310849003027E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998658368915099	WITHOUT_CLASSIFICATION	1.3416310849003027E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999716946620724	WITHOUT_CLASSIFICATION	2.830533792761328E-4	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999732949018367	WITHOUT_CLASSIFICATION	2.6705098163331412E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997946121113072	WITHOUT_CLASSIFICATION	2.0538788869290108E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9998542051192635	WITHOUT_CLASSIFICATION	1.4579488073655642E-4	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9944923544381542	WITHOUT_CLASSIFICATION	0.005507645561845843	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9992524701811515	WITHOUT_CLASSIFICATION	7.475298188485073E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.998857628936727	WITHOUT_CLASSIFICATION	0.0011423710632729167	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999525497147946	WITHOUT_CLASSIFICATION	4.745028520528985E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996648776336952	WITHOUT_CLASSIFICATION	3.3512236630487194E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995924572544957	WITHOUT_CLASSIFICATION	4.0754274550433393E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997209612884776	WITHOUT_CLASSIFICATION	2.790387115223682E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998713499930564	WITHOUT_CLASSIFICATION	1.28650006943551E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995924572544957	WITHOUT_CLASSIFICATION	4.0754274550433393E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999098306758852	WITHOUT_CLASSIFICATION	9.016932411474879E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999830981407096	WITHOUT_CLASSIFICATION	1.6901859290358154E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999213271901713	WITHOUT_CLASSIFICATION	7.867280982864774E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9997408018451335	WITHOUT_CLASSIFICATION	2.5919815486650263E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999297714618884	WITHOUT_CLASSIFICATION	7.02285381116016E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9988616467137521	WITHOUT_CLASSIFICATION	0.0011383532862479157	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999098306772852	WITHOUT_CLASSIFICATION	9.016932271477116E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999106737866871	WITHOUT_CLASSIFICATION	8.93262133128236E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999090324578294	WITHOUT_CLASSIFICATION	9.096754217064888E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.99993233161595	WITHOUT_CLASSIFICATION	6.766838405006915E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995299076991476	WITHOUT_CLASSIFICATION	4.700923008523965E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999535187407831	WITHOUT_CLASSIFICATION	4.648125921704574E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995924572544957	WITHOUT_CLASSIFICATION	4.0754274550433393E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999297714618884	WITHOUT_CLASSIFICATION	7.02285381116016E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999098306772852	WITHOUT_CLASSIFICATION	9.016932271477116E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997605690320963	WITHOUT_CLASSIFICATION	2.3943096790373294E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999976104077037	WITHOUT_CLASSIFICATION	2.3895922962963734E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999693499604894	WITHOUT_CLASSIFICATION	3.065003951073256E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998999072774576	WITHOUT_CLASSIFICATION	1.0009272254232156E-4	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999429478881715	WITHOUT_CLASSIFICATION	5.705211182856474E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999098306758852	WITHOUT_CLASSIFICATION	9.016932411474879E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995821927038449	WITHOUT_CLASSIFICATION	4.178072961551388E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998935565156566	WITHOUT_CLASSIFICATION	1.0644348434336532E-4	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998841386923146	WITHOUT_CLASSIFICATION	1.1586130768536993E-4	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999574402139352	WITHOUT_CLASSIFICATION	4.255978606476886E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999593074108258	WITHOUT_CLASSIFICATION	4.069258917417955E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.999910318543218	WITHOUT_CLASSIFICATION	8.968145678203654E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998483042779573	WITHOUT_CLASSIFICATION	1.5169572204263188E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004771044027	WITHOUT_CLASSIFICATION	2.995228955974015E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999702456964393	WITHOUT_CLASSIFICATION	2.9754303560641047E-5	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9930913060707451	WITHOUT_CLASSIFICATION	0.00690869392925493	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.99631837409269	WITHOUT_CLASSIFICATION	0.0036816259073099698	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9977962850778206	WITHOUT_CLASSIFICATION	0.0022037149221794273	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9994610259611484	WITHOUT_CLASSIFICATION	5.389740388516989E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9997355395595086	WITHOUT_CLASSIFICATION	2.6446044049141656E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9993523123980668	WITHOUT_CLASSIFICATION	6.47687601933276E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997786894056221	WITHOUT_CLASSIFICATION	2.2131059437786247E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999383753934806	WITHOUT_CLASSIFICATION	6.162460651937882E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9995591164002489	WITHOUT_CLASSIFICATION	4.408835997510959E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9997483895117801	WITHOUT_CLASSIFICATION	2.5161048821989993E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9990921972795651	WITHOUT_CLASSIFICATION	9.078027204349146E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998793037092256	WITHOUT_CLASSIFICATION	1.2069629077439467E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999673305237119	WITHOUT_CLASSIFICATION	3.2669476288007245E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9967288749564851	WITHOUT_CLASSIFICATION	0.0032711250435149154	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998423728767201	WITHOUT_CLASSIFICATION	1.576271232799968E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999560333805058	WITHOUT_CLASSIFICATION	4.396661949419626E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999180271113132	WITHOUT_CLASSIFICATION	8.197288868679538E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9995719280978597	WITHOUT_CLASSIFICATION	4.2807190214024155E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999661065538787	WITHOUT_CLASSIFICATION	3.3893446121216014E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999703004995171	WITHOUT_CLASSIFICATION	2.9699500482945934E-5	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9989784954862112	WITHOUT_CLASSIFICATION	0.001021504513788798	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999963443233173	WITHOUT_CLASSIFICATION	3.655676682699644E-5	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999615472837032	WITHOUT_CLASSIFICATION	3.845271629678577E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9989850620569696	WITHOUT_CLASSIFICATION	0.0010149379430304164	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999923081874869	WITHOUT_CLASSIFICATION	7.691812513100877E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999410214695135	WITHOUT_CLASSIFICATION	5.8978530486397536E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998169285464907	WITHOUT_CLASSIFICATION	1.830714535093056E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999298151822141	WITHOUT_CLASSIFICATION	7.01848177858981E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.980479834206414	WITHOUT_CLASSIFICATION	0.01952016579358601	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998575086847824	WITHOUT_CLASSIFICATION	1.424913152176006E-4	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9993642398862447	WITHOUT_CLASSIFICATION	6.357601137553986E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997978077978702	WITHOUT_CLASSIFICATION	2.0219220212977927E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9976177306674707	WITHOUT_CLASSIFICATION	0.0023822693325292366	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999104842009618	WITHOUT_CLASSIFICATION	8.951579903817448E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998582902814738	WITHOUT_CLASSIFICATION	1.4170971852624177E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999356729543283	WITHOUT_CLASSIFICATION	6.432704567164199E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974236686359	WITHOUT_CLASSIFICATION	2.576331364069619E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997510109401208	WITHOUT_CLASSIFICATION	2.4898905987933486E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997346964536773	WITHOUT_CLASSIFICATION	2.6530354632270994E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999152416940726	WITHOUT_CLASSIFICATION	8.475830592741123E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9972190929932057	WITHOUT_CLASSIFICATION	0.002780907006794321	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997346964536773	WITHOUT_CLASSIFICATION	2.6530354632270994E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997510109401208	WITHOUT_CLASSIFICATION	2.4898905987933486E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999152416940726	WITHOUT_CLASSIFICATION	8.475830592741123E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999679437199406	WITHOUT_CLASSIFICATION	3.2056280059446235E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999169558814651	WITHOUT_CLASSIFICATION	8.304411853485484E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997282732091418	WITHOUT_CLASSIFICATION	2.7172679085818435E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999042321192191	WITHOUT_CLASSIFICATION	9.576788078086214E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999964178205227	WITHOUT_CLASSIFICATION	3.5821794772763087E-6	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9974986752514069	WITHOUT_CLASSIFICATION	0.0025013247485930466	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9992815039823529	WITHOUT_CLASSIFICATION	7.184960176471485E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9995265150072734	WITHOUT_CLASSIFICATION	4.7348499272660446E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999990244214904	WITHOUT_CLASSIFICATION	9.755785095786225E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9983305209154733	WITHOUT_CLASSIFICATION	0.0016694790845268167	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9998958663456913	WITHOUT_CLASSIFICATION	1.0413365430868751E-4	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9996048387331483	WITHOUT_CLASSIFICATION	3.951612668516737E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997439871939457	WITHOUT_CLASSIFICATION	2.560128060542106E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997904326919037	WITHOUT_CLASSIFICATION	2.0956730809623957E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999989743220951	WITHOUT_CLASSIFICATION	1.0256779049791225E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999243857195611	WITHOUT_CLASSIFICATION	7.561428043887736E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992520234864039	WITHOUT_CLASSIFICATION	7.479765135961257E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999936654003424	WITHOUT_CLASSIFICATION	6.334599657608704E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999398374763874	WITHOUT_CLASSIFICATION	6.016252361260498E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998822786579211	WITHOUT_CLASSIFICATION	1.1772134207886501E-4	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9941088923398141	WITHOUT_CLASSIFICATION	0.005891107660185758	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999957963828715	WITHOUT_CLASSIFICATION	4.203617128407762E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.99989053531782	WITHOUT_CLASSIFICATION	1.094646821799165E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9998712697186757	WITHOUT_CLASSIFICATION	1.2873028132428016E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998663666351943	WITHOUT_CLASSIFICATION	1.3363336480554092E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998663666351943	WITHOUT_CLASSIFICATION	1.3363336480554092E-4	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999684118741786	WITHOUT_CLASSIFICATION	3.158812582137339E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999684118741786	WITHOUT_CLASSIFICATION	3.158812582137339E-5	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9988339810689311	WITHOUT_CLASSIFICATION	0.0011660189310689494	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992520234864039	WITHOUT_CLASSIFICATION	7.479765135961257E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999238337403068	WITHOUT_CLASSIFICATION	7.616625969318715E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999406837385085	WITHOUT_CLASSIFICATION	5.931626149142939E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999155607308738	WITHOUT_CLASSIFICATION	8.443926912620843E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999155607308738	WITHOUT_CLASSIFICATION	8.443926912620843E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999000083557843	WITHOUT_CLASSIFICATION	9.999164421563221E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998612495987058	WITHOUT_CLASSIFICATION	1.387504012942878E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999179343297306	WITHOUT_CLASSIFICATION	8.206567026936415E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999795931354107	WITHOUT_CLASSIFICATION	2.040686458929541E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.99905122326303	WITHOUT_CLASSIFICATION	9.48776736970077E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9952669044755182	WITHOUT_CLASSIFICATION	0.0047330955244817225	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997583574384611	WITHOUT_CLASSIFICATION	2.4164256153897371E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9996641506090593	WITHOUT_CLASSIFICATION	3.3584939094060204E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999233161623972	WITHOUT_CLASSIFICATION	7.668383760274575E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9969200361683462	WITHOUT_CLASSIFICATION	0.0030799638316538	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999403067308139	WITHOUT_CLASSIFICATION	5.969326918601176E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998980353345971	WITHOUT_CLASSIFICATION	1.0196466540290116E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999218975618087	WITHOUT_CLASSIFICATION	7.810243819129434E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9998731886685424	WITHOUT_CLASSIFICATION	1.2681133145768568E-4	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998187367963102	WITHOUT_CLASSIFICATION	1.8126320368984638E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998749338584003	WITHOUT_CLASSIFICATION	1.250661415996892E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492108924341	WITHOUT_CLASSIFICATION	1.5078910756598704E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997388661626683	WITHOUT_CLASSIFICATION	2.611338373318111E-4	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9997324152882546	WITHOUT_CLASSIFICATION	2.675847117454111E-4	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9978357571650351	WITHOUT_CLASSIFICATION	0.002164242834964873	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999163019894163	WITHOUT_CLASSIFICATION	8.369801058367682E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9968302697682216	WITHOUT_CLASSIFICATION	0.0031697302317782623	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999829154550787	WITHOUT_CLASSIFICATION	1.7084544921299803E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999202002657944	WITHOUT_CLASSIFICATION	7.979973420564691E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994946954197681	WITHOUT_CLASSIFICATION	5.053045802320071E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997887385439982	WITHOUT_CLASSIFICATION	2.1126145600179958E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999560333805058	WITHOUT_CLASSIFICATION	4.396661949419626E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9996931647887823	WITHOUT_CLASSIFICATION	3.068352112176244E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9989734704824568	WITHOUT_CLASSIFICATION	0.001026529517543166	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997699076893886	WITHOUT_CLASSIFICATION	2.3009231061144118E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997696607964397	WITHOUT_CLASSIFICATION	2.303392035603041E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999818177005936	WITHOUT_CLASSIFICATION	1.818229940639555E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999818177005936	WITHOUT_CLASSIFICATION	1.818229940639555E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999813940056812	WITHOUT_CLASSIFICATION	1.8605994318894957E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999714161082921	WITHOUT_CLASSIFICATION	2.8583891707920597E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999216460749853	WITHOUT_CLASSIFICATION	7.835392501463612E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999216460749853	WITHOUT_CLASSIFICATION	7.835392501463612E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.991871529821319	WITHOUT_CLASSIFICATION	0.00812847017868095	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993694967583409	WITHOUT_CLASSIFICATION	6.305032416591339E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9985314914449102	WITHOUT_CLASSIFICATION	0.001468508555089797	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997018400713186	WITHOUT_CLASSIFICATION	2.9815992868138547E-4	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9997874098224859	WITHOUT_CLASSIFICATION	2.1259017751412606E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997893092829139	WITHOUT_CLASSIFICATION	2.1069071708612448E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999690639892936	WITHOUT_CLASSIFICATION	3.093601070642654E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999238499996081	WITHOUT_CLASSIFICATION	7.615000039181221E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999238499996081	WITHOUT_CLASSIFICATION	7.615000039181221E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999304462022804	WITHOUT_CLASSIFICATION	6.955379771949535E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999111351517631	WITHOUT_CLASSIFICATION	8.886484823690635E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999111351517631	WITHOUT_CLASSIFICATION	8.886484823690635E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999497498413981	WITHOUT_CLASSIFICATION	5.025015860192009E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999938762086737	WITHOUT_CLASSIFICATION	6.12379132629845E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.999965361096161	WITHOUT_CLASSIFICATION	3.463890383903623E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999790156893312	WITHOUT_CLASSIFICATION	2.0984310668789767E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999951433739041	WITHOUT_CLASSIFICATION	4.856626095896777E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.998728756118117	WITHOUT_CLASSIFICATION	0.0012712438818830787	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9985536135385367	WITHOUT_CLASSIFICATION	0.0014463864614632715	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998092501881132	WITHOUT_CLASSIFICATION	1.9074981188680213E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9972259704546059	WITHOUT_CLASSIFICATION	0.002774029545394038	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9983317933182663	WITHOUT_CLASSIFICATION	0.0016682066817337283	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998956965430302	WITHOUT_CLASSIFICATION	1.0430345696975748E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999293507336422	WITHOUT_CLASSIFICATION	7.064926635772149E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9884851128260669	WITHOUT_CLASSIFICATION	0.011514887173933069	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9998039294143022	WITHOUT_CLASSIFICATION	1.9607058569786655E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998390956492256	WITHOUT_CLASSIFICATION	1.6090435077435421E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.999234126611281	WITHOUT_CLASSIFICATION	7.658733887191242E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991775004371859	WITHOUT_CLASSIFICATION	8.224995628140267E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997395173700996	WITHOUT_CLASSIFICATION	2.6048262990036644E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999519240674933	WITHOUT_CLASSIFICATION	4.807593250660193E-5	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9997846485936777	WITHOUT_CLASSIFICATION	2.1535140632231097E-4	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999520452807845	WITHOUT_CLASSIFICATION	4.795471921553892E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999116422221427	WITHOUT_CLASSIFICATION	8.835777785729716E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9990852610713722	WITHOUT_CLASSIFICATION	9.147389286278326E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.99961551203651	WITHOUT_CLASSIFICATION	3.8448796349000483E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999892814737875	WITHOUT_CLASSIFICATION	1.0718526212533206E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999116422221427	WITHOUT_CLASSIFICATION	8.835777785729716E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9998441584588704	WITHOUT_CLASSIFICATION	1.5584154112946634E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9994783674229872	WITHOUT_CLASSIFICATION	5.216325770128689E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999925636180051	WITHOUT_CLASSIFICATION	7.436381994776375E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998709764194452	WITHOUT_CLASSIFICATION	1.290235805548603E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999965793481493	WITHOUT_CLASSIFICATION	3.420651850705759E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9977052072852745	WITHOUT_CLASSIFICATION	0.002294792714725665	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999624189043972	WITHOUT_CLASSIFICATION	3.758109560284167E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999082557259019	WITHOUT_CLASSIFICATION	9.1744274098058E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691917610489	WITHOUT_CLASSIFICATION	3.08082389510983E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9997923151629352	WITHOUT_CLASSIFICATION	2.0768483706477703E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691917610489	WITHOUT_CLASSIFICATION	3.08082389510983E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998049146869135	WITHOUT_CLASSIFICATION	1.9508531308647616E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9993278563790521	WITHOUT_CLASSIFICATION	6.721436209479134E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9994379042461246	WITHOUT_CLASSIFICATION	5.62095753875436E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998489499062279	WITHOUT_CLASSIFICATION	1.5105009377220984E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997859700743092	WITHOUT_CLASSIFICATION	2.1402992569084783E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999726174262087	WITHOUT_CLASSIFICATION	2.738257379132327E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998462173250059	WITHOUT_CLASSIFICATION	1.5378267499408988E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998036803220344	WITHOUT_CLASSIFICATION	1.963196779655682E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998462173250059	WITHOUT_CLASSIFICATION	1.5378267499408988E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999853583025047	WITHOUT_CLASSIFICATION	1.4641697495299205E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999604892544616	WITHOUT_CLASSIFICATION	3.951074553841153E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999509418788481	WITHOUT_CLASSIFICATION	4.905812115181521E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999900137526674	WITHOUT_CLASSIFICATION	9.986247332688498E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999726174262087	WITHOUT_CLASSIFICATION	2.738257379132327E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998036803220344	WITHOUT_CLASSIFICATION	1.963196779655682E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999853583025047	WITHOUT_CLASSIFICATION	1.4641697495299205E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999552394158349	WITHOUT_CLASSIFICATION	4.4760584165189744E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9997947549089637	WITHOUT_CLASSIFICATION	2.052450910361819E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9998488051123338	WITHOUT_CLASSIFICATION	1.5119488766629206E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9997192082388089	WITHOUT_CLASSIFICATION	2.807917611910336E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994977525215649	WITHOUT_CLASSIFICATION	5.022474784351751E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999438991616472	WITHOUT_CLASSIFICATION	5.610083835276203E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492108924341	WITHOUT_CLASSIFICATION	1.5078910756598704E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999604892544616	WITHOUT_CLASSIFICATION	3.951074553841153E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999533372225039	WITHOUT_CLASSIFICATION	4.666277749616575E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997038512865218	WITHOUT_CLASSIFICATION	2.9614871347808026E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999653865355186	WITHOUT_CLASSIFICATION	3.461346448147956E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492108924341	WITHOUT_CLASSIFICATION	1.5078910756598704E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997642510184166	WITHOUT_CLASSIFICATION	2.357489815833388E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492108924341	WITHOUT_CLASSIFICATION	1.5078910756598704E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999599477259964	WITHOUT_CLASSIFICATION	4.0052274003661044E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997758810035858	WITHOUT_CLASSIFICATION	2.2411899641423168E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998621156818155	WITHOUT_CLASSIFICATION	1.3788431818452832E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999448309242528	WITHOUT_CLASSIFICATION	5.516907574722312E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999317337406207	WITHOUT_CLASSIFICATION	6.826625937926046E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9998642261015552	WITHOUT_CLASSIFICATION	1.3577389844481058E-4	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999028385510632	WITHOUT_CLASSIFICATION	9.716144893679589E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999763421696568	WITHOUT_CLASSIFICATION	2.3657830343203003E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999712081824547	WITHOUT_CLASSIFICATION	2.8791817545350238E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998914375929351	WITHOUT_CLASSIFICATION	1.0856240706495559E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999572992488128	WITHOUT_CLASSIFICATION	4.270075118715057E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998914375929351	WITHOUT_CLASSIFICATION	1.0856240706495559E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.962052474499477	WITHOUT_CLASSIFICATION	0.03794752550052302	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9997339998379169	WITHOUT_CLASSIFICATION	2.6600016208320755E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9993993947592543	WITHOUT_CLASSIFICATION	6.006052407457535E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999943303678187	WITHOUT_CLASSIFICATION	5.66963218122196E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999459683080103	WITHOUT_CLASSIFICATION	5.403169198969806E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9990693620389937	WITHOUT_CLASSIFICATION	9.306379610062335E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999773093185509	WITHOUT_CLASSIFICATION	2.2690681449107623E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996490480264721	WITHOUT_CLASSIFICATION	3.5095197352787177E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985106619214661	WITHOUT_CLASSIFICATION	0.0014893380785339317	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985106619214661	WITHOUT_CLASSIFICATION	0.0014893380785339317	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999827691676676	WITHOUT_CLASSIFICATION	1.72308323324116E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998949860109784	WITHOUT_CLASSIFICATION	1.0501398902164185E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999584710315751	WITHOUT_CLASSIFICATION	4.152896842488513E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997307176222161	WITHOUT_CLASSIFICATION	2.6928237778396186E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999335084346634	WITHOUT_CLASSIFICATION	6.649156533653558E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9834248491772285	WITHOUT_CLASSIFICATION	0.016575150822771497	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9952539586248985	WITHOUT_CLASSIFICATION	0.004746041375101418	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999219695895628	WITHOUT_CLASSIFICATION	7.803041043726432E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996376054877241	WITHOUT_CLASSIFICATION	3.623945122759583E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9995385416628633	WITHOUT_CLASSIFICATION	4.6145833713679866E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997030668580532	WITHOUT_CLASSIFICATION	2.969331419467945E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998167038454002	WITHOUT_CLASSIFICATION	1.8329615459976512E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999840434444077	WITHOUT_CLASSIFICATION	1.5956555592237647E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995307931088757	WITHOUT_CLASSIFICATION	4.6920689112437005E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997745460154996	WITHOUT_CLASSIFICATION	2.2545398450028617E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997745460154996	WITHOUT_CLASSIFICATION	2.2545398450028617E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9997707289715612	WITHOUT_CLASSIFICATION	2.292710284387526E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999763421696568	WITHOUT_CLASSIFICATION	2.3657830343203003E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9973315341849177	WITHOUT_CLASSIFICATION	0.002668465815082298	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999612495378752	WITHOUT_CLASSIFICATION	3.87504621247517E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998333099356942	WITHOUT_CLASSIFICATION	1.666900643058653E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999597421542317	WITHOUT_CLASSIFICATION	4.0257845768296787E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998929447911056	WITHOUT_CLASSIFICATION	1.0705520889435308E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998759946934329	WITHOUT_CLASSIFICATION	1.2400530656714597E-4	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997689520403904	WITHOUT_CLASSIFICATION	2.310479596096458E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999800151771137	WITHOUT_CLASSIFICATION	1.9984822886376773E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9994356718067144	WITHOUT_CLASSIFICATION	5.643281932855033E-4	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999733658969724	WITHOUT_CLASSIFICATION	2.6634103027678937E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999845791116296	WITHOUT_CLASSIFICATION	1.542088837028084E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999598281502009	WITHOUT_CLASSIFICATION	4.017184979915733E-5	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998672719165899	WITHOUT_CLASSIFICATION	1.3272808341017767E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999644145170518	WITHOUT_CLASSIFICATION	3.558548294818135E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999958097941162	WITHOUT_CLASSIFICATION	4.190205883810251E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9991792502082104	WITHOUT_CLASSIFICATION	8.207497917895191E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999969586609168	WITHOUT_CLASSIFICATION	3.041339083280991E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998181652050965	WITHOUT_CLASSIFICATION	1.818347949035028E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999209449944553	WITHOUT_CLASSIFICATION	7.90550055447302E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990266250621334	WITHOUT_CLASSIFICATION	9.733749378666696E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999609071915714	WITHOUT_CLASSIFICATION	3.909280842851169E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999718459590828	WITHOUT_CLASSIFICATION	2.8154040917190932E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998161386161815	WITHOUT_CLASSIFICATION	1.8386138381852908E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998138225486466	WITHOUT_CLASSIFICATION	1.8617745135344585E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9993260683573256	WITHOUT_CLASSIFICATION	6.73931642674357E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999248835497677	WITHOUT_CLASSIFICATION	7.511645023229766E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.997516956111679	WITHOUT_CLASSIFICATION	0.0024830438883209176	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9997713620986116	WITHOUT_CLASSIFICATION	2.2863790138842894E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998130311755667	WITHOUT_CLASSIFICATION	1.8696882443327876E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998034582026306	WITHOUT_CLASSIFICATION	1.9654179736943865E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9996269357196512	WITHOUT_CLASSIFICATION	3.730642803487881E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9975061318231627	WITHOUT_CLASSIFICATION	0.0024938681768372313	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9951067895838882	WITHOUT_CLASSIFICATION	0.004893210416111813	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9576939220334559	WITHOUT_CLASSIFICATION	0.042306077966544016	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998496482985911	WITHOUT_CLASSIFICATION	1.5035170140881169E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998496482985911	WITHOUT_CLASSIFICATION	1.5035170140881169E-4	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999694647822813	WITHOUT_CLASSIFICATION	3.053521771858927E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999767102040721	WITHOUT_CLASSIFICATION	2.3289795927838052E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999955968445684	WITHOUT_CLASSIFICATION	4.4031554316020127E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999955968445684	WITHOUT_CLASSIFICATION	4.4031554316020127E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999940500880248	WITHOUT_CLASSIFICATION	5.949911975330576E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999406557320787	WITHOUT_CLASSIFICATION	5.934426792136282E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9991605918239872	WITHOUT_CLASSIFICATION	8.394081760128561E-4	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999949545573125	WITHOUT_CLASSIFICATION	5.045442687555344E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997713625908463	WITHOUT_CLASSIFICATION	2.2863740915363368E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998649038444253	WITHOUT_CLASSIFICATION	1.3509615557467412E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998649038444253	WITHOUT_CLASSIFICATION	1.3509615557467412E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9997450835468426	WITHOUT_CLASSIFICATION	2.5491645315741453E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998658368915099	WITHOUT_CLASSIFICATION	1.3416310849003027E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9998980256950297	WITHOUT_CLASSIFICATION	1.0197430497017431E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9998980256950297	WITHOUT_CLASSIFICATION	1.0197430497017431E-4	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999389260477297	WITHOUT_CLASSIFICATION	6.107395227028275E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998916219855374	WITHOUT_CLASSIFICATION	1.0837801446265164E-4	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999751583067295	WITHOUT_CLASSIFICATION	2.4841693270571618E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999957399736005	WITHOUT_CLASSIFICATION	4.2600263995341996E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999960594452094	WITHOUT_CLASSIFICATION	3.940554790592941E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999059197744395	WITHOUT_CLASSIFICATION	9.408022556053402E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998860588978665	WITHOUT_CLASSIFICATION	1.1394110213343352E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999841868117476	WITHOUT_CLASSIFICATION	1.5813188252340056E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999922274572042	WITHOUT_CLASSIFICATION	7.772542795792335E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999851536465957	WITHOUT_CLASSIFICATION	1.4846353404275626E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998169894021691	WITHOUT_CLASSIFICATION	1.8301059783084245E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998805090077366	WITHOUT_CLASSIFICATION	1.1949099226341423E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9998607276117952	WITHOUT_CLASSIFICATION	1.3927238820482854E-4	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9995903568712329	WITHOUT_CLASSIFICATION	4.096431287671651E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999010442074621	WITHOUT_CLASSIFICATION	9.895579253790044E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997629643531107	WITHOUT_CLASSIFICATION	2.3703564688925125E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999035391005624	WITHOUT_CLASSIFICATION	9.646089943768576E-5	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9994390398227817	WITHOUT_CLASSIFICATION	5.609601772183496E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999481381244237	WITHOUT_CLASSIFICATION	5.1861875576227234E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997317261093324	WITHOUT_CLASSIFICATION	2.682738906677403E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9995043577453309	WITHOUT_CLASSIFICATION	4.956422546691686E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997292897186772	WITHOUT_CLASSIFICATION	2.7071028132279515E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9997775249550402	WITHOUT_CLASSIFICATION	2.2247504495981829E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9987424655130455	WITHOUT_CLASSIFICATION	0.0012575344869545566	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9989454869200021	WITHOUT_CLASSIFICATION	0.0010545130799978566	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9998862468260407	WITHOUT_CLASSIFICATION	1.1375317395931116E-4	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999511344635771	WITHOUT_CLASSIFICATION	4.8865536422997236E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999972002236388	WITHOUT_CLASSIFICATION	2.7997763611932637E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999534419071598	WITHOUT_CLASSIFICATION	4.6558092840145874E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999967163134917	WITHOUT_CLASSIFICATION	3.283686508325508E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998812578392146	WITHOUT_CLASSIFICATION	1.1874216078542073E-4	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999582665708979	WITHOUT_CLASSIFICATION	4.173342910211269E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999901273586476	WITHOUT_CLASSIFICATION	9.872641352562365E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998646490256161	WITHOUT_CLASSIFICATION	1.3535097438392352E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999858221279218	WITHOUT_CLASSIFICATION	1.4177872078212E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998595364334142	WITHOUT_CLASSIFICATION	1.404635665858158E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9997854435179608	WITHOUT_CLASSIFICATION	2.145564820391312E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9988599123323508	WITHOUT_CLASSIFICATION	0.0011400876676492058	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999180344280368	WITHOUT_CLASSIFICATION	8.196557196313268E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.999932202930955	WITHOUT_CLASSIFICATION	6.779706904506418E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.99985997659125	WITHOUT_CLASSIFICATION	1.4002340874998725E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9998989533744025	WITHOUT_CLASSIFICATION	1.0104662559741471E-4	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.998063321412385	WITHOUT_CLASSIFICATION	0.0019366785876150485	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999392651444979	WITHOUT_CLASSIFICATION	6.0734855502165574E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9997805601029998	WITHOUT_CLASSIFICATION	2.1943989700020177E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997545556236425	WITHOUT_CLASSIFICATION	2.4544437635748445E-4	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999657842631073	WITHOUT_CLASSIFICATION	3.4215736892695365E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999915192781101	WITHOUT_CLASSIFICATION	8.480721889923398E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999862892489524	WITHOUT_CLASSIFICATION	1.3710751047485943E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999945597506554	WITHOUT_CLASSIFICATION	5.440249344638801E-6	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995450181928595	WITHOUT_CLASSIFICATION	4.5498180714050935E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998965434787461	WITHOUT_CLASSIFICATION	1.034565212538367E-4	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9984545122576904	WITHOUT_CLASSIFICATION	0.0015454877423095566	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999335234462897	WITHOUT_CLASSIFICATION	6.647655371020975E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9989269301490031	WITHOUT_CLASSIFICATION	0.0010730698509969466	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998174162019163	WITHOUT_CLASSIFICATION	1.8258379808369936E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999636962392537	WITHOUT_CLASSIFICATION	3.630376074619072E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999636962392537	WITHOUT_CLASSIFICATION	3.630376074619072E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999881380437468	WITHOUT_CLASSIFICATION	1.1861956253153324E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9991328490399441	WITHOUT_CLASSIFICATION	8.671509600559443E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999983201005313	WITHOUT_CLASSIFICATION	1.679899468691259E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999383532259791	WITHOUT_CLASSIFICATION	6.164677402089004E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999367414215908	WITHOUT_CLASSIFICATION	6.325857840910358E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9992584116241733	WITHOUT_CLASSIFICATION	7.41588375826729E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999922167686809	WITHOUT_CLASSIFICATION	7.783231319112085E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999580725694351	WITHOUT_CLASSIFICATION	4.192743056477984E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997846840269399	WITHOUT_CLASSIFICATION	2.1531597306012393E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999965415274618	WITHOUT_CLASSIFICATION	3.458472538195851E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999863782369395	WITHOUT_CLASSIFICATION	1.3621763060552423E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9936525948889043	WITHOUT_CLASSIFICATION	0.006347405111095677	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999959513999722	WITHOUT_CLASSIFICATION	4.048600027774467E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999998483398305	WITHOUT_CLASSIFICATION	1.5166016949277273E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991534452706743	WITHOUT_CLASSIFICATION	8.465547293257698E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991534452706743	WITHOUT_CLASSIFICATION	8.465547293257698E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9998598514913344	WITHOUT_CLASSIFICATION	1.401485086656638E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999151848085414	WITHOUT_CLASSIFICATION	8.481519145859412E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999901333620911	WITHOUT_CLASSIFICATION	9.86663790889131E-5	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999663452888667	WITHOUT_CLASSIFICATION	3.3654711133266904E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.99998161204163	WITHOUT_CLASSIFICATION	1.8387958370001196E-5	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998868056996236	WITHOUT_CLASSIFICATION	1.131943003763739E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999364400782359	WITHOUT_CLASSIFICATION	6.355992176407709E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.994416663869876	WITHOUT_CLASSIFICATION	0.005583336130123888	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999992334434178	WITHOUT_CLASSIFICATION	7.665565822040775E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999969389609561	WITHOUT_CLASSIFICATION	3.0610390439934323E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999522818207062	WITHOUT_CLASSIFICATION	4.771817929390909E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9996783533237155	WITHOUT_CLASSIFICATION	3.2164667628459617E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999707953848802	WITHOUT_CLASSIFICATION	2.9204615119748032E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9998777143627127	WITHOUT_CLASSIFICATION	1.2228563728734665E-4	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999021169371927	WITHOUT_CLASSIFICATION	9.78830628072671E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999544756064247	WITHOUT_CLASSIFICATION	4.5524393575198284E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999842675526371	WITHOUT_CLASSIFICATION	1.5732447362957935E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998336867921411	WITHOUT_CLASSIFICATION	1.6631320785892798E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999343475597985	WITHOUT_CLASSIFICATION	6.56524402015177E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999174281934339	WITHOUT_CLASSIFICATION	8.257180656615674E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999503522809411	WITHOUT_CLASSIFICATION	4.9647719059009615E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999914062417119	WITHOUT_CLASSIFICATION	8.593758288135712E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999569988098687	WITHOUT_CLASSIFICATION	4.300119013137897E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991624283712525	WITHOUT_CLASSIFICATION	8.375716287475606E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999626422608271	WITHOUT_CLASSIFICATION	3.735773917278388E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999624199628195	WITHOUT_CLASSIFICATION	3.758003718058778E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997875762972099	WITHOUT_CLASSIFICATION	2.1242370279002268E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9988596774876762	WITHOUT_CLASSIFICATION	0.001140322512323715	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9997636804616236	WITHOUT_CLASSIFICATION	2.3631953837631724E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9994846969562506	WITHOUT_CLASSIFICATION	5.153030437494404E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999794959196114	WITHOUT_CLASSIFICATION	2.050408038861141E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999810208201806	WITHOUT_CLASSIFICATION	1.897917981945781E-5	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999849621053856	WITHOUT_CLASSIFICATION	1.5037894614402294E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9994271492751626	WITHOUT_CLASSIFICATION	5.728507248373558E-4	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992510216414461	WITHOUT_CLASSIFICATION	7.489783585538837E-4	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999700131612557	WITHOUT_CLASSIFICATION	2.998683874441122E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997674767294557	WITHOUT_CLASSIFICATION	2.325232705443258E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998088448388588	WITHOUT_CLASSIFICATION	1.911551611413092E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999832372102332	WITHOUT_CLASSIFICATION	1.6762789766798058E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9966224608864214	WITHOUT_CLASSIFICATION	0.003377539113578653	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9966224608864214	WITHOUT_CLASSIFICATION	0.003377539113578653	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999309897691488	WITHOUT_CLASSIFICATION	6.901023085111442E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.5951612434883191	WITHOUT_CLASSIFICATION	0.40483875651168083	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999948588591876	WITHOUT_CLASSIFICATION	5.141140812292441E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999217805989172	WITHOUT_CLASSIFICATION	7.821940108270227E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9993420798727936	WITHOUT_CLASSIFICATION	6.57920127206525E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9989282954569683	WITHOUT_CLASSIFICATION	0.0010717045430317803	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999348593732466	WITHOUT_CLASSIFICATION	6.51406267534847E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9994296300964938	WITHOUT_CLASSIFICATION	5.703699035062522E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9923064964882257	WITHOUT_CLASSIFICATION	0.007693503511774417	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997559275245403	WITHOUT_CLASSIFICATION	2.4407247545959974E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998514976378813	WITHOUT_CLASSIFICATION	1.4850236211874895E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996510353780786	WITHOUT_CLASSIFICATION	3.4896462192129956E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9992167809649996	WITHOUT_CLASSIFICATION	7.83219035000381E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9997312892390672	WITHOUT_CLASSIFICATION	2.6871076093280724E-4	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9991011290842212	WITHOUT_CLASSIFICATION	8.988709157788032E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9986871223483869	WITHOUT_CLASSIFICATION	0.0013128776516131374	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999773528117711	WITHOUT_CLASSIFICATION	2.2647188228890745E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9955130973208167	WITHOUT_CLASSIFICATION	0.0044869026791833294	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999492989446344	WITHOUT_CLASSIFICATION	5.070105536559654E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999075286249094	WITHOUT_CLASSIFICATION	9.247137509060378E-5	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999018862247272	WITHOUT_CLASSIFICATION	9.811377527284302E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999963969537914	WITHOUT_CLASSIFICATION	3.603046208595398E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998716804090705	WITHOUT_CLASSIFICATION	1.2831959092954315E-4	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997274371328936	WITHOUT_CLASSIFICATION	2.7256286710642655E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9994690175538745	WITHOUT_CLASSIFICATION	5.309824461255334E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998761040519465	WITHOUT_CLASSIFICATION	1.23895948053534E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991716628504089	WITHOUT_CLASSIFICATION	8.283371495910413E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9996177984292758	WITHOUT_CLASSIFICATION	3.822015707242355E-4	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9996913909244676	WITHOUT_CLASSIFICATION	3.0860907553249644E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996696031373813	WITHOUT_CLASSIFICATION	3.3039686261870655E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999858215243133	WITHOUT_CLASSIFICATION	1.4178475686611083E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998394802337687	WITHOUT_CLASSIFICATION	1.6051976623123802E-4	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9998518979078085	WITHOUT_CLASSIFICATION	1.4810209219155075E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998417742809618	WITHOUT_CLASSIFICATION	1.5822571903821301E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999913316816013	WITHOUT_CLASSIFICATION	8.668318398844127E-6	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9968633430908783	WITHOUT_CLASSIFICATION	0.0031366569091216654	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999374292128432	WITHOUT_CLASSIFICATION	6.257078715680566E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999970554391569	WITHOUT_CLASSIFICATION	2.94456084310329E-5	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997430222466485	WITHOUT_CLASSIFICATION	2.569777533515173E-4	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998955245553806	WITHOUT_CLASSIFICATION	1.0447544461948299E-4	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997869325065125	WITHOUT_CLASSIFICATION	2.1306749348746988E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999465476630366	WITHOUT_CLASSIFICATION	5.3452336963452186E-5	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998977532374895	WITHOUT_CLASSIFICATION	1.0224676251050103E-4	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999229444148728	WITHOUT_CLASSIFICATION	7.705558512721216E-5	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999963953360101	WITHOUT_CLASSIFICATION	3.604663989869976E-6	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9987124382032316	WITHOUT_CLASSIFICATION	0.001287561796768363	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9991045099688298	WITHOUT_CLASSIFICATION	8.954900311701284E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999959513999722	WITHOUT_CLASSIFICATION	4.048600027774467E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9983019380017437	WITHOUT_CLASSIFICATION	0.0016980619982562854	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999981012217171	WITHOUT_CLASSIFICATION	1.8987782828986618E-5	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9996527119891517	WITHOUT_CLASSIFICATION	3.4728801084823855E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9994081917469984	WITHOUT_CLASSIFICATION	5.918082530016895E-4	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999977292434944	WITHOUT_CLASSIFICATION	2.270756505585583E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9981796273930601	WITHOUT_CLASSIFICATION	0.0018203726069399918	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9981085240472507	WITHOUT_CLASSIFICATION	0.001891475952749253	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.6789455161261501	WITHOUT_CLASSIFICATION	0.3210544838738501	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999929229578597	WITHOUT_CLASSIFICATION	7.0770421402941645E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9989068959180961	WITHOUT_CLASSIFICATION	0.0010931040819039395	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9931114242525012	WITHOUT_CLASSIFICATION	0.006888575747498849	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987997134059761	WITHOUT_CLASSIFICATION	0.0012002865940239505	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999882274787879	WITHOUT_CLASSIFICATION	1.1772521212051947E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9983966734689657	WITHOUT_CLASSIFICATION	0.0016033265310343256	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999850287756738	WITHOUT_CLASSIFICATION	1.4971224326195345E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995907400474886	WITHOUT_CLASSIFICATION	4.0925995251147066E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999985957411913	WITHOUT_CLASSIFICATION	1.404258808699545E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9983026467873625	WITHOUT_CLASSIFICATION	0.0016973532126375631	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999850287756738	WITHOUT_CLASSIFICATION	1.4971224326195345E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.997866463983342	WITHOUT_CLASSIFICATION	0.0021335360166580357	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9995270896316854	WITHOUT_CLASSIFICATION	4.729103683145692E-4	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999917027108888	WITHOUT_CLASSIFICATION	8.297289111104555E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9960227160829315	WITHOUT_CLASSIFICATION	0.00397728391706854	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999574829910296	WITHOUT_CLASSIFICATION	4.251700897050167E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9970947425149688	WITHOUT_CLASSIFICATION	0.00290525748503123	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999582270898064	WITHOUT_CLASSIFICATION	4.177291019363619E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999391523008716	WITHOUT_CLASSIFICATION	6.084769912844015E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999966061457796	WITHOUT_CLASSIFICATION	3.3938542204370794E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9950414686839245	WITHOUT_CLASSIFICATION	0.00495853131607556	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999598118313782	WITHOUT_CLASSIFICATION	4.0188168621793294E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9610669106158347	WITHOUT_CLASSIFICATION	0.03893308938416527	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999748831454988	WITHOUT_CLASSIFICATION	2.5116854501186156E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999860857539239	WITHOUT_CLASSIFICATION	1.391424607620322E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999714407963988	WITHOUT_CLASSIFICATION	2.8559203601236103E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990266250621334	WITHOUT_CLASSIFICATION	9.733749378666696E-4	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9996326727057315	WITHOUT_CLASSIFICATION	3.673272942685616E-4	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999854724013176	WITHOUT_CLASSIFICATION	1.452759868226205E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9992229751680783	WITHOUT_CLASSIFICATION	7.770248319216602E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9951754028900173	WITHOUT_CLASSIFICATION	0.004824597109982793	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999953962218279	WITHOUT_CLASSIFICATION	4.603778172169151E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999962498223534	WITHOUT_CLASSIFICATION	3.750177646602521E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9992981017158358	WITHOUT_CLASSIFICATION	7.018982841642463E-4	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999989011480561	WITHOUT_CLASSIFICATION	1.0988519439253371E-6	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999983054512295	WITHOUT_CLASSIFICATION	1.6945487705434306E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9996704672484621	WITHOUT_CLASSIFICATION	3.2953275153787707E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9983672399046952	WITHOUT_CLASSIFICATION	0.0016327600953047743	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.99992680008016	WITHOUT_CLASSIFICATION	7.319991984001187E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9775611404679139	WITHOUT_CLASSIFICATION	0.02243885953208614	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999248885530572	WITHOUT_CLASSIFICATION	7.511144694285476E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999652855001943	WITHOUT_CLASSIFICATION	3.47144998057452E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9995062106766633	WITHOUT_CLASSIFICATION	4.937893233366299E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9993266577315769	WITHOUT_CLASSIFICATION	6.733422684230517E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999667223251523	WITHOUT_CLASSIFICATION	3.3277674847744445E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999980919364836	WITHOUT_CLASSIFICATION	1.908063516426619E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999992227982933	WITHOUT_CLASSIFICATION	7.772017065994582E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9995217773725281	WITHOUT_CLASSIFICATION	4.7822262747192104E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996615572279157	WITHOUT_CLASSIFICATION	3.384427720843189E-4	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9998699868861688	WITHOUT_CLASSIFICATION	1.3001311383123822E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997235344893145	WITHOUT_CLASSIFICATION	2.764655106855539E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998478933061582	WITHOUT_CLASSIFICATION	1.521066938417618E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998478933061582	WITHOUT_CLASSIFICATION	1.521066938417618E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9981266102100326	WITHOUT_CLASSIFICATION	0.0018733897899674814	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999818868981918	WITHOUT_CLASSIFICATION	1.811310180825642E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999072391309731	WITHOUT_CLASSIFICATION	9.276086902680063E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7616014193470434	WITHOUT_CLASSIFICATION	0.23839858065295655	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997018400713186	WITHOUT_CLASSIFICATION	2.9815992868138547E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997018400713186	WITHOUT_CLASSIFICATION	2.9815992868138547E-4	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998401239531878	WITHOUT_CLASSIFICATION	1.5987604681211103E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9971878260976141	WITHOUT_CLASSIFICATION	0.0028121739023859813	DEFECT
//	WITHOUT_CLASSIFICATION	0.9995178883066449	WITHOUT_CLASSIFICATION	4.821116933550634E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9997971015038931	WITHOUT_CLASSIFICATION	2.028984961069339E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999613509376369	WITHOUT_CLASSIFICATION	3.86490623630665E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9994301490204421	WITHOUT_CLASSIFICATION	5.69850979557915E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998511867307751	WITHOUT_CLASSIFICATION	1.4881326922486172E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999526864774281	WITHOUT_CLASSIFICATION	4.731352257183772E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9993144098689732	WITHOUT_CLASSIFICATION	6.855901310267656E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257472173346	WITHOUT_CLASSIFICATION	7.425278266531486E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257472173346	WITHOUT_CLASSIFICATION	7.425278266531486E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996238180726256	WITHOUT_CLASSIFICATION	3.7618192737437955E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998979064965797	WITHOUT_CLASSIFICATION	1.0209350342032386E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999090324578294	WITHOUT_CLASSIFICATION	9.096754217064888E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995861158041361	WITHOUT_CLASSIFICATION	4.138841958638896E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9998492969874003	WITHOUT_CLASSIFICATION	1.5070301259968212E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004771044027	WITHOUT_CLASSIFICATION	2.995228955974015E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684168155402	WITHOUT_CLASSIFICATION	2.3158318445979815E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999680699405797	WITHOUT_CLASSIFICATION	3.193005942036754E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998270770500663	WITHOUT_CLASSIFICATION	1.7292294993360183E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9996021332432908	WITHOUT_CLASSIFICATION	3.9786675670920905E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999613948464174	WITHOUT_CLASSIFICATION	3.860515358257228E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9950414686839245	WITHOUT_CLASSIFICATION	0.00495853131607556	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999955247485086	WITHOUT_CLASSIFICATION	4.475251491439583E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9979476921009723	WITHOUT_CLASSIFICATION	0.002052307899027681	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999798644013024	WITHOUT_CLASSIFICATION	2.0135598697654095E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999586046924223	WITHOUT_CLASSIFICATION	4.139530757773735E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999866984838832	WITHOUT_CLASSIFICATION	1.330151611679963E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994933120352795	WITHOUT_CLASSIFICATION	5.066879647205199E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999614869124501	WITHOUT_CLASSIFICATION	3.8513087549902725E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999232904493985	WITHOUT_CLASSIFICATION	7.670955060146792E-5	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9992432247855703	WITHOUT_CLASSIFICATION	7.567752144297924E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995320278224417	WITHOUT_CLASSIFICATION	4.6797217755831493E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995320278224417	WITHOUT_CLASSIFICATION	4.6797217755831493E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999116422221427	WITHOUT_CLASSIFICATION	8.835777785729716E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999980105423929	WITHOUT_CLASSIFICATION	1.989457607119298E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997765921133956	WITHOUT_CLASSIFICATION	2.234078866044813E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994824122866661	WITHOUT_CLASSIFICATION	5.175877133339571E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999153405820566	WITHOUT_CLASSIFICATION	8.465941794342773E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999852604207502	WITHOUT_CLASSIFICATION	1.4739579249861482E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998489499062279	WITHOUT_CLASSIFICATION	1.5105009377220984E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9997630904082041	WITHOUT_CLASSIFICATION	2.3690959179589348E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999552394158349	WITHOUT_CLASSIFICATION	4.4760584165189744E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997987985364567	WITHOUT_CLASSIFICATION	2.0120146354317376E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998492108924341	WITHOUT_CLASSIFICATION	1.5078910756598704E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.998253821726847	WITHOUT_CLASSIFICATION	0.0017461782731530515	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999521206761973	WITHOUT_CLASSIFICATION	4.787932380268098E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999942013001237	WITHOUT_CLASSIFICATION	5.798699876263596E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999937686110001	WITHOUT_CLASSIFICATION	6.231388999957193E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999386396056072	WITHOUT_CLASSIFICATION	6.136039439279183E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9981037222519843	WITHOUT_CLASSIFICATION	0.0018962777480156894	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996061314074577	WITHOUT_CLASSIFICATION	3.9386859254239104E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9990146067430103	WITHOUT_CLASSIFICATION	9.853932569895648E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9926155424935206	WITHOUT_CLASSIFICATION	0.0073844575064795385	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998822480728268	WITHOUT_CLASSIFICATION	1.1775192717323492E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999980757610377	WITHOUT_CLASSIFICATION	1.9242389621944735E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999751583067295	WITHOUT_CLASSIFICATION	2.4841693270571618E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999936716862	WITHOUT_CLASSIFICATION	6.328313798141351E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999786945531582	WITHOUT_CLASSIFICATION	2.1305446841798748E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999786945531582	WITHOUT_CLASSIFICATION	2.1305446841798748E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995131331798683	WITHOUT_CLASSIFICATION	4.868668201316851E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996483213933961	WITHOUT_CLASSIFICATION	3.516786066038905E-4	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999705062230824	WITHOUT_CLASSIFICATION	2.9493776917537127E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998846683910103	WITHOUT_CLASSIFICATION	1.1533160898979415E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999792937738663	WITHOUT_CLASSIFICATION	2.0706226133706247E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998455947944697	WITHOUT_CLASSIFICATION	1.5440520553035056E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9958102769850531	WITHOUT_CLASSIFICATION	0.004189723014946908	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9996268535934141	WITHOUT_CLASSIFICATION	3.731464065859438E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9309779581135471	DEFECT	0.06902204188645296	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.6169421545353784	DEFECT	0.3830578454646215	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.999711112940572	WITHOUT_CLASSIFICATION	2.888870594279718E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9994931103701732	WITHOUT_CLASSIFICATION	5.068896298267516E-4	DEFECT
/*	DEFECT	0.9879910030249608	WITHOUT_CLASSIFICATION	0.012008996975039186	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9956580190697144	WITHOUT_CLASSIFICATION	0.004341980930285647	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9355118830111953	WITHOUT_CLASSIFICATION	0.06448811698880472	DEFECT
// TODO : should this be an error?	DEFECT	0.9974740475167572	WITHOUT_CLASSIFICATION	0.0025259524832428755	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9940347041904967	WITHOUT_CLASSIFICATION	0.005965295809503339	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8281950926313277	DEFECT	0.17180490736867224	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9893433496388211	WITHOUT_CLASSIFICATION	0.010656650361178972	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9893433496388211	WITHOUT_CLASSIFICATION	0.010656650361178972	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9357489601249132	WITHOUT_CLASSIFICATION	0.0642510398750869	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999688482005892	WITHOUT_CLASSIFICATION	3.115179941074846E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.945410416864487	WITHOUT_CLASSIFICATION	0.05458958313551295	DEFECT
// this call is side-effecty	DEFECT	0.9999274238605762	WITHOUT_CLASSIFICATION	7.25761394237664E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.7593686266885771	WITHOUT_CLASSIFICATION	0.24063137331142287	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9985851058894543	WITHOUT_CLASSIFICATION	0.001414894110545626	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.7980715383662519	WITHOUT_CLASSIFICATION	0.20192846163374806	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9996562708055002	WITHOUT_CLASSIFICATION	3.43729194499775E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9927742664114402	WITHOUT_CLASSIFICATION	0.00722573358855983	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.999937718452376	WITHOUT_CLASSIFICATION	6.228154762395239E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9888772735493534	WITHOUT_CLASSIFICATION	0.011122726450646507	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.997744835363113	WITHOUT_CLASSIFICATION	0.002255164636887072	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.5887964745319769	DEFECT	0.4112035254680231	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9143053115108929	DEFECT	0.0856946884891071	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5247150628028996	WITHOUT_CLASSIFICATION	0.4752849371971005	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9555660475133623	WITHOUT_CLASSIFICATION	0.04443395248663771	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9959147581961506	WITHOUT_CLASSIFICATION	0.004085241803849422	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9941510217392484	WITHOUT_CLASSIFICATION	0.005848978260751567	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9905548343487863	WITHOUT_CLASSIFICATION	0.009445165651213646	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9893433496388211	WITHOUT_CLASSIFICATION	0.010656650361178972	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9837905552366747	DEFECT	0.016209444763325365	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9536188583613362	WITHOUT_CLASSIFICATION	0.04638114163866383	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9996094373578328	WITHOUT_CLASSIFICATION	3.9056264216719936E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9904916546095994	WITHOUT_CLASSIFICATION	0.009508345390400515	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9705379065214744	WITHOUT_CLASSIFICATION	0.029462093478525592	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9982273537639985	WITHOUT_CLASSIFICATION	0.0017726462360014887	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9500900011771698	WITHOUT_CLASSIFICATION	0.04990999882283026	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.995813613762612	WITHOUT_CLASSIFICATION	0.004186386237388049	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9958829278998073	WITHOUT_CLASSIFICATION	0.004117072100192763	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8437644855056171	WITHOUT_CLASSIFICATION	0.156235514494383	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999197696259069	WITHOUT_CLASSIFICATION	8.023037409316482E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9969912907131722	WITHOUT_CLASSIFICATION	0.0030087092868278627	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9791284405030722	WITHOUT_CLASSIFICATION	0.020871559496927795	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9960107435800359	WITHOUT_CLASSIFICATION	0.003989256419964127	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.989493001784107	WITHOUT_CLASSIFICATION	0.01050699821589289	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6472189874561186	DEFECT	0.3527810125438814	WITHOUT_CLASSIFICATION
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999905292329031	DEFECT	9.470767096811748E-6	WITHOUT_CLASSIFICATION
