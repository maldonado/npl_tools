//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999926189347769	WITHOUT_CLASSIFICATION	7.381065223103959E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9993230086859924	WITHOUT_CLASSIFICATION	6.769913140075734E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9997640344509554	WITHOUT_CLASSIFICATION	2.3596554904457934E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999958549561549	WITHOUT_CLASSIFICATION	4.145043845116661E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999958549561549	WITHOUT_CLASSIFICATION	4.145043845116661E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999842016310455	WITHOUT_CLASSIFICATION	1.57983689544901E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997634205035727	WITHOUT_CLASSIFICATION	2.3657949642731714E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998967449590569	WITHOUT_CLASSIFICATION	1.0325504094308555E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999504351595383	WITHOUT_CLASSIFICATION	4.956484046164781E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999708110782416	WITHOUT_CLASSIFICATION	2.9188921758403335E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999708110782416	WITHOUT_CLASSIFICATION	2.9188921758403335E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9993804045881808	WITHOUT_CLASSIFICATION	6.195954118193255E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999900074861005	WITHOUT_CLASSIFICATION	9.992513899500583E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999390930107327	WITHOUT_CLASSIFICATION	6.0906989267404535E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998859001512455	WITHOUT_CLASSIFICATION	1.1409984875460809E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9995473312917161	WITHOUT_CLASSIFICATION	4.5266870828378924E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.999459313141321	WITHOUT_CLASSIFICATION	5.406868586790527E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9818602280231221	WITHOUT_CLASSIFICATION	0.018139771976877907	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999478145145666	WITHOUT_CLASSIFICATION	5.218548543336912E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9996092355604261	WITHOUT_CLASSIFICATION	3.9076443957391594E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9994592424389002	WITHOUT_CLASSIFICATION	5.407575610998341E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997828709010192	WITHOUT_CLASSIFICATION	2.1712909898075915E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998787541345551	WITHOUT_CLASSIFICATION	1.2124586544496687E-4	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9135091368956922	WITHOUT_CLASSIFICATION	0.08649086310430769	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9963111244035215	WITHOUT_CLASSIFICATION	0.0036888755964784637	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9963111244035215	WITHOUT_CLASSIFICATION	0.0036888755964784637	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9995741556421288	WITHOUT_CLASSIFICATION	4.258443578712697E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996625084809845	WITHOUT_CLASSIFICATION	3.374915190155352E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9997392039752617	WITHOUT_CLASSIFICATION	2.6079602473827245E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997776878450186	WITHOUT_CLASSIFICATION	2.2231215498126408E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999431548245173	WITHOUT_CLASSIFICATION	5.6845175482755804E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99963106692758	WITHOUT_CLASSIFICATION	3.689330724199836E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999915615832886	WITHOUT_CLASSIFICATION	8.438416711397721E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.6555129998507844	DEFECT	0.34448700014921557	WITHOUT_CLASSIFICATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9997314128234155	WITHOUT_CLASSIFICATION	2.6858717658456114E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9997314128234155	WITHOUT_CLASSIFICATION	2.6858717658456114E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997582384278885	WITHOUT_CLASSIFICATION	2.417615721115353E-4	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9749588286190165	WITHOUT_CLASSIFICATION	0.02504117138098345	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9995437940496514	WITHOUT_CLASSIFICATION	4.5620595034861426E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994911912370564	WITHOUT_CLASSIFICATION	5.08808762943546E-4	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999764221297713	WITHOUT_CLASSIFICATION	2.3577870228677447E-5	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999983737078532	WITHOUT_CLASSIFICATION	1.6262921468400372E-6	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9749676758358962	WITHOUT_CLASSIFICATION	0.025032324164103822	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9993599051398516	WITHOUT_CLASSIFICATION	6.400948601484113E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999699818420968	WITHOUT_CLASSIFICATION	3.0018157903197146E-4	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999084806180683	WITHOUT_CLASSIFICATION	9.15193819317946E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999495954619385	WITHOUT_CLASSIFICATION	5.0404538061452544E-5	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9998699142660132	WITHOUT_CLASSIFICATION	1.3008573398675424E-4	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999867357065441	WITHOUT_CLASSIFICATION	1.3264293455917671E-5	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990217386358404	WITHOUT_CLASSIFICATION	9.78261364159504E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9975350016169703	WITHOUT_CLASSIFICATION	0.0024649983830297376	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9977231501311091	WITHOUT_CLASSIFICATION	0.002276849868890904	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999477840534479	WITHOUT_CLASSIFICATION	5.221594655207305E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9988698903566487	WITHOUT_CLASSIFICATION	0.0011301096433512156	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9996996018194078	WITHOUT_CLASSIFICATION	3.003981805922145E-4	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997562778801533	WITHOUT_CLASSIFICATION	2.4372211984663347E-4	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999860731193753	WITHOUT_CLASSIFICATION	1.392688062466063E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999968642174579	WITHOUT_CLASSIFICATION	3.135782542119034E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998844748826932	WITHOUT_CLASSIFICATION	1.155251173068893E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9995027923271504	WITHOUT_CLASSIFICATION	4.972076728494921E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9966711382185249	WITHOUT_CLASSIFICATION	0.0033288617814751435	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9996136565115175	WITHOUT_CLASSIFICATION	3.863434884824789E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999395178656104	WITHOUT_CLASSIFICATION	6.0482134389574225E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999961687808894	WITHOUT_CLASSIFICATION	3.831219110564976E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9996499347093514	WITHOUT_CLASSIFICATION	3.500652906486103E-4	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999929505276386	WITHOUT_CLASSIFICATION	7.049472361356731E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999920395044225	WITHOUT_CLASSIFICATION	7.96049557750994E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999955691726395	WITHOUT_CLASSIFICATION	4.4308273605016895E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998503961968599	WITHOUT_CLASSIFICATION	1.496038031400334E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993724222101636	WITHOUT_CLASSIFICATION	6.275777898363972E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999916090730194	WITHOUT_CLASSIFICATION	8.390926980588088E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999957374081466	WITHOUT_CLASSIFICATION	4.2625918533973064E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993724222101636	WITHOUT_CLASSIFICATION	6.275777898363972E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9993828489813645	WITHOUT_CLASSIFICATION	6.171510186354965E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9982922680774328	WITHOUT_CLASSIFICATION	0.001707731922567221	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9998672663531173	WITHOUT_CLASSIFICATION	1.3273364688270087E-4	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999661065439991	WITHOUT_CLASSIFICATION	3.3893456000982344E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999734104089525	WITHOUT_CLASSIFICATION	2.658959104754368E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999734104089525	WITHOUT_CLASSIFICATION	2.658959104754368E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997314128234155	WITHOUT_CLASSIFICATION	2.6858717658456114E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999997856282648	WITHOUT_CLASSIFICATION	2.143717352000558E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999317507393077	WITHOUT_CLASSIFICATION	6.82492606923055E-5	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998975163902962	WITHOUT_CLASSIFICATION	1.0248360970384347E-4	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999799730682065	WITHOUT_CLASSIFICATION	2.0026931793447953E-5	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998378871088178	WITHOUT_CLASSIFICATION	1.621128911821687E-4	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999878270066519	WITHOUT_CLASSIFICATION	1.2172993348069451E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999133083009978	WITHOUT_CLASSIFICATION	8.669169900227144E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9998903183103663	WITHOUT_CLASSIFICATION	1.096816896336656E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999854452904007	WITHOUT_CLASSIFICATION	1.455470959941114E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999854452904007	WITHOUT_CLASSIFICATION	1.455470959941114E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996739484536589	WITHOUT_CLASSIFICATION	3.2605154634111357E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999854117731714	WITHOUT_CLASSIFICATION	1.4588226828596697E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998275651315394	WITHOUT_CLASSIFICATION	1.7243486846074997E-4	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999854452904007	WITHOUT_CLASSIFICATION	1.455470959941114E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996739484536589	WITHOUT_CLASSIFICATION	3.2605154634111357E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996739484536589	WITHOUT_CLASSIFICATION	3.2605154634111357E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999846668226071	WITHOUT_CLASSIFICATION	1.5333177392890844E-4	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999493832723529	WITHOUT_CLASSIFICATION	5.0616727647049675E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999519756893521	WITHOUT_CLASSIFICATION	4.802431064798964E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999481698930518	WITHOUT_CLASSIFICATION	5.1830106948193896E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9988647202251182	WITHOUT_CLASSIFICATION	0.0011352797748818552	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9988647202251182	WITHOUT_CLASSIFICATION	0.0011352797748818552	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9994863594571141	WITHOUT_CLASSIFICATION	5.136405428858915E-4	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993350184201782	WITHOUT_CLASSIFICATION	6.649815798217997E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.999966838964998	WITHOUT_CLASSIFICATION	3.316103500189923E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998147391764045	WITHOUT_CLASSIFICATION	1.8526082359546998E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998147391764045	WITHOUT_CLASSIFICATION	1.8526082359546998E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9994658991509561	WITHOUT_CLASSIFICATION	5.341008490438975E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989167297844354	WITHOUT_CLASSIFICATION	0.0010832702155646823	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9989945939947311	WITHOUT_CLASSIFICATION	0.0010054060052688517	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999113151649699	WITHOUT_CLASSIFICATION	8.868483503006366E-5	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999655511129815	WITHOUT_CLASSIFICATION	3.4448887018557603E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998352239600514	WITHOUT_CLASSIFICATION	1.6477603994854016E-4	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994737375935141	WITHOUT_CLASSIFICATION	5.262624064858996E-4	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999677229294871	WITHOUT_CLASSIFICATION	3.227707051287009E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9989945939947311	WITHOUT_CLASSIFICATION	0.0010054060052688517	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9998227185136405	WITHOUT_CLASSIFICATION	1.772814863594231E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999444861580498	WITHOUT_CLASSIFICATION	5.551384195028054E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999444861580498	WITHOUT_CLASSIFICATION	5.551384195028054E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999882920510412	WITHOUT_CLASSIFICATION	1.1707948958748305E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999889912415934	WITHOUT_CLASSIFICATION	1.1008758406720966E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9965754494785712	WITHOUT_CLASSIFICATION	0.0034245505214288824	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.998811374142984	WITHOUT_CLASSIFICATION	0.0011886258570159625	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999691659254152	WITHOUT_CLASSIFICATION	3.0834074584880796E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9998286629173342	WITHOUT_CLASSIFICATION	1.7133708266578828E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9996558118176616	WITHOUT_CLASSIFICATION	3.4418818233835545E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999422103646801	WITHOUT_CLASSIFICATION	5.778963531997573E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999021930007492	WITHOUT_CLASSIFICATION	9.780699925072587E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999021930007492	WITHOUT_CLASSIFICATION	9.780699925072587E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999926189347769	WITHOUT_CLASSIFICATION	7.381065223103959E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9998606743455006	WITHOUT_CLASSIFICATION	1.3932565449933462E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999372088354797	WITHOUT_CLASSIFICATION	6.279116452033464E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999360071161655	WITHOUT_CLASSIFICATION	6.399288383454576E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999455921167966	WITHOUT_CLASSIFICATION	5.440788320336495E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9997376502574578	WITHOUT_CLASSIFICATION	2.623497425422357E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9981944742959984	WITHOUT_CLASSIFICATION	0.0018055257040015813	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9998030779166753	WITHOUT_CLASSIFICATION	1.9692208332468714E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999451266425042	WITHOUT_CLASSIFICATION	5.487335749579506E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999805049568206	WITHOUT_CLASSIFICATION	1.9495043179404306E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9997376502574578	WITHOUT_CLASSIFICATION	2.623497425422357E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9985598903462115	WITHOUT_CLASSIFICATION	0.001440109653788482	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9994997666518142	WITHOUT_CLASSIFICATION	5.002333481857194E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999945656249954	WITHOUT_CLASSIFICATION	5.434375004594355E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999490674505076	WITHOUT_CLASSIFICATION	5.093254949249234E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9995279920724661	WITHOUT_CLASSIFICATION	4.720079275340052E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999958549561549	WITHOUT_CLASSIFICATION	4.145043845116661E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999359168319349	WITHOUT_CLASSIFICATION	6.408316806509861E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999257232849431	WITHOUT_CLASSIFICATION	7.427671505683515E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997276840002216	WITHOUT_CLASSIFICATION	2.7231599977829956E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9998976784539074	WITHOUT_CLASSIFICATION	1.0232154609259203E-4	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998695959070968	WITHOUT_CLASSIFICATION	1.3040409290328268E-4	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998038456965329	WITHOUT_CLASSIFICATION	1.9615430346706572E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998828036061048	WITHOUT_CLASSIFICATION	1.1719639389529204E-4	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9992542678958952	WITHOUT_CLASSIFICATION	7.457321041048523E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9993265823222602	WITHOUT_CLASSIFICATION	6.734176777397477E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999374826622777	WITHOUT_CLASSIFICATION	6.251733772225562E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999451266425042	WITHOUT_CLASSIFICATION	5.487335749579506E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998695959070968	WITHOUT_CLASSIFICATION	1.3040409290328268E-4	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999842016310455	WITHOUT_CLASSIFICATION	1.57983689544901E-5	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999061679729356	WITHOUT_CLASSIFICATION	9.383202706437803E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999054394674107	WITHOUT_CLASSIFICATION	9.456053258936412E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998917107942846	WITHOUT_CLASSIFICATION	1.0828920571536166E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9998695537233041	WITHOUT_CLASSIFICATION	1.3044627669595339E-4	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9978573920302192	WITHOUT_CLASSIFICATION	0.0021426079697807222	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999560366843595	WITHOUT_CLASSIFICATION	4.3963315640457726E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998729335540792	WITHOUT_CLASSIFICATION	1.270664459207228E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998729335540792	WITHOUT_CLASSIFICATION	1.270664459207228E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999918113349019	WITHOUT_CLASSIFICATION	8.188665098089313E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999180939684762	WITHOUT_CLASSIFICATION	8.190603152381788E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998342616260263	WITHOUT_CLASSIFICATION	1.6573837397367634E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999387216588631	WITHOUT_CLASSIFICATION	6.12783411368938E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999887122001034	WITHOUT_CLASSIFICATION	1.1287799896587344E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.999963391235389	WITHOUT_CLASSIFICATION	3.6608764610917644E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999807091475709	WITHOUT_CLASSIFICATION	1.92908524291676E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997634205035727	WITHOUT_CLASSIFICATION	2.3657949642731714E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.999951737782455	WITHOUT_CLASSIFICATION	4.826221754503142E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.999951737782455	WITHOUT_CLASSIFICATION	4.826221754503142E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999951737782455	WITHOUT_CLASSIFICATION	4.826221754503142E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999500114074629	WITHOUT_CLASSIFICATION	4.998859253714426E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999951737782455	WITHOUT_CLASSIFICATION	4.826221754503142E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998394540599028	WITHOUT_CLASSIFICATION	1.6054594009715708E-4	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9996473891535173	WITHOUT_CLASSIFICATION	3.526108464827231E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999843790495637	WITHOUT_CLASSIFICATION	1.5620950436306648E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.999451266425042	WITHOUT_CLASSIFICATION	5.487335749579506E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998695959070968	WITHOUT_CLASSIFICATION	1.3040409290328268E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9998695959070968	WITHOUT_CLASSIFICATION	1.3040409290328268E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999629881712065	WITHOUT_CLASSIFICATION	3.701182879353914E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999124438095571	WITHOUT_CLASSIFICATION	8.755619044289375E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9997667107492111	WITHOUT_CLASSIFICATION	2.3328925078903529E-4	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999504351595383	WITHOUT_CLASSIFICATION	4.956484046164781E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999504351595383	WITHOUT_CLASSIFICATION	4.956484046164781E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9990906987880563	WITHOUT_CLASSIFICATION	9.093012119435788E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999703372544709	WITHOUT_CLASSIFICATION	2.966274552903325E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9996861384033974	WITHOUT_CLASSIFICATION	3.138615966026337E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.999600078111531	WITHOUT_CLASSIFICATION	3.9992188846904293E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9995500667692333	WITHOUT_CLASSIFICATION	4.4993323076666984E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9994828424615428	WITHOUT_CLASSIFICATION	5.17157538457056E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999708110782416	WITHOUT_CLASSIFICATION	2.9188921758403335E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999480172353562	WITHOUT_CLASSIFICATION	5.198276464380561E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999480172353562	WITHOUT_CLASSIFICATION	5.198276464380561E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9993804045881808	WITHOUT_CLASSIFICATION	6.195954118193255E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9993804045881808	WITHOUT_CLASSIFICATION	6.195954118193255E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9990749927784105	WITHOUT_CLASSIFICATION	9.250072215895043E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9990749927784105	WITHOUT_CLASSIFICATION	9.250072215895043E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997579466298356	WITHOUT_CLASSIFICATION	2.420533701643667E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997579466298356	WITHOUT_CLASSIFICATION	2.420533701643667E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999504351595383	WITHOUT_CLASSIFICATION	4.956484046164781E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999708110782416	WITHOUT_CLASSIFICATION	2.9188921758403335E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999480172353562	WITHOUT_CLASSIFICATION	5.198276464380561E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999480172353562	WITHOUT_CLASSIFICATION	5.198276464380561E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9993804045881808	WITHOUT_CLASSIFICATION	6.195954118193255E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9990749927784105	WITHOUT_CLASSIFICATION	9.250072215895043E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9990749927784105	WITHOUT_CLASSIFICATION	9.250072215895043E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997579466298356	WITHOUT_CLASSIFICATION	2.420533701643667E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999764906081834	WITHOUT_CLASSIFICATION	2.3509391816590462E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9996648362941227	WITHOUT_CLASSIFICATION	3.35163705877335E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998738252253936	WITHOUT_CLASSIFICATION	1.2617477460643813E-4	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999801848467943	WITHOUT_CLASSIFICATION	1.981515320573998E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999236705159515	WITHOUT_CLASSIFICATION	7.632948404845408E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9994513769682033	WITHOUT_CLASSIFICATION	5.486230317966872E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.984434760254854	WITHOUT_CLASSIFICATION	0.01556523974514609	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9028807169497578	WITHOUT_CLASSIFICATION	0.09711928305024216	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999842517998361	WITHOUT_CLASSIFICATION	1.5748200163907594E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9996947793068827	WITHOUT_CLASSIFICATION	3.0522069311736833E-4	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9997877272912342	WITHOUT_CLASSIFICATION	2.1227270876569935E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998533419258325	WITHOUT_CLASSIFICATION	1.4665807416750293E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997314128234155	WITHOUT_CLASSIFICATION	2.6858717658456114E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9994513769682033	WITHOUT_CLASSIFICATION	5.486230317966872E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999404481574481	WITHOUT_CLASSIFICATION	5.955184255189528E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998533033871785	WITHOUT_CLASSIFICATION	1.466966128215501E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998533033871785	WITHOUT_CLASSIFICATION	1.466966128215501E-4	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997848802918329	WITHOUT_CLASSIFICATION	2.1511970816701353E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999383906461323	WITHOUT_CLASSIFICATION	6.160935386769406E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.997894447277237	WITHOUT_CLASSIFICATION	0.002105552722762988	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9984972457535578	WITHOUT_CLASSIFICATION	0.0015027542464422573	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9984972457535578	WITHOUT_CLASSIFICATION	0.0015027542464422573	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9995473312917161	WITHOUT_CLASSIFICATION	4.5266870828378924E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9992977613581734	WITHOUT_CLASSIFICATION	7.022386418265851E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9992977613581734	WITHOUT_CLASSIFICATION	7.022386418265851E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999447852380412	WITHOUT_CLASSIFICATION	5.521476195879412E-4	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9998058044318978	WITHOUT_CLASSIFICATION	1.941955681020846E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999478145145666	WITHOUT_CLASSIFICATION	5.218548543336912E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8169884624625996	WITHOUT_CLASSIFICATION	0.18301153753740038	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.999459313141321	WITHOUT_CLASSIFICATION	5.406868586790527E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999378339716908	WITHOUT_CLASSIFICATION	6.216602830920343E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999545798224975	WITHOUT_CLASSIFICATION	4.5420177502483187E-5	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999005856003251	WITHOUT_CLASSIFICATION	9.941439967475788E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999932403618228	WITHOUT_CLASSIFICATION	6.759638177193218E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998787541345551	WITHOUT_CLASSIFICATION	1.2124586544496687E-4	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999969452335381	WITHOUT_CLASSIFICATION	3.0547664619965615E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9994490709301203	WITHOUT_CLASSIFICATION	5.509290698797049E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998702947452665	WITHOUT_CLASSIFICATION	1.2970525473361355E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999478145145666	WITHOUT_CLASSIFICATION	5.218548543336912E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9997657608586331	WITHOUT_CLASSIFICATION	2.342391413669418E-4	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9998895796480107	WITHOUT_CLASSIFICATION	1.1042035198920292E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9994512321557767	WITHOUT_CLASSIFICATION	5.487678442232347E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998702947452665	WITHOUT_CLASSIFICATION	1.2970525473361355E-4	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9997657608586331	WITHOUT_CLASSIFICATION	2.342391413669418E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9994512321557767	WITHOUT_CLASSIFICATION	5.487678442232347E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999216979086185	WITHOUT_CLASSIFICATION	7.830209138142148E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999216979086185	WITHOUT_CLASSIFICATION	7.830209138142148E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9998626466964173	WITHOUT_CLASSIFICATION	1.3735330358268866E-4	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999840953949009	WITHOUT_CLASSIFICATION	1.590460509920535E-5	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.999970089456504	WITHOUT_CLASSIFICATION	2.991054349594743E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9998026061882054	WITHOUT_CLASSIFICATION	1.9739381179458576E-4	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999371183293552	WITHOUT_CLASSIFICATION	6.288167064477188E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9985460969048037	WITHOUT_CLASSIFICATION	0.0014539030951963283	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9992781256846254	WITHOUT_CLASSIFICATION	7.218743153745926E-4	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999371183293552	WITHOUT_CLASSIFICATION	6.288167064477188E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9994592424389002	WITHOUT_CLASSIFICATION	5.407575610998341E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996602838961651	WITHOUT_CLASSIFICATION	3.3971610383483434E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998702947452665	WITHOUT_CLASSIFICATION	1.2970525473361355E-4	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9994656113448318	WITHOUT_CLASSIFICATION	5.343886551681486E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9998864856126121	WITHOUT_CLASSIFICATION	1.1351438738802644E-4	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9965035233651502	WITHOUT_CLASSIFICATION	0.00349647663484991	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999335074967284	WITHOUT_CLASSIFICATION	6.649250327160862E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9996569232574604	WITHOUT_CLASSIFICATION	3.430767425395574E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999767000777	WITHOUT_CLASSIFICATION	2.3299922300005142E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9997418616879176	WITHOUT_CLASSIFICATION	2.581383120824583E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9997738498243008	WITHOUT_CLASSIFICATION	2.2615017569926855E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998718536158259	WITHOUT_CLASSIFICATION	1.281463841742346E-4	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9993280633881808	WITHOUT_CLASSIFICATION	6.719366118191082E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998787541345551	WITHOUT_CLASSIFICATION	1.2124586544496687E-4	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999538965485928	WITHOUT_CLASSIFICATION	4.6103451407186684E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9993962011416192	WITHOUT_CLASSIFICATION	6.03798858380852E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999327337195465	WITHOUT_CLASSIFICATION	6.72662804534928E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998993596613378	WITHOUT_CLASSIFICATION	1.0064033866222024E-4	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9998993596613378	WITHOUT_CLASSIFICATION	1.0064033866222024E-4	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999888567829172	WITHOUT_CLASSIFICATION	1.1143217082804514E-4	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999986521871436	WITHOUT_CLASSIFICATION	1.3478128563520346E-6	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999680825095426	WITHOUT_CLASSIFICATION	3.1917490457375965E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9994989472200816	WITHOUT_CLASSIFICATION	5.010527799184311E-4	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998740228370534	WITHOUT_CLASSIFICATION	1.2597716294661116E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9995545063630529	WITHOUT_CLASSIFICATION	4.454936369471306E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9995545063630529	WITHOUT_CLASSIFICATION	4.454936369471306E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9996884314490759	WITHOUT_CLASSIFICATION	3.1156855092404935E-4	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999822937820669	WITHOUT_CLASSIFICATION	1.7706217933100363E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999290602748206	WITHOUT_CLASSIFICATION	7.093972517928902E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998537090957516	WITHOUT_CLASSIFICATION	1.4629090424835096E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998126124853998	WITHOUT_CLASSIFICATION	1.873875146002659E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999385006619363	WITHOUT_CLASSIFICATION	6.149933806364876E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999754102828129	WITHOUT_CLASSIFICATION	2.4589717187047087E-5	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998985828971341	WITHOUT_CLASSIFICATION	1.0141710286600714E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998387808699791	WITHOUT_CLASSIFICATION	1.6121913002090598E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998303920023599	WITHOUT_CLASSIFICATION	1.6960799764012557E-4	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9997875358212809	WITHOUT_CLASSIFICATION	2.1246417871909203E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9966985768701022	WITHOUT_CLASSIFICATION	0.003301423129897874	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998454969133473	WITHOUT_CLASSIFICATION	1.5450308665259784E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998407911332646	WITHOUT_CLASSIFICATION	1.5920886673528742E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9990632173845952	WITHOUT_CLASSIFICATION	9.367826154047742E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9996416410911286	WITHOUT_CLASSIFICATION	3.5835890887141425E-4	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999842867827523	WITHOUT_CLASSIFICATION	1.5713217247762945E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9981342387325715	WITHOUT_CLASSIFICATION	0.001865761267428589	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997295900242842	WITHOUT_CLASSIFICATION	2.7040997571589365E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9997295900242842	WITHOUT_CLASSIFICATION	2.7040997571589365E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9997312596900191	WITHOUT_CLASSIFICATION	2.6874030998096674E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9997312596900191	WITHOUT_CLASSIFICATION	2.6874030998096674E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9994989472200816	WITHOUT_CLASSIFICATION	5.010527799184311E-4	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9973034837000283	WITHOUT_CLASSIFICATION	0.0026965162999716625	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9920605601503801	WITHOUT_CLASSIFICATION	0.007939439849619747	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9995770030309209	WITHOUT_CLASSIFICATION	4.229969690790242E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9920605601503801	WITHOUT_CLASSIFICATION	0.007939439849619747	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9995770030309209	WITHOUT_CLASSIFICATION	4.229969690790242E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994287621854886	WITHOUT_CLASSIFICATION	5.712378145114203E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9992573127174914	WITHOUT_CLASSIFICATION	7.426872825085606E-4	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998182469876811	WITHOUT_CLASSIFICATION	1.8175301231887307E-4	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999819747374623	WITHOUT_CLASSIFICATION	1.802526253762808E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9994179772613041	WITHOUT_CLASSIFICATION	5.820227386959088E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997618302810359	WITHOUT_CLASSIFICATION	2.381697189640993E-4	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998755278837327	WITHOUT_CLASSIFICATION	1.2447211626724595E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9997089954885792	WITHOUT_CLASSIFICATION	2.910045114208333E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994482126844335	WITHOUT_CLASSIFICATION	5.51787315566367E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999971701910476	WITHOUT_CLASSIFICATION	2.829808952327637E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999154174199167	WITHOUT_CLASSIFICATION	8.458258008321562E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.998799509995125	WITHOUT_CLASSIFICATION	0.0012004900048749696	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999840542933337	WITHOUT_CLASSIFICATION	1.5945706666312554E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999749723716804	WITHOUT_CLASSIFICATION	2.5027628319595867E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999749723716804	WITHOUT_CLASSIFICATION	2.5027628319595867E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982523430282442	WITHOUT_CLASSIFICATION	0.0017476569717558867	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982523430282442	WITHOUT_CLASSIFICATION	0.0017476569717558867	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.995998442210426	WITHOUT_CLASSIFICATION	0.004001557789574037	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994287621854886	WITHOUT_CLASSIFICATION	5.712378145114203E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997048749104352	WITHOUT_CLASSIFICATION	2.9512508956469304E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9995021603364693	WITHOUT_CLASSIFICATION	4.97839663530798E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9993321009563376	WITHOUT_CLASSIFICATION	6.678990436623921E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993451501692427	WITHOUT_CLASSIFICATION	6.548498307573216E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9845922303477374	WITHOUT_CLASSIFICATION	0.015407769652262785	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994287621854886	WITHOUT_CLASSIFICATION	5.712378145114203E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993451501692427	WITHOUT_CLASSIFICATION	6.548498307573216E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9845922303477374	WITHOUT_CLASSIFICATION	0.015407769652262785	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.99981816209032	WITHOUT_CLASSIFICATION	1.8183790968001576E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998815985995981	WITHOUT_CLASSIFICATION	1.1840140040189849E-4	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998452344182109	WITHOUT_CLASSIFICATION	1.5476558178899294E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994287621854886	WITHOUT_CLASSIFICATION	5.712378145114203E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994287621854886	WITHOUT_CLASSIFICATION	5.712378145114203E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9998452020841362	WITHOUT_CLASSIFICATION	1.5479791586379033E-4	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9998225708376042	WITHOUT_CLASSIFICATION	1.7742916239589897E-4	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9996126475332537	WITHOUT_CLASSIFICATION	3.873524667462226E-4	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999298041877146	WITHOUT_CLASSIFICATION	7.019581228529495E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999147642630647	WITHOUT_CLASSIFICATION	8.523573693534214E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999603461753039	WITHOUT_CLASSIFICATION	3.965382469602927E-5	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999421354947273	WITHOUT_CLASSIFICATION	5.786450527261643E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999403096929114	WITHOUT_CLASSIFICATION	5.969030708860119E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9995216702277915	WITHOUT_CLASSIFICATION	4.783297722084788E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.99987554710126	WITHOUT_CLASSIFICATION	1.2445289873998992E-4	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999703480595244	WITHOUT_CLASSIFICATION	2.965194047559419E-4	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997469627447252	WITHOUT_CLASSIFICATION	2.5303725527478494E-4	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999598363281847	WITHOUT_CLASSIFICATION	4.016367181533563E-5	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9997604357324157	WITHOUT_CLASSIFICATION	2.395642675843993E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997509460256618	WITHOUT_CLASSIFICATION	2.4905397433817617E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9967629879094091	WITHOUT_CLASSIFICATION	0.0032370120905909003	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997776878450186	WITHOUT_CLASSIFICATION	2.2231215498126408E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999166760405093	WITHOUT_CLASSIFICATION	8.332395949072368E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996807216320409	WITHOUT_CLASSIFICATION	3.192783679590486E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9995770030309209	WITHOUT_CLASSIFICATION	4.229969690790242E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999326665898962	WITHOUT_CLASSIFICATION	6.733341010385704E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997776878450186	WITHOUT_CLASSIFICATION	2.2231215498126408E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.7865624563759129	WITHOUT_CLASSIFICATION	0.213437543624087	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999931542079428	WITHOUT_CLASSIFICATION	6.84579205722831E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.993678740588256	WITHOUT_CLASSIFICATION	0.0063212594117440105	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999313032429787	WITHOUT_CLASSIFICATION	6.869675702122015E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998551031126951	WITHOUT_CLASSIFICATION	1.448968873048914E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9946732859210848	WITHOUT_CLASSIFICATION	0.005326714078915154	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999951693001043	WITHOUT_CLASSIFICATION	4.830699895691111E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9993189227389097	WITHOUT_CLASSIFICATION	6.810772610904894E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9995188770330414	WITHOUT_CLASSIFICATION	4.811229669586087E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9971555931902523	WITHOUT_CLASSIFICATION	0.0028444068097476637	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997837329316437	WITHOUT_CLASSIFICATION	2.1626706835631358E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999989986423047	WITHOUT_CLASSIFICATION	1.0013576952989823E-5	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995733103481936	WITHOUT_CLASSIFICATION	4.2668965180645967E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.998910520126233	WITHOUT_CLASSIFICATION	0.001089479873766978	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9994691705320898	WITHOUT_CLASSIFICATION	5.308294679101569E-4	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9985941607437626	WITHOUT_CLASSIFICATION	0.0014058392562374177	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998822371203244	WITHOUT_CLASSIFICATION	1.1776287967560554E-4	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9997334292657011	WITHOUT_CLASSIFICATION	2.665707342988381E-4	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987066132898555	WITHOUT_CLASSIFICATION	0.0012933867101444392	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999466319222567	WITHOUT_CLASSIFICATION	5.336807774333932E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99962273456388	WITHOUT_CLASSIFICATION	3.772654361200644E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99962273456388	WITHOUT_CLASSIFICATION	3.772654361200644E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996965045845644	WITHOUT_CLASSIFICATION	3.034954154355999E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998172993560912	WITHOUT_CLASSIFICATION	1.82700643908695E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.999993576852498	WITHOUT_CLASSIFICATION	6.423147502044646E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999992059193734	WITHOUT_CLASSIFICATION	7.940806266050208E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998650914825056	WITHOUT_CLASSIFICATION	1.349085174944219E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999106974069573	WITHOUT_CLASSIFICATION	8.93025930427072E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999493560049765	WITHOUT_CLASSIFICATION	5.064399502349568E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99987313027252	WITHOUT_CLASSIFICATION	1.2686972747996377E-4	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594414143755	WITHOUT_CLASSIFICATION	3.4055858562453723E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9996422265772241	WITHOUT_CLASSIFICATION	3.5777342277586833E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998813916324613	WITHOUT_CLASSIFICATION	1.1860836753874319E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999825948275344	WITHOUT_CLASSIFICATION	1.7405172465609814E-4	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999514983018574	WITHOUT_CLASSIFICATION	4.850169814272347E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998667134107434	WITHOUT_CLASSIFICATION	1.3328658925664214E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996678373519969	WITHOUT_CLASSIFICATION	3.3216264800307996E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.99981816209032	WITHOUT_CLASSIFICATION	1.8183790968001576E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999291701954337	WITHOUT_CLASSIFICATION	7.082980456630225E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999939000312403	WITHOUT_CLASSIFICATION	6.099968759693779E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998706341520004	WITHOUT_CLASSIFICATION	1.2936584799954685E-4	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998702753469504	WITHOUT_CLASSIFICATION	1.2972465304960805E-4	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9975140253863752	WITHOUT_CLASSIFICATION	0.0024859746136248074	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9976636383514553	WITHOUT_CLASSIFICATION	0.002336361648544712	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9983505858085386	WITHOUT_CLASSIFICATION	0.0016494141914613226	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998463878189059	WITHOUT_CLASSIFICATION	1.5361218109402722E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997153719767771	WITHOUT_CLASSIFICATION	2.8462802322289527E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997585609694284	WITHOUT_CLASSIFICATION	2.4143903057165526E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.998156557201633	WITHOUT_CLASSIFICATION	0.0018434427983670283	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999951553321718	WITHOUT_CLASSIFICATION	4.844667828198692E-5	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998208256996877	WITHOUT_CLASSIFICATION	1.7917430031233337E-4	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.990560392116031	WITHOUT_CLASSIFICATION	0.009439607883969029	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999452524011918	WITHOUT_CLASSIFICATION	5.4747598808204915E-5	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999693091230139	WITHOUT_CLASSIFICATION	3.069087698608982E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999612782232007	WITHOUT_CLASSIFICATION	3.872177679936006E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998239604014348	WITHOUT_CLASSIFICATION	1.7603959856512462E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999917210004758	WITHOUT_CLASSIFICATION	8.278999524211655E-5	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996811211223929	WITHOUT_CLASSIFICATION	3.188788776070504E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9991954414321748	WITHOUT_CLASSIFICATION	8.04558567825194E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9989902552830602	WITHOUT_CLASSIFICATION	0.0010097447169398466	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999547830986348	WITHOUT_CLASSIFICATION	4.521690136522394E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998667134107434	WITHOUT_CLASSIFICATION	1.3328658925664214E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999079302986101	WITHOUT_CLASSIFICATION	9.206970138984313E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999668028410227	WITHOUT_CLASSIFICATION	3.3197158977308597E-4	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998260338748429	WITHOUT_CLASSIFICATION	1.739661251570613E-4	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999825948275344	WITHOUT_CLASSIFICATION	1.7405172465609814E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999036429256345	WITHOUT_CLASSIFICATION	9.635707436555847E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9995474943997685	WITHOUT_CLASSIFICATION	4.5250560023152704E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999526381657415	WITHOUT_CLASSIFICATION	4.736183425850283E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994257195790097	WITHOUT_CLASSIFICATION	5.742804209903522E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996678026354031	WITHOUT_CLASSIFICATION	3.321973645969124E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997542044002031	WITHOUT_CLASSIFICATION	2.4579559979686895E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998161697766841	WITHOUT_CLASSIFICATION	1.8383022331589662E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990242813963097	WITHOUT_CLASSIFICATION	9.757186036902302E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9980789087345875	WITHOUT_CLASSIFICATION	0.0019210912654125578	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999981321121969	WITHOUT_CLASSIFICATION	1.8678878030933384E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.99981816209032	WITHOUT_CLASSIFICATION	1.8183790968001576E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999825948275344	WITHOUT_CLASSIFICATION	1.7405172465609814E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998741051582789	WITHOUT_CLASSIFICATION	1.2589484172114698E-4	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998090024821293	WITHOUT_CLASSIFICATION	1.9099751787073202E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999304928282706	WITHOUT_CLASSIFICATION	6.95071717293315E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9989746576727727	WITHOUT_CLASSIFICATION	0.0010253423272273158	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9985355362007327	WITHOUT_CLASSIFICATION	0.0014644637992673138	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9996388800802879	WITHOUT_CLASSIFICATION	3.611199197120248E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997779071317664	WITHOUT_CLASSIFICATION	2.2209286823346552E-4	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999558756253157	WITHOUT_CLASSIFICATION	4.412437468420308E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9818602280231221	WITHOUT_CLASSIFICATION	0.018139771976877907	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997458369764592	WITHOUT_CLASSIFICATION	2.5416302354076007E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998615792863338	WITHOUT_CLASSIFICATION	1.3842071366616243E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999825948275344	WITHOUT_CLASSIFICATION	1.7405172465609814E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998667134107434	WITHOUT_CLASSIFICATION	1.3328658925664214E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.907325200869069	WITHOUT_CLASSIFICATION	0.09267479913093096	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9997624053491405	WITHOUT_CLASSIFICATION	2.375946508594106E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9277084094154358	WITHOUT_CLASSIFICATION	0.07229159058456433	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998667134107434	WITHOUT_CLASSIFICATION	1.3328658925664214E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934842975162	WITHOUT_CLASSIFICATION	6.515702483797774E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999304928282706	WITHOUT_CLASSIFICATION	6.95071717293315E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9882314986573592	WITHOUT_CLASSIFICATION	0.011768501342640807	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9972875592870301	WITHOUT_CLASSIFICATION	0.0027124407129699873	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9988131615897755	WITHOUT_CLASSIFICATION	0.0011868384102244518	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996678026354031	WITHOUT_CLASSIFICATION	3.321973645969124E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997542044002031	WITHOUT_CLASSIFICATION	2.4579559979686895E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999393565652149	WITHOUT_CLASSIFICATION	6.0643434785030185E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999196656486444	WITHOUT_CLASSIFICATION	8.033435135556065E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9992389005977823	WITHOUT_CLASSIFICATION	7.610994022176844E-4	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9984710768596737	WITHOUT_CLASSIFICATION	0.001528923140326195	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9849222863012027	WITHOUT_CLASSIFICATION	0.015077713698797256	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998667134107434	WITHOUT_CLASSIFICATION	1.3328658925664214E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998161697766841	WITHOUT_CLASSIFICATION	1.8383022331589662E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9990242813963097	WITHOUT_CLASSIFICATION	9.757186036902302E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695079243232	WITHOUT_CLASSIFICATION	3.0492075676797557E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997769198384084	WITHOUT_CLASSIFICATION	2.230801615916385E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998769992232753	WITHOUT_CLASSIFICATION	1.23000776724659E-4	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9996600058342122	WITHOUT_CLASSIFICATION	3.399941657877974E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.998747836723377	WITHOUT_CLASSIFICATION	0.0012521632766230655	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9957032764159003	WITHOUT_CLASSIFICATION	0.004296723584099669	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997597765707067	WITHOUT_CLASSIFICATION	2.4022342929338485E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999263434340376	WITHOUT_CLASSIFICATION	7.365656596239186E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998803396164022	WITHOUT_CLASSIFICATION	1.1966038359782453E-4	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999106974069573	WITHOUT_CLASSIFICATION	8.93025930427072E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999940645195843	WITHOUT_CLASSIFICATION	5.9354804156951174E-5	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998818780707069	WITHOUT_CLASSIFICATION	1.1812192929306171E-4	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999802572422346	WITHOUT_CLASSIFICATION	1.9742757765401367E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9555915771264675	WITHOUT_CLASSIFICATION	0.0444084228735325	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999493560049765	WITHOUT_CLASSIFICATION	5.064399502349568E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577640233312	WITHOUT_CLASSIFICATION	3.422359766688302E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999917210004758	WITHOUT_CLASSIFICATION	8.278999524211655E-5	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9953751632323444	WITHOUT_CLASSIFICATION	0.004624836767655545	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.998588252337254	WITHOUT_CLASSIFICATION	0.0014117476627460023	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9991454746059959	WITHOUT_CLASSIFICATION	8.545253940040746E-4	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998790403545345	WITHOUT_CLASSIFICATION	1.209596454654874E-4	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999973281743112	WITHOUT_CLASSIFICATION	2.6718256887936135E-5	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998383212614584	WITHOUT_CLASSIFICATION	1.6167873854158944E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9994994658136601	WITHOUT_CLASSIFICATION	5.005341863398795E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999951693001043	WITHOUT_CLASSIFICATION	4.830699895691111E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999101280321342	WITHOUT_CLASSIFICATION	8.987196786581818E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9993118596862164	WITHOUT_CLASSIFICATION	6.88140313783575E-4	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9997729265207905	WITHOUT_CLASSIFICATION	2.2707347920944158E-4	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998813627702083	WITHOUT_CLASSIFICATION	1.1863722979157007E-4	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998840314892122	WITHOUT_CLASSIFICATION	1.1596851078775896E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998054542157014	WITHOUT_CLASSIFICATION	1.9454578429862278E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998152504867995	WITHOUT_CLASSIFICATION	1.8474951320053044E-4	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997466473469184	WITHOUT_CLASSIFICATION	2.53352653081583E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991025441747603	WITHOUT_CLASSIFICATION	8.974558252397251E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9987300843202952	WITHOUT_CLASSIFICATION	0.0012699156797048583	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9983033281453485	WITHOUT_CLASSIFICATION	0.0016966718546515163	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9771612432453244	WITHOUT_CLASSIFICATION	0.022838756754675563	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997528127546299	WITHOUT_CLASSIFICATION	0.0024718724537009995	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998223614888257	WITHOUT_CLASSIFICATION	0.00177638511174298	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9984096369639301	WITHOUT_CLASSIFICATION	0.0015903630360698659	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997576350533562	WITHOUT_CLASSIFICATION	2.42364946643876E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997528127546299	WITHOUT_CLASSIFICATION	0.0024718724537009995	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9994871794707657	WITHOUT_CLASSIFICATION	5.128205292342851E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988759766330979	WITHOUT_CLASSIFICATION	0.0011240233669021233	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999078230783872	WITHOUT_CLASSIFICATION	9.217692161276682E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999788437727569	WITHOUT_CLASSIFICATION	2.1156227243109775E-4	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.988303473737868	WITHOUT_CLASSIFICATION	0.01169652626213197	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999349342908116	WITHOUT_CLASSIFICATION	6.506570918840246E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.999890724416967	WITHOUT_CLASSIFICATION	1.0927558303287675E-4	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999339891613517	WITHOUT_CLASSIFICATION	6.601083864836995E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999339891613517	WITHOUT_CLASSIFICATION	6.601083864836995E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998734202921226	WITHOUT_CLASSIFICATION	1.2657970787744778E-4	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995440731131539	WITHOUT_CLASSIFICATION	4.5592688684614914E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9995973041339102	WITHOUT_CLASSIFICATION	4.026958660896855E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9996068377569479	WITHOUT_CLASSIFICATION	3.9316224305208124E-4	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9988523014673831	WITHOUT_CLASSIFICATION	0.0011476985326168716	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999254732354509	WITHOUT_CLASSIFICATION	7.452676454918739E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999813637897262	WITHOUT_CLASSIFICATION	1.8636210273698307E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9998995965381264	WITHOUT_CLASSIFICATION	1.0040346187354728E-4	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9995041166012528	WITHOUT_CLASSIFICATION	4.958833987471498E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999893855526004	WITHOUT_CLASSIFICATION	1.0614447399536164E-5	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999281306718568	WITHOUT_CLASSIFICATION	7.186932814324024E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998688750772148	WITHOUT_CLASSIFICATION	1.3112492278528648E-4	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999736342702197	WITHOUT_CLASSIFICATION	2.6365729780350485E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9958950310484785	WITHOUT_CLASSIFICATION	0.004104968951521498	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998224926742492	WITHOUT_CLASSIFICATION	1.7750732575080004E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9991485750253063	WITHOUT_CLASSIFICATION	8.514249746937206E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994021516390418	WITHOUT_CLASSIFICATION	5.978483609582125E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.997608851740385	WITHOUT_CLASSIFICATION	0.0023911482596149195	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999764603666852	WITHOUT_CLASSIFICATION	2.353963331483681E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998322452766532	WITHOUT_CLASSIFICATION	1.677547233468765E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998622197415246	WITHOUT_CLASSIFICATION	1.3778025847555915E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998308326969685	WITHOUT_CLASSIFICATION	1.6916730303161E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999746030407134	WITHOUT_CLASSIFICATION	2.539695928666811E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999242292244993	WITHOUT_CLASSIFICATION	7.577077550077581E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998101695190291	WITHOUT_CLASSIFICATION	1.8983048097099428E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9985754511781311	WITHOUT_CLASSIFICATION	0.0014245488218690052	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9940057518620161	WITHOUT_CLASSIFICATION	0.005994248137983846	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997496469476118	WITHOUT_CLASSIFICATION	2.503530523882254E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9929351750519269	WITHOUT_CLASSIFICATION	0.00706482494807315	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9986081593751537	WITHOUT_CLASSIFICATION	0.0013918406248463735	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998629649686436	WITHOUT_CLASSIFICATION	1.3703503135632894E-4	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9998481629928854	WITHOUT_CLASSIFICATION	1.5183700711455533E-4	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997767991575283	WITHOUT_CLASSIFICATION	2.2320084247182457E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999202233629412	WITHOUT_CLASSIFICATION	7.977663705885026E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999188870191538	WITHOUT_CLASSIFICATION	8.11129808462457E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9998699790947592	WITHOUT_CLASSIFICATION	1.3002090524088126E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9950447968747784	WITHOUT_CLASSIFICATION	0.004955203125221499	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999569279972715	WITHOUT_CLASSIFICATION	4.3072002728466274E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9828393031691341	WITHOUT_CLASSIFICATION	0.017160696830865872	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998338373363745	WITHOUT_CLASSIFICATION	1.661626636255089E-4	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995924203858222	WITHOUT_CLASSIFICATION	4.0757961417780934E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.99981816209032	WITHOUT_CLASSIFICATION	1.8183790968001576E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.99981816209032	WITHOUT_CLASSIFICATION	1.8183790968001576E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997195224191142	WITHOUT_CLASSIFICATION	2.8047758088579726E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997877201513686	WITHOUT_CLASSIFICATION	2.122798486313032E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9996841889418048	WITHOUT_CLASSIFICATION	3.158110581951606E-4	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999607919899721	WITHOUT_CLASSIFICATION	3.920801002773946E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998163221304778	WITHOUT_CLASSIFICATION	1.8367786952219438E-4	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9989751438760901	WITHOUT_CLASSIFICATION	0.0010248561239098617	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9994728849243074	WITHOUT_CLASSIFICATION	5.271150756925514E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999485302832374	WITHOUT_CLASSIFICATION	5.1469716762558036E-5	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999730757664468	WITHOUT_CLASSIFICATION	2.6924233553246873E-5	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998577472041006	WITHOUT_CLASSIFICATION	1.42252795899429E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996888096428589	WITHOUT_CLASSIFICATION	3.111903571411514E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999355712048591	WITHOUT_CLASSIFICATION	6.442879514082692E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994805659252433	WITHOUT_CLASSIFICATION	5.194340747567426E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999715821977203	WITHOUT_CLASSIFICATION	2.8417802279694456E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997411419836056	WITHOUT_CLASSIFICATION	2.588580163944099E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999700419906696	WITHOUT_CLASSIFICATION	2.9958009330381228E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9993794254767531	WITHOUT_CLASSIFICATION	6.2057452324698E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9991733587351379	WITHOUT_CLASSIFICATION	8.266412648620285E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.99983864828727	WITHOUT_CLASSIFICATION	1.6135171272989166E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9996749009867415	WITHOUT_CLASSIFICATION	3.2509901325856934E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9991733587351379	WITHOUT_CLASSIFICATION	8.266412648620285E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999955711934682	WITHOUT_CLASSIFICATION	4.428806531799281E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.999980566670561	WITHOUT_CLASSIFICATION	1.943332943898691E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998639919200863	WITHOUT_CLASSIFICATION	1.3600807991363153E-4	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9985236961180566	WITHOUT_CLASSIFICATION	0.0014763038819433638	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999050616229673	WITHOUT_CLASSIFICATION	9.493837703270351E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999388806986607	WITHOUT_CLASSIFICATION	6.11193013393437E-5	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998793051756356	WITHOUT_CLASSIFICATION	1.2069482436440474E-4	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9993557845211047	WITHOUT_CLASSIFICATION	6.442154788952316E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997359556625336	WITHOUT_CLASSIFICATION	2.640443374664301E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9998590854029963	WITHOUT_CLASSIFICATION	1.4091459700377464E-4	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999535574782671	WITHOUT_CLASSIFICATION	4.644252173282987E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998956026365858	WITHOUT_CLASSIFICATION	1.0439736341415606E-4	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999200830558016	WITHOUT_CLASSIFICATION	7.991694419836038E-5	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998459621925819	WITHOUT_CLASSIFICATION	1.5403780741809754E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998886334019722	WITHOUT_CLASSIFICATION	1.1136659802773874E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995155707982452	WITHOUT_CLASSIFICATION	4.844292017549094E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9994459278956832	WITHOUT_CLASSIFICATION	5.540721043168302E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9847021303886198	WITHOUT_CLASSIFICATION	0.015297869611380324	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998874568495343	WITHOUT_CLASSIFICATION	1.1254315046568442E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999595116767312	WITHOUT_CLASSIFICATION	4.048832326874788E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999208735075187	WITHOUT_CLASSIFICATION	7.912649248138848E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9956692230762142	WITHOUT_CLASSIFICATION	0.004330776923785866	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9991988907682419	WITHOUT_CLASSIFICATION	8.011092317582406E-4	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999994021437347	WITHOUT_CLASSIFICATION	5.978562652483353E-7	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9996711385035157	WITHOUT_CLASSIFICATION	3.288614964842651E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9951071402496181	WITHOUT_CLASSIFICATION	0.004892859750381928	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996823155459776	WITHOUT_CLASSIFICATION	3.1768445402229365E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998054542157014	WITHOUT_CLASSIFICATION	1.9454578429862278E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9964222641770987	WITHOUT_CLASSIFICATION	0.0035777358229013	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995035354831998	WITHOUT_CLASSIFICATION	4.964645168001027E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9823174146638827	WITHOUT_CLASSIFICATION	0.017682585336117364	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9998374050545171	WITHOUT_CLASSIFICATION	1.6259494548290349E-4	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999714552883367	WITHOUT_CLASSIFICATION	2.8544711663300065E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9995838843862682	WITHOUT_CLASSIFICATION	4.1611561373173E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9970192603361825	WITHOUT_CLASSIFICATION	0.002980739663817568	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999772874965364	WITHOUT_CLASSIFICATION	2.2712503463727053E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998691226939964	WITHOUT_CLASSIFICATION	1.3087730600360505E-4	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998716829283493	WITHOUT_CLASSIFICATION	1.2831707165072986E-4	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999544368921671	WITHOUT_CLASSIFICATION	4.5563107832945925E-5	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999171598920585	WITHOUT_CLASSIFICATION	8.284010794145565E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9979068180380833	WITHOUT_CLASSIFICATION	0.002093181961916593	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996719714037765	WITHOUT_CLASSIFICATION	3.2802859622358207E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999862213569533	WITHOUT_CLASSIFICATION	1.3778643046620502E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999158591576072	WITHOUT_CLASSIFICATION	8.414084239284915E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996991133813533	WITHOUT_CLASSIFICATION	3.0088661864662307E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999530232126953	WITHOUT_CLASSIFICATION	4.6976787304612155E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999531328581043	WITHOUT_CLASSIFICATION	4.686714189580085E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999806336542397	WITHOUT_CLASSIFICATION	1.9366345760240816E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999952553868264	WITHOUT_CLASSIFICATION	4.7446131735929185E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999255080203959	WITHOUT_CLASSIFICATION	7.449197960411103E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997381489911025	WITHOUT_CLASSIFICATION	2.618510088975423E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999112573010747	WITHOUT_CLASSIFICATION	8.874269892537578E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999396063931446	WITHOUT_CLASSIFICATION	6.039360685543041E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9992758254699141	WITHOUT_CLASSIFICATION	7.241745300857892E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999545022506131	WITHOUT_CLASSIFICATION	4.549774938676751E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9931404075292153	WITHOUT_CLASSIFICATION	0.00685959247078472	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9997735645276521	WITHOUT_CLASSIFICATION	2.264354723479177E-4	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997237414047857	WITHOUT_CLASSIFICATION	2.762585952143636E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997740523646512	WITHOUT_CLASSIFICATION	2.2594763534883826E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996887970278935	WITHOUT_CLASSIFICATION	3.1120297210645334E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9962282161991145	WITHOUT_CLASSIFICATION	0.003771783800885366	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999880525464115	WITHOUT_CLASSIFICATION	1.1947453588495744E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999057587357658	WITHOUT_CLASSIFICATION	9.424126423418475E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9982890506568689	WITHOUT_CLASSIFICATION	0.0017109493431311073	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9992924555409182	WITHOUT_CLASSIFICATION	7.075444590817823E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997219271587339	WITHOUT_CLASSIFICATION	2.780728412661841E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9992924555409182	WITHOUT_CLASSIFICATION	7.075444590817823E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992007523000281	WITHOUT_CLASSIFICATION	7.992476999718934E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999440641249815	WITHOUT_CLASSIFICATION	5.5935875018457443E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.999919170839272	WITHOUT_CLASSIFICATION	8.08291607279697E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999743296862248	WITHOUT_CLASSIFICATION	2.5670313775110888E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999472284723177	WITHOUT_CLASSIFICATION	5.2771527682321666E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999857691398788	WITHOUT_CLASSIFICATION	1.4230860121199973E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998618320006465	WITHOUT_CLASSIFICATION	1.381679993534086E-4	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.999402617856585	WITHOUT_CLASSIFICATION	5.973821434149503E-4	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999691954868882	WITHOUT_CLASSIFICATION	3.080451311184049E-5	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999796562721879	WITHOUT_CLASSIFICATION	2.034372781218393E-5	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9998561935796515	WITHOUT_CLASSIFICATION	1.438064203484876E-4	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996695836588427	WITHOUT_CLASSIFICATION	3.3041634115730606E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9992530390411591	WITHOUT_CLASSIFICATION	7.469609588409557E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.6417137441983563	WITHOUT_CLASSIFICATION	0.3582862558016437	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999965719879239	WITHOUT_CLASSIFICATION	3.4280120760790856E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9993221395821085	WITHOUT_CLASSIFICATION	6.778604178914768E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999085392820007	WITHOUT_CLASSIFICATION	9.146071799923215E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999085392820007	WITHOUT_CLASSIFICATION	9.146071799923215E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998577472041006	WITHOUT_CLASSIFICATION	1.42252795899429E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9996279050618657	WITHOUT_CLASSIFICATION	3.720949381343358E-4	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999751049456174	WITHOUT_CLASSIFICATION	2.4895054382585862E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999613993644072	WITHOUT_CLASSIFICATION	3.8600635592802245E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9990644378304072	WITHOUT_CLASSIFICATION	9.355621695927497E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9997597318123312	WITHOUT_CLASSIFICATION	2.402681876688298E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9460135938037693	WITHOUT_CLASSIFICATION	0.05398640619623076	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998933773472186	WITHOUT_CLASSIFICATION	1.0662265278138501E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999891445679244	WITHOUT_CLASSIFICATION	1.0855432075629609E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998879722111881	WITHOUT_CLASSIFICATION	1.1202778881183218E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997709021830117	WITHOUT_CLASSIFICATION	2.2909781698829987E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999954315505844	WITHOUT_CLASSIFICATION	4.568449415599964E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998041138993934	WITHOUT_CLASSIFICATION	1.9588610060654088E-4	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997501766573887	WITHOUT_CLASSIFICATION	2.4982334261124036E-4	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9989161649965217	WITHOUT_CLASSIFICATION	0.001083835003478267	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9997467812424591	WITHOUT_CLASSIFICATION	2.532187575410053E-4	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9996526142868581	WITHOUT_CLASSIFICATION	3.4738571314181743E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9989513249528102	WITHOUT_CLASSIFICATION	0.0010486750471897625	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999116718663885	WITHOUT_CLASSIFICATION	8.832813361156975E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9997772448799576	WITHOUT_CLASSIFICATION	2.2275512004250314E-4	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999860189889324	WITHOUT_CLASSIFICATION	1.3981011067667955E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999253694217974	WITHOUT_CLASSIFICATION	7.463057820259939E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999473133015055	WITHOUT_CLASSIFICATION	5.268669849456551E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999081212263032	WITHOUT_CLASSIFICATION	9.187877369675752E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9996880832723595	WITHOUT_CLASSIFICATION	3.1191672764059077E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999716029856274	WITHOUT_CLASSIFICATION	2.8397014372722284E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9996936997276454	WITHOUT_CLASSIFICATION	3.06300272354552E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9977301599545695	WITHOUT_CLASSIFICATION	0.002269840045430544	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998443453311314	WITHOUT_CLASSIFICATION	1.5565466886853936E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997512203499923	WITHOUT_CLASSIFICATION	2.48779650007686E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999911046324309	WITHOUT_CLASSIFICATION	8.895367569212388E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9934719643222613	WITHOUT_CLASSIFICATION	0.006528035677738836	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998298654914268	WITHOUT_CLASSIFICATION	1.7013450857312871E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997502180996838	WITHOUT_CLASSIFICATION	2.497819003161899E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999831057946834	WITHOUT_CLASSIFICATION	1.6894205316611458E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999816779408067	WITHOUT_CLASSIFICATION	1.832205919323815E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999678983993208	WITHOUT_CLASSIFICATION	3.2101600679303955E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999075116079238	WITHOUT_CLASSIFICATION	9.24883920761137E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9969830551077788	WITHOUT_CLASSIFICATION	0.0030169448922211326	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998655968077163	WITHOUT_CLASSIFICATION	1.3440319228367925E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997592917936304	WITHOUT_CLASSIFICATION	2.4070820636964215E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9777829716338434	WITHOUT_CLASSIFICATION	0.02221702836615659	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991712285213562	WITHOUT_CLASSIFICATION	8.2877147864383E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9550340421023479	WITHOUT_CLASSIFICATION	0.04496595789765213	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9788506224803349	WITHOUT_CLASSIFICATION	0.02114937751966513	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999725996375003	WITHOUT_CLASSIFICATION	2.740036249965066E-5	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996135451033505	WITHOUT_CLASSIFICATION	3.8645489664943563E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999246113786654	WITHOUT_CLASSIFICATION	7.538862133459851E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997592917936304	WITHOUT_CLASSIFICATION	2.4070820636964215E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997561419141292	WITHOUT_CLASSIFICATION	2.4385808587081568E-4	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9994904669211114	WITHOUT_CLASSIFICATION	5.095330788886357E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998104617414993	WITHOUT_CLASSIFICATION	1.895382585006757E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997449960982076	WITHOUT_CLASSIFICATION	2.5500390179254744E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934842975162	WITHOUT_CLASSIFICATION	6.515702483797774E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934842975162	WITHOUT_CLASSIFICATION	6.515702483797774E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999899403383592	WITHOUT_CLASSIFICATION	1.0059661640736236E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999184206821384	WITHOUT_CLASSIFICATION	8.157931786159923E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999717760950151	WITHOUT_CLASSIFICATION	2.8223904984822626E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9996246351768384	WITHOUT_CLASSIFICATION	3.7536482316159205E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989937578845777	WITHOUT_CLASSIFICATION	0.0010062421154223289	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997994063942272	WITHOUT_CLASSIFICATION	2.0059360577293281E-4	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999666004338552	WITHOUT_CLASSIFICATION	3.33995661448691E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9995186087161103	WITHOUT_CLASSIFICATION	4.813912838896693E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9990814472061599	WITHOUT_CLASSIFICATION	9.185527938400952E-4	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9990042874102356	WITHOUT_CLASSIFICATION	9.957125897643523E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9994163526306983	WITHOUT_CLASSIFICATION	5.836473693017733E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998799957290913	WITHOUT_CLASSIFICATION	1.2000427090869427E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998861402090161	WITHOUT_CLASSIFICATION	1.1385979098390229E-4	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9921770166289859	WITHOUT_CLASSIFICATION	0.007822983371014126	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996740349892559	WITHOUT_CLASSIFICATION	3.259650107441214E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995037427128962	WITHOUT_CLASSIFICATION	4.962572871038185E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9091039864613377	WITHOUT_CLASSIFICATION	0.09089601353866233	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998734870721487	WITHOUT_CLASSIFICATION	1.265129278512959E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998752839099264	WITHOUT_CLASSIFICATION	1.2471609007349852E-4	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994956603445502	WITHOUT_CLASSIFICATION	5.043396554497972E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996218432045143	WITHOUT_CLASSIFICATION	3.7815679548570166E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999988722190213	WITHOUT_CLASSIFICATION	1.1277809787575698E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996851105933388	WITHOUT_CLASSIFICATION	3.148894066612622E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9990308314383468	WITHOUT_CLASSIFICATION	9.691685616531221E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999803277367348	WITHOUT_CLASSIFICATION	1.967226326511188E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999715948857316	WITHOUT_CLASSIFICATION	2.8405114268408916E-4	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999946375453383	WITHOUT_CLASSIFICATION	5.362454661599137E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.99989223614917	WITHOUT_CLASSIFICATION	1.0776385082995889E-4	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999930186880604	WITHOUT_CLASSIFICATION	6.981311939603031E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999424212608505	WITHOUT_CLASSIFICATION	5.757873914949854E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.99989223614917	WITHOUT_CLASSIFICATION	1.0776385082995889E-4	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999892224627207	WITHOUT_CLASSIFICATION	1.0777537279306204E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999453263770441	WITHOUT_CLASSIFICATION	5.467362295583566E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998079568048077	WITHOUT_CLASSIFICATION	1.9204319519223375E-4	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997414821881739	WITHOUT_CLASSIFICATION	2.5851781182598306E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996148196638267	WITHOUT_CLASSIFICATION	3.851803361733774E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997709021830117	WITHOUT_CLASSIFICATION	2.2909781698829987E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998604256014155	WITHOUT_CLASSIFICATION	1.3957439858453715E-4	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998383212614584	WITHOUT_CLASSIFICATION	1.6167873854158944E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9981633332994293	WITHOUT_CLASSIFICATION	0.0018366667005707486	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997289827131526	WITHOUT_CLASSIFICATION	2.710172868474039E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999154314410466	WITHOUT_CLASSIFICATION	8.456855895347737E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.999943733224554	WITHOUT_CLASSIFICATION	5.626677544609501E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999943136575438	WITHOUT_CLASSIFICATION	5.686342456199267E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999946951092736	WITHOUT_CLASSIFICATION	5.304890726403249E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998554321059862	WITHOUT_CLASSIFICATION	1.4456789401392435E-4	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999050443404798	WITHOUT_CLASSIFICATION	9.495565952028833E-5	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999488603355237	WITHOUT_CLASSIFICATION	5.11396644762841E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998210999526401	WITHOUT_CLASSIFICATION	1.7890004735996104E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999767319801836	WITHOUT_CLASSIFICATION	2.3268019816453384E-5	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999724872430456	WITHOUT_CLASSIFICATION	2.751275695439857E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998637401023233	WITHOUT_CLASSIFICATION	1.3625989767671788E-4	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999157891296685	WITHOUT_CLASSIFICATION	8.421087033150119E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999050086157043	WITHOUT_CLASSIFICATION	9.49913842956991E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999473274231147	WITHOUT_CLASSIFICATION	5.2672576885440954E-5	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996654077323668	WITHOUT_CLASSIFICATION	3.345922676331702E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999720703977335	WITHOUT_CLASSIFICATION	2.7929602266500237E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9973840893282284	WITHOUT_CLASSIFICATION	0.0026159106717716226	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9998868322503163	WITHOUT_CLASSIFICATION	1.1316774968370269E-4	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999606876587376	WITHOUT_CLASSIFICATION	3.9312341262343185E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995819096828192	WITHOUT_CLASSIFICATION	4.1809031718073993E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993375721930837	WITHOUT_CLASSIFICATION	6.624278069161882E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9939624356018053	WITHOUT_CLASSIFICATION	0.006037564398194744	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999679267980546	WITHOUT_CLASSIFICATION	3.2073201945358164E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9998847201845413	WITHOUT_CLASSIFICATION	1.1527981545864834E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999648292987598	WITHOUT_CLASSIFICATION	3.5170701240239816E-5	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9990765813733958	WITHOUT_CLASSIFICATION	9.234186266041672E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998525615342141	WITHOUT_CLASSIFICATION	1.474384657858889E-4	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9987525934388563	WITHOUT_CLASSIFICATION	0.0012474065611437748	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9984644417676475	WITHOUT_CLASSIFICATION	0.001535558232352501	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9983800230312359	WITHOUT_CLASSIFICATION	0.0016199769687641997	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999963036141682	WITHOUT_CLASSIFICATION	3.6963858316919165E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999063747044652	WITHOUT_CLASSIFICATION	9.362529553484285E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998337094437563	WITHOUT_CLASSIFICATION	1.6629055624374617E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999917268154863	WITHOUT_CLASSIFICATION	8.273184513697849E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999158717051908	WITHOUT_CLASSIFICATION	8.41282948091305E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999857104978436	WITHOUT_CLASSIFICATION	1.4289502156287208E-5	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9916812018946044	WITHOUT_CLASSIFICATION	0.008318798105395505	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9995696703019981	WITHOUT_CLASSIFICATION	4.3032969800199845E-4	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998118700196444	WITHOUT_CLASSIFICATION	1.88129980355452E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992610749132086	WITHOUT_CLASSIFICATION	7.389250867915187E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9991628661238632	WITHOUT_CLASSIFICATION	8.371338761368111E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9995357109576982	WITHOUT_CLASSIFICATION	4.6428904230175514E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996560392987509	WITHOUT_CLASSIFICATION	3.4396070124911046E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999729889227357	WITHOUT_CLASSIFICATION	2.701107726438518E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999774945318863	WITHOUT_CLASSIFICATION	2.2505468113694758E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996227889198999	WITHOUT_CLASSIFICATION	3.77211080100116E-4	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9986652617477308	WITHOUT_CLASSIFICATION	0.001334738252269077	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998735304593526	WITHOUT_CLASSIFICATION	1.2646954064744314E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995819096828192	WITHOUT_CLASSIFICATION	4.1809031718073993E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999307593561674	WITHOUT_CLASSIFICATION	6.92406438326002E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9998868900684972	WITHOUT_CLASSIFICATION	1.1310993150279267E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9994999155062557	WITHOUT_CLASSIFICATION	5.000844937442582E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999891174142517	WITHOUT_CLASSIFICATION	1.0882585748287954E-4	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999973898176463	WITHOUT_CLASSIFICATION	2.6101823537242672E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9985642943143456	WITHOUT_CLASSIFICATION	0.0014357056856544744	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993289823519154	WITHOUT_CLASSIFICATION	6.710176480846998E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999920968848781	WITHOUT_CLASSIFICATION	7.903115121898851E-5	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998930908954121	WITHOUT_CLASSIFICATION	1.0690910458780375E-4	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9994709083129483	WITHOUT_CLASSIFICATION	5.290916870517579E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9954988885918689	WITHOUT_CLASSIFICATION	0.004501111408131193	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994549915369344	WITHOUT_CLASSIFICATION	5.450084630656022E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999757576956119	WITHOUT_CLASSIFICATION	2.4242304388137426E-5	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9995610721465708	WITHOUT_CLASSIFICATION	4.389278534293291E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992007523000281	WITHOUT_CLASSIFICATION	7.992476999718934E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9994788550315681	WITHOUT_CLASSIFICATION	5.211449684319497E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.997420480862137	WITHOUT_CLASSIFICATION	0.002579519137862909	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999614285328766	WITHOUT_CLASSIFICATION	3.857146712340658E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999238485724061	WITHOUT_CLASSIFICATION	7.615142759380693E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999523460508603	WITHOUT_CLASSIFICATION	4.765394913973419E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738143238283	WITHOUT_CLASSIFICATION	3.2618567617164146E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738143238283	WITHOUT_CLASSIFICATION	3.2618567617164146E-4	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999383895585833	WITHOUT_CLASSIFICATION	6.161044141673491E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998214877284488	WITHOUT_CLASSIFICATION	1.7851227155118237E-4	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999135496050624	WITHOUT_CLASSIFICATION	8.645039493753081E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998147074145642	WITHOUT_CLASSIFICATION	1.852925854356677E-4	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997484826206452	WITHOUT_CLASSIFICATION	2.5151737935479176E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9995543839641852	WITHOUT_CLASSIFICATION	4.456160358148123E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999421998862063	WITHOUT_CLASSIFICATION	5.7800113793816765E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9985048322949786	WITHOUT_CLASSIFICATION	0.0014951677050214546	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9985048322949786	WITHOUT_CLASSIFICATION	0.0014951677050214546	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.99943974252391	WITHOUT_CLASSIFICATION	5.602574760899607E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999424746821872	WITHOUT_CLASSIFICATION	5.752531781267405E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998200088122209	WITHOUT_CLASSIFICATION	1.7999118777912618E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996278876839849	WITHOUT_CLASSIFICATION	3.7211231601513416E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996278876839849	WITHOUT_CLASSIFICATION	3.7211231601513416E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996278876839849	WITHOUT_CLASSIFICATION	3.7211231601513416E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999960269753426	WITHOUT_CLASSIFICATION	3.9730246573995624E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9998423636272618	WITHOUT_CLASSIFICATION	1.5763637273824392E-4	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999905025177103	WITHOUT_CLASSIFICATION	9.497482289744683E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999733409747933	WITHOUT_CLASSIFICATION	2.6659025206696017E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9996995810271341	WITHOUT_CLASSIFICATION	3.0041897286586886E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999722016888115	WITHOUT_CLASSIFICATION	2.779831118854166E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999960720437417	WITHOUT_CLASSIFICATION	3.92795625830227E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.7404324345256874	WITHOUT_CLASSIFICATION	0.2595675654743127	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999729551847218	WITHOUT_CLASSIFICATION	2.7044815278144278E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9998526170071672	WITHOUT_CLASSIFICATION	1.473829928328118E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998597448099206	WITHOUT_CLASSIFICATION	1.4025519007940376E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9983707222154719	WITHOUT_CLASSIFICATION	0.0016292777845281878	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999546659724189	WITHOUT_CLASSIFICATION	4.5334027581170085E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999722947242347	WITHOUT_CLASSIFICATION	2.7705275765383832E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999900234240917	WITHOUT_CLASSIFICATION	9.976575908338883E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999716609968561	WITHOUT_CLASSIFICATION	2.8339003143913997E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996953907891185	WITHOUT_CLASSIFICATION	3.046092108814618E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996738143238283	WITHOUT_CLASSIFICATION	3.2618567617164146E-4	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999086126764861	WITHOUT_CLASSIFICATION	9.138732351391204E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9410438235255407	WITHOUT_CLASSIFICATION	0.05895617647445931	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998783651780042	WITHOUT_CLASSIFICATION	1.2163482199576664E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999373629723567	WITHOUT_CLASSIFICATION	6.263702764334287E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999362219419596	WITHOUT_CLASSIFICATION	6.377805804026353E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9996975346761151	WITHOUT_CLASSIFICATION	3.024653238849323E-4	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999794040563709	WITHOUT_CLASSIFICATION	2.0595943629140638E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9994816217990272	WITHOUT_CLASSIFICATION	5.183782009728199E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996246045363459	WITHOUT_CLASSIFICATION	3.753954636540318E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998987650093912	WITHOUT_CLASSIFICATION	1.0123499060883674E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997455012992928	WITHOUT_CLASSIFICATION	2.5449870070710803E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999407639647748	WITHOUT_CLASSIFICATION	5.923603522521153E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9992232748543736	WITHOUT_CLASSIFICATION	7.767251456263922E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999637071305532	WITHOUT_CLASSIFICATION	3.6292869446800436E-4	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999675803456942	WITHOUT_CLASSIFICATION	3.2419654305781054E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.883943752468358	WITHOUT_CLASSIFICATION	0.11605624753164209	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9984571985168352	WITHOUT_CLASSIFICATION	0.001542801483164761	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999835702561195	WITHOUT_CLASSIFICATION	1.6429743880587548E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999693628868948	WITHOUT_CLASSIFICATION	3.063711310523632E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999693628868948	WITHOUT_CLASSIFICATION	3.063711310523632E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999830586047562	WITHOUT_CLASSIFICATION	1.694139524378937E-4	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998740639709669	WITHOUT_CLASSIFICATION	1.259360290331237E-4	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997982542098661	WITHOUT_CLASSIFICATION	2.017457901338922E-4	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999390510184284	WITHOUT_CLASSIFICATION	6.094898157173355E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996178316918659	WITHOUT_CLASSIFICATION	3.821683081341578E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999450726126609	WITHOUT_CLASSIFICATION	5.492738733929479E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9997432002219618	WITHOUT_CLASSIFICATION	2.5679977803812085E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9995919549211468	WITHOUT_CLASSIFICATION	4.080450788531299E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999903651297527	WITHOUT_CLASSIFICATION	9.634870247293546E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999050929834311	WITHOUT_CLASSIFICATION	9.490701656895755E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9985959571338443	WITHOUT_CLASSIFICATION	0.0014040428661557084	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994599253821214	WITHOUT_CLASSIFICATION	5.40074617878595E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999610993351271	WITHOUT_CLASSIFICATION	3.890066487290617E-5	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999827725760948	WITHOUT_CLASSIFICATION	1.722742390519273E-4	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999989108378405	WITHOUT_CLASSIFICATION	1.089162159491252E-5	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9994520217051353	WITHOUT_CLASSIFICATION	5.479782948647889E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998165196301404	WITHOUT_CLASSIFICATION	1.834803698596363E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998165196301404	WITHOUT_CLASSIFICATION	1.834803698596363E-4	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998085093162101	WITHOUT_CLASSIFICATION	1.914906837898574E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999080525860959	WITHOUT_CLASSIFICATION	9.194741390410874E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9995568621337605	WITHOUT_CLASSIFICATION	4.431378662394859E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995568621337605	WITHOUT_CLASSIFICATION	4.431378662394859E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997884080377062	WITHOUT_CLASSIFICATION	2.115919622938703E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997150860478444	WITHOUT_CLASSIFICATION	2.8491395215557127E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998700203567764	WITHOUT_CLASSIFICATION	1.299796432235572E-4	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988070038537319	WITHOUT_CLASSIFICATION	0.001192996146268087	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999604732601892	WITHOUT_CLASSIFICATION	3.952673981079407E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992919781885246	WITHOUT_CLASSIFICATION	7.080218114753829E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999155231276667	WITHOUT_CLASSIFICATION	8.447687233333573E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988070038537319	WITHOUT_CLASSIFICATION	0.001192996146268087	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9895474852152071	WITHOUT_CLASSIFICATION	0.010452514784792904	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998060078688993	WITHOUT_CLASSIFICATION	1.9399213110069156E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998829099151612	WITHOUT_CLASSIFICATION	1.1709008483879126E-4	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9997372488270626	WITHOUT_CLASSIFICATION	2.6275117293745736E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998015344522672	WITHOUT_CLASSIFICATION	1.9846554773293964E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999689709875027	WITHOUT_CLASSIFICATION	3.1029012497262886E-5	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999501454704555	WITHOUT_CLASSIFICATION	4.985452954454946E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9997977066114049	WITHOUT_CLASSIFICATION	2.0229338859514639E-4	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997442117869815	WITHOUT_CLASSIFICATION	2.5578821301858266E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995518787847399	WITHOUT_CLASSIFICATION	4.4812121525995304E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999188788563365	WITHOUT_CLASSIFICATION	8.112114366357599E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998303145501213	WITHOUT_CLASSIFICATION	1.696854498787053E-4	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997125805666224	WITHOUT_CLASSIFICATION	2.8741943337763816E-4	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999718559987671	WITHOUT_CLASSIFICATION	2.8144001232867466E-5	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998142115406607	WITHOUT_CLASSIFICATION	1.8578845933927757E-4	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999488563490782	WITHOUT_CLASSIFICATION	5.1143650921934397E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997144279102333	WITHOUT_CLASSIFICATION	2.855720897666976E-4	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999614612975704	WITHOUT_CLASSIFICATION	3.853870242960969E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999614612975704	WITHOUT_CLASSIFICATION	3.853870242960969E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999501454704555	WITHOUT_CLASSIFICATION	4.985452954454946E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9989872322141138	WITHOUT_CLASSIFICATION	0.0010127677858862468	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996929324504842	WITHOUT_CLASSIFICATION	3.0706754951581773E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9996718913515945	WITHOUT_CLASSIFICATION	3.281086484054706E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9994505073980772	WITHOUT_CLASSIFICATION	5.494926019227241E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999222225425712	WITHOUT_CLASSIFICATION	7.777745742877011E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999444861580498	WITHOUT_CLASSIFICATION	5.551384195028054E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9998297477675483	WITHOUT_CLASSIFICATION	1.7025223245166707E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9967889576142964	WITHOUT_CLASSIFICATION	0.0032110423857035063	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999674849835352	WITHOUT_CLASSIFICATION	3.251501646483651E-5	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9995942332533526	WITHOUT_CLASSIFICATION	4.0576674664741713E-4	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999941228626191	WITHOUT_CLASSIFICATION	5.8771373809037784E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9980767489801631	WITHOUT_CLASSIFICATION	0.0019232510198368604	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9980147114999358	WITHOUT_CLASSIFICATION	0.001985288500064252	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999918621880695	WITHOUT_CLASSIFICATION	8.137811930455979E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998810645212322	WITHOUT_CLASSIFICATION	1.1893547876785262E-4	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999540862018153	WITHOUT_CLASSIFICATION	4.5913798184887027E-5	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999978582007369	WITHOUT_CLASSIFICATION	2.1417992630962342E-5	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9996641602838475	WITHOUT_CLASSIFICATION	3.358397161525541E-4	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999252689620955	WITHOUT_CLASSIFICATION	7.473103790443216E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999528900984481	WITHOUT_CLASSIFICATION	4.710990155182969E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999510206456719	WITHOUT_CLASSIFICATION	4.8979354328060226E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9997138070576624	WITHOUT_CLASSIFICATION	2.861929423375529E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998966815446255	WITHOUT_CLASSIFICATION	1.033184553744733E-4	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999790930631813	WITHOUT_CLASSIFICATION	2.090693681871354E-5	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999997910560169	WITHOUT_CLASSIFICATION	2.089439831113387E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999911861681968	WITHOUT_CLASSIFICATION	8.813831803205698E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999076528636421	WITHOUT_CLASSIFICATION	9.234713635794771E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998809880128519	WITHOUT_CLASSIFICATION	1.1901198714820402E-4	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999638889770677	WITHOUT_CLASSIFICATION	3.6111022932433845E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9950727075869514	WITHOUT_CLASSIFICATION	0.004927292413048556	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998810645212322	WITHOUT_CLASSIFICATION	1.1893547876785262E-4	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999274617429361	WITHOUT_CLASSIFICATION	7.253825706384047E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997892618454611	WITHOUT_CLASSIFICATION	2.107381545388779E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999858573800152	WITHOUT_CLASSIFICATION	1.4142619984776137E-5	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999847264264739	WITHOUT_CLASSIFICATION	1.5273573526097638E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9910446109932624	WITHOUT_CLASSIFICATION	0.00895538900673775	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999014515994136	WITHOUT_CLASSIFICATION	9.854840058642265E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9998854729468326	WITHOUT_CLASSIFICATION	1.145270531673929E-4	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998478009715757	WITHOUT_CLASSIFICATION	1.52199028424282E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.99519715868283	WITHOUT_CLASSIFICATION	0.004802841317170108	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998642839819358	WITHOUT_CLASSIFICATION	1.3571601806410335E-4	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998722665333916	WITHOUT_CLASSIFICATION	1.2773346660843992E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.7466730603365356	WITHOUT_CLASSIFICATION	0.2533269396634644	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994081444539767	WITHOUT_CLASSIFICATION	5.918555460231943E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9993818233320989	WITHOUT_CLASSIFICATION	6.181766679009786E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997327970023355	WITHOUT_CLASSIFICATION	2.6720299766440803E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9940130010381902	WITHOUT_CLASSIFICATION	0.005986998961809842	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9987268859905192	WITHOUT_CLASSIFICATION	0.001273114009480821	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999717435800074	WITHOUT_CLASSIFICATION	2.825641999254006E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998400938232395	WITHOUT_CLASSIFICATION	1.599061767605349E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995942598256022	WITHOUT_CLASSIFICATION	4.0574017439779485E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999604732601892	WITHOUT_CLASSIFICATION	3.952673981079407E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999877974725832	WITHOUT_CLASSIFICATION	1.2202527416805592E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998810645212322	WITHOUT_CLASSIFICATION	1.1893547876785262E-4	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9974109791926097	WITHOUT_CLASSIFICATION	0.0025890208073904575	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9996465573322796	WITHOUT_CLASSIFICATION	3.534426677203444E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999288233762726	WITHOUT_CLASSIFICATION	7.117662372730445E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999285101854142	WITHOUT_CLASSIFICATION	7.148981458588784E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998781630921799	WITHOUT_CLASSIFICATION	1.2183690782012283E-4	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999954629795119	WITHOUT_CLASSIFICATION	4.537020488173651E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99921040051418	WITHOUT_CLASSIFICATION	7.895994858199703E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999935982104369	WITHOUT_CLASSIFICATION	6.401789563097823E-5	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9626984500240652	WITHOUT_CLASSIFICATION	0.03730154997593488	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997129878925367	WITHOUT_CLASSIFICATION	2.8701210746337095E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999437560228639	WITHOUT_CLASSIFICATION	5.624397713601476E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999956358780561	WITHOUT_CLASSIFICATION	4.3641219438903644E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998830639464429	WITHOUT_CLASSIFICATION	1.1693605355720183E-4	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998830639464429	WITHOUT_CLASSIFICATION	1.1693605355720183E-4	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999827633692943	WITHOUT_CLASSIFICATION	1.723663070575861E-5	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996155898117594	WITHOUT_CLASSIFICATION	3.8441018824071437E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999995399271484	WITHOUT_CLASSIFICATION	4.600728516004835E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999968480945859	WITHOUT_CLASSIFICATION	3.151905414016094E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9997953954072294	WITHOUT_CLASSIFICATION	2.046045927706112E-4	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999564229431562	WITHOUT_CLASSIFICATION	4.357705684372922E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998397486856623	WITHOUT_CLASSIFICATION	1.6025131433763235E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9994598390702968	WITHOUT_CLASSIFICATION	5.401609297032633E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999225163217756	WITHOUT_CLASSIFICATION	7.748367822433531E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999918174539026	WITHOUT_CLASSIFICATION	8.182546097394343E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996955310443701	WITHOUT_CLASSIFICATION	3.0446895562988237E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996955310443701	WITHOUT_CLASSIFICATION	3.0446895562988237E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9997558454492192	WITHOUT_CLASSIFICATION	2.4415455078084764E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998432559025301	WITHOUT_CLASSIFICATION	1.56744097469949E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9992195455496178	WITHOUT_CLASSIFICATION	7.804544503822295E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997757498939345	WITHOUT_CLASSIFICATION	2.242501060656354E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999975943880486	WITHOUT_CLASSIFICATION	2.405611951394946E-5	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9992569529987737	WITHOUT_CLASSIFICATION	7.430470012262692E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996114570996182	WITHOUT_CLASSIFICATION	3.8854290038188544E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9992153392496831	WITHOUT_CLASSIFICATION	7.846607503168719E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9995613247129462	WITHOUT_CLASSIFICATION	4.386752870537188E-4	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999591749589174	WITHOUT_CLASSIFICATION	4.0825041082604997E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999516234849286	WITHOUT_CLASSIFICATION	4.83765150713871E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997383791804683	WITHOUT_CLASSIFICATION	2.616208195317578E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9995188770330414	WITHOUT_CLASSIFICATION	4.811229669586087E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9965668195671981	WITHOUT_CLASSIFICATION	0.0034331804328020057	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994658991509561	WITHOUT_CLASSIFICATION	5.341008490438975E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999825948275344	WITHOUT_CLASSIFICATION	1.7405172465609814E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9818602280231221	WITHOUT_CLASSIFICATION	0.018139771976877907	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996807216320409	WITHOUT_CLASSIFICATION	3.192783679590486E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999377131438285	WITHOUT_CLASSIFICATION	6.22868561715192E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999120736272098	WITHOUT_CLASSIFICATION	8.79263727901764E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994956603445502	WITHOUT_CLASSIFICATION	5.043396554497972E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997126308704011	WITHOUT_CLASSIFICATION	2.8736912959890425E-4	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9994421666159248	WITHOUT_CLASSIFICATION	5.578333840752448E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998138906325758	WITHOUT_CLASSIFICATION	1.8610936742425644E-4	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998930664484359	WITHOUT_CLASSIFICATION	1.0693355156410723E-4	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996475091842668	WITHOUT_CLASSIFICATION	3.524908157332175E-4	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995363830094318	WITHOUT_CLASSIFICATION	4.6361699056820236E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999434974300535	WITHOUT_CLASSIFICATION	5.6502569946507526E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999378838909114	WITHOUT_CLASSIFICATION	6.211610908854812E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999802572422346	WITHOUT_CLASSIFICATION	1.9742757765401367E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9955679566904172	WITHOUT_CLASSIFICATION	0.00443204330958277	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998495358239082	WITHOUT_CLASSIFICATION	1.5046417609177644E-4	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999997288279515	WITHOUT_CLASSIFICATION	2.711720484995636E-6	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996483706907396	WITHOUT_CLASSIFICATION	3.516293092603465E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997762004942973	WITHOUT_CLASSIFICATION	2.2379950570282752E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999977720861133	WITHOUT_CLASSIFICATION	2.227913886744605E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9994371568435778	WITHOUT_CLASSIFICATION	5.628431564222123E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997356542187498	WITHOUT_CLASSIFICATION	2.6434578125028205E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999648930122036	WITHOUT_CLASSIFICATION	3.510698779638764E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9991512518537672	WITHOUT_CLASSIFICATION	8.487481462327539E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998950583478684	WITHOUT_CLASSIFICATION	1.0494165213149602E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9996958512053247	WITHOUT_CLASSIFICATION	3.0414879467536394E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9998230664599294	WITHOUT_CLASSIFICATION	1.7693354007060393E-4	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9996454023098844	WITHOUT_CLASSIFICATION	3.5459769011563793E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998017715994795	WITHOUT_CLASSIFICATION	1.9822840052055233E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9985308972001575	WITHOUT_CLASSIFICATION	0.0014691027998424183	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998751715732158	WITHOUT_CLASSIFICATION	1.2482842678424613E-4	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999486845537122	WITHOUT_CLASSIFICATION	5.131544628787527E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999374703165185	WITHOUT_CLASSIFICATION	6.252968348155125E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9975703177360105	WITHOUT_CLASSIFICATION	0.0024296822639896716	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998566261367287	WITHOUT_CLASSIFICATION	1.4337386327140155E-4	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999571267027553	WITHOUT_CLASSIFICATION	4.287329724477238E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999203744064787	WITHOUT_CLASSIFICATION	7.96255935211648E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998845854496469	WITHOUT_CLASSIFICATION	1.1541455035308009E-4	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999203744064787	WITHOUT_CLASSIFICATION	7.96255935211648E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9898295051391263	WITHOUT_CLASSIFICATION	0.010170494860873807	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9911318857100253	WITHOUT_CLASSIFICATION	0.008868114289974695	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998551579795573	WITHOUT_CLASSIFICATION	1.4484202044275356E-4	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999859918404623	WITHOUT_CLASSIFICATION	1.4008159537727532E-5	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9997915182149095	WITHOUT_CLASSIFICATION	2.0848178509050207E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998551579795573	WITHOUT_CLASSIFICATION	1.4484202044275356E-4	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999862802668751	WITHOUT_CLASSIFICATION	1.371973312502667E-5	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9990837494451233	WITHOUT_CLASSIFICATION	9.162505548767232E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999796321761973	WITHOUT_CLASSIFICATION	2.036782380271178E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9998676192277623	WITHOUT_CLASSIFICATION	1.3238077223770103E-4	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999519246406801	WITHOUT_CLASSIFICATION	4.807535931991874E-5	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999157872802887	WITHOUT_CLASSIFICATION	8.421271971119675E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999960520476234	WITHOUT_CLASSIFICATION	3.947952376561471E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9929472646578351	WITHOUT_CLASSIFICATION	0.007052735342164876	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999595506520992	WITHOUT_CLASSIFICATION	4.044934790074591E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999843236962634	WITHOUT_CLASSIFICATION	1.567630373659166E-4	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9987057171193497	WITHOUT_CLASSIFICATION	0.0012942828806503195	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999581158546715	WITHOUT_CLASSIFICATION	4.188414532849046E-4	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9994779296220373	WITHOUT_CLASSIFICATION	5.220703779627506E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997376437895582	WITHOUT_CLASSIFICATION	2.623562104417526E-4	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998760393466972	WITHOUT_CLASSIFICATION	1.239606533028414E-4	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999458961457564	WITHOUT_CLASSIFICATION	5.410385424359711E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9970572366236802	WITHOUT_CLASSIFICATION	0.00294276337631984	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9953138581439637	WITHOUT_CLASSIFICATION	0.0046861418560363985	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997632245123083	WITHOUT_CLASSIFICATION	2.3677548769163363E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9974051685024025	WITHOUT_CLASSIFICATION	0.002594831497597546	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9998649326177883	WITHOUT_CLASSIFICATION	1.3506738221178747E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9992006676415734	WITHOUT_CLASSIFICATION	7.993323584264737E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999561561969853	WITHOUT_CLASSIFICATION	4.3843803014701366E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9968358889703661	WITHOUT_CLASSIFICATION	0.0031641110296339336	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9668933050407857	WITHOUT_CLASSIFICATION	0.03310669495921416	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9714917783966729	WITHOUT_CLASSIFICATION	0.028508221603327093	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999850911798928	WITHOUT_CLASSIFICATION	1.4908820107126457E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9998314037332455	WITHOUT_CLASSIFICATION	1.6859626675441185E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999052960845032	WITHOUT_CLASSIFICATION	9.470391549687216E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999877612229704	WITHOUT_CLASSIFICATION	1.2238777029547676E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9277084094154358	WITHOUT_CLASSIFICATION	0.07229159058456433	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9974051685024025	WITHOUT_CLASSIFICATION	0.002594831497597546	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999508534115684	WITHOUT_CLASSIFICATION	4.91465884316032E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997958188265662	WITHOUT_CLASSIFICATION	2.0418117343385325E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9993046300749736	WITHOUT_CLASSIFICATION	6.953699250264248E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998565440089914	WITHOUT_CLASSIFICATION	1.4345599100867227E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999758061049542	WITHOUT_CLASSIFICATION	2.4193895045818372E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999303829290294	WITHOUT_CLASSIFICATION	6.961707097061572E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9953358714193823	WITHOUT_CLASSIFICATION	0.004664128580617641	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997626485461863	WITHOUT_CLASSIFICATION	2.373514538137339E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9984387857367222	WITHOUT_CLASSIFICATION	0.0015612142632778138	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9998813727800392	WITHOUT_CLASSIFICATION	1.1862721996091054E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999854109107381	WITHOUT_CLASSIFICATION	1.4589089261894189E-5	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999350916672817	WITHOUT_CLASSIFICATION	6.490833271827853E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9996866511379398	WITHOUT_CLASSIFICATION	3.133488620601433E-4	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999544746593073	WITHOUT_CLASSIFICATION	4.552534069282075E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999827315318912	WITHOUT_CLASSIFICATION	1.7268468108802367E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998738318122183	WITHOUT_CLASSIFICATION	1.2616818778157985E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9912442319638579	WITHOUT_CLASSIFICATION	0.008755768036142088	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996115297028686	WITHOUT_CLASSIFICATION	3.884702971313776E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997181532542071	WITHOUT_CLASSIFICATION	0.0028184674579289737	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9976646773344394	WITHOUT_CLASSIFICATION	0.0023353226655606174	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9989307352557045	WITHOUT_CLASSIFICATION	0.001069264744295528	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9989307352557045	WITHOUT_CLASSIFICATION	0.001069264744295528	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998551031126951	WITHOUT_CLASSIFICATION	1.448968873048914E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9989307352557045	WITHOUT_CLASSIFICATION	0.001069264744295528	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9989307352557045	WITHOUT_CLASSIFICATION	0.001069264744295528	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9985491197869019	WITHOUT_CLASSIFICATION	0.0014508802130980827	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9993271205638342	WITHOUT_CLASSIFICATION	6.728794361658081E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997354047070995	WITHOUT_CLASSIFICATION	2.645952929004363E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997354047070995	WITHOUT_CLASSIFICATION	2.645952929004363E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9946732859210848	WITHOUT_CLASSIFICATION	0.005326714078915154	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998223710887576	WITHOUT_CLASSIFICATION	1.7762891124234266E-4	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994563298434355	WITHOUT_CLASSIFICATION	5.436701565645994E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9996416627016693	WITHOUT_CLASSIFICATION	3.5833729833069334E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997388014850607	WITHOUT_CLASSIFICATION	2.6119851493939026E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997265254898976	WITHOUT_CLASSIFICATION	2.734745101023176E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997412623721201	WITHOUT_CLASSIFICATION	2.58737627879903E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999239133614263	WITHOUT_CLASSIFICATION	7.608663857365293E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998557289439756	WITHOUT_CLASSIFICATION	1.44271056024307E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999348956062848	WITHOUT_CLASSIFICATION	6.510439371518959E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996443082916212	WITHOUT_CLASSIFICATION	3.55691708378811E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9995799878796379	WITHOUT_CLASSIFICATION	4.2001212036215486E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999057587357658	WITHOUT_CLASSIFICATION	9.424126423418475E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9995324225960674	WITHOUT_CLASSIFICATION	4.6757740393251574E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9991417206724258	WITHOUT_CLASSIFICATION	8.582793275742396E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9990857228132878	WITHOUT_CLASSIFICATION	9.142771867122218E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9994210261209069	WITHOUT_CLASSIFICATION	5.789738790931324E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.999963973858085	WITHOUT_CLASSIFICATION	3.602614191501391E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999057587357658	WITHOUT_CLASSIFICATION	9.424126423418475E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9998649326177883	WITHOUT_CLASSIFICATION	1.3506738221178747E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9998381613643813	WITHOUT_CLASSIFICATION	1.6183863561873544E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998223614888257	WITHOUT_CLASSIFICATION	0.00177638511174298	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997528127546299	WITHOUT_CLASSIFICATION	0.0024718724537009995	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.999736952980387	WITHOUT_CLASSIFICATION	2.630470196129738E-4	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999947209211514	WITHOUT_CLASSIFICATION	5.279078848606576E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999215779795074	WITHOUT_CLASSIFICATION	7.842202049260176E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999198369399355	WITHOUT_CLASSIFICATION	8.016306006453977E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999503760255015	WITHOUT_CLASSIFICATION	4.962397449845993E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999983423369067	WITHOUT_CLASSIFICATION	1.6576630933866907E-6	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997530804880282	WITHOUT_CLASSIFICATION	2.469195119717442E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998503494672637	WITHOUT_CLASSIFICATION	1.496505327363759E-4	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9994982618763492	WITHOUT_CLASSIFICATION	5.017381236508067E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997815135537736	WITHOUT_CLASSIFICATION	2.184864462264516E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9946891622363424	WITHOUT_CLASSIFICATION	0.005310837763657581	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999782664866183	WITHOUT_CLASSIFICATION	2.1733513381656424E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999609540927029	WITHOUT_CLASSIFICATION	3.90459072970731E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999295575880226	WITHOUT_CLASSIFICATION	7.044241197734308E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9992484535650463	WITHOUT_CLASSIFICATION	7.515464349537677E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998836034240671	WITHOUT_CLASSIFICATION	1.1639657593282347E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9994424792305471	WITHOUT_CLASSIFICATION	5.575207694528707E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9994674271993406	WITHOUT_CLASSIFICATION	5.325728006594933E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999962865276484	WITHOUT_CLASSIFICATION	3.7134723514998734E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999503760255015	WITHOUT_CLASSIFICATION	4.962397449845993E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9997741783324499	WITHOUT_CLASSIFICATION	2.2582166755009308E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9998069790007221	WITHOUT_CLASSIFICATION	1.9302099927789005E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996510853995476	WITHOUT_CLASSIFICATION	3.489146004523962E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999263434340376	WITHOUT_CLASSIFICATION	7.365656596239186E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9997419357319212	WITHOUT_CLASSIFICATION	2.5806426807885665E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9997738498243008	WITHOUT_CLASSIFICATION	2.2615017569926855E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9997626681050453	WITHOUT_CLASSIFICATION	2.373318949545847E-4	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9997740631175236	WITHOUT_CLASSIFICATION	2.2593688247630206E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9997315474086336	WITHOUT_CLASSIFICATION	2.684525913663494E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999771645561745	WITHOUT_CLASSIFICATION	2.2835443825551754E-5	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999701594683644	WITHOUT_CLASSIFICATION	2.984053163560927E-4	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999521845348599	WITHOUT_CLASSIFICATION	4.781546514013249E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999055876142474	WITHOUT_CLASSIFICATION	9.441238575255885E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999241875641224	WITHOUT_CLASSIFICATION	7.581243587761818E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988840500369109	WITHOUT_CLASSIFICATION	0.0011159499630890516	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999771645561745	WITHOUT_CLASSIFICATION	2.2835443825551754E-5	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999984697734056	WITHOUT_CLASSIFICATION	1.530226594399047E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9916808369854917	WITHOUT_CLASSIFICATION	0.008319163014508194	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998322452766532	WITHOUT_CLASSIFICATION	1.677547233468765E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9996716693219807	WITHOUT_CLASSIFICATION	3.283306780192858E-4	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9998942287606388	WITHOUT_CLASSIFICATION	1.0577123936104647E-4	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999867422627382	WITHOUT_CLASSIFICATION	1.3257737261784114E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998300686483192	WITHOUT_CLASSIFICATION	1.6993135168078964E-4	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997644716271962	WITHOUT_CLASSIFICATION	2.3552837280388627E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997797029264673	WITHOUT_CLASSIFICATION	2.2029707353260914E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655976667994	WITHOUT_CLASSIFICATION	3.3440233320054195E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655976667994	WITHOUT_CLASSIFICATION	3.3440233320054195E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655976667994	WITHOUT_CLASSIFICATION	3.3440233320054195E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998245840887937	WITHOUT_CLASSIFICATION	1.7541591120622335E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998245840887937	WITHOUT_CLASSIFICATION	1.7541591120622335E-4	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997698190112825	WITHOUT_CLASSIFICATION	2.3018098871761217E-4	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999800678407845	WITHOUT_CLASSIFICATION	1.9932159215446797E-5	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9995517529244053	WITHOUT_CLASSIFICATION	4.4824707559455555E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9996398234972903	WITHOUT_CLASSIFICATION	3.601765027096887E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9929498342603441	WITHOUT_CLASSIFICATION	0.007050165739655994	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997391036172892	WITHOUT_CLASSIFICATION	2.608963827108056E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999784764242607	WITHOUT_CLASSIFICATION	2.1523575739301604E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9992960983423541	WITHOUT_CLASSIFICATION	7.039016576458054E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998994534353296	WITHOUT_CLASSIFICATION	1.0054656467034006E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997391036172892	WITHOUT_CLASSIFICATION	2.608963827108056E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999784764242607	WITHOUT_CLASSIFICATION	2.1523575739301604E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999720685503267	WITHOUT_CLASSIFICATION	2.793144967315914E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9994054893440917	WITHOUT_CLASSIFICATION	5.945106559083686E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999674151883471	WITHOUT_CLASSIFICATION	3.2584811652925735E-5	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9996252776483572	WITHOUT_CLASSIFICATION	3.7472235164285044E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998858914635257	WITHOUT_CLASSIFICATION	1.1410853647435246E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998784783965955	WITHOUT_CLASSIFICATION	1.215216034044784E-4	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999288773144202	WITHOUT_CLASSIFICATION	7.112268557989121E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999844136599012	WITHOUT_CLASSIFICATION	1.5586340098790516E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9975812843603485	WITHOUT_CLASSIFICATION	0.0024187156396515332	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9872994948311642	WITHOUT_CLASSIFICATION	0.012700505168835693	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999640469611827	WITHOUT_CLASSIFICATION	3.595303881730425E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999244864883123	WITHOUT_CLASSIFICATION	7.55135116876521E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999860183759389	WITHOUT_CLASSIFICATION	1.3981624061092175E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995522665692592	WITHOUT_CLASSIFICATION	4.4773343074070414E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999115929606883	WITHOUT_CLASSIFICATION	8.840703931174709E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998478165904037	WITHOUT_CLASSIFICATION	1.521834095963134E-4	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9959859819780593	WITHOUT_CLASSIFICATION	0.004014018021940633	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999957878783525	WITHOUT_CLASSIFICATION	4.212121647519858E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9996146224529452	WITHOUT_CLASSIFICATION	3.853775470547677E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999765433538991	WITHOUT_CLASSIFICATION	2.3456646100963126E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999992385553597	WITHOUT_CLASSIFICATION	7.614446402927993E-6	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9834336442919767	WITHOUT_CLASSIFICATION	0.016566355708023308	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997362059326749	WITHOUT_CLASSIFICATION	2.6379406732516E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999985885792261	WITHOUT_CLASSIFICATION	1.4114207738713166E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997777588756264	WITHOUT_CLASSIFICATION	2.222411243735951E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997187729414625	WITHOUT_CLASSIFICATION	2.8122705853753907E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996888096428589	WITHOUT_CLASSIFICATION	3.111903571411514E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996888096428589	WITHOUT_CLASSIFICATION	3.111903571411514E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997460109410936	WITHOUT_CLASSIFICATION	2.539890589063675E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9903520839429332	WITHOUT_CLASSIFICATION	0.009647916057066738	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998254872763606	WITHOUT_CLASSIFICATION	1.7451272363954034E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997850678695341	WITHOUT_CLASSIFICATION	2.1493213046591228E-4	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997872006502765	WITHOUT_CLASSIFICATION	2.1279934972345056E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.998882248941605	WITHOUT_CLASSIFICATION	0.0011177510583950103	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999754564108152	WITHOUT_CLASSIFICATION	2.4543589184798103E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999700419906696	WITHOUT_CLASSIFICATION	2.9958009330381228E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999698474358022	WITHOUT_CLASSIFICATION	3.0152564197803066E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996963643646476	WITHOUT_CLASSIFICATION	3.036356353524537E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996967149164608	WITHOUT_CLASSIFICATION	3.03285083539124E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9978698394528104	WITHOUT_CLASSIFICATION	0.002130160547189653	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9995369164960624	WITHOUT_CLASSIFICATION	4.630835039376678E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996949517099472	WITHOUT_CLASSIFICATION	3.0504829005283064E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9985860146729808	WITHOUT_CLASSIFICATION	0.001413985327019084	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999528908727768	WITHOUT_CLASSIFICATION	4.7109127223231684E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.99944613912241	WITHOUT_CLASSIFICATION	5.538608775899573E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9997533923190308	WITHOUT_CLASSIFICATION	2.466076809692133E-4	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9996250306709534	WITHOUT_CLASSIFICATION	3.7496932904658193E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996949517099472	WITHOUT_CLASSIFICATION	3.0504829005283064E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996949517099472	WITHOUT_CLASSIFICATION	3.0504829005283064E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9997080835772006	WITHOUT_CLASSIFICATION	2.9191642279946544E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999509047134811	WITHOUT_CLASSIFICATION	4.909528651894855E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997936067286248	WITHOUT_CLASSIFICATION	2.0639327137514322E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9998459085056727	WITHOUT_CLASSIFICATION	1.540914943273008E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999637071305532	WITHOUT_CLASSIFICATION	3.6292869446800436E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998478165904037	WITHOUT_CLASSIFICATION	1.521834095963134E-4	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998813637389783	WITHOUT_CLASSIFICATION	1.1863626102178041E-4	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999423093132414	WITHOUT_CLASSIFICATION	5.769068675862495E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999438768304237	WITHOUT_CLASSIFICATION	5.612316957615898E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997477618930628	WITHOUT_CLASSIFICATION	2.5223810693716865E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993388778041112	WITHOUT_CLASSIFICATION	6.611221958887435E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998635308288879	WITHOUT_CLASSIFICATION	1.3646917111213668E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997042705273418	WITHOUT_CLASSIFICATION	2.957294726581746E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997042705273418	WITHOUT_CLASSIFICATION	2.957294726581746E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997042705273418	WITHOUT_CLASSIFICATION	2.957294726581746E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997042705273418	WITHOUT_CLASSIFICATION	2.957294726581746E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372432760264	WITHOUT_CLASSIFICATION	1.627567239735494E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9974552579349136	WITHOUT_CLASSIFICATION	0.002544742065086316	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9941403995406789	WITHOUT_CLASSIFICATION	0.005859600459321086	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998920637689318	WITHOUT_CLASSIFICATION	1.0793623106826335E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999741329117332	WITHOUT_CLASSIFICATION	2.5867088266794266E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998253156571816	WITHOUT_CLASSIFICATION	1.7468434281838377E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999307649795321	WITHOUT_CLASSIFICATION	6.923502046780971E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.999975120533096	WITHOUT_CLASSIFICATION	2.487946690394174E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999818659413298	WITHOUT_CLASSIFICATION	1.8134058670227913E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998057510296368	WITHOUT_CLASSIFICATION	1.9424897036322874E-4	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997578399575847	WITHOUT_CLASSIFICATION	2.42160042415271E-4	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998536814143607	WITHOUT_CLASSIFICATION	1.4631858563938667E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9997896950394083	WITHOUT_CLASSIFICATION	2.103049605917691E-4	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999724057455678	WITHOUT_CLASSIFICATION	2.75942544321711E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999724057455678	WITHOUT_CLASSIFICATION	2.75942544321711E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999156989109942	WITHOUT_CLASSIFICATION	8.430108900577545E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999642905652318	WITHOUT_CLASSIFICATION	3.570943476828488E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999836116815132	WITHOUT_CLASSIFICATION	1.638831848680243E-5	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996236668979379	WITHOUT_CLASSIFICATION	3.763331020621759E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9992868801468372	WITHOUT_CLASSIFICATION	7.131198531628479E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996655976667994	WITHOUT_CLASSIFICATION	3.3440233320054195E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9997880314265056	WITHOUT_CLASSIFICATION	2.1196857349446217E-4	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999435304630023	WITHOUT_CLASSIFICATION	5.646953699765483E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999808680518125	WITHOUT_CLASSIFICATION	1.9131948187579787E-5	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9877153046602982	WITHOUT_CLASSIFICATION	0.012284695339701881	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997509460256618	WITHOUT_CLASSIFICATION	2.4905397433817617E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9995288362423551	WITHOUT_CLASSIFICATION	4.7116375764490214E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999820240939855	WITHOUT_CLASSIFICATION	1.797590601446658E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995905202873582	WITHOUT_CLASSIFICATION	4.094797126417621E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998796536886215	WITHOUT_CLASSIFICATION	1.2034631137851371E-4	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9979276175646862	WITHOUT_CLASSIFICATION	0.002072382435313817	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9986969709448931	WITHOUT_CLASSIFICATION	0.0013030290551068755	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998307685714793	WITHOUT_CLASSIFICATION	1.692314285205199E-4	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999989598329266	WITHOUT_CLASSIFICATION	1.040167073368838E-6	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999948627740449	WITHOUT_CLASSIFICATION	5.137225955022344E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999970586334195	WITHOUT_CLASSIFICATION	2.941366580550863E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999867637940528	WITHOUT_CLASSIFICATION	1.3236205947136611E-5	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998960124397189	WITHOUT_CLASSIFICATION	1.0398756028105936E-4	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993813778890067	WITHOUT_CLASSIFICATION	6.186221109931883E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9806436149017693	WITHOUT_CLASSIFICATION	0.019356385098230663	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999147646299517	WITHOUT_CLASSIFICATION	8.523537004839958E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999607684013607	WITHOUT_CLASSIFICATION	3.923159863924251E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996991133813533	WITHOUT_CLASSIFICATION	3.0088661864662307E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999899767812874	WITHOUT_CLASSIFICATION	1.0023218712535608E-5	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998983854021565	WITHOUT_CLASSIFICATION	1.0161459784356874E-4	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997864777720533	WITHOUT_CLASSIFICATION	2.135222279466709E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999676847600073	WITHOUT_CLASSIFICATION	3.2315239992721576E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9994585358189626	WITHOUT_CLASSIFICATION	5.414641810374374E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995037427128962	WITHOUT_CLASSIFICATION	4.962572871038185E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.999992009317385	WITHOUT_CLASSIFICATION	7.990682614991313E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999937880666144	WITHOUT_CLASSIFICATION	6.211933385602664E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999379563546039	WITHOUT_CLASSIFICATION	6.204364539612936E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9936280330642094	WITHOUT_CLASSIFICATION	0.006371966935790598	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997742283761051	WITHOUT_CLASSIFICATION	2.2577162389496197E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9996796181487676	WITHOUT_CLASSIFICATION	3.2038185123230904E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9995841282937437	WITHOUT_CLASSIFICATION	4.1587170625630735E-4	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996596391005605	WITHOUT_CLASSIFICATION	3.403608994395558E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9993209570084667	WITHOUT_CLASSIFICATION	6.79042991533243E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998853841323553	WITHOUT_CLASSIFICATION	1.1461586764479043E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999085392820007	WITHOUT_CLASSIFICATION	9.146071799923215E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996579581078295	WITHOUT_CLASSIFICATION	3.42041892170458E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998563413965552	WITHOUT_CLASSIFICATION	1.4365860344475043E-4	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999807212928816	WITHOUT_CLASSIFICATION	1.927870711836779E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996978885148381	WITHOUT_CLASSIFICATION	3.021114851619457E-4	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.994386366207003	WITHOUT_CLASSIFICATION	0.005613633792996845	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.995870133702674	WITHOUT_CLASSIFICATION	0.004129866297326019	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9993995121925108	WITHOUT_CLASSIFICATION	6.004878074893292E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999025883125605	WITHOUT_CLASSIFICATION	9.741168743950741E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9990478349270038	WITHOUT_CLASSIFICATION	9.52165072996269E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998869859452951	WITHOUT_CLASSIFICATION	1.1301405470486859E-4	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999989326593736	WITHOUT_CLASSIFICATION	1.0673406264059479E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997479738651874	WITHOUT_CLASSIFICATION	2.520261348125563E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999979831136638	WITHOUT_CLASSIFICATION	2.0168863362037824E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998139307037641	WITHOUT_CLASSIFICATION	1.8606929623589538E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999722609121233	WITHOUT_CLASSIFICATION	2.7739087876551308E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998369665828404	WITHOUT_CLASSIFICATION	1.6303341715952907E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998397443917502	WITHOUT_CLASSIFICATION	1.6025560824985984E-4	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998009655925426	WITHOUT_CLASSIFICATION	1.990344074574115E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9969843282112241	WITHOUT_CLASSIFICATION	0.003015671788776076	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999848233382701	WITHOUT_CLASSIFICATION	1.5176661729864352E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9977864986007805	WITHOUT_CLASSIFICATION	0.002213501399219489	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998372963875423	WITHOUT_CLASSIFICATION	1.6270361245763866E-4	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997693910952612	WITHOUT_CLASSIFICATION	2.3060890473888582E-4	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999788118930582	WITHOUT_CLASSIFICATION	2.1188106941896274E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999415646667836	WITHOUT_CLASSIFICATION	5.843533321643701E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999911247334249	WITHOUT_CLASSIFICATION	8.875266575091944E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999182329987649	WITHOUT_CLASSIFICATION	8.176700123511294E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999724352612202	WITHOUT_CLASSIFICATION	2.7564738779795863E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999181308686528	WITHOUT_CLASSIFICATION	8.186913134728397E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999679592105275	WITHOUT_CLASSIFICATION	3.204078947239943E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9995811154288304	WITHOUT_CLASSIFICATION	4.188845711694766E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9998851014145117	WITHOUT_CLASSIFICATION	1.1489858548828489E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999030893462423	WITHOUT_CLASSIFICATION	9.691065375779568E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999672530983245	WITHOUT_CLASSIFICATION	3.274690167549116E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999049951123582	WITHOUT_CLASSIFICATION	9.5004887641815E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999458961457564	WITHOUT_CLASSIFICATION	5.410385424359711E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996016066293193	WITHOUT_CLASSIFICATION	3.983933706807898E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9989756325086411	WITHOUT_CLASSIFICATION	0.0010243674913589962	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9997635254215133	WITHOUT_CLASSIFICATION	2.364745784866939E-4	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999378137575735	WITHOUT_CLASSIFICATION	6.218624242649923E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999925975917344	WITHOUT_CLASSIFICATION	7.402408265599012E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9979685416548636	WITHOUT_CLASSIFICATION	0.002031458345136339	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9994039286933502	WITHOUT_CLASSIFICATION	5.960713066498238E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9978954598952445	WITHOUT_CLASSIFICATION	0.002104540104755473	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998620022120267	WITHOUT_CLASSIFICATION	1.379977879732734E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999128584992495	WITHOUT_CLASSIFICATION	8.71415007504958E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.997605968417903	WITHOUT_CLASSIFICATION	0.0023940315820970043	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999077310344885	WITHOUT_CLASSIFICATION	9.22689655114737E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999915699739746	WITHOUT_CLASSIFICATION	8.430026025400238E-5	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999877141944491	WITHOUT_CLASSIFICATION	1.2285805550915705E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999324257824527	WITHOUT_CLASSIFICATION	6.757421754732919E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999329515836428	WITHOUT_CLASSIFICATION	6.704841635723866E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999166766560277	WITHOUT_CLASSIFICATION	8.332334397226982E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999075092241595	WITHOUT_CLASSIFICATION	9.249077584047175E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999075092241595	WITHOUT_CLASSIFICATION	9.249077584047175E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9996985543458264	WITHOUT_CLASSIFICATION	3.0144565417350883E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9897112606300482	WITHOUT_CLASSIFICATION	0.010288739369951807	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997362892084554	WITHOUT_CLASSIFICATION	2.637107915446958E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9931108847660903	WITHOUT_CLASSIFICATION	0.006889115233909576	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9987816464201223	WITHOUT_CLASSIFICATION	0.0012183535798776539	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9912648686586898	WITHOUT_CLASSIFICATION	0.008735131341310258	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998585447800012	WITHOUT_CLASSIFICATION	1.4145521999874038E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998755000255327	WITHOUT_CLASSIFICATION	1.2449997446730728E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9981690523140866	WITHOUT_CLASSIFICATION	0.001830947685913393	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999709563759238	WITHOUT_CLASSIFICATION	2.9043624076148828E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998463095429698	WITHOUT_CLASSIFICATION	1.53690457030125E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998752943832199	WITHOUT_CLASSIFICATION	1.2470561678016082E-4	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999636021257001	WITHOUT_CLASSIFICATION	3.6397874299842496E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999100103258596	WITHOUT_CLASSIFICATION	8.998967414039558E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998411392565643	WITHOUT_CLASSIFICATION	1.5886074343584984E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963874998278771	WITHOUT_CLASSIFICATION	0.003612500172122812	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9963874998278771	WITHOUT_CLASSIFICATION	0.003612500172122812	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999739266778364	WITHOUT_CLASSIFICATION	2.60733221636003E-4	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997969762031108	WITHOUT_CLASSIFICATION	2.0302379688918218E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999698393294857	WITHOUT_CLASSIFICATION	3.0160670514284804E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997939478651058	WITHOUT_CLASSIFICATION	2.0605213489420849E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999754175604182	WITHOUT_CLASSIFICATION	2.4582439581836822E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999897680168135	WITHOUT_CLASSIFICATION	1.0231983186424804E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999897680168135	WITHOUT_CLASSIFICATION	1.0231983186424804E-5	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997947729836718	WITHOUT_CLASSIFICATION	2.0522701632812718E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999865544669312	WITHOUT_CLASSIFICATION	1.3445533068792833E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999183795014083	WITHOUT_CLASSIFICATION	8.16204985916227E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9796577966651483	WITHOUT_CLASSIFICATION	0.02034220333485168	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9995520914287028	WITHOUT_CLASSIFICATION	4.479085712970764E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999828175549632	WITHOUT_CLASSIFICATION	1.7182445036795506E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996953907891185	WITHOUT_CLASSIFICATION	3.046092108814618E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999340270427973	WITHOUT_CLASSIFICATION	6.597295720269818E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9896339888645065	WITHOUT_CLASSIFICATION	0.010366011135493495	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992610749132086	WITHOUT_CLASSIFICATION	7.389250867915187E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999891174142517	WITHOUT_CLASSIFICATION	1.0882585748287954E-4	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9984371207593635	WITHOUT_CLASSIFICATION	0.0015628792406364505	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999431078859283	WITHOUT_CLASSIFICATION	5.689211407173331E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994658991509561	WITHOUT_CLASSIFICATION	5.341008490438975E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.996066164570028	WITHOUT_CLASSIFICATION	0.0039338354299719895	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999512885301766	WITHOUT_CLASSIFICATION	4.871146982346556E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9941588784350467	WITHOUT_CLASSIFICATION	0.005841121564953316	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999833820880907	WITHOUT_CLASSIFICATION	1.6617911909299745E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998684874306152	WITHOUT_CLASSIFICATION	1.3151256938485624E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997882925719538	WITHOUT_CLASSIFICATION	2.11707428046311E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996322359709704	WITHOUT_CLASSIFICATION	3.6776402902954724E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998834271179052	WITHOUT_CLASSIFICATION	1.165728820948034E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998913481638951	WITHOUT_CLASSIFICATION	1.0865183610486007E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995365831343731	WITHOUT_CLASSIFICATION	4.634168656268559E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999279751898003	WITHOUT_CLASSIFICATION	7.202481019982083E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999953318337196	WITHOUT_CLASSIFICATION	4.668166280399104E-6	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9990033586005134	WITHOUT_CLASSIFICATION	9.96641399486685E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998165196301404	WITHOUT_CLASSIFICATION	1.834803698596363E-4	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994648010780218	WITHOUT_CLASSIFICATION	5.351989219781997E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9866045563029455	WITHOUT_CLASSIFICATION	0.013395443697054544	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.970482650540265	WITHOUT_CLASSIFICATION	0.029517349459735026	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997101289253407	WITHOUT_CLASSIFICATION	2.8987107465922756E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9993880512994522	WITHOUT_CLASSIFICATION	6.119487005477849E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.999697963128391	WITHOUT_CLASSIFICATION	3.0203687160899005E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9996999214111608	WITHOUT_CLASSIFICATION	3.0007858883917974E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998697479379858	WITHOUT_CLASSIFICATION	1.3025206201415564E-4	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999060518085273	WITHOUT_CLASSIFICATION	9.394819147268474E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996893977406496	WITHOUT_CLASSIFICATION	3.106022593503501E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999029425438152	WITHOUT_CLASSIFICATION	9.705745618478319E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9985894681405284	WITHOUT_CLASSIFICATION	0.0014105318594716206	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9972676089384431	WITHOUT_CLASSIFICATION	0.00273239106155693	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9993249932841244	WITHOUT_CLASSIFICATION	6.75006715875666E-4	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.996952232010691	WITHOUT_CLASSIFICATION	0.0030477679893089883	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9998697479379858	WITHOUT_CLASSIFICATION	1.3025206201415564E-4	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999060518085273	WITHOUT_CLASSIFICATION	9.394819147268474E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998509465311202	WITHOUT_CLASSIFICATION	1.490534688798187E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997456399064877	WITHOUT_CLASSIFICATION	2.5436009351228957E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999959953661224	WITHOUT_CLASSIFICATION	4.004633877586713E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9992681778229876	WITHOUT_CLASSIFICATION	7.318221770124376E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999598468956324	WITHOUT_CLASSIFICATION	4.0153104367603555E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9990258702950172	WITHOUT_CLASSIFICATION	9.74129704982894E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999255195624795	WITHOUT_CLASSIFICATION	7.448043752049766E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9994689036021184	WITHOUT_CLASSIFICATION	5.310963978815455E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999954179976634	WITHOUT_CLASSIFICATION	4.58200233659598E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999633397440908	WITHOUT_CLASSIFICATION	3.666025590928548E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998272232898352	WITHOUT_CLASSIFICATION	1.727767101646987E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999633397440908	WITHOUT_CLASSIFICATION	3.666025590928548E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9983735708930771	WITHOUT_CLASSIFICATION	0.0016264291069229347	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994782254981776	WITHOUT_CLASSIFICATION	5.217745018224191E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9983735708930771	WITHOUT_CLASSIFICATION	0.0016264291069229347	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998260611526069	WITHOUT_CLASSIFICATION	1.73938847393134E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9912454483589005	WITHOUT_CLASSIFICATION	0.008754551641099508	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9989114423262808	WITHOUT_CLASSIFICATION	0.001088557673719249	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9989114423262808	WITHOUT_CLASSIFICATION	0.001088557673719249	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9994728849243074	WITHOUT_CLASSIFICATION	5.271150756925514E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9994758373828883	WITHOUT_CLASSIFICATION	5.24162617111737E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9994728849243074	WITHOUT_CLASSIFICATION	5.271150756925514E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998545717405375	WITHOUT_CLASSIFICATION	1.45428259462525E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998025190097383	WITHOUT_CLASSIFICATION	1.974809902617053E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997429270531468	WITHOUT_CLASSIFICATION	2.5707294685322664E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996904993957703	WITHOUT_CLASSIFICATION	3.095006042297621E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9994512321557767	WITHOUT_CLASSIFICATION	5.487678442232347E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9976971722327601	WITHOUT_CLASSIFICATION	0.002302827767239879	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9998775958694051	WITHOUT_CLASSIFICATION	1.2240413059496432E-4	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997708428128331	WITHOUT_CLASSIFICATION	2.29157187166735E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998577047715815	WITHOUT_CLASSIFICATION	1.4229522841849757E-4	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999827232971869	WITHOUT_CLASSIFICATION	1.7276702813101764E-4	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998604020436394	WITHOUT_CLASSIFICATION	1.3959795636056817E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998713879310817	WITHOUT_CLASSIFICATION	1.2861206891828705E-4	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999318910649823	WITHOUT_CLASSIFICATION	6.810893501778055E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997205362206132	WITHOUT_CLASSIFICATION	2.794637793867197E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9995642942318356	WITHOUT_CLASSIFICATION	4.3570576816440534E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997310200993272	WITHOUT_CLASSIFICATION	2.689799006728151E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9979963465673962	WITHOUT_CLASSIFICATION	0.00200365343260367	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997499716316528	WITHOUT_CLASSIFICATION	2.500283683471702E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996484823015888	WITHOUT_CLASSIFICATION	3.51517698411164E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999563085658307	WITHOUT_CLASSIFICATION	4.369143416930375E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9993659440804697	WITHOUT_CLASSIFICATION	6.340559195302637E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9994015021507098	WITHOUT_CLASSIFICATION	5.984978492901928E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9997429270531468	WITHOUT_CLASSIFICATION	2.5707294685322664E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999936994683485	WITHOUT_CLASSIFICATION	6.300531651498096E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998588697548404	WITHOUT_CLASSIFICATION	1.411302451595776E-4	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986871055879623	WITHOUT_CLASSIFICATION	0.0013128944120376622	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9997396059073119	WITHOUT_CLASSIFICATION	2.603940926880273E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999694661215804	WITHOUT_CLASSIFICATION	3.05338784196446E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999618795907635	WITHOUT_CLASSIFICATION	3.8120409236472185E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998545717405375	WITHOUT_CLASSIFICATION	1.45428259462525E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998545717405375	WITHOUT_CLASSIFICATION	1.45428259462525E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9994926196855133	WITHOUT_CLASSIFICATION	5.073803144866481E-4	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999618795907635	WITHOUT_CLASSIFICATION	3.8120409236472185E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9997351573871605	WITHOUT_CLASSIFICATION	2.648426128395103E-4	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9900757078925663	WITHOUT_CLASSIFICATION	0.009924292107433716	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9979442014675317	WITHOUT_CLASSIFICATION	0.002055798532468401	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9986952796795829	WITHOUT_CLASSIFICATION	0.0013047203204170658	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999025840952033	WITHOUT_CLASSIFICATION	9.741590479677109E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994814119093927	WITHOUT_CLASSIFICATION	5.185880906073021E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993444105041135	WITHOUT_CLASSIFICATION	6.555894958865618E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997708428128331	WITHOUT_CLASSIFICATION	2.29157187166735E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9997318053659515	WITHOUT_CLASSIFICATION	2.6819463404839476E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993444105041135	WITHOUT_CLASSIFICATION	6.555894958865618E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998959190132748	WITHOUT_CLASSIFICATION	1.0408098672528218E-4	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.99993967634787	WITHOUT_CLASSIFICATION	6.0323652129981544E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998933084375953	WITHOUT_CLASSIFICATION	1.0669156240472507E-4	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9997365827208429	WITHOUT_CLASSIFICATION	2.634172791570856E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9990599915373359	WITHOUT_CLASSIFICATION	9.400084626640653E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9956231139682128	WITHOUT_CLASSIFICATION	0.004376886031787209	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997080521439211	WITHOUT_CLASSIFICATION	2.9194785607890587E-4	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9997623442141185	WITHOUT_CLASSIFICATION	2.376557858816183E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999263170706517	WITHOUT_CLASSIFICATION	7.368292934822367E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.99982068159353	WITHOUT_CLASSIFICATION	1.7931840647001363E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999346211891734	WITHOUT_CLASSIFICATION	6.53788108266193E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993444105041135	WITHOUT_CLASSIFICATION	6.555894958865618E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9990599915373359	WITHOUT_CLASSIFICATION	9.400084626640653E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997080521439211	WITHOUT_CLASSIFICATION	2.9194785607890587E-4	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996994357052698	WITHOUT_CLASSIFICATION	3.005642947302704E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999630306993859	WITHOUT_CLASSIFICATION	3.696930061419644E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999458601726726	WITHOUT_CLASSIFICATION	5.4139827327454616E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998967818993582	WITHOUT_CLASSIFICATION	1.0321810064190016E-4	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999902849372138	WITHOUT_CLASSIFICATION	9.715062786201718E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998959190132748	WITHOUT_CLASSIFICATION	1.0408098672528218E-4	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995174454781596	WITHOUT_CLASSIFICATION	4.825545218403423E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9997726859264494	WITHOUT_CLASSIFICATION	2.2731407355068093E-4	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9995925536491596	WITHOUT_CLASSIFICATION	4.074463508404931E-4	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999376819333708	WITHOUT_CLASSIFICATION	6.23180666291798E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999376819333708	WITHOUT_CLASSIFICATION	6.23180666291798E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9997818506517308	WITHOUT_CLASSIFICATION	2.1814934826924225E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998260611526069	WITHOUT_CLASSIFICATION	1.73938847393134E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996937831033734	WITHOUT_CLASSIFICATION	3.062168966265605E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999942551769325	WITHOUT_CLASSIFICATION	5.744823067496682E-5	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9875263056472726	WITHOUT_CLASSIFICATION	0.0124736943527274	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.990996977440952	WITHOUT_CLASSIFICATION	0.009003022559047906	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.99496080262845	WITHOUT_CLASSIFICATION	0.00503919737155005	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9988785461193412	WITHOUT_CLASSIFICATION	0.001121453880658752	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9995276199858364	WITHOUT_CLASSIFICATION	4.723800141635855E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9989341056000446	WITHOUT_CLASSIFICATION	0.0010658943999554734	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997333636512445	WITHOUT_CLASSIFICATION	2.666363487553839E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999291515902716	WITHOUT_CLASSIFICATION	7.08484097283383E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9994961648011388	WITHOUT_CLASSIFICATION	5.038351988611529E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9995167250542286	WITHOUT_CLASSIFICATION	4.8327494577135854E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9991086827692159	WITHOUT_CLASSIFICATION	8.913172307840219E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.999875431678767	WITHOUT_CLASSIFICATION	1.2456832123298333E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999399672598752	WITHOUT_CLASSIFICATION	6.003274012483321E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9961995000257139	WITHOUT_CLASSIFICATION	0.0038004999742860357	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9997791158885154	WITHOUT_CLASSIFICATION	2.208841114847067E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999478098736385	WITHOUT_CLASSIFICATION	5.219012636151878E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9998568571476273	WITHOUT_CLASSIFICATION	1.4314285237265344E-4	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9994961875381893	WITHOUT_CLASSIFICATION	5.038124618107909E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999313004764039	WITHOUT_CLASSIFICATION	6.869952359603067E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999715250221489	WITHOUT_CLASSIFICATION	2.8474977851103616E-5	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.998999605329734	WITHOUT_CLASSIFICATION	0.0010003946702660225	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999933326054111	WITHOUT_CLASSIFICATION	6.667394588894122E-5	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999426633910286	WITHOUT_CLASSIFICATION	5.733660897142939E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.998820562176948	WITHOUT_CLASSIFICATION	0.001179437823051991	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999928606533984	WITHOUT_CLASSIFICATION	7.13934660160438E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999123995955148	WITHOUT_CLASSIFICATION	8.760040448514937E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997272655747869	WITHOUT_CLASSIFICATION	2.727344252131329E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999263833153703	WITHOUT_CLASSIFICATION	7.361668462967127E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9815920405041184	WITHOUT_CLASSIFICATION	0.018407959495881546	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996925481940031	WITHOUT_CLASSIFICATION	3.074518059968583E-4	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9991015810599342	WITHOUT_CLASSIFICATION	8.98418940065919E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997400844087849	WITHOUT_CLASSIFICATION	2.599155912150371E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9978670690184643	WITHOUT_CLASSIFICATION	0.0021329309815357137	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998694033165847	WITHOUT_CLASSIFICATION	1.3059668341530373E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995518787847399	WITHOUT_CLASSIFICATION	4.4812121525995304E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.99995173410637	WITHOUT_CLASSIFICATION	4.826589363012063E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999877974725832	WITHOUT_CLASSIFICATION	1.2202527416805592E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9987517657925928	WITHOUT_CLASSIFICATION	0.0012482342074071277	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997041688868381	WITHOUT_CLASSIFICATION	2.958311131618334E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998925695839591	WITHOUT_CLASSIFICATION	1.0743041604090685E-4	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9938855036860407	WITHOUT_CLASSIFICATION	0.00611449631395932	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997041688868381	WITHOUT_CLASSIFICATION	2.958311131618334E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9987517657925928	WITHOUT_CLASSIFICATION	0.0012482342074071277	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998925695839591	WITHOUT_CLASSIFICATION	1.0743041604090685E-4	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999421047505389	WITHOUT_CLASSIFICATION	5.7895249461243065E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998986015178601	WITHOUT_CLASSIFICATION	1.0139848213986398E-4	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9989835748107746	WITHOUT_CLASSIFICATION	0.0010164251892253945	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999430801619666	WITHOUT_CLASSIFICATION	5.691983803344377E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999918212257565	WITHOUT_CLASSIFICATION	8.178774243479332E-6	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9962806887748112	WITHOUT_CLASSIFICATION	0.003719311225188778	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9995667915213554	WITHOUT_CLASSIFICATION	4.3320847864458857E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9975286038324988	WITHOUT_CLASSIFICATION	0.002471396167501221	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999992928973722	WITHOUT_CLASSIFICATION	7.071026277916677E-6	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9960393039261757	WITHOUT_CLASSIFICATION	0.003960696073824376	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9998798891116745	WITHOUT_CLASSIFICATION	1.2011088832543932E-4	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9994319348180812	WITHOUT_CLASSIFICATION	5.680651819187605E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.99972702698963	WITHOUT_CLASSIFICATION	2.729730103699357E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999882468820467	WITHOUT_CLASSIFICATION	1.1753117953291806E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999957653395186	WITHOUT_CLASSIFICATION	4.234660481296534E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999085688584367	WITHOUT_CLASSIFICATION	9.1431141563392E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9947414117860963	WITHOUT_CLASSIFICATION	0.0052585882139037	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999900981754007	WITHOUT_CLASSIFICATION	9.901824599251742E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.998814613451901	WITHOUT_CLASSIFICATION	0.0011853865480989311	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9997789558417591	WITHOUT_CLASSIFICATION	2.2104415824094058E-4	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9906622286300388	WITHOUT_CLASSIFICATION	0.009337771369961249	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999952926778699	WITHOUT_CLASSIFICATION	4.7073221301038185E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999039818833914	WITHOUT_CLASSIFICATION	9.601811660857105E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9995067784817043	WITHOUT_CLASSIFICATION	4.932215182957141E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997789558417591	WITHOUT_CLASSIFICATION	2.2104415824094058E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997789558417591	WITHOUT_CLASSIFICATION	2.2104415824094058E-4	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999641216083495	WITHOUT_CLASSIFICATION	3.5878391650572194E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999641216083495	WITHOUT_CLASSIFICATION	3.5878391650572194E-5	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9980765336215235	WITHOUT_CLASSIFICATION	0.0019234663784764717	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9947414117860963	WITHOUT_CLASSIFICATION	0.0052585882139037	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998483873501993	WITHOUT_CLASSIFICATION	1.5161264980068122E-4	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998877756695908	WITHOUT_CLASSIFICATION	1.1222433040915959E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998632526898561	WITHOUT_CLASSIFICATION	1.3674731014392202E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998632526898561	WITHOUT_CLASSIFICATION	1.3674731014392202E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9996242877595943	WITHOUT_CLASSIFICATION	3.757122404056169E-4	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998190140535242	WITHOUT_CLASSIFICATION	1.8098594647570048E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999546099107823	WITHOUT_CLASSIFICATION	4.539008921770013E-4	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999561756374957	WITHOUT_CLASSIFICATION	4.382436250423735E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9985082136678745	WITHOUT_CLASSIFICATION	0.0014917863321255518	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999856274926721	WITHOUT_CLASSIFICATION	1.4372507327895808E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9995841963847155	WITHOUT_CLASSIFICATION	4.1580361528447877E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997984367779901	WITHOUT_CLASSIFICATION	2.015632220099617E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999005937837616	WITHOUT_CLASSIFICATION	9.940621623847013E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9952613140734478	WITHOUT_CLASSIFICATION	0.004738685926552198	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998793268841635	WITHOUT_CLASSIFICATION	1.2067311583647187E-4	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998268990990924	WITHOUT_CLASSIFICATION	1.7310090090753982E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998535357035765	WITHOUT_CLASSIFICATION	1.4646429642348636E-4	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.99973106945464	WITHOUT_CLASSIFICATION	2.689305453601139E-4	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996638720500641	WITHOUT_CLASSIFICATION	3.361279499359445E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997907854139286	WITHOUT_CLASSIFICATION	2.0921458607133103E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998248060504371	WITHOUT_CLASSIFICATION	1.7519394956292807E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998236693854353	WITHOUT_CLASSIFICATION	1.7633061456454906E-4	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.997889589343784	WITHOUT_CLASSIFICATION	0.0021104106562160707	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9992654245692263	WITHOUT_CLASSIFICATION	7.345754307736739E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998591438354223	WITHOUT_CLASSIFICATION	1.4085616457771538E-4	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9978727328595208	WITHOUT_CLASSIFICATION	0.002127267140479172	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999744193904979	WITHOUT_CLASSIFICATION	2.5580609502092564E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998460989852306	WITHOUT_CLASSIFICATION	1.5390101476933172E-4	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994549915369344	WITHOUT_CLASSIFICATION	5.450084630656022E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998495802372723	WITHOUT_CLASSIFICATION	1.5041976272762498E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999478098736385	WITHOUT_CLASSIFICATION	5.219012636151878E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999484081254763	WITHOUT_CLASSIFICATION	5.159187452370338E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9987878465447184	WITHOUT_CLASSIFICATION	0.0012121534552816137	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997375086781791	WITHOUT_CLASSIFICATION	2.6249132182084727E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999735397420253	WITHOUT_CLASSIFICATION	2.646025797470303E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999737075582204	WITHOUT_CLASSIFICATION	2.6292441779593114E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999737075582204	WITHOUT_CLASSIFICATION	2.6292441779593114E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999607039417694	WITHOUT_CLASSIFICATION	3.929605823065395E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999659427295311	WITHOUT_CLASSIFICATION	3.405727046896959E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.999932590196669	WITHOUT_CLASSIFICATION	6.740980333095207E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.999932590196669	WITHOUT_CLASSIFICATION	6.740980333095207E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9910446109932624	WITHOUT_CLASSIFICATION	0.00895538900673775	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9991465487189995	WITHOUT_CLASSIFICATION	8.534512810005091E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9993127086624645	WITHOUT_CLASSIFICATION	6.872913375356801E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999637071305532	WITHOUT_CLASSIFICATION	3.6292869446800436E-4	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9997530804880282	WITHOUT_CLASSIFICATION	2.469195119717442E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999638993414104	WITHOUT_CLASSIFICATION	3.610065858960441E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999764906081834	WITHOUT_CLASSIFICATION	2.3509391816590462E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998924959714737	WITHOUT_CLASSIFICATION	1.0750402852637449E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998924959714737	WITHOUT_CLASSIFICATION	1.0750402852637449E-4	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998547863511946	WITHOUT_CLASSIFICATION	1.4521364880541488E-4	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999196664994344	WITHOUT_CLASSIFICATION	8.03335005655536E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999196664994344	WITHOUT_CLASSIFICATION	8.03335005655536E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999159361541436	WITHOUT_CLASSIFICATION	8.406384585637484E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999945705721782	WITHOUT_CLASSIFICATION	5.429427821802075E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999381313859217	WITHOUT_CLASSIFICATION	6.186861407829774E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999663084443013	WITHOUT_CLASSIFICATION	3.3691555698686976E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999921050422161	WITHOUT_CLASSIFICATION	7.894957783904244E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9991385310611289	WITHOUT_CLASSIFICATION	8.614689388709655E-4	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9992175781663067	WITHOUT_CLASSIFICATION	7.824218336933293E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9994609535556798	WITHOUT_CLASSIFICATION	5.39046444320312E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9960082953094912	WITHOUT_CLASSIFICATION	0.003991704690508775	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974146174250966	WITHOUT_CLASSIFICATION	0.002585382574903359	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998136180597585	WITHOUT_CLASSIFICATION	1.8638194024139337E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999232508116096	WITHOUT_CLASSIFICATION	7.67491883903939E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9820780546881429	WITHOUT_CLASSIFICATION	0.01792194531185717	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9997349688043665	WITHOUT_CLASSIFICATION	2.6503119563352944E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998362525981492	WITHOUT_CLASSIFICATION	1.6374740185080207E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9993378906789181	WITHOUT_CLASSIFICATION	6.621093210819967E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9982871661688681	WITHOUT_CLASSIFICATION	0.0017128338311319035	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997321048530335	WITHOUT_CLASSIFICATION	2.6789514696648204E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999396366418091	WITHOUT_CLASSIFICATION	6.0363358190885174E-5	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9997352957307428	WITHOUT_CLASSIFICATION	2.6470426925719184E-4	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999476019835842	WITHOUT_CLASSIFICATION	5.23980164157525E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671765893744	WITHOUT_CLASSIFICATION	1.3282341062562715E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9991150256324445	WITHOUT_CLASSIFICATION	8.849743675555993E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9993246737678905	WITHOUT_CLASSIFICATION	6.753262321095293E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999687871696854	WITHOUT_CLASSIFICATION	3.121283031465908E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671765893744	WITHOUT_CLASSIFICATION	1.3282341062562715E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9986666530527168	WITHOUT_CLASSIFICATION	0.0013333469472832028	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9990701177078851	WITHOUT_CLASSIFICATION	9.298822921147985E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999922210025747	WITHOUT_CLASSIFICATION	7.778997425287197E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999867060459193	WITHOUT_CLASSIFICATION	1.3293954080695943E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999128679088494	WITHOUT_CLASSIFICATION	8.713209115062899E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9970546819112791	WITHOUT_CLASSIFICATION	0.0029453180887209305	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999321715669763	WITHOUT_CLASSIFICATION	6.78284330236127E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998342041422638	WITHOUT_CLASSIFICATION	1.6579585773622958E-4	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500393102603	WITHOUT_CLASSIFICATION	4.996068973963558E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998966098313721	WITHOUT_CLASSIFICATION	1.0339016862796197E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500393102603	WITHOUT_CLASSIFICATION	4.996068973963558E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9997076802597538	WITHOUT_CLASSIFICATION	2.923197402462378E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9992993414080746	WITHOUT_CLASSIFICATION	7.00658591925332E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.99922278846092	WITHOUT_CLASSIFICATION	7.772115390800746E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997113704379607	WITHOUT_CLASSIFICATION	2.886295620394031E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9995434428655731	WITHOUT_CLASSIFICATION	4.565571344269449E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999594979479305	WITHOUT_CLASSIFICATION	4.050205206951694E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997983876307	WITHOUT_CLASSIFICATION	2.016123693000717E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997565738378178	WITHOUT_CLASSIFICATION	2.4342616218213633E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997983876307	WITHOUT_CLASSIFICATION	2.016123693000717E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997376809827041	WITHOUT_CLASSIFICATION	2.623190172958898E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999907151909806	WITHOUT_CLASSIFICATION	9.284809019402425E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999252758637932	WITHOUT_CLASSIFICATION	7.472413620671608E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999454583132824	WITHOUT_CLASSIFICATION	5.454168671763832E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999594979479305	WITHOUT_CLASSIFICATION	4.050205206951694E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997565738378178	WITHOUT_CLASSIFICATION	2.4342616218213633E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997376809827041	WITHOUT_CLASSIFICATION	2.623190172958898E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999620707717548	WITHOUT_CLASSIFICATION	3.792922824523969E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9997398452772328	WITHOUT_CLASSIFICATION	2.6015472276725877E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9997896263997911	WITHOUT_CLASSIFICATION	2.1037360020888696E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9995646283089838	WITHOUT_CLASSIFICATION	4.353716910161417E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.998892106802011	WITHOUT_CLASSIFICATION	0.0011078931979889661	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998672150590511	WITHOUT_CLASSIFICATION	1.3278494094888125E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998248060504371	WITHOUT_CLASSIFICATION	1.7519394956292807E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999907151909806	WITHOUT_CLASSIFICATION	9.284809019402425E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999284171318126	WITHOUT_CLASSIFICATION	7.158286818736458E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996015411658369	WITHOUT_CLASSIFICATION	3.984588341631274E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999602301590679	WITHOUT_CLASSIFICATION	3.976984093214629E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998248060504371	WITHOUT_CLASSIFICATION	1.7519394956292807E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997635854487215	WITHOUT_CLASSIFICATION	2.364145512786023E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998248060504371	WITHOUT_CLASSIFICATION	1.7519394956292807E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999956752702077	WITHOUT_CLASSIFICATION	4.324729792309569E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996475091842668	WITHOUT_CLASSIFICATION	3.524908157332175E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998385898097404	WITHOUT_CLASSIFICATION	1.6141019025969796E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998251943154861	WITHOUT_CLASSIFICATION	1.748056845139072E-4	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998495358239082	WITHOUT_CLASSIFICATION	1.5046417609177644E-4	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9998250055740237	WITHOUT_CLASSIFICATION	1.7499442597635338E-4	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997272776988712	WITHOUT_CLASSIFICATION	2.7272230112880644E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997314941589217	WITHOUT_CLASSIFICATION	2.685058410783409E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999715992107305	WITHOUT_CLASSIFICATION	2.8400789269461578E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.999868293947209	WITHOUT_CLASSIFICATION	1.3170605279106822E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999531770527379	WITHOUT_CLASSIFICATION	4.6822947262180106E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999868293947209	WITHOUT_CLASSIFICATION	1.3170605279106822E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9646152573008008	WITHOUT_CLASSIFICATION	0.035384742699199154	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9995836450205372	WITHOUT_CLASSIFICATION	4.1635497946287037E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9989956164077962	WITHOUT_CLASSIFICATION	0.0010043835922037758	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999768817881259	WITHOUT_CLASSIFICATION	2.3118211874044765E-5	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999142355953916	WITHOUT_CLASSIFICATION	8.576440460834863E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9990016948590438	WITHOUT_CLASSIFICATION	9.98305140956299E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999985333242465	WITHOUT_CLASSIFICATION	1.4666757535058889E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9994039633492553	WITHOUT_CLASSIFICATION	5.960366507447206E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991549172690449	WITHOUT_CLASSIFICATION	8.450827309551079E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991549172690449	WITHOUT_CLASSIFICATION	8.450827309551079E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999761464210238	WITHOUT_CLASSIFICATION	2.3853578976150067E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998905843995461	WITHOUT_CLASSIFICATION	1.0941560045383088E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999497161407483	WITHOUT_CLASSIFICATION	5.028385925172201E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997104157005525	WITHOUT_CLASSIFICATION	2.8958429944747204E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999485636345653	WITHOUT_CLASSIFICATION	5.1436365434661454E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9919626466137647	WITHOUT_CLASSIFICATION	0.008037353386235381	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.995598099971218	WITHOUT_CLASSIFICATION	0.004401900028782035	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998566261367287	WITHOUT_CLASSIFICATION	1.4337386327140155E-4	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9993804141297608	WITHOUT_CLASSIFICATION	6.195858702393585E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9994544436352448	WITHOUT_CLASSIFICATION	5.455563647551678E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996638547761627	WITHOUT_CLASSIFICATION	3.361452238371814E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999747629298504	WITHOUT_CLASSIFICATION	2.5237070149589335E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999859918404623	WITHOUT_CLASSIFICATION	1.4008159537727532E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992863300065581	WITHOUT_CLASSIFICATION	7.136699934419291E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997579479893823	WITHOUT_CLASSIFICATION	2.4205201061759237E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997579479893823	WITHOUT_CLASSIFICATION	2.4205201061759237E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9985245817753348	WITHOUT_CLASSIFICATION	0.0014754182246653205	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997314941589217	WITHOUT_CLASSIFICATION	2.685058410783409E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9972406227873094	WITHOUT_CLASSIFICATION	0.002759377212690538	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999625157590897	WITHOUT_CLASSIFICATION	3.7484240910376414E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9993571246995361	WITHOUT_CLASSIFICATION	6.428753004638562E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9995162572935179	WITHOUT_CLASSIFICATION	4.8374270648206296E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.999848451292604	WITHOUT_CLASSIFICATION	1.5154870739589852E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9997536410384457	WITHOUT_CLASSIFICATION	2.463589615543825E-4	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997004711927608	WITHOUT_CLASSIFICATION	2.995288072392208E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999747154376439	WITHOUT_CLASSIFICATION	2.5284562356111416E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9988919268484427	WITHOUT_CLASSIFICATION	0.0011080731515571817	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999202306332174	WITHOUT_CLASSIFICATION	7.976936678257195E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999661893611365	WITHOUT_CLASSIFICATION	3.3810638863639145E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999983205746084	WITHOUT_CLASSIFICATION	1.6794253916002586E-5	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998541250502015	WITHOUT_CLASSIFICATION	1.4587494979835657E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999277967591053	WITHOUT_CLASSIFICATION	7.220324089472833E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999991054987335	WITHOUT_CLASSIFICATION	8.945012664956792E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996412888742655	WITHOUT_CLASSIFICATION	3.587111257344809E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999900518267034	WITHOUT_CLASSIFICATION	9.948173296568158E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998063920934028	WITHOUT_CLASSIFICATION	1.9360790659717043E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999173932890103	WITHOUT_CLASSIFICATION	8.260671098969733E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9981489529655293	WITHOUT_CLASSIFICATION	0.0018510470344705984	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999500209143115	WITHOUT_CLASSIFICATION	4.9979085688481264E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999950371521829	WITHOUT_CLASSIFICATION	4.9628478171058115E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9993536672574319	WITHOUT_CLASSIFICATION	6.46332742568066E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9997914934189978	WITHOUT_CLASSIFICATION	2.08506581002144E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998079137059634	WITHOUT_CLASSIFICATION	1.9208629403648033E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998332792345378	WITHOUT_CLASSIFICATION	1.667207654621353E-4	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9963302617787128	WITHOUT_CLASSIFICATION	0.003669738221287138	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9997391036172892	WITHOUT_CLASSIFICATION	2.608963827108056E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9997892164401894	WITHOUT_CLASSIFICATION	2.1078355981065433E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997656777132617	WITHOUT_CLASSIFICATION	2.3432228673831598E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994061954113175	WITHOUT_CLASSIFICATION	5.938045886825643E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9949830923337295	WITHOUT_CLASSIFICATION	0.0050169076662704	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9960697542872912	WITHOUT_CLASSIFICATION	0.003930245712708824	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.960383725570407	WITHOUT_CLASSIFICATION	0.03961627442959296	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996127741308144	WITHOUT_CLASSIFICATION	3.872258691856555E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9996127741308144	WITHOUT_CLASSIFICATION	3.872258691856555E-4	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999502187747487	WITHOUT_CLASSIFICATION	4.9781225251251384E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999431869988447	WITHOUT_CLASSIFICATION	5.6813001155309734E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999057019731613	WITHOUT_CLASSIFICATION	9.429802683866727E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999057019731613	WITHOUT_CLASSIFICATION	9.429802683866727E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999946380692064	WITHOUT_CLASSIFICATION	5.361930793584817E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999239133614263	WITHOUT_CLASSIFICATION	7.608663857365293E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998491779824938	WITHOUT_CLASSIFICATION	1.5082201750625719E-4	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999189920381913	WITHOUT_CLASSIFICATION	8.100796180864174E-5	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997383987844963	WITHOUT_CLASSIFICATION	2.616012155036221E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998087467795489	WITHOUT_CLASSIFICATION	1.9125322045121976E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998087467795489	WITHOUT_CLASSIFICATION	1.9125322045121976E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998925776642633	WITHOUT_CLASSIFICATION	1.0742233573671335E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998545717405375	WITHOUT_CLASSIFICATION	1.45428259462525E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9998695951129606	WITHOUT_CLASSIFICATION	1.304048870394903E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9998695951129606	WITHOUT_CLASSIFICATION	1.304048870394903E-4	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999151749781497	WITHOUT_CLASSIFICATION	8.482502185029047E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999198759390743	WITHOUT_CLASSIFICATION	8.012406092576142E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998523289797726	WITHOUT_CLASSIFICATION	1.4767102022731759E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999933856351969	WITHOUT_CLASSIFICATION	6.614364803141287E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998166889245945	WITHOUT_CLASSIFICATION	1.8331107540538495E-4	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9998839785275594	WITHOUT_CLASSIFICATION	1.1602147244066358E-4	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998485511609001	WITHOUT_CLASSIFICATION	1.5144883909995582E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999787632582698	WITHOUT_CLASSIFICATION	2.123674173012707E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999867872312624	WITHOUT_CLASSIFICATION	1.3212768737452684E-5	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999757135544285	WITHOUT_CLASSIFICATION	2.4286445571610408E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9997839051637808	WITHOUT_CLASSIFICATION	2.1609483621934516E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9997933944962711	WITHOUT_CLASSIFICATION	2.066055037289663E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9998328111649682	WITHOUT_CLASSIFICATION	1.6718883503172774E-4	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999724577468279	WITHOUT_CLASSIFICATION	2.754225317209313E-4	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9998702345780985	WITHOUT_CLASSIFICATION	1.2976542190150579E-4	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996764757387058	WITHOUT_CLASSIFICATION	3.2352426129425734E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998801832437717	WITHOUT_CLASSIFICATION	1.1981675622829561E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9991495591410173	WITHOUT_CLASSIFICATION	8.504408589826795E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999020134656019	WITHOUT_CLASSIFICATION	9.798653439803885E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9996740639192981	WITHOUT_CLASSIFICATION	3.259360807018818E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993240161988712	WITHOUT_CLASSIFICATION	6.759838011287258E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9996568688161537	WITHOUT_CLASSIFICATION	3.4313118384628346E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9993053212557492	WITHOUT_CLASSIFICATION	6.946787442506567E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9991724768096067	WITHOUT_CLASSIFICATION	8.275231903933297E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9988627894558879	WITHOUT_CLASSIFICATION	0.0011372105441120276	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9997849713995975	WITHOUT_CLASSIFICATION	2.150286004024065E-4	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999145669885391	WITHOUT_CLASSIFICATION	8.543301146088584E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999940090833889	WITHOUT_CLASSIFICATION	5.9909166110584E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999244864883123	WITHOUT_CLASSIFICATION	7.55135116876521E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999957878783525	WITHOUT_CLASSIFICATION	4.212121647519858E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998471990987677	WITHOUT_CLASSIFICATION	1.5280090123234125E-4	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999609615148664	WITHOUT_CLASSIFICATION	3.90384851335489E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999854772751782	WITHOUT_CLASSIFICATION	1.4522724821778077E-5	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998531442290064	WITHOUT_CLASSIFICATION	1.468557709935915E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998652665402278	WITHOUT_CLASSIFICATION	1.3473345977221514E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998192991069689	WITHOUT_CLASSIFICATION	1.8070089303112008E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998486810517118	WITHOUT_CLASSIFICATION	1.5131894828813465E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9988828166440582	WITHOUT_CLASSIFICATION	0.0011171833559417838	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998802161188682	WITHOUT_CLASSIFICATION	1.1978388113167316E-4	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.999908634945665	WITHOUT_CLASSIFICATION	9.136505433499873E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9998083675701295	WITHOUT_CLASSIFICATION	1.91632429870594E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9998715396236042	WITHOUT_CLASSIFICATION	1.2846037639570126E-4	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9977532536196511	WITHOUT_CLASSIFICATION	0.0022467463803489316	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9996695155524676	WITHOUT_CLASSIFICATION	3.304844475323681E-4	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9989768387312914	WITHOUT_CLASSIFICATION	0.001023161268708553	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9994803240713022	WITHOUT_CLASSIFICATION	5.196759286978556E-4	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9993203819130116	WITHOUT_CLASSIFICATION	6.796180869884269E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999761117005967	WITHOUT_CLASSIFICATION	2.3888299403268168E-5	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999131190408406	WITHOUT_CLASSIFICATION	8.688095915948297E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999693427055097	WITHOUT_CLASSIFICATION	3.065729449022309E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995042460372648	WITHOUT_CLASSIFICATION	4.957539627351883E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999081396254077	WITHOUT_CLASSIFICATION	9.186037459230962E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9984320222729944	WITHOUT_CLASSIFICATION	0.00156797772700562	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999080743563246	WITHOUT_CLASSIFICATION	9.19256436754381E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9986696998061122	WITHOUT_CLASSIFICATION	0.0013303001938877392	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998365010258586	WITHOUT_CLASSIFICATION	1.6349897414134158E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999401658680319	WITHOUT_CLASSIFICATION	5.98341319681824E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999401658680319	WITHOUT_CLASSIFICATION	5.98341319681824E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999957164447509	WITHOUT_CLASSIFICATION	4.283555249064501E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9965242649418572	WITHOUT_CLASSIFICATION	0.0034757350581429143	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999479514310601	WITHOUT_CLASSIFICATION	5.204856894002762E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998723142762069	WITHOUT_CLASSIFICATION	1.276857237930714E-4	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998660687439269	WITHOUT_CLASSIFICATION	1.3393125607316235E-4	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995897968423495	WITHOUT_CLASSIFICATION	4.102031576504124E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999849554314334	WITHOUT_CLASSIFICATION	1.504456856658498E-5	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9997564121019286	WITHOUT_CLASSIFICATION	2.4358789807147626E-4	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997710835226079	WITHOUT_CLASSIFICATION	2.2891647739203404E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999548401134425	WITHOUT_CLASSIFICATION	4.515988655744E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999640385129457	WITHOUT_CLASSIFICATION	3.5961487054354154E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9916105465940673	WITHOUT_CLASSIFICATION	0.008389453405932707	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999862828416898	WITHOUT_CLASSIFICATION	1.3717158310312275E-5	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999967359820969	WITHOUT_CLASSIFICATION	3.2640179030413876E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988840500369109	WITHOUT_CLASSIFICATION	0.0011159499630890516	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988840500369109	WITHOUT_CLASSIFICATION	0.0011159499630890516	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9998058044318978	WITHOUT_CLASSIFICATION	1.941955681020846E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9990806191783516	WITHOUT_CLASSIFICATION	9.193808216484079E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999012813465449	WITHOUT_CLASSIFICATION	9.871865345508807E-5	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9998861891324468	WITHOUT_CLASSIFICATION	1.138108675531994E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999771645561745	WITHOUT_CLASSIFICATION	2.2835443825551754E-5	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998792507978915	WITHOUT_CLASSIFICATION	1.2074920210846444E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999266686722765	WITHOUT_CLASSIFICATION	7.333132772351528E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9976722664368965	WITHOUT_CLASSIFICATION	0.0023277335631034647	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999817231383156	WITHOUT_CLASSIFICATION	1.8276861684385994E-5	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999959548414676	WITHOUT_CLASSIFICATION	4.045158532308387E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999355353152488	WITHOUT_CLASSIFICATION	6.446468475111948E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9994661735773118	WITHOUT_CLASSIFICATION	5.338264226881438E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999843277479212	WITHOUT_CLASSIFICATION	1.5672252078792022E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9996713092506049	WITHOUT_CLASSIFICATION	3.286907493951667E-4	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998526990566347	WITHOUT_CLASSIFICATION	1.4730094336532832E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999079302986101	WITHOUT_CLASSIFICATION	9.206970138984313E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9988131615897755	WITHOUT_CLASSIFICATION	0.0011868384102244518	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998695016638605	WITHOUT_CLASSIFICATION	1.304983361395641E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998497406097975	WITHOUT_CLASSIFICATION	1.502593902025926E-4	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999240113759341	WITHOUT_CLASSIFICATION	7.598862406589101E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9995382682115735	WITHOUT_CLASSIFICATION	4.617317884263821E-4	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999245440414004	WITHOUT_CLASSIFICATION	7.545595859958E-5	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999554172670626	WITHOUT_CLASSIFICATION	4.458273293737673E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9975812843603485	WITHOUT_CLASSIFICATION	0.0024187156396515332	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999180569208914	WITHOUT_CLASSIFICATION	8.194307910859665E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999233494100672	WITHOUT_CLASSIFICATION	7.665058993278079E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996582770192078	WITHOUT_CLASSIFICATION	3.417229807921197E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9978718233446043	WITHOUT_CLASSIFICATION	0.002128176655395664	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998322305636806	WITHOUT_CLASSIFICATION	1.6776943631942207E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9988867829229511	WITHOUT_CLASSIFICATION	0.0011132170770488717	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999877770306201	WITHOUT_CLASSIFICATION	1.2222969379977379E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999661080553741	WITHOUT_CLASSIFICATION	3.389194462587857E-5	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999610704277715	WITHOUT_CLASSIFICATION	3.892957222849607E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9988819177104786	WITHOUT_CLASSIFICATION	0.0011180822895213245	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9982742866839659	WITHOUT_CLASSIFICATION	0.0017257133160339922	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998959182993504	WITHOUT_CLASSIFICATION	1.0408170064958349E-4	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9993802418257779	WITHOUT_CLASSIFICATION	6.19758174222144E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9997677378700488	WITHOUT_CLASSIFICATION	2.3226212995122684E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999057741955113	WITHOUT_CLASSIFICATION	9.422580448861731E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9949838123875312	WITHOUT_CLASSIFICATION	0.005016187612468784	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9949838123875312	WITHOUT_CLASSIFICATION	0.005016187612468784	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999606029945853	WITHOUT_CLASSIFICATION	3.9397005414705735E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.6136743882093544	DEFECT	0.38632561179064556	WITHOUT_CLASSIFICATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999738527190395	WITHOUT_CLASSIFICATION	2.6147280960548625E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998936012355788	WITHOUT_CLASSIFICATION	1.0639876442124772E-4	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9994051381032364	WITHOUT_CLASSIFICATION	5.94861896763599E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9990844307430328	WITHOUT_CLASSIFICATION	9.155692569673726E-4	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999235395401151	WITHOUT_CLASSIFICATION	7.646045988489158E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9987805457314988	WITHOUT_CLASSIFICATION	0.0012194542685011788	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9887772636304459	WITHOUT_CLASSIFICATION	0.011222736369554138	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994265461497255	WITHOUT_CLASSIFICATION	5.734538502745603E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961209885037	WITHOUT_CLASSIFICATION	3.038790114962684E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996949517099472	WITHOUT_CLASSIFICATION	3.0504829005283064E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993032491390978	WITHOUT_CLASSIFICATION	6.967508609021168E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9990863084045416	WITHOUT_CLASSIFICATION	9.136915954583052E-4	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9907620979026435	WITHOUT_CLASSIFICATION	0.009237902097356622	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9981543576761699	WITHOUT_CLASSIFICATION	0.0018456423238301383	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998994686648988	WITHOUT_CLASSIFICATION	1.0053133510134903E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.986229949365963	WITHOUT_CLASSIFICATION	0.013770050634037065	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9985248894334079	WITHOUT_CLASSIFICATION	0.0014751105665920322	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996244902111006	WITHOUT_CLASSIFICATION	3.7550978889947754E-4	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999796517414425	WITHOUT_CLASSIFICATION	2.0348258557506386E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9997903724222341	WITHOUT_CLASSIFICATION	2.0962757776588696E-4	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998057166449809	WITHOUT_CLASSIFICATION	1.942833550190356E-4	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997111873619782	WITHOUT_CLASSIFICATION	2.8881263802184916E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995360427771416	WITHOUT_CLASSIFICATION	4.639572228584943E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997128827347441	WITHOUT_CLASSIFICATION	2.8711726525593764E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9978539022905984	WITHOUT_CLASSIFICATION	0.002146097709401611	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9994814284732106	WITHOUT_CLASSIFICATION	5.185715267894432E-4	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9994149669117872	WITHOUT_CLASSIFICATION	5.850330882127754E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9995041182235014	WITHOUT_CLASSIFICATION	4.958817764986432E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999548267318131	WITHOUT_CLASSIFICATION	4.517326818691763E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9994786923832413	WITHOUT_CLASSIFICATION	5.213076167587678E-4	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9995648515570263	WITHOUT_CLASSIFICATION	4.35148442973687E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997129878925367	WITHOUT_CLASSIFICATION	2.8701210746337095E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999952858202429	WITHOUT_CLASSIFICATION	4.71417975718869E-6	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9953138581439637	WITHOUT_CLASSIFICATION	0.0046861418560363985	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998336884953101	WITHOUT_CLASSIFICATION	1.663115046898734E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998419640823408	WITHOUT_CLASSIFICATION	1.5803591765923514E-4	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9987629815711636	WITHOUT_CLASSIFICATION	0.001237018428836469	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998576540582929	WITHOUT_CLASSIFICATION	1.423459417071738E-4	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996409767129161	WITHOUT_CLASSIFICATION	3.590232870838387E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999504045428307	WITHOUT_CLASSIFICATION	4.959545716924746E-5	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9996006445635935	WITHOUT_CLASSIFICATION	3.9935543640646847E-4	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998357601717587	WITHOUT_CLASSIFICATION	1.6423982824143548E-4	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999922699906821	WITHOUT_CLASSIFICATION	7.73000931793072E-6	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9949160515015767	WITHOUT_CLASSIFICATION	0.005083948498423357	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996678796489882	WITHOUT_CLASSIFICATION	3.3212035101180956E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999862828416898	WITHOUT_CLASSIFICATION	1.3717158310312275E-5	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9974384929892315	WITHOUT_CLASSIFICATION	0.0025615070107684527	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999752305496198	WITHOUT_CLASSIFICATION	2.4769450380113872E-5	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9990396414687948	WITHOUT_CLASSIFICATION	9.603585312052756E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9970046408196889	WITHOUT_CLASSIFICATION	0.0029953591803110985	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999987181522424	WITHOUT_CLASSIFICATION	1.2818477575360199E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9994861497165021	WITHOUT_CLASSIFICATION	5.138502834979277E-4	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9969140602174791	WITHOUT_CLASSIFICATION	0.003085939782520993	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7711967565347987	WITHOUT_CLASSIFICATION	0.2288032434652013	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999818659413298	WITHOUT_CLASSIFICATION	1.8134058670227913E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997496227576115	WITHOUT_CLASSIFICATION	2.503772423885156E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.989613914609344	WITHOUT_CLASSIFICATION	0.010386085390656087	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.997181532542071	WITHOUT_CLASSIFICATION	0.0028184674579289737	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999836569836308	WITHOUT_CLASSIFICATION	1.6343016369197257E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999100739602737	WITHOUT_CLASSIFICATION	8.992603972629102E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998286052483261	WITHOUT_CLASSIFICATION	1.7139475167393716E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995673467416905	WITHOUT_CLASSIFICATION	4.3265325830955806E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999844586430777	WITHOUT_CLASSIFICATION	1.5541356922280118E-5	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9959004294879517	WITHOUT_CLASSIFICATION	0.004099570512048346	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998286052483261	WITHOUT_CLASSIFICATION	1.7139475167393716E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9965738098855605	WITHOUT_CLASSIFICATION	0.003426190114439319	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9992542478024843	WITHOUT_CLASSIFICATION	7.457521975157003E-4	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999903571037706	WITHOUT_CLASSIFICATION	9.642896229342339E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9900268821590982	WITHOUT_CLASSIFICATION	0.009973117840901713	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998895259115385	WITHOUT_CLASSIFICATION	1.1047408846152324E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9869428419875971	WITHOUT_CLASSIFICATION	0.013057158012402922	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999094760019879	WITHOUT_CLASSIFICATION	9.052399801218263E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998376105632065	WITHOUT_CLASSIFICATION	1.623894367935639E-4	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999885607021002	WITHOUT_CLASSIFICATION	1.1439297899742873E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9845433669421791	WITHOUT_CLASSIFICATION	0.015456633057820935	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994724654035732	WITHOUT_CLASSIFICATION	5.275345964268635E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8613406534907218	WITHOUT_CLASSIFICATION	0.13865934650927822	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9993324678442498	WITHOUT_CLASSIFICATION	6.675321557502682E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999444990125947	WITHOUT_CLASSIFICATION	5.550098740521443E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999513691213098	WITHOUT_CLASSIFICATION	4.863087869034359E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9981489529655293	WITHOUT_CLASSIFICATION	0.0018510470344705984	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998910602580082	WITHOUT_CLASSIFICATION	1.089397419918305E-4	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999367307127021	WITHOUT_CLASSIFICATION	6.326928729791211E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9992949287963406	WITHOUT_CLASSIFICATION	7.050712036594775E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9879389071341361	WITHOUT_CLASSIFICATION	0.012061092865863817	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999960218403027	WITHOUT_CLASSIFICATION	3.97815969730053E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998498694744121	WITHOUT_CLASSIFICATION	1.5013052558792307E-4	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9986847083289759	WITHOUT_CLASSIFICATION	0.0013152916710240776	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999978929931077	WITHOUT_CLASSIFICATION	2.1070068922638553E-6	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999968100702052	WITHOUT_CLASSIFICATION	3.1899297948899182E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9996728339982044	WITHOUT_CLASSIFICATION	3.2716600179554596E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.99540353344494	WITHOUT_CLASSIFICATION	0.004596466555059942	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998796536886215	WITHOUT_CLASSIFICATION	1.2034631137851371E-4	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999880039062327	WITHOUT_CLASSIFICATION	1.1996093767302105E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999309218617247	WITHOUT_CLASSIFICATION	6.907813827529138E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999413834209624	WITHOUT_CLASSIFICATION	5.861657903761908E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.998950040394452	WITHOUT_CLASSIFICATION	0.0010499596055480068	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9997913810702953	WITHOUT_CLASSIFICATION	2.0861892970463626E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999780271241798	WITHOUT_CLASSIFICATION	2.1972875820091373E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999983249204543	WITHOUT_CLASSIFICATION	1.6750795457236688E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999963347834212	WITHOUT_CLASSIFICATION	3.6652165787136073E-6	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9953496203955141	WITHOUT_CLASSIFICATION	0.0046503796044858724	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9995155015747751	WITHOUT_CLASSIFICATION	4.8449842522486474E-4	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9995932651386543	WITHOUT_CLASSIFICATION	4.067348613456686E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9978954598952445	WITHOUT_CLASSIFICATION	0.002104540104755473	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996549989808667	WITHOUT_CLASSIFICATION	3.450010191333513E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996549989808667	WITHOUT_CLASSIFICATION	3.450010191333513E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9912648686586898	WITHOUT_CLASSIFICATION	0.008735131341310258	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999709563759238	WITHOUT_CLASSIFICATION	2.9043624076148828E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997939478651058	WITHOUT_CLASSIFICATION	2.0605213489420849E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9963111244035215	WITHOUT_CLASSIFICATION	0.0036888755964784637	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999637071305532	WITHOUT_CLASSIFICATION	3.6292869446800436E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999637071305532	WITHOUT_CLASSIFICATION	3.6292869446800436E-4	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.999775689094626	WITHOUT_CLASSIFICATION	2.2431090537390944E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.996066164570028	WITHOUT_CLASSIFICATION	0.0039338354299719895	DEFECT
//	WITHOUT_CLASSIFICATION	0.9994489640915837	WITHOUT_CLASSIFICATION	5.510359084162398E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996322359709704	WITHOUT_CLASSIFICATION	3.6776402902954724E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998474400818135	WITHOUT_CLASSIFICATION	1.5255991818655508E-4	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9990427213193463	WITHOUT_CLASSIFICATION	9.572786806536606E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9995738946837631	WITHOUT_CLASSIFICATION	4.2610531623698715E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.99993178301871	WITHOUT_CLASSIFICATION	6.821698129001467E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998777256946286	WITHOUT_CLASSIFICATION	1.2227430537139583E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998840687477121	WITHOUT_CLASSIFICATION	1.1593125228797569E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998840687477121	WITHOUT_CLASSIFICATION	1.1593125228797569E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995417675813514	WITHOUT_CLASSIFICATION	4.582324186486543E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999869399790347	WITHOUT_CLASSIFICATION	1.3060020965304295E-4	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995632074671286	WITHOUT_CLASSIFICATION	4.3679253287140724E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.99952852607514	WITHOUT_CLASSIFICATION	4.714739248599686E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996937831033734	WITHOUT_CLASSIFICATION	3.062168966265605E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353478949665	WITHOUT_CLASSIFICATION	2.646521050334603E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999587702628708	WITHOUT_CLASSIFICATION	4.122973712911996E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996812408115859	WITHOUT_CLASSIFICATION	3.187591884140456E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9986453405946809	WITHOUT_CLASSIFICATION	0.0013546594053190982	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998537770177557	WITHOUT_CLASSIFICATION	1.462229822443297E-4	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9845433669421791	WITHOUT_CLASSIFICATION	0.015456633057820935	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999901488739882	WITHOUT_CLASSIFICATION	9.851126011879267E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.997593315684438	WITHOUT_CLASSIFICATION	0.0024066843155619577	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999753021385092	WITHOUT_CLASSIFICATION	2.469786149074766E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999146330289465	WITHOUT_CLASSIFICATION	8.536697105360793E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998562000016307	WITHOUT_CLASSIFICATION	1.437999983692195E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999453652790783	WITHOUT_CLASSIFICATION	5.463472092170551E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995820876732402	WITHOUT_CLASSIFICATION	4.17912326759895E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999472010654215	WITHOUT_CLASSIFICATION	5.2798934578588027E-5	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9990067833815878	WITHOUT_CLASSIFICATION	9.932166184121907E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9993882932282261	WITHOUT_CLASSIFICATION	6.11706771773837E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9993882932282261	WITHOUT_CLASSIFICATION	6.11706771773837E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671765893744	WITHOUT_CLASSIFICATION	1.3282341062562715E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999934656091053	WITHOUT_CLASSIFICATION	6.534390894641623E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997303507365449	WITHOUT_CLASSIFICATION	2.696492634550418E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994111978589636	WITHOUT_CLASSIFICATION	5.888021410364794E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9998672663531173	WITHOUT_CLASSIFICATION	1.3273364688270087E-4	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999778391305882	WITHOUT_CLASSIFICATION	2.216086941180834E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997113704379607	WITHOUT_CLASSIFICATION	2.886295620394031E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998140000778487	WITHOUT_CLASSIFICATION	1.859999221512387E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999620707717548	WITHOUT_CLASSIFICATION	3.792922824523969E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994911912370564	WITHOUT_CLASSIFICATION	5.08808762943546E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998248060504371	WITHOUT_CLASSIFICATION	1.7519394956292807E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9920456784699896	WITHOUT_CLASSIFICATION	0.007954321530010387	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998493888956596	WITHOUT_CLASSIFICATION	1.5061110434042824E-4	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999867357065441	WITHOUT_CLASSIFICATION	1.3264293455917671E-5	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999987942721505	WITHOUT_CLASSIFICATION	1.2057278495009761E-5	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998844748826932	WITHOUT_CLASSIFICATION	1.155251173068893E-4	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9910402727990225	WITHOUT_CLASSIFICATION	0.008959727200977447	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9995027923271504	WITHOUT_CLASSIFICATION	4.972076728494921E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9987315785643058	WITHOUT_CLASSIFICATION	0.0012684214356942162	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9939724730943653	WITHOUT_CLASSIFICATION	0.006027526905634708	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998704407711311	WITHOUT_CLASSIFICATION	1.295592288689654E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999986365044065	WITHOUT_CLASSIFICATION	1.363495593557091E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998523289797726	WITHOUT_CLASSIFICATION	1.4767102022731759E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999987153958022	WITHOUT_CLASSIFICATION	1.2846041978229372E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999734104089525	WITHOUT_CLASSIFICATION	2.658959104754368E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999734104089525	WITHOUT_CLASSIFICATION	2.658959104754368E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989167297844354	WITHOUT_CLASSIFICATION	0.0010832702155646823	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9965754494785712	WITHOUT_CLASSIFICATION	0.0034245505214288824	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998434424582909	WITHOUT_CLASSIFICATION	1.5655754170905276E-4	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9991037589059613	WITHOUT_CLASSIFICATION	8.962410940387414E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999714824250558	WITHOUT_CLASSIFICATION	2.8517574944225304E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.999076253675482	WITHOUT_CLASSIFICATION	9.237463245180912E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9991094029986738	WITHOUT_CLASSIFICATION	8.905970013261534E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.998613350125381	WITHOUT_CLASSIFICATION	0.0013866498746189881	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.5741989950567211	DEFECT	0.4258010049432789	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.5969445348596539	DEFECT	0.40305546514034596	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9989774624154087	WITHOUT_CLASSIFICATION	0.001022537584591244	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9990561573663574	WITHOUT_CLASSIFICATION	9.438426336425637E-4	DEFECT
/*	DEFECT	0.9818602280231221	WITHOUT_CLASSIFICATION	0.018139771976877907	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9987177699064538	WITHOUT_CLASSIFICATION	0.0012822300935462043	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.8955732950989799	WITHOUT_CLASSIFICATION	0.1044267049010201	DEFECT
// TODO : should this be an error?	DEFECT	0.9953239041552657	WITHOUT_CLASSIFICATION	0.0046760958447343145	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.993303520257621	WITHOUT_CLASSIFICATION	0.006696479742378963	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9730271710443343	DEFECT	0.026972828955665634	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9756793315700661	WITHOUT_CLASSIFICATION	0.024320668429933832	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9756793315700661	WITHOUT_CLASSIFICATION	0.024320668429933832	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9396402717355898	WITHOUT_CLASSIFICATION	0.06035972826441027	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999209629779103	WITHOUT_CLASSIFICATION	7.903702208964073E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9945475937563448	WITHOUT_CLASSIFICATION	0.0054524062436552105	DEFECT
// this call is side-effecty	DEFECT	0.9999336168590117	WITHOUT_CLASSIFICATION	6.638314098829933E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.7406625837098071	WITHOUT_CLASSIFICATION	0.2593374162901929	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9983483800781259	WITHOUT_CLASSIFICATION	0.0016516199218740311	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9591134418981938	WITHOUT_CLASSIFICATION	0.04088655810180614	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9993703373170831	WITHOUT_CLASSIFICATION	6.29662682916931E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.994310519157519	WITHOUT_CLASSIFICATION	0.005689480842480979	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999157680020884	WITHOUT_CLASSIFICATION	8.423199791173901E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.955634519213743	WITHOUT_CLASSIFICATION	0.044365480786257044	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9991926329459302	WITHOUT_CLASSIFICATION	8.07367054069869E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.5156949510998404	WITHOUT_CLASSIFICATION	0.4843050489001596	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.5072705024275243	DEFECT	0.4927294975724757	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5196510302918946	WITHOUT_CLASSIFICATION	0.4803489697081052	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9427175935293658	WITHOUT_CLASSIFICATION	0.05728240647063427	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9940693508782739	WITHOUT_CLASSIFICATION	0.005930649121726225	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9927603394549754	WITHOUT_CLASSIFICATION	0.00723966054502449	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9940439294031508	WITHOUT_CLASSIFICATION	0.00595607059684927	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9756793315700661	WITHOUT_CLASSIFICATION	0.024320668429933832	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9876702201607447	DEFECT	0.01232977983925543	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.92809102601727	WITHOUT_CLASSIFICATION	0.07190897398272994	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9995732114055579	WITHOUT_CLASSIFICATION	4.267885944420559E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9674470017250522	WITHOUT_CLASSIFICATION	0.032552998274947786	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.8838986582977858	WITHOUT_CLASSIFICATION	0.11610134170221414	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9996174593889999	WITHOUT_CLASSIFICATION	3.8254061100000965E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9594466602240747	WITHOUT_CLASSIFICATION	0.04055333977592545	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.999323856875867	WITHOUT_CLASSIFICATION	6.761431241328775E-4	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9922515154154172	WITHOUT_CLASSIFICATION	0.007748484584582727	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8523941338669544	WITHOUT_CLASSIFICATION	0.1476058661330456	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.999688760749553	WITHOUT_CLASSIFICATION	3.1123925044698866E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9971922295420704	WITHOUT_CLASSIFICATION	0.002807770457929655	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9872081115746385	WITHOUT_CLASSIFICATION	0.012791888425361437	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9972336054939529	WITHOUT_CLASSIFICATION	0.0027663945060471115	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9969151578757542	WITHOUT_CLASSIFICATION	0.0030848421242457365	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7267503341457651	DEFECT	0.273249665854235	WITHOUT_CLASSIFICATION
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999968668191731	DEFECT	3.1331808269512557E-6	WITHOUT_CLASSIFICATION
