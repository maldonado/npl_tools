//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999206746604227	WITHOUT_CLASSIFICATION	7.93253395773887E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9997631515356215	WITHOUT_CLASSIFICATION	2.368484643786455E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999097392216887	WITHOUT_CLASSIFICATION	9.026077831122323E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999601320322239	WITHOUT_CLASSIFICATION	3.9867967776131595E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999601320322239	WITHOUT_CLASSIFICATION	3.9867967776131595E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999825414006672	WITHOUT_CLASSIFICATION	1.7458599332829704E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999825549394865	WITHOUT_CLASSIFICATION	1.7445060513494306E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998220890187403	WITHOUT_CLASSIFICATION	1.7791098125966552E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999898334406694	WITHOUT_CLASSIFICATION	1.0166559330625733E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999788174533139	WITHOUT_CLASSIFICATION	2.1182546686210947E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999788174533139	WITHOUT_CLASSIFICATION	2.1182546686210947E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999558108724782	WITHOUT_CLASSIFICATION	4.4189127521788004E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999873423683763	WITHOUT_CLASSIFICATION	1.2657631623706108E-4	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999576926887027	WITHOUT_CLASSIFICATION	4.2307311297263086E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999005740683048	WITHOUT_CLASSIFICATION	9.942593169519178E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9975681244565576	WITHOUT_CLASSIFICATION	0.002431875543442421	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999586924652439	WITHOUT_CLASSIFICATION	4.130753475599845E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.999925730655414	WITHOUT_CLASSIFICATION	7.426934458592988E-5	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999243764705553	WITHOUT_CLASSIFICATION	7.562352944472139E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9995876613340915	WITHOUT_CLASSIFICATION	4.123386659084577E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999958911111447	WITHOUT_CLASSIFICATION	4.108888855302228E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997394614246511	WITHOUT_CLASSIFICATION	2.605385753488297E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999248891290644	WITHOUT_CLASSIFICATION	7.511087093564431E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.6508105028648841	WITHOUT_CLASSIFICATION	0.349189497135116	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9999238730056774	WITHOUT_CLASSIFICATION	7.612699432258699E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9999238730056774	WITHOUT_CLASSIFICATION	7.612699432258699E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997174660839724	WITHOUT_CLASSIFICATION	2.825339160275984E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997964578710107	WITHOUT_CLASSIFICATION	2.0354212898926835E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999067908149544	WITHOUT_CLASSIFICATION	9.320918504569999E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998143210402685	WITHOUT_CLASSIFICATION	1.8567895973148162E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999532343027555	WITHOUT_CLASSIFICATION	4.676569724454363E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999026015632669	WITHOUT_CLASSIFICATION	9.739843673307171E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9893738401151747	WITHOUT_CLASSIFICATION	0.01062615988482525	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999800235351631	WITHOUT_CLASSIFICATION	1.9976464836909141E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999800235351631	WITHOUT_CLASSIFICATION	1.9976464836909141E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999552903350052	WITHOUT_CLASSIFICATION	4.470966499480585E-4	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.505809175427991	WITHOUT_CLASSIFICATION	0.4941908245720091	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9996264900633768	WITHOUT_CLASSIFICATION	3.735099366232222E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9983485468225549	WITHOUT_CLASSIFICATION	0.0016514531774450333	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998817084032818	WITHOUT_CLASSIFICATION	1.182915967182279E-4	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999965265503287	WITHOUT_CLASSIFICATION	3.473449671474698E-6	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.8531480846135643	WITHOUT_CLASSIFICATION	0.14685191538643566	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999233585302238	WITHOUT_CLASSIFICATION	7.664146977609873E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9997931368631467	WITHOUT_CLASSIFICATION	2.0686313685332249E-4	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999450161507999	WITHOUT_CLASSIFICATION	5.4983849200154185E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999900595534535	WITHOUT_CLASSIFICATION	9.940446546469408E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999443970685814	WITHOUT_CLASSIFICATION	5.5602931418666215E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999928794520313	WITHOUT_CLASSIFICATION	7.120547968790934E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998683348961843	WITHOUT_CLASSIFICATION	1.3166510381573877E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9981134487041624	WITHOUT_CLASSIFICATION	0.001886551295837699	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.995929809104306	WITHOUT_CLASSIFICATION	0.004070190895694058	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999983689298183	WITHOUT_CLASSIFICATION	1.6310701816978635E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996783652195915	WITHOUT_CLASSIFICATION	3.216347804084161E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998510328074008	WITHOUT_CLASSIFICATION	1.4896719259925307E-4	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999100174929045	WITHOUT_CLASSIFICATION	8.998250709540466E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999820462252361	WITHOUT_CLASSIFICATION	1.7953774763980028E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999992772575403	WITHOUT_CLASSIFICATION	7.227424596777898E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999763026893843	WITHOUT_CLASSIFICATION	2.3697310615705564E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999460172869455	WITHOUT_CLASSIFICATION	5.398271305441938E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9802554951004444	WITHOUT_CLASSIFICATION	0.019744504899555582	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9997800532355544	WITHOUT_CLASSIFICATION	2.199467644456701E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999040709249986	WITHOUT_CLASSIFICATION	9.592907500147894E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999716539822084	WITHOUT_CLASSIFICATION	2.8346017791572082E-5	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999120090658624	WITHOUT_CLASSIFICATION	8.799093413760064E-4	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999537343828278	WITHOUT_CLASSIFICATION	4.62656171723595E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999933181229095	WITHOUT_CLASSIFICATION	6.681877090451732E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999584758462516	WITHOUT_CLASSIFICATION	4.152415374826463E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999128859014492	WITHOUT_CLASSIFICATION	8.711409855073675E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994782867867105	WITHOUT_CLASSIFICATION	5.217132132895134E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998932455612305	WITHOUT_CLASSIFICATION	1.0675443876946644E-4	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999732552990223	WITHOUT_CLASSIFICATION	2.674470097775903E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994782867867105	WITHOUT_CLASSIFICATION	5.217132132895134E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9984078836568986	WITHOUT_CLASSIFICATION	0.0015921163431014504	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9979544452825423	WITHOUT_CLASSIFICATION	0.0020455547174577132	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999940032577689	WITHOUT_CLASSIFICATION	5.9967422310803505E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999728690450245	WITHOUT_CLASSIFICATION	2.713095497548227E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999668106446996	WITHOUT_CLASSIFICATION	3.318935530045866E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999668106446996	WITHOUT_CLASSIFICATION	3.318935530045866E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999800235351631	WITHOUT_CLASSIFICATION	1.9976464836909141E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999993805427956	WITHOUT_CLASSIFICATION	6.194572043960651E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999679520045338	WITHOUT_CLASSIFICATION	3.204799546606873E-5	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999880823441963	WITHOUT_CLASSIFICATION	1.1917655803692321E-4	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999956231674313	WITHOUT_CLASSIFICATION	4.376832568710814E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999394245942425	WITHOUT_CLASSIFICATION	6.0575405757620444E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999943032808941	WITHOUT_CLASSIFICATION	5.696719105791659E-6	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999956401076576	WITHOUT_CLASSIFICATION	4.3598923423974234E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999396918435696	WITHOUT_CLASSIFICATION	6.030815643057923E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999744231458961	WITHOUT_CLASSIFICATION	2.5576854103907205E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999744231458961	WITHOUT_CLASSIFICATION	2.5576854103907205E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997609472663438	WITHOUT_CLASSIFICATION	2.39052733656279E-4	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998431812551083	WITHOUT_CLASSIFICATION	1.568187448915691E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999021070053721	WITHOUT_CLASSIFICATION	9.789299462789235E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999744231458961	WITHOUT_CLASSIFICATION	2.5576854103907205E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997609472663438	WITHOUT_CLASSIFICATION	2.39052733656279E-4	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9997609472663438	WITHOUT_CLASSIFICATION	2.39052733656279E-4	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999177823453583	WITHOUT_CLASSIFICATION	8.221765464168765E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999582030675018	WITHOUT_CLASSIFICATION	4.1796932498106365E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999628388877397	WITHOUT_CLASSIFICATION	3.7161112260283614E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999202425618925	WITHOUT_CLASSIFICATION	7.975743810752988E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9989703028050506	WITHOUT_CLASSIFICATION	0.0010296971949493839	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9989703028050506	WITHOUT_CLASSIFICATION	0.0010296971949493839	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9989012552135554	WITHOUT_CLASSIFICATION	0.00109874478644456	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995008184643301	WITHOUT_CLASSIFICATION	4.991815356698273E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999835804459674	WITHOUT_CLASSIFICATION	1.641955403260518E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999090489147214	WITHOUT_CLASSIFICATION	9.095108527865987E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999090489147214	WITHOUT_CLASSIFICATION	9.095108527865987E-5	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9993531415651388	WITHOUT_CLASSIFICATION	6.468584348611006E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997798152030708	WITHOUT_CLASSIFICATION	2.201847969291366E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996027950587089	WITHOUT_CLASSIFICATION	3.9720494129110855E-4	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9994231160477899	WITHOUT_CLASSIFICATION	5.768839522100814E-4	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999822487981487	WITHOUT_CLASSIFICATION	1.7751201851318754E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998124785648294	WITHOUT_CLASSIFICATION	1.8752143517056759E-4	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998826732287616	WITHOUT_CLASSIFICATION	1.1732677123839408E-4	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999402917097401	WITHOUT_CLASSIFICATION	5.9708290259937184E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996027950587089	WITHOUT_CLASSIFICATION	3.9720494129110855E-4	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9998108806167937	WITHOUT_CLASSIFICATION	1.8911938320620466E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999961903328185	WITHOUT_CLASSIFICATION	3.80966718149705E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999961903328185	WITHOUT_CLASSIFICATION	3.80966718149705E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999982814251469	WITHOUT_CLASSIFICATION	1.7185748530844427E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999675661110903	WITHOUT_CLASSIFICATION	3.243388890960913E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9988983580692764	WITHOUT_CLASSIFICATION	0.0011016419307235948	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9988343369546665	WITHOUT_CLASSIFICATION	0.0011656630453334683	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999417632789857	WITHOUT_CLASSIFICATION	5.8236721014414456E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9998143915597046	WITHOUT_CLASSIFICATION	1.85608440295407E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9998568638228092	WITHOUT_CLASSIFICATION	1.4313617719078435E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999983430659903	WITHOUT_CLASSIFICATION	1.6569340097044524E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999884897388172	WITHOUT_CLASSIFICATION	1.1510261182828552E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999884897388172	WITHOUT_CLASSIFICATION	1.1510261182828552E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999206746604227	WITHOUT_CLASSIFICATION	7.93253395773887E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999429100940463	WITHOUT_CLASSIFICATION	5.708990595367255E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999355388958452	WITHOUT_CLASSIFICATION	6.446110415481249E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999497532973111	WITHOUT_CLASSIFICATION	5.024670268895998E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999546018795892	WITHOUT_CLASSIFICATION	4.5398120410806856E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998795896911438	WITHOUT_CLASSIFICATION	1.2041030885632395E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9974301420210252	WITHOUT_CLASSIFICATION	0.0025698579789747576	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999820067820638	WITHOUT_CLASSIFICATION	1.7993217936168913E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999584913990245	WITHOUT_CLASSIFICATION	4.150860097558438E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998531704322342	WITHOUT_CLASSIFICATION	1.468295677658163E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9998795896911438	WITHOUT_CLASSIFICATION	1.2041030885632395E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9992855051829145	WITHOUT_CLASSIFICATION	7.144948170855653E-4	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9990530414170797	WITHOUT_CLASSIFICATION	9.469585829203523E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999547045093916	WITHOUT_CLASSIFICATION	4.5295490608513524E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999610808130285	WITHOUT_CLASSIFICATION	3.891918697160647E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999812537976823	WITHOUT_CLASSIFICATION	1.874620231769472E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999601320322239	WITHOUT_CLASSIFICATION	3.9867967776131595E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9976520527766941	WITHOUT_CLASSIFICATION	0.0023479472233058816	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999589116360373	WITHOUT_CLASSIFICATION	4.1088363962550166E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998718405129964	WITHOUT_CLASSIFICATION	1.2815948700365504E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999162151679516	WITHOUT_CLASSIFICATION	8.378483204846758E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999944114551601	WITHOUT_CLASSIFICATION	5.5885448399091306E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997083753293514	WITHOUT_CLASSIFICATION	2.916246706485189E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997733679946278	WITHOUT_CLASSIFICATION	2.2663200537211255E-4	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9995553181248417	WITHOUT_CLASSIFICATION	4.44681875158357E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9989283110180174	WITHOUT_CLASSIFICATION	0.0010716889819825722	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9998761781921697	WITHOUT_CLASSIFICATION	1.2382180783033364E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999584913990245	WITHOUT_CLASSIFICATION	4.150860097558438E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999944114551601	WITHOUT_CLASSIFICATION	5.5885448399091306E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999825414006672	WITHOUT_CLASSIFICATION	1.7458599332829704E-5	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998769964538438	WITHOUT_CLASSIFICATION	1.2300354615622376E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999202015353847	WITHOUT_CLASSIFICATION	7.979846461517408E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998253521083209	WITHOUT_CLASSIFICATION	1.7464789167915184E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999441931319007	WITHOUT_CLASSIFICATION	5.580686809939869E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9967446193374628	WITHOUT_CLASSIFICATION	0.0032553806625370586	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999806600324284	WITHOUT_CLASSIFICATION	1.9339967571618136E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999315434940524	WITHOUT_CLASSIFICATION	6.845650594755703E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999315434940524	WITHOUT_CLASSIFICATION	6.845650594755703E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999718829916289	WITHOUT_CLASSIFICATION	2.8117008371210574E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999907887430469	WITHOUT_CLASSIFICATION	9.211256953106521E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999257216966998	WITHOUT_CLASSIFICATION	7.427830330023281E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999356046995325	WITHOUT_CLASSIFICATION	6.439530046746476E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999730274352409	WITHOUT_CLASSIFICATION	2.6972564759165058E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999293825013719	WITHOUT_CLASSIFICATION	7.061749862822578E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999728975609202	WITHOUT_CLASSIFICATION	2.7102439079886425E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999825549394865	WITHOUT_CLASSIFICATION	1.7445060513494306E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999884283666737	WITHOUT_CLASSIFICATION	1.1571633326394493E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999884283666737	WITHOUT_CLASSIFICATION	1.1571633326394493E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999884283666737	WITHOUT_CLASSIFICATION	1.1571633326394493E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999593860494902	WITHOUT_CLASSIFICATION	4.0613950509714955E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999884283666737	WITHOUT_CLASSIFICATION	1.1571633326394493E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999598812299684	WITHOUT_CLASSIFICATION	4.01187700316413E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999674030582495	WITHOUT_CLASSIFICATION	3.259694175054612E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999906848149958	WITHOUT_CLASSIFICATION	9.315185004260524E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999584913990245	WITHOUT_CLASSIFICATION	4.150860097558438E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999944114551601	WITHOUT_CLASSIFICATION	5.5885448399091306E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999944114551601	WITHOUT_CLASSIFICATION	5.5885448399091306E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999875158251229	WITHOUT_CLASSIFICATION	1.2484174877122385E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999678100387628	WITHOUT_CLASSIFICATION	3.2189961237286084E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9996883105507488	WITHOUT_CLASSIFICATION	3.116894492512065E-4	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999898334406694	WITHOUT_CLASSIFICATION	1.0166559330625733E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999898334406694	WITHOUT_CLASSIFICATION	1.0166559330625733E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9994655662969558	WITHOUT_CLASSIFICATION	5.344337030441648E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999817482632071	WITHOUT_CLASSIFICATION	1.8251736792910092E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999769514621261	WITHOUT_CLASSIFICATION	2.304853787396422E-5	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.999971123567104	WITHOUT_CLASSIFICATION	2.8876432895862717E-5	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999623134368132	WITHOUT_CLASSIFICATION	3.7686563186852905E-5	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999585633507475	WITHOUT_CLASSIFICATION	4.143664925239131E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999788174533139	WITHOUT_CLASSIFICATION	2.1182546686210947E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999587493270441	WITHOUT_CLASSIFICATION	4.125067295598621E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999587493270441	WITHOUT_CLASSIFICATION	4.125067295598621E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999558108724782	WITHOUT_CLASSIFICATION	4.4189127521788004E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999558108724782	WITHOUT_CLASSIFICATION	4.4189127521788004E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999823140544462	WITHOUT_CLASSIFICATION	1.768594555388162E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999823140544462	WITHOUT_CLASSIFICATION	1.768594555388162E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998198098224642	WITHOUT_CLASSIFICATION	1.8019017753589725E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998198098224642	WITHOUT_CLASSIFICATION	1.8019017753589725E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999898334406694	WITHOUT_CLASSIFICATION	1.0166559330625733E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999788174533139	WITHOUT_CLASSIFICATION	2.1182546686210947E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999587493270441	WITHOUT_CLASSIFICATION	4.125067295598621E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999587493270441	WITHOUT_CLASSIFICATION	4.125067295598621E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999558108724782	WITHOUT_CLASSIFICATION	4.4189127521788004E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999823140544462	WITHOUT_CLASSIFICATION	1.768594555388162E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999823140544462	WITHOUT_CLASSIFICATION	1.768594555388162E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998198098224642	WITHOUT_CLASSIFICATION	1.8019017753589725E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999784840151572	WITHOUT_CLASSIFICATION	2.1515984842726057E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997259875750713	WITHOUT_CLASSIFICATION	2.740124249286838E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999135785824101	WITHOUT_CLASSIFICATION	8.642141758978245E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999987212069499	WITHOUT_CLASSIFICATION	1.2787930500933952E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998969312008689	WITHOUT_CLASSIFICATION	1.0306879913107628E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999583873183173	WITHOUT_CLASSIFICATION	4.161268168262645E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9563768413552847	WITHOUT_CLASSIFICATION	0.04362315864471544	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9948299728959982	WITHOUT_CLASSIFICATION	0.0051700271040017644	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998223173943681	WITHOUT_CLASSIFICATION	1.7768260563178566E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9990613547208331	WITHOUT_CLASSIFICATION	9.386452791669852E-4	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998414199199542	WITHOUT_CLASSIFICATION	1.5858008004578778E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998762265236756	WITHOUT_CLASSIFICATION	1.237734763244026E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999800235351631	WITHOUT_CLASSIFICATION	1.9976464836909141E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999583873183173	WITHOUT_CLASSIFICATION	4.161268168262645E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9996900483747795	WITHOUT_CLASSIFICATION	3.099516252204853E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999546724156243	WITHOUT_CLASSIFICATION	4.532758437563358E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999546724156243	WITHOUT_CLASSIFICATION	4.532758437563358E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999482491967973	WITHOUT_CLASSIFICATION	5.175080320269977E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995643918730025	WITHOUT_CLASSIFICATION	4.356081269975715E-4	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9991546047604777	WITHOUT_CLASSIFICATION	8.453952395222604E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9962704893840183	WITHOUT_CLASSIFICATION	0.003729510615981744	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9962704893840183	WITHOUT_CLASSIFICATION	0.003729510615981744	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9975681244565576	WITHOUT_CLASSIFICATION	0.002431875543442421	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99744648332448	WITHOUT_CLASSIFICATION	0.0025535166755198836	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99744648332448	WITHOUT_CLASSIFICATION	0.0025535166755198836	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9992571628487235	WITHOUT_CLASSIFICATION	7.428371512765656E-4	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.99972188544347	WITHOUT_CLASSIFICATION	2.7811455653000826E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999243764705553	WITHOUT_CLASSIFICATION	7.562352944472139E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9697806889993585	WITHOUT_CLASSIFICATION	0.030219311000641503	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999586924652439	WITHOUT_CLASSIFICATION	4.130753475599845E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999495805652017	WITHOUT_CLASSIFICATION	5.0419434798183975E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999608106944304	WITHOUT_CLASSIFICATION	3.9189305569431615E-5	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999846977350197	WITHOUT_CLASSIFICATION	1.5302264980267302E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999448458908671	WITHOUT_CLASSIFICATION	5.515410913290206E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999248891290644	WITHOUT_CLASSIFICATION	7.511087093564431E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999971788862158	WITHOUT_CLASSIFICATION	2.821113784288572E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999442327378032	WITHOUT_CLASSIFICATION	5.5767262196817036E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999243764705553	WITHOUT_CLASSIFICATION	7.562352944472139E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9998796802051395	WITHOUT_CLASSIFICATION	1.2031979486039922E-4	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999525336324256	WITHOUT_CLASSIFICATION	4.7466367574332946E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999585369965274	WITHOUT_CLASSIFICATION	4.146300347256753E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999442327378032	WITHOUT_CLASSIFICATION	5.5767262196817036E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9998796802051395	WITHOUT_CLASSIFICATION	1.2031979486039922E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999585369965274	WITHOUT_CLASSIFICATION	4.146300347256753E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999208217380008	WITHOUT_CLASSIFICATION	7.917826199926727E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999208217380008	WITHOUT_CLASSIFICATION	7.917826199926727E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999233875687166	WITHOUT_CLASSIFICATION	7.661243128337784E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999908845935029	WITHOUT_CLASSIFICATION	9.115406496967509E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999797431129008	WITHOUT_CLASSIFICATION	2.02568870992734E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9992945296965213	WITHOUT_CLASSIFICATION	7.054703034787127E-4	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999940583032066	WITHOUT_CLASSIFICATION	5.941696793409268E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995476399954394	WITHOUT_CLASSIFICATION	4.5236000456066924E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9939547034309988	WITHOUT_CLASSIFICATION	0.006045296569001291	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999940583032066	WITHOUT_CLASSIFICATION	5.941696793409268E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999958911111447	WITHOUT_CLASSIFICATION	4.108888855302228E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9995534745185697	WITHOUT_CLASSIFICATION	4.465254814302993E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999442327378032	WITHOUT_CLASSIFICATION	5.5767262196817036E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9996346530953937	WITHOUT_CLASSIFICATION	3.653469046063255E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.999978296619705	WITHOUT_CLASSIFICATION	2.1703380294946676E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9988782456079285	WITHOUT_CLASSIFICATION	0.0011217543920715694	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.999947194737297	WITHOUT_CLASSIFICATION	5.2805262702939E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9992839366001777	WITHOUT_CLASSIFICATION	7.160633998223955E-4	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999839268268955	WITHOUT_CLASSIFICATION	1.6073173104456923E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998267438600433	WITHOUT_CLASSIFICATION	1.7325613995663544E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9997705553929742	WITHOUT_CLASSIFICATION	2.2944460702569385E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999446404043718	WITHOUT_CLASSIFICATION	5.5359595628292195E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9985158879503678	WITHOUT_CLASSIFICATION	0.0014841120496322153	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999248891290644	WITHOUT_CLASSIFICATION	7.511087093564431E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999598948375924	WITHOUT_CLASSIFICATION	4.010516240760019E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998402114142549	WITHOUT_CLASSIFICATION	1.597885857449609E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999746664879715	WITHOUT_CLASSIFICATION	2.5333512028507626E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999966274150531	WITHOUT_CLASSIFICATION	3.372584946899334E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.999966274150531	WITHOUT_CLASSIFICATION	3.372584946899334E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999241116467006	WITHOUT_CLASSIFICATION	7.588835329946048E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999989112256504	WITHOUT_CLASSIFICATION	1.088774349597331E-6	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999792784742388	WITHOUT_CLASSIFICATION	2.0721525761194665E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9988985148775827	WITHOUT_CLASSIFICATION	0.001101485122417288	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998471505652539	WITHOUT_CLASSIFICATION	1.5284943474602383E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9995637945192295	WITHOUT_CLASSIFICATION	4.362054807704483E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9995637945192295	WITHOUT_CLASSIFICATION	4.362054807704483E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9995854818491087	WITHOUT_CLASSIFICATION	4.1451815089140056E-4	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9997174731331057	WITHOUT_CLASSIFICATION	2.8252686689438333E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999498146315465	WITHOUT_CLASSIFICATION	5.018536845335441E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999819833525278	WITHOUT_CLASSIFICATION	1.8016647472195608E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998017729585201	WITHOUT_CLASSIFICATION	1.982270414797422E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999498115229568	WITHOUT_CLASSIFICATION	5.018847704328835E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998770382519793	WITHOUT_CLASSIFICATION	1.2296174802067865E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998646676153602	WITHOUT_CLASSIFICATION	1.3533238463973215E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998584110557222	WITHOUT_CLASSIFICATION	1.415889442778712E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999024106951244	WITHOUT_CLASSIFICATION	9.758930487555008E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998892242334877	WITHOUT_CLASSIFICATION	1.1077576651225182E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9932565955451865	WITHOUT_CLASSIFICATION	0.0067434044548135485	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998986733268781	WITHOUT_CLASSIFICATION	1.0132667312190583E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998647073650018	WITHOUT_CLASSIFICATION	1.352926349981898E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9997584130540227	WITHOUT_CLASSIFICATION	2.415869459772801E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999198467848568	WITHOUT_CLASSIFICATION	8.015321514325123E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999666378632934	WITHOUT_CLASSIFICATION	3.336213670647571E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9988540450062521	WITHOUT_CLASSIFICATION	0.001145954993747854	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999803006961745	WITHOUT_CLASSIFICATION	1.969930382552542E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999803006961745	WITHOUT_CLASSIFICATION	1.969930382552542E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998007110113576	WITHOUT_CLASSIFICATION	1.9928898864236594E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998007110113576	WITHOUT_CLASSIFICATION	1.9928898864236594E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9988985148775827	WITHOUT_CLASSIFICATION	0.001101485122417288	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.988840552396296	WITHOUT_CLASSIFICATION	0.011159447603704072	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9831876412615997	WITHOUT_CLASSIFICATION	0.01681235873840029	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9831876412615997	WITHOUT_CLASSIFICATION	0.01681235873840029	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9991041691130085	WITHOUT_CLASSIFICATION	8.958308869916065E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9996788005105953	WITHOUT_CLASSIFICATION	3.211994894046887E-4	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999068734354962	WITHOUT_CLASSIFICATION	9.31265645038171E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999894034864438	WITHOUT_CLASSIFICATION	1.0596513556194152E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9984072523647022	WITHOUT_CLASSIFICATION	0.0015927476352977394	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999569954686304	WITHOUT_CLASSIFICATION	4.3004531369531624E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999969579534781	WITHOUT_CLASSIFICATION	3.0420465219012788E-5	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998797486770562	WITHOUT_CLASSIFICATION	1.2025132294385681E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994888621211078	WITHOUT_CLASSIFICATION	5.111378788921881E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999947772932726	WITHOUT_CLASSIFICATION	5.222706727465412E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999357710480854	WITHOUT_CLASSIFICATION	6.422895191464373E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999814227608365	WITHOUT_CLASSIFICATION	1.8577239163498427E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999987658433225	WITHOUT_CLASSIFICATION	1.2341566775043913E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9996642943221651	WITHOUT_CLASSIFICATION	3.3570567783488577E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9996642943221651	WITHOUT_CLASSIFICATION	3.3570567783488577E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999647209526662	WITHOUT_CLASSIFICATION	3.5279047333809026E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999647209526662	WITHOUT_CLASSIFICATION	3.5279047333809026E-4	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9968375610051616	WITHOUT_CLASSIFICATION	0.0031624389948383225	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9991041691130085	WITHOUT_CLASSIFICATION	8.958308869916065E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.999737906912356	WITHOUT_CLASSIFICATION	2.6209308764393413E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999990954819394	WITHOUT_CLASSIFICATION	9.045180605938627E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996174680717859	WITHOUT_CLASSIFICATION	3.825319282141058E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9992102693609923	WITHOUT_CLASSIFICATION	7.897306390077094E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9968686268417801	WITHOUT_CLASSIFICATION	0.003131373158219879	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9991041691130085	WITHOUT_CLASSIFICATION	8.958308869916065E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9992102693609923	WITHOUT_CLASSIFICATION	7.897306390077094E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9968686268417801	WITHOUT_CLASSIFICATION	0.003131373158219879	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997402280218645	WITHOUT_CLASSIFICATION	2.597719781354655E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999512185159344	WITHOUT_CLASSIFICATION	4.878148406558119E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9996920950062622	WITHOUT_CLASSIFICATION	3.0790499373774336E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9991041691130085	WITHOUT_CLASSIFICATION	8.958308869916065E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9991041691130085	WITHOUT_CLASSIFICATION	8.958308869916065E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.999911961218749	WITHOUT_CLASSIFICATION	8.803878125093279E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999063794568475	WITHOUT_CLASSIFICATION	9.36205431525027E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9996443869789756	WITHOUT_CLASSIFICATION	3.5561302102432894E-4	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999964897245012	WITHOUT_CLASSIFICATION	3.510275498803066E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999220355322677	WITHOUT_CLASSIFICATION	7.796446773223824E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999958958992011	WITHOUT_CLASSIFICATION	4.104100798903351E-5	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999399865381212	WITHOUT_CLASSIFICATION	6.00134618788763E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999505417811095	WITHOUT_CLASSIFICATION	4.9458218890559175E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998340298046722	WITHOUT_CLASSIFICATION	1.6597019532777849E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999318720723419	WITHOUT_CLASSIFICATION	6.812792765805728E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9996400026524568	WITHOUT_CLASSIFICATION	3.599973475433347E-4	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999433105991876	WITHOUT_CLASSIFICATION	5.6689400812285345E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999983487561804	WITHOUT_CLASSIFICATION	1.6512438195972198E-5	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993171669744191	WITHOUT_CLASSIFICATION	6.82833025580878E-4	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998198374921768	WITHOUT_CLASSIFICATION	1.8016250782304424E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9898800233596967	WITHOUT_CLASSIFICATION	0.010119976640303202	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998143210402685	WITHOUT_CLASSIFICATION	1.8567895973148162E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999875734332838	WITHOUT_CLASSIFICATION	1.2426566716189656E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9995297026309057	WITHOUT_CLASSIFICATION	4.7029736909443763E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998961009601304	WITHOUT_CLASSIFICATION	1.038990398695927E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998143210402685	WITHOUT_CLASSIFICATION	1.8567895973148162E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9165460474358814	WITHOUT_CLASSIFICATION	0.08345395256411856	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999962566046628	WITHOUT_CLASSIFICATION	3.7433953370896067E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9918199719539254	WITHOUT_CLASSIFICATION	0.00818002804607467	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999197620140624	WITHOUT_CLASSIFICATION	8.023798593759942E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998935303268731	WITHOUT_CLASSIFICATION	1.0646967312687813E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9911228145772644	WITHOUT_CLASSIFICATION	0.008877185422735547	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999067702881824	WITHOUT_CLASSIFICATION	9.322971181758523E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999477983020212	WITHOUT_CLASSIFICATION	5.220169797880743E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997804455689178	WITHOUT_CLASSIFICATION	2.1955443108214704E-4	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9997553985218701	WITHOUT_CLASSIFICATION	2.446014781298954E-4	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998001225067586	WITHOUT_CLASSIFICATION	1.9987749324133774E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999710672154201	WITHOUT_CLASSIFICATION	2.8932784579903795E-5	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999492334331908	WITHOUT_CLASSIFICATION	5.076656680919495E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9987145098400451	WITHOUT_CLASSIFICATION	0.001285490159954883	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997017007567289	WITHOUT_CLASSIFICATION	2.982992432710852E-4	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9991253595594658	WITHOUT_CLASSIFICATION	8.746404405342985E-4	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999244373837092	WITHOUT_CLASSIFICATION	7.556261629086789E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9998117683234119	WITHOUT_CLASSIFICATION	1.8823167658818822E-4	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9983327343012575	WITHOUT_CLASSIFICATION	0.001667265698742659	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999789607007092	WITHOUT_CLASSIFICATION	2.103929929072826E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998809645515686	WITHOUT_CLASSIFICATION	1.1903544843143886E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998809645515686	WITHOUT_CLASSIFICATION	1.1903544843143886E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996807704815385	WITHOUT_CLASSIFICATION	3.192295184615106E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998642700587099	WITHOUT_CLASSIFICATION	1.3572994129008726E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999910484503493	WITHOUT_CLASSIFICATION	8.951549650795593E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999856820529394	WITHOUT_CLASSIFICATION	1.4317947060647868E-5	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997936017660435	WITHOUT_CLASSIFICATION	2.0639823395640676E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999838576654936	WITHOUT_CLASSIFICATION	1.6142334506408752E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995569550208827	WITHOUT_CLASSIFICATION	4.430449791172532E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997834431301846	WITHOUT_CLASSIFICATION	2.165568698154213E-4	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996548700573289	WITHOUT_CLASSIFICATION	3.4512994267102914E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9995073063899943	WITHOUT_CLASSIFICATION	4.926936100057598E-4	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999904251830064	WITHOUT_CLASSIFICATION	9.574816993590761E-5	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998921987397126	WITHOUT_CLASSIFICATION	1.0780126028738733E-4	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999089545905486	WITHOUT_CLASSIFICATION	9.104540945125638E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999853870551966	WITHOUT_CLASSIFICATION	1.461294480339619E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996375570901237	WITHOUT_CLASSIFICATION	3.6244290987635865E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9997402280218645	WITHOUT_CLASSIFICATION	2.597719781354655E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999500063486757	WITHOUT_CLASSIFICATION	4.999365132432425E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999551685936144	WITHOUT_CLASSIFICATION	4.483140638556145E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999452529478459	WITHOUT_CLASSIFICATION	5.474705215399714E-5	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9966116916942149	WITHOUT_CLASSIFICATION	0.003388308305785191	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9967701374291182	WITHOUT_CLASSIFICATION	0.0032298625708816636	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9981923456622452	WITHOUT_CLASSIFICATION	0.0018076543377547269	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998692774649337	WITHOUT_CLASSIFICATION	1.307225350663929E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578636178604	WITHOUT_CLASSIFICATION	1.4213638213951885E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998172600331497	WITHOUT_CLASSIFICATION	1.8273996685032564E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9986733265505104	WITHOUT_CLASSIFICATION	0.0013266734494895177	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999182819470506	WITHOUT_CLASSIFICATION	8.171805294933828E-5	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999898119726534	WITHOUT_CLASSIFICATION	1.018802734660468E-4	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9886482923660679	WITHOUT_CLASSIFICATION	0.01135170763393218	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998930003302084	WITHOUT_CLASSIFICATION	1.0699966979165292E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9997511711583158	WITHOUT_CLASSIFICATION	2.488288416841954E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998960856244852	WITHOUT_CLASSIFICATION	1.0391437551490512E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998350684714956	WITHOUT_CLASSIFICATION	1.6493152850431556E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998472635704715	WITHOUT_CLASSIFICATION	1.5273642952854768E-4	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995595639018424	WITHOUT_CLASSIFICATION	4.4043609815757364E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9989955800862763	WITHOUT_CLASSIFICATION	0.0010044199137237133	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.99935132585404	WITHOUT_CLASSIFICATION	6.486741459600118E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999723528767765	WITHOUT_CLASSIFICATION	2.7647123223443945E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999853870551966	WITHOUT_CLASSIFICATION	1.461294480339619E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997251368905655	WITHOUT_CLASSIFICATION	2.74863109434422E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9997078309327703	WITHOUT_CLASSIFICATION	2.9216906722971957E-4	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998957733937354	WITHOUT_CLASSIFICATION	1.0422660626468945E-4	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998921987397126	WITHOUT_CLASSIFICATION	1.0780126028738733E-4	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999338978807092	WITHOUT_CLASSIFICATION	6.610211929073835E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9995818187664031	WITHOUT_CLASSIFICATION	4.1818123359688413E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997949636077754	WITHOUT_CLASSIFICATION	2.0503639222451612E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999271454577394	WITHOUT_CLASSIFICATION	7.28545422606009E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996997832960692	WITHOUT_CLASSIFICATION	3.002167039306812E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998263069100122	WITHOUT_CLASSIFICATION	1.7369308998782185E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998563772837878	WITHOUT_CLASSIFICATION	1.4362271621221694E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9982309974815848	WITHOUT_CLASSIFICATION	0.0017690025184151157	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996064496398853	WITHOUT_CLASSIFICATION	3.9355036011465744E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999788042614326	WITHOUT_CLASSIFICATION	2.119573856745538E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9997402280218645	WITHOUT_CLASSIFICATION	2.597719781354655E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998921987397126	WITHOUT_CLASSIFICATION	1.0780126028738733E-4	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9996248806934451	WITHOUT_CLASSIFICATION	3.751193065549109E-4	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999268830334187	WITHOUT_CLASSIFICATION	7.31169665812011E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999076739076256	WITHOUT_CLASSIFICATION	9.232609237443632E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9986514424914573	WITHOUT_CLASSIFICATION	0.0013485575085427407	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9990041402055357	WITHOUT_CLASSIFICATION	9.958597944642648E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998023544504747	WITHOUT_CLASSIFICATION	1.9764554952523213E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9993713937683202	WITHOUT_CLASSIFICATION	6.286062316797498E-4	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999589550880605	WITHOUT_CLASSIFICATION	4.104491193951466E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.999925730655414	WITHOUT_CLASSIFICATION	7.426934458592988E-5	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998050069355083	WITHOUT_CLASSIFICATION	1.949930644917456E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999824565206951	WITHOUT_CLASSIFICATION	1.754347930489193E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998921987397126	WITHOUT_CLASSIFICATION	1.0780126028738733E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999853870551966	WITHOUT_CLASSIFICATION	1.461294480339619E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.7586881633694035	WITHOUT_CLASSIFICATION	0.2413118366305965	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9986066028300701	WITHOUT_CLASSIFICATION	0.0013933971699299755	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9291870934980124	WITHOUT_CLASSIFICATION	0.07081290650198756	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999853870551966	WITHOUT_CLASSIFICATION	1.461294480339619E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999967319407431	WITHOUT_CLASSIFICATION	3.26805925690264E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999076739076256	WITHOUT_CLASSIFICATION	9.232609237443632E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.997116314858209	WITHOUT_CLASSIFICATION	0.0028836851417910077	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9991095449506225	WITHOUT_CLASSIFICATION	8.904550493774744E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9823699276856157	WITHOUT_CLASSIFICATION	0.01763007231438419	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996997832960692	WITHOUT_CLASSIFICATION	3.002167039306812E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998263069100122	WITHOUT_CLASSIFICATION	1.7369308998782185E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999978826623244	WITHOUT_CLASSIFICATION	2.1173376756072302E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999820826742835	WITHOUT_CLASSIFICATION	1.7917325716466993E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9989177913612245	WITHOUT_CLASSIFICATION	0.0010822086387755326	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9989600452231402	WITHOUT_CLASSIFICATION	0.0010399547768598235	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9966566708600048	WITHOUT_CLASSIFICATION	0.0033433291399952636	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999853870551966	WITHOUT_CLASSIFICATION	1.461294480339619E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998563772837878	WITHOUT_CLASSIFICATION	1.4362271621221694E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9982309974815848	WITHOUT_CLASSIFICATION	0.0017690025184151157	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977585722326	WITHOUT_CLASSIFICATION	2.2414277673969642E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998436999849186	WITHOUT_CLASSIFICATION	1.5630001508140081E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998915850268876	WITHOUT_CLASSIFICATION	1.0841497311237873E-4	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9996775799526757	WITHOUT_CLASSIFICATION	3.224200473243106E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999475749207328	WITHOUT_CLASSIFICATION	5.242507926708805E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9969159808993632	WITHOUT_CLASSIFICATION	0.003084019100636798	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999143943661852	WITHOUT_CLASSIFICATION	8.560563381474977E-5	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999561653711344	WITHOUT_CLASSIFICATION	4.383462886550958E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999061376966054	WITHOUT_CLASSIFICATION	9.386230339456688E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999838576654936	WITHOUT_CLASSIFICATION	1.6142334506408752E-4	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999301735021046	WITHOUT_CLASSIFICATION	6.982649789549587E-5	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998851789633032	WITHOUT_CLASSIFICATION	1.1482103669678652E-4	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997539056997108	WITHOUT_CLASSIFICATION	2.460943002892079E-4	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9828178496249164	WITHOUT_CLASSIFICATION	0.017182150375083697	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995569550208827	WITHOUT_CLASSIFICATION	4.430449791172532E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996545121472432	WITHOUT_CLASSIFICATION	3.454878527566911E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998472635704715	WITHOUT_CLASSIFICATION	1.5273642952854768E-4	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9953026796322739	WITHOUT_CLASSIFICATION	0.004697320367726044	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9979635559224568	WITHOUT_CLASSIFICATION	0.0020364440775432883	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9990719869314681	WITHOUT_CLASSIFICATION	9.280130685318667E-4	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999390695470749	WITHOUT_CLASSIFICATION	6.093045292508838E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999783253992294	WITHOUT_CLASSIFICATION	2.1674600770549783E-5	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9997155536502663	WITHOUT_CLASSIFICATION	2.844463497337188E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9994231802154534	WITHOUT_CLASSIFICATION	5.768197845466996E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999067702881824	WITHOUT_CLASSIFICATION	9.322971181758523E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999609872345231	WITHOUT_CLASSIFICATION	3.901276547695119E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9994633712428426	WITHOUT_CLASSIFICATION	5.36628757157518E-4	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998628246282932	WITHOUT_CLASSIFICATION	1.3717537170681535E-4	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999146312024291	WITHOUT_CLASSIFICATION	8.536879757101559E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998942441540069	WITHOUT_CLASSIFICATION	1.057558459931798E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998841967831432	WITHOUT_CLASSIFICATION	1.1580321685676567E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998918917131389	WITHOUT_CLASSIFICATION	1.0810828686114247E-4	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763357071617	WITHOUT_CLASSIFICATION	1.2366429283826454E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990168594869161	WITHOUT_CLASSIFICATION	9.831405130839165E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9992754107945888	WITHOUT_CLASSIFICATION	7.245892054111254E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994509788083228	WITHOUT_CLASSIFICATION	5.490211916772212E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9957020142761961	WITHOUT_CLASSIFICATION	0.004297985723803986	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9967508842264025	WITHOUT_CLASSIFICATION	0.0032491157735974985	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9968009257944582	WITHOUT_CLASSIFICATION	0.003199074205541698	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9992645847971096	WITHOUT_CLASSIFICATION	7.354152028903673E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998520786551403	WITHOUT_CLASSIFICATION	1.4792134485970852E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9967508842264025	WITHOUT_CLASSIFICATION	0.0032491157735974985	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999594845919484	WITHOUT_CLASSIFICATION	4.0515408051601125E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990021743637841	WITHOUT_CLASSIFICATION	9.978256362158792E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999155134364434	WITHOUT_CLASSIFICATION	8.448656355671433E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998545333913649	WITHOUT_CLASSIFICATION	1.4546660863507183E-4	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9808934593009966	WITHOUT_CLASSIFICATION	0.019106540699003402	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999888860803434	WITHOUT_CLASSIFICATION	1.1113919656606671E-4	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999193249174914	WITHOUT_CLASSIFICATION	8.067508250855352E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998987628377488	WITHOUT_CLASSIFICATION	1.0123716225109023E-4	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998987628377488	WITHOUT_CLASSIFICATION	1.0123716225109023E-4	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9997951260678821	WITHOUT_CLASSIFICATION	2.0487393211789798E-4	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9993172211571589	WITHOUT_CLASSIFICATION	6.82778842841112E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9995645036078213	WITHOUT_CLASSIFICATION	4.354963921785687E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999856027525577	WITHOUT_CLASSIFICATION	1.439724744229221E-4	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997453320137668	WITHOUT_CLASSIFICATION	2.546679862331698E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999475710847596	WITHOUT_CLASSIFICATION	5.2428915240320354E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999894976443823	WITHOUT_CLASSIFICATION	1.0502355617733491E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999401631794044	WITHOUT_CLASSIFICATION	5.9836820595612126E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9995751347117818	WITHOUT_CLASSIFICATION	4.248652882182291E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999687662276564	WITHOUT_CLASSIFICATION	3.12337723435215E-5	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999542482175175	WITHOUT_CLASSIFICATION	4.575178248239681E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9995392590219376	WITHOUT_CLASSIFICATION	4.6074097806239904E-4	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999562241184693	WITHOUT_CLASSIFICATION	4.3775881530616536E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9983782648485258	WITHOUT_CLASSIFICATION	0.0016217351514741496	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9995508548790459	WITHOUT_CLASSIFICATION	4.491451209540631E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9984343077973858	WITHOUT_CLASSIFICATION	0.0015656922026140788	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994993874843746	WITHOUT_CLASSIFICATION	5.006125156252884E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9951236086527065	WITHOUT_CLASSIFICATION	0.004876391347293461	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999764254440795	WITHOUT_CLASSIFICATION	2.3574555920429226E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998258186024156	WITHOUT_CLASSIFICATION	1.7418139758430698E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9997450901843778	WITHOUT_CLASSIFICATION	2.549098156220882E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998283717605239	WITHOUT_CLASSIFICATION	1.7162823947607464E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9998035818382389	WITHOUT_CLASSIFICATION	1.9641816176103714E-4	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998647817467166	WITHOUT_CLASSIFICATION	1.3521825328341536E-4	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998671689957253	WITHOUT_CLASSIFICATION	1.328310042747867E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9987318510776786	WITHOUT_CLASSIFICATION	0.0012681489223213918	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9957141183721419	WITHOUT_CLASSIFICATION	0.004285881627858166	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999435882746956	WITHOUT_CLASSIFICATION	5.641172530422612E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9976425028368177	WITHOUT_CLASSIFICATION	0.002357497163182284	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9994346437906052	WITHOUT_CLASSIFICATION	5.653562093947193E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998494565643411	WITHOUT_CLASSIFICATION	1.5054343565897878E-4	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9998671375322776	WITHOUT_CLASSIFICATION	1.3286246772237892E-4	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9995974680673949	WITHOUT_CLASSIFICATION	4.0253193260504806E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998840921598315	WITHOUT_CLASSIFICATION	1.1590784016838242E-4	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998823717186243	WITHOUT_CLASSIFICATION	1.1762828137571677E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999192785414246	WITHOUT_CLASSIFICATION	8.072145857537257E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.993755088677436	WITHOUT_CLASSIFICATION	0.006244911322563947	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999941940261887	WITHOUT_CLASSIFICATION	5.805973811292977E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9970840455604785	WITHOUT_CLASSIFICATION	0.0029159544395214697	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999540993880375	WITHOUT_CLASSIFICATION	4.5900611962569755E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997672277227057	WITHOUT_CLASSIFICATION	2.3277227729436007E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997402280218645	WITHOUT_CLASSIFICATION	2.597719781354655E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997402280218645	WITHOUT_CLASSIFICATION	2.597719781354655E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999306819121672	WITHOUT_CLASSIFICATION	6.931808783287577E-5	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998898032701423	WITHOUT_CLASSIFICATION	1.1019672985770235E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9996174928124395	WITHOUT_CLASSIFICATION	3.825071875605005E-4	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999740959008965	WITHOUT_CLASSIFICATION	2.5904099103566883E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999410663471056	WITHOUT_CLASSIFICATION	5.8933652894307005E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9998501482254464	WITHOUT_CLASSIFICATION	1.4985177455359E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9993554505321038	WITHOUT_CLASSIFICATION	6.445494678960973E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998710756578653	WITHOUT_CLASSIFICATION	1.289243421348015E-4	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999492539974847	WITHOUT_CLASSIFICATION	5.074600251529188E-5	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998289208591576	WITHOUT_CLASSIFICATION	1.7107914084234807E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996328107195478	WITHOUT_CLASSIFICATION	3.6718928045220727E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999304686932893	WITHOUT_CLASSIFICATION	6.95313067107629E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9993469737719614	WITHOUT_CLASSIFICATION	6.530262280387449E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996815243968941	WITHOUT_CLASSIFICATION	3.1847560310589235E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998107781306121	WITHOUT_CLASSIFICATION	1.8922186938789557E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999806246704758	WITHOUT_CLASSIFICATION	1.9375329524229464E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9994816268190879	WITHOUT_CLASSIFICATION	5.183731809120217E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9996157354837697	WITHOUT_CLASSIFICATION	3.842645162303038E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998098165771707	WITHOUT_CLASSIFICATION	1.9018342282934217E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999727935398297	WITHOUT_CLASSIFICATION	2.720646017030809E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9996157354837697	WITHOUT_CLASSIFICATION	3.842645162303038E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999778880517572	WITHOUT_CLASSIFICATION	2.211194824272414E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999714031540051	WITHOUT_CLASSIFICATION	2.8596845994924476E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999888322470884	WITHOUT_CLASSIFICATION	1.1167752911607955E-4	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997434343721086	WITHOUT_CLASSIFICATION	2.565656278914513E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999583667509157	WITHOUT_CLASSIFICATION	4.163324908433145E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999741603119515	WITHOUT_CLASSIFICATION	2.583968804848212E-5	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998827924560646	WITHOUT_CLASSIFICATION	1.1720754393546652E-4	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996581673489904	WITHOUT_CLASSIFICATION	3.4183265100960357E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998151230338831	WITHOUT_CLASSIFICATION	1.8487696611696686E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999317628955371	WITHOUT_CLASSIFICATION	6.823710446291552E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999281841186775	WITHOUT_CLASSIFICATION	7.181588132249377E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999382206969097	WITHOUT_CLASSIFICATION	6.177930309029108E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999919803545873	WITHOUT_CLASSIFICATION	8.019645412704232E-5	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999881975559226	WITHOUT_CLASSIFICATION	1.1802444077345729E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9992706190948512	WITHOUT_CLASSIFICATION	7.293809051488029E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999697146668959	WITHOUT_CLASSIFICATION	3.0285333104076236E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995214636138402	WITHOUT_CLASSIFICATION	4.7853638615976E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9783257894757434	WITHOUT_CLASSIFICATION	0.021674210524256596	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998577682518	WITHOUT_CLASSIFICATION	1.422317482000221E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999871078180251	WITHOUT_CLASSIFICATION	1.289218197489206E-4	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999331132365915	WITHOUT_CLASSIFICATION	6.688676340853316E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9959241023940743	WITHOUT_CLASSIFICATION	0.004075897605925673	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9959839060173481	WITHOUT_CLASSIFICATION	0.004016093982651948	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999985222530462	WITHOUT_CLASSIFICATION	1.4777469538456432E-6	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9994870342560271	WITHOUT_CLASSIFICATION	5.129657439728611E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9966262748839365	WITHOUT_CLASSIFICATION	0.003373725116063464	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997609591111567	WITHOUT_CLASSIFICATION	2.3904088884336798E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998841967831432	WITHOUT_CLASSIFICATION	1.1580321685676567E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9972297107204585	WITHOUT_CLASSIFICATION	0.002770289279541612	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995640033215193	WITHOUT_CLASSIFICATION	4.359966784806609E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9994685415075513	WITHOUT_CLASSIFICATION	5.314584924487488E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999192522301871	WITHOUT_CLASSIFICATION	8.074776981301862E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998444028029038	WITHOUT_CLASSIFICATION	1.5559719709621925E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9997420642894411	WITHOUT_CLASSIFICATION	2.5793571055886705E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9998985553280534	WITHOUT_CLASSIFICATION	1.0144467194660122E-4	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999056437197961	WITHOUT_CLASSIFICATION	9.435628020384328E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998527430907332	WITHOUT_CLASSIFICATION	1.4725690926674487E-4	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998543149531253	WITHOUT_CLASSIFICATION	1.45685046874603E-4	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999507893868954	WITHOUT_CLASSIFICATION	4.9210613104594944E-5	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999374189436537	WITHOUT_CLASSIFICATION	6.258105634623855E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9997338994977151	WITHOUT_CLASSIFICATION	2.661005022850161E-4	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.999693605979045	WITHOUT_CLASSIFICATION	3.0639402095500475E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999828501229288	WITHOUT_CLASSIFICATION	1.714987707118691E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998759632211097	WITHOUT_CLASSIFICATION	1.2403677889015306E-4	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9972005016747529	WITHOUT_CLASSIFICATION	0.0027994983252471357	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997727433962461	WITHOUT_CLASSIFICATION	2.2725660375382776E-4	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999892150161122	WITHOUT_CLASSIFICATION	1.0784983887804345E-4	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999796560843195	WITHOUT_CLASSIFICATION	2.0343915680459068E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997720392413922	WITHOUT_CLASSIFICATION	2.2796075860783985E-4	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999493514502065	WITHOUT_CLASSIFICATION	5.0648549793648535E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997191808285012	WITHOUT_CLASSIFICATION	2.8081917149877213E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999635148211738	WITHOUT_CLASSIFICATION	3.6485178826205384E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999602075326283	WITHOUT_CLASSIFICATION	3.9792467371784355E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9995979881607902	WITHOUT_CLASSIFICATION	4.020118392098307E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999986604850713	WITHOUT_CLASSIFICATION	1.3395149287027144E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9975750310667648	WITHOUT_CLASSIFICATION	0.0024249689332351164	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999936947240967	WITHOUT_CLASSIFICATION	6.305275903292293E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998480073001609	WITHOUT_CLASSIFICATION	1.5199269983909872E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998377330272016	WITHOUT_CLASSIFICATION	1.622669727984806E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997024002424841	WITHOUT_CLASSIFICATION	2.975997575158418E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9961714305900987	WITHOUT_CLASSIFICATION	0.003828569409901232	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998394640220539	WITHOUT_CLASSIFICATION	1.6053597794612494E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99994298006722	WITHOUT_CLASSIFICATION	5.701993277993302E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9880805474460121	WITHOUT_CLASSIFICATION	0.01191945255398775	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999599572077792	WITHOUT_CLASSIFICATION	4.0042792220788565E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998478394939814	WITHOUT_CLASSIFICATION	1.5216050601874387E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999599572077792	WITHOUT_CLASSIFICATION	4.0042792220788565E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999324298623081	WITHOUT_CLASSIFICATION	6.757013769190313E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999610165300304	WITHOUT_CLASSIFICATION	3.8983469969580975E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999601320866822	WITHOUT_CLASSIFICATION	3.986791331774463E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999819940503294	WITHOUT_CLASSIFICATION	1.8005949670642192E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999778661553985	WITHOUT_CLASSIFICATION	2.2133844601482878E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999130778101871	WITHOUT_CLASSIFICATION	8.692218981291508E-5	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999227920585217	WITHOUT_CLASSIFICATION	7.720794147825928E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.999573477946107	WITHOUT_CLASSIFICATION	4.265220538930349E-4	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999912409292845	WITHOUT_CLASSIFICATION	8.759070715528973E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999927505866967	WITHOUT_CLASSIFICATION	7.249413303236609E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9998508477531217	WITHOUT_CLASSIFICATION	1.491522468784011E-4	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998477787070339	WITHOUT_CLASSIFICATION	1.522212929660755E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990123593623241	WITHOUT_CLASSIFICATION	9.8764063767589E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.805949569481066	WITHOUT_CLASSIFICATION	0.19405043051893398	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999934148251228	WITHOUT_CLASSIFICATION	6.585174877179059E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999855903851419	WITHOUT_CLASSIFICATION	1.440961485811107E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999295909051547	WITHOUT_CLASSIFICATION	7.040909484529985E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999295909051547	WITHOUT_CLASSIFICATION	7.040909484529985E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998289208591576	WITHOUT_CLASSIFICATION	1.7107914084234807E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9986107425583812	WITHOUT_CLASSIFICATION	0.0013892574416187803	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999645874280392	WITHOUT_CLASSIFICATION	3.5412571960852865E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9997662408890704	WITHOUT_CLASSIFICATION	2.337591109297146E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9957361862507407	WITHOUT_CLASSIFICATION	0.004263813749259404	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998864730574846	WITHOUT_CLASSIFICATION	1.1352694251542177E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9902246670995342	WITHOUT_CLASSIFICATION	0.00977533290046588	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997849813799657	WITHOUT_CLASSIFICATION	2.1501862003429984E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999768822990137	WITHOUT_CLASSIFICATION	2.3117700986315278E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999845119830475	WITHOUT_CLASSIFICATION	1.5488016952480067E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998997412238471	WITHOUT_CLASSIFICATION	1.002587761529783E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999424609168338	WITHOUT_CLASSIFICATION	5.7539083166148894E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9995553952818839	WITHOUT_CLASSIFICATION	4.446047181161938E-4	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998182159267217	WITHOUT_CLASSIFICATION	1.817840732783456E-4	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9976154871147688	WITHOUT_CLASSIFICATION	0.0023845128852311693	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9985488709199883	WITHOUT_CLASSIFICATION	0.001451129080011652	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9994906217905359	WITHOUT_CLASSIFICATION	5.093782094640195E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997386289183599	WITHOUT_CLASSIFICATION	2.6137108164008037E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9995923217846032	WITHOUT_CLASSIFICATION	4.0767821539680653E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999521650600782	WITHOUT_CLASSIFICATION	4.783493992176137E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999626268162943	WITHOUT_CLASSIFICATION	3.7373183705673655E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998709709382565	WITHOUT_CLASSIFICATION	1.2902906174344E-4	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999737823618414	WITHOUT_CLASSIFICATION	2.6217638158656286E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999190503499537	WITHOUT_CLASSIFICATION	8.094965004631503E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9997761395033316	WITHOUT_CLASSIFICATION	2.2386049666845546E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999509306563639	WITHOUT_CLASSIFICATION	4.9069343636052563E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999306291492292	WITHOUT_CLASSIFICATION	6.937085077079655E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9953603652782171	WITHOUT_CLASSIFICATION	0.004639634721782876	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996703364940693	WITHOUT_CLASSIFICATION	3.296635059306203E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9996958776373296	WITHOUT_CLASSIFICATION	3.0412236267044694E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999914358404979	WITHOUT_CLASSIFICATION	8.564159502170846E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9896494148586559	WITHOUT_CLASSIFICATION	0.010350585141344132	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9997976955828501	WITHOUT_CLASSIFICATION	2.0230441714989757E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997771283192934	WITHOUT_CLASSIFICATION	2.22871680706431E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999744254811511	WITHOUT_CLASSIFICATION	2.5574518848981265E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999846932884765	WITHOUT_CLASSIFICATION	1.5306711523544025E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999359809259425	WITHOUT_CLASSIFICATION	6.401907405748195E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999918948348708	WITHOUT_CLASSIFICATION	8.10516512920482E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9988467373579826	WITHOUT_CLASSIFICATION	0.001153262642017411	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999807455835451	WITHOUT_CLASSIFICATION	1.9254416454900377E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998194711528159	WITHOUT_CLASSIFICATION	1.8052884718411296E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9103873440373471	WITHOUT_CLASSIFICATION	0.08961265596265289	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9994684140556033	WITHOUT_CLASSIFICATION	5.315859443966589E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9933130287898789	WITHOUT_CLASSIFICATION	0.006686971210121083	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9724660933509255	WITHOUT_CLASSIFICATION	0.027533906649074527	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999904614230732	WITHOUT_CLASSIFICATION	9.538576926764641E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995469885358912	WITHOUT_CLASSIFICATION	4.530114641087476E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999158912570769	WITHOUT_CLASSIFICATION	8.410874292309357E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998194711528159	WITHOUT_CLASSIFICATION	1.8052884718411296E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999477863515437	WITHOUT_CLASSIFICATION	5.221364845631354E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9995076525311836	WITHOUT_CLASSIFICATION	4.923474688163387E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9997765423385738	WITHOUT_CLASSIFICATION	2.2345766142630068E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999812842037797	WITHOUT_CLASSIFICATION	1.8715796220307833E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999967319407431	WITHOUT_CLASSIFICATION	3.26805925690264E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999967319407431	WITHOUT_CLASSIFICATION	3.26805925690264E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999951149226924	WITHOUT_CLASSIFICATION	4.885077307608234E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9988313055653784	WITHOUT_CLASSIFICATION	0.0011686944346216812	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999797342251494	WITHOUT_CLASSIFICATION	2.026577485060219E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9996586559775859	WITHOUT_CLASSIFICATION	3.413440224140793E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9990240343506835	WITHOUT_CLASSIFICATION	9.759656493164027E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997513141784264	WITHOUT_CLASSIFICATION	2.486858215735581E-4	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999785461106595	WITHOUT_CLASSIFICATION	2.1453889340469543E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9992117408554821	WITHOUT_CLASSIFICATION	7.882591445179545E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994715413690787	WITHOUT_CLASSIFICATION	5.284586309212858E-4	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9980379704818604	WITHOUT_CLASSIFICATION	0.001962029518139683	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9988100643144872	WITHOUT_CLASSIFICATION	0.0011899356855128822	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998047483409978	WITHOUT_CLASSIFICATION	1.952516590022294E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999815060000637	WITHOUT_CLASSIFICATION	1.8493999936293744E-4	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9942853936914945	WITHOUT_CLASSIFICATION	0.005714606308505399	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993559070720759	WITHOUT_CLASSIFICATION	6.440929279242181E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9978682498551511	WITHOUT_CLASSIFICATION	0.002131750144848934	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9974523651331815	WITHOUT_CLASSIFICATION	0.0025476348668184313	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998485609797917	WITHOUT_CLASSIFICATION	1.5143902020831585E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999950671439623	WITHOUT_CLASSIFICATION	4.9328560376986275E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996717959267313	WITHOUT_CLASSIFICATION	3.282040732687309E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999969643088588	WITHOUT_CLASSIFICATION	3.035691141239444E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996566864927877	WITHOUT_CLASSIFICATION	3.433135072121777E-4	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9951544135646844	WITHOUT_CLASSIFICATION	0.0048455864353156375	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999881081742757	WITHOUT_CLASSIFICATION	1.1891825724127223E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998738780501225	WITHOUT_CLASSIFICATION	1.2612194987758374E-4	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999527928889835	WITHOUT_CLASSIFICATION	4.720711101655983E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999265306965809	WITHOUT_CLASSIFICATION	7.346930341914965E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9997085733528281	WITHOUT_CLASSIFICATION	2.914266471718861E-4	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994663587352041	WITHOUT_CLASSIFICATION	5.336412647958577E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999265306965809	WITHOUT_CLASSIFICATION	7.346930341914965E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999048433231015	WITHOUT_CLASSIFICATION	9.515667689844589E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999540883254066	WITHOUT_CLASSIFICATION	4.591167459337999E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998514401964838	WITHOUT_CLASSIFICATION	1.4855980351629415E-4	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998904148381591	WITHOUT_CLASSIFICATION	1.0958516184088142E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999212118524729	WITHOUT_CLASSIFICATION	7.878814752711025E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998997412238471	WITHOUT_CLASSIFICATION	1.002587761529783E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9997389587172562	WITHOUT_CLASSIFICATION	2.610412827437833E-4	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997155536502663	WITHOUT_CLASSIFICATION	2.844463497337188E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.980615900223917	WITHOUT_CLASSIFICATION	0.01938409977608309	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995556804007756	WITHOUT_CLASSIFICATION	4.443195992244623E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9995973419894459	WITHOUT_CLASSIFICATION	4.0265801055400403E-4	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999505656336513	WITHOUT_CLASSIFICATION	4.9434366348752164E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998810296229872	WITHOUT_CLASSIFICATION	1.1897037701284391E-4	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999509792702043	WITHOUT_CLASSIFICATION	4.902072979587089E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998066814892423	WITHOUT_CLASSIFICATION	1.9331851075766104E-4	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998351063598261	WITHOUT_CLASSIFICATION	1.648936401739274E-4	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9998551793721396	WITHOUT_CLASSIFICATION	1.4482062786028559E-4	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998282653089001	WITHOUT_CLASSIFICATION	1.717346910997455E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999311871315669	WITHOUT_CLASSIFICATION	6.881286843315036E-5	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999829632001367	WITHOUT_CLASSIFICATION	1.7036799863313993E-4	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998881332585634	WITHOUT_CLASSIFICATION	1.1186674143655839E-4	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999747003292395	WITHOUT_CLASSIFICATION	2.529967076058831E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999795614745979	WITHOUT_CLASSIFICATION	2.043852540211915E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999646146108088	WITHOUT_CLASSIFICATION	3.5385389191245774E-5	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997000123518669	WITHOUT_CLASSIFICATION	2.9998764813301247E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9995277690081529	WITHOUT_CLASSIFICATION	4.7223099184708826E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.992259907596997	WITHOUT_CLASSIFICATION	0.007740092403003037	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999436533637299	WITHOUT_CLASSIFICATION	5.6346636270017446E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999550051427315	WITHOUT_CLASSIFICATION	4.499485726846929E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997973334703075	WITHOUT_CLASSIFICATION	2.026665296924673E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998570398684256	WITHOUT_CLASSIFICATION	1.429601315744823E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9924489652826528	WITHOUT_CLASSIFICATION	0.007551034717347164	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999800597301078	WITHOUT_CLASSIFICATION	1.994026989218783E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999934661407648	WITHOUT_CLASSIFICATION	6.533859235196798E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999644564734544	WITHOUT_CLASSIFICATION	3.5543526545516236E-5	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994335386136423	WITHOUT_CLASSIFICATION	5.664613863577891E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998897505354224	WITHOUT_CLASSIFICATION	1.1024946457750247E-4	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997889047699415	WITHOUT_CLASSIFICATION	2.110952300584076E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997600624139887	WITHOUT_CLASSIFICATION	2.3993758601129013E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9992790667434397	WITHOUT_CLASSIFICATION	7.209332565603476E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999930999885943	WITHOUT_CLASSIFICATION	6.900011405750048E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999559303537907	WITHOUT_CLASSIFICATION	4.406964620929111E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998496316003523	WITHOUT_CLASSIFICATION	1.5036839964762045E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999959860875874	WITHOUT_CLASSIFICATION	4.013912412580523E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999621148389225	WITHOUT_CLASSIFICATION	3.788516107741826E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999762179223476	WITHOUT_CLASSIFICATION	2.3782077652373654E-5	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9983883097040682	WITHOUT_CLASSIFICATION	0.001611690295931753	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9985314002325371	WITHOUT_CLASSIFICATION	0.0014685997674629711	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999844487181418	WITHOUT_CLASSIFICATION	1.5551281858187919E-4	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992037407771621	WITHOUT_CLASSIFICATION	7.962592228378437E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9993674876619647	WITHOUT_CLASSIFICATION	6.325123380352733E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999702809232373	WITHOUT_CLASSIFICATION	2.971907676270295E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997786617992873	WITHOUT_CLASSIFICATION	2.2133820071268902E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999799595713752	WITHOUT_CLASSIFICATION	2.0040428624843122E-5	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999924942392524	WITHOUT_CLASSIFICATION	7.505760747557718E-6	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9997467622289256	WITHOUT_CLASSIFICATION	2.5323777107446623E-4	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9996179079343833	WITHOUT_CLASSIFICATION	3.820920656167463E-4	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999296117942207	WITHOUT_CLASSIFICATION	7.038820577932758E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997973334703075	WITHOUT_CLASSIFICATION	2.026665296924673E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999011389096822	WITHOUT_CLASSIFICATION	9.886109031767707E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999382675967178	WITHOUT_CLASSIFICATION	6.173240328228834E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999466542307878	WITHOUT_CLASSIFICATION	5.334576921218713E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999945959310542	WITHOUT_CLASSIFICATION	5.4040689457950195E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999867626804902	WITHOUT_CLASSIFICATION	1.323731950979147E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9993325299775929	WITHOUT_CLASSIFICATION	6.674700224069923E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998591832006422	WITHOUT_CLASSIFICATION	1.408167993578984E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999833130859911	WITHOUT_CLASSIFICATION	1.6686914008917393E-5	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999983496064807	WITHOUT_CLASSIFICATION	1.6503935193057256E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9995196981850208	WITHOUT_CLASSIFICATION	4.8030181497905737E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9992917909315319	WITHOUT_CLASSIFICATION	7.082090684681948E-4	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993366388986487	WITHOUT_CLASSIFICATION	6.633611013513289E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999989865250589	WITHOUT_CLASSIFICATION	1.013474941109176E-5	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996553826326928	WITHOUT_CLASSIFICATION	3.446173673071298E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999324298623081	WITHOUT_CLASSIFICATION	6.757013769190313E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9997071955322812	WITHOUT_CLASSIFICATION	2.92804467718812E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9975452237304484	WITHOUT_CLASSIFICATION	0.002454776269551575	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9995086140945126	WITHOUT_CLASSIFICATION	4.913859054872649E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999665159014075	WITHOUT_CLASSIFICATION	3.348409859250394E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999895404004924	WITHOUT_CLASSIFICATION	1.0459599507627177E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9985537760562958	WITHOUT_CLASSIFICATION	0.0014462239437042354	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9985537760562958	WITHOUT_CLASSIFICATION	0.0014462239437042354	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999674682288378	WITHOUT_CLASSIFICATION	3.253177116233482E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998238217824438	WITHOUT_CLASSIFICATION	1.7617821755626928E-4	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999083239576078	WITHOUT_CLASSIFICATION	9.16760423922414E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998909651806782	WITHOUT_CLASSIFICATION	1.0903481932173838E-4	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998712520203112	WITHOUT_CLASSIFICATION	1.2874797968881504E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998431261365311	WITHOUT_CLASSIFICATION	1.5687386346878833E-4	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999491389361048	WITHOUT_CLASSIFICATION	5.08610638952285E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9983981307135857	WITHOUT_CLASSIFICATION	0.0016018692864143331	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9983981307135857	WITHOUT_CLASSIFICATION	0.0016018692864143331	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9990366871710973	WITHOUT_CLASSIFICATION	9.633128289026196E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999969669866263	WITHOUT_CLASSIFICATION	3.0330133737026464E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999040075406616	WITHOUT_CLASSIFICATION	9.599245933842534E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997224012072328	WITHOUT_CLASSIFICATION	2.775987927672753E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997224012072328	WITHOUT_CLASSIFICATION	2.775987927672753E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997224012072328	WITHOUT_CLASSIFICATION	2.775987927672753E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998892880525668	WITHOUT_CLASSIFICATION	1.1071194743310833E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999929201750132	WITHOUT_CLASSIFICATION	7.079824986797059E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999989496335683	WITHOUT_CLASSIFICATION	1.0503664316995876E-5	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999082722445946	WITHOUT_CLASSIFICATION	9.172775540539432E-5	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999748566500222	WITHOUT_CLASSIFICATION	2.5143349977802204E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999907193388122	WITHOUT_CLASSIFICATION	9.280661187705577E-6	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999742269396978	WITHOUT_CLASSIFICATION	2.5773060302105965E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.5320188021953506	WITHOUT_CLASSIFICATION	0.4679811978046495	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999718355372577	WITHOUT_CLASSIFICATION	2.8164462742427764E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999318878588003	WITHOUT_CLASSIFICATION	6.811214119969766E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999662374303399	WITHOUT_CLASSIFICATION	3.3762569660046293E-5	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9966648195937722	WITHOUT_CLASSIFICATION	0.003335180406227947	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999815152809773	WITHOUT_CLASSIFICATION	1.8484719022554757E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999997367659761	WITHOUT_CLASSIFICATION	2.632340238930328E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999952020717493	WITHOUT_CLASSIFICATION	4.79792825064398E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999727183842789	WITHOUT_CLASSIFICATION	2.7281615721137618E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998478853773897	WITHOUT_CLASSIFICATION	1.5211462261033838E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9985537760562958	WITHOUT_CLASSIFICATION	0.0014462239437042354	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999639715389921	WITHOUT_CLASSIFICATION	3.6028461007936105E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.990968981023185	WITHOUT_CLASSIFICATION	0.009031018976814954	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999641594273277	WITHOUT_CLASSIFICATION	3.584057267220512E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999523090748915	WITHOUT_CLASSIFICATION	4.76909251084843E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999548038949384	WITHOUT_CLASSIFICATION	4.5196105061682626E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998382972776763	WITHOUT_CLASSIFICATION	1.6170272232377906E-4	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999904747143873	WITHOUT_CLASSIFICATION	9.525285612681015E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9996729972743849	WITHOUT_CLASSIFICATION	3.270027256151325E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997149473261403	WITHOUT_CLASSIFICATION	2.850526738596407E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998228484852038	WITHOUT_CLASSIFICATION	1.7715151479614423E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997032921707958	WITHOUT_CLASSIFICATION	2.9670782920431025E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999760905220634	WITHOUT_CLASSIFICATION	2.3909477936654033E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999572245767648	WITHOUT_CLASSIFICATION	4.2775423235252884E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999651412794093	WITHOUT_CLASSIFICATION	3.485872059069471E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999829941266818	WITHOUT_CLASSIFICATION	1.7005873318208803E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9859630393733501	WITHOUT_CLASSIFICATION	0.01403696062664984	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999287006115302	WITHOUT_CLASSIFICATION	7.12993884697873E-5	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999795562200614	WITHOUT_CLASSIFICATION	2.044377993857881E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999803001943111	WITHOUT_CLASSIFICATION	1.9699805688990102E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999803001943111	WITHOUT_CLASSIFICATION	1.9699805688990102E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998938788011239	WITHOUT_CLASSIFICATION	1.0612119887619863E-4	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997378337924574	WITHOUT_CLASSIFICATION	2.6216620754263925E-4	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998923091729778	WITHOUT_CLASSIFICATION	1.0769082702222415E-4	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999539179004848	WITHOUT_CLASSIFICATION	4.608209951525213E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996568328592789	WITHOUT_CLASSIFICATION	3.4316714072114927E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999921304332485	WITHOUT_CLASSIFICATION	7.86956675140583E-6	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998257971310132	WITHOUT_CLASSIFICATION	1.7420286898676456E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998993770114806	WITHOUT_CLASSIFICATION	1.0062298851948838E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999322517742013	WITHOUT_CLASSIFICATION	6.774822579867025E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999053876773754	WITHOUT_CLASSIFICATION	9.461232262467807E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9989216226973462	WITHOUT_CLASSIFICATION	0.001078377302653826	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993399474628275	WITHOUT_CLASSIFICATION	6.600525371724806E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999130804165695	WITHOUT_CLASSIFICATION	8.691958343060824E-5	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9997238077524104	WITHOUT_CLASSIFICATION	2.761922475895258E-4	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999924213742974	WITHOUT_CLASSIFICATION	7.578625702514125E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995876147825333	WITHOUT_CLASSIFICATION	4.123852174666209E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998304170464992	WITHOUT_CLASSIFICATION	1.695829535007694E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998304170464992	WITHOUT_CLASSIFICATION	1.695829535007694E-4	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998119229477515	WITHOUT_CLASSIFICATION	1.8807705224864758E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999959271604781	WITHOUT_CLASSIFICATION	4.072839521921348E-6	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9992506042384941	WITHOUT_CLASSIFICATION	7.493957615057717E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9992506042384941	WITHOUT_CLASSIFICATION	7.493957615057717E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9995546882217026	WITHOUT_CLASSIFICATION	4.4531177829742823E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998248461856795	WITHOUT_CLASSIFICATION	1.751538143205694E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997968374013467	WITHOUT_CLASSIFICATION	2.0316259865326087E-4	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984496935779729	WITHOUT_CLASSIFICATION	0.0015503064220271788	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999091178771471	WITHOUT_CLASSIFICATION	9.088212285288768E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9994666016436975	WITHOUT_CLASSIFICATION	5.333983563024578E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999297082288837	WITHOUT_CLASSIFICATION	7.02917711163201E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984496935779729	WITHOUT_CLASSIFICATION	0.0015503064220271788	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9971452942214861	WITHOUT_CLASSIFICATION	0.0028547057785139112	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997775362013811	WITHOUT_CLASSIFICATION	2.2246379861891866E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999270479697105	WITHOUT_CLASSIFICATION	7.295203028955006E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998544296023089	WITHOUT_CLASSIFICATION	1.45570397691239E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9997933549332143	WITHOUT_CLASSIFICATION	2.066450667856237E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999819536752652	WITHOUT_CLASSIFICATION	1.8046324734676042E-5	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999504986977518	WITHOUT_CLASSIFICATION	4.950130224814624E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9998521548565485	WITHOUT_CLASSIFICATION	1.4784514345151428E-4	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993042927761593	WITHOUT_CLASSIFICATION	6.9570722384081E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999750112097603	WITHOUT_CLASSIFICATION	2.4988790239698945E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999527825425338	WITHOUT_CLASSIFICATION	4.7217457466055785E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997834946711333	WITHOUT_CLASSIFICATION	2.1650532886668681E-4	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997642552530561	WITHOUT_CLASSIFICATION	2.357447469439349E-4	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999816586161635	WITHOUT_CLASSIFICATION	1.8341383836521086E-5	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999637555171706	WITHOUT_CLASSIFICATION	3.624448282937093E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999875791320032	WITHOUT_CLASSIFICATION	1.242086799692874E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998600263152658	WITHOUT_CLASSIFICATION	1.3997368473422168E-4	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9996330577946245	WITHOUT_CLASSIFICATION	3.6694220537552744E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996330577946245	WITHOUT_CLASSIFICATION	3.6694220537552744E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999504986977518	WITHOUT_CLASSIFICATION	4.950130224814624E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9970164841886207	WITHOUT_CLASSIFICATION	0.002983515811379365	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9988648230148125	WITHOUT_CLASSIFICATION	0.001135176985187483	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998445895985141	WITHOUT_CLASSIFICATION	1.5541040148593562E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999582827857937	WITHOUT_CLASSIFICATION	4.171721420630478E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999704780397599	WITHOUT_CLASSIFICATION	2.9521960240137707E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999961903328185	WITHOUT_CLASSIFICATION	3.80966718149705E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9998759353336255	WITHOUT_CLASSIFICATION	1.2406466637458768E-4	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998572701075803	WITHOUT_CLASSIFICATION	1.427298924198071E-4	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999346988466654	WITHOUT_CLASSIFICATION	6.530115333459623E-5	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998844147800738	WITHOUT_CLASSIFICATION	1.1558521992609574E-4	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999829768268994	WITHOUT_CLASSIFICATION	1.702317310054165E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9981461453678124	WITHOUT_CLASSIFICATION	0.0018538546321876003	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9990637905582483	WITHOUT_CLASSIFICATION	9.362094417516896E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999761132892503	WITHOUT_CLASSIFICATION	2.3886710749694418E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998581543791967	WITHOUT_CLASSIFICATION	1.4184562080339787E-4	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999047594147691	WITHOUT_CLASSIFICATION	9.524058523088024E-5	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999811882732149	WITHOUT_CLASSIFICATION	1.881172678507836E-5	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998567358076402	WITHOUT_CLASSIFICATION	1.4326419235965318E-4	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999491407004512	WITHOUT_CLASSIFICATION	5.085929954896037E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999949997859827	WITHOUT_CLASSIFICATION	5.000214017311857E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999326414405931	WITHOUT_CLASSIFICATION	6.735855940678377E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999214496859249	WITHOUT_CLASSIFICATION	7.855031407518731E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999155155304873	WITHOUT_CLASSIFICATION	8.448446951271405E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999840368412352	WITHOUT_CLASSIFICATION	1.596315876481519E-5	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999998363732512	WITHOUT_CLASSIFICATION	1.6362674879741563E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999098867464417	WITHOUT_CLASSIFICATION	9.011325355828684E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999556956926089	WITHOUT_CLASSIFICATION	4.4304307391163455E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999602812960887	WITHOUT_CLASSIFICATION	3.9718703911232974E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999907517953798	WITHOUT_CLASSIFICATION	9.248204620302068E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.99870101677032	WITHOUT_CLASSIFICATION	0.0012989832296801413	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998581543791967	WITHOUT_CLASSIFICATION	1.4184562080339787E-4	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999275730456287	WITHOUT_CLASSIFICATION	7.242695437130306E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997993330085666	WITHOUT_CLASSIFICATION	2.0066699143344422E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999681589809403	WITHOUT_CLASSIFICATION	3.18410190597767E-5	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997357130871674	WITHOUT_CLASSIFICATION	2.6428691283271493E-4	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9926868325503254	WITHOUT_CLASSIFICATION	0.0073131674496745205	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999601355888379	WITHOUT_CLASSIFICATION	3.986441116221085E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9998570788193	WITHOUT_CLASSIFICATION	1.429211806999231E-4	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998130472161862	WITHOUT_CLASSIFICATION	1.8695278381381932E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9982040336357539	WITHOUT_CLASSIFICATION	0.001795966364246031	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999765643810128	WITHOUT_CLASSIFICATION	2.3435618987222628E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999513520259411	WITHOUT_CLASSIFICATION	4.864797405898238E-5	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8886141238114402	WITHOUT_CLASSIFICATION	0.11138587618855973	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9995447306511036	WITHOUT_CLASSIFICATION	4.5526934889636E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9991028907378	WITHOUT_CLASSIFICATION	8.971092621999563E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998397387415986	WITHOUT_CLASSIFICATION	1.6026125840136145E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.990980606793397	WITHOUT_CLASSIFICATION	0.009019393206603003	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995668440300304	WITHOUT_CLASSIFICATION	4.3315596996960725E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999770678468133	WITHOUT_CLASSIFICATION	2.2932153186643265E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997906588360528	WITHOUT_CLASSIFICATION	2.0934116394724574E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9992966062197706	WITHOUT_CLASSIFICATION	7.033937802295204E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999091178771471	WITHOUT_CLASSIFICATION	9.088212285288768E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999998810928974	WITHOUT_CLASSIFICATION	1.1890710258937131E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998581543791967	WITHOUT_CLASSIFICATION	1.4184562080339787E-4	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999684729568548	WITHOUT_CLASSIFICATION	3.152704314520182E-5	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997180946307251	WITHOUT_CLASSIFICATION	2.819053692748742E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999492135921351	WITHOUT_CLASSIFICATION	5.07864078648626E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999491327949698	WITHOUT_CLASSIFICATION	5.086720503016929E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999322928102439	WITHOUT_CLASSIFICATION	6.770718975611616E-5	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999937346512822	WITHOUT_CLASSIFICATION	6.265348717786534E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994726298818125	WITHOUT_CLASSIFICATION	5.273701181875085E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999096052566389	WITHOUT_CLASSIFICATION	9.039474336122375E-5	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.8488835836737179	WITHOUT_CLASSIFICATION	0.15111641632628212	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997138272927418	WITHOUT_CLASSIFICATION	2.86172707258138E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998627468604134	WITHOUT_CLASSIFICATION	1.3725313958666058E-4	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999778232045947	WITHOUT_CLASSIFICATION	2.2176795405372276E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998982799616647	WITHOUT_CLASSIFICATION	1.017200383352763E-4	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998982799616647	WITHOUT_CLASSIFICATION	1.017200383352763E-4	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999897332462798	WITHOUT_CLASSIFICATION	1.0266753720161899E-5	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996638846014819	WITHOUT_CLASSIFICATION	3.361153985180734E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999938123594246	WITHOUT_CLASSIFICATION	6.187640575357372E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999919494723356	WITHOUT_CLASSIFICATION	8.050527664446424E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999834740091745	WITHOUT_CLASSIFICATION	1.6525990825466096E-5	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999683103031317	WITHOUT_CLASSIFICATION	3.168969686831601E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999192572573088	WITHOUT_CLASSIFICATION	8.074274269117003E-5	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999490478573824	WITHOUT_CLASSIFICATION	5.095214261760002E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9993461010747642	WITHOUT_CLASSIFICATION	6.538989252358924E-4	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998927204950125	WITHOUT_CLASSIFICATION	1.0727950498745313E-4	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9996055002560885	WITHOUT_CLASSIFICATION	3.9449974391138354E-4	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996055002560885	WITHOUT_CLASSIFICATION	3.9449974391138354E-4	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9960407437596382	WITHOUT_CLASSIFICATION	0.003959256240361733	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999585483475499	WITHOUT_CLASSIFICATION	4.1451652450092095E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9992734389802043	WITHOUT_CLASSIFICATION	7.265610197957245E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999275850553292	WITHOUT_CLASSIFICATION	7.241494467082407E-5	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999639242963231	WITHOUT_CLASSIFICATION	3.607570367688616E-5	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9993779539361495	WITHOUT_CLASSIFICATION	6.220460638506035E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9995992388426345	WITHOUT_CLASSIFICATION	4.0076115736555464E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9998104451844148	WITHOUT_CLASSIFICATION	1.8955481558523843E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999208215197667	WITHOUT_CLASSIFICATION	7.917848023337074E-5	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9996650831297871	WITHOUT_CLASSIFICATION	3.349168702128936E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999982164825644	WITHOUT_CLASSIFICATION	1.7835174356029917E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175101168012	WITHOUT_CLASSIFICATION	1.8248988319884255E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997804455689178	WITHOUT_CLASSIFICATION	2.1955443108214704E-4	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9978420485585248	WITHOUT_CLASSIFICATION	0.0021579514414752244	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993531415651388	WITHOUT_CLASSIFICATION	6.468584348611006E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998921987397126	WITHOUT_CLASSIFICATION	1.0780126028738733E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.999925730655414	WITHOUT_CLASSIFICATION	7.426934458592988E-5	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9995297026309057	WITHOUT_CLASSIFICATION	4.7029736909443763E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998002570320331	WITHOUT_CLASSIFICATION	1.9974296796684707E-4	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999825355333034	WITHOUT_CLASSIFICATION	1.7464466696638082E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997310910018362	WITHOUT_CLASSIFICATION	2.6890899816381706E-4	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997709307108577	WITHOUT_CLASSIFICATION	2.2906928914236973E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999835559658647	WITHOUT_CLASSIFICATION	1.644403413528268E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999751120323749	WITHOUT_CLASSIFICATION	2.4887967625174692E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9991814457921641	WITHOUT_CLASSIFICATION	8.185542078359755E-4	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995462183613242	WITHOUT_CLASSIFICATION	4.5378163867579297E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999722778081628	WITHOUT_CLASSIFICATION	2.7722191837200012E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998681853873647	WITHOUT_CLASSIFICATION	1.3181461263534334E-4	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997539056997108	WITHOUT_CLASSIFICATION	2.460943002892079E-4	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9995621985072997	WITHOUT_CLASSIFICATION	4.378014927003033E-4	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999316765422409	WITHOUT_CLASSIFICATION	6.832345775915026E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999944931384942	WITHOUT_CLASSIFICATION	5.5068615058214265E-6	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998138047747506	WITHOUT_CLASSIFICATION	1.8619522524945738E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997266241281604	WITHOUT_CLASSIFICATION	2.733758718396832E-4	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999989074895642	WITHOUT_CLASSIFICATION	1.0925104357790342E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996262296693086	WITHOUT_CLASSIFICATION	3.7377033069133797E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997453999117188	WITHOUT_CLASSIFICATION	2.54600088281138E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.99998673053759	WITHOUT_CLASSIFICATION	1.3269462409930646E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9992747479870089	WITHOUT_CLASSIFICATION	7.252520129910916E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999048674095606	WITHOUT_CLASSIFICATION	9.513259043931788E-5	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999868438064924	WITHOUT_CLASSIFICATION	1.31561935076116E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999265276190447	WITHOUT_CLASSIFICATION	7.347238095544116E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997662450007548	WITHOUT_CLASSIFICATION	2.3375499924508785E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999201343303764	WITHOUT_CLASSIFICATION	7.986566962356574E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997183704482405	WITHOUT_CLASSIFICATION	2.8162955175950124E-4	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998634050770969	WITHOUT_CLASSIFICATION	1.3659492290312428E-4	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999489842893282	WITHOUT_CLASSIFICATION	5.101571067185074E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999984254669887	WITHOUT_CLASSIFICATION	1.5745330112910693E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9988766019194651	WITHOUT_CLASSIFICATION	0.0011233980805349056	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997833010952382	WITHOUT_CLASSIFICATION	2.166989047617539E-4	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999761663411615	WITHOUT_CLASSIFICATION	2.3833658838600074E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999172095524098	WITHOUT_CLASSIFICATION	8.27904475901394E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999221054451071	WITHOUT_CLASSIFICATION	7.789455489293183E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999172095524098	WITHOUT_CLASSIFICATION	8.27904475901394E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9970250703421847	WITHOUT_CLASSIFICATION	0.0029749296578153207	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997607973634243	WITHOUT_CLASSIFICATION	2.3920263657578418E-4	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998556034198725	WITHOUT_CLASSIFICATION	1.4439658012754098E-4	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999366915585863	WITHOUT_CLASSIFICATION	6.330844141357881E-5	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998969506926588	WITHOUT_CLASSIFICATION	1.0304930734115447E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998556034198725	WITHOUT_CLASSIFICATION	1.4439658012754098E-4	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999802363986937	WITHOUT_CLASSIFICATION	1.976360130633632E-5	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9996635614682237	WITHOUT_CLASSIFICATION	3.3643853177638773E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999874596189884	WITHOUT_CLASSIFICATION	1.2540381011577794E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997322491268712	WITHOUT_CLASSIFICATION	2.677508731287381E-4	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999725909864712	WITHOUT_CLASSIFICATION	2.7409013528763784E-5	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999557646353894	WITHOUT_CLASSIFICATION	4.423536461064072E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999989983579009	WITHOUT_CLASSIFICATION	1.0016420991017028E-5	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9991376300086109	WITHOUT_CLASSIFICATION	8.623699913891629E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998984082169249	WITHOUT_CLASSIFICATION	1.0159178307510862E-4	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.99990442707723	WITHOUT_CLASSIFICATION	9.557292276999067E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999831761565418	WITHOUT_CLASSIFICATION	1.6823843458205374E-4	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999291375423612	WITHOUT_CLASSIFICATION	7.086245763884343E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998756684499741	WITHOUT_CLASSIFICATION	1.2433155002578575E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999119792064031	WITHOUT_CLASSIFICATION	8.80207935968395E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999742736733187	WITHOUT_CLASSIFICATION	2.572632668127E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999342576318969	WITHOUT_CLASSIFICATION	6.574236810310674E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9993250339769928	WITHOUT_CLASSIFICATION	6.749660230071568E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9921532179816323	WITHOUT_CLASSIFICATION	0.007846782018367722	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998430820336325	WITHOUT_CLASSIFICATION	1.5691796636745347E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9977799718377417	WITHOUT_CLASSIFICATION	0.0022200281622582765	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9998356449040862	WITHOUT_CLASSIFICATION	1.643550959138897E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9998416231786411	WITHOUT_CLASSIFICATION	1.583768213590086E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9992461200878724	WITHOUT_CLASSIFICATION	7.538799121276438E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9959485156837282	WITHOUT_CLASSIFICATION	0.004051484316271716	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9977675138511238	WITHOUT_CLASSIFICATION	0.0022324861488761272	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9943965458355443	WITHOUT_CLASSIFICATION	0.005603454164455724	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999899114521462	WITHOUT_CLASSIFICATION	1.0088547853758579E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9998407321050217	WITHOUT_CLASSIFICATION	1.5926789497836395E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998490054236039	WITHOUT_CLASSIFICATION	1.5099457639609055E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999937825464904	WITHOUT_CLASSIFICATION	6.217453509654844E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9291870934980124	WITHOUT_CLASSIFICATION	0.07081290650198756	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9977799718377417	WITHOUT_CLASSIFICATION	0.0022200281622582765	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999611515040148	WITHOUT_CLASSIFICATION	3.8848495985271535E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998444561332898	WITHOUT_CLASSIFICATION	1.555438667102427E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9988372472306005	WITHOUT_CLASSIFICATION	0.001162752769399478	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998521400963096	WITHOUT_CLASSIFICATION	1.4785990369034594E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999805928634469	WITHOUT_CLASSIFICATION	1.940713655316049E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998492403198256	WITHOUT_CLASSIFICATION	1.5075968017450682E-4	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9987168724876943	WITHOUT_CLASSIFICATION	0.001283127512305747	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998430172055317	WITHOUT_CLASSIFICATION	1.5698279446833057E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9986317680748187	WITHOUT_CLASSIFICATION	0.001368231925181327	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9998523425940508	WITHOUT_CLASSIFICATION	1.4765740594917094E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999756748238706	WITHOUT_CLASSIFICATION	2.4325176129357367E-5	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998860114031406	WITHOUT_CLASSIFICATION	1.1398859685949517E-4	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997331201724023	WITHOUT_CLASSIFICATION	2.6687982759763867E-4	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999346152628131	WITHOUT_CLASSIFICATION	6.538473718685736E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999784833913728	WITHOUT_CLASSIFICATION	2.1516608627194877E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999810715855272	WITHOUT_CLASSIFICATION	1.8928414472807362E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9908100384409849	WITHOUT_CLASSIFICATION	0.009189961559015143	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9996650212848689	WITHOUT_CLASSIFICATION	3.3497871513103966E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957450398552588	WITHOUT_CLASSIFICATION	0.004254960144741221	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9978064936157547	WITHOUT_CLASSIFICATION	0.002193506384245311	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9993779496049571	WITHOUT_CLASSIFICATION	6.22050395042957E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9993779496049571	WITHOUT_CLASSIFICATION	6.22050395042957E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998935303268731	WITHOUT_CLASSIFICATION	1.0646967312687813E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9993779496049571	WITHOUT_CLASSIFICATION	6.22050395042957E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9993779496049571	WITHOUT_CLASSIFICATION	6.22050395042957E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9995987376678578	WITHOUT_CLASSIFICATION	4.012623321422528E-4	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997014227977838	WITHOUT_CLASSIFICATION	2.985772022162477E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998149702131013	WITHOUT_CLASSIFICATION	1.8502978689870518E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998149702131013	WITHOUT_CLASSIFICATION	1.8502978689870518E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9911228145772644	WITHOUT_CLASSIFICATION	0.008877185422735547	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9997469419225828	WITHOUT_CLASSIFICATION	2.5305807741715517E-4	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996744492293422	WITHOUT_CLASSIFICATION	3.255507706577615E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9995219355709327	WITHOUT_CLASSIFICATION	4.780644290672807E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999809848083351	WITHOUT_CLASSIFICATION	1.9015191664894905E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998358630185429	WITHOUT_CLASSIFICATION	1.6413698145723623E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997936278693634	WITHOUT_CLASSIFICATION	2.0637213063661404E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999352633926866	WITHOUT_CLASSIFICATION	6.473660731341406E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998602634532658	WITHOUT_CLASSIFICATION	1.3973654673415573E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9991677139255702	WITHOUT_CLASSIFICATION	8.322860744296389E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999817264243249	WITHOUT_CLASSIFICATION	1.8273575675092888E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9996225208419923	WITHOUT_CLASSIFICATION	3.774791580076771E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99994298006722	WITHOUT_CLASSIFICATION	5.701993277993302E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9990936458956923	WITHOUT_CLASSIFICATION	9.063541043078107E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998535613311509	WITHOUT_CLASSIFICATION	1.4643866884916497E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9988969265951215	WITHOUT_CLASSIFICATION	0.0011030734048785048	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9996658828896245	WITHOUT_CLASSIFICATION	3.3411711037541826E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999808348047143	WITHOUT_CLASSIFICATION	1.91651952855668E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99994298006722	WITHOUT_CLASSIFICATION	5.701993277993302E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9998356449040862	WITHOUT_CLASSIFICATION	1.643550959138897E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9998628126178515	WITHOUT_CLASSIFICATION	1.3718738214850591E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9968009257944582	WITHOUT_CLASSIFICATION	0.003199074205541698	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9967508842264025	WITHOUT_CLASSIFICATION	0.0032491157735974985	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9998053491170792	WITHOUT_CLASSIFICATION	1.9465088292082615E-4	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999794337595942	WITHOUT_CLASSIFICATION	2.0566240405775713E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999576115561568	WITHOUT_CLASSIFICATION	4.23884438431844E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999758067478454	WITHOUT_CLASSIFICATION	2.4193252154579664E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999717333494254	WITHOUT_CLASSIFICATION	2.8266650574688807E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999915889636702	WITHOUT_CLASSIFICATION	8.411036329638965E-6	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998032324213011	WITHOUT_CLASSIFICATION	1.9676757869891193E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9995744965551535	WITHOUT_CLASSIFICATION	4.255034448464846E-4	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9994210695286458	WITHOUT_CLASSIFICATION	5.789304713541129E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998440686845902	WITHOUT_CLASSIFICATION	1.5593131540968537E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9988032850455273	WITHOUT_CLASSIFICATION	0.001196714954472664	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999756667915647	WITHOUT_CLASSIFICATION	2.4333208435404576E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999765958758317	WITHOUT_CLASSIFICATION	2.340412416831664E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999652319515154	WITHOUT_CLASSIFICATION	3.476804848458481E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998685192219068	WITHOUT_CLASSIFICATION	1.3148077809324417E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999445629162964	WITHOUT_CLASSIFICATION	5.543708370358786E-5	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9991088628122242	WITHOUT_CLASSIFICATION	8.911371877757052E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999726002547852	WITHOUT_CLASSIFICATION	2.7399745214802095E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999110549453883	WITHOUT_CLASSIFICATION	8.894505461163146E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999717333494254	WITHOUT_CLASSIFICATION	2.8266650574688807E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998236771112365	WITHOUT_CLASSIFICATION	1.7632288876345985E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9998557520414909	WITHOUT_CLASSIFICATION	1.442479585090937E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9994866563408635	WITHOUT_CLASSIFICATION	5.133436591365407E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999561653711344	WITHOUT_CLASSIFICATION	4.383462886550958E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998207124458992	WITHOUT_CLASSIFICATION	1.7928755410077054E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9997705553929742	WITHOUT_CLASSIFICATION	2.2944460702569385E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9998896490129972	WITHOUT_CLASSIFICATION	1.1035098700288966E-4	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9997705553929742	WITHOUT_CLASSIFICATION	2.2944460702569385E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9998001177325879	WITHOUT_CLASSIFICATION	1.998822674121122E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999878625646808	WITHOUT_CLASSIFICATION	1.2137435319274927E-5	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998262256308705	WITHOUT_CLASSIFICATION	1.7377436912945898E-4	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9995117148720278	WITHOUT_CLASSIFICATION	4.882851279720424E-4	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9996531081345866	WITHOUT_CLASSIFICATION	3.4689186541340445E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9994292102619877	WITHOUT_CLASSIFICATION	5.707897380122631E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9983279329429056	WITHOUT_CLASSIFICATION	0.0016720670570943411	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999878625646808	WITHOUT_CLASSIFICATION	1.2137435319274927E-5	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999961804973347	WITHOUT_CLASSIFICATION	3.8195026651733456E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9981106124882119	WITHOUT_CLASSIFICATION	0.0018893875117881485	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998258186024156	WITHOUT_CLASSIFICATION	1.7418139758430698E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999682935446406	WITHOUT_CLASSIFICATION	3.170645535943076E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999662296862254	WITHOUT_CLASSIFICATION	3.3770313774598945E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998603040501477	WITHOUT_CLASSIFICATION	1.3969594985236832E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9997281812459216	WITHOUT_CLASSIFICATION	2.7181875407841625E-4	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214004462298	WITHOUT_CLASSIFICATION	1.7859955377028922E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998414199199542	WITHOUT_CLASSIFICATION	1.5858008004578778E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565118309347	WITHOUT_CLASSIFICATION	1.434881690651898E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565118309347	WITHOUT_CLASSIFICATION	1.434881690651898E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565118309347	WITHOUT_CLASSIFICATION	1.434881690651898E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999186084322886	WITHOUT_CLASSIFICATION	8.139156771140718E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999186084322886	WITHOUT_CLASSIFICATION	8.139156771140718E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9996805289033757	WITHOUT_CLASSIFICATION	3.1947109662427454E-4	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.99998612272927	WITHOUT_CLASSIFICATION	1.3877270729985326E-5	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999445177605368	WITHOUT_CLASSIFICATION	5.548223946324006E-5	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999591212144149	WITHOUT_CLASSIFICATION	4.087878558518543E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9925171638216052	WITHOUT_CLASSIFICATION	0.007482836178394854	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998155104425882	WITHOUT_CLASSIFICATION	1.844895574117831E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998509743008825	WITHOUT_CLASSIFICATION	1.490256991174028E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9998025768875431	WITHOUT_CLASSIFICATION	1.9742311245685612E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176079323889	WITHOUT_CLASSIFICATION	8.239206761097679E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998155104425882	WITHOUT_CLASSIFICATION	1.844895574117831E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998509743008825	WITHOUT_CLASSIFICATION	1.490256991174028E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999421115337201	WITHOUT_CLASSIFICATION	5.7888466279932036E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9989067365596538	WITHOUT_CLASSIFICATION	0.0010932634403462344	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999839159644767	WITHOUT_CLASSIFICATION	1.6084035523281938E-5	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9997542394202141	WITHOUT_CLASSIFICATION	2.4576057978594124E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999831450200063	WITHOUT_CLASSIFICATION	1.6854979993703232E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999807576723977	WITHOUT_CLASSIFICATION	1.924232760230445E-4	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999983307595658	WITHOUT_CLASSIFICATION	1.6692404342085207E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9993438287739228	WITHOUT_CLASSIFICATION	6.561712260770939E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9878231082701473	WITHOUT_CLASSIFICATION	0.012176891729852778	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999690243753027	WITHOUT_CLASSIFICATION	3.0975624697298916E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999477447652976	WITHOUT_CLASSIFICATION	5.2255234702402106E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998294388115772	WITHOUT_CLASSIFICATION	1.7056118842280252E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996714109742373	WITHOUT_CLASSIFICATION	3.285890257627E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999313779044021	WITHOUT_CLASSIFICATION	6.86220955978479E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999476768145851	WITHOUT_CLASSIFICATION	5.232318541496358E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9980967137011135	WITHOUT_CLASSIFICATION	0.0019032862988864238	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999992835342487	WITHOUT_CLASSIFICATION	7.164657512058139E-7	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9991864990436403	WITHOUT_CLASSIFICATION	8.135009563596204E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999938359162667	WITHOUT_CLASSIFICATION	6.164083733336273E-6	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999755222266333	WITHOUT_CLASSIFICATION	2.447777336669828E-5	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9840891994380506	WITHOUT_CLASSIFICATION	0.015910800561949382	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999978706613819	WITHOUT_CLASSIFICATION	2.1293386180832644E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176183339428	WITHOUT_CLASSIFICATION	1.8238166605718186E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997962969187146	WITHOUT_CLASSIFICATION	2.0370308128535162E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996328107195478	WITHOUT_CLASSIFICATION	3.6718928045220727E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996328107195478	WITHOUT_CLASSIFICATION	3.6718928045220727E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999783360257243	WITHOUT_CLASSIFICATION	2.1663974275702784E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9985864047589316	WITHOUT_CLASSIFICATION	0.0014135952410683772	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998554112099035	WITHOUT_CLASSIFICATION	1.4458879009657683E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9995707263702825	WITHOUT_CLASSIFICATION	4.292736297174503E-4	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9996848238495767	WITHOUT_CLASSIFICATION	3.1517615042322056E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9998505050015648	WITHOUT_CLASSIFICATION	1.4949499843522766E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999843799382827	WITHOUT_CLASSIFICATION	1.5620061717221255E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999806246704758	WITHOUT_CLASSIFICATION	1.9375329524229464E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9982782929069253	WITHOUT_CLASSIFICATION	0.0017217070930746518	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998771611155148	WITHOUT_CLASSIFICATION	1.2283888448505598E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999878286188464	WITHOUT_CLASSIFICATION	1.2171381153601407E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9952664962282289	WITHOUT_CLASSIFICATION	0.0047335037717711635	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999533016498766	WITHOUT_CLASSIFICATION	4.6698350123305435E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.999517808096664	WITHOUT_CLASSIFICATION	4.821919033360087E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999676229707032	WITHOUT_CLASSIFICATION	3.237702929679131E-5	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999227199032773	WITHOUT_CLASSIFICATION	7.728009672263277E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999878286188464	WITHOUT_CLASSIFICATION	1.2171381153601407E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999878286188464	WITHOUT_CLASSIFICATION	1.2171381153601407E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999876324466783	WITHOUT_CLASSIFICATION	1.2367553321699878E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999385064135027	WITHOUT_CLASSIFICATION	6.149358649729713E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998359538015473	WITHOUT_CLASSIFICATION	1.640461984526754E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997925033913038	WITHOUT_CLASSIFICATION	2.0749660869620089E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999651412794093	WITHOUT_CLASSIFICATION	3.485872059069471E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999476768145851	WITHOUT_CLASSIFICATION	5.232318541496358E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999024694131926	WITHOUT_CLASSIFICATION	9.753058680742718E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999696174210017	WITHOUT_CLASSIFICATION	3.0382578998329324E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999596021366154	WITHOUT_CLASSIFICATION	4.039786338463245E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552571356458	WITHOUT_CLASSIFICATION	1.4474286435417944E-4	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998851327337027	WITHOUT_CLASSIFICATION	1.1486726629736298E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998962782688213	WITHOUT_CLASSIFICATION	1.037217311785798E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997652420963887	WITHOUT_CLASSIFICATION	2.3475790361121595E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997652420963887	WITHOUT_CLASSIFICATION	2.3475790361121595E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997652420963887	WITHOUT_CLASSIFICATION	2.3475790361121595E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997652420963887	WITHOUT_CLASSIFICATION	2.3475790361121595E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998627585015681	WITHOUT_CLASSIFICATION	1.3724149843186978E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.998264595669414	WITHOUT_CLASSIFICATION	0.0017354043305860415	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9925235503651609	WITHOUT_CLASSIFICATION	0.007476449634839051	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999036422194213	WITHOUT_CLASSIFICATION	9.63577805787921E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99982378251678	WITHOUT_CLASSIFICATION	1.7621748321999724E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998688431331578	WITHOUT_CLASSIFICATION	1.311568668422078E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999460797758719	WITHOUT_CLASSIFICATION	5.392022412811933E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999797873851672	WITHOUT_CLASSIFICATION	2.0212614832800275E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999814603451831	WITHOUT_CLASSIFICATION	1.8539654816927345E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998554210871631	WITHOUT_CLASSIFICATION	1.4457891283693535E-4	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997280230162443	WITHOUT_CLASSIFICATION	2.719769837556819E-4	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999537833907299	WITHOUT_CLASSIFICATION	4.6216609270070226E-5	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9998008979686286	WITHOUT_CLASSIFICATION	1.9910203137149865E-4	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999835794228672	WITHOUT_CLASSIFICATION	1.64205771328095E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999835794228672	WITHOUT_CLASSIFICATION	1.64205771328095E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998054053060371	WITHOUT_CLASSIFICATION	1.9459469396290483E-4	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999684099091385	WITHOUT_CLASSIFICATION	3.159009086148202E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999845054056077	WITHOUT_CLASSIFICATION	1.5494594392293202E-5	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999758794815773	WITHOUT_CLASSIFICATION	2.412051842270155E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9995484204329593	WITHOUT_CLASSIFICATION	4.515795670405875E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565118309347	WITHOUT_CLASSIFICATION	1.434881690651898E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9988462432873801	WITHOUT_CLASSIFICATION	0.0011537567126198383	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998692002369653	WITHOUT_CLASSIFICATION	1.307997630346316E-4	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999962254497293	WITHOUT_CLASSIFICATION	3.774550270703648E-5	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9948380211302815	WITHOUT_CLASSIFICATION	0.005161978869718509	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998198374921768	WITHOUT_CLASSIFICATION	1.8016250782304424E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998392138843079	WITHOUT_CLASSIFICATION	1.6078611569220216E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999798339188534	WITHOUT_CLASSIFICATION	2.0166081146646233E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998317206305039	WITHOUT_CLASSIFICATION	1.6827936949617294E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999471890971252	WITHOUT_CLASSIFICATION	5.281090287468508E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9974737917768446	WITHOUT_CLASSIFICATION	0.0025262082231553794	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9979466677400826	WITHOUT_CLASSIFICATION	0.0020533322599174736	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998219712786341	WITHOUT_CLASSIFICATION	1.780287213657747E-4	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999994290029947	WITHOUT_CLASSIFICATION	5.709970052737226E-7	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999951658186981	WITHOUT_CLASSIFICATION	4.834181301879149E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999973484190638	WITHOUT_CLASSIFICATION	2.6515809361463453E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999852200306677	WITHOUT_CLASSIFICATION	1.4779969332262767E-5	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999114250993311	WITHOUT_CLASSIFICATION	8.857490066892866E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999740242015189	WITHOUT_CLASSIFICATION	2.597579848110023E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9914056065725062	WITHOUT_CLASSIFICATION	0.008594393427493841	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998723030263766	WITHOUT_CLASSIFICATION	1.2769697362335732E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999230988964914	WITHOUT_CLASSIFICATION	7.69011035085718E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9972005016747529	WITHOUT_CLASSIFICATION	0.0027994983252471357	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999159935145313	WITHOUT_CLASSIFICATION	8.400648546876037E-5	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998172009789046	WITHOUT_CLASSIFICATION	1.8279902109533277E-4	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997632609604841	WITHOUT_CLASSIFICATION	2.3673903951598637E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999541178345672	WITHOUT_CLASSIFICATION	4.5882165432728116E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9983767926955096	WITHOUT_CLASSIFICATION	0.0016232073044903511	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9978682498551511	WITHOUT_CLASSIFICATION	0.002131750144848934	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999902580925012	WITHOUT_CLASSIFICATION	9.741907498780557E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999222089733839	WITHOUT_CLASSIFICATION	7.77910266161447E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999062397464924	WITHOUT_CLASSIFICATION	9.376025350758386E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.995541998381514	WITHOUT_CLASSIFICATION	0.004458001618485987	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9996953991315878	WITHOUT_CLASSIFICATION	3.04600868412222E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998288361347332	WITHOUT_CLASSIFICATION	1.7116386526682306E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998295690620645	WITHOUT_CLASSIFICATION	1.704309379354486E-4	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.991410337632335	WITHOUT_CLASSIFICATION	0.008589662367665021	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9990937702228858	WITHOUT_CLASSIFICATION	9.062297771141442E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998587669951324	WITHOUT_CLASSIFICATION	1.4123300486760192E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999295909051547	WITHOUT_CLASSIFICATION	7.040909484529985E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995702000253202	WITHOUT_CLASSIFICATION	4.297999746799019E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999486709875263	WITHOUT_CLASSIFICATION	5.132901247383047E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999919699794023	WITHOUT_CLASSIFICATION	8.030020597702279E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9981129757245711	WITHOUT_CLASSIFICATION	0.0018870242754288355	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983795591629653	WITHOUT_CLASSIFICATION	0.0016204408370348213	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9919908312402026	WITHOUT_CLASSIFICATION	0.00800916875979735	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9947722524968926	WITHOUT_CLASSIFICATION	0.0052277475031073176	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999629364362517	WITHOUT_CLASSIFICATION	3.706356374828132E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996646274387245	WITHOUT_CLASSIFICATION	3.353725612753949E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9998200121105522	WITHOUT_CLASSIFICATION	1.7998788944790148E-4	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999987716600025	WITHOUT_CLASSIFICATION	1.2283399974986112E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9994560850558778	WITHOUT_CLASSIFICATION	5.439149441222563E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999706181792527	WITHOUT_CLASSIFICATION	2.938182074735242E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998612214835976	WITHOUT_CLASSIFICATION	1.3877851640242355E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999483850583945	WITHOUT_CLASSIFICATION	5.161494160551947E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9997869757986696	WITHOUT_CLASSIFICATION	2.1302420133049356E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999216835529917	WITHOUT_CLASSIFICATION	7.831644700829494E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999744621689147	WITHOUT_CLASSIFICATION	2.5537831085299895E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9972970026951145	WITHOUT_CLASSIFICATION	0.002702997304885597	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9997598315221676	WITHOUT_CLASSIFICATION	2.4016847783236295E-4	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9990170474416934	WITHOUT_CLASSIFICATION	9.82952558306529E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9995849480733909	WITHOUT_CLASSIFICATION	4.1505192660907424E-4	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998003720709865	WITHOUT_CLASSIFICATION	1.9962792901361616E-4	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999646464351986	WITHOUT_CLASSIFICATION	3.5353564801446625E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999681679500751	WITHOUT_CLASSIFICATION	3.183204992484411E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998660932279546	WITHOUT_CLASSIFICATION	1.339067720453668E-4	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998919743669649	WITHOUT_CLASSIFICATION	1.0802563303510555E-4	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9993727865144787	WITHOUT_CLASSIFICATION	6.272134855212959E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9997634833159832	WITHOUT_CLASSIFICATION	2.3651668401673505E-4	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999491138141837	WITHOUT_CLASSIFICATION	5.0886185816191746E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9982722157638445	WITHOUT_CLASSIFICATION	0.0017277842361554563	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9998871594944857	WITHOUT_CLASSIFICATION	1.128405055143384E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999816185413656	WITHOUT_CLASSIFICATION	1.8381458634395926E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9995328172203483	WITHOUT_CLASSIFICATION	4.671827796517455E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9997977763918359	WITHOUT_CLASSIFICATION	2.022236081640214E-4	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999342576318969	WITHOUT_CLASSIFICATION	6.574236810310674E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999325379297423	WITHOUT_CLASSIFICATION	6.746207025763093E-5	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998310683327127	WITHOUT_CLASSIFICATION	1.689316672872691E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9997039751039998	WITHOUT_CLASSIFICATION	2.9602489600025824E-4	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999830672084996	WITHOUT_CLASSIFICATION	1.6932791500392337E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997622944910486	WITHOUT_CLASSIFICATION	2.3770550895147743E-4	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9989270769918905	WITHOUT_CLASSIFICATION	0.0010729230081095351	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9994389214000654	WITHOUT_CLASSIFICATION	5.610785999346168E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.99667906419621	WITHOUT_CLASSIFICATION	0.0033209358037900373	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998222310838081	WITHOUT_CLASSIFICATION	1.7776891619194986E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999890212557051	WITHOUT_CLASSIFICATION	1.097874429489126E-4	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995156333205417	WITHOUT_CLASSIFICATION	4.8436667945823866E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999776783891321	WITHOUT_CLASSIFICATION	2.2321610867852103E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999907045656401	WITHOUT_CLASSIFICATION	9.29543435990105E-5	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999964457947343	WITHOUT_CLASSIFICATION	3.5542052655835E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999517094472751	WITHOUT_CLASSIFICATION	4.8290552724901594E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999010258744717	WITHOUT_CLASSIFICATION	9.897412552826535E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999783726031645	WITHOUT_CLASSIFICATION	2.1627396835542662E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998602449180138	WITHOUT_CLASSIFICATION	1.3975508198612758E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998602449180138	WITHOUT_CLASSIFICATION	1.3975508198612758E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9989799855752483	WITHOUT_CLASSIFICATION	0.001020014424751766	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9995847888663727	WITHOUT_CLASSIFICATION	4.1521113362735253E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998150852474375	WITHOUT_CLASSIFICATION	1.8491475256256337E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9941935151311075	WITHOUT_CLASSIFICATION	0.005806484868892471	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9995240752577573	WITHOUT_CLASSIFICATION	4.759247422426992E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.935517759301212	WITHOUT_CLASSIFICATION	0.064482240698788	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999287125368113	WITHOUT_CLASSIFICATION	7.128746318869149E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999641611197226	WITHOUT_CLASSIFICATION	3.583888027733914E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9981149468675206	WITHOUT_CLASSIFICATION	0.001885053132479363	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999906779369478	WITHOUT_CLASSIFICATION	9.322063052077987E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997671607243543	WITHOUT_CLASSIFICATION	2.3283927564571257E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998810557572598	WITHOUT_CLASSIFICATION	1.1894424274018366E-4	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999290554341961	WITHOUT_CLASSIFICATION	7.094456580395197E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996118054616078	WITHOUT_CLASSIFICATION	3.881945383922338E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998412879304825	WITHOUT_CLASSIFICATION	1.5871206951745075E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9950849211871025	WITHOUT_CLASSIFICATION	0.004915078812897509	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9950849211871025	WITHOUT_CLASSIFICATION	0.004915078812897509	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9996760732570694	WITHOUT_CLASSIFICATION	3.2392674293055197E-4	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996796172323804	WITHOUT_CLASSIFICATION	3.203827676195442E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999969258145797	WITHOUT_CLASSIFICATION	3.0741854202993064E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998812631405737	WITHOUT_CLASSIFICATION	1.1873685942628307E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999852542480665	WITHOUT_CLASSIFICATION	1.4745751933567122E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.999977482896998	WITHOUT_CLASSIFICATION	2.2517103002029674E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.999977482896998	WITHOUT_CLASSIFICATION	2.2517103002029674E-5	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997854594583973	WITHOUT_CLASSIFICATION	2.1454054160272492E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999823994566032	WITHOUT_CLASSIFICATION	1.7600543396799226E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999903996241731	WITHOUT_CLASSIFICATION	9.600375826904915E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9966959975282037	WITHOUT_CLASSIFICATION	0.0033040024717961576	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998360092276598	WITHOUT_CLASSIFICATION	1.63990772340179E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997762747467362	WITHOUT_CLASSIFICATION	2.2372525326382439E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998478853773897	WITHOUT_CLASSIFICATION	1.5211462261033838E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999878092301022	WITHOUT_CLASSIFICATION	1.219076989778224E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.995864586995535	WITHOUT_CLASSIFICATION	0.004135413004464899	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992037407771621	WITHOUT_CLASSIFICATION	7.962592228378437E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.999945959310542	WITHOUT_CLASSIFICATION	5.4040689457950195E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997055082413988	WITHOUT_CLASSIFICATION	2.9449175860116086E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999955223198326	WITHOUT_CLASSIFICATION	4.477680167405766E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993531415651388	WITHOUT_CLASSIFICATION	6.468584348611006E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9954050811934981	WITHOUT_CLASSIFICATION	0.004594918806501897	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999603057203519	WITHOUT_CLASSIFICATION	3.969427964818866E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.997938298564217	WITHOUT_CLASSIFICATION	0.0020617014357829553	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999550654007626	WITHOUT_CLASSIFICATION	4.493459923724157E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999420391907955	WITHOUT_CLASSIFICATION	5.796080920462445E-5	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998353143635756	WITHOUT_CLASSIFICATION	1.6468563642433153E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9981524903314158	WITHOUT_CLASSIFICATION	0.0018475096685840401	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998395615110832	WITHOUT_CLASSIFICATION	1.6043848891669069E-4	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998967355725048	WITHOUT_CLASSIFICATION	1.0326442749515044E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998972699986106	WITHOUT_CLASSIFICATION	1.0273000138943517E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998893355699384	WITHOUT_CLASSIFICATION	1.106644300616333E-4	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999925828588049	WITHOUT_CLASSIFICATION	7.417141195077516E-6	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9992784367480287	WITHOUT_CLASSIFICATION	7.215632519713268E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998304170464992	WITHOUT_CLASSIFICATION	1.695829535007694E-4	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.998662088395273	WITHOUT_CLASSIFICATION	0.0013379116047269532	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999933929343473	WITHOUT_CLASSIFICATION	6.607065652698186E-5	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9895819173077661	WITHOUT_CLASSIFICATION	0.01041808269223386	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9996741763127553	WITHOUT_CLASSIFICATION	3.2582368724466047E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9994134913323551	WITHOUT_CLASSIFICATION	5.865086676448825E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9998226997219302	WITHOUT_CLASSIFICATION	1.7730027806975104E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999580839593143	WITHOUT_CLASSIFICATION	4.191604068563905E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998591985920112	WITHOUT_CLASSIFICATION	1.408014079886579E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9995293989023081	WITHOUT_CLASSIFICATION	4.7060109769193534E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999431106608999	WITHOUT_CLASSIFICATION	5.688933909999105E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9985897326532415	WITHOUT_CLASSIFICATION	0.0014102673467584841	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9981026035033554	WITHOUT_CLASSIFICATION	0.0018973964966445423	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9997786559402781	WITHOUT_CLASSIFICATION	2.213440597217286E-4	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9980181650745504	WITHOUT_CLASSIFICATION	0.001981834925449601	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998591985920112	WITHOUT_CLASSIFICATION	1.408014079886579E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997933482924681	WITHOUT_CLASSIFICATION	2.0665170753193123E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9995564046294365	WITHOUT_CLASSIFICATION	4.4359537056352726E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999957910526754	WITHOUT_CLASSIFICATION	4.208947324595772E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9994727225440684	WITHOUT_CLASSIFICATION	5.272774559315856E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9992058193315686	WITHOUT_CLASSIFICATION	7.94180668431343E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999578974973925	WITHOUT_CLASSIFICATION	4.210250260750679E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998243682714645	WITHOUT_CLASSIFICATION	1.7563172853539603E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999594601675981	WITHOUT_CLASSIFICATION	4.0539832401949336E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999024455692123	WITHOUT_CLASSIFICATION	9.755443078779199E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999735480343981	WITHOUT_CLASSIFICATION	2.6451965601862565E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.998326996369567	WITHOUT_CLASSIFICATION	0.0016730036304329079	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999735480343981	WITHOUT_CLASSIFICATION	2.6451965601862565E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9986039936921056	WITHOUT_CLASSIFICATION	0.0013960063078942645	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.99934825844862	WITHOUT_CLASSIFICATION	6.517415513799912E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9986039936921056	WITHOUT_CLASSIFICATION	0.0013960063078942645	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907660851775	WITHOUT_CLASSIFICATION	1.092339148225252E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999932657855447	WITHOUT_CLASSIFICATION	6.73421445529966E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9998514753776128	WITHOUT_CLASSIFICATION	1.4852462238728473E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9998514753776128	WITHOUT_CLASSIFICATION	1.4852462238728473E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9993554505321038	WITHOUT_CLASSIFICATION	6.445494678960973E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9993623488283371	WITHOUT_CLASSIFICATION	6.376511716629369E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9993554505321038	WITHOUT_CLASSIFICATION	6.445494678960973E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998211872202599	WITHOUT_CLASSIFICATION	1.7881277974002868E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999849669945413	WITHOUT_CLASSIFICATION	1.5033005458688245E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998090326179869	WITHOUT_CLASSIFICATION	1.9096738201302254E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996351091573332	WITHOUT_CLASSIFICATION	3.6489084266671173E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999585369965274	WITHOUT_CLASSIFICATION	4.146300347256753E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9993077285435636	WITHOUT_CLASSIFICATION	6.922714564363124E-4	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999506465594782	WITHOUT_CLASSIFICATION	4.9353440521813357E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996085946964678	WITHOUT_CLASSIFICATION	3.9140530353216777E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999225415659531	WITHOUT_CLASSIFICATION	7.745843404688134E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999057881853127	WITHOUT_CLASSIFICATION	9.42118146872686E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999896549059636	WITHOUT_CLASSIFICATION	1.034509403639725E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999075627798404	WITHOUT_CLASSIFICATION	9.243722015967281E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999506814805341	WITHOUT_CLASSIFICATION	4.9318519465948715E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998074693843618	WITHOUT_CLASSIFICATION	1.9253061563819797E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9992713896157255	WITHOUT_CLASSIFICATION	7.28610384274596E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997993493128502	WITHOUT_CLASSIFICATION	2.0065068714980342E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9994467925170661	WITHOUT_CLASSIFICATION	5.532074829338233E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996336178310233	WITHOUT_CLASSIFICATION	3.6638216897667977E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997298614228669	WITHOUT_CLASSIFICATION	2.701385771330223E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9996316549666983	WITHOUT_CLASSIFICATION	3.68345033301714E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998422875730183	WITHOUT_CLASSIFICATION	1.5771242698171906E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9995796932845873	WITHOUT_CLASSIFICATION	4.2030671541270126E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998090326179869	WITHOUT_CLASSIFICATION	1.9096738201302254E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999539017630618	WITHOUT_CLASSIFICATION	4.6098236938210335E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998166629148152	WITHOUT_CLASSIFICATION	1.8333708518488386E-4	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9987072357030902	WITHOUT_CLASSIFICATION	0.0012927642969098876	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9998196998089571	WITHOUT_CLASSIFICATION	1.8030019104278323E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999806460357819	WITHOUT_CLASSIFICATION	1.9353964218171374E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999536480046005	WITHOUT_CLASSIFICATION	4.63519953993975E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998211872202599	WITHOUT_CLASSIFICATION	1.7881277974002868E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998211872202599	WITHOUT_CLASSIFICATION	1.7881277974002868E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9994662071102036	WITHOUT_CLASSIFICATION	5.337928897964767E-4	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999536480046005	WITHOUT_CLASSIFICATION	4.63519953993975E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999697611017092	WITHOUT_CLASSIFICATION	3.02388982907931E-4	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9829477686229284	WITHOUT_CLASSIFICATION	0.017052231377071625	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999570775910253	WITHOUT_CLASSIFICATION	4.2922408974695327E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9997370831162398	WITHOUT_CLASSIFICATION	2.629168837602952E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999804113046457	WITHOUT_CLASSIFICATION	1.958869535423775E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999458312165616	WITHOUT_CLASSIFICATION	5.416878343840961E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999093411631648	WITHOUT_CLASSIFICATION	9.065883683532537E-5	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996085946964678	WITHOUT_CLASSIFICATION	3.9140530353216777E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9997997282994763	WITHOUT_CLASSIFICATION	2.002717005237053E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999093411631648	WITHOUT_CLASSIFICATION	9.065883683532537E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999665743265113	WITHOUT_CLASSIFICATION	3.3425673488838333E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999419506547942	WITHOUT_CLASSIFICATION	5.8049345205855606E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998882809368411	WITHOUT_CLASSIFICATION	1.1171906315882987E-4	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.999656048632004	WITHOUT_CLASSIFICATION	3.4395136799599555E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992750770433041	WITHOUT_CLASSIFICATION	7.249229566958211E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9991079633566466	WITHOUT_CLASSIFICATION	8.92036643353351E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999462451733123	WITHOUT_CLASSIFICATION	5.37548266876491E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999428047364967	WITHOUT_CLASSIFICATION	5.719526350328989E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999215196435824	WITHOUT_CLASSIFICATION	7.84803564175618E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9991492710519617	WITHOUT_CLASSIFICATION	8.507289480382607E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999465206940444	WITHOUT_CLASSIFICATION	5.347930595561557E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999093411631648	WITHOUT_CLASSIFICATION	9.065883683532537E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992750770433041	WITHOUT_CLASSIFICATION	7.249229566958211E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999462451733123	WITHOUT_CLASSIFICATION	5.37548266876491E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998128373845802	WITHOUT_CLASSIFICATION	1.8716261541985193E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999888648284361	WITHOUT_CLASSIFICATION	1.1135171563956854E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999552774951215	WITHOUT_CLASSIFICATION	4.472250487853331E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997434294579435	WITHOUT_CLASSIFICATION	2.56570542056524E-4	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999491752518714	WITHOUT_CLASSIFICATION	5.082474812863651E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999665743265113	WITHOUT_CLASSIFICATION	3.3425673488838333E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9993396963050939	WITHOUT_CLASSIFICATION	6.603036949060842E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998068596843399	WITHOUT_CLASSIFICATION	1.931403156601027E-4	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9993660009320375	WITHOUT_CLASSIFICATION	6.339990679625455E-4	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998267834128339	WITHOUT_CLASSIFICATION	1.7321658716611905E-4	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998267834128339	WITHOUT_CLASSIFICATION	1.7321658716611905E-4	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9998786665272148	WITHOUT_CLASSIFICATION	1.2133347278509891E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907660851775	WITHOUT_CLASSIFICATION	1.092339148225252E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998521839375173	WITHOUT_CLASSIFICATION	1.4781606248273285E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998925057230716	WITHOUT_CLASSIFICATION	1.0749427692839998E-4	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9965512290027727	WITHOUT_CLASSIFICATION	0.003448770997227335	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9964488620302737	WITHOUT_CLASSIFICATION	0.0035511379697263953	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9983461383782299	WITHOUT_CLASSIFICATION	0.0016538616217700798	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9990570691078856	WITHOUT_CLASSIFICATION	9.429308921144058E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999152270909872	WITHOUT_CLASSIFICATION	8.477290901276352E-5	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9994730728569763	WITHOUT_CLASSIFICATION	5.269271430236015E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999496776342343	WITHOUT_CLASSIFICATION	5.0322365765625114E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9998353850350548	WITHOUT_CLASSIFICATION	1.6461496494520506E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998217788853869	WITHOUT_CLASSIFICATION	1.7822111461312997E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9990076608243916	WITHOUT_CLASSIFICATION	9.923391756084489E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997630234464638	WITHOUT_CLASSIFICATION	2.3697655353609683E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999801566999439	WITHOUT_CLASSIFICATION	1.9843300056104362E-4	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9991645082150364	WITHOUT_CLASSIFICATION	8.354917849636855E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998480872228196	WITHOUT_CLASSIFICATION	1.5191277718043015E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999807856913349	WITHOUT_CLASSIFICATION	1.9214308665103117E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9998328298500576	WITHOUT_CLASSIFICATION	1.6717014994241196E-4	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9995576976186552	WITHOUT_CLASSIFICATION	4.4230238134489484E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999298175140452	WITHOUT_CLASSIFICATION	7.018248595479291E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999960143049018	WITHOUT_CLASSIFICATION	3.985695098194189E-5	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9990783944980325	WITHOUT_CLASSIFICATION	9.216055019675573E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9997832809102897	WITHOUT_CLASSIFICATION	2.167190897102997E-4	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999477032099223	WITHOUT_CLASSIFICATION	5.229679007760919E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9976954780213538	WITHOUT_CLASSIFICATION	0.002304521978646282	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999422343639787	WITHOUT_CLASSIFICATION	5.776563602129602E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999317820473536	WITHOUT_CLASSIFICATION	6.821795264643915E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997858697545111	WITHOUT_CLASSIFICATION	2.1413024548888702E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999399126725865	WITHOUT_CLASSIFICATION	6.0087327413393485E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9717301320966426	WITHOUT_CLASSIFICATION	0.028269867903357383	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999691760533047	WITHOUT_CLASSIFICATION	3.082394669530051E-4	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997149139072178	WITHOUT_CLASSIFICATION	2.8508609278221647E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999144467871154	WITHOUT_CLASSIFICATION	8.555321288470262E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9980611816699154	WITHOUT_CLASSIFICATION	0.001938818330084587	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998837294320071	WITHOUT_CLASSIFICATION	1.1627056799283424E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999750112097603	WITHOUT_CLASSIFICATION	2.4988790239698945E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999621973280963	WITHOUT_CLASSIFICATION	3.780267190370295E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999998810928974	WITHOUT_CLASSIFICATION	1.1890710258937131E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995032724106265	WITHOUT_CLASSIFICATION	4.967275893733861E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999012442170392	WITHOUT_CLASSIFICATION	9.875578296085659E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999751341288536	WITHOUT_CLASSIFICATION	2.486587114635851E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9991441596363719	WITHOUT_CLASSIFICATION	8.558403636280801E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999012442170392	WITHOUT_CLASSIFICATION	9.875578296085659E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995032724106265	WITHOUT_CLASSIFICATION	4.967275893733861E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999751341288536	WITHOUT_CLASSIFICATION	2.486587114635851E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999833793868932	WITHOUT_CLASSIFICATION	1.6620613106763712E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998468555301354	WITHOUT_CLASSIFICATION	1.5314446986464372E-4	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9993241852351797	WITHOUT_CLASSIFICATION	6.7581476482037E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999969756598131	WITHOUT_CLASSIFICATION	3.0243401869015246E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999944574102492	WITHOUT_CLASSIFICATION	5.542589750788149E-6	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.99819631476777	WITHOUT_CLASSIFICATION	0.0018036852322300537	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9994993909476722	WITHOUT_CLASSIFICATION	5.006090523278516E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997546151134378	WITHOUT_CLASSIFICATION	2.453848865622475E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999908054820078	WITHOUT_CLASSIFICATION	9.194517992195773E-6	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9931825011070136	WITHOUT_CLASSIFICATION	0.0068174988929864296	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999357705812554	WITHOUT_CLASSIFICATION	6.422941874463258E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999718612349918	WITHOUT_CLASSIFICATION	2.8138765008209527E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998885074364675	WITHOUT_CLASSIFICATION	1.1149256353242364E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999891337386995	WITHOUT_CLASSIFICATION	1.0866261300493895E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999779134564037	WITHOUT_CLASSIFICATION	2.2086543596305435E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999834271996799	WITHOUT_CLASSIFICATION	1.65728003200956E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.992050048630419	WITHOUT_CLASSIFICATION	0.007949951369581099	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999899809348349	WITHOUT_CLASSIFICATION	1.0019065165130636E-5	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996158041208051	WITHOUT_CLASSIFICATION	3.8419587919483726E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999094250991062	WITHOUT_CLASSIFICATION	9.057490089381613E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.987312318038424	WITHOUT_CLASSIFICATION	0.01268768196157605	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999978398360464	WITHOUT_CLASSIFICATION	2.1601639536086783E-5	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998981269436594	WITHOUT_CLASSIFICATION	1.0187305634054454E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9991091735332308	WITHOUT_CLASSIFICATION	8.908264667691113E-4	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999094250991062	WITHOUT_CLASSIFICATION	9.057490089381613E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999094250991062	WITHOUT_CLASSIFICATION	9.057490089381613E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999860774585406	WITHOUT_CLASSIFICATION	1.3922541459396713E-4	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999860774585406	WITHOUT_CLASSIFICATION	1.3922541459396713E-4	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9989308568088976	WITHOUT_CLASSIFICATION	0.001069143191102345	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.992050048630419	WITHOUT_CLASSIFICATION	0.007949951369581099	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998796722775172	WITHOUT_CLASSIFICATION	1.2032772248277145E-4	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999130924000108	WITHOUT_CLASSIFICATION	8.690759998923896E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998196852475684	WITHOUT_CLASSIFICATION	1.8031475243156442E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998196852475684	WITHOUT_CLASSIFICATION	1.8031475243156442E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9986267092527527	WITHOUT_CLASSIFICATION	0.0013732907472474446	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998884768202058	WITHOUT_CLASSIFICATION	1.1152317979424082E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9982473722474107	WITHOUT_CLASSIFICATION	0.0017526277525893935	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.999934791254431	WITHOUT_CLASSIFICATION	6.52087455690152E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9984331600755091	WITHOUT_CLASSIFICATION	0.0015668399244909554	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999476943699425	WITHOUT_CLASSIFICATION	5.230563005751252E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9996285723783561	WITHOUT_CLASSIFICATION	3.7142762164393394E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999133089481378	WITHOUT_CLASSIFICATION	8.669105186227394E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9998954500025157	WITHOUT_CLASSIFICATION	1.0454999748430078E-4	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9972346813757741	WITHOUT_CLASSIFICATION	0.0027653186242258816	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998685053045253	WITHOUT_CLASSIFICATION	1.3149469547475243E-4	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997763332324658	WITHOUT_CLASSIFICATION	2.2366676753419982E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9994489066896013	WITHOUT_CLASSIFICATION	5.510933103987908E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998294820483555	WITHOUT_CLASSIFICATION	1.7051795164443637E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552509903466	WITHOUT_CLASSIFICATION	1.4474900965332537E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996410994610571	WITHOUT_CLASSIFICATION	3.5890053894285383E-4	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9963814121592363	WITHOUT_CLASSIFICATION	0.0036185878407638773	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9996523802866519	WITHOUT_CLASSIFICATION	3.476197133480757E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998159621932252	WITHOUT_CLASSIFICATION	1.840378067748116E-4	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999848521171458	WITHOUT_CLASSIFICATION	1.514788285421555E-4	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999805727749166	WITHOUT_CLASSIFICATION	1.9427225083481322E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998348698225861	WITHOUT_CLASSIFICATION	1.6513017741387275E-4	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993366388986487	WITHOUT_CLASSIFICATION	6.633611013513289E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999394763801163	WITHOUT_CLASSIFICATION	6.052361988384311E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999807856913349	WITHOUT_CLASSIFICATION	1.9214308665103117E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9990919761363	WITHOUT_CLASSIFICATION	9.080238637000567E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998711111479552	WITHOUT_CLASSIFICATION	1.2888885204474288E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998150005755859	WITHOUT_CLASSIFICATION	1.849994244141001E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998020753176048	WITHOUT_CLASSIFICATION	1.9792468239525308E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998020753176048	WITHOUT_CLASSIFICATION	1.9792468239525308E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999620346370139	WITHOUT_CLASSIFICATION	3.796536298606048E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999799250323088	WITHOUT_CLASSIFICATION	2.0074967691126853E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999685719278721	WITHOUT_CLASSIFICATION	3.142807212789036E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999685719278721	WITHOUT_CLASSIFICATION	3.142807212789036E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9926868325503254	WITHOUT_CLASSIFICATION	0.0073131674496745205	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996823918815588	WITHOUT_CLASSIFICATION	3.176081184411275E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9996591530526012	WITHOUT_CLASSIFICATION	3.408469473987508E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999651412794093	WITHOUT_CLASSIFICATION	3.485872059069471E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998032324213011	WITHOUT_CLASSIFICATION	1.9676757869891193E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9992074299502525	WITHOUT_CLASSIFICATION	7.925700497476013E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999784840151572	WITHOUT_CLASSIFICATION	2.1515984842726057E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997209558391804	WITHOUT_CLASSIFICATION	2.7904416081956675E-4	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997209558391804	WITHOUT_CLASSIFICATION	2.7904416081956675E-4	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996496585337213	WITHOUT_CLASSIFICATION	3.503414662785835E-4	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999246482886812	WITHOUT_CLASSIFICATION	7.535171131871056E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999246482886812	WITHOUT_CLASSIFICATION	7.535171131871056E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997395795285516	WITHOUT_CLASSIFICATION	2.6042047144835093E-4	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999615018950547	WITHOUT_CLASSIFICATION	3.849810494529908E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999827711110914	WITHOUT_CLASSIFICATION	1.7228888908619975E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999844994863486	WITHOUT_CLASSIFICATION	1.550051365133637E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997841500900322	WITHOUT_CLASSIFICATION	2.1584990996771855E-4	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998183429359384	WITHOUT_CLASSIFICATION	1.8165706406147149E-4	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997209327982706	WITHOUT_CLASSIFICATION	2.790672017294218E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999290146967303	WITHOUT_CLASSIFICATION	7.098530326970668E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.993663007256418	WITHOUT_CLASSIFICATION	0.006336992743581986	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999801407786071	WITHOUT_CLASSIFICATION	1.9859221392895754E-4	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997671880122224	WITHOUT_CLASSIFICATION	2.3281198777756127E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998934997347251	WITHOUT_CLASSIFICATION	1.0650026527496573E-4	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9990163895363726	WITHOUT_CLASSIFICATION	9.836104636274116E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9997996569360719	WITHOUT_CLASSIFICATION	2.003430639281281E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9996726821479242	WITHOUT_CLASSIFICATION	3.273178520758158E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9996179852189645	WITHOUT_CLASSIFICATION	3.820147810355117E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999067771791287	WITHOUT_CLASSIFICATION	9.322282087128921E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.99976313876261	WITHOUT_CLASSIFICATION	2.368612373900895E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999789415948637	WITHOUT_CLASSIFICATION	2.1058405136424955E-5	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9998028572611705	WITHOUT_CLASSIFICATION	1.9714273882949647E-4	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.999970507154518	WITHOUT_CLASSIFICATION	2.9492845481972565E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991989341932203	WITHOUT_CLASSIFICATION	8.010658067798216E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996846680399012	WITHOUT_CLASSIFICATION	3.153319600988141E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996340425310339	WITHOUT_CLASSIFICATION	3.659574689660818E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999880030435925	WITHOUT_CLASSIFICATION	1.1996956407532103E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991989341932203	WITHOUT_CLASSIFICATION	8.010658067798216E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9998375888918355	WITHOUT_CLASSIFICATION	1.624111081645613E-4	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.998738042319215	WITHOUT_CLASSIFICATION	0.0012619576807849885	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999823893869827	WITHOUT_CLASSIFICATION	1.761061301736219E-5	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999579947287328	WITHOUT_CLASSIFICATION	4.2005271267196214E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999864366569298	WITHOUT_CLASSIFICATION	1.3563343070255176E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9971113557711273	WITHOUT_CLASSIFICATION	0.0028886442288727607	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999443770085373	WITHOUT_CLASSIFICATION	5.5622991462689614E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998194118840446	WITHOUT_CLASSIFICATION	1.8058811595548005E-4	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999508011285873	WITHOUT_CLASSIFICATION	4.919887141267811E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999034507622683	WITHOUT_CLASSIFICATION	9.654923773168735E-5	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999508011285873	WITHOUT_CLASSIFICATION	4.919887141267811E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9996208307620867	WITHOUT_CLASSIFICATION	3.7916923791327534E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999729316453626	WITHOUT_CLASSIFICATION	2.7068354637408933E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9964143502115521	WITHOUT_CLASSIFICATION	0.003585649788447978	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996656261403407	WITHOUT_CLASSIFICATION	3.34373859659273E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998204659406814	WITHOUT_CLASSIFICATION	1.795340593185777E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999761382511353	WITHOUT_CLASSIFICATION	2.386174886473933E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998913576808951	WITHOUT_CLASSIFICATION	1.0864231910495799E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998430918173521	WITHOUT_CLASSIFICATION	1.5690818264803738E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998913576808951	WITHOUT_CLASSIFICATION	1.0864231910495799E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998479468116077	WITHOUT_CLASSIFICATION	1.5205318839238283E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997632277106265	WITHOUT_CLASSIFICATION	2.3677228937344887E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999340456325012	WITHOUT_CLASSIFICATION	6.59543674987832E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999882109528995	WITHOUT_CLASSIFICATION	1.1789047100490734E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999761382511353	WITHOUT_CLASSIFICATION	2.386174886473933E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998430918173521	WITHOUT_CLASSIFICATION	1.5690818264803738E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998479468116077	WITHOUT_CLASSIFICATION	1.5205318839238283E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999924872725644	WITHOUT_CLASSIFICATION	7.512727435593858E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9998051462206139	WITHOUT_CLASSIFICATION	1.948537793861081E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9998815045843499	WITHOUT_CLASSIFICATION	1.1849541565008737E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9992807656604902	WITHOUT_CLASSIFICATION	7.192343395099075E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9980302025671969	WITHOUT_CLASSIFICATION	0.001969797432803113	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999430064852312	WITHOUT_CLASSIFICATION	5.6993514768793104E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552509903466	WITHOUT_CLASSIFICATION	1.4474900965332537E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997632277106265	WITHOUT_CLASSIFICATION	2.3677228937344887E-4	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998629668108212	WITHOUT_CLASSIFICATION	1.3703318917877857E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.994254871158594	WITHOUT_CLASSIFICATION	0.005745128841406059	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999541610751235	WITHOUT_CLASSIFICATION	4.5838924876512504E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552509903466	WITHOUT_CLASSIFICATION	1.4474900965332537E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999804756266251	WITHOUT_CLASSIFICATION	1.9524373374897879E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552509903466	WITHOUT_CLASSIFICATION	1.4474900965332537E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999484594539866	WITHOUT_CLASSIFICATION	5.154054601336231E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9991814457921641	WITHOUT_CLASSIFICATION	8.185542078359755E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999228094146496	WITHOUT_CLASSIFICATION	7.719058535045497E-5	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998622732583748	WITHOUT_CLASSIFICATION	1.377267416250743E-4	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999316765422409	WITHOUT_CLASSIFICATION	6.832345775915026E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999293537761639	WITHOUT_CLASSIFICATION	7.064622383612071E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9991204092200718	WITHOUT_CLASSIFICATION	8.795907799281203E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997621065803675	WITHOUT_CLASSIFICATION	2.3789341963245813E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999376039736826	WITHOUT_CLASSIFICATION	6.239602631738518E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998960924674	WITHOUT_CLASSIFICATION	1.0390753260013493E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999745054255256	WITHOUT_CLASSIFICATION	2.5494574474493566E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998960924674	WITHOUT_CLASSIFICATION	1.0390753260013493E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9691458650664584	WITHOUT_CLASSIFICATION	0.030854134933541597	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9997007616341789	WITHOUT_CLASSIFICATION	2.992383658211517E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.99975866574343	WITHOUT_CLASSIFICATION	2.413342565699E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999915303230286	WITHOUT_CLASSIFICATION	8.469676971455205E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999892256039976	WITHOUT_CLASSIFICATION	1.0774396002396401E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9976564047987216	WITHOUT_CLASSIFICATION	0.0023435952012784704	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999874970333749	WITHOUT_CLASSIFICATION	1.250296662503158E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999027858085767	WITHOUT_CLASSIFICATION	9.721419142323521E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9975344507227464	WITHOUT_CLASSIFICATION	0.002465549277253721	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9975344507227464	WITHOUT_CLASSIFICATION	0.002465549277253721	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999978154446653	WITHOUT_CLASSIFICATION	2.1845553347018486E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999923926453442	WITHOUT_CLASSIFICATION	7.60735465580055E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999566971501147	WITHOUT_CLASSIFICATION	4.3302849885417826E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998611356115329	WITHOUT_CLASSIFICATION	1.3886438846717094E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999645827793444	WITHOUT_CLASSIFICATION	3.54172206554921E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999314755746888	WITHOUT_CLASSIFICATION	6.852442531122035E-5	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9994891012145742	WITHOUT_CLASSIFICATION	5.108987854256396E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997833010952382	WITHOUT_CLASSIFICATION	2.166989047617539E-4	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9991700577021002	WITHOUT_CLASSIFICATION	8.299422978999277E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9997865950772247	WITHOUT_CLASSIFICATION	2.1340492277543345E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996490429556438	WITHOUT_CLASSIFICATION	3.5095704435617715E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998977430887996	WITHOUT_CLASSIFICATION	1.0225691120036916E-4	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999366915585863	WITHOUT_CLASSIFICATION	6.330844141357881E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994950916527892	WITHOUT_CLASSIFICATION	5.049083472109167E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997194962318245	WITHOUT_CLASSIFICATION	2.805037681755228E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9997194962318245	WITHOUT_CLASSIFICATION	2.805037681755228E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.998214828609675	WITHOUT_CLASSIFICATION	0.0017851713903249663	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997621065803675	WITHOUT_CLASSIFICATION	2.3789341963245813E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9990821203222382	WITHOUT_CLASSIFICATION	9.178796777618648E-4	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999200512802137	WITHOUT_CLASSIFICATION	7.994871978628833E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.99645759031665	WITHOUT_CLASSIFICATION	0.0035424096833499533	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997565754999823	WITHOUT_CLASSIFICATION	2.4342450001775778E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998068733273803	WITHOUT_CLASSIFICATION	1.9312667261970096E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9986512980971783	WITHOUT_CLASSIFICATION	0.0013487019028215978	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9994602902270278	WITHOUT_CLASSIFICATION	5.397097729722941E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999924993175686	WITHOUT_CLASSIFICATION	7.500682431407652E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9907889054510801	WITHOUT_CLASSIFICATION	0.009211094548919871	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9988059779196239	WITHOUT_CLASSIFICATION	0.0011940220803761093	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999391714999355	WITHOUT_CLASSIFICATION	6.0828500064619326E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999043304376073	WITHOUT_CLASSIFICATION	9.566956239268221E-5	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999819390064524	WITHOUT_CLASSIFICATION	1.8060993547589386E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999647489830965	WITHOUT_CLASSIFICATION	3.5251016903458625E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999950308049664	WITHOUT_CLASSIFICATION	4.969195033645775E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999570535533788	WITHOUT_CLASSIFICATION	4.294644662119268E-5	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999673357518681	WITHOUT_CLASSIFICATION	3.266424813175359E-5	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998660579263723	WITHOUT_CLASSIFICATION	1.3394207362769122E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998939990309401	WITHOUT_CLASSIFICATION	1.0600096905978844E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9984501220473304	WITHOUT_CLASSIFICATION	0.0015498779526696821	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999916897898875	WITHOUT_CLASSIFICATION	8.310210112505593E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999660147335603	WITHOUT_CLASSIFICATION	3.3985266439797336E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9987189125532555	WITHOUT_CLASSIFICATION	0.0012810874467444882	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9995500440411555	WITHOUT_CLASSIFICATION	4.4995595884440495E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9994373538579212	WITHOUT_CLASSIFICATION	5.626461420789139E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998687126701055	WITHOUT_CLASSIFICATION	1.3128732989458973E-4	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.989929352208585	WITHOUT_CLASSIFICATION	0.010070647791415038	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998155104425882	WITHOUT_CLASSIFICATION	1.844895574117831E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998243168485522	WITHOUT_CLASSIFICATION	1.7568315144777147E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998255322971011	WITHOUT_CLASSIFICATION	1.7446770289883623E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999190047111539	WITHOUT_CLASSIFICATION	8.09952888461709E-5	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9973660576968151	WITHOUT_CLASSIFICATION	0.0026339423031849648	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9954548681204847	WITHOUT_CLASSIFICATION	0.004545131879515359	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9953855144496393	WITHOUT_CLASSIFICATION	0.004614485550360703	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998877821220149	WITHOUT_CLASSIFICATION	1.122178779850995E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998877821220149	WITHOUT_CLASSIFICATION	1.122178779850995E-4	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999942400685032	WITHOUT_CLASSIFICATION	5.759931496808165E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999503495459469	WITHOUT_CLASSIFICATION	4.965045405325269E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998311243575686	WITHOUT_CLASSIFICATION	1.6887564243136047E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998311243575686	WITHOUT_CLASSIFICATION	1.6887564243136047E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.999990023677711	WITHOUT_CLASSIFICATION	9.976322288993484E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999352633926866	WITHOUT_CLASSIFICATION	6.473660731341406E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998582838395134	WITHOUT_CLASSIFICATION	1.4171616048664793E-4	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999233979621718	WITHOUT_CLASSIFICATION	7.660203782822601E-5	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998171040301499	WITHOUT_CLASSIFICATION	1.8289596985008206E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998326801879026	WITHOUT_CLASSIFICATION	1.673198120973125E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998326801879026	WITHOUT_CLASSIFICATION	1.673198120973125E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998541382216154	WITHOUT_CLASSIFICATION	1.458617783844983E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998211872202599	WITHOUT_CLASSIFICATION	1.7881277974002868E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.999944119058368	WITHOUT_CLASSIFICATION	5.588094163202359E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.999944119058368	WITHOUT_CLASSIFICATION	5.588094163202359E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999523653830765	WITHOUT_CLASSIFICATION	4.763461692347917E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999103800145501	WITHOUT_CLASSIFICATION	8.961998544982994E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999758185801282	WITHOUT_CLASSIFICATION	2.418141987175228E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999925240201195	WITHOUT_CLASSIFICATION	7.475979880446567E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999906432054368	WITHOUT_CLASSIFICATION	9.356794563051283E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999495699802826	WITHOUT_CLASSIFICATION	5.043001971740081E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9996625733013742	WITHOUT_CLASSIFICATION	3.3742669862584743E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999810020926246	WITHOUT_CLASSIFICATION	1.8997907375322626E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999925558791367	WITHOUT_CLASSIFICATION	7.4441208632496346E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999656759076667	WITHOUT_CLASSIFICATION	3.4324092333283955E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999617490892294	WITHOUT_CLASSIFICATION	3.82509107706005E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9990599622092011	WITHOUT_CLASSIFICATION	9.400377907989415E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9998963611674935	WITHOUT_CLASSIFICATION	1.0363883250657621E-4	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999919057464483	WITHOUT_CLASSIFICATION	8.094253551637183E-6	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999443026392615	WITHOUT_CLASSIFICATION	5.5697360738560224E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998183336069006	WITHOUT_CLASSIFICATION	1.8166639309926338E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999006854766073	WITHOUT_CLASSIFICATION	9.931452339268835E-5	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9970931529482036	WITHOUT_CLASSIFICATION	0.00290684705179639	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9998697695254255	WITHOUT_CLASSIFICATION	1.302304745744655E-4	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998548016709724	WITHOUT_CLASSIFICATION	1.4519832902753707E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999830792903427	WITHOUT_CLASSIFICATION	1.6920709657300515E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998086711593267	WITHOUT_CLASSIFICATION	1.9132884067332007E-4	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9995071779003791	WITHOUT_CLASSIFICATION	4.92822099620796E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9995833368260679	WITHOUT_CLASSIFICATION	4.16663173931971E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9998500510123935	WITHOUT_CLASSIFICATION	1.4994898760639034E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999544223253316	WITHOUT_CLASSIFICATION	4.557767466837786E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999896541027081	WITHOUT_CLASSIFICATION	1.0345897291871227E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999971546179955	WITHOUT_CLASSIFICATION	2.845382004328497E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999477447652976	WITHOUT_CLASSIFICATION	5.2255234702402106E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999992835342487	WITHOUT_CLASSIFICATION	7.164657512058139E-7	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9996210784468246	WITHOUT_CLASSIFICATION	3.789215531753502E-4	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999759828591491	WITHOUT_CLASSIFICATION	2.4017140850876017E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999845556162947	WITHOUT_CLASSIFICATION	1.5444383705265596E-5	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998192043641388	WITHOUT_CLASSIFICATION	1.8079563586112244E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998970301889322	WITHOUT_CLASSIFICATION	1.0296981106783729E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998699365886596	WITHOUT_CLASSIFICATION	1.3006341134032506E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999660743613371	WITHOUT_CLASSIFICATION	3.3925638662922736E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9976912390241875	WITHOUT_CLASSIFICATION	0.0023087609758123853	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999494725052792	WITHOUT_CLASSIFICATION	5.052749472077838E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999543378250292	WITHOUT_CLASSIFICATION	4.5662174970843584E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999216929391419	WITHOUT_CLASSIFICATION	7.830706085809674E-5	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999945671144344	WITHOUT_CLASSIFICATION	5.432885565599195E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9975718963693381	WITHOUT_CLASSIFICATION	0.0024281036306618184	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999059055002316	WITHOUT_CLASSIFICATION	9.409449976841048E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9992288678793223	WITHOUT_CLASSIFICATION	7.711321206777419E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9990278969112467	WITHOUT_CLASSIFICATION	9.721030887532659E-4	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997789010314553	WITHOUT_CLASSIFICATION	2.2109896854477737E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999722676002473	WITHOUT_CLASSIFICATION	2.7732399752727653E-5	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999603327843047	WITHOUT_CLASSIFICATION	3.9667215695218724E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999738278628935	WITHOUT_CLASSIFICATION	2.6172137106663577E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.998831159535471	WITHOUT_CLASSIFICATION	0.0011688404645290261	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998855953540134	WITHOUT_CLASSIFICATION	1.1440464598659378E-4	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9969474162948686	WITHOUT_CLASSIFICATION	0.0030525837051314933	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999883118012708	WITHOUT_CLASSIFICATION	1.168819872919044E-4	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9995685625030881	WITHOUT_CLASSIFICATION	4.314374969118921E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998224573345615	WITHOUT_CLASSIFICATION	1.7754266543839486E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999882919649128	WITHOUT_CLASSIFICATION	1.1708035087279943E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999882919649128	WITHOUT_CLASSIFICATION	1.1708035087279943E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999752542878717	WITHOUT_CLASSIFICATION	2.4745712128267374E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9978276774248336	WITHOUT_CLASSIFICATION	0.002172322575166432	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999598898561483	WITHOUT_CLASSIFICATION	4.011014385177445E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999859758414841	WITHOUT_CLASSIFICATION	1.402415851589873E-4	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998357386704201	WITHOUT_CLASSIFICATION	1.6426132958001982E-4	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996494087216923	WITHOUT_CLASSIFICATION	3.50591278307659E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999973971915229	WITHOUT_CLASSIFICATION	2.6028084771340887E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998713661372886	WITHOUT_CLASSIFICATION	1.2863386271137905E-4	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999391111446119	WITHOUT_CLASSIFICATION	6.088885538799182E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999763162217433	WITHOUT_CLASSIFICATION	2.368377825662412E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999899154036996	WITHOUT_CLASSIFICATION	1.008459630036212E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.982668437896298	WITHOUT_CLASSIFICATION	0.017331562103702028	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999702341639282	WITHOUT_CLASSIFICATION	2.9765836071802052E-5	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999970664261365	WITHOUT_CLASSIFICATION	2.9335738635872233E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9983279329429056	WITHOUT_CLASSIFICATION	0.0016720670570943411	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9983279329429056	WITHOUT_CLASSIFICATION	0.0016720670570943411	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.99972188544347	WITHOUT_CLASSIFICATION	2.7811455653000826E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992287919506857	WITHOUT_CLASSIFICATION	7.712080493143599E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998686497454732	WITHOUT_CLASSIFICATION	1.3135025452685336E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9998648841473671	WITHOUT_CLASSIFICATION	1.3511585263291666E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999878625646808	WITHOUT_CLASSIFICATION	1.2137435319274927E-5	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998827598076745	WITHOUT_CLASSIFICATION	1.1724019232547358E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999083429213869	WITHOUT_CLASSIFICATION	9.165707861307676E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9997061359527485	WITHOUT_CLASSIFICATION	2.938640472515258E-4	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999904329179767	WITHOUT_CLASSIFICATION	9.567082023167667E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999833815023144	WITHOUT_CLASSIFICATION	1.6618497685614003E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999605789087734	WITHOUT_CLASSIFICATION	3.942109122654022E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9991466894457414	WITHOUT_CLASSIFICATION	8.533105542586822E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999432470534332	WITHOUT_CLASSIFICATION	5.675294656680918E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9990625771228159	WITHOUT_CLASSIFICATION	9.374228771841512E-4	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999578520033788	WITHOUT_CLASSIFICATION	4.214799662119502E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997251368905655	WITHOUT_CLASSIFICATION	2.74863109434422E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9823699276856157	WITHOUT_CLASSIFICATION	0.01763007231438419	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999820239747386	WITHOUT_CLASSIFICATION	1.7976025261440694E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998842173254999	WITHOUT_CLASSIFICATION	1.1578267449995639E-4	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9997771814026956	WITHOUT_CLASSIFICATION	2.2281859730433268E-4	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999280832957825	WITHOUT_CLASSIFICATION	7.191670421753031E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999719743788105	WITHOUT_CLASSIFICATION	2.8025621189494614E-4	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999823603550105	WITHOUT_CLASSIFICATION	1.7639644989489686E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9993438287739228	WITHOUT_CLASSIFICATION	6.561712260770939E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997841011714109	WITHOUT_CLASSIFICATION	2.1589882858912498E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998050951834816	WITHOUT_CLASSIFICATION	1.949048165185337E-4	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9992841469257242	WITHOUT_CLASSIFICATION	7.158530742757938E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9993748282768731	WITHOUT_CLASSIFICATION	6.251717231269425E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9996452839057107	WITHOUT_CLASSIFICATION	3.5471609428926524E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9984888527434134	WITHOUT_CLASSIFICATION	0.0015111472565865853	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999610176067711	WITHOUT_CLASSIFICATION	3.8982393228872547E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999559154551846	WITHOUT_CLASSIFICATION	4.408454481544097E-5	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999758656018061	WITHOUT_CLASSIFICATION	2.413439819390215E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9979778210530877	WITHOUT_CLASSIFICATION	0.002022178946912233	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9964702322045047	WITHOUT_CLASSIFICATION	0.0035297677954952587	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998418170728427	WITHOUT_CLASSIFICATION	1.5818292715719272E-4	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9991340837548585	WITHOUT_CLASSIFICATION	8.659162451414141E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999764367769819	WITHOUT_CLASSIFICATION	2.356322301808714E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999716142218776	WITHOUT_CLASSIFICATION	2.8385778122296987E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990779620869111	WITHOUT_CLASSIFICATION	9.220379130889608E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990779620869111	WITHOUT_CLASSIFICATION	9.220379130889608E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999958457030509	WITHOUT_CLASSIFICATION	4.154296949106446E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.88786234979382	WITHOUT_CLASSIFICATION	0.11213765020618013	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999663131523092	WITHOUT_CLASSIFICATION	3.368684769077592E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999628544015681	WITHOUT_CLASSIFICATION	3.714559843194504E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9994357024707485	WITHOUT_CLASSIFICATION	5.642975292514147E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9989916962771166	WITHOUT_CLASSIFICATION	0.0010083037228833921	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999255143346734	WITHOUT_CLASSIFICATION	7.448566532657486E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9989573468332966	WITHOUT_CLASSIFICATION	0.0010426531667033353	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9970851974916093	WITHOUT_CLASSIFICATION	0.0029148025083907472	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997135286609502	WITHOUT_CLASSIFICATION	2.8647133904976987E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999878286188464	WITHOUT_CLASSIFICATION	1.2171381153601407E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9995118421780682	WITHOUT_CLASSIFICATION	4.881578219318629E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9997138739246435	WITHOUT_CLASSIFICATION	2.861260753563945E-4	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9916284691666274	WITHOUT_CLASSIFICATION	0.008371530833372633	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9987137652865298	WITHOUT_CLASSIFICATION	0.0012862347134703397	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999848122089117	WITHOUT_CLASSIFICATION	1.5187791088299887E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9994940656398148	WITHOUT_CLASSIFICATION	5.059343601851123E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9996187010167871	WITHOUT_CLASSIFICATION	3.8129898321302236E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998614757616728	WITHOUT_CLASSIFICATION	1.3852423832719742E-4	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999978623259468	WITHOUT_CLASSIFICATION	2.137674053202388E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995031744968412	WITHOUT_CLASSIFICATION	4.968255031587935E-4	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998280023269365	WITHOUT_CLASSIFICATION	1.7199767306359465E-4	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996955866692158	WITHOUT_CLASSIFICATION	3.044133307842409E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999177587528764	WITHOUT_CLASSIFICATION	8.224124712363204E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998987180554376	WITHOUT_CLASSIFICATION	1.0128194456241364E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9994108857129997	WITHOUT_CLASSIFICATION	5.891142870002876E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.99996109341867	WITHOUT_CLASSIFICATION	3.890658132995171E-5	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9995437458886466	WITHOUT_CLASSIFICATION	4.562541113533988E-4	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996216249263241	WITHOUT_CLASSIFICATION	3.783750736758576E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999211831478559	WITHOUT_CLASSIFICATION	7.881685214396989E-5	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9996296139716984	WITHOUT_CLASSIFICATION	3.703860283016432E-4	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999057628134482	WITHOUT_CLASSIFICATION	9.423718655184694E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997138272927418	WITHOUT_CLASSIFICATION	2.86172707258138E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999715835056824	WITHOUT_CLASSIFICATION	2.8416494317626024E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9921532179816323	WITHOUT_CLASSIFICATION	0.007846782018367722	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999723307556385	WITHOUT_CLASSIFICATION	2.7669244361443358E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997292799855332	WITHOUT_CLASSIFICATION	2.7072001446681334E-4	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9724111508257888	WITHOUT_CLASSIFICATION	0.027588849174211148	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.999829820459248	WITHOUT_CLASSIFICATION	1.7017954075205117E-4	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999358544235786	WITHOUT_CLASSIFICATION	6.414557642150515E-5	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999952420717186	WITHOUT_CLASSIFICATION	4.757928281300133E-6	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9997461074996031	WITHOUT_CLASSIFICATION	2.538925003968517E-4	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9988711915857038	WITHOUT_CLASSIFICATION	0.0011288084142962206	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999778712693402	WITHOUT_CLASSIFICATION	2.212873065982987E-5	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9847425376009864	WITHOUT_CLASSIFICATION	0.015257462399013532	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997483597340091	WITHOUT_CLASSIFICATION	2.516402659908436E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999702341639282	WITHOUT_CLASSIFICATION	2.9765836071802052E-5	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9996892024694837	WITHOUT_CLASSIFICATION	3.1079753051624495E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999902089768415	WITHOUT_CLASSIFICATION	9.791023158368184E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9970420859565132	WITHOUT_CLASSIFICATION	0.0029579140434868112	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999625248881545	WITHOUT_CLASSIFICATION	3.7475111845493845E-4	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999948067952057	WITHOUT_CLASSIFICATION	5.193204794303981E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999635147648299	WITHOUT_CLASSIFICATION	3.648523517012667E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9937771376561454	WITHOUT_CLASSIFICATION	0.006222862343854598	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7332736019846021	WITHOUT_CLASSIFICATION	0.26672639801539777	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999814603451831	WITHOUT_CLASSIFICATION	1.8539654816927345E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997507373178337	WITHOUT_CLASSIFICATION	2.4926268216636315E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.969660278118239	WITHOUT_CLASSIFICATION	0.030339721881761036	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957450398552588	WITHOUT_CLASSIFICATION	0.004254960144741221	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999868927185287	WITHOUT_CLASSIFICATION	1.310728147130744E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999578974973925	WITHOUT_CLASSIFICATION	4.210250260750679E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998910189855291	WITHOUT_CLASSIFICATION	1.089810144708996E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9993573728129357	WITHOUT_CLASSIFICATION	6.426271870643207E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999956258991262	WITHOUT_CLASSIFICATION	4.374100873811203E-5	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9374653186013284	WITHOUT_CLASSIFICATION	0.06253468139867159	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998910189855291	WITHOUT_CLASSIFICATION	1.089810144708996E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9943005056761668	WITHOUT_CLASSIFICATION	0.005699494323833215	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9950668024531357	WITHOUT_CLASSIFICATION	0.004933197546864256	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999778694751568	WITHOUT_CLASSIFICATION	2.21305248431777E-5	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9936408673186696	WITHOUT_CLASSIFICATION	0.0063591326813302994	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999909786427466	WITHOUT_CLASSIFICATION	9.021357253409085E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9867969770278685	WITHOUT_CLASSIFICATION	0.013203022972131462	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999971411642772	WITHOUT_CLASSIFICATION	2.858835722799279E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999775051434443	WITHOUT_CLASSIFICATION	2.2494856555693644E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999881856155146	WITHOUT_CLASSIFICATION	1.1814384485409804E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9918654190981782	WITHOUT_CLASSIFICATION	0.008134580901821899	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996342259384999	WITHOUT_CLASSIFICATION	3.657740615001164E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9241620220442476	WITHOUT_CLASSIFICATION	0.07583797795575237	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9986347981884391	WITHOUT_CLASSIFICATION	0.0013652018115608584	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9995781531887638	WITHOUT_CLASSIFICATION	4.218468112363074E-4	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997347784569298	WITHOUT_CLASSIFICATION	2.652215430701342E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9984501220473304	WITHOUT_CLASSIFICATION	0.0015498779526696821	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998358047347353	WITHOUT_CLASSIFICATION	1.6419526526473022E-4	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9998323833248338	WITHOUT_CLASSIFICATION	1.6761667516615824E-4	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994402449712103	WITHOUT_CLASSIFICATION	5.59755028789793E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9900457206352206	WITHOUT_CLASSIFICATION	0.009954279364779429	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999930572238844	WITHOUT_CLASSIFICATION	6.942776115467055E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999066202762428	WITHOUT_CLASSIFICATION	9.337972375723078E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9997647830441055	WITHOUT_CLASSIFICATION	2.3521695589451828E-4	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999833048733046	WITHOUT_CLASSIFICATION	1.6695126695536043E-5	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999984541700615	WITHOUT_CLASSIFICATION	1.5458299384251208E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9993449584854909	WITHOUT_CLASSIFICATION	6.550415145092164E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9916302938974544	WITHOUT_CLASSIFICATION	0.008369706102545697	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999471890971252	WITHOUT_CLASSIFICATION	5.281090287468508E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9998839189870138	WITHOUT_CLASSIFICATION	1.1608101298621833E-4	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999607384998181	WITHOUT_CLASSIFICATION	3.926150018181507E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999684226081518	WITHOUT_CLASSIFICATION	3.157739184823255E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9994044410976108	WITHOUT_CLASSIFICATION	5.955589023892474E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999043412260664	WITHOUT_CLASSIFICATION	9.565877393354857E-5	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999990277191551	WITHOUT_CLASSIFICATION	9.722808449031886E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999923125315275	WITHOUT_CLASSIFICATION	7.68746847244973E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999962563368308	WITHOUT_CLASSIFICATION	3.743663169246876E-6	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9965934717285898	WITHOUT_CLASSIFICATION	0.003406528271410264	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997455860597723	WITHOUT_CLASSIFICATION	2.544139402276775E-4	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9994110096883196	WITHOUT_CLASSIFICATION	5.889903116803666E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.99667906419621	WITHOUT_CLASSIFICATION	0.0033209358037900373	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9993532960811533	WITHOUT_CLASSIFICATION	6.467039188466276E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9993532960811533	WITHOUT_CLASSIFICATION	6.467039188466276E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.935517759301212	WITHOUT_CLASSIFICATION	0.064482240698788	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999906779369478	WITHOUT_CLASSIFICATION	9.322063052077987E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998812631405737	WITHOUT_CLASSIFICATION	1.1873685942628307E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9999238730056774	WITHOUT_CLASSIFICATION	7.612699432258699E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999651412794093	WITHOUT_CLASSIFICATION	3.485872059069471E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999651412794093	WITHOUT_CLASSIFICATION	3.485872059069471E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998901374729054	WITHOUT_CLASSIFICATION	1.0986252709458999E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9954050811934981	WITHOUT_CLASSIFICATION	0.004594918806501897	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999582643698098	WITHOUT_CLASSIFICATION	4.173563019013654E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9981524903314158	WITHOUT_CLASSIFICATION	0.0018475096685840401	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9990545295422351	WITHOUT_CLASSIFICATION	9.454704577648802E-4	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9995269707745371	WITHOUT_CLASSIFICATION	4.73029225462893E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997945660422225	WITHOUT_CLASSIFICATION	2.0543395777763458E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999929592113495	WITHOUT_CLASSIFICATION	7.040788650507634E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999968445689851	WITHOUT_CLASSIFICATION	3.1554310148667124E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998970370520713	WITHOUT_CLASSIFICATION	1.0296294792867609E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998970370520713	WITHOUT_CLASSIFICATION	1.0296294792867609E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9992410894342479	WITHOUT_CLASSIFICATION	7.589105657521086E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999440666869185	WITHOUT_CLASSIFICATION	5.5933313081453234E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9994020162096383	WITHOUT_CLASSIFICATION	5.979837903616483E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.99950618621415	WITHOUT_CLASSIFICATION	4.938137858499459E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998521839375173	WITHOUT_CLASSIFICATION	1.4781606248273285E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999814920953561	WITHOUT_CLASSIFICATION	1.8507904643899078E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999700568325375	WITHOUT_CLASSIFICATION	2.994316746247036E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9978782967345257	WITHOUT_CLASSIFICATION	0.00212170326547433	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9995094224047799	WITHOUT_CLASSIFICATION	4.905775952201815E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999951140643707	WITHOUT_CLASSIFICATION	4.885935629290839E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9918654190981782	WITHOUT_CLASSIFICATION	0.008134580901821899	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999909168618233	WITHOUT_CLASSIFICATION	9.08313817675108E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9948129326791281	WITHOUT_CLASSIFICATION	0.005187067320871909	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999590714897283	WITHOUT_CLASSIFICATION	4.092851027164367E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999080757306318	WITHOUT_CLASSIFICATION	9.192426936832032E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997238297708944	WITHOUT_CLASSIFICATION	2.7617022910561264E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999335289671795	WITHOUT_CLASSIFICATION	6.647103282050214E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993339000872887	WITHOUT_CLASSIFICATION	6.660999127113248E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997143451889469	WITHOUT_CLASSIFICATION	2.856548110531568E-4	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9991302927942473	WITHOUT_CLASSIFICATION	8.697072057527414E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997990433897038	WITHOUT_CLASSIFICATION	2.0095661029610095E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997990433897038	WITHOUT_CLASSIFICATION	2.0095661029610095E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991989341932203	WITHOUT_CLASSIFICATION	8.010658067798216E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999630512973455	WITHOUT_CLASSIFICATION	3.694870265439549E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997990485615915	WITHOUT_CLASSIFICATION	2.0095143840848974E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991398284188592	WITHOUT_CLASSIFICATION	8.601715811409295E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999940032577689	WITHOUT_CLASSIFICATION	5.9967422310803505E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999643458362093	WITHOUT_CLASSIFICATION	3.565416379066889E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996656261403407	WITHOUT_CLASSIFICATION	3.34373859659273E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9988180919468707	WITHOUT_CLASSIFICATION	0.001181908053129279	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999924872725644	WITHOUT_CLASSIFICATION	7.512727435593858E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9983485468225549	WITHOUT_CLASSIFICATION	0.0016514531774450333	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552509903466	WITHOUT_CLASSIFICATION	1.4474900965332537E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9595574170279451	WITHOUT_CLASSIFICATION	0.04044258297205499	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999322722303405	WITHOUT_CLASSIFICATION	6.772776965943408E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999928794520313	WITHOUT_CLASSIFICATION	7.120547968790934E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999875961278232	WITHOUT_CLASSIFICATION	1.2403872176875228E-5	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999763026893843	WITHOUT_CLASSIFICATION	2.3697310615705564E-4	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9749606814015438	WITHOUT_CLASSIFICATION	0.025039318598456203	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999460172869455	WITHOUT_CLASSIFICATION	5.398271305441938E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9994556105166192	WITHOUT_CLASSIFICATION	5.443894833808264E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998263738113368	WITHOUT_CLASSIFICATION	1.736261886633346E-4	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9995853238613833	WITHOUT_CLASSIFICATION	4.1467613861674796E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999963219327521	WITHOUT_CLASSIFICATION	3.678067247825549E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999758185801282	WITHOUT_CLASSIFICATION	2.418141987175228E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999660704436633	WITHOUT_CLASSIFICATION	3.3929556336857916E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999668106446996	WITHOUT_CLASSIFICATION	3.318935530045866E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999668106446996	WITHOUT_CLASSIFICATION	3.318935530045866E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997798152030708	WITHOUT_CLASSIFICATION	2.201847969291366E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9988983580692764	WITHOUT_CLASSIFICATION	0.0011016419307235948	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999627683536055	WITHOUT_CLASSIFICATION	3.7231646394397904E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999651661285436	WITHOUT_CLASSIFICATION	3.4833871456396487E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999751750403852	WITHOUT_CLASSIFICATION	2.4824959614805588E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9983842363103458	WITHOUT_CLASSIFICATION	0.0016157636896541895	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9983202694024326	WITHOUT_CLASSIFICATION	0.001679730597567389	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9981516794366999	WITHOUT_CLASSIFICATION	0.0018483205632999864	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.7746110191418338	WITHOUT_CLASSIFICATION	0.22538898085816617	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.5301907419861946	WITHOUT_CLASSIFICATION	0.46980925801380535	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9994914029558805	WITHOUT_CLASSIFICATION	5.08597044119506E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9994971798429716	WITHOUT_CLASSIFICATION	5.028201570283719E-4	DEFECT
/*	DEFECT	0.999925730655414	WITHOUT_CLASSIFICATION	7.426934458592988E-5	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9992275296619403	WITHOUT_CLASSIFICATION	7.724703380597469E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9812210134883274	WITHOUT_CLASSIFICATION	0.01877898651167265	DEFECT
// TODO : should this be an error?	DEFECT	0.9986619408912892	WITHOUT_CLASSIFICATION	0.001338059108710744	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9944707615914775	WITHOUT_CLASSIFICATION	0.005529238408522575	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9573331036538093	DEFECT	0.042666896346190725	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.950263129397652	WITHOUT_CLASSIFICATION	0.04973687060234805	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.950263129397652	WITHOUT_CLASSIFICATION	0.04973687060234805	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.906116332725646	WITHOUT_CLASSIFICATION	0.09388366727435407	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999454054619099	WITHOUT_CLASSIFICATION	5.459453809018829E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9975742635932924	WITHOUT_CLASSIFICATION	0.0024257364067075417	DEFECT
// this call is side-effecty	DEFECT	0.9999651268286428	WITHOUT_CLASSIFICATION	3.487317135715083E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.6282430549229281	DEFECT	0.37175694507707197	WITHOUT_CLASSIFICATION
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9985571869990796	WITHOUT_CLASSIFICATION	0.0014428130009204426	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9535528617715102	WITHOUT_CLASSIFICATION	0.04644713822848982	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9997919060972595	WITHOUT_CLASSIFICATION	2.0809390274049126E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9970701285045691	WITHOUT_CLASSIFICATION	0.0029298714954309334	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9992932225536931	WITHOUT_CLASSIFICATION	7.067774463068153E-4	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9743871354087319	WITHOUT_CLASSIFICATION	0.02561286459126803	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9992099222558617	WITHOUT_CLASSIFICATION	7.900777441383254E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.6950064843500313	WITHOUT_CLASSIFICATION	0.3049935156499687	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.7179571348607924	WITHOUT_CLASSIFICATION	0.28204286513920757	DEFECT
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.622406833172655	WITHOUT_CLASSIFICATION	0.3775931668273451	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9787194202201919	WITHOUT_CLASSIFICATION	0.021280579779808156	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9858762324736535	WITHOUT_CLASSIFICATION	0.014123767526346516	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9903195634595348	WITHOUT_CLASSIFICATION	0.00968043654046524	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9975205415685561	WITHOUT_CLASSIFICATION	0.0024794584314439603	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.950263129397652	WITHOUT_CLASSIFICATION	0.04973687060234805	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9945248579675223	DEFECT	0.005475142032477722	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9782962402239701	WITHOUT_CLASSIFICATION	0.021703759776029872	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9993528878335145	WITHOUT_CLASSIFICATION	6.471121664855455E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9992874711910354	WITHOUT_CLASSIFICATION	7.12528808964559E-4	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.8881199986681574	WITHOUT_CLASSIFICATION	0.1118800013318427	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999689885099111	WITHOUT_CLASSIFICATION	3.101149008887685E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9235959121624613	WITHOUT_CLASSIFICATION	0.07640408783753866	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9999110653156669	WITHOUT_CLASSIFICATION	8.893468433317906E-5	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9998380648880048	WITHOUT_CLASSIFICATION	1.6193511199527052E-4	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9471860008383669	WITHOUT_CLASSIFICATION	0.05281399916163321	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999079653946974	WITHOUT_CLASSIFICATION	9.203460530263747E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9961999770316863	WITHOUT_CLASSIFICATION	0.003800022968313726	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9994380763529531	WITHOUT_CLASSIFICATION	5.619236470469244E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9977272845862206	WITHOUT_CLASSIFICATION	0.002272715413779326	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9967937770299305	WITHOUT_CLASSIFICATION	0.003206222970069373	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9693692641407925	WITHOUT_CLASSIFICATION	0.030630735859207562	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999532505512921	DEFECT	4.674944870787971E-5	WITHOUT_CLASSIFICATION
