//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999582922922189	WITHOUT_CLASSIFICATION	4.170770778107674E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9991627421243027	WITHOUT_CLASSIFICATION	8.372578756972388E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999908295490697	WITHOUT_CLASSIFICATION	9.170450930293061E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999943555696961	WITHOUT_CLASSIFICATION	5.644430303895268E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999943555696961	WITHOUT_CLASSIFICATION	5.644430303895268E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999943132260021	WITHOUT_CLASSIFICATION	5.686773997885407E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998690040774977	WITHOUT_CLASSIFICATION	1.3099592250222355E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999759257068856	WITHOUT_CLASSIFICATION	2.4074293114365086E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999646865337686	WITHOUT_CLASSIFICATION	3.5313466231523975E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999058535877294	WITHOUT_CLASSIFICATION	9.414641227061171E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999058535877294	WITHOUT_CLASSIFICATION	9.414641227061171E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998806459392137	WITHOUT_CLASSIFICATION	1.1935406078622669E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999768608809887	WITHOUT_CLASSIFICATION	2.3139119011319676E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999562333973231	WITHOUT_CLASSIFICATION	4.37666026769442E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999955962575906	WITHOUT_CLASSIFICATION	4.403742409391389E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999572394414269	WITHOUT_CLASSIFICATION	4.276055857314592E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997839357073227	WITHOUT_CLASSIFICATION	2.1606429267727873E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9997865695059357	WITHOUT_CLASSIFICATION	2.134304940642216E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934385779904895	WITHOUT_CLASSIFICATION	0.006561422009510479	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999394534130674	WITHOUT_CLASSIFICATION	6.054658693254388E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999563483034578	WITHOUT_CLASSIFICATION	4.365169654215918E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999388800345088	WITHOUT_CLASSIFICATION	6.111996549119776E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999388800345088	WITHOUT_CLASSIFICATION	6.111996549119776E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9995692320997138	WITHOUT_CLASSIFICATION	4.3076790028618667E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998153052486888	WITHOUT_CLASSIFICATION	1.8469475131115086E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998886193856351	WITHOUT_CLASSIFICATION	1.1138061436493454E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999221024419993	WITHOUT_CLASSIFICATION	7.789755800068349E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9989379357762027	WITHOUT_CLASSIFICATION	0.0010620642237973393	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7948204690708356	WITHOUT_CLASSIFICATION	0.20517953092916447	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7948204690708356	WITHOUT_CLASSIFICATION	0.20517953092916447	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996789462632325	WITHOUT_CLASSIFICATION	3.210537367675714E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999569411560313	WITHOUT_CLASSIFICATION	4.305884396869209E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999725166134785	WITHOUT_CLASSIFICATION	2.7483386521471772E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997267044972479	WITHOUT_CLASSIFICATION	2.732955027521819E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999379272416321	WITHOUT_CLASSIFICATION	6.207275836789809E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998113925769855	WITHOUT_CLASSIFICATION	1.886074230145107E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999607714398783	WITHOUT_CLASSIFICATION	3.9228560121728944E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.6997446058605001	WITHOUT_CLASSIFICATION	0.30025539413949986	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998717285389085	WITHOUT_CLASSIFICATION	1.282714610914369E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998717285389085	WITHOUT_CLASSIFICATION	1.282714610914369E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999079009837939	WITHOUT_CLASSIFICATION	9.209901620609301E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9985730004218423	WITHOUT_CLASSIFICATION	0.0014269995781578159	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997445492782852	WITHOUT_CLASSIFICATION	2.5545072171483313E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999100644130652	WITHOUT_CLASSIFICATION	8.993558693477643E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999909904890699	WITHOUT_CLASSIFICATION	9.009510930126356E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999997582399057	WITHOUT_CLASSIFICATION	2.417600942901277E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9987399878961046	WITHOUT_CLASSIFICATION	0.0012600121038954422	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9994495627773335	WITHOUT_CLASSIFICATION	5.504372226664408E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999574131433374	WITHOUT_CLASSIFICATION	4.258685666259044E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999019645845014	WITHOUT_CLASSIFICATION	9.803541549847938E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998819582939836	WITHOUT_CLASSIFICATION	1.1804170601634888E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999466256078636	WITHOUT_CLASSIFICATION	5.337439213651302E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999884532074271	WITHOUT_CLASSIFICATION	1.154679257292451E-5	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9993159575445799	WITHOUT_CLASSIFICATION	6.840424554200836E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9997249561589046	WITHOUT_CLASSIFICATION	2.750438410954028E-4	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9994158744096295	WITHOUT_CLASSIFICATION	5.841255903705633E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999724067117229	WITHOUT_CLASSIFICATION	2.759328827704824E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996750221432293	WITHOUT_CLASSIFICATION	3.2497785677057685E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999570131065663	WITHOUT_CLASSIFICATION	4.2986893433882735E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999714707729392	WITHOUT_CLASSIFICATION	2.852922706067185E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999743721135775	WITHOUT_CLASSIFICATION	2.562788642237206E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999994496713276	WITHOUT_CLASSIFICATION	5.503286725231753E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999849212986682	WITHOUT_CLASSIFICATION	1.5078701331803325E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996309712250437	WITHOUT_CLASSIFICATION	3.690287749563025E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9972123217035506	WITHOUT_CLASSIFICATION	0.0027876782964493625	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998988142948796	WITHOUT_CLASSIFICATION	1.0118570512036466E-4	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999328540812187	WITHOUT_CLASSIFICATION	6.714591878135863E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999995017384687	WITHOUT_CLASSIFICATION	4.982615313129125E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999490141389378	WITHOUT_CLASSIFICATION	5.098586106220649E-5	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999854115952995	WITHOUT_CLASSIFICATION	1.458840470051294E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999991789618832	WITHOUT_CLASSIFICATION	8.210381167194778E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999804255533948	WITHOUT_CLASSIFICATION	1.957444660512406E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998538975325965	WITHOUT_CLASSIFICATION	1.4610246740357416E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996171922217583	WITHOUT_CLASSIFICATION	3.828077782417401E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999150937435023	WITHOUT_CLASSIFICATION	8.490625649767495E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999718704059799	WITHOUT_CLASSIFICATION	2.8129594020113274E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996171922217583	WITHOUT_CLASSIFICATION	3.828077782417401E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9995770654951618	WITHOUT_CLASSIFICATION	4.2293450483817926E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997388499389617	WITHOUT_CLASSIFICATION	2.6115006103842624E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999543198146454	WITHOUT_CLASSIFICATION	4.568018535457319E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999782319847383	WITHOUT_CLASSIFICATION	2.1768015261734468E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999994178048312	WITHOUT_CLASSIFICATION	5.8219516879551864E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999994178048312	WITHOUT_CLASSIFICATION	5.8219516879551864E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998717790136304	WITHOUT_CLASSIFICATION	1.2822098636966055E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993084053099	WITHOUT_CLASSIFICATION	6.915946901172054E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999937419494099	WITHOUT_CLASSIFICATION	6.258050590025969E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999511088516246	WITHOUT_CLASSIFICATION	4.8891148375369706E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999938974188681	WITHOUT_CLASSIFICATION	6.102581131815306E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999484680391318	WITHOUT_CLASSIFICATION	5.153196086818552E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999862323722973	WITHOUT_CLASSIFICATION	1.3767627702746464E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999702583334809	WITHOUT_CLASSIFICATION	2.9741666519150353E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999521562758418	WITHOUT_CLASSIFICATION	4.7843724158258046E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99999807444181	WITHOUT_CLASSIFICATION	1.9255581900728054E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99999807444181	WITHOUT_CLASSIFICATION	1.9255581900728054E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999184880322524	WITHOUT_CLASSIFICATION	8.151196774761245E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999882828302932	WITHOUT_CLASSIFICATION	1.1717169706802345E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999077397865921	WITHOUT_CLASSIFICATION	9.226021340790944E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.99999807444181	WITHOUT_CLASSIFICATION	1.9255581900728054E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999184880322524	WITHOUT_CLASSIFICATION	8.151196774761245E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999184880322524	WITHOUT_CLASSIFICATION	8.151196774761245E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999376921175148	WITHOUT_CLASSIFICATION	6.230788248510577E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999529800646022	WITHOUT_CLASSIFICATION	4.701993539773216E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999992677005228	WITHOUT_CLASSIFICATION	7.322994772049175E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999840980455479	WITHOUT_CLASSIFICATION	1.5901954452115503E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994493858723187	WITHOUT_CLASSIFICATION	5.506141276813004E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9994493858723187	WITHOUT_CLASSIFICATION	5.506141276813004E-4	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998583418704027	WITHOUT_CLASSIFICATION	1.416581295974178E-4	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994778067863013	WITHOUT_CLASSIFICATION	5.221932136987568E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.999958857060004	WITHOUT_CLASSIFICATION	4.1142939996058286E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999889215576305	WITHOUT_CLASSIFICATION	1.1078442369497302E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999889215576305	WITHOUT_CLASSIFICATION	1.1078442369497302E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9994850650029624	WITHOUT_CLASSIFICATION	5.149349970376242E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999347193416491	WITHOUT_CLASSIFICATION	6.528065835089187E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9967561894292198	WITHOUT_CLASSIFICATION	0.003243810570780208	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999885640684272	WITHOUT_CLASSIFICATION	1.143593157281016E-4	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999880130779091	WITHOUT_CLASSIFICATION	1.198692209094322E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999256076596101	WITHOUT_CLASSIFICATION	7.439234038990177E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999093994351875	WITHOUT_CLASSIFICATION	9.060056481239987E-5	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999770325532352	WITHOUT_CLASSIFICATION	2.2967446764713853E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9967561894292198	WITHOUT_CLASSIFICATION	0.003243810570780208	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9998962993415069	WITHOUT_CLASSIFICATION	1.0370065849310503E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999809943908683	WITHOUT_CLASSIFICATION	1.9005609131699005E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999809943908683	WITHOUT_CLASSIFICATION	1.9005609131699005E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999961401683283	WITHOUT_CLASSIFICATION	3.8598316717541025E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999544194203694	WITHOUT_CLASSIFICATION	4.5580579630639744E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999241584860497	WITHOUT_CLASSIFICATION	7.58415139503429E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999558291056449	WITHOUT_CLASSIFICATION	4.4170894355101696E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999775940654553	WITHOUT_CLASSIFICATION	2.2405934544724952E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9995906962437705	WITHOUT_CLASSIFICATION	4.093037562294289E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9998948333629664	WITHOUT_CLASSIFICATION	1.0516663703360821E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999954604047954	WITHOUT_CLASSIFICATION	4.539595204690491E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999952886652876	WITHOUT_CLASSIFICATION	4.711334712413389E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999952886652876	WITHOUT_CLASSIFICATION	4.711334712413389E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999582922922189	WITHOUT_CLASSIFICATION	4.170770778107674E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999606663134547	WITHOUT_CLASSIFICATION	3.933368654536087E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999360512867209	WITHOUT_CLASSIFICATION	6.394871327912398E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999454300769872	WITHOUT_CLASSIFICATION	5.456992301272097E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999527499010803	WITHOUT_CLASSIFICATION	4.7250098919798625E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.99985786661676	WITHOUT_CLASSIFICATION	1.421333832398876E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9991822563146997	WITHOUT_CLASSIFICATION	8.17743685300322E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.999900474787961	WITHOUT_CLASSIFICATION	9.952521203910724E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997825774049208	WITHOUT_CLASSIFICATION	2.1742259507929828E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998920983353519	WITHOUT_CLASSIFICATION	1.0790166464820012E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.99985786661676	WITHOUT_CLASSIFICATION	1.421333832398876E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9976556427393818	WITHOUT_CLASSIFICATION	0.0023443572606182167	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9995229769284183	WITHOUT_CLASSIFICATION	4.7702307158162217E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999570204324721	WITHOUT_CLASSIFICATION	4.2979567527947444E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999576614882125	WITHOUT_CLASSIFICATION	4.233851178748609E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999840324107324	WITHOUT_CLASSIFICATION	1.596758926760145E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999943555696961	WITHOUT_CLASSIFICATION	5.644430303895268E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9997321106214324	WITHOUT_CLASSIFICATION	2.678893785676465E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999665578369635	WITHOUT_CLASSIFICATION	3.3442163036452587E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998758882336756	WITHOUT_CLASSIFICATION	1.2411176632443275E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999010467371514	WITHOUT_CLASSIFICATION	9.895326284863477E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999388254913397	WITHOUT_CLASSIFICATION	6.117450866025996E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998941021767462	WITHOUT_CLASSIFICATION	1.0589782325370768E-4	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999298092433911	WITHOUT_CLASSIFICATION	7.019075660877909E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9990399102546391	WITHOUT_CLASSIFICATION	9.600897453608718E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995630890540473	WITHOUT_CLASSIFICATION	4.369109459526951E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999619239367576	WITHOUT_CLASSIFICATION	3.807606324229327E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997825774049208	WITHOUT_CLASSIFICATION	2.1742259507929828E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999388254913397	WITHOUT_CLASSIFICATION	6.117450866025996E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999943132260021	WITHOUT_CLASSIFICATION	5.686773997885407E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998699278257882	WITHOUT_CLASSIFICATION	1.3007217421179054E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999924224921803	WITHOUT_CLASSIFICATION	7.577507819693108E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998239642901692	WITHOUT_CLASSIFICATION	1.7603570983086147E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999446812771273	WITHOUT_CLASSIFICATION	5.53187228727068E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9980844523658556	WITHOUT_CLASSIFICATION	0.0019155476341443326	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999405203345819	WITHOUT_CLASSIFICATION	5.947966541805936E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999824869608632	WITHOUT_CLASSIFICATION	1.7513039136804232E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999824869608632	WITHOUT_CLASSIFICATION	1.7513039136804232E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999981738010356	WITHOUT_CLASSIFICATION	1.8261989643911465E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999763052296857	WITHOUT_CLASSIFICATION	2.3694770314258737E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998754521690241	WITHOUT_CLASSIFICATION	1.2454783097589183E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999362996052591	WITHOUT_CLASSIFICATION	6.37003947408719E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999978205125439	WITHOUT_CLASSIFICATION	2.1794874560489203E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999692253873135	WITHOUT_CLASSIFICATION	3.0774612686488336E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999931055623923	WITHOUT_CLASSIFICATION	6.8944376077764134E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998690040774977	WITHOUT_CLASSIFICATION	1.3099592250222355E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999553547956379	WITHOUT_CLASSIFICATION	4.464520436203897E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999553547956379	WITHOUT_CLASSIFICATION	4.464520436203897E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999553547956379	WITHOUT_CLASSIFICATION	4.464520436203897E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999872964511773	WITHOUT_CLASSIFICATION	1.2703548822681218E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999553547956379	WITHOUT_CLASSIFICATION	4.464520436203897E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999134700703627	WITHOUT_CLASSIFICATION	8.652992963723461E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9993468591425417	WITHOUT_CLASSIFICATION	6.531408574583943E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999020436515572	WITHOUT_CLASSIFICATION	9.795634844284007E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997825774049208	WITHOUT_CLASSIFICATION	2.1742259507929828E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999388254913397	WITHOUT_CLASSIFICATION	6.117450866025996E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999388254913397	WITHOUT_CLASSIFICATION	6.117450866025996E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999729879358336	WITHOUT_CLASSIFICATION	2.7012064166437116E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999821957546333	WITHOUT_CLASSIFICATION	1.780424536668075E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999521622157874	WITHOUT_CLASSIFICATION	4.7837784212551765E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999646865337686	WITHOUT_CLASSIFICATION	3.5313466231523975E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999646865337686	WITHOUT_CLASSIFICATION	3.5313466231523975E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9998045502830422	WITHOUT_CLASSIFICATION	1.9544971695776772E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999710919403326	WITHOUT_CLASSIFICATION	2.8908059667321314E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9998675371124937	WITHOUT_CLASSIFICATION	1.3246288750629772E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9998276505122818	WITHOUT_CLASSIFICATION	1.723494877181535E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9998385084747451	WITHOUT_CLASSIFICATION	1.6149152525488138E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9997909238333649	WITHOUT_CLASSIFICATION	2.0907616663511357E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999058535877294	WITHOUT_CLASSIFICATION	9.414641227061171E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997853564327027	WITHOUT_CLASSIFICATION	2.1464356729728473E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997853564327027	WITHOUT_CLASSIFICATION	2.1464356729728473E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998806459392137	WITHOUT_CLASSIFICATION	1.1935406078622669E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998806459392137	WITHOUT_CLASSIFICATION	1.1935406078622669E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999606871450685	WITHOUT_CLASSIFICATION	3.9312854931498886E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999606871450685	WITHOUT_CLASSIFICATION	3.9312854931498886E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998438977402755	WITHOUT_CLASSIFICATION	1.5610225972454678E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998438977402755	WITHOUT_CLASSIFICATION	1.5610225972454678E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999646865337686	WITHOUT_CLASSIFICATION	3.5313466231523975E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999058535877294	WITHOUT_CLASSIFICATION	9.414641227061171E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997853564327027	WITHOUT_CLASSIFICATION	2.1464356729728473E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997853564327027	WITHOUT_CLASSIFICATION	2.1464356729728473E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998806459392137	WITHOUT_CLASSIFICATION	1.1935406078622669E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999606871450685	WITHOUT_CLASSIFICATION	3.9312854931498886E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.999606871450685	WITHOUT_CLASSIFICATION	3.9312854931498886E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998438977402755	WITHOUT_CLASSIFICATION	1.5610225972454678E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999597599435958	WITHOUT_CLASSIFICATION	4.024005640413148E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999867540792478	WITHOUT_CLASSIFICATION	1.324592075221345E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999395992751929	WITHOUT_CLASSIFICATION	6.040072480711785E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999869884488763	WITHOUT_CLASSIFICATION	1.3011551123684224E-5	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999211733279751	WITHOUT_CLASSIFICATION	7.882667202488281E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997835943969607	WITHOUT_CLASSIFICATION	2.1640560303937627E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9889075954486167	WITHOUT_CLASSIFICATION	0.011092404551383248	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9740005871878549	WITHOUT_CLASSIFICATION	0.02599941281214513	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999842183100048	WITHOUT_CLASSIFICATION	1.578168999520417E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999947758273865	WITHOUT_CLASSIFICATION	5.224172613467146E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998585817967914	WITHOUT_CLASSIFICATION	1.4141820320861783E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998934384134429	WITHOUT_CLASSIFICATION	1.0656158655701334E-4	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998717790136304	WITHOUT_CLASSIFICATION	1.2822098636966055E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997835943969607	WITHOUT_CLASSIFICATION	2.1640560303937627E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999193657124506	WITHOUT_CLASSIFICATION	8.063428754938894E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999640538000107	WITHOUT_CLASSIFICATION	3.594619998923247E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999640538000107	WITHOUT_CLASSIFICATION	3.594619998923247E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998654687615166	WITHOUT_CLASSIFICATION	1.3453123848333886E-4	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999694407620876	WITHOUT_CLASSIFICATION	3.0559237912378515E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9990904654966236	WITHOUT_CLASSIFICATION	9.095345033762379E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991874073704857	WITHOUT_CLASSIFICATION	8.125926295144233E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991874073704857	WITHOUT_CLASSIFICATION	8.125926295144233E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999572394414269	WITHOUT_CLASSIFICATION	4.276055857314592E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995157080796048	WITHOUT_CLASSIFICATION	4.842919203951657E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995157080796048	WITHOUT_CLASSIFICATION	4.842919203951657E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999178148924246	WITHOUT_CLASSIFICATION	8.218510757538477E-5	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999892525923117	WITHOUT_CLASSIFICATION	1.0747407688308854E-4	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999563483034578	WITHOUT_CLASSIFICATION	4.365169654215918E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9998126971465151	WITHOUT_CLASSIFICATION	1.873028534849827E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997839357073227	WITHOUT_CLASSIFICATION	2.1606429267727873E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.853724569128361	WITHOUT_CLASSIFICATION	0.1462754308716389	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9997852976369839	WITHOUT_CLASSIFICATION	2.1470236301603115E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999475122127996	WITHOUT_CLASSIFICATION	5.2487787200452895E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9997676715017032	WITHOUT_CLASSIFICATION	2.323284982969169E-4	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999708966876669	WITHOUT_CLASSIFICATION	2.9103312333053862E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999883395515673	WITHOUT_CLASSIFICATION	1.1660448432582032E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999221024419993	WITHOUT_CLASSIFICATION	7.789755800068349E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999960689736307	WITHOUT_CLASSIFICATION	3.931026369356107E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999451999901235	WITHOUT_CLASSIFICATION	5.480000987640821E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9997823057824241	WITHOUT_CLASSIFICATION	2.1769421757586612E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999389663955489	WITHOUT_CLASSIFICATION	6.103360445108624E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999425013173224	WITHOUT_CLASSIFICATION	5.749868267761742E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999676198252725	WITHOUT_CLASSIFICATION	3.238017472754915E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999563483034578	WITHOUT_CLASSIFICATION	4.365169654215918E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999186201087554	WITHOUT_CLASSIFICATION	8.137989124455242E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999952453930101	WITHOUT_CLASSIFICATION	4.754606989901663E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997930031626581	WITHOUT_CLASSIFICATION	2.0699683734200068E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997839357073227	WITHOUT_CLASSIFICATION	2.1606429267727873E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999676198252725	WITHOUT_CLASSIFICATION	3.238017472754915E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999186201087554	WITHOUT_CLASSIFICATION	8.137989124455242E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997930031626581	WITHOUT_CLASSIFICATION	2.0699683734200068E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999456428737623	WITHOUT_CLASSIFICATION	5.43571262376038E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999456428737623	WITHOUT_CLASSIFICATION	5.43571262376038E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999388800345088	WITHOUT_CLASSIFICATION	6.111996549119776E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999434077940518	WITHOUT_CLASSIFICATION	5.659220594816879E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.999858861948824	WITHOUT_CLASSIFICATION	1.4113805117600402E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.99999101025806	WITHOUT_CLASSIFICATION	8.989741939927586E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999908649014728	WITHOUT_CLASSIFICATION	9.13509852720534E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999780516831982	WITHOUT_CLASSIFICATION	2.1948316801796395E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999884726168674	WITHOUT_CLASSIFICATION	1.1527383132574203E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9996231316857108	WITHOUT_CLASSIFICATION	3.7686831428914217E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999636492253993	WITHOUT_CLASSIFICATION	3.635077460071577E-5	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999884726168674	WITHOUT_CLASSIFICATION	1.1527383132574203E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9998153052486888	WITHOUT_CLASSIFICATION	1.8469475131115086E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999822712589196	WITHOUT_CLASSIFICATION	1.7728741080405723E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999676198252725	WITHOUT_CLASSIFICATION	3.238017472754915E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998817386627586	WITHOUT_CLASSIFICATION	1.1826133724127708E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.999902487056033	WITHOUT_CLASSIFICATION	9.751294396703863E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999202236821551	WITHOUT_CLASSIFICATION	7.977631784489442E-4	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999053632199132	WITHOUT_CLASSIFICATION	9.463678008682696E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999366223200679	WITHOUT_CLASSIFICATION	6.337767993213491E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999886585697146	WITHOUT_CLASSIFICATION	1.134143028539147E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999013166366466	WITHOUT_CLASSIFICATION	9.868336335341966E-5	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998828308460188	WITHOUT_CLASSIFICATION	1.1716915398113446E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999389708335901	WITHOUT_CLASSIFICATION	6.1029166409882654E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999398919586846	WITHOUT_CLASSIFICATION	6.0108041315341144E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999497695869124	WITHOUT_CLASSIFICATION	5.023041308759611E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999221024419993	WITHOUT_CLASSIFICATION	7.789755800068349E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.99995409373172	WITHOUT_CLASSIFICATION	4.5906268279937955E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997885040802359	WITHOUT_CLASSIFICATION	2.1149591976407032E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999780160223705	WITHOUT_CLASSIFICATION	2.1983977629536918E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999604556288783	WITHOUT_CLASSIFICATION	3.954437112182922E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999608096219398	WITHOUT_CLASSIFICATION	3.91903780602554E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999207477939072	WITHOUT_CLASSIFICATION	7.925220609287884E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998624467125	WITHOUT_CLASSIFICATION	1.375532875618039E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999654955267963	WITHOUT_CLASSIFICATION	3.450447320369924E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999364324545845	WITHOUT_CLASSIFICATION	6.356754541546718E-5	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998937974460455	WITHOUT_CLASSIFICATION	1.0620255395443764E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997363003470585	WITHOUT_CLASSIFICATION	2.636996529415546E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997363003470585	WITHOUT_CLASSIFICATION	2.636996529415546E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998412548119274	WITHOUT_CLASSIFICATION	1.587451880725356E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999070779557413	WITHOUT_CLASSIFICATION	9.292204425868908E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998045975257503	WITHOUT_CLASSIFICATION	1.954024742496718E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999250314616909	WITHOUT_CLASSIFICATION	7.496853830916228E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998384552325739	WITHOUT_CLASSIFICATION	1.6154476742612643E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999510443621467	WITHOUT_CLASSIFICATION	4.895563785330048E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997985053930745	WITHOUT_CLASSIFICATION	2.0149460692545773E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998735212129293	WITHOUT_CLASSIFICATION	1.2647878707070027E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999897299540823	WITHOUT_CLASSIFICATION	1.0270045917709576E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999843882869381	WITHOUT_CLASSIFICATION	1.5611713061909407E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999189327500851	WITHOUT_CLASSIFICATION	8.106724991487002E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9984210899496399	WITHOUT_CLASSIFICATION	0.001578910050360206	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9979856301816077	WITHOUT_CLASSIFICATION	0.002014369818392251	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998843653599406	WITHOUT_CLASSIFICATION	1.156346400594127E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999016531506923	WITHOUT_CLASSIFICATION	9.834684930764324E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9965280318702904	WITHOUT_CLASSIFICATION	0.0034719681297095376	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999865698427028	WITHOUT_CLASSIFICATION	1.3430157297208886E-4	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999645713649203	WITHOUT_CLASSIFICATION	3.542863507973925E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9964090355453677	WITHOUT_CLASSIFICATION	0.0035909644546322566	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9998983957130778	WITHOUT_CLASSIFICATION	1.0160428692222228E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9998983957130778	WITHOUT_CLASSIFICATION	1.0160428692222228E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998532744783096	WITHOUT_CLASSIFICATION	1.46725521690373E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998532744783096	WITHOUT_CLASSIFICATION	1.46725521690373E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999364324545845	WITHOUT_CLASSIFICATION	6.356754541546718E-5	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9873133891417383	WITHOUT_CLASSIFICATION	0.012686610858261744	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.998755927226535	WITHOUT_CLASSIFICATION	0.001244072773465037	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997451357491958	WITHOUT_CLASSIFICATION	2.548642508041952E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.998755927226535	WITHOUT_CLASSIFICATION	0.001244072773465037	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997451357491958	WITHOUT_CLASSIFICATION	2.548642508041952E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999656480721088	WITHOUT_CLASSIFICATION	3.4351927891194636E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9963096508746743	WITHOUT_CLASSIFICATION	0.003690349125325728	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999026929806859	WITHOUT_CLASSIFICATION	9.730701931401519E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999884877867791	WITHOUT_CLASSIFICATION	1.1512213220922327E-5	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996175580745049	WITHOUT_CLASSIFICATION	3.8244192549514387E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999168107454399	WITHOUT_CLASSIFICATION	8.318925456009153E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999758758767647	WITHOUT_CLASSIFICATION	2.4124123235306702E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9993395008060636	WITHOUT_CLASSIFICATION	6.604991939364484E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9991501638004606	WITHOUT_CLASSIFICATION	8.498361995394237E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999995852655937	WITHOUT_CLASSIFICATION	4.147344062496447E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999626071307998	WITHOUT_CLASSIFICATION	3.739286920030227E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9994141651473413	WITHOUT_CLASSIFICATION	5.858348526587144E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999882680581744	WITHOUT_CLASSIFICATION	1.1731941825675936E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998869080049004	WITHOUT_CLASSIFICATION	1.1309199509953857E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998869080049004	WITHOUT_CLASSIFICATION	1.1309199509953857E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982850590518845	WITHOUT_CLASSIFICATION	0.001714940948115504	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9982850590518845	WITHOUT_CLASSIFICATION	0.001714940948115504	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9991299224268885	WITHOUT_CLASSIFICATION	8.700775731115188E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999656480721088	WITHOUT_CLASSIFICATION	3.4351927891194636E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998416290491738	WITHOUT_CLASSIFICATION	1.5837095082620108E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998648015954738	WITHOUT_CLASSIFICATION	1.3519840452612766E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996824240983019	WITHOUT_CLASSIFICATION	3.1757590169813793E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997850715157891	WITHOUT_CLASSIFICATION	2.1492848421098408E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9418177593027515	WITHOUT_CLASSIFICATION	0.05818224069724847	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999656480721088	WITHOUT_CLASSIFICATION	3.4351927891194636E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997850715157891	WITHOUT_CLASSIFICATION	2.1492848421098408E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9418177593027515	WITHOUT_CLASSIFICATION	0.05818224069724847	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999828247264221	WITHOUT_CLASSIFICATION	1.717527357789269E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999471137376262	WITHOUT_CLASSIFICATION	5.288626237370162E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999250422900412	WITHOUT_CLASSIFICATION	7.495770995876248E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999656480721088	WITHOUT_CLASSIFICATION	3.4351927891194636E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999656480721088	WITHOUT_CLASSIFICATION	3.4351927891194636E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.999928700901949	WITHOUT_CLASSIFICATION	7.129909805106358E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999918281358789	WITHOUT_CLASSIFICATION	8.171864121102813E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999329795462316	WITHOUT_CLASSIFICATION	6.70204537683768E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999930694396422	WITHOUT_CLASSIFICATION	6.930560357793896E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998540720314287	WITHOUT_CLASSIFICATION	1.459279685712963E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999941453886382	WITHOUT_CLASSIFICATION	5.854611361812698E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999586661186705	WITHOUT_CLASSIFICATION	4.133388132956311E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999680277171223	WITHOUT_CLASSIFICATION	3.197228287769704E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999856551405437	WITHOUT_CLASSIFICATION	1.434485945628881E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.999928702772695	WITHOUT_CLASSIFICATION	7.129722730502221E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999427984889787	WITHOUT_CLASSIFICATION	5.7201511021329876E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999991937986787	WITHOUT_CLASSIFICATION	8.062013212977377E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999942040749499	WITHOUT_CLASSIFICATION	5.795925050157934E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999347654220597	WITHOUT_CLASSIFICATION	6.523457794028948E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998384872018758	WITHOUT_CLASSIFICATION	1.6151279812417352E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999928048019532	WITHOUT_CLASSIFICATION	7.195198046801088E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997267044972479	WITHOUT_CLASSIFICATION	2.732955027521819E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998348908657011	WITHOUT_CLASSIFICATION	1.6510913429887119E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997166287912491	WITHOUT_CLASSIFICATION	2.8337120875087323E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997451357491958	WITHOUT_CLASSIFICATION	2.548642508041952E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999391131478953	WITHOUT_CLASSIFICATION	6.0886852104832345E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997267044972479	WITHOUT_CLASSIFICATION	2.732955027521819E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.897160504655727	WITHOUT_CLASSIFICATION	0.10283949534427293	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999986064378531	WITHOUT_CLASSIFICATION	1.393562146903378E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9985252724739142	WITHOUT_CLASSIFICATION	0.0014747275260858612	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999523397755135	WITHOUT_CLASSIFICATION	4.7660224486460096E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998542050667659	WITHOUT_CLASSIFICATION	1.457949332340036E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999374204618805	WITHOUT_CLASSIFICATION	6.257953811954293E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9978991208627723	WITHOUT_CLASSIFICATION	0.0021008791372277118	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999808899943735	WITHOUT_CLASSIFICATION	1.911000562647108E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999048124626035	WITHOUT_CLASSIFICATION	9.518753739648878E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999202964501223	WITHOUT_CLASSIFICATION	7.970354987777365E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9968044184641232	WITHOUT_CLASSIFICATION	0.0031955815358768094	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998486862833923	WITHOUT_CLASSIFICATION	1.513137166078004E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999947828217625	WITHOUT_CLASSIFICATION	5.217178237508914E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998747618049831	WITHOUT_CLASSIFICATION	1.2523819501683532E-4	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990001528106754	WITHOUT_CLASSIFICATION	9.998471893244518E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999649265169769	WITHOUT_CLASSIFICATION	3.50734830230428E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.994935842890092	WITHOUT_CLASSIFICATION	0.005064157109907957	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998994117984805	WITHOUT_CLASSIFICATION	1.0058820151952147E-4	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9998704436251243	WITHOUT_CLASSIFICATION	1.2955637487567943E-4	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9995245748365749	WITHOUT_CLASSIFICATION	4.754251634252381E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999810782832019	WITHOUT_CLASSIFICATION	1.892171679798863E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998556776224571	WITHOUT_CLASSIFICATION	1.4432237754289498E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998507481797488	WITHOUT_CLASSIFICATION	1.492518202511815E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998923261427374	WITHOUT_CLASSIFICATION	1.0767385726255594E-4	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998811158100624	WITHOUT_CLASSIFICATION	1.1888418993753134E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998892024522605	WITHOUT_CLASSIFICATION	1.1079754773950583E-4	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999974296158625	WITHOUT_CLASSIFICATION	2.570384137495775E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999970613704893	WITHOUT_CLASSIFICATION	2.9386295107070927E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999740513922296	WITHOUT_CLASSIFICATION	2.5948607770407938E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837205126328	WITHOUT_CLASSIFICATION	1.627948736710538E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998809495853768	WITHOUT_CLASSIFICATION	1.1905041462320123E-4	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999399330862888	WITHOUT_CLASSIFICATION	6.0066913711156484E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998811136236613	WITHOUT_CLASSIFICATION	1.1888637633869327E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998622992028725	WITHOUT_CLASSIFICATION	1.3770079712746838E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999027424394278	WITHOUT_CLASSIFICATION	9.725756057223229E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998348533061225	WITHOUT_CLASSIFICATION	1.651466938773389E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997928558950312	WITHOUT_CLASSIFICATION	2.0714410496881197E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999321066366075	WITHOUT_CLASSIFICATION	6.78933633925183E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999937740272106	WITHOUT_CLASSIFICATION	6.2259727894552765E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999903797940153	WITHOUT_CLASSIFICATION	9.620205984700098E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998531731947777	WITHOUT_CLASSIFICATION	1.468268052222112E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998086636185477	WITHOUT_CLASSIFICATION	1.9133638145226803E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999828247264221	WITHOUT_CLASSIFICATION	1.717527357789269E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999395106137299	WITHOUT_CLASSIFICATION	6.048938627012339E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999407012417852	WITHOUT_CLASSIFICATION	5.929875821463272E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999388701447929	WITHOUT_CLASSIFICATION	6.112985520705585E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999954106531001	WITHOUT_CLASSIFICATION	4.589346899884589E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999403781354224	WITHOUT_CLASSIFICATION	5.9621864577562995E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999323903013783	WITHOUT_CLASSIFICATION	6.760969862165893E-5	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9993955371274881	WITHOUT_CLASSIFICATION	6.04462872511884E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991073006274621	WITHOUT_CLASSIFICATION	8.92699372537947E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994410610728517	WITHOUT_CLASSIFICATION	5.589389271482069E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998340732858164	WITHOUT_CLASSIFICATION	1.659267141836675E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998690430564479	WITHOUT_CLASSIFICATION	1.309569435522135E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998504974881982	WITHOUT_CLASSIFICATION	1.49502511801793E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998397436257193	WITHOUT_CLASSIFICATION	1.6025637428064435E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9977365148015687	WITHOUT_CLASSIFICATION	0.002263485198431364	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998633125701543	WITHOUT_CLASSIFICATION	1.3668742984570967E-4	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999935774462397	WITHOUT_CLASSIFICATION	6.422553760295962E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9981688733403662	WITHOUT_CLASSIFICATION	0.00183112665963381	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998376562727576	WITHOUT_CLASSIFICATION	1.6234372724240623E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998837853496373	WITHOUT_CLASSIFICATION	1.1621465036273538E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998348506999085	WITHOUT_CLASSIFICATION	1.6514930009145067E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999077502046169	WITHOUT_CLASSIFICATION	9.224979538305336E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999933771815231	WITHOUT_CLASSIFICATION	6.622818476955289E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9994655589596545	WITHOUT_CLASSIFICATION	5.34441040345417E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998289946534772	WITHOUT_CLASSIFICATION	1.710053465228348E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998522332394045	WITHOUT_CLASSIFICATION	1.4776676059542548E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997937535526124	WITHOUT_CLASSIFICATION	2.062464473876703E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999903797940153	WITHOUT_CLASSIFICATION	9.620205984700098E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999820295285161	WITHOUT_CLASSIFICATION	1.7970471483884216E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999711864198811	WITHOUT_CLASSIFICATION	2.881358011874968E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999208731314986	WITHOUT_CLASSIFICATION	7.912686850150041E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999321066366075	WITHOUT_CLASSIFICATION	6.78933633925183E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998465646231316	WITHOUT_CLASSIFICATION	1.534353768683654E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999564603238094	WITHOUT_CLASSIFICATION	4.353967619060591E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9987916301627944	WITHOUT_CLASSIFICATION	0.0012083698372056058	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9984658012399757	WITHOUT_CLASSIFICATION	0.0015341987600242324	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997553910277817	WITHOUT_CLASSIFICATION	2.446089722183059E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998422393961935	WITHOUT_CLASSIFICATION	1.5776060380645772E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998629035268153	WITHOUT_CLASSIFICATION	1.370964731847648E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996624989743511	WITHOUT_CLASSIFICATION	3.375010256488094E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999920069674062	WITHOUT_CLASSIFICATION	7.993032593809845E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998895929164062	WITHOUT_CLASSIFICATION	1.1040708359373673E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994956475712622	WITHOUT_CLASSIFICATION	5.043524287377237E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999523932727951	WITHOUT_CLASSIFICATION	4.76067272050287E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999828247264221	WITHOUT_CLASSIFICATION	1.717527357789269E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999322163596006	WITHOUT_CLASSIFICATION	6.778364039941015E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999847310092945	WITHOUT_CLASSIFICATION	1.5268990705489095E-5	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996166599065484	WITHOUT_CLASSIFICATION	3.833400934516203E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999812416225143	WITHOUT_CLASSIFICATION	1.8758377485701184E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997887812692011	WITHOUT_CLASSIFICATION	2.1121873079875124E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.99943133236958	WITHOUT_CLASSIFICATION	5.686676304199669E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998558125428881	WITHOUT_CLASSIFICATION	1.4418745711182083E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998983612138791	WITHOUT_CLASSIFICATION	1.0163878612094498E-4	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.999951179997581	WITHOUT_CLASSIFICATION	4.882000241908564E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934385779904895	WITHOUT_CLASSIFICATION	0.006561422009510479	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998589297784269	WITHOUT_CLASSIFICATION	1.410702215730223E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998443813500969	WITHOUT_CLASSIFICATION	1.5561864990312093E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999321066366075	WITHOUT_CLASSIFICATION	6.78933633925183E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999903797940153	WITHOUT_CLASSIFICATION	9.620205984700098E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9976616318055563	WITHOUT_CLASSIFICATION	0.0023383681944435758	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999916897750447	WITHOUT_CLASSIFICATION	8.310224955259119E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9844716756275697	WITHOUT_CLASSIFICATION	0.015528324372430354	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999903797940153	WITHOUT_CLASSIFICATION	9.620205984700098E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.99992298261717	WITHOUT_CLASSIFICATION	7.701738282993182E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999812416225143	WITHOUT_CLASSIFICATION	1.8758377485701184E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9930495661531391	WITHOUT_CLASSIFICATION	0.006950433846860952	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9929779119294863	WITHOUT_CLASSIFICATION	0.007022088070513637	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999854735855978	WITHOUT_CLASSIFICATION	1.452641440224438E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998422393961935	WITHOUT_CLASSIFICATION	1.5776060380645772E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998629035268153	WITHOUT_CLASSIFICATION	1.370964731847648E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9996624989743511	WITHOUT_CLASSIFICATION	3.375010256488094E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999580976110424	WITHOUT_CLASSIFICATION	4.19023889576453E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9998385341915206	WITHOUT_CLASSIFICATION	1.6146580847942874E-4	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998527561140254	WITHOUT_CLASSIFICATION	1.4724388597468535E-4	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998014077853847	WITHOUT_CLASSIFICATION	1.985922146152635E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999099087886026	WITHOUT_CLASSIFICATION	9.009121139739125E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999903797940153	WITHOUT_CLASSIFICATION	9.620205984700098E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999920069674062	WITHOUT_CLASSIFICATION	7.993032593809845E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998895929164062	WITHOUT_CLASSIFICATION	1.1040708359373673E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894570817986	WITHOUT_CLASSIFICATION	1.0542918201369213E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986978484205	WITHOUT_CLASSIFICATION	1.3021515795003162E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999120208999779	WITHOUT_CLASSIFICATION	8.797910002219043E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997559956565392	WITHOUT_CLASSIFICATION	2.4400434346083226E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9980682999111216	WITHOUT_CLASSIFICATION	0.0019317000888785056	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9989706986695885	WITHOUT_CLASSIFICATION	0.0010293013304115233	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998519793190235	WITHOUT_CLASSIFICATION	1.480206809765063E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999294250831599	WITHOUT_CLASSIFICATION	7.057491684013655E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999385831472499	WITHOUT_CLASSIFICATION	6.141685275015006E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998892024522605	WITHOUT_CLASSIFICATION	1.1079754773950583E-4	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837205126328	WITHOUT_CLASSIFICATION	1.627948736710538E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999967540504446	WITHOUT_CLASSIFICATION	3.2459495553241853E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999168373291506	WITHOUT_CLASSIFICATION	8.316267084940042E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999256259402517	WITHOUT_CLASSIFICATION	7.437405974823296E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9898617686879744	WITHOUT_CLASSIFICATION	0.010138231312025537	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998809495853768	WITHOUT_CLASSIFICATION	1.1905041462320123E-4	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99988016951068	WITHOUT_CLASSIFICATION	1.1983048931991131E-4	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999933771815231	WITHOUT_CLASSIFICATION	6.622818476955289E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9979152387427492	WITHOUT_CLASSIFICATION	0.002084761257250849	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9980207821999315	WITHOUT_CLASSIFICATION	0.0019792178000684756	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999524498724032	WITHOUT_CLASSIFICATION	4.7550127596788404E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.99994370523754	WITHOUT_CLASSIFICATION	5.62947624601238E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999961354148188	WITHOUT_CLASSIFICATION	3.864585181157677E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998694183772767	WITHOUT_CLASSIFICATION	1.3058162272325317E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995986771564948	WITHOUT_CLASSIFICATION	4.013228435052435E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999808899943735	WITHOUT_CLASSIFICATION	1.911000562647108E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998459074783785	WITHOUT_CLASSIFICATION	1.540925216214179E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999218157185522	WITHOUT_CLASSIFICATION	7.818428144785924E-5	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999429323921757	WITHOUT_CLASSIFICATION	5.706760782435145E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999786737409576	WITHOUT_CLASSIFICATION	2.1326259042341124E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999778207225136	WITHOUT_CLASSIFICATION	2.2179277486434342E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998881687788446	WITHOUT_CLASSIFICATION	1.1183122115540503E-4	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999049443350889	WITHOUT_CLASSIFICATION	9.505566491115763E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763867368794	WITHOUT_CLASSIFICATION	1.236132631205072E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997204087693938	WITHOUT_CLASSIFICATION	2.795912306061623E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996509207935388	WITHOUT_CLASSIFICATION	3.490792064612053E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99933621840299	WITHOUT_CLASSIFICATION	6.637815970098568E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9906187750501466	WITHOUT_CLASSIFICATION	0.009381224949853313	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995204435981764	WITHOUT_CLASSIFICATION	4.795564018235978E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996885110142122	WITHOUT_CLASSIFICATION	3.1148898578775417E-4	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9994412907633692	WITHOUT_CLASSIFICATION	5.587092366308442E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999071821734496	WITHOUT_CLASSIFICATION	9.281782655032114E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995204435981764	WITHOUT_CLASSIFICATION	4.795564018235978E-4	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9995806267344715	WITHOUT_CLASSIFICATION	4.1937326552847145E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995524891738286	WITHOUT_CLASSIFICATION	4.4751082617140974E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999921998394226	WITHOUT_CLASSIFICATION	7.800160577403975E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999269477822066	WITHOUT_CLASSIFICATION	7.30522177934619E-5	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9995802343229386	WITHOUT_CLASSIFICATION	4.1976567706137593E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999857075201511	WITHOUT_CLASSIFICATION	1.42924798487624E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999494358611367	WITHOUT_CLASSIFICATION	5.056413886329373E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999330860838617	WITHOUT_CLASSIFICATION	6.69139161382926E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999330860838617	WITHOUT_CLASSIFICATION	6.69139161382926E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999814103686654	WITHOUT_CLASSIFICATION	1.8589631334520738E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998173764055864	WITHOUT_CLASSIFICATION	1.8262359441358604E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997433195239704	WITHOUT_CLASSIFICATION	2.5668047602953715E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999383959463545	WITHOUT_CLASSIFICATION	6.16040536455036E-5	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9977809349420698	WITHOUT_CLASSIFICATION	0.002219065057930213	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999572422489711	WITHOUT_CLASSIFICATION	4.275775102884258E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999979304349375	WITHOUT_CLASSIFICATION	2.06956506245774E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999707021739157	WITHOUT_CLASSIFICATION	2.9297826084213673E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9996726601026998	WITHOUT_CLASSIFICATION	3.2733989730015904E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999952698332757	WITHOUT_CLASSIFICATION	4.730166724349191E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999779430388773	WITHOUT_CLASSIFICATION	2.2056961122670834E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999271746077372	WITHOUT_CLASSIFICATION	7.282539226282413E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999806621069981	WITHOUT_CLASSIFICATION	1.9337893001894617E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9995622527070409	WITHOUT_CLASSIFICATION	4.377472929590498E-4	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998878506456957	WITHOUT_CLASSIFICATION	1.1214935430428285E-4	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996559924616699	WITHOUT_CLASSIFICATION	3.440075383300982E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9992994413043198	WITHOUT_CLASSIFICATION	7.005586956801277E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9963982403023726	WITHOUT_CLASSIFICATION	0.0036017596976273105	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999814093777664	WITHOUT_CLASSIFICATION	1.8590622233532995E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998861217228096	WITHOUT_CLASSIFICATION	1.1387827719051206E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999170406438529	WITHOUT_CLASSIFICATION	8.29593561470945E-5	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998832194542329	WITHOUT_CLASSIFICATION	1.167805457672329E-4	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999749558804003	WITHOUT_CLASSIFICATION	2.5044119599726928E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999617588477279	WITHOUT_CLASSIFICATION	3.82411522721337E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998924841086946	WITHOUT_CLASSIFICATION	1.0751589130535323E-4	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995044839493051	WITHOUT_CLASSIFICATION	4.955160506948226E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9990073867427347	WITHOUT_CLASSIFICATION	9.926132572653128E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996004688029665	WITHOUT_CLASSIFICATION	3.995311970335147E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9962111907269467	WITHOUT_CLASSIFICATION	0.0037888092730531658	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9991755043187567	WITHOUT_CLASSIFICATION	8.244956812434222E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999040281226236	WITHOUT_CLASSIFICATION	9.59718773764222E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999508575286549	WITHOUT_CLASSIFICATION	4.914247134505798E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998940245987832	WITHOUT_CLASSIFICATION	1.0597540121672414E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.999950162256544	WITHOUT_CLASSIFICATION	4.983774345605538E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998983908048715	WITHOUT_CLASSIFICATION	1.0160919512852812E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999250169972181	WITHOUT_CLASSIFICATION	7.498300278193405E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9986627400621	WITHOUT_CLASSIFICATION	0.001337259937900044	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999711783619296	WITHOUT_CLASSIFICATION	2.8821638070392852E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8561756645399251	WITHOUT_CLASSIFICATION	0.1438243354600748	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999439447645546	WITHOUT_CLASSIFICATION	5.6055235445524233E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997969351671526	WITHOUT_CLASSIFICATION	2.0306483284737752E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999828247264221	WITHOUT_CLASSIFICATION	1.717527357789269E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999828247264221	WITHOUT_CLASSIFICATION	1.717527357789269E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997493628386706	WITHOUT_CLASSIFICATION	2.5063716132943625E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999066198030412	WITHOUT_CLASSIFICATION	9.338019695879033E-5	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999111477457735	WITHOUT_CLASSIFICATION	8.885225422655698E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999868292573728	WITHOUT_CLASSIFICATION	1.317074262725401E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999313930138574	WITHOUT_CLASSIFICATION	6.860698614264323E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9995734952868481	WITHOUT_CLASSIFICATION	4.2650471315194057E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999629172749379	WITHOUT_CLASSIFICATION	3.70827250620997E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999982675149139	WITHOUT_CLASSIFICATION	1.7324850860708044E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999990478781463	WITHOUT_CLASSIFICATION	9.521218536309661E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998225947560734	WITHOUT_CLASSIFICATION	1.774052439266912E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99976027501658	WITHOUT_CLASSIFICATION	2.397249834198604E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999842534922302	WITHOUT_CLASSIFICATION	1.57465077698711E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996289516976843	WITHOUT_CLASSIFICATION	3.7104830231579297E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998373357997024	WITHOUT_CLASSIFICATION	1.6266420029751366E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.999842455488484	WITHOUT_CLASSIFICATION	1.5754451151604273E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999660543571565	WITHOUT_CLASSIFICATION	3.394564284356927E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998785803803671	WITHOUT_CLASSIFICATION	1.214196196328501E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999342164132838	WITHOUT_CLASSIFICATION	6.578358671619236E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998900704260192	WITHOUT_CLASSIFICATION	1.0992957398083088E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999825343975028	WITHOUT_CLASSIFICATION	1.7465602497203513E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999342164132838	WITHOUT_CLASSIFICATION	6.578358671619236E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999774065482279	WITHOUT_CLASSIFICATION	2.259345177211664E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999280143570091	WITHOUT_CLASSIFICATION	7.198564299093122E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999750582743453	WITHOUT_CLASSIFICATION	2.4941725654646178E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999864138041059	WITHOUT_CLASSIFICATION	1.3586195894095437E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999438050270641	WITHOUT_CLASSIFICATION	5.619497293574587E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999888395619132	WITHOUT_CLASSIFICATION	1.1160438086725362E-5	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999132496150331	WITHOUT_CLASSIFICATION	8.675038496691164E-5	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998813383000865	WITHOUT_CLASSIFICATION	1.186616999134998E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998356188084544	WITHOUT_CLASSIFICATION	1.6438119154559908E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999906319505907	WITHOUT_CLASSIFICATION	9.368049409307828E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999340502005403	WITHOUT_CLASSIFICATION	6.594979945971291E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999793054787293	WITHOUT_CLASSIFICATION	2.0694521270760638E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999931756323361	WITHOUT_CLASSIFICATION	6.82436766393263E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996952328251214	WITHOUT_CLASSIFICATION	3.0476717487856655E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999068106482507	WITHOUT_CLASSIFICATION	9.318935174926005E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992472975842424	WITHOUT_CLASSIFICATION	7.527024157577397E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997412431571199	WITHOUT_CLASSIFICATION	2.587568428801005E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9947741268557277	WITHOUT_CLASSIFICATION	0.005225873144272261	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998633533316593	WITHOUT_CLASSIFICATION	1.3664666834063726E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999573027338392	WITHOUT_CLASSIFICATION	4.269726616083765E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999349037914506	WITHOUT_CLASSIFICATION	6.509620854944112E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.997457204331833	WITHOUT_CLASSIFICATION	0.002542795668166908	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999946844090197	WITHOUT_CLASSIFICATION	5.3155909803124286E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999624265585	WITHOUT_CLASSIFICATION	3.757344149080469E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997732602975108	WITHOUT_CLASSIFICATION	2.2673970248921922E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9956047576732729	WITHOUT_CLASSIFICATION	0.0043952423267270965	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996525175394188	WITHOUT_CLASSIFICATION	3.474824605811821E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998881687788446	WITHOUT_CLASSIFICATION	1.1183122115540503E-4	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9985667126098199	WITHOUT_CLASSIFICATION	0.00143328739018018	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998424406680285	WITHOUT_CLASSIFICATION	1.5755933197152965E-4	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9812842889566875	WITHOUT_CLASSIFICATION	0.018715711043312454	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999430721726377	WITHOUT_CLASSIFICATION	5.692782736231216E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998316080238089	WITHOUT_CLASSIFICATION	1.6839197619106106E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998313392217336	WITHOUT_CLASSIFICATION	1.6866077826629727E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9982765772086118	WITHOUT_CLASSIFICATION	0.001723422791388204	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999989222916051	WITHOUT_CLASSIFICATION	1.0777083949146888E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999763460984883	WITHOUT_CLASSIFICATION	2.3653901511708667E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999765976852761	WITHOUT_CLASSIFICATION	2.340231472382698E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999968326744488	WITHOUT_CLASSIFICATION	3.167325551197271E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999629678814099	WITHOUT_CLASSIFICATION	3.7032118590132154E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9985022836534713	WITHOUT_CLASSIFICATION	0.001497716346528763	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9995765792766579	WITHOUT_CLASSIFICATION	4.234207233421457E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999791695113281	WITHOUT_CLASSIFICATION	2.0830488671896075E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999120533573894	WITHOUT_CLASSIFICATION	8.794664261059928E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998534211132211	WITHOUT_CLASSIFICATION	1.4657888677893757E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999729547560557	WITHOUT_CLASSIFICATION	2.7045243944253496E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999616245080233	WITHOUT_CLASSIFICATION	3.83754919766889E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999815215075115	WITHOUT_CLASSIFICATION	1.8478492488503248E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999711712176864	WITHOUT_CLASSIFICATION	2.8828782313567482E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999881698006854	WITHOUT_CLASSIFICATION	1.1830199314727437E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999879911189062	WITHOUT_CLASSIFICATION	1.200888109379352E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999023013420424	WITHOUT_CLASSIFICATION	9.769865795765445E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999723127030479	WITHOUT_CLASSIFICATION	2.768729695208926E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999505186105796	WITHOUT_CLASSIFICATION	4.948138942040609E-4	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999935662547543	WITHOUT_CLASSIFICATION	6.4337452456407445E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.997404486135154	WITHOUT_CLASSIFICATION	0.002595513864845987	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999959736762656	WITHOUT_CLASSIFICATION	4.026323734403616E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998775208553993	WITHOUT_CLASSIFICATION	1.2247914460068566E-4	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997528443790871	WITHOUT_CLASSIFICATION	2.471556209129117E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997906910513539	WITHOUT_CLASSIFICATION	2.0930894864604603E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9996666319304066	WITHOUT_CLASSIFICATION	3.3336806959328855E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998864450444078	WITHOUT_CLASSIFICATION	1.1355495559221306E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999984267747264	WITHOUT_CLASSIFICATION	1.573225273594734E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9956834118107215	WITHOUT_CLASSIFICATION	0.004316588189278581	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999820864619165	WITHOUT_CLASSIFICATION	1.791353808350948E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998760628124757	WITHOUT_CLASSIFICATION	1.2393718752436907E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999820864619165	WITHOUT_CLASSIFICATION	1.791353808350948E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993291998810336	WITHOUT_CLASSIFICATION	6.70800118966338E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999661518320342	WITHOUT_CLASSIFICATION	3.384816796585575E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.999932753759847	WITHOUT_CLASSIFICATION	6.724624015302927E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999857640711068	WITHOUT_CLASSIFICATION	1.4235928893106336E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999235848518504	WITHOUT_CLASSIFICATION	7.641514814959132E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998339793048444	WITHOUT_CLASSIFICATION	1.660206951554953E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999332552905466	WITHOUT_CLASSIFICATION	6.674470945345416E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9982194856586669	WITHOUT_CLASSIFICATION	0.0017805143413331622	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999993238653463	WITHOUT_CLASSIFICATION	6.761346536971016E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999973076891211	WITHOUT_CLASSIFICATION	2.6923108788796423E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999127753926128	WITHOUT_CLASSIFICATION	8.722460738709066E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998482341352743	WITHOUT_CLASSIFICATION	1.517658647256454E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993398288871295	WITHOUT_CLASSIFICATION	6.601711128706551E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9441156151140662	WITHOUT_CLASSIFICATION	0.055884384885933835	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999881248445038	WITHOUT_CLASSIFICATION	1.1875155496068191E-5	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998259288033904	WITHOUT_CLASSIFICATION	1.7407119660966912E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999557046741497	WITHOUT_CLASSIFICATION	4.4295325850327124E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999557046741497	WITHOUT_CLASSIFICATION	4.4295325850327124E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998225947560734	WITHOUT_CLASSIFICATION	1.774052439266912E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999350788494	WITHOUT_CLASSIFICATION	6.49211505999974E-5	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999941723945	WITHOUT_CLASSIFICATION	5.827605499971146E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9993553616020326	WITHOUT_CLASSIFICATION	6.446383979674024E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998803122452878	WITHOUT_CLASSIFICATION	1.19687754712153E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9997256887464213	WITHOUT_CLASSIFICATION	2.743112535787309E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9983205149278014	WITHOUT_CLASSIFICATION	0.001679485072198663	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998702219540231	WITHOUT_CLASSIFICATION	1.2977804597685914E-4	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999861600363334	WITHOUT_CLASSIFICATION	1.3839963666546662E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998914317960879	WITHOUT_CLASSIFICATION	1.0856820391205358E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998939213547376	WITHOUT_CLASSIFICATION	1.0607864526235151E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999878649979325	WITHOUT_CLASSIFICATION	1.2135002067480301E-5	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999342467527407	WITHOUT_CLASSIFICATION	6.575324725928499E-5	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999432536898535	WITHOUT_CLASSIFICATION	5.674631014642726E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996081127321074	WITHOUT_CLASSIFICATION	3.918872678926126E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999358031029506	WITHOUT_CLASSIFICATION	6.419689704940305E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997551133884753	WITHOUT_CLASSIFICATION	2.448866115247097E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994526255801691	WITHOUT_CLASSIFICATION	5.473744198309122E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9998810463636985	WITHOUT_CLASSIFICATION	1.1895363630157683E-4	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999662701661499	WITHOUT_CLASSIFICATION	3.372983385001992E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999863604941722	WITHOUT_CLASSIFICATION	1.3639505827653305E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999640818190046	WITHOUT_CLASSIFICATION	3.5918180995355474E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999780565124993	WITHOUT_CLASSIFICATION	2.19434875007054E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999573132898525	WITHOUT_CLASSIFICATION	4.268671014751638E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9995667066084282	WITHOUT_CLASSIFICATION	4.3329339157186864E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999423856332533	WITHOUT_CLASSIFICATION	5.761436674665425E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997666720767112	WITHOUT_CLASSIFICATION	2.333279232888599E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9983689567116879	WITHOUT_CLASSIFICATION	0.0016310432883120086	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999853448346101	WITHOUT_CLASSIFICATION	1.465516538989922E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996366516028581	WITHOUT_CLASSIFICATION	3.6334839714190746E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998522287130663	WITHOUT_CLASSIFICATION	1.4777128693365844E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999955447942556	WITHOUT_CLASSIFICATION	4.455205744426022E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9980476795415174	WITHOUT_CLASSIFICATION	0.0019523204584826215	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998770636873705	WITHOUT_CLASSIFICATION	1.2293631262956766E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998622400137754	WITHOUT_CLASSIFICATION	1.3775998622452283E-4	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999855118152063	WITHOUT_CLASSIFICATION	1.4488184793640563E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999764632149254	WITHOUT_CLASSIFICATION	2.35367850745581E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999785162053573	WITHOUT_CLASSIFICATION	2.148379464274345E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999932539150847	WITHOUT_CLASSIFICATION	6.746084915292916E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9970354047894024	WITHOUT_CLASSIFICATION	0.0029645952105976157	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997513714692723	WITHOUT_CLASSIFICATION	2.486285307276699E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998393961003598	WITHOUT_CLASSIFICATION	1.6060389964024763E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9998587719668134	WITHOUT_CLASSIFICATION	1.4122803318657393E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9728643298596859	WITHOUT_CLASSIFICATION	0.027135670140314087	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991126554017259	WITHOUT_CLASSIFICATION	8.873445982741491E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9927184911816835	WITHOUT_CLASSIFICATION	0.0072815088183163686	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9640036026044552	WITHOUT_CLASSIFICATION	0.03599639739554479	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999983649330876	WITHOUT_CLASSIFICATION	1.635066912481395E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998523347807655	WITHOUT_CLASSIFICATION	1.476652192344993E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999743322916038	WITHOUT_CLASSIFICATION	2.5667708396180515E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998393961003598	WITHOUT_CLASSIFICATION	1.6060389964024763E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999572465260664	WITHOUT_CLASSIFICATION	4.275347393358733E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999312132532249	WITHOUT_CLASSIFICATION	6.878674677511935E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995825846495402	WITHOUT_CLASSIFICATION	4.1741535045986943E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999847599024915	WITHOUT_CLASSIFICATION	1.5240097508491924E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.99992298261717	WITHOUT_CLASSIFICATION	7.701738282993182E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.99992298261717	WITHOUT_CLASSIFICATION	7.701738282993182E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999978403811172	WITHOUT_CLASSIFICATION	2.159618882806521E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993677303744226	WITHOUT_CLASSIFICATION	6.322696255774387E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999761097359822	WITHOUT_CLASSIFICATION	2.3890264017788653E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9992234502366723	WITHOUT_CLASSIFICATION	7.765497633278057E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997712743510246	WITHOUT_CLASSIFICATION	2.2872564897537508E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999620233884353	WITHOUT_CLASSIFICATION	3.797661156472071E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999991627132485	WITHOUT_CLASSIFICATION	8.37286751492794E-6	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9993514542528794	WITHOUT_CLASSIFICATION	6.48545747120586E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999565200874783	WITHOUT_CLASSIFICATION	4.3479912521799526E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996671807999081	WITHOUT_CLASSIFICATION	3.3281920009194474E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9984120724605489	WITHOUT_CLASSIFICATION	0.0015879275394510607	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998523585650018	WITHOUT_CLASSIFICATION	1.4764143499822945E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999326789693088	WITHOUT_CLASSIFICATION	6.732103069110268E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9948717963650637	WITHOUT_CLASSIFICATION	0.005128203634936191	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999130889500771	WITHOUT_CLASSIFICATION	8.691104992290254E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997851343223332	WITHOUT_CLASSIFICATION	2.1486567766680132E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9631923254036332	WITHOUT_CLASSIFICATION	0.0368076745963668	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998639441568667	WITHOUT_CLASSIFICATION	1.3605584313330346E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999779079382981	WITHOUT_CLASSIFICATION	2.2092061701875713E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996802900539126	WITHOUT_CLASSIFICATION	3.197099460874835E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999242694111427	WITHOUT_CLASSIFICATION	7.573058885736331E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999994564363391	WITHOUT_CLASSIFICATION	5.435636608062743E-7	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999377070687654	WITHOUT_CLASSIFICATION	6.229293123462562E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999562017270881	WITHOUT_CLASSIFICATION	4.379827291190674E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999729174326992	WITHOUT_CLASSIFICATION	2.7082567300777344E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999670390099802	WITHOUT_CLASSIFICATION	3.29609900198583E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999794085499965	WITHOUT_CLASSIFICATION	2.0591450003565617E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999522926610281	WITHOUT_CLASSIFICATION	4.7707338971839126E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999757798544976	WITHOUT_CLASSIFICATION	2.4220145502354467E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999530685208031	WITHOUT_CLASSIFICATION	4.693147919684333E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999522926610281	WITHOUT_CLASSIFICATION	4.7707338971839126E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9995583152752916	WITHOUT_CLASSIFICATION	4.4168472470832446E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999766821456292	WITHOUT_CLASSIFICATION	2.3317854370826454E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999208484584677	WITHOUT_CLASSIFICATION	7.915154153226069E-5	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999657268732748	WITHOUT_CLASSIFICATION	3.427312672519731E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999889955946024	WITHOUT_CLASSIFICATION	1.1004405397602182E-4	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998939213547376	WITHOUT_CLASSIFICATION	1.0607864526235151E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999923088368793	WITHOUT_CLASSIFICATION	7.691163120699029E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998694183772767	WITHOUT_CLASSIFICATION	1.3058162272325317E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.998424964921788	WITHOUT_CLASSIFICATION	0.0015750350782119506	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999136407790545	WITHOUT_CLASSIFICATION	8.635922094537799E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999808768506482	WITHOUT_CLASSIFICATION	1.9123149351780678E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999618908894491	WITHOUT_CLASSIFICATION	3.81091105508559E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999973061515622	WITHOUT_CLASSIFICATION	2.6938484377934018E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999680036427738	WITHOUT_CLASSIFICATION	3.199635722627867E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999198558241877	WITHOUT_CLASSIFICATION	8.014417581217384E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998765181452678	WITHOUT_CLASSIFICATION	1.23481854732167E-4	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999503003285719	WITHOUT_CLASSIFICATION	4.969967142815526E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999786178753554	WITHOUT_CLASSIFICATION	2.1382124644604293E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999908339270076	WITHOUT_CLASSIFICATION	9.166072992388912E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999065110249378	WITHOUT_CLASSIFICATION	9.348897506229425E-5	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999356752276704	WITHOUT_CLASSIFICATION	6.432477232970811E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999592825256175	WITHOUT_CLASSIFICATION	4.071747438242156E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999598780259454	WITHOUT_CLASSIFICATION	4.0121974054496665E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999919304873209	WITHOUT_CLASSIFICATION	8.069512679119749E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998886190141787	WITHOUT_CLASSIFICATION	1.1138098582125352E-4	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998764981935591	WITHOUT_CLASSIFICATION	1.2350180644105454E-4	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9984208856876758	WITHOUT_CLASSIFICATION	0.0015791143123241446	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999463724378204	WITHOUT_CLASSIFICATION	5.3627562179674354E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999490960202055	WITHOUT_CLASSIFICATION	5.0903979794441154E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998067365120239	WITHOUT_CLASSIFICATION	1.9326348797623418E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997191968013658	WITHOUT_CLASSIFICATION	2.808031986341651E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9979307897982994	WITHOUT_CLASSIFICATION	0.002069210201700547	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999794063499444	WITHOUT_CLASSIFICATION	2.0593650055658595E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999284825868083	WITHOUT_CLASSIFICATION	7.15174131916478E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999989382613222	WITHOUT_CLASSIFICATION	1.0617386777489518E-6	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997360167394835	WITHOUT_CLASSIFICATION	2.639832605165627E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999567726395698	WITHOUT_CLASSIFICATION	4.3227360430246316E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998139813807025	WITHOUT_CLASSIFICATION	1.860186192974816E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998081211980696	WITHOUT_CLASSIFICATION	1.918788019303383E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995710207765697	WITHOUT_CLASSIFICATION	4.2897922343028454E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999950189633898	WITHOUT_CLASSIFICATION	4.981036610095489E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999870663502605	WITHOUT_CLASSIFICATION	1.2933649739521888E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998776782854032	WITHOUT_CLASSIFICATION	1.2232171459675752E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999958265246648	WITHOUT_CLASSIFICATION	4.173475335238475E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999304119467969	WITHOUT_CLASSIFICATION	6.958805320305688E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999988172549656	WITHOUT_CLASSIFICATION	1.1827450342666254E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9988650420456092	WITHOUT_CLASSIFICATION	0.0011349579543908064	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.99989129133228	WITHOUT_CLASSIFICATION	1.087086677199255E-4	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999145917358464	WITHOUT_CLASSIFICATION	8.54082641536204E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993570395005857	WITHOUT_CLASSIFICATION	6.429604994142087E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997123464041151	WITHOUT_CLASSIFICATION	2.876535958848875E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998097842782903	WITHOUT_CLASSIFICATION	1.90215721709801E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998558142524403	WITHOUT_CLASSIFICATION	1.44185747559803E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999992768606059	WITHOUT_CLASSIFICATION	7.231393941045535E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999858230896983	WITHOUT_CLASSIFICATION	1.4176910301713109E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9998900803671311	WITHOUT_CLASSIFICATION	1.0991963286885039E-4	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999207595331866	WITHOUT_CLASSIFICATION	7.924046681338189E-5	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998855074991428	WITHOUT_CLASSIFICATION	1.1449250085722053E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998067365120239	WITHOUT_CLASSIFICATION	1.9326348797623418E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999863617185349	WITHOUT_CLASSIFICATION	1.3638281465091234E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999873088969293	WITHOUT_CLASSIFICATION	1.2691103070620789E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998044103145795	WITHOUT_CLASSIFICATION	1.955896854204566E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999175271416328	WITHOUT_CLASSIFICATION	8.247285836708881E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999985888760691	WITHOUT_CLASSIFICATION	1.4111239309214085E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9994913971085607	WITHOUT_CLASSIFICATION	5.086028914393839E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997546352249014	WITHOUT_CLASSIFICATION	2.4536477509864264E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999990513872595	WITHOUT_CLASSIFICATION	9.486127404985593E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999766650019757	WITHOUT_CLASSIFICATION	2.3334998024319607E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998645306137298	WITHOUT_CLASSIFICATION	1.3546938627027175E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9986253140646989	WITHOUT_CLASSIFICATION	0.0013746859353011304	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996010054507236	WITHOUT_CLASSIFICATION	3.98994549276399E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999971206947453	WITHOUT_CLASSIFICATION	2.8793052546917603E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999777595025111	WITHOUT_CLASSIFICATION	2.2240497488908989E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993291998810336	WITHOUT_CLASSIFICATION	6.70800118966338E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999895515648838	WITHOUT_CLASSIFICATION	1.0448435116195135E-4	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9984518199232084	WITHOUT_CLASSIFICATION	0.001548180076791555	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998315731687644	WITHOUT_CLASSIFICATION	1.6842683123559116E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999789158447515	WITHOUT_CLASSIFICATION	2.108415524848934E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999880976955943	WITHOUT_CLASSIFICATION	1.1902304405688994E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998793773951283	WITHOUT_CLASSIFICATION	1.2062260487158865E-4	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998793773951283	WITHOUT_CLASSIFICATION	1.2062260487158865E-4	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999687710549044	WITHOUT_CLASSIFICATION	3.122894509552493E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999904222475536	WITHOUT_CLASSIFICATION	9.57775244640395E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997523665292404	WITHOUT_CLASSIFICATION	2.4763347075961795E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999249944102374	WITHOUT_CLASSIFICATION	7.500558976267158E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999335749603766	WITHOUT_CLASSIFICATION	6.642503962337293E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999432660043605	WITHOUT_CLASSIFICATION	5.6733995639558185E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999525875091921	WITHOUT_CLASSIFICATION	4.741249080779214E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993768638572317	WITHOUT_CLASSIFICATION	6.231361427683177E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993768638572317	WITHOUT_CLASSIFICATION	6.231361427683177E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996994720874973	WITHOUT_CLASSIFICATION	3.0052791250264005E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999567741524783	WITHOUT_CLASSIFICATION	4.322584752175763E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998589007216322	WITHOUT_CLASSIFICATION	1.4109927836775235E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999889523531297	WITHOUT_CLASSIFICATION	1.104764687029802E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999889523531297	WITHOUT_CLASSIFICATION	1.104764687029802E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999889523531297	WITHOUT_CLASSIFICATION	1.104764687029802E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999690550974233	WITHOUT_CLASSIFICATION	3.0944902576651155E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999365486247411	WITHOUT_CLASSIFICATION	6.345137525877472E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999971453433952	WITHOUT_CLASSIFICATION	2.8546566046945095E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998457692108037	WITHOUT_CLASSIFICATION	1.54230789196327E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999406102026375	WITHOUT_CLASSIFICATION	5.938979736259123E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999884603166783	WITHOUT_CLASSIFICATION	1.1539683321654835E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999766733436696	WITHOUT_CLASSIFICATION	2.332665633041207E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9592824427095797	WITHOUT_CLASSIFICATION	0.04071755729042021	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999901285053532	WITHOUT_CLASSIFICATION	9.871494646734133E-6	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999335792938252	WITHOUT_CLASSIFICATION	6.6420706174877E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999296954121928	WITHOUT_CLASSIFICATION	7.030458780713269E-5	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9956530588527371	WITHOUT_CLASSIFICATION	0.0043469411472628295	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999841894164823	WITHOUT_CLASSIFICATION	1.5810583517764343E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999785484172482	WITHOUT_CLASSIFICATION	2.1451582751765922E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999932980001219	WITHOUT_CLASSIFICATION	6.701999878127702E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999872958176622	WITHOUT_CLASSIFICATION	1.270418233767817E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999379063035748	WITHOUT_CLASSIFICATION	6.209369642516552E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998793773951283	WITHOUT_CLASSIFICATION	1.2062260487158865E-4	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999850523827124	WITHOUT_CLASSIFICATION	1.4947617287576314E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9638353789950646	WITHOUT_CLASSIFICATION	0.03616462100493552	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997945332002486	WITHOUT_CLASSIFICATION	2.0546679975142864E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999519170403153	WITHOUT_CLASSIFICATION	4.808295968476184E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999413568771867	WITHOUT_CLASSIFICATION	5.864312281334192E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999177275871507	WITHOUT_CLASSIFICATION	8.227241284938273E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999899784151508	WITHOUT_CLASSIFICATION	1.0021584849134684E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997679728664087	WITHOUT_CLASSIFICATION	2.3202713359129676E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999908661620706	WITHOUT_CLASSIFICATION	9.133837929396802E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999158048759331	WITHOUT_CLASSIFICATION	8.419512406691426E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997585434376579	WITHOUT_CLASSIFICATION	2.4145656234200716E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999943088941339	WITHOUT_CLASSIFICATION	5.691105866097624E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9997495174368257	WITHOUT_CLASSIFICATION	2.5048256317422574E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998577967394345	WITHOUT_CLASSIFICATION	1.4220326056552698E-4	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999805219403338	WITHOUT_CLASSIFICATION	1.9478059666245166E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8369717307856234	WITHOUT_CLASSIFICATION	0.16302826921437652	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9993547969790896	WITHOUT_CLASSIFICATION	6.452030209105011E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999878155560661	WITHOUT_CLASSIFICATION	1.218444393396839E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999774606230442	WITHOUT_CLASSIFICATION	2.2539376955837806E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999774606230442	WITHOUT_CLASSIFICATION	2.2539376955837806E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999129017159355	WITHOUT_CLASSIFICATION	8.709828406449588E-5	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999688565097866	WITHOUT_CLASSIFICATION	3.1143490213318895E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999031950473233	WITHOUT_CLASSIFICATION	9.680495267671177E-5	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999495619459304	WITHOUT_CLASSIFICATION	5.043805406948329E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997041661889131	WITHOUT_CLASSIFICATION	2.958338110867837E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999813954924781	WITHOUT_CLASSIFICATION	1.8604507521870182E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998275301537592	WITHOUT_CLASSIFICATION	1.724698462406705E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998863159748724	WITHOUT_CLASSIFICATION	1.136840251276061E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999736287329202	WITHOUT_CLASSIFICATION	2.637126707988109E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999607253615345	WITHOUT_CLASSIFICATION	3.9274638465600075E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9995260409605703	WITHOUT_CLASSIFICATION	4.7395903942964714E-4	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996055645599156	WITHOUT_CLASSIFICATION	3.944354400843532E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999957763983615	WITHOUT_CLASSIFICATION	4.223601638607741E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999393774707659	WITHOUT_CLASSIFICATION	6.062252923401135E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999939137216631	WITHOUT_CLASSIFICATION	6.086278336882651E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999515285742325	WITHOUT_CLASSIFICATION	4.8471425767508463E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999770440021851	WITHOUT_CLASSIFICATION	2.2955997814844405E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999770440021851	WITHOUT_CLASSIFICATION	2.2955997814844405E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998039528663625	WITHOUT_CLASSIFICATION	1.9604713363764932E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9968517668122793	WITHOUT_CLASSIFICATION	0.003148233187720611	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9995401092424379	WITHOUT_CLASSIFICATION	4.5989075756208404E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995401092424379	WITHOUT_CLASSIFICATION	4.5989075756208404E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998487542941686	WITHOUT_CLASSIFICATION	1.5124570583145285E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996207367518447	WITHOUT_CLASSIFICATION	3.7926324815539897E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999199661990552	WITHOUT_CLASSIFICATION	8.003380094486504E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987004154357537	WITHOUT_CLASSIFICATION	0.0012995845642463407	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9993004002374585	WITHOUT_CLASSIFICATION	6.995997625415756E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998620700807633	WITHOUT_CLASSIFICATION	1.379299192367653E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999960577619989	WITHOUT_CLASSIFICATION	3.94223800108966E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987004154357537	WITHOUT_CLASSIFICATION	0.0012995845642463407	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9982543959476015	WITHOUT_CLASSIFICATION	0.001745604052398594	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998892522971549	WITHOUT_CLASSIFICATION	1.1074770284520307E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999209134188269	WITHOUT_CLASSIFICATION	7.908658117314546E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9997793463344221	WITHOUT_CLASSIFICATION	2.2065366557793274E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998954693859755	WITHOUT_CLASSIFICATION	1.0453061402444626E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999965157075633	WITHOUT_CLASSIFICATION	3.4842924366289676E-6	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999794835056877	WITHOUT_CLASSIFICATION	2.0516494312259363E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999320299954748	WITHOUT_CLASSIFICATION	6.797000452514025E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998567157313115	WITHOUT_CLASSIFICATION	1.432842686885192E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9978799122208172	WITHOUT_CLASSIFICATION	0.0021200877791827904	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999200026064998	WITHOUT_CLASSIFICATION	7.999739350014508E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999116867393665	WITHOUT_CLASSIFICATION	8.831326063351192E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999323940788879	WITHOUT_CLASSIFICATION	6.760592111211298E-5	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999901418988889	WITHOUT_CLASSIFICATION	9.858101111096173E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999167847198873	WITHOUT_CLASSIFICATION	8.321528011272184E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999309244390623	WITHOUT_CLASSIFICATION	6.907556093780535E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999759287066191	WITHOUT_CLASSIFICATION	2.4071293380927347E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9993338547496605	WITHOUT_CLASSIFICATION	6.661452503394712E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9993338547496605	WITHOUT_CLASSIFICATION	6.661452503394712E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999794835056877	WITHOUT_CLASSIFICATION	2.0516494312259363E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9995493822432877	WITHOUT_CLASSIFICATION	4.506177567122767E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996273494981255	WITHOUT_CLASSIFICATION	3.726505018745088E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9970116924314494	WITHOUT_CLASSIFICATION	0.0029883075685506184	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9997816896571681	WITHOUT_CLASSIFICATION	2.1831034283190652E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999932714062091	WITHOUT_CLASSIFICATION	6.728593790853528E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999809943908683	WITHOUT_CLASSIFICATION	1.9005609131699005E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999177077969474	WITHOUT_CLASSIFICATION	8.229220305253185E-5	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9990480684935904	WITHOUT_CLASSIFICATION	9.519315064095378E-4	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999977895877206	WITHOUT_CLASSIFICATION	2.2104122795247558E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999237084881487	WITHOUT_CLASSIFICATION	7.629151185130133E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999825986662039	WITHOUT_CLASSIFICATION	1.7401333796112012E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9982744858829237	WITHOUT_CLASSIFICATION	0.0017255141170763664	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9993517450469845	WITHOUT_CLASSIFICATION	6.482549530154367E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999983404126067	WITHOUT_CLASSIFICATION	1.6595873932785096E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999698311294241	WITHOUT_CLASSIFICATION	3.0168870575911802E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999937595845606	WITHOUT_CLASSIFICATION	6.2404154394348195E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999980003081687	WITHOUT_CLASSIFICATION	1.999691831288543E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999305212645756	WITHOUT_CLASSIFICATION	6.947873542448815E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999848069539021	WITHOUT_CLASSIFICATION	1.519304609782733E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999627551486581	WITHOUT_CLASSIFICATION	3.7244851342003036E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999882599392876	WITHOUT_CLASSIFICATION	1.1740060712446771E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998420843824016	WITHOUT_CLASSIFICATION	1.579156175983753E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999475207047192	WITHOUT_CLASSIFICATION	5.247929528091084E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999939508840273	WITHOUT_CLASSIFICATION	6.049115972775138E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999987817461558	WITHOUT_CLASSIFICATION	1.2182538442588763E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999334010859044	WITHOUT_CLASSIFICATION	6.659891409554343E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999617732026267	WITHOUT_CLASSIFICATION	3.822679737343136E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999756850789906	WITHOUT_CLASSIFICATION	2.431492100945896E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999952359302372	WITHOUT_CLASSIFICATION	4.764069762764146E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9991474837161061	WITHOUT_CLASSIFICATION	8.525162838940365E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999698311294241	WITHOUT_CLASSIFICATION	3.0168870575911802E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999842052148971	WITHOUT_CLASSIFICATION	1.5794785102969688E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998224331516652	WITHOUT_CLASSIFICATION	1.7756684833474199E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999907076613095	WITHOUT_CLASSIFICATION	9.29233869049377E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999144708724353	WITHOUT_CLASSIFICATION	8.552912756473188E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995824100858904	WITHOUT_CLASSIFICATION	4.175899141096263E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998348858146644	WITHOUT_CLASSIFICATION	1.651141853356175E-4	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999469482258715	WITHOUT_CLASSIFICATION	5.3051774128535605E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998814327349452	WITHOUT_CLASSIFICATION	1.185672650547174E-4	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9990905500579159	WITHOUT_CLASSIFICATION	9.094499420840617E-4	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999580899332106	WITHOUT_CLASSIFICATION	4.1910066789312576E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9996379540982337	WITHOUT_CLASSIFICATION	3.6204590176635654E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5441957640295262	DEFECT	0.45580423597047387	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9995839231338155	WITHOUT_CLASSIFICATION	4.160768661844026E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998380354206698	WITHOUT_CLASSIFICATION	1.6196457933022988E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998631521065758	WITHOUT_CLASSIFICATION	1.3684789342415725E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9993373061301073	WITHOUT_CLASSIFICATION	6.62693869892701E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9993120152833315	WITHOUT_CLASSIFICATION	6.879847166685487E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999988393371418	WITHOUT_CLASSIFICATION	1.1606628581943922E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998766108402893	WITHOUT_CLASSIFICATION	1.2338915971071227E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996318227283478	WITHOUT_CLASSIFICATION	3.681772716522092E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9993004002374585	WITHOUT_CLASSIFICATION	6.995997625415756E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996857118061	WITHOUT_CLASSIFICATION	3.1428819382301157E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999698311294241	WITHOUT_CLASSIFICATION	3.0168870575911802E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9963384032004585	WITHOUT_CLASSIFICATION	0.0036615967995414127	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999796985864518	WITHOUT_CLASSIFICATION	2.0301413548195173E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999737947908176	WITHOUT_CLASSIFICATION	2.6205209182373694E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999737366268189	WITHOUT_CLASSIFICATION	2.6263373181134797E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999909796393383	WITHOUT_CLASSIFICATION	9.020360661698309E-5	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999938486786166	WITHOUT_CLASSIFICATION	6.151321383404398E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998038460965466	WITHOUT_CLASSIFICATION	1.9615390345351615E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999911573438525	WITHOUT_CLASSIFICATION	8.842656147529584E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9846334256191265	WITHOUT_CLASSIFICATION	0.015366574380873585	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998462944127887	WITHOUT_CLASSIFICATION	1.5370558721130957E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999868215834944	WITHOUT_CLASSIFICATION	1.3178416505707761E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999972550172894	WITHOUT_CLASSIFICATION	2.7449827105850234E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999573453733959	WITHOUT_CLASSIFICATION	4.265462660413381E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999573453733959	WITHOUT_CLASSIFICATION	4.265462660413381E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999970238386828	WITHOUT_CLASSIFICATION	2.976161317121957E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997471802880851	WITHOUT_CLASSIFICATION	2.5281971191491693E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999967450815608	WITHOUT_CLASSIFICATION	3.254918439134465E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999918490589854	WITHOUT_CLASSIFICATION	8.150941014540104E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998892087531054	WITHOUT_CLASSIFICATION	1.1079124689471523E-4	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999397834891969	WITHOUT_CLASSIFICATION	6.021651080303505E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9996478253427523	WITHOUT_CLASSIFICATION	3.521746572476784E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998555910360895	WITHOUT_CLASSIFICATION	1.444089639105767E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999700448265763	WITHOUT_CLASSIFICATION	2.9955173423720158E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999626761768087	WITHOUT_CLASSIFICATION	3.732382319137248E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999081048189326	WITHOUT_CLASSIFICATION	9.189518106744241E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999081048189326	WITHOUT_CLASSIFICATION	9.189518106744241E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9996491809113155	WITHOUT_CLASSIFICATION	3.508190886845018E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999261496677472	WITHOUT_CLASSIFICATION	7.38503322528267E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9985997675611855	WITHOUT_CLASSIFICATION	0.0014002324388143995	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999755243599553	WITHOUT_CLASSIFICATION	2.4475640044693787E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999923069449927	WITHOUT_CLASSIFICATION	7.693055007345491E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9995078843629468	WITHOUT_CLASSIFICATION	4.921156370532035E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998405226392632	WITHOUT_CLASSIFICATION	1.5947736073684135E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991602656865811	WITHOUT_CLASSIFICATION	8.397343134189672E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998854949320715	WITHOUT_CLASSIFICATION	1.1450506792860479E-4	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998725907067126	WITHOUT_CLASSIFICATION	1.2740929328738433E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999749556491786	WITHOUT_CLASSIFICATION	2.504435082143471E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361776515926	WITHOUT_CLASSIFICATION	1.638223484074568E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999202964501223	WITHOUT_CLASSIFICATION	7.970354987777365E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996476806336231	WITHOUT_CLASSIFICATION	3.523193663768573E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994850650029624	WITHOUT_CLASSIFICATION	5.149349970376242E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999227093573942	WITHOUT_CLASSIFICATION	7.72906426057218E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934385779904895	WITHOUT_CLASSIFICATION	0.006561422009510479	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997166287912491	WITHOUT_CLASSIFICATION	2.8337120875087323E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999935531694547	WITHOUT_CLASSIFICATION	6.446830545272894E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999304005283945	WITHOUT_CLASSIFICATION	6.959947160536851E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996802900539126	WITHOUT_CLASSIFICATION	3.197099460874835E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999607470137568	WITHOUT_CLASSIFICATION	3.9252986243284044E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995797851330162	WITHOUT_CLASSIFICATION	4.2021486698383013E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999297644922615	WITHOUT_CLASSIFICATION	7.023550773857844E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999359320646758	WITHOUT_CLASSIFICATION	6.40679353242138E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999151339597233	WITHOUT_CLASSIFICATION	8.486604027673924E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999890088062035	WITHOUT_CLASSIFICATION	1.0991193796492582E-4	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999854555024748	WITHOUT_CLASSIFICATION	1.4544497525147713E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999512735656493	WITHOUT_CLASSIFICATION	4.872643435068067E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999256259402517	WITHOUT_CLASSIFICATION	7.437405974823296E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9970732851657391	WITHOUT_CLASSIFICATION	0.002926714834260897	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999736608069936	WITHOUT_CLASSIFICATION	2.6339193006387717E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999999894170272	WITHOUT_CLASSIFICATION	1.0582972800727446E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998696782854576	WITHOUT_CLASSIFICATION	1.3032171454229838E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999137349368556	WITHOUT_CLASSIFICATION	8.626506314432057E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999972065583544	WITHOUT_CLASSIFICATION	2.7934416455219485E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998765681163474	WITHOUT_CLASSIFICATION	1.2343188365257314E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998260143907219	WITHOUT_CLASSIFICATION	1.739856092780715E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999853084311392	WITHOUT_CLASSIFICATION	1.4691568860849407E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9990312234503868	WITHOUT_CLASSIFICATION	9.687765496132133E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9996761692900115	WITHOUT_CLASSIFICATION	3.238307099885299E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998980178696603	WITHOUT_CLASSIFICATION	1.0198213033972641E-4	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999444285528032	WITHOUT_CLASSIFICATION	5.557144719688415E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997701967052762	WITHOUT_CLASSIFICATION	2.2980329472376877E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999328832069664	WITHOUT_CLASSIFICATION	6.711679303361889E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9989388169966978	WITHOUT_CLASSIFICATION	0.001061183003302155	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999751505907173	WITHOUT_CLASSIFICATION	2.4849409282729126E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999364950086702	WITHOUT_CLASSIFICATION	6.350499132981542E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999978670238306	WITHOUT_CLASSIFICATION	2.1329761694058103E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.998571630112085	WITHOUT_CLASSIFICATION	0.0014283698879149671	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999461417355635	WITHOUT_CLASSIFICATION	5.385826443649802E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999136676362319	WITHOUT_CLASSIFICATION	8.633236376810743E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999650773080446	WITHOUT_CLASSIFICATION	3.4922691955350035E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999252204145861	WITHOUT_CLASSIFICATION	7.477958541393374E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999650773080446	WITHOUT_CLASSIFICATION	3.4922691955350035E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.994832202619494	WITHOUT_CLASSIFICATION	0.005167797380506015	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9956974797162563	WITHOUT_CLASSIFICATION	0.004302520283743681	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999537715793083	WITHOUT_CLASSIFICATION	4.622842069163369E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999993738904874	WITHOUT_CLASSIFICATION	6.261095125934053E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998944175659297	WITHOUT_CLASSIFICATION	1.0558243407021682E-4	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999537715793083	WITHOUT_CLASSIFICATION	4.622842069163369E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999963876977418	WITHOUT_CLASSIFICATION	3.6123022582496097E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997326996014742	WITHOUT_CLASSIFICATION	2.6730039852592086E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999580333278222	WITHOUT_CLASSIFICATION	4.1966672177842776E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999743439358587	WITHOUT_CLASSIFICATION	2.5656064141302427E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999917261989478	WITHOUT_CLASSIFICATION	8.273801052221937E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999704656382725	WITHOUT_CLASSIFICATION	2.9534361727607695E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999991315880452	WITHOUT_CLASSIFICATION	8.684119548182736E-7	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999218024932854	WITHOUT_CLASSIFICATION	7.819750671451674E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999820511202482	WITHOUT_CLASSIFICATION	1.794887975179781E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999473231701362	WITHOUT_CLASSIFICATION	5.267682986382139E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9990632772956359	WITHOUT_CLASSIFICATION	9.36722704364109E-4	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999181217518099	WITHOUT_CLASSIFICATION	8.187824819000592E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998508136544303	WITHOUT_CLASSIFICATION	1.4918634556978396E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999445383172353	WITHOUT_CLASSIFICATION	5.5461682764672114E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999362452674542	WITHOUT_CLASSIFICATION	6.375473254580132E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996030508308281	WITHOUT_CLASSIFICATION	3.969491691718689E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9992933042998101	WITHOUT_CLASSIFICATION	7.066957001899283E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995322343131324	WITHOUT_CLASSIFICATION	4.6776568686769123E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998682958849753	WITHOUT_CLASSIFICATION	1.3170411502464333E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9985091830614348	WITHOUT_CLASSIFICATION	0.0014908169385652837	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9990972423201155	WITHOUT_CLASSIFICATION	9.027576798844199E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9996634278564214	WITHOUT_CLASSIFICATION	3.365721435786468E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997177561989958	WITHOUT_CLASSIFICATION	2.822438010042214E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9989683928212989	WITHOUT_CLASSIFICATION	0.0010316071787010714	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9591184732994457	WITHOUT_CLASSIFICATION	0.040881526700554255	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9827535581515463	WITHOUT_CLASSIFICATION	0.0172464418484537	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999903185933513	WITHOUT_CLASSIFICATION	9.681406648658903E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999168549456755	WITHOUT_CLASSIFICATION	8.314505432454042E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9995980820007011	WITHOUT_CLASSIFICATION	4.019179992988936E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.99999386087943	WITHOUT_CLASSIFICATION	6.139120569889565E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998385966234498	WITHOUT_CLASSIFICATION	1.6140337655023778E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9844716756275697	WITHOUT_CLASSIFICATION	0.015528324372430354	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9985091830614348	WITHOUT_CLASSIFICATION	0.0014908169385652837	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999626104888006	WITHOUT_CLASSIFICATION	3.7389511199392906E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995319028609596	WITHOUT_CLASSIFICATION	4.680971390403723E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997354683625608	WITHOUT_CLASSIFICATION	2.6453163743923023E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998274809722321	WITHOUT_CLASSIFICATION	1.7251902776786515E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999966768636948	WITHOUT_CLASSIFICATION	3.32313630532314E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999814446151021	WITHOUT_CLASSIFICATION	1.855538489785955E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.986174922647157	WITHOUT_CLASSIFICATION	0.01382507735284303	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998682085233542	WITHOUT_CLASSIFICATION	1.3179147664572224E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992373297333363	WITHOUT_CLASSIFICATION	7.626702666636945E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9998962310066594	WITHOUT_CLASSIFICATION	1.0376899334068689E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999952415700334	WITHOUT_CLASSIFICATION	4.758429966642995E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999678544419806	WITHOUT_CLASSIFICATION	3.214555801949661E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999133368116686	WITHOUT_CLASSIFICATION	8.666318833140434E-5	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999830179677489	WITHOUT_CLASSIFICATION	1.6982032251101188E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998624524032347	WITHOUT_CLASSIFICATION	1.3754759676543513E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999543402544542	WITHOUT_CLASSIFICATION	4.565974554583839E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9961111462868596	WITHOUT_CLASSIFICATION	0.003888853713140464	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9993551309326354	WITHOUT_CLASSIFICATION	6.448690673645255E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983663724176077	WITHOUT_CLASSIFICATION	0.0016336275823922895	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9992075964650482	WITHOUT_CLASSIFICATION	7.924035349517877E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997427015027952	WITHOUT_CLASSIFICATION	2.572984972048898E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997427015027952	WITHOUT_CLASSIFICATION	2.572984972048898E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999374204618805	WITHOUT_CLASSIFICATION	6.257953811954293E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997427015027952	WITHOUT_CLASSIFICATION	2.572984972048898E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997427015027952	WITHOUT_CLASSIFICATION	2.572984972048898E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9903622081231267	WITHOUT_CLASSIFICATION	0.0096377918768733	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999235193417376	WITHOUT_CLASSIFICATION	7.648065826240962E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998561449683698	WITHOUT_CLASSIFICATION	1.4385503163009508E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998561449683698	WITHOUT_CLASSIFICATION	1.4385503163009508E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9978991208627723	WITHOUT_CLASSIFICATION	0.0021008791372277118	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999858220780815	WITHOUT_CLASSIFICATION	1.4177921918451861E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9968529252781292	WITHOUT_CLASSIFICATION	0.0031470747218709204	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998873490080123	WITHOUT_CLASSIFICATION	1.1265099198765633E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998393984601575	WITHOUT_CLASSIFICATION	1.6060153984245212E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998821412153391	WITHOUT_CLASSIFICATION	1.1785878466092575E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994225261459159	WITHOUT_CLASSIFICATION	5.774738540842437E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999192687182396	WITHOUT_CLASSIFICATION	8.073128176041807E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998577490120182	WITHOUT_CLASSIFICATION	1.4225098798184473E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997850363601637	WITHOUT_CLASSIFICATION	2.149636398363341E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996181752402967	WITHOUT_CLASSIFICATION	3.818247597033599E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9974690061218691	WITHOUT_CLASSIFICATION	0.0025309938781309647	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999984267747264	WITHOUT_CLASSIFICATION	1.573225273594734E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999101629789086	WITHOUT_CLASSIFICATION	8.983702109145393E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9979414192247138	WITHOUT_CLASSIFICATION	0.002058580775286237	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9995856856326979	WITHOUT_CLASSIFICATION	4.1431436730205714E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9995714161505844	WITHOUT_CLASSIFICATION	4.285838494154586E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.999983825183187	WITHOUT_CLASSIFICATION	1.6174816813054167E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999984267747264	WITHOUT_CLASSIFICATION	1.573225273594734E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9990972423201155	WITHOUT_CLASSIFICATION	9.027576798844199E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9996026122359671	WITHOUT_CLASSIFICATION	3.9738776403289177E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996885110142122	WITHOUT_CLASSIFICATION	3.1148898578775417E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995204435981764	WITHOUT_CLASSIFICATION	4.795564018235978E-4	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999366347014547	WITHOUT_CLASSIFICATION	6.336529854531634E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999153096296337	WITHOUT_CLASSIFICATION	8.469037036628588E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999635019490087	WITHOUT_CLASSIFICATION	3.649805099122543E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997858307898664	WITHOUT_CLASSIFICATION	2.1416921013361185E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999648103329309	WITHOUT_CLASSIFICATION	3.51896670689791E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999995185992919	WITHOUT_CLASSIFICATION	4.814007080828194E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998702055915062	WITHOUT_CLASSIFICATION	1.297944084939069E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999413910385525	WITHOUT_CLASSIFICATION	5.860896144742992E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9996483105070212	WITHOUT_CLASSIFICATION	3.5168949297883633E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998584516686478	WITHOUT_CLASSIFICATION	1.4154833135212222E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9944180976565028	WITHOUT_CLASSIFICATION	0.0055819023434971445	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999566168763364	WITHOUT_CLASSIFICATION	4.338312366349655E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999631674780955	WITHOUT_CLASSIFICATION	3.683252190438854E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998271575164032	WITHOUT_CLASSIFICATION	1.7284248359685745E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998355055517797	WITHOUT_CLASSIFICATION	1.644944482203946E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997846965896775	WITHOUT_CLASSIFICATION	2.153034103224955E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995563356569683	WITHOUT_CLASSIFICATION	4.4366434303164294E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9991352658527701	WITHOUT_CLASSIFICATION	8.647341472299412E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999994153530957	WITHOUT_CLASSIFICATION	5.846469043020933E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999648103329309	WITHOUT_CLASSIFICATION	3.51896670689791E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9998889584724363	WITHOUT_CLASSIFICATION	1.1104152756371935E-4	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9998847362285943	WITHOUT_CLASSIFICATION	1.1526377140577313E-4	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999766409046594	WITHOUT_CLASSIFICATION	2.335909534059628E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999294250831599	WITHOUT_CLASSIFICATION	7.057491684013655E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998571276022444	WITHOUT_CLASSIFICATION	1.4287239775553345E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998831659286525	WITHOUT_CLASSIFICATION	1.1683407134749871E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999219269920875	WITHOUT_CLASSIFICATION	7.80730079125067E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9998828643856471	WITHOUT_CLASSIFICATION	1.1713561435284951E-4	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.999864284226227	WITHOUT_CLASSIFICATION	1.3571577377307414E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999934706947884	WITHOUT_CLASSIFICATION	6.529305211535394E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999832739908292	WITHOUT_CLASSIFICATION	1.6726009170822442E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999775043870699	WITHOUT_CLASSIFICATION	2.2495612930057448E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999439507989321	WITHOUT_CLASSIFICATION	5.60492010680093E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999527804552472	WITHOUT_CLASSIFICATION	4.721954475286215E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995452147241767	WITHOUT_CLASSIFICATION	4.5478527582325565E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999934706947884	WITHOUT_CLASSIFICATION	6.529305211535394E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999729931737874	WITHOUT_CLASSIFICATION	2.700682621262683E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9987689992843848	WITHOUT_CLASSIFICATION	0.0012310007156152967	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998861217228096	WITHOUT_CLASSIFICATION	1.1387827719051206E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999786360006153	WITHOUT_CLASSIFICATION	2.1363999384735803E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.99995954296083	WITHOUT_CLASSIFICATION	4.0457039169958065E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999978617648049	WITHOUT_CLASSIFICATION	2.138235195100675E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999122586489984	WITHOUT_CLASSIFICATION	8.774135100161806E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998604144674594	WITHOUT_CLASSIFICATION	1.3958553254062606E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998547695982526	WITHOUT_CLASSIFICATION	1.4523040174738345E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996206727576207	WITHOUT_CLASSIFICATION	3.793272423793619E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996206727576207	WITHOUT_CLASSIFICATION	3.793272423793619E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996206727576207	WITHOUT_CLASSIFICATION	3.793272423793619E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999931166604072	WITHOUT_CLASSIFICATION	6.88333959280488E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999931166604072	WITHOUT_CLASSIFICATION	6.88333959280488E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9957237300413699	WITHOUT_CLASSIFICATION	0.00427626995863006	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999959299593479	WITHOUT_CLASSIFICATION	4.0700406520766544E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9998130106301815	WITHOUT_CLASSIFICATION	1.869893698184751E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.999841786531188	WITHOUT_CLASSIFICATION	1.5821346881198016E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9989605942209172	WITHOUT_CLASSIFICATION	0.0010394057790828082	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998363104490463	WITHOUT_CLASSIFICATION	1.6368955095366204E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998582826175662	WITHOUT_CLASSIFICATION	1.417173824339143E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997939207577199	WITHOUT_CLASSIFICATION	2.060792422802395E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999520261269386	WITHOUT_CLASSIFICATION	4.797387306133305E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998363104490463	WITHOUT_CLASSIFICATION	1.6368955095366204E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998582826175662	WITHOUT_CLASSIFICATION	1.417173824339143E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999806605589222	WITHOUT_CLASSIFICATION	1.9339441077792528E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998548033776722	WITHOUT_CLASSIFICATION	1.4519662232783732E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999915073488468	WITHOUT_CLASSIFICATION	8.492651153222785E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998005477262292	WITHOUT_CLASSIFICATION	1.9945227377076932E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998661824851335	WITHOUT_CLASSIFICATION	1.3381751486651864E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999906288112249	WITHOUT_CLASSIFICATION	9.3711887750926E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999324110669354	WITHOUT_CLASSIFICATION	6.758893306453455E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999876131737288	WITHOUT_CLASSIFICATION	1.2386826271140994E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996673659312637	WITHOUT_CLASSIFICATION	3.326340687362801E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9945747418408557	WITHOUT_CLASSIFICATION	0.0054252581591442165	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997777639729518	WITHOUT_CLASSIFICATION	2.222360270481781E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999735215664293	WITHOUT_CLASSIFICATION	2.6478433570700958E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998267457980198	WITHOUT_CLASSIFICATION	1.732542019802552E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995690456033998	WITHOUT_CLASSIFICATION	4.3095439660028185E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999390914028911	WITHOUT_CLASSIFICATION	6.090859710880709E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999365162324791	WITHOUT_CLASSIFICATION	6.348376752085651E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9982141356602312	WITHOUT_CLASSIFICATION	0.0017858643397688865	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999993032038507	WITHOUT_CLASSIFICATION	6.967961493108071E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998274171243018	WITHOUT_CLASSIFICATION	1.7258287569818292E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999524558791546	WITHOUT_CLASSIFICATION	4.754412084552611E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999998606098728	WITHOUT_CLASSIFICATION	1.3939012719846889E-6	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992852156525476	WITHOUT_CLASSIFICATION	7.147843474524164E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998339417701088	WITHOUT_CLASSIFICATION	1.6605822989130246E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998370796677952	WITHOUT_CLASSIFICATION	1.6292033220479565E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999400032512	WITHOUT_CLASSIFICATION	5.999674873707935E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998534147782366	WITHOUT_CLASSIFICATION	1.4658522176335038E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996194419318741	WITHOUT_CLASSIFICATION	3.8055806812586256E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99976027501658	WITHOUT_CLASSIFICATION	2.397249834198604E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.99976027501658	WITHOUT_CLASSIFICATION	2.397249834198604E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999811069646317	WITHOUT_CLASSIFICATION	1.8893035368288972E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9992172266960289	WITHOUT_CLASSIFICATION	7.827733039711456E-4	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999467935698896	WITHOUT_CLASSIFICATION	5.320643011037856E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999812352230474	WITHOUT_CLASSIFICATION	1.8764776952623317E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998995024797174	WITHOUT_CLASSIFICATION	1.0049752028269794E-4	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9994873702505913	WITHOUT_CLASSIFICATION	5.126297494087873E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999939769354524	WITHOUT_CLASSIFICATION	6.023064547509253E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999660543571565	WITHOUT_CLASSIFICATION	3.394564284356927E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960242171011	WITHOUT_CLASSIFICATION	1.0397578289895013E-4	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998934564144034	WITHOUT_CLASSIFICATION	1.0654358559671115E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998940010619174	WITHOUT_CLASSIFICATION	1.0599893808263988E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9991537454635377	WITHOUT_CLASSIFICATION	8.462545364622676E-4	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997952780956971	WITHOUT_CLASSIFICATION	2.0472190430276664E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984035939526513	WITHOUT_CLASSIFICATION	0.0015964060473486771	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995025317628694	WITHOUT_CLASSIFICATION	4.97468237130606E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999986361175429	WITHOUT_CLASSIFICATION	1.3638824571023553E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998775400936876	WITHOUT_CLASSIFICATION	1.2245990631244228E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999919115730531	WITHOUT_CLASSIFICATION	8.088426946862565E-6	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999800736475275	WITHOUT_CLASSIFICATION	1.9926352472449958E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984035939526513	WITHOUT_CLASSIFICATION	0.0015964060473486771	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984035939526513	WITHOUT_CLASSIFICATION	0.0015964060473486771	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999846837460984	WITHOUT_CLASSIFICATION	1.5316253901602976E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999899262669287	WITHOUT_CLASSIFICATION	1.0073733071268326E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997848845428845	WITHOUT_CLASSIFICATION	2.151154571154748E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999348242529446	WITHOUT_CLASSIFICATION	6.517574705549557E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998577967394345	WITHOUT_CLASSIFICATION	1.4220326056552698E-4	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999365162324791	WITHOUT_CLASSIFICATION	6.348376752085651E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999499159221552	WITHOUT_CLASSIFICATION	5.0084077844747796E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999552513535779	WITHOUT_CLASSIFICATION	4.474864642206162E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999127439957494	WITHOUT_CLASSIFICATION	8.72560042505541E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999132433051999	WITHOUT_CLASSIFICATION	8.675669479998338E-5	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993844900064848	WITHOUT_CLASSIFICATION	6.155099935152354E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998648233616493	WITHOUT_CLASSIFICATION	1.3517663835072133E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997053843655072	WITHOUT_CLASSIFICATION	2.946156344929466E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997053843655072	WITHOUT_CLASSIFICATION	2.946156344929466E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997053843655072	WITHOUT_CLASSIFICATION	2.946156344929466E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997053843655072	WITHOUT_CLASSIFICATION	2.946156344929466E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998841360486173	WITHOUT_CLASSIFICATION	1.1586395138277009E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9996913459116445	WITHOUT_CLASSIFICATION	3.086540883555167E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998057804862882	WITHOUT_CLASSIFICATION	1.9421951371173817E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9990526203477572	WITHOUT_CLASSIFICATION	9.473796522427492E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998998826469718	WITHOUT_CLASSIFICATION	1.0011735302823256E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998614037304853	WITHOUT_CLASSIFICATION	1.3859626951468534E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848187655421	WITHOUT_CLASSIFICATION	1.1518123445776877E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999784893503922	WITHOUT_CLASSIFICATION	2.1510649607804847E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999903724229162	WITHOUT_CLASSIFICATION	9.627577083817532E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999940198794616	WITHOUT_CLASSIFICATION	5.9801205383949176E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999264782227909	WITHOUT_CLASSIFICATION	7.352177720908999E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999158218037095	WITHOUT_CLASSIFICATION	8.41781962904645E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998517237638784	WITHOUT_CLASSIFICATION	1.482762361214777E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999076120456195	WITHOUT_CLASSIFICATION	9.238795438048024E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999945951643541	WITHOUT_CLASSIFICATION	5.404835645856459E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999945951643541	WITHOUT_CLASSIFICATION	5.404835645856459E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999822973922187	WITHOUT_CLASSIFICATION	1.770260778132957E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999695594207125	WITHOUT_CLASSIFICATION	3.0440579287538535E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999963739148144	WITHOUT_CLASSIFICATION	3.6260851854449268E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998098341765631	WITHOUT_CLASSIFICATION	1.9016582343699178E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998098341765631	WITHOUT_CLASSIFICATION	1.9016582343699178E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9995168867531793	WITHOUT_CLASSIFICATION	4.831132468207637E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996206727576207	WITHOUT_CLASSIFICATION	3.793272423793619E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999221226717538	WITHOUT_CLASSIFICATION	7.787732824609223E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999691070303935	WITHOUT_CLASSIFICATION	3.0892969606456494E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996016487682	WITHOUT_CLASSIFICATION	3.983512317789015E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9976784243838163	WITHOUT_CLASSIFICATION	0.0023215756161838433	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998384872018758	WITHOUT_CLASSIFICATION	1.6151279812417352E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9993384844724014	WITHOUT_CLASSIFICATION	6.615155275985009E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999979856950971	WITHOUT_CLASSIFICATION	2.014304902906831E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998807202575206	WITHOUT_CLASSIFICATION	1.1927974247932834E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999420810789464	WITHOUT_CLASSIFICATION	5.791892105353892E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998177401082358	WITHOUT_CLASSIFICATION	1.8225989176435154E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998662152602841	WITHOUT_CLASSIFICATION	1.3378473971601584E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999706091665059	WITHOUT_CLASSIFICATION	2.9390833494130073E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999957134843189	WITHOUT_CLASSIFICATION	4.286515681156041E-6	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999833189559109	WITHOUT_CLASSIFICATION	1.6681044089176007E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999975252170524	WITHOUT_CLASSIFICATION	2.4747829476120957E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999984350325861	WITHOUT_CLASSIFICATION	1.5649674139595118E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999682800425902	WITHOUT_CLASSIFICATION	3.1719957409804986E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996481377459339	WITHOUT_CLASSIFICATION	3.518622540660809E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9954337638862827	WITHOUT_CLASSIFICATION	0.004566236113717349	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998731969776273	WITHOUT_CLASSIFICATION	1.2680302237267672E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999481627711085	WITHOUT_CLASSIFICATION	5.183722889147042E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998534211132211	WITHOUT_CLASSIFICATION	1.4657888677893757E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999970586484599	WITHOUT_CLASSIFICATION	2.9413515401859126E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999129099907509	WITHOUT_CLASSIFICATION	8.709000924909857E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.999036411765925	WITHOUT_CLASSIFICATION	9.635882340750919E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999857125073776	WITHOUT_CLASSIFICATION	1.4287492622447956E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9925251193367658	WITHOUT_CLASSIFICATION	0.0074748806632343135	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997851343223332	WITHOUT_CLASSIFICATION	2.1486567766680132E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999964489500943	WITHOUT_CLASSIFICATION	3.551049905769147E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999882226910106	WITHOUT_CLASSIFICATION	1.177730898939944E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999952350936225	WITHOUT_CLASSIFICATION	4.764906377506681E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9982613684674703	WITHOUT_CLASSIFICATION	0.0017386315325297707	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998876265320044	WITHOUT_CLASSIFICATION	1.1237346799573926E-4	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998779571296135	WITHOUT_CLASSIFICATION	1.2204287038652938E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999368560776575	WITHOUT_CLASSIFICATION	6.314392234253098E-5	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999896594542641	WITHOUT_CLASSIFICATION	1.0340545735896398E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996398050773437	WITHOUT_CLASSIFICATION	3.6019492265619617E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.999491046813725	WITHOUT_CLASSIFICATION	5.08953186275033E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999557046741497	WITHOUT_CLASSIFICATION	4.4295325850327124E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998394228758636	WITHOUT_CLASSIFICATION	1.6057712413650028E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999393583922171	WITHOUT_CLASSIFICATION	6.064160778288027E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999823396088424	WITHOUT_CLASSIFICATION	1.7660391157584157E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999676069484872	WITHOUT_CLASSIFICATION	3.239305151282926E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.998574673503237	WITHOUT_CLASSIFICATION	0.0014253264967630378	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9988256331157013	WITHOUT_CLASSIFICATION	0.0011743668842986823	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999462808636238	WITHOUT_CLASSIFICATION	5.371913637618524E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999619843641839	WITHOUT_CLASSIFICATION	3.801563581615951E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998013437848292	WITHOUT_CLASSIFICATION	1.98656215170781E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999627769572249	WITHOUT_CLASSIFICATION	3.722304277505569E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999876803127964	WITHOUT_CLASSIFICATION	1.2319687203503436E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999790861755312	WITHOUT_CLASSIFICATION	2.091382446880512E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999785620701731	WITHOUT_CLASSIFICATION	2.1437929826824628E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999663218496916	WITHOUT_CLASSIFICATION	3.3678150308393456E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998715302526227	WITHOUT_CLASSIFICATION	1.2846974737731122E-4	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998893848473347	WITHOUT_CLASSIFICATION	1.1061515266536071E-4	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999474918403584	WITHOUT_CLASSIFICATION	5.2508159641755496E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999939858619437	WITHOUT_CLASSIFICATION	6.014138056288628E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9995497737777148	WITHOUT_CLASSIFICATION	4.502262222851744E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999849423024895	WITHOUT_CLASSIFICATION	1.5057697510625923E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996190651053645	WITHOUT_CLASSIFICATION	3.809348946354795E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.99996711633003	WITHOUT_CLASSIFICATION	3.28836699700415E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999488144788083	WITHOUT_CLASSIFICATION	5.118552119159948E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999728019905336	WITHOUT_CLASSIFICATION	2.7198009466337056E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999976609013176	WITHOUT_CLASSIFICATION	2.3390986823925128E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999969976591762	WITHOUT_CLASSIFICATION	3.002340823841908E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999497002134622	WITHOUT_CLASSIFICATION	5.0299786537860844E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998230167274017	WITHOUT_CLASSIFICATION	1.7698327259824833E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999951453198361	WITHOUT_CLASSIFICATION	4.854680163928849E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999827242147029	WITHOUT_CLASSIFICATION	1.727578529712591E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999346087208814	WITHOUT_CLASSIFICATION	6.539127911859419E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.99954402262262	WITHOUT_CLASSIFICATION	4.559773773800504E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999930166110143	WITHOUT_CLASSIFICATION	6.983388985850227E-6	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998437215454078	WITHOUT_CLASSIFICATION	1.5627845459220317E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999531178878064	WITHOUT_CLASSIFICATION	4.688211219369087E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996030508308281	WITHOUT_CLASSIFICATION	3.969491691718689E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9997248433061833	WITHOUT_CLASSIFICATION	2.751566938167572E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998391386315522	WITHOUT_CLASSIFICATION	1.608613684477876E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999942722018741	WITHOUT_CLASSIFICATION	5.727798125902708E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999768923868991	WITHOUT_CLASSIFICATION	2.31076131008771E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999743881017837	WITHOUT_CLASSIFICATION	2.5611898216303696E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.998717097269445	WITHOUT_CLASSIFICATION	0.0012829027305549998	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997240584310166	WITHOUT_CLASSIFICATION	2.7594156898341646E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9995934491273306	WITHOUT_CLASSIFICATION	4.065508726694034E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998448953493896	WITHOUT_CLASSIFICATION	1.5510465061044265E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998924107102052	WITHOUT_CLASSIFICATION	1.0758928979481342E-4	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.998019032643796	WITHOUT_CLASSIFICATION	0.001980967356204128	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999411730754849	WITHOUT_CLASSIFICATION	5.882692451508356E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.99998558125533	WITHOUT_CLASSIFICATION	1.4418744670043353E-5	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999978945212912	WITHOUT_CLASSIFICATION	2.1054787087547176E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999937469686669	WITHOUT_CLASSIFICATION	6.253031333102015E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999401407181141	WITHOUT_CLASSIFICATION	5.985928188596588E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999728060110272	WITHOUT_CLASSIFICATION	2.719398897279304E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997427931341345	WITHOUT_CLASSIFICATION	2.5720686586553146E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997427931341345	WITHOUT_CLASSIFICATION	2.5720686586553146E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999311584800519	WITHOUT_CLASSIFICATION	6.884151994814041E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991990695127986	WITHOUT_CLASSIFICATION	8.00930487201504E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998355199115103	WITHOUT_CLASSIFICATION	1.6448008848975336E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9979424162950198	WITHOUT_CLASSIFICATION	0.002057583704980183	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998195017530477	WITHOUT_CLASSIFICATION	1.8049824695244183E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9986531885185352	WITHOUT_CLASSIFICATION	0.0013468114814648123	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998750292198126	WITHOUT_CLASSIFICATION	1.249707801873561E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999688913401051	WITHOUT_CLASSIFICATION	3.11086598948839E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9989846240862552	WITHOUT_CLASSIFICATION	0.001015375913744811	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999910420191248	WITHOUT_CLASSIFICATION	8.957980875212913E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9991743720737623	WITHOUT_CLASSIFICATION	8.256279262377841E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999521106487902	WITHOUT_CLASSIFICATION	4.78893512097282E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999826753904232	WITHOUT_CLASSIFICATION	1.7324609576748598E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996944199642845	WITHOUT_CLASSIFICATION	3.0558003571546386E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999579814541975	WITHOUT_CLASSIFICATION	4.201854580250347E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9971232599233153	WITHOUT_CLASSIFICATION	0.002876740076684631	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9971232599233153	WITHOUT_CLASSIFICATION	0.002876740076684631	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999934387310405	WITHOUT_CLASSIFICATION	6.561268959506895E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997256801104301	WITHOUT_CLASSIFICATION	2.7431988956999083E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999755086434107	WITHOUT_CLASSIFICATION	2.44913565892842E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999334241732685	WITHOUT_CLASSIFICATION	6.657582673155997E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999836440300699	WITHOUT_CLASSIFICATION	1.6355969930116802E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999916750272669	WITHOUT_CLASSIFICATION	8.324972733033367E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999916750272669	WITHOUT_CLASSIFICATION	8.324972733033367E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998822294125594	WITHOUT_CLASSIFICATION	1.1777058744057212E-4	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999704261063532	WITHOUT_CLASSIFICATION	2.9573893646886925E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999967262636306	WITHOUT_CLASSIFICATION	3.2737363693963836E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9989426696120529	WITHOUT_CLASSIFICATION	0.001057330387947128	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999707556288356	WITHOUT_CLASSIFICATION	2.924437116443163E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999616044572445	WITHOUT_CLASSIFICATION	3.839554275540495E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999379063035748	WITHOUT_CLASSIFICATION	6.209369642516552E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999706196180599	WITHOUT_CLASSIFICATION	2.93803819401581E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9941490079040965	WITHOUT_CLASSIFICATION	0.005850992095903444	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993570395005857	WITHOUT_CLASSIFICATION	6.429604994142087E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999175271416328	WITHOUT_CLASSIFICATION	8.247285836708881E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998584291599263	WITHOUT_CLASSIFICATION	1.415708400736361E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999489023220367	WITHOUT_CLASSIFICATION	5.1097677963381184E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994850650029624	WITHOUT_CLASSIFICATION	5.149349970376242E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9985917958626049	WITHOUT_CLASSIFICATION	0.001408204137395053	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999414122680838	WITHOUT_CLASSIFICATION	5.858773191627143E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9945566724672962	WITHOUT_CLASSIFICATION	0.005443327532703844	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997504476659478	WITHOUT_CLASSIFICATION	2.4955233405218825E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998762009198289	WITHOUT_CLASSIFICATION	1.2379908017110805E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998741946724379	WITHOUT_CLASSIFICATION	1.2580532756223522E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999354840627867	WITHOUT_CLASSIFICATION	6.451593721334633E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999646980226382	WITHOUT_CLASSIFICATION	3.530197736173927E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998785865765177	WITHOUT_CLASSIFICATION	1.2141342348224355E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996882129061317	WITHOUT_CLASSIFICATION	3.1178709386834566E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999983738653372	WITHOUT_CLASSIFICATION	1.6261346627986106E-5	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999989555989299	WITHOUT_CLASSIFICATION	1.0444010700935853E-6	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999236179823973	WITHOUT_CLASSIFICATION	7.638201760267133E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999770440021851	WITHOUT_CLASSIFICATION	2.2955997814844405E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996511599385217	WITHOUT_CLASSIFICATION	3.4884006147832146E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9998539399312801	WITHOUT_CLASSIFICATION	1.4606006871979339E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9716605715169574	WITHOUT_CLASSIFICATION	0.028339428483042637	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.995298700596226	WITHOUT_CLASSIFICATION	0.0047012994037740246	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998292289577889	WITHOUT_CLASSIFICATION	1.707710422110541E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999624722459089	WITHOUT_CLASSIFICATION	3.7527754091101333E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9998619929467418	WITHOUT_CLASSIFICATION	1.3800705325828916E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999401783841141	WITHOUT_CLASSIFICATION	5.9821615885932154E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999676344723255	WITHOUT_CLASSIFICATION	3.2365527674416056E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994331958710729	WITHOUT_CLASSIFICATION	5.66804128927061E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998703149132907	WITHOUT_CLASSIFICATION	1.2968508670933043E-4	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999567851918619	WITHOUT_CLASSIFICATION	4.3214808138096085E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9979953295092614	WITHOUT_CLASSIFICATION	0.0020046704907385926	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9992322551034053	WITHOUT_CLASSIFICATION	7.67744896594623E-4	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9998280937920566	WITHOUT_CLASSIFICATION	1.7190620794341562E-4	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9992511865688871	WITHOUT_CLASSIFICATION	7.488134311128878E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999676344723255	WITHOUT_CLASSIFICATION	3.2365527674416056E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994331958710729	WITHOUT_CLASSIFICATION	5.66804128927061E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9995601673732817	WITHOUT_CLASSIFICATION	4.398326267182797E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998370095693201	WITHOUT_CLASSIFICATION	1.6299043067992581E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999983570803165	WITHOUT_CLASSIFICATION	1.6429196834979102E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997306498817878	WITHOUT_CLASSIFICATION	2.6935011821222854E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998216722092873	WITHOUT_CLASSIFICATION	1.7832779071265983E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9986430960974335	WITHOUT_CLASSIFICATION	0.0013569039025665087	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999426704019864	WITHOUT_CLASSIFICATION	5.732959801353639E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9997209018889545	WITHOUT_CLASSIFICATION	2.790981110456199E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999399768162782	WITHOUT_CLASSIFICATION	6.00231837218587E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999829060003557	WITHOUT_CLASSIFICATION	1.7093999644312037E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9992369036072875	WITHOUT_CLASSIFICATION	7.630963927126226E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999829060003557	WITHOUT_CLASSIFICATION	1.7093999644312037E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9995259202272687	WITHOUT_CLASSIFICATION	4.7407977273132004E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999637787017602	WITHOUT_CLASSIFICATION	3.622129823980692E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9995259202272687	WITHOUT_CLASSIFICATION	4.7407977273132004E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178716738011	WITHOUT_CLASSIFICATION	1.8212832619884912E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9933235519255201	WITHOUT_CLASSIFICATION	0.006676448074479818	DEFECT
//}	WITHOUT_CLASSIFICATION	0.999519117357374	WITHOUT_CLASSIFICATION	4.8088264262597015E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.999519117357374	WITHOUT_CLASSIFICATION	4.8088264262597015E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999629172749379	WITHOUT_CLASSIFICATION	3.70827250620997E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996307636153174	WITHOUT_CLASSIFICATION	3.692363846825049E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999629172749379	WITHOUT_CLASSIFICATION	3.70827250620997E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998387473087469	WITHOUT_CLASSIFICATION	1.6125269125305265E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999274617125791	WITHOUT_CLASSIFICATION	7.253828742088144E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999861498889444	WITHOUT_CLASSIFICATION	1.3850111055593623E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9997638566896485	WITHOUT_CLASSIFICATION	2.361433103515145E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9997930031626581	WITHOUT_CLASSIFICATION	2.0699683734200068E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9998619294471462	WITHOUT_CLASSIFICATION	1.3807055285378837E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9991882938629705	WITHOUT_CLASSIFICATION	8.117061370295786E-4	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999577880264562	WITHOUT_CLASSIFICATION	4.221197354378866E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997736313885572	WITHOUT_CLASSIFICATION	2.2636861144277338E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999673448157897	WITHOUT_CLASSIFICATION	3.2655184210178434E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999466865345222	WITHOUT_CLASSIFICATION	5.33134654778919E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999606286079746	WITHOUT_CLASSIFICATION	3.9371392025394267E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999940961721737	WITHOUT_CLASSIFICATION	5.903827826308049E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999495781016888	WITHOUT_CLASSIFICATION	5.042189831124467E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998602743138886	WITHOUT_CLASSIFICATION	1.3972568611143074E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9996986181548145	WITHOUT_CLASSIFICATION	3.0138184518546267E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998462028249917	WITHOUT_CLASSIFICATION	1.5379717500822512E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996767211804868	WITHOUT_CLASSIFICATION	3.232788195131846E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998325697362003	WITHOUT_CLASSIFICATION	1.6743026379973817E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998512092140643	WITHOUT_CLASSIFICATION	1.4879078593559223E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998659142796962	WITHOUT_CLASSIFICATION	1.3408572030386374E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9987909270989391	WITHOUT_CLASSIFICATION	0.0012090729010608727	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999175967109073	WITHOUT_CLASSIFICATION	8.240328909269757E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999861498889444	WITHOUT_CLASSIFICATION	1.3850111055593623E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999311623037307	WITHOUT_CLASSIFICATION	6.883769626930175E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999100268999817	WITHOUT_CLASSIFICATION	8.997310001836231E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9989017031602029	WITHOUT_CLASSIFICATION	0.0010982968397971696	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9998610362642044	WITHOUT_CLASSIFICATION	1.3896373579559202E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999893197641802	WITHOUT_CLASSIFICATION	1.0680235819854024E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999852319901982	WITHOUT_CLASSIFICATION	1.4768009801839573E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998387473087469	WITHOUT_CLASSIFICATION	1.6125269125305265E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998387473087469	WITHOUT_CLASSIFICATION	1.6125269125305265E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999086281547925	WITHOUT_CLASSIFICATION	9.137184520744395E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999851916302239	WITHOUT_CLASSIFICATION	1.4808369775939843E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998955609685295	WITHOUT_CLASSIFICATION	1.0443903147050316E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999545548901914	WITHOUT_CLASSIFICATION	4.54451098086827E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9980147141801914	WITHOUT_CLASSIFICATION	0.001985285819808698	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9990188994659246	WITHOUT_CLASSIFICATION	9.811005340753835E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999059339617275	WITHOUT_CLASSIFICATION	9.406603827250512E-4	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999827276622557	WITHOUT_CLASSIFICATION	1.727233774427233E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997886639786383	WITHOUT_CLASSIFICATION	2.1133602136165868E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997342818442699	WITHOUT_CLASSIFICATION	2.657181557301144E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997736313885572	WITHOUT_CLASSIFICATION	2.2636861144277338E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999922195912378	WITHOUT_CLASSIFICATION	7.780408762202647E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997342818442699	WITHOUT_CLASSIFICATION	2.657181557301144E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999568296574104	WITHOUT_CLASSIFICATION	4.317034258962028E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999623729080342	WITHOUT_CLASSIFICATION	3.7627091965657316E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999175368856862	WITHOUT_CLASSIFICATION	8.246311431385172E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9994261231643564	WITHOUT_CLASSIFICATION	5.738768356435532E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995222517607432	WITHOUT_CLASSIFICATION	4.7774823925689116E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9988051567853726	WITHOUT_CLASSIFICATION	0.0011948432146273622	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999652459246391	WITHOUT_CLASSIFICATION	3.475407536092523E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9995113855331624	WITHOUT_CLASSIFICATION	4.886144668375173E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999450397162479	WITHOUT_CLASSIFICATION	5.496028375209761E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999363342801376	WITHOUT_CLASSIFICATION	6.366571986233303E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9994876015507731	WITHOUT_CLASSIFICATION	5.123984492268582E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999675928854722	WITHOUT_CLASSIFICATION	3.2407114527779665E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997342818442699	WITHOUT_CLASSIFICATION	2.657181557301144E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995222517607432	WITHOUT_CLASSIFICATION	4.7774823925689116E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999652459246391	WITHOUT_CLASSIFICATION	3.475407536092523E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997275370206246	WITHOUT_CLASSIFICATION	2.724629793753435E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999910295377906	WITHOUT_CLASSIFICATION	8.970462209341177E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999604386266507	WITHOUT_CLASSIFICATION	3.9561373349150054E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999091583388349	WITHOUT_CLASSIFICATION	9.084166116509574E-5	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999579631762843	WITHOUT_CLASSIFICATION	4.2036823715636385E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999388800345088	WITHOUT_CLASSIFICATION	6.111996549119776E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999568296574104	WITHOUT_CLASSIFICATION	4.317034258962028E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999716795293514	WITHOUT_CLASSIFICATION	2.8320470648597823E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999467582083786	WITHOUT_CLASSIFICATION	5.324179162126342E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999948397339608	WITHOUT_CLASSIFICATION	5.160266039193508E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999787068057311	WITHOUT_CLASSIFICATION	2.1293194268896533E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999781300607636	WITHOUT_CLASSIFICATION	2.1869939236316533E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999483770622759	WITHOUT_CLASSIFICATION	5.162293772399422E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178716738011	WITHOUT_CLASSIFICATION	1.8212832619884912E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998093708534036	WITHOUT_CLASSIFICATION	1.9062914659643567E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999916618883914	WITHOUT_CLASSIFICATION	8.338111608690545E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9953760610720566	WITHOUT_CLASSIFICATION	0.004623938927943438	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9969613185756802	WITHOUT_CLASSIFICATION	0.003038681424319893	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9977136578179211	WITHOUT_CLASSIFICATION	0.0022863421820789706	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996422818947931	WITHOUT_CLASSIFICATION	3.577181052068879E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9998242974432461	WITHOUT_CLASSIFICATION	1.7570255675388E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997531060186722	WITHOUT_CLASSIFICATION	2.4689398132772664E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999388800345088	WITHOUT_CLASSIFICATION	6.111996549119776E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998539483037885	WITHOUT_CLASSIFICATION	1.4605169621150998E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999327200984319	WITHOUT_CLASSIFICATION	6.727990156800193E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9997467060481491	WITHOUT_CLASSIFICATION	2.532939518509332E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999873162595709	WITHOUT_CLASSIFICATION	1.268374042910066E-4	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995785822373514	WITHOUT_CLASSIFICATION	4.2141776264853915E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998292409017298	WITHOUT_CLASSIFICATION	1.707590982701861E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999651621579579	WITHOUT_CLASSIFICATION	3.483784204210066E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9904038345482852	WITHOUT_CLASSIFICATION	0.009596165451714786	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998889695870697	WITHOUT_CLASSIFICATION	1.1103041293024028E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999404881945367	WITHOUT_CLASSIFICATION	5.9511805463295264E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999431154724615	WITHOUT_CLASSIFICATION	5.688452753842199E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997589244748502	WITHOUT_CLASSIFICATION	2.410755251498344E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999617717305487	WITHOUT_CLASSIFICATION	3.8228269451332686E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999909396476252	WITHOUT_CLASSIFICATION	9.060352374845472E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9992738659650922	WITHOUT_CLASSIFICATION	7.261340349079709E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999930293715591	WITHOUT_CLASSIFICATION	6.970628440910727E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999757610715961	WITHOUT_CLASSIFICATION	2.4238928403940162E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9995863662437654	WITHOUT_CLASSIFICATION	4.136337562346627E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999508547040049	WITHOUT_CLASSIFICATION	4.914529599512154E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999406796275898	WITHOUT_CLASSIFICATION	5.932037241016517E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998928613385258	WITHOUT_CLASSIFICATION	1.0713866147412592E-4	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999458885776418	WITHOUT_CLASSIFICATION	5.411142235821683E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9625217358498122	WITHOUT_CLASSIFICATION	0.03747826415018793	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999145853237943	WITHOUT_CLASSIFICATION	8.541467620562531E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995651654405536	WITHOUT_CLASSIFICATION	4.348345594463993E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9995281785243685	WITHOUT_CLASSIFICATION	4.7182147563155544E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9977701953249737	WITHOUT_CLASSIFICATION	0.0022298046750263154	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998699719339978	WITHOUT_CLASSIFICATION	1.3002806600206327E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9978799122208172	WITHOUT_CLASSIFICATION	0.0021200877791827904	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999583264358889	WITHOUT_CLASSIFICATION	4.167356411120136E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996857118061	WITHOUT_CLASSIFICATION	3.1428819382301157E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996125943673848	WITHOUT_CLASSIFICATION	3.8740563261519965E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997821159663446	WITHOUT_CLASSIFICATION	2.1788403365535108E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999229344150264	WITHOUT_CLASSIFICATION	7.706558497360704E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9951614918295935	WITHOUT_CLASSIFICATION	0.004838508170406472	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997821159663446	WITHOUT_CLASSIFICATION	2.1788403365535108E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996125943673848	WITHOUT_CLASSIFICATION	3.8740563261519965E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999229344150264	WITHOUT_CLASSIFICATION	7.706558497360704E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9997581825919001	WITHOUT_CLASSIFICATION	2.4181740809995966E-4	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999696414166028	WITHOUT_CLASSIFICATION	3.0358583397276444E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995486254483218	WITHOUT_CLASSIFICATION	4.5137455167812917E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999118338155982	WITHOUT_CLASSIFICATION	8.81661844018288E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999500049580816	WITHOUT_CLASSIFICATION	4.999504191837404E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9405579847035528	WITHOUT_CLASSIFICATION	0.05944201529644728	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999430943757595	WITHOUT_CLASSIFICATION	5.6905624240491734E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997340498964585	WITHOUT_CLASSIFICATION	2.659501035415137E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999992918471218	WITHOUT_CLASSIFICATION	7.081528782778321E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9971146499402852	WITHOUT_CLASSIFICATION	0.002885350059714837	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999439176691083	WITHOUT_CLASSIFICATION	5.608233089171122E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998085246499804	WITHOUT_CLASSIFICATION	1.914753500196424E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999823956720993	WITHOUT_CLASSIFICATION	1.7604327900686969E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997882092304312	WITHOUT_CLASSIFICATION	2.117907695688553E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999866946456173	WITHOUT_CLASSIFICATION	1.3305354382799006E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999859022057327	WITHOUT_CLASSIFICATION	1.409779426738292E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992983996471365	WITHOUT_CLASSIFICATION	7.016003528634758E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999961486026555	WITHOUT_CLASSIFICATION	3.851397344497805E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996060034083102	WITHOUT_CLASSIFICATION	3.939965916898901E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999533904176645	WITHOUT_CLASSIFICATION	4.660958233562224E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.998533309559953	WITHOUT_CLASSIFICATION	0.0014666904400469248	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999989045408098	WITHOUT_CLASSIFICATION	1.0954591903070458E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998929755839746	WITHOUT_CLASSIFICATION	1.0702441602537772E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999965934449599	WITHOUT_CLASSIFICATION	3.406555040101314E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999485026816767	WITHOUT_CLASSIFICATION	5.149731832331974E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999485026816767	WITHOUT_CLASSIFICATION	5.149731832331974E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999873672994172	WITHOUT_CLASSIFICATION	1.2632700582813778E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999873672994172	WITHOUT_CLASSIFICATION	1.2632700582813778E-5	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9996614840144579	WITHOUT_CLASSIFICATION	3.385159855421493E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992983996471365	WITHOUT_CLASSIFICATION	7.016003528634758E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999645033734467	WITHOUT_CLASSIFICATION	3.549662655331873E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999643956655055	WITHOUT_CLASSIFICATION	3.5604334494412996E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998795037792478	WITHOUT_CLASSIFICATION	1.2049622075220188E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9998795037792478	WITHOUT_CLASSIFICATION	1.2049622075220188E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999500617921581	WITHOUT_CLASSIFICATION	4.9938207841915155E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998932681982287	WITHOUT_CLASSIFICATION	1.0673180177125509E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999942107742709	WITHOUT_CLASSIFICATION	5.7892257291080125E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999773748922314	WITHOUT_CLASSIFICATION	2.2625107768562115E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993912611551802	WITHOUT_CLASSIFICATION	6.087388448197171E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9997799951131662	WITHOUT_CLASSIFICATION	2.200048868339474E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998202978977747	WITHOUT_CLASSIFICATION	1.7970210222522246E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997160381375981	WITHOUT_CLASSIFICATION	2.839618624019659E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999102439773555	WITHOUT_CLASSIFICATION	8.975602264450903E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9987430396621246	WITHOUT_CLASSIFICATION	0.0012569603378753294	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999304134813873	WITHOUT_CLASSIFICATION	6.958651861268049E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998997146616594	WITHOUT_CLASSIFICATION	1.0028533834058751E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999138694178259	WITHOUT_CLASSIFICATION	8.613058217410012E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999228549876437	WITHOUT_CLASSIFICATION	7.714501235632707E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998785921084624	WITHOUT_CLASSIFICATION	1.2140789153761691E-4	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998289830302985	WITHOUT_CLASSIFICATION	1.7101696970147931E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955971434175	WITHOUT_CLASSIFICATION	1.044028565825416E-4	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999506396545743	WITHOUT_CLASSIFICATION	4.9360345425719036E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999570707394656	WITHOUT_CLASSIFICATION	4.292926053442624E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999671054255571	WITHOUT_CLASSIFICATION	3.289457444290573E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999278383930007	WITHOUT_CLASSIFICATION	7.216160699928669E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9953141071170019	WITHOUT_CLASSIFICATION	0.004685892882998083	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998882339798258	WITHOUT_CLASSIFICATION	1.1176602017422363E-4	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999571852790107	WITHOUT_CLASSIFICATION	4.281472098930964E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996010054507236	WITHOUT_CLASSIFICATION	3.98994549276399E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999785918667875	WITHOUT_CLASSIFICATION	2.140813321250346E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999404881945367	WITHOUT_CLASSIFICATION	5.9511805463295264E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997708372658226	WITHOUT_CLASSIFICATION	2.291627341773812E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9982364254100151	WITHOUT_CLASSIFICATION	0.001763574589984884	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998360886063284	WITHOUT_CLASSIFICATION	1.6391139367160222E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998339993117078	WITHOUT_CLASSIFICATION	1.6600068829219513E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998597423595866	WITHOUT_CLASSIFICATION	1.40257640413381E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998597423595866	WITHOUT_CLASSIFICATION	1.40257640413381E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999713764845793	WITHOUT_CLASSIFICATION	2.8623515420717083E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999681448516123	WITHOUT_CLASSIFICATION	3.1855148387762465E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999508938876368	WITHOUT_CLASSIFICATION	4.910611236327407E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999508938876368	WITHOUT_CLASSIFICATION	4.910611236327407E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995824100858904	WITHOUT_CLASSIFICATION	4.175899141096263E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993878597216889	WITHOUT_CLASSIFICATION	6.121402783111353E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9988503241031624	WITHOUT_CLASSIFICATION	0.0011496758968375812	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998577967394345	WITHOUT_CLASSIFICATION	1.4220326056552698E-4	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998702055915062	WITHOUT_CLASSIFICATION	1.297944084939069E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998064555367111	WITHOUT_CLASSIFICATION	1.9354446328894868E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999597599435958	WITHOUT_CLASSIFICATION	4.024005640413148E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999584423088272	WITHOUT_CLASSIFICATION	4.155769117275787E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999584423088272	WITHOUT_CLASSIFICATION	4.155769117275787E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999517217370508	WITHOUT_CLASSIFICATION	4.827826294917196E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999947473988163	WITHOUT_CLASSIFICATION	5.25260118369254E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999947473988163	WITHOUT_CLASSIFICATION	5.25260118369254E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999722719071744	WITHOUT_CLASSIFICATION	2.772809282552318E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999458211250076	WITHOUT_CLASSIFICATION	5.417887499246451E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999858335810391	WITHOUT_CLASSIFICATION	1.4166418960946136E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999843511119105	WITHOUT_CLASSIFICATION	1.564888808948926E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999536704353373	WITHOUT_CLASSIFICATION	4.632956466267268E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9925979706605216	WITHOUT_CLASSIFICATION	0.007402029339478464	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9992677506531755	WITHOUT_CLASSIFICATION	7.322493468245483E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9997868236105926	WITHOUT_CLASSIFICATION	2.1317638940749115E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9988354651479907	WITHOUT_CLASSIFICATION	0.0011645348520093613	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9979200174010215	WITHOUT_CLASSIFICATION	0.0020799825989784564	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999569436915212	WITHOUT_CLASSIFICATION	4.305630847877386E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998542050667659	WITHOUT_CLASSIFICATION	1.457949332340036E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998542050667659	WITHOUT_CLASSIFICATION	1.457949332340036E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998542050667659	WITHOUT_CLASSIFICATION	1.457949332340036E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998542050667659	WITHOUT_CLASSIFICATION	1.457949332340036E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999363586133013	WITHOUT_CLASSIFICATION	6.364138669865012E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9968716594183853	WITHOUT_CLASSIFICATION	0.0031283405816147918	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.999895982866721	WITHOUT_CLASSIFICATION	1.0401713327903962E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998548959395857	WITHOUT_CLASSIFICATION	1.4510406041434265E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9980212613171786	WITHOUT_CLASSIFICATION	0.0019787386828214043	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998584326801903	WITHOUT_CLASSIFICATION	1.4156731980971473E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997187208355255	WITHOUT_CLASSIFICATION	2.8127916447450785E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998458660370341	WITHOUT_CLASSIFICATION	1.5413396296592985E-4	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999228723647172	WITHOUT_CLASSIFICATION	7.712763528271304E-5	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999581666043443	WITHOUT_CLASSIFICATION	4.18333956555693E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999279622162938	WITHOUT_CLASSIFICATION	7.203778370624755E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9990971825905519	WITHOUT_CLASSIFICATION	9.028174094481494E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997761211672842	WITHOUT_CLASSIFICATION	2.2387883271578633E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999915619811668	WITHOUT_CLASSIFICATION	8.438018833164655E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999279622162938	WITHOUT_CLASSIFICATION	7.203778370624755E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999563282956105	WITHOUT_CLASSIFICATION	4.367170438946768E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998059151889837	WITHOUT_CLASSIFICATION	1.9408481101624168E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999996751774803	WITHOUT_CLASSIFICATION	3.2482251970359395E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997094761322228	WITHOUT_CLASSIFICATION	2.905238677771641E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999294609738707	WITHOUT_CLASSIFICATION	7.053902612930365E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987157986062695	WITHOUT_CLASSIFICATION	0.0012842013937306102	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999979183657539	WITHOUT_CLASSIFICATION	2.081634246101321E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999190897506472	WITHOUT_CLASSIFICATION	8.091024935274023E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979266734294	WITHOUT_CLASSIFICATION	2.07332657059547E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998393312766586	WITHOUT_CLASSIFICATION	1.6066872334146595E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979266734294	WITHOUT_CLASSIFICATION	2.07332657059547E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998720812832425	WITHOUT_CLASSIFICATION	1.2791871675759843E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9968183862831613	WITHOUT_CLASSIFICATION	0.0031816137168386286	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996912833693242	WITHOUT_CLASSIFICATION	3.0871663067572665E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998638713202938	WITHOUT_CLASSIFICATION	1.361286797062862E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9996923625434263	WITHOUT_CLASSIFICATION	3.0763745657370786E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999918348661347	WITHOUT_CLASSIFICATION	8.165133865148584E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998943207042251	WITHOUT_CLASSIFICATION	1.0567929577499307E-4	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999890668210406	WITHOUT_CLASSIFICATION	1.0933178959401234E-4	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998943207042251	WITHOUT_CLASSIFICATION	1.0567929577499307E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999196338997824	WITHOUT_CLASSIFICATION	8.036610021751359E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999823670467821	WITHOUT_CLASSIFICATION	1.7632953217961676E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999584097023843	WITHOUT_CLASSIFICATION	4.1590297615725765E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999829832837624	WITHOUT_CLASSIFICATION	1.7016716237618823E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999918348661347	WITHOUT_CLASSIFICATION	8.165133865148584E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999890668210406	WITHOUT_CLASSIFICATION	1.0933178959401234E-4	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999196338997824	WITHOUT_CLASSIFICATION	8.036610021751359E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999623139952524	WITHOUT_CLASSIFICATION	3.7686004747597245E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9998636299098755	WITHOUT_CLASSIFICATION	1.363700901245787E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9996208936976533	WITHOUT_CLASSIFICATION	3.79106302346714E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9997972359900823	WITHOUT_CLASSIFICATION	2.0276400991783543E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997650315278885	WITHOUT_CLASSIFICATION	2.3496847211136758E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999419446866267	WITHOUT_CLASSIFICATION	5.805531337339265E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955971434175	WITHOUT_CLASSIFICATION	1.044028565825416E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999823670467821	WITHOUT_CLASSIFICATION	1.7632953217961676E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999907331380551	WITHOUT_CLASSIFICATION	9.266861944901095E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99929106862044	WITHOUT_CLASSIFICATION	7.089313795599238E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999609519539868	WITHOUT_CLASSIFICATION	3.9048046013136426E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955971434175	WITHOUT_CLASSIFICATION	1.044028565825416E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998860259567978	WITHOUT_CLASSIFICATION	1.1397404320219431E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955971434175	WITHOUT_CLASSIFICATION	1.044028565825416E-4	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999820183491582	WITHOUT_CLASSIFICATION	1.7981650841694794E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999151339597233	WITHOUT_CLASSIFICATION	8.486604027673924E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997666001666172	WITHOUT_CLASSIFICATION	2.3339983338284794E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999743836705179	WITHOUT_CLASSIFICATION	2.5616329482069977E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999736608069936	WITHOUT_CLASSIFICATION	2.6339193006387717E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999154983864976	WITHOUT_CLASSIFICATION	8.450161350244186E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999942011812415	WITHOUT_CLASSIFICATION	5.7988187584888806E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996368188517961	WITHOUT_CLASSIFICATION	3.6318114820384987E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999760968140514	WITHOUT_CLASSIFICATION	2.3903185948567018E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998782541075647	WITHOUT_CLASSIFICATION	1.2174589243520716E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998367226115733	WITHOUT_CLASSIFICATION	1.6327738842663626E-4	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998782541075647	WITHOUT_CLASSIFICATION	1.2174589243520716E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.962665452594607	WITHOUT_CLASSIFICATION	0.03733454740539296	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999791174959633	WITHOUT_CLASSIFICATION	2.088250403670015E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9994213119063441	WITHOUT_CLASSIFICATION	5.786880936559784E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999971585228833	WITHOUT_CLASSIFICATION	2.8414771167048693E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999773379042153	WITHOUT_CLASSIFICATION	2.2662095784701355E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9994850610721565	WITHOUT_CLASSIFICATION	5.149389278434952E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999834393816137	WITHOUT_CLASSIFICATION	1.656061838622438E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996499107000629	WITHOUT_CLASSIFICATION	3.500892999370748E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991713608025894	WITHOUT_CLASSIFICATION	8.286391974105972E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991713608025894	WITHOUT_CLASSIFICATION	8.286391974105972E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.99998231830046	WITHOUT_CLASSIFICATION	1.7681699539935265E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998220537690661	WITHOUT_CLASSIFICATION	1.779462309340293E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999896110591266	WITHOUT_CLASSIFICATION	1.0388940873357355E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996431717992634	WITHOUT_CLASSIFICATION	3.5682820073650316E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998998419559686	WITHOUT_CLASSIFICATION	1.0015804403146543E-4	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998385499983133	WITHOUT_CLASSIFICATION	1.6145000168676815E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.996776291452412	WITHOUT_CLASSIFICATION	0.0032237085475880353	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9923231994370615	WITHOUT_CLASSIFICATION	0.007676800562938465	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999461417355635	WITHOUT_CLASSIFICATION	5.385826443649802E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997565693077225	WITHOUT_CLASSIFICATION	2.4343069227746335E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9996010661138403	WITHOUT_CLASSIFICATION	3.989338861597038E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998520791899693	WITHOUT_CLASSIFICATION	1.47920810030663E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999365853384137	WITHOUT_CLASSIFICATION	6.341466158628651E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999993738904874	WITHOUT_CLASSIFICATION	6.261095125934053E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996228605416178	WITHOUT_CLASSIFICATION	3.7713945838224326E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998811627914068	WITHOUT_CLASSIFICATION	1.1883720859321747E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998811627914068	WITHOUT_CLASSIFICATION	1.1883720859321747E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999689720987942	WITHOUT_CLASSIFICATION	3.102790120582249E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996368188517961	WITHOUT_CLASSIFICATION	3.6318114820384987E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989611420604745	WITHOUT_CLASSIFICATION	0.0010388579395256003	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999773549209361	WITHOUT_CLASSIFICATION	2.2645079063827484E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998565275045475	WITHOUT_CLASSIFICATION	1.4347249545252117E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996286887327495	WITHOUT_CLASSIFICATION	3.713112672505729E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998740478381332	WITHOUT_CLASSIFICATION	1.259521618668121E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9994938840063236	WITHOUT_CLASSIFICATION	5.061159936764853E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999975483514158	WITHOUT_CLASSIFICATION	2.4516485841996073E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999342759804225	WITHOUT_CLASSIFICATION	6.572401957747745E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999813677684015	WITHOUT_CLASSIFICATION	1.8632231598531745E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998829924987492	WITHOUT_CLASSIFICATION	1.1700750125087776E-4	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999330603595521	WITHOUT_CLASSIFICATION	6.693964044787818E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999205748427695	WITHOUT_CLASSIFICATION	7.942515723050075E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999996997075294	WITHOUT_CLASSIFICATION	3.002924705339997E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998639880934825	WITHOUT_CLASSIFICATION	1.3601190651750623E-4	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999814046607105	WITHOUT_CLASSIFICATION	1.8595339289596273E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999935510979789	WITHOUT_CLASSIFICATION	6.448902021010425E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997476670217545	WITHOUT_CLASSIFICATION	2.523329782453916E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999987786370963	WITHOUT_CLASSIFICATION	1.2213629037077387E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996343436414874	WITHOUT_CLASSIFICATION	3.656563585127059E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999516567181215	WITHOUT_CLASSIFICATION	4.834328187855135E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9912454944829309	WITHOUT_CLASSIFICATION	0.008754505517069142	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999683861971237	WITHOUT_CLASSIFICATION	3.1613802876275544E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999487285134868	WITHOUT_CLASSIFICATION	5.1271486513121406E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998277159997047	WITHOUT_CLASSIFICATION	1.7228400029521834E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9988637558803813	WITHOUT_CLASSIFICATION	0.0011362441196186759	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998168285347189	WITHOUT_CLASSIFICATION	1.8317146528108947E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999987325083276	WITHOUT_CLASSIFICATION	1.2674916723879297E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.995025897179247	WITHOUT_CLASSIFICATION	0.004974102820752905	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998363104490463	WITHOUT_CLASSIFICATION	1.6368955095366204E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998594795482085	WITHOUT_CLASSIFICATION	1.4052045179143997E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998557302003346	WITHOUT_CLASSIFICATION	1.4426979966541931E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997699082969322	WITHOUT_CLASSIFICATION	2.3009170306771852E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9989898097706587	WITHOUT_CLASSIFICATION	0.0010101902293412786	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9965964946118391	WITHOUT_CLASSIFICATION	0.003403505388160834	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9079087374408785	WITHOUT_CLASSIFICATION	0.0920912625591215	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999556414759652	WITHOUT_CLASSIFICATION	4.4358524034770124E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999556414759652	WITHOUT_CLASSIFICATION	4.4358524034770124E-5	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999593241984093	WITHOUT_CLASSIFICATION	4.0675801590735343E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999744223402078	WITHOUT_CLASSIFICATION	2.557765979210888E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999511453505617	WITHOUT_CLASSIFICATION	4.8854649438217996E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999511453505617	WITHOUT_CLASSIFICATION	4.8854649438217996E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.999990745966171	WITHOUT_CLASSIFICATION	9.254033828945121E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999192687182396	WITHOUT_CLASSIFICATION	8.073128176041807E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999423282013526	WITHOUT_CLASSIFICATION	5.767179864723195E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999988344174178	WITHOUT_CLASSIFICATION	1.165582582157305E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998421448258902	WITHOUT_CLASSIFICATION	1.5785517410986052E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998958277807762	WITHOUT_CLASSIFICATION	1.041722192237243E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998958277807762	WITHOUT_CLASSIFICATION	1.041722192237243E-4	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999801408429512	WITHOUT_CLASSIFICATION	1.9859157048793128E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998387473087469	WITHOUT_CLASSIFICATION	1.6125269125305265E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999388963251884	WITHOUT_CLASSIFICATION	6.110367481152425E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999388963251884	WITHOUT_CLASSIFICATION	6.110367481152425E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.999965236022473	WITHOUT_CLASSIFICATION	3.476397752703783E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999586836860719	WITHOUT_CLASSIFICATION	4.131631392817904E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999330149656128	WITHOUT_CLASSIFICATION	6.69850343871577E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999916640486586	WITHOUT_CLASSIFICATION	8.335951341456386E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999785145718326	WITHOUT_CLASSIFICATION	2.1485428167364707E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999465458307849	WITHOUT_CLASSIFICATION	5.3454169215112334E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998891208505691	WITHOUT_CLASSIFICATION	1.108791494309291E-4	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999767979818157	WITHOUT_CLASSIFICATION	2.3202018184305687E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999963784776479	WITHOUT_CLASSIFICATION	3.621522352188859E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998810150743714	WITHOUT_CLASSIFICATION	1.1898492562852127E-4	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998339320391099	WITHOUT_CLASSIFICATION	1.6606796089009643E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9985220341408494	WITHOUT_CLASSIFICATION	0.0014779658591506585	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.99993622400504	WITHOUT_CLASSIFICATION	6.377599496000969E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999924706701961	WITHOUT_CLASSIFICATION	7.52932980390901E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999399808179501	WITHOUT_CLASSIFICATION	6.001918204985446E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997584727785872	WITHOUT_CLASSIFICATION	2.4152722141287667E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999872401596893	WITHOUT_CLASSIFICATION	1.27598403107062E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9996152940523824	WITHOUT_CLASSIFICATION	3.8470594761773075E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999405506563177	WITHOUT_CLASSIFICATION	5.944934368223027E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9996939303032648	WITHOUT_CLASSIFICATION	3.0606969673514626E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9994464309103129	WITHOUT_CLASSIFICATION	5.535690896870141E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999197166540383	WITHOUT_CLASSIFICATION	8.028334596163029E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999345474017467	WITHOUT_CLASSIFICATION	6.545259825329122E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.998798734241415	WITHOUT_CLASSIFICATION	0.0012012657585849856	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9994750922915564	WITHOUT_CLASSIFICATION	5.249077084437309E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9998933892814442	WITHOUT_CLASSIFICATION	1.0661071855584419E-4	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999445155070286	WITHOUT_CLASSIFICATION	5.548449297138195E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999985916655564	WITHOUT_CLASSIFICATION	1.408334443600729E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999735215664293	WITHOUT_CLASSIFICATION	2.6478433570700958E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999993032038507	WITHOUT_CLASSIFICATION	6.967961493108071E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999639268739183	WITHOUT_CLASSIFICATION	3.607312608168564E-5	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999766884360611	WITHOUT_CLASSIFICATION	2.331156393891223E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999953358193715	WITHOUT_CLASSIFICATION	4.664180628590747E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999837634742672	WITHOUT_CLASSIFICATION	1.6236525732798827E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998775629089239	WITHOUT_CLASSIFICATION	1.224370910759653E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998973191117124	WITHOUT_CLASSIFICATION	1.026808882876161E-4	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998198002345793	WITHOUT_CLASSIFICATION	1.8019976542082216E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.998827195968725	WITHOUT_CLASSIFICATION	0.0011728040312749858	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999535387657831	WITHOUT_CLASSIFICATION	4.646123421693147E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999756768466592	WITHOUT_CLASSIFICATION	2.432315334080623E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9998715464524103	WITHOUT_CLASSIFICATION	1.2845354758969266E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999425990895697	WITHOUT_CLASSIFICATION	5.740091043022497E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9989945407402286	WITHOUT_CLASSIFICATION	0.0010054592597714205	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999795901429946	WITHOUT_CLASSIFICATION	2.0409857005348096E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998718695164889	WITHOUT_CLASSIFICATION	1.281304835111772E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999343028113585	WITHOUT_CLASSIFICATION	6.569718864138933E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998239803595074	WITHOUT_CLASSIFICATION	1.76019640492675E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999930861264625	WITHOUT_CLASSIFICATION	6.913873537480366E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999688985419996	WITHOUT_CLASSIFICATION	3.110145800045194E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999934928163101	WITHOUT_CLASSIFICATION	6.507183689933446E-6	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996766924772851	WITHOUT_CLASSIFICATION	3.233075227149114E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999525745159977	WITHOUT_CLASSIFICATION	4.742548400236785E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9982272235113419	WITHOUT_CLASSIFICATION	0.0017727764886581246	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999934058755059	WITHOUT_CLASSIFICATION	6.594124494092148E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9988914824977223	WITHOUT_CLASSIFICATION	0.0011085175022777448	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999842274181553	WITHOUT_CLASSIFICATION	1.5772581844755316E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999641120902245	WITHOUT_CLASSIFICATION	3.588790977539574E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999641120902245	WITHOUT_CLASSIFICATION	3.588790977539574E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999956895740723	WITHOUT_CLASSIFICATION	4.310425927720418E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9994196841303419	WITHOUT_CLASSIFICATION	5.803158696581161E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999802847739211	WITHOUT_CLASSIFICATION	1.9715226078924668E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999548908827754	WITHOUT_CLASSIFICATION	4.510911722451594E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999753144242207	WITHOUT_CLASSIFICATION	2.4685575779319695E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.99971436811754	WITHOUT_CLASSIFICATION	2.856318824599674E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999906323658637	WITHOUT_CLASSIFICATION	9.367634136312893E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999551165393212	WITHOUT_CLASSIFICATION	4.488346067875704E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997329231278945	WITHOUT_CLASSIFICATION	2.6707687210549095E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999668875965934	WITHOUT_CLASSIFICATION	3.3112403406613965E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999507542466524	WITHOUT_CLASSIFICATION	4.924575334761907E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.995153306363261	WITHOUT_CLASSIFICATION	0.0048466936367390166	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996693442199	WITHOUT_CLASSIFICATION	3.306557801014514E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999994186022578	WITHOUT_CLASSIFICATION	5.813977421158623E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995452147241767	WITHOUT_CLASSIFICATION	4.5478527582325565E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995452147241767	WITHOUT_CLASSIFICATION	4.5478527582325565E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999892525923117	WITHOUT_CLASSIFICATION	1.0747407688308854E-4	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992245437564423	WITHOUT_CLASSIFICATION	7.754562435577196E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998198007711141	WITHOUT_CLASSIFICATION	1.8019922888595083E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999668746514454	WITHOUT_CLASSIFICATION	3.312534855453457E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999934706947884	WITHOUT_CLASSIFICATION	6.529305211535394E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999132220316381	WITHOUT_CLASSIFICATION	8.677796836194144E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.999815503169171	WITHOUT_CLASSIFICATION	1.8449683082893866E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9965041992020923	WITHOUT_CLASSIFICATION	0.0034958007979077705	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999965562308988	WITHOUT_CLASSIFICATION	3.4437691012187454E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999099802937431	WITHOUT_CLASSIFICATION	9.001970625685689E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999678234201973	WITHOUT_CLASSIFICATION	3.217657980272259E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9997759011070041	WITHOUT_CLASSIFICATION	2.2409889299590112E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999858022927517	WITHOUT_CLASSIFICATION	1.4197707248359195E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999593501337608	WITHOUT_CLASSIFICATION	4.064986623907114E-5	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998232183423804	WITHOUT_CLASSIFICATION	1.767816576196065E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999820295285161	WITHOUT_CLASSIFICATION	1.7970471483884216E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999854735855978	WITHOUT_CLASSIFICATION	1.452641440224438E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999188249287075	WITHOUT_CLASSIFICATION	8.117507129237753E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999602165252025	WITHOUT_CLASSIFICATION	3.978347479749751E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999596420129853	WITHOUT_CLASSIFICATION	4.035798701481358E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999541657099432	WITHOUT_CLASSIFICATION	4.5834290056696586E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999879639550687	WITHOUT_CLASSIFICATION	1.2036044931337588E-5	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999857208464757	WITHOUT_CLASSIFICATION	1.427915352430447E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996673659312637	WITHOUT_CLASSIFICATION	3.326340687362801E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998782235437917	WITHOUT_CLASSIFICATION	1.2177645620828313E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999426669712346	WITHOUT_CLASSIFICATION	5.7333028765355205E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.99952805888357	WITHOUT_CLASSIFICATION	4.7194111642996124E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999606975818527	WITHOUT_CLASSIFICATION	3.9302418147293445E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998383081909089	WITHOUT_CLASSIFICATION	1.6169180909110127E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997064911910991	WITHOUT_CLASSIFICATION	2.935088089009305E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999617696888762	WITHOUT_CLASSIFICATION	3.8230311123737875E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999917503940275	WITHOUT_CLASSIFICATION	8.249605972494075E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995099027043924	WITHOUT_CLASSIFICATION	4.900972956076289E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999753826377823	WITHOUT_CLASSIFICATION	2.4617362217803333E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998561789952085	WITHOUT_CLASSIFICATION	1.4382100479138374E-4	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999797954041614	WITHOUT_CLASSIFICATION	2.0204595838724804E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9995911330438179	WITHOUT_CLASSIFICATION	4.0886695618211333E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998484373897144	WITHOUT_CLASSIFICATION	1.5156261028557438E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999974513173052	WITHOUT_CLASSIFICATION	2.548682694722937E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9800678651960075	WITHOUT_CLASSIFICATION	0.019932134803992474	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9800678651960075	WITHOUT_CLASSIFICATION	0.019932134803992474	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999846487547447	WITHOUT_CLASSIFICATION	1.5351245255228953E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8552784376284219	WITHOUT_CLASSIFICATION	0.14472156237157816	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999739822581377	WITHOUT_CLASSIFICATION	2.6017741862223875E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999581215153576	WITHOUT_CLASSIFICATION	4.187848464251167E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9996956179565025	WITHOUT_CLASSIFICATION	3.043820434975593E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9987350755039901	WITHOUT_CLASSIFICATION	0.00126492449600992	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999779510539317	WITHOUT_CLASSIFICATION	2.2048946068182416E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997743361641013	WITHOUT_CLASSIFICATION	2.2566383589862682E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9957383506430403	WITHOUT_CLASSIFICATION	0.004261649356959718	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997883215933542	WITHOUT_CLASSIFICATION	2.1167840664591844E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933011209997	WITHOUT_CLASSIFICATION	1.0669887900032931E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9984035939526513	WITHOUT_CLASSIFICATION	0.0015964060473486771	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9990817849395561	WITHOUT_CLASSIFICATION	9.182150604437818E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999940971689284	WITHOUT_CLASSIFICATION	5.902831071598281E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997475564896606	WITHOUT_CLASSIFICATION	2.524435103394174E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9996419587232225	WITHOUT_CLASSIFICATION	3.580412767775336E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999623639940814	WITHOUT_CLASSIFICATION	3.76360059186191E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9986477994242263	WITHOUT_CLASSIFICATION	0.0013522005757736052	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994948555269648	WITHOUT_CLASSIFICATION	5.051444730352044E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9975729698334105	WITHOUT_CLASSIFICATION	0.002427030166589518	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998128482305491	WITHOUT_CLASSIFICATION	1.8715176945084363E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999911559654316	WITHOUT_CLASSIFICATION	8.844034568334678E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999949513917927	WITHOUT_CLASSIFICATION	5.048608207217992E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999788452629474	WITHOUT_CLASSIFICATION	2.115473705259285E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995274680146916	WITHOUT_CLASSIFICATION	4.725319853084066E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999181446721109	WITHOUT_CLASSIFICATION	8.185532788897965E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998242361828226	WITHOUT_CLASSIFICATION	1.757638171774474E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9948135161278475	WITHOUT_CLASSIFICATION	0.005186483872152502	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999977456152284	WITHOUT_CLASSIFICATION	2.2543847716003714E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9996083225422648	WITHOUT_CLASSIFICATION	3.9167745773508665E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999952938308936	WITHOUT_CLASSIFICATION	4.706169106377756E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999386575016441	WITHOUT_CLASSIFICATION	6.134249835584305E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999910913219402	WITHOUT_CLASSIFICATION	8.908678059798284E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998462944127887	WITHOUT_CLASSIFICATION	1.5370558721130957E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999528874977502	WITHOUT_CLASSIFICATION	4.7112502249782514E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9995322343131324	WITHOUT_CLASSIFICATION	4.6776568686769123E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999017920670148	WITHOUT_CLASSIFICATION	9.820793298517259E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999780118454135	WITHOUT_CLASSIFICATION	2.198815458657511E-5	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999176055360931	WITHOUT_CLASSIFICATION	8.239446390683734E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999321573719545	WITHOUT_CLASSIFICATION	6.784262804552866E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998629831797561	WITHOUT_CLASSIFICATION	1.370168202439362E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9986081036139268	WITHOUT_CLASSIFICATION	0.0013918963860731852	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999414654689248	WITHOUT_CLASSIFICATION	5.85345310751255E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999914353365721	WITHOUT_CLASSIFICATION	8.564663427885366E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999991432720077	WITHOUT_CLASSIFICATION	8.567279922893712E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999300250213234	WITHOUT_CLASSIFICATION	6.997497867659702E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997408101457577	WITHOUT_CLASSIFICATION	2.5918985424230016E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996693442199	WITHOUT_CLASSIFICATION	3.306557801014514E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9998773247504977	WITHOUT_CLASSIFICATION	1.226752495022781E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999942121025268	WITHOUT_CLASSIFICATION	5.78789747317873E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999869180141849	WITHOUT_CLASSIFICATION	1.3081985815092888E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999924266958299	WITHOUT_CLASSIFICATION	7.573304170109128E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999972459436633	WITHOUT_CLASSIFICATION	2.754056336659229E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9985598221805689	WITHOUT_CLASSIFICATION	0.0014401778194310525	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9993445506230176	WITHOUT_CLASSIFICATION	6.554493769823939E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.5946348039222521	WITHOUT_CLASSIFICATION	0.40536519607774796	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999940198794616	WITHOUT_CLASSIFICATION	5.9801205383949176E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996063066808317	WITHOUT_CLASSIFICATION	3.9369331916830455E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9205438966939116	WITHOUT_CLASSIFICATION	0.07945610330608845	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983663724176077	WITHOUT_CLASSIFICATION	0.0016336275823922895	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999852890546705	WITHOUT_CLASSIFICATION	1.4710945329357264E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9989144042366317	WITHOUT_CLASSIFICATION	0.0010855957633683654	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998192654526097	WITHOUT_CLASSIFICATION	1.807345473903889E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996539948193248	WITHOUT_CLASSIFICATION	3.4600518067511325E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999971327467796	WITHOUT_CLASSIFICATION	2.867253220446826E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9974507467789354	WITHOUT_CLASSIFICATION	0.002549253221064512	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998192654526097	WITHOUT_CLASSIFICATION	1.807345473903889E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9988081715340381	WITHOUT_CLASSIFICATION	0.001191828465961894	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999843577844998	WITHOUT_CLASSIFICATION	1.5642215500221638E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999932461576253	WITHOUT_CLASSIFICATION	6.753842374672615E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9978302162373465	WITHOUT_CLASSIFICATION	0.00216978376265359	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.99989862541027	WITHOUT_CLASSIFICATION	1.0137458973007838E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9969616191332713	WITHOUT_CLASSIFICATION	0.0030383808667287493	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999801089904782	WITHOUT_CLASSIFICATION	1.9891009521924624E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999658741329135	WITHOUT_CLASSIFICATION	3.41258670865809E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999937449495517	WITHOUT_CLASSIFICATION	6.255050448317832E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9838640675678467	WITHOUT_CLASSIFICATION	0.01613593243215326	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995705377497148	WITHOUT_CLASSIFICATION	4.2946225028519445E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9867713667246888	WITHOUT_CLASSIFICATION	0.013228633275311076	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998914779673647	WITHOUT_CLASSIFICATION	1.0852203263526121E-4	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999857109828	WITHOUT_CLASSIFICATION	1.4289017200167688E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998909947796583	WITHOUT_CLASSIFICATION	1.0900522034176198E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9912454944829309	WITHOUT_CLASSIFICATION	0.008754505517069142	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9981599325906724	WITHOUT_CLASSIFICATION	0.0018400674093275778	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999668263543944	WITHOUT_CLASSIFICATION	3.317364560567867E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999309826320834	WITHOUT_CLASSIFICATION	6.901736791659837E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9948157983494582	WITHOUT_CLASSIFICATION	0.005184201650541694	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999945916822157	WITHOUT_CLASSIFICATION	5.408317784277519E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999956782792537	WITHOUT_CLASSIFICATION	4.321720746301077E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9951964947993782	WITHOUT_CLASSIFICATION	0.00480350520062185	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999422912015	WITHOUT_CLASSIFICATION	5.770879855185636E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999980294944442	WITHOUT_CLASSIFICATION	1.9705055557905104E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999733940012148	WITHOUT_CLASSIFICATION	2.6605998785201294E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997339807346363	WITHOUT_CLASSIFICATION	2.660192653638056E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999420810789464	WITHOUT_CLASSIFICATION	5.791892105353892E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.975249745399293	WITHOUT_CLASSIFICATION	0.024750254600707094	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999834834445235	WITHOUT_CLASSIFICATION	1.651655547653419E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999582709497755	WITHOUT_CLASSIFICATION	4.172905022442811E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9995046433994342	WITHOUT_CLASSIFICATION	4.953566005658094E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9994255620954225	WITHOUT_CLASSIFICATION	5.744379045775665E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999963613039442	WITHOUT_CLASSIFICATION	3.63869605578565E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999991830666997	WITHOUT_CLASSIFICATION	8.169333004095556E-7	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999995124954348	WITHOUT_CLASSIFICATION	4.875045651614904E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999323656158987	WITHOUT_CLASSIFICATION	6.763438410128296E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999081211040176	WITHOUT_CLASSIFICATION	9.18788959823655E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999682158193832	WITHOUT_CLASSIFICATION	3.1784180616768414E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9995934491273306	WITHOUT_CLASSIFICATION	4.065508726694034E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998646180511066	WITHOUT_CLASSIFICATION	1.3538194889345912E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998646180511066	WITHOUT_CLASSIFICATION	1.3538194889345912E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9986531885185352	WITHOUT_CLASSIFICATION	0.0013468114814648123	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999910420191248	WITHOUT_CLASSIFICATION	8.957980875212913E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999334241732685	WITHOUT_CLASSIFICATION	6.657582673155997E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.7948204690708356	WITHOUT_CLASSIFICATION	0.20517953092916447	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998577967394345	WITHOUT_CLASSIFICATION	1.4220326056552698E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9998577967394345	WITHOUT_CLASSIFICATION	1.4220326056552698E-4	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998703602264006	WITHOUT_CLASSIFICATION	1.296397735993116E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9985917958626049	WITHOUT_CLASSIFICATION	0.001408204137395053	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997814467000989	WITHOUT_CLASSIFICATION	2.1855329990096885E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999354840627867	WITHOUT_CLASSIFICATION	6.451593721334633E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999757294992713	WITHOUT_CLASSIFICATION	2.4270500728718414E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999654051931359	WITHOUT_CLASSIFICATION	3.459480686410018E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9996211811908768	WITHOUT_CLASSIFICATION	3.7881880912315536E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999482350026664	WITHOUT_CLASSIFICATION	5.176499733374219E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999892406391038	WITHOUT_CLASSIFICATION	1.0759360896179206E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983474112456	WITHOUT_CLASSIFICATION	1.0165258875437679E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983474112456	WITHOUT_CLASSIFICATION	1.0165258875437679E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996813747811533	WITHOUT_CLASSIFICATION	3.1862521884671544E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999388136812769	WITHOUT_CLASSIFICATION	6.118631872312632E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999450397162479	WITHOUT_CLASSIFICATION	5.496028375209761E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997047592678718	WITHOUT_CLASSIFICATION	2.9524073212818983E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999421270100608	WITHOUT_CLASSIFICATION	5.787298993911175E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998093708534036	WITHOUT_CLASSIFICATION	1.9062914659643567E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999833596296759	WITHOUT_CLASSIFICATION	1.664037032408546E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999786910278003	WITHOUT_CLASSIFICATION	2.1308972199662554E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998511484220403	WITHOUT_CLASSIFICATION	1.488515779597585E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9989732637982882	WITHOUT_CLASSIFICATION	0.0010267362017118069	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999270935060076	WITHOUT_CLASSIFICATION	7.290649399230826E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9838640675678467	WITHOUT_CLASSIFICATION	0.01613593243215326	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999976970288628	WITHOUT_CLASSIFICATION	2.3029711373250045E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9978169558704166	WITHOUT_CLASSIFICATION	0.0021830441295833058	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999896771168061	WITHOUT_CLASSIFICATION	1.0322883193946422E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997876535072696	WITHOUT_CLASSIFICATION	2.123464927303689E-4	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998426140652314	WITHOUT_CLASSIFICATION	1.573859347685664E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996003127223997	WITHOUT_CLASSIFICATION	3.9968727760033895E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997397377140594	WITHOUT_CLASSIFICATION	2.602622859406154E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999887718627727	WITHOUT_CLASSIFICATION	1.1228137227189068E-5	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999424274077477	WITHOUT_CLASSIFICATION	5.757259225230241E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986281326715443	WITHOUT_CLASSIFICATION	0.0013718673284557055	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986281326715443	WITHOUT_CLASSIFICATION	0.0013718673284557055	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999279622162938	WITHOUT_CLASSIFICATION	7.203778370624755E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999993132744049	WITHOUT_CLASSIFICATION	6.867255950749127E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9998530140788816	WITHOUT_CLASSIFICATION	1.469859211185037E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997061161213016	WITHOUT_CLASSIFICATION	2.938838786985205E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999543198146454	WITHOUT_CLASSIFICATION	4.568018535457319E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999069364190326	WITHOUT_CLASSIFICATION	9.306358096736874E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998638713202938	WITHOUT_CLASSIFICATION	1.361286797062862E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9987684687734931	WITHOUT_CLASSIFICATION	0.0012315312265068293	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999623139952524	WITHOUT_CLASSIFICATION	3.7686004747597245E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999100644130652	WITHOUT_CLASSIFICATION	8.993558693477643E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955971434175	WITHOUT_CLASSIFICATION	1.044028565825416E-4	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999019102220251	WITHOUT_CLASSIFICATION	9.808977797488496E-5	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999753995613948	WITHOUT_CLASSIFICATION	2.4600438605260016E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999884532074271	WITHOUT_CLASSIFICATION	1.154679257292451E-5	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999939836025552	WITHOUT_CLASSIFICATION	6.016397444711272E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999849212986682	WITHOUT_CLASSIFICATION	1.5078701331803325E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9994474960154189	WITHOUT_CLASSIFICATION	5.525039845811261E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9996309712250437	WITHOUT_CLASSIFICATION	3.690287749563025E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9992706801606199	WITHOUT_CLASSIFICATION	7.293198393802028E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9627128687888841	WITHOUT_CLASSIFICATION	0.03728713121111598	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998150379714507	WITHOUT_CLASSIFICATION	1.8496202854933309E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998407709778	WITHOUT_CLASSIFICATION	1.5922902221561865E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999330149656128	WITHOUT_CLASSIFICATION	6.69850343871577E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999764303078	WITHOUT_CLASSIFICATION	2.356969214597516E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999994178048312	WITHOUT_CLASSIFICATION	5.8219516879551864E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999994178048312	WITHOUT_CLASSIFICATION	5.8219516879551864E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999347193416491	WITHOUT_CLASSIFICATION	6.528065835089187E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999241584860497	WITHOUT_CLASSIFICATION	7.58415139503429E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999994074063974	WITHOUT_CLASSIFICATION	5.9259360259301E-6	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998173515864633	WITHOUT_CLASSIFICATION	1.8264841353658048E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999817610678418	WITHOUT_CLASSIFICATION	1.8238932158180645E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998403050608785	WITHOUT_CLASSIFICATION	1.5969493912145624E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9868771476375973	WITHOUT_CLASSIFICATION	0.01312285236240267	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998363312087217	WITHOUT_CLASSIFICATION	1.6366879127840294E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.7923489700784204	DEFECT	0.20765102992157955	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.8586261520948016	WITHOUT_CLASSIFICATION	0.14137384790519836	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.999830658618639	WITHOUT_CLASSIFICATION	1.6934138136095146E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.999724635499847	WITHOUT_CLASSIFICATION	2.753645001529687E-4	DEFECT
/*	DEFECT	0.9934385779904895	WITHOUT_CLASSIFICATION	0.006561422009510479	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9995594918104083	WITHOUT_CLASSIFICATION	4.405081895917631E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7028697901192432	DEFECT	0.29713020988075683	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9434428368353588	WITHOUT_CLASSIFICATION	0.05655716316464127	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8367843327272777	WITHOUT_CLASSIFICATION	0.1632156672727223	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.87040417844547	DEFECT	0.12959582155452998	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978627134516992	WITHOUT_CLASSIFICATION	0.0021372865483008175	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978627134516992	WITHOUT_CLASSIFICATION	0.0021372865483008175	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9738262626181557	WITHOUT_CLASSIFICATION	0.026173737381844222	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999762510200088	WITHOUT_CLASSIFICATION	2.3748979991305662E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9088628092821885	WITHOUT_CLASSIFICATION	0.09113719071781147	DEFECT
// this call is side-effecty	DEFECT	0.9998012023485433	WITHOUT_CLASSIFICATION	1.987976514567139E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.7946836046919421	WITHOUT_CLASSIFICATION	0.20531639530805784	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9994037574509622	WITHOUT_CLASSIFICATION	5.962425490377504E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8714684384500703	WITHOUT_CLASSIFICATION	0.12853156154992976	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9992298530990583	WITHOUT_CLASSIFICATION	7.701469009416391E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9916307177594412	WITHOUT_CLASSIFICATION	0.008369282240558808	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999762164301905	WITHOUT_CLASSIFICATION	2.378356980949072E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9272761199007664	WITHOUT_CLASSIFICATION	0.07272388009923358	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9995395597167545	WITHOUT_CLASSIFICATION	4.604402832454958E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.5777404890331397	DEFECT	0.4222595109668604	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9981908982278175	DEFECT	0.0018091017721826121	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6270061948562433	DEFECT	0.3729938051437568	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.5270435109011024	WITHOUT_CLASSIFICATION	0.4729564890988976	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.854180042668033	WITHOUT_CLASSIFICATION	0.14581995733196706	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9467619237551701	WITHOUT_CLASSIFICATION	0.05323807624483	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9905076336765162	WITHOUT_CLASSIFICATION	0.009492366323483813	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9978627134516992	WITHOUT_CLASSIFICATION	0.0021372865483008175	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9820680827269749	DEFECT	0.017931917273025108	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.8368210236827863	WITHOUT_CLASSIFICATION	0.16317897631721373	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9998992532090138	WITHOUT_CLASSIFICATION	1.0074679098619198E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9930031569663837	WITHOUT_CLASSIFICATION	0.006996843033616232	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9839427861960036	WITHOUT_CLASSIFICATION	0.016057213803996384	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.998805369307598	WITHOUT_CLASSIFICATION	0.0011946306924019666	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9178960250204272	WITHOUT_CLASSIFICATION	0.0821039749795728	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9730846215478637	WITHOUT_CLASSIFICATION	0.02691537845213635	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9941251930913001	WITHOUT_CLASSIFICATION	0.00587480690869999	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8750703678394454	WITHOUT_CLASSIFICATION	0.12492963216055455	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9996764475606614	WITHOUT_CLASSIFICATION	3.2355243933862414E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9954506275986613	WITHOUT_CLASSIFICATION	0.0045493724013387525	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9816629274433372	WITHOUT_CLASSIFICATION	0.018337072556662854	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9993389639402265	WITHOUT_CLASSIFICATION	6.610360597734434E-4	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9862381257917493	WITHOUT_CLASSIFICATION	0.013761874208250707	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7032930573824592	WITHOUT_CLASSIFICATION	0.296706942617541	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999765999366251	DEFECT	2.3400063374765457E-5	WITHOUT_CLASSIFICATION
