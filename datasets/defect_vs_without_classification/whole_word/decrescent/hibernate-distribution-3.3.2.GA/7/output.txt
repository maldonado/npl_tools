//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999969342095182	WITHOUT_CLASSIFICATION	3.0657904818082826E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9993205366121211	WITHOUT_CLASSIFICATION	6.794633878788731E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999285692455042	WITHOUT_CLASSIFICATION	7.14307544958416E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955208610547	WITHOUT_CLASSIFICATION	4.4791389453049114E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955208610547	WITHOUT_CLASSIFICATION	4.4791389453049114E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999940480533619	WITHOUT_CLASSIFICATION	5.951946638085778E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999880372415299	WITHOUT_CLASSIFICATION	1.1962758470103975E-4	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999841585660528	WITHOUT_CLASSIFICATION	1.5841433947108247E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999606472879619	WITHOUT_CLASSIFICATION	3.93527120381544E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999915486975343	WITHOUT_CLASSIFICATION	8.451302465691969E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999915486975343	WITHOUT_CLASSIFICATION	8.451302465691969E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998872763386605	WITHOUT_CLASSIFICATION	1.1272366133959355E-4	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999755028547164	WITHOUT_CLASSIFICATION	2.4497145283553914E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999616420187557	WITHOUT_CLASSIFICATION	3.8357981244339694E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999669471228625	WITHOUT_CLASSIFICATION	3.3052877137628604E-5	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999358858415925	WITHOUT_CLASSIFICATION	6.41141584074623E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997981152757445	WITHOUT_CLASSIFICATION	2.0188472425553263E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9998010215604375	WITHOUT_CLASSIFICATION	1.9897843956262276E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934060733264413	WITHOUT_CLASSIFICATION	0.006593926673558731	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999450761702386	WITHOUT_CLASSIFICATION	5.4923829761418364E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999657473188256	WITHOUT_CLASSIFICATION	3.425268117452043E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999444998664573	WITHOUT_CLASSIFICATION	5.5500133542769996E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999444998664573	WITHOUT_CLASSIFICATION	5.5500133542769996E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9990926347804358	WITHOUT_CLASSIFICATION	9.073652195642742E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999825661057291	WITHOUT_CLASSIFICATION	1.7433894270914115E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998864944872996	WITHOUT_CLASSIFICATION	1.1350551270035879E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999270447709012	WITHOUT_CLASSIFICATION	7.295522909877106E-5	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9992509778574079	WITHOUT_CLASSIFICATION	7.49022142592148E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8022285040538045	WITHOUT_CLASSIFICATION	0.19777149594619542	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8022285040538045	WITHOUT_CLASSIFICATION	0.19777149594619542	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996999838337908	WITHOUT_CLASSIFICATION	3.0001616620924516E-4	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999802994718662	WITHOUT_CLASSIFICATION	1.9700528133818536E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999812503062213	WITHOUT_CLASSIFICATION	1.874969377871071E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999802461707918	WITHOUT_CLASSIFICATION	1.9753829208210612E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999492807529754	WITHOUT_CLASSIFICATION	5.071924702457164E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998217809189492	WITHOUT_CLASSIFICATION	1.782190810506835E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999752760362928	WITHOUT_CLASSIFICATION	2.47239637072177E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.7809599496816556	WITHOUT_CLASSIFICATION	0.2190400503183444	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998970997470483	WITHOUT_CLASSIFICATION	1.0290025295175342E-4	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9998970997470483	WITHOUT_CLASSIFICATION	1.0290025295175342E-4	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999406895887707	WITHOUT_CLASSIFICATION	5.9310411229231345E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9988773333617509	WITHOUT_CLASSIFICATION	0.0011226666382491046	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.99978124652191	WITHOUT_CLASSIFICATION	2.187534780898967E-4	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999191790851293	WITHOUT_CLASSIFICATION	8.082091487079509E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999888137313074	WITHOUT_CLASSIFICATION	1.1186268692495087E-5	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999999679165549	WITHOUT_CLASSIFICATION	3.208344510364419E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.998515033428793	WITHOUT_CLASSIFICATION	0.0014849665712069967	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995537542782943	WITHOUT_CLASSIFICATION	4.4624572170573744E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999812801615504	WITHOUT_CLASSIFICATION	1.8719838449651716E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999055207523574	WITHOUT_CLASSIFICATION	9.447924764272927E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998838867795916	WITHOUT_CLASSIFICATION	1.1611322040838931E-4	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999514115849715	WITHOUT_CLASSIFICATION	4.8588415028511134E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999909854562842	WITHOUT_CLASSIFICATION	9.014543715855119E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990541002325732	WITHOUT_CLASSIFICATION	9.458997674267593E-4	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999695791457712	WITHOUT_CLASSIFICATION	3.042085422878983E-4	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9996171054391092	WITHOUT_CLASSIFICATION	3.8289456089079653E-4	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999720207236008	WITHOUT_CLASSIFICATION	2.797927639914129E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9997604856675203	WITHOUT_CLASSIFICATION	2.3951433247977496E-4	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999294777117065	WITHOUT_CLASSIFICATION	7.052228829351304E-5	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999548807952648	WITHOUT_CLASSIFICATION	4.5119204735071235E-5	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999808472187922	WITHOUT_CLASSIFICATION	1.9152781207823093E-5	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996134288747	WITHOUT_CLASSIFICATION	3.86571125296606E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999794468578136	WITHOUT_CLASSIFICATION	2.0553142186347482E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998057163354882	WITHOUT_CLASSIFICATION	1.942836645119048E-4	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9986690631582291	WITHOUT_CLASSIFICATION	0.0013309368417708882	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999282478649975	WITHOUT_CLASSIFICATION	7.175213500252686E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999376436089963	WITHOUT_CLASSIFICATION	6.235639100377813E-5	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999995962643969	WITHOUT_CLASSIFICATION	4.037356030689396E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999406071111445	WITHOUT_CLASSIFICATION	5.939288885556603E-5	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999786472885865	WITHOUT_CLASSIFICATION	2.135271141340829E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999247485021	WITHOUT_CLASSIFICATION	7.525149789471061E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999836308264526	WITHOUT_CLASSIFICATION	1.6369173547331903E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998727535420733	WITHOUT_CLASSIFICATION	1.2724645792682948E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996421932786483	WITHOUT_CLASSIFICATION	3.5780672135164385E-4	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999182989761636	WITHOUT_CLASSIFICATION	8.170102383653811E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999728049153986	WITHOUT_CLASSIFICATION	2.719508460139785E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996421932786483	WITHOUT_CLASSIFICATION	3.5780672135164385E-4	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9995632384765453	WITHOUT_CLASSIFICATION	4.3676152345473743E-4	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999621803982068	WITHOUT_CLASSIFICATION	3.7819601793194854E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999973258929034	WITHOUT_CLASSIFICATION	2.674107096594272E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999808693950719	WITHOUT_CLASSIFICATION	1.9130604928130792E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999916144692867	WITHOUT_CLASSIFICATION	8.385530713185018E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999916144692867	WITHOUT_CLASSIFICATION	8.385530713185018E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998971341447332	WITHOUT_CLASSIFICATION	1.0286585526674226E-4	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999991767141156	WITHOUT_CLASSIFICATION	8.23285884276391E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999942304863264	WITHOUT_CLASSIFICATION	5.769513673619097E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999627877216896	WITHOUT_CLASSIFICATION	3.721227831045619E-5	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999952543537283	WITHOUT_CLASSIFICATION	4.7456462718056424E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999312690596519	WITHOUT_CLASSIFICATION	6.873094034806594E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999891998758914	WITHOUT_CLASSIFICATION	1.0800124108506607E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999742527220818	WITHOUT_CLASSIFICATION	2.5747277918206527E-5	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999573662272713	WITHOUT_CLASSIFICATION	4.263377272860224E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999976372187022	WITHOUT_CLASSIFICATION	2.362781297706674E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999976372187022	WITHOUT_CLASSIFICATION	2.362781297706674E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999923162685411	WITHOUT_CLASSIFICATION	7.683731458885888E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998879003664916	WITHOUT_CLASSIFICATION	1.1209963350840941E-4	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999940350254658	WITHOUT_CLASSIFICATION	5.964974534215543E-5	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999976372187022	WITHOUT_CLASSIFICATION	2.362781297706674E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999923162685411	WITHOUT_CLASSIFICATION	7.683731458885888E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999923162685411	WITHOUT_CLASSIFICATION	7.683731458885888E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999605130534989	WITHOUT_CLASSIFICATION	3.948694650110337E-5	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999581351104941	WITHOUT_CLASSIFICATION	4.18648895059289E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999903085404002	WITHOUT_CLASSIFICATION	9.691459599710533E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999874203759189	WITHOUT_CLASSIFICATION	1.2579624081034945E-5	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993960923824987	WITHOUT_CLASSIFICATION	6.039076175013119E-4	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993960923824987	WITHOUT_CLASSIFICATION	6.039076175013119E-4	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998906902288566	WITHOUT_CLASSIFICATION	1.0930977114344396E-4	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995973925335792	WITHOUT_CLASSIFICATION	4.026074664208051E-4	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999626613141072	WITHOUT_CLASSIFICATION	3.733868589282693E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998716921851187	WITHOUT_CLASSIFICATION	1.2830781488128035E-4	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998716921851187	WITHOUT_CLASSIFICATION	1.2830781488128035E-4	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999596774190559	WITHOUT_CLASSIFICATION	4.032258094410275E-4	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999711914451554	WITHOUT_CLASSIFICATION	2.880855484459953E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997044126303531	WITHOUT_CLASSIFICATION	0.0029558736964690963	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999842443426956	WITHOUT_CLASSIFICATION	1.5755657304393952E-4	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999637288823521	WITHOUT_CLASSIFICATION	3.6271117647879915E-5	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999276904407479	WITHOUT_CLASSIFICATION	7.230955925200688E-5	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999209893042804	WITHOUT_CLASSIFICATION	7.901069571963527E-5	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999806218698485	WITHOUT_CLASSIFICATION	1.9378130151452797E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997044126303531	WITHOUT_CLASSIFICATION	0.0029558736964690963	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999246030889768	WITHOUT_CLASSIFICATION	7.539691102314487E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999847542905527	WITHOUT_CLASSIFICATION	1.5245709447206952E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999847542905527	WITHOUT_CLASSIFICATION	1.5245709447206952E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999980453328078	WITHOUT_CLASSIFICATION	1.954667192333831E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999530550253241	WITHOUT_CLASSIFICATION	4.694497467582119E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999502558468997	WITHOUT_CLASSIFICATION	4.9744153100363506E-5	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997062812443364	WITHOUT_CLASSIFICATION	2.937187556635996E-4	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999649299388722	WITHOUT_CLASSIFICATION	3.507006112774256E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9996836433924575	WITHOUT_CLASSIFICATION	3.1635660754244106E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999052003567128	WITHOUT_CLASSIFICATION	9.4799643287178E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999971820955742	WITHOUT_CLASSIFICATION	2.817904425728519E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999753435576407	WITHOUT_CLASSIFICATION	2.465644235938504E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999753435576407	WITHOUT_CLASSIFICATION	2.465644235938504E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999969342095182	WITHOUT_CLASSIFICATION	3.0657904818082826E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999729857599929	WITHOUT_CLASSIFICATION	2.7014240007097444E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999357044388419	WITHOUT_CLASSIFICATION	6.429556115801007E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999503166575618	WITHOUT_CLASSIFICATION	4.968334243818552E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999595395947174	WITHOUT_CLASSIFICATION	4.046040528251466E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9998803853076996	WITHOUT_CLASSIFICATION	1.1961469230028619E-4	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9991881327300522	WITHOUT_CLASSIFICATION	8.118672699478033E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999119388147251	WITHOUT_CLASSIFICATION	8.806118527490991E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997966675783849	WITHOUT_CLASSIFICATION	2.033324216152041E-4	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999897491687415	WITHOUT_CLASSIFICATION	1.0250831258499192E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9998803853076996	WITHOUT_CLASSIFICATION	1.1961469230028619E-4	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9984176246187982	WITHOUT_CLASSIFICATION	0.0015823753812017466	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9996510053674225	WITHOUT_CLASSIFICATION	3.489946325775404E-4	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999684887004331	WITHOUT_CLASSIFICATION	3.1511299566923754E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999591012544824	WITHOUT_CLASSIFICATION	4.0898745517514625E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998431256290268	WITHOUT_CLASSIFICATION	1.568743709732234E-4	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999955208610547	WITHOUT_CLASSIFICATION	4.4791389453049114E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9997691799091708	WITHOUT_CLASSIFICATION	2.3082009082932265E-4	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999682870096386	WITHOUT_CLASSIFICATION	3.171299036132001E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998864915806256	WITHOUT_CLASSIFICATION	1.135084193743258E-4	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999113265610844	WITHOUT_CLASSIFICATION	8.867343891559416E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999444538014799	WITHOUT_CLASSIFICATION	5.5546198520168376E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999162421727286	WITHOUT_CLASSIFICATION	8.375782727143674E-5	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999386455359955	WITHOUT_CLASSIFICATION	6.13544640043815E-5	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9992775372312863	WITHOUT_CLASSIFICATION	7.224627687138168E-4	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995065632184263	WITHOUT_CLASSIFICATION	4.934367815736611E-4	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.999965273532114	WITHOUT_CLASSIFICATION	3.47264678860934E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997966675783849	WITHOUT_CLASSIFICATION	2.033324216152041E-4	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999444538014799	WITHOUT_CLASSIFICATION	5.5546198520168376E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999940480533619	WITHOUT_CLASSIFICATION	5.951946638085778E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998903363804535	WITHOUT_CLASSIFICATION	1.096636195464465E-4	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999343001329913	WITHOUT_CLASSIFICATION	6.569986700870076E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998257408332583	WITHOUT_CLASSIFICATION	1.7425916674173843E-4	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999570319442965	WITHOUT_CLASSIFICATION	4.296805570336214E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9981205697399901	WITHOUT_CLASSIFICATION	0.0018794302600099204	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999248562436197	WITHOUT_CLASSIFICATION	7.51437563803616E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998243641184738	WITHOUT_CLASSIFICATION	1.7563588152613466E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998243641184738	WITHOUT_CLASSIFICATION	1.7563588152613466E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999979444940981	WITHOUT_CLASSIFICATION	2.0555059018485667E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999859820647523	WITHOUT_CLASSIFICATION	1.401793524773648E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998667661002996	WITHOUT_CLASSIFICATION	1.332338997004458E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999358729450075	WITHOUT_CLASSIFICATION	6.412705499251886E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999973472335864	WITHOUT_CLASSIFICATION	2.652766413591114E-6	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999748067155749	WITHOUT_CLASSIFICATION	2.519328442509528E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999943997251137	WITHOUT_CLASSIFICATION	5.600274886278475E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999880372415299	WITHOUT_CLASSIFICATION	1.1962758470103975E-4	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999560836454774	WITHOUT_CLASSIFICATION	4.3916354522681615E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999560836454774	WITHOUT_CLASSIFICATION	4.3916354522681615E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999560836454774	WITHOUT_CLASSIFICATION	4.3916354522681615E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999904845055905	WITHOUT_CLASSIFICATION	9.515494409554285E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999560836454774	WITHOUT_CLASSIFICATION	4.3916354522681615E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999143081516566	WITHOUT_CLASSIFICATION	8.569184834338434E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.999354140763324	WITHOUT_CLASSIFICATION	6.458592366760281E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999220748412375	WITHOUT_CLASSIFICATION	7.79251587624773E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9997966675783849	WITHOUT_CLASSIFICATION	2.033324216152041E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999444538014799	WITHOUT_CLASSIFICATION	5.5546198520168376E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999444538014799	WITHOUT_CLASSIFICATION	5.5546198520168376E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999386908504563	WITHOUT_CLASSIFICATION	6.130914954367297E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999793056617521	WITHOUT_CLASSIFICATION	2.069433824787899E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999841999954105	WITHOUT_CLASSIFICATION	1.5800004589426354E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999393423979466	WITHOUT_CLASSIFICATION	6.065760205334061E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999606472879619	WITHOUT_CLASSIFICATION	3.93527120381544E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999606472879619	WITHOUT_CLASSIFICATION	3.93527120381544E-5	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9997919931601452	WITHOUT_CLASSIFICATION	2.0800683985474272E-4	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999700862617558	WITHOUT_CLASSIFICATION	2.9913738244286967E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9998786868354106	WITHOUT_CLASSIFICATION	1.2131316458930586E-4	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9998457445811516	WITHOUT_CLASSIFICATION	1.54255418848435E-4	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9998507264525746	WITHOUT_CLASSIFICATION	1.4927354742554522E-4	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9998037780252349	WITHOUT_CLASSIFICATION	1.9622197476508902E-4	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999915486975343	WITHOUT_CLASSIFICATION	8.451302465691969E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997984346569453	WITHOUT_CLASSIFICATION	2.015653430547273E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997984346569453	WITHOUT_CLASSIFICATION	2.015653430547273E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998872763386605	WITHOUT_CLASSIFICATION	1.1272366133959355E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998872763386605	WITHOUT_CLASSIFICATION	1.1272366133959355E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996049226017623	WITHOUT_CLASSIFICATION	3.950773982377455E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996049226017623	WITHOUT_CLASSIFICATION	3.950773982377455E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998566531199043	WITHOUT_CLASSIFICATION	1.4334688009574696E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998566531199043	WITHOUT_CLASSIFICATION	1.4334688009574696E-4	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999606472879619	WITHOUT_CLASSIFICATION	3.93527120381544E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.999915486975343	WITHOUT_CLASSIFICATION	8.451302465691969E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997984346569453	WITHOUT_CLASSIFICATION	2.015653430547273E-4	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9997984346569453	WITHOUT_CLASSIFICATION	2.015653430547273E-4	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9998872763386605	WITHOUT_CLASSIFICATION	1.1272366133959355E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996049226017623	WITHOUT_CLASSIFICATION	3.950773982377455E-4	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9996049226017623	WITHOUT_CLASSIFICATION	3.950773982377455E-4	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998566531199043	WITHOUT_CLASSIFICATION	1.4334688009574696E-4	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999967388263605	WITHOUT_CLASSIFICATION	3.261173639502027E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999895286992002	WITHOUT_CLASSIFICATION	1.0471300799793968E-4	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999549732988235	WITHOUT_CLASSIFICATION	4.502670117656092E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.99999002910847	WITHOUT_CLASSIFICATION	9.970891530117247E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999381294390799	WITHOUT_CLASSIFICATION	6.187056092004387E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997973444707994	WITHOUT_CLASSIFICATION	2.026555292006146E-4	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9904024447495098	WITHOUT_CLASSIFICATION	0.009597555250490216	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9658039997471114	WITHOUT_CLASSIFICATION	0.03419600025288852	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998764944838147	WITHOUT_CLASSIFICATION	1.2350551618537528E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999947598617748	WITHOUT_CLASSIFICATION	5.240138225216747E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998700783494016	WITHOUT_CLASSIFICATION	1.2992165059847951E-4	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999036834433463	WITHOUT_CLASSIFICATION	9.631655665364182E-5	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998971341447332	WITHOUT_CLASSIFICATION	1.0286585526674226E-4	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9997973444707994	WITHOUT_CLASSIFICATION	2.026555292006146E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995677767772095	WITHOUT_CLASSIFICATION	4.3222322279044476E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995677767772095	WITHOUT_CLASSIFICATION	4.3222322279044476E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9992965143277086	WITHOUT_CLASSIFICATION	7.034856722913608E-4	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999630767322519	WITHOUT_CLASSIFICATION	3.692326774797079E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999630767322519	WITHOUT_CLASSIFICATION	3.692326774797079E-5	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999005624681606	WITHOUT_CLASSIFICATION	9.943753183933865E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999794764097988	WITHOUT_CLASSIFICATION	2.0523590201234117E-5	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9990248970147676	WITHOUT_CLASSIFICATION	9.751029852324268E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993972775031083	WITHOUT_CLASSIFICATION	6.027224968916789E-4	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993972775031083	WITHOUT_CLASSIFICATION	6.027224968916789E-4	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999358858415925	WITHOUT_CLASSIFICATION	6.41141584074623E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994752962038206	WITHOUT_CLASSIFICATION	5.247037961793605E-4	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994752962038206	WITHOUT_CLASSIFICATION	5.247037961793605E-4	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998634752240241	WITHOUT_CLASSIFICATION	1.3652477597600926E-4	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999148437416808	WITHOUT_CLASSIFICATION	8.515625831919828E-5	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999657473188256	WITHOUT_CLASSIFICATION	3.425268117452043E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9998233820404983	WITHOUT_CLASSIFICATION	1.7661795950171913E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997981152757445	WITHOUT_CLASSIFICATION	2.0188472425553263E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.8516168327313366	WITHOUT_CLASSIFICATION	0.14838316726866335	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9997995755763159	WITHOUT_CLASSIFICATION	2.0042442368407536E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999512183384262	WITHOUT_CLASSIFICATION	4.8781661573744496E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9997901534639302	WITHOUT_CLASSIFICATION	2.0984653606987696E-4	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999644010937513	WITHOUT_CLASSIFICATION	3.5598906248788835E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999897213569343	WITHOUT_CLASSIFICATION	1.0278643065716964E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999270447709012	WITHOUT_CLASSIFICATION	7.295522909877106E-5	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975374984773	WITHOUT_CLASSIFICATION	2.4625015226848104E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999485814272687	WITHOUT_CLASSIFICATION	5.1418572731257244E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9997963590835277	WITHOUT_CLASSIFICATION	2.036409164723386E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999944570794423	WITHOUT_CLASSIFICATION	5.542920557700823E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999946717030261	WITHOUT_CLASSIFICATION	5.328296973904788E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999387507682408	WITHOUT_CLASSIFICATION	6.124923175921308E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999697963714206	WITHOUT_CLASSIFICATION	3.0203628579524537E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999657473188256	WITHOUT_CLASSIFICATION	3.425268117452043E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999334150257507	WITHOUT_CLASSIFICATION	6.658497424925062E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999549364418199	WITHOUT_CLASSIFICATION	4.506355818012947E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998078059573404	WITHOUT_CLASSIFICATION	1.9219404265963862E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9997981152757445	WITHOUT_CLASSIFICATION	2.0188472425553263E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999697963714206	WITHOUT_CLASSIFICATION	3.0203628579524537E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999334150257507	WITHOUT_CLASSIFICATION	6.658497424925062E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998078059573404	WITHOUT_CLASSIFICATION	1.9219404265963862E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999507145015376	WITHOUT_CLASSIFICATION	4.9285498462428614E-5	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999507145015376	WITHOUT_CLASSIFICATION	4.9285498462428614E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999444998664573	WITHOUT_CLASSIFICATION	5.5500133542769996E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.999945119197478	WITHOUT_CLASSIFICATION	5.4880802522023726E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9998871625440513	WITHOUT_CLASSIFICATION	1.1283745594866205E-4	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999944752761738	WITHOUT_CLASSIFICATION	5.524723826195082E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999919397853847	WITHOUT_CLASSIFICATION	8.060214615389861E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999820971868052	WITHOUT_CLASSIFICATION	1.790281319480632E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99998841361596	WITHOUT_CLASSIFICATION	1.1586384039979682E-5	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9992569451531494	WITHOUT_CLASSIFICATION	7.430548468504845E-4	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999968510854964	WITHOUT_CLASSIFICATION	3.1489145035978015E-5	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99998841361596	WITHOUT_CLASSIFICATION	1.1586384039979682E-5	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999825661057291	WITHOUT_CLASSIFICATION	1.7433894270914115E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998656863037427	WITHOUT_CLASSIFICATION	1.3431369625721426E-4	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999697963714206	WITHOUT_CLASSIFICATION	3.0203628579524537E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998956561618496	WITHOUT_CLASSIFICATION	1.0434383815029814E-4	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999353798252315	WITHOUT_CLASSIFICATION	6.462017476844786E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9995430833901318	WITHOUT_CLASSIFICATION	4.569166098682509E-4	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999223403325861	WITHOUT_CLASSIFICATION	7.765966741397787E-5	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999382824722666	WITHOUT_CLASSIFICATION	6.171752773339632E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999909783161611	WITHOUT_CLASSIFICATION	9.021683838860564E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998956944486637	WITHOUT_CLASSIFICATION	1.0430555133640607E-4	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999040433355407	WITHOUT_CLASSIFICATION	9.595666445936118E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999445714332897	WITHOUT_CLASSIFICATION	5.542856671034848E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999454953959985	WITHOUT_CLASSIFICATION	5.45046040014456E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999386908504563	WITHOUT_CLASSIFICATION	6.130914954367297E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9994532486187357	WITHOUT_CLASSIFICATION	5.467513812642285E-4	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999270447709012	WITHOUT_CLASSIFICATION	7.295522909877106E-5	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999582890736377	WITHOUT_CLASSIFICATION	4.171092636232552E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997607259646558	WITHOUT_CLASSIFICATION	2.3927403534417175E-4	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.999977046754137	WITHOUT_CLASSIFICATION	2.2953245862994706E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999654665541982	WITHOUT_CLASSIFICATION	3.453344580185322E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999659518364651	WITHOUT_CLASSIFICATION	3.40481635348871E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999321144653835	WITHOUT_CLASSIFICATION	6.788553461647412E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999087748894	WITHOUT_CLASSIFICATION	9.12251105464331E-8	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999734856180178	WITHOUT_CLASSIFICATION	2.6514381982191304E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999523644043231	WITHOUT_CLASSIFICATION	4.7635595676844805E-5	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999146860260741	WITHOUT_CLASSIFICATION	8.531397392586137E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998007996431494	WITHOUT_CLASSIFICATION	1.992003568506572E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998007996431494	WITHOUT_CLASSIFICATION	1.992003568506572E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998691551224942	WITHOUT_CLASSIFICATION	1.3084487750586346E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999111269825985	WITHOUT_CLASSIFICATION	8.887301740140902E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9998637200777054	WITHOUT_CLASSIFICATION	1.3627992229464338E-4	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999310908375165	WITHOUT_CLASSIFICATION	6.890916248346155E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998707171250629	WITHOUT_CLASSIFICATION	1.2928287493707113E-4	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9995595381631844	WITHOUT_CLASSIFICATION	4.404618368154661E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998080930574089	WITHOUT_CLASSIFICATION	1.9190694259114401E-4	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998972397035526	WITHOUT_CLASSIFICATION	1.0276029644743303E-4	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999187607236582	WITHOUT_CLASSIFICATION	8.123927634188668E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999889600013923	WITHOUT_CLASSIFICATION	1.1039998607690281E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999937999870606	WITHOUT_CLASSIFICATION	6.200012939389895E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9986660066708131	WITHOUT_CLASSIFICATION	0.0013339933291869103	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9983928071518197	WITHOUT_CLASSIFICATION	0.0016071928481803607	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998906836190634	WITHOUT_CLASSIFICATION	1.0931638093665916E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999197406645247	WITHOUT_CLASSIFICATION	8.025933547534896E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9979833970784613	WITHOUT_CLASSIFICATION	0.0020166029215388324	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999186852479415	WITHOUT_CLASSIFICATION	8.131475205845089E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999520460469625	WITHOUT_CLASSIFICATION	4.795395303740218E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9962634161597722	WITHOUT_CLASSIFICATION	0.0037365838402277727	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999063123346792	WITHOUT_CLASSIFICATION	9.368766532088377E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999063123346792	WITHOUT_CLASSIFICATION	9.368766532088377E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998825312380509	WITHOUT_CLASSIFICATION	1.1746876194914518E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9998825312380509	WITHOUT_CLASSIFICATION	1.1746876194914518E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999523644043231	WITHOUT_CLASSIFICATION	4.7635595676844805E-5	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9833234809056034	WITHOUT_CLASSIFICATION	0.016676519094396637	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989444885943172	WITHOUT_CLASSIFICATION	0.0010555114056828975	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997836268274255	WITHOUT_CLASSIFICATION	2.1637317257461593E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989444885943172	WITHOUT_CLASSIFICATION	0.0010555114056828975	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997836268274255	WITHOUT_CLASSIFICATION	2.1637317257461593E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997788399479899	WITHOUT_CLASSIFICATION	2.2116005201010735E-4	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9971026741073581	WITHOUT_CLASSIFICATION	0.0028973258926418446	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999266646370368	WITHOUT_CLASSIFICATION	7.333536296314206E-5	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999906814265695	WITHOUT_CLASSIFICATION	9.318573430363617E-6	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996833464733899	WITHOUT_CLASSIFICATION	3.166535266100731E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999343128959695	WITHOUT_CLASSIFICATION	6.568710403059751E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998034563784833	WITHOUT_CLASSIFICATION	1.96543621516665E-4	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9995126250823657	WITHOUT_CLASSIFICATION	4.8737491763427456E-4	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9993575635532396	WITHOUT_CLASSIFICATION	6.424364467603944E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991800140084	WITHOUT_CLASSIFICATION	8.199859915085281E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999718182195274	WITHOUT_CLASSIFICATION	2.8181780472596324E-5	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9994593621215555	WITHOUT_CLASSIFICATION	5.406378784444263E-4	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999913540977476	WITHOUT_CLASSIFICATION	8.645902252418234E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999912045450814	WITHOUT_CLASSIFICATION	8.795454918594145E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999912045450814	WITHOUT_CLASSIFICATION	8.795454918594145E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9988025359490119	WITHOUT_CLASSIFICATION	0.0011974640509879815	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9988025359490119	WITHOUT_CLASSIFICATION	0.0011974640509879815	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9993146841371078	WITHOUT_CLASSIFICATION	6.85315862892228E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997788399479899	WITHOUT_CLASSIFICATION	2.2116005201010735E-4	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998502504129854	WITHOUT_CLASSIFICATION	1.497495870146872E-4	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998995701579663	WITHOUT_CLASSIFICATION	1.0042984203379547E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999704386478423	WITHOUT_CLASSIFICATION	2.9561352157703977E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998335852902848	WITHOUT_CLASSIFICATION	1.6641470971519415E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9464330872238789	WITHOUT_CLASSIFICATION	0.053566912776121155	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997788399479899	WITHOUT_CLASSIFICATION	2.2116005201010735E-4	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998335852902848	WITHOUT_CLASSIFICATION	1.6641470971519415E-4	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9464330872238789	WITHOUT_CLASSIFICATION	0.053566912776121155	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998593515610166	WITHOUT_CLASSIFICATION	1.4064843898349512E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999510218115832	WITHOUT_CLASSIFICATION	4.8978188416811935E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999350637481654	WITHOUT_CLASSIFICATION	6.493625183452E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997788399479899	WITHOUT_CLASSIFICATION	2.2116005201010735E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997788399479899	WITHOUT_CLASSIFICATION	2.2116005201010735E-4	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.99993663789818	WITHOUT_CLASSIFICATION	6.336210182005179E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999929133648084	WITHOUT_CLASSIFICATION	7.08663519160121E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999470891617538	WITHOUT_CLASSIFICATION	5.291083824629553E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999448218776568	WITHOUT_CLASSIFICATION	5.517812234322224E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9998742370657909	WITHOUT_CLASSIFICATION	1.257629342090784E-4	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999947460518864	WITHOUT_CLASSIFICATION	5.253948113626539E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999723866327869	WITHOUT_CLASSIFICATION	2.7613367213146282E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999734180550794	WITHOUT_CLASSIFICATION	2.6581944920506934E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998562651355941	WITHOUT_CLASSIFICATION	1.4373486440581322E-4	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999377106463887	WITHOUT_CLASSIFICATION	6.228935361134119E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999408919076186	WITHOUT_CLASSIFICATION	5.9108092381463296E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999888714376988	WITHOUT_CLASSIFICATION	1.1128562301253385E-5	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999944629090879	WITHOUT_CLASSIFICATION	5.5370909120394344E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999456415572282	WITHOUT_CLASSIFICATION	5.435844277171346E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998511410381364	WITHOUT_CLASSIFICATION	1.4885896186355693E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999937252329056	WITHOUT_CLASSIFICATION	6.274767094371793E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999802461707918	WITHOUT_CLASSIFICATION	1.9753829208210612E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9998696832382382	WITHOUT_CLASSIFICATION	1.303167617617629E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.999763158236713	WITHOUT_CLASSIFICATION	2.3684176328694003E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997836268274255	WITHOUT_CLASSIFICATION	2.1637317257461593E-4	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999398317297712	WITHOUT_CLASSIFICATION	6.016827022885739E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999802461707918	WITHOUT_CLASSIFICATION	1.9753829208210612E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.8420846523094702	WITHOUT_CLASSIFICATION	0.15791534769052987	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999978305991094	WITHOUT_CLASSIFICATION	2.169400890624846E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9989459802208018	WITHOUT_CLASSIFICATION	0.0010540197791981682	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999486779435083	WITHOUT_CLASSIFICATION	5.1322056491732984E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998831979556921	WITHOUT_CLASSIFICATION	1.168020443078422E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999493898553447	WITHOUT_CLASSIFICATION	5.061014465534595E-5	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9978705011390673	WITHOUT_CLASSIFICATION	0.0021294988609327535	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999862759057262	WITHOUT_CLASSIFICATION	1.3724094273790254E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999085506388404	WITHOUT_CLASSIFICATION	9.14493611595648E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999328318116241	WITHOUT_CLASSIFICATION	6.716818837596946E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9975944643714715	WITHOUT_CLASSIFICATION	0.002405535628528576	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998675828962826	WITHOUT_CLASSIFICATION	1.3241710371725824E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999959319414744	WITHOUT_CLASSIFICATION	4.068058525556591E-6	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999922734411167	WITHOUT_CLASSIFICATION	7.726558883304576E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992312338132874	WITHOUT_CLASSIFICATION	7.687661867124907E-4	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999689652330583	WITHOUT_CLASSIFICATION	3.103476694162298E-5	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9947958307862447	WITHOUT_CLASSIFICATION	0.005204169213755348	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999914115074621	WITHOUT_CLASSIFICATION	8.58849253789179E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999003194088502	WITHOUT_CLASSIFICATION	9.968059114986729E-5	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9995883672385402	WITHOUT_CLASSIFICATION	4.116327614598788E-4	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999979469701974	WITHOUT_CLASSIFICATION	2.0530298025983867E-5	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998771146910143	WITHOUT_CLASSIFICATION	1.228853089857292E-4	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998742158139556	WITHOUT_CLASSIFICATION	1.2578418604429156E-4	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999198480456725	WITHOUT_CLASSIFICATION	8.015195432753473E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999824401724501	WITHOUT_CLASSIFICATION	1.7559827549902627E-4	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999164257508505	WITHOUT_CLASSIFICATION	8.3574249149488E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999981380217197	WITHOUT_CLASSIFICATION	1.8619782803188655E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999979837168058	WITHOUT_CLASSIFICATION	2.0162831941675112E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798351169511	WITHOUT_CLASSIFICATION	2.016488304894052E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868808611607	WITHOUT_CLASSIFICATION	1.3119138839358504E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999134693695759	WITHOUT_CLASSIFICATION	8.653063042403444E-5	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999592249007913	WITHOUT_CLASSIFICATION	4.0775099208832205E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999106655861015	WITHOUT_CLASSIFICATION	8.933441389846697E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999895823111696	WITHOUT_CLASSIFICATION	1.0417688830390552E-4	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999203451431012	WITHOUT_CLASSIFICATION	7.965485689870077E-5	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998487523809266	WITHOUT_CLASSIFICATION	1.5124761907338186E-4	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9997447530397789	WITHOUT_CLASSIFICATION	2.552469602210454E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999945287208245	WITHOUT_CLASSIFICATION	5.471279175484599E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999934821420929	WITHOUT_CLASSIFICATION	6.5178579070914116E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999143693566599	WITHOUT_CLASSIFICATION	8.56306433401175E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998824720853342	WITHOUT_CLASSIFICATION	1.1752791466582804E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997924829460993	WITHOUT_CLASSIFICATION	2.075170539005303E-4	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998593515610166	WITHOUT_CLASSIFICATION	1.4064843898349512E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999450982148363	WITHOUT_CLASSIFICATION	5.4901785163790045E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999460492553892	WITHOUT_CLASSIFICATION	5.3950744610805276E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999453157392334	WITHOUT_CLASSIFICATION	5.4684260766570385E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999952093732917	WITHOUT_CLASSIFICATION	4.790626708297194E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999457794319313	WITHOUT_CLASSIFICATION	5.422056806874879E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999586777410122	WITHOUT_CLASSIFICATION	4.1322258987722796E-5	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9992621166237377	WITHOUT_CLASSIFICATION	7.378833762623631E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991757810591164	WITHOUT_CLASSIFICATION	8.242189408835371E-4	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996482186628003	WITHOUT_CLASSIFICATION	3.5178133719962435E-4	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998480339794433	WITHOUT_CLASSIFICATION	1.519660205567235E-4	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998779221188492	WITHOUT_CLASSIFICATION	1.2207788115082904E-4	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998785765369436	WITHOUT_CLASSIFICATION	1.2142346305645251E-4	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998520533488517	WITHOUT_CLASSIFICATION	1.4794665114829607E-4	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9973707846080037	WITHOUT_CLASSIFICATION	0.002629215391996383	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999885628399908	WITHOUT_CLASSIFICATION	1.1437160009201001E-4	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999371699183057	WITHOUT_CLASSIFICATION	6.283008169433654E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9982685624922217	WITHOUT_CLASSIFICATION	0.001731437507778186	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999856273722697	WITHOUT_CLASSIFICATION	1.4372627730293403E-4	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998940397028131	WITHOUT_CLASSIFICATION	1.0596029718693443E-4	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998733313196596	WITHOUT_CLASSIFICATION	1.266686803404802E-4	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999158530438343	WITHOUT_CLASSIFICATION	8.414695616574679E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999992748979817	WITHOUT_CLASSIFICATION	7.251020182865621E-6	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9994735043005892	WITHOUT_CLASSIFICATION	5.264956994108377E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998302081556667	WITHOUT_CLASSIFICATION	1.6979184433331906E-4	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997445867944766	WITHOUT_CLASSIFICATION	2.5541320552333486E-4	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997926197937377	WITHOUT_CLASSIFICATION	2.0738020626225718E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999143693566599	WITHOUT_CLASSIFICATION	8.56306433401175E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998918366332724	WITHOUT_CLASSIFICATION	1.0816336672761659E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999690087365819	WITHOUT_CLASSIFICATION	3.099126341818392E-5	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999293911005179	WITHOUT_CLASSIFICATION	7.060889948206922E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999945287208245	WITHOUT_CLASSIFICATION	5.471279175484599E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998560443700406	WITHOUT_CLASSIFICATION	1.439556299593944E-4	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999606423509266	WITHOUT_CLASSIFICATION	3.9357649073415535E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9988876222106474	WITHOUT_CLASSIFICATION	0.0011123777893525802	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9985346940424082	WITHOUT_CLASSIFICATION	0.0014653059575917837	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997683663778945	WITHOUT_CLASSIFICATION	2.3163362210551288E-4	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998181865121102	WITHOUT_CLASSIFICATION	1.8181348788981269E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998699365522504	WITHOUT_CLASSIFICATION	1.3006344774945552E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997420089812944	WITHOUT_CLASSIFICATION	2.579910187056195E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999399165938724	WITHOUT_CLASSIFICATION	6.008340612756206E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999514150546128	WITHOUT_CLASSIFICATION	4.858494538719287E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995148992508839	WITHOUT_CLASSIFICATION	4.851007491160764E-4	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999568113839652	WITHOUT_CLASSIFICATION	4.318861603491219E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998593515610166	WITHOUT_CLASSIFICATION	1.4064843898349512E-4	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999453528441699	WITHOUT_CLASSIFICATION	5.46471558300561E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99998554072351	WITHOUT_CLASSIFICATION	1.4459276489946506E-5	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9995964145401548	WITHOUT_CLASSIFICATION	4.0358545984516377E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999825859098442	WITHOUT_CLASSIFICATION	1.7414090155825208E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998327111792948	WITHOUT_CLASSIFICATION	1.6728882070519846E-4	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999601796560617	WITHOUT_CLASSIFICATION	3.982034393830084E-4	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998845781706636	WITHOUT_CLASSIFICATION	1.1542182933653081E-4	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998985689166607	WITHOUT_CLASSIFICATION	1.0143108333923925E-4	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999543218640827	WITHOUT_CLASSIFICATION	4.567813591741446E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934060733264413	WITHOUT_CLASSIFICATION	0.006593926673558731	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998896142620955	WITHOUT_CLASSIFICATION	1.1038573790436731E-4	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998779674760672	WITHOUT_CLASSIFICATION	1.220325239328208E-4	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999945287208245	WITHOUT_CLASSIFICATION	5.471279175484599E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999143693566599	WITHOUT_CLASSIFICATION	8.56306433401175E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9979085769777255	WITHOUT_CLASSIFICATION	0.0020914230222745947	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999991638891091	WITHOUT_CLASSIFICATION	8.361108909032016E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9940059877269893	WITHOUT_CLASSIFICATION	0.005994012273010748	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999143693566599	WITHOUT_CLASSIFICATION	8.56306433401175E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934145313044	WITHOUT_CLASSIFICATION	6.585468695599889E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999825859098442	WITHOUT_CLASSIFICATION	1.7414090155825208E-5	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9948230426108337	WITHOUT_CLASSIFICATION	0.00517695738916625	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9930656336640217	WITHOUT_CLASSIFICATION	0.006934366335978272	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999885998852448	WITHOUT_CLASSIFICATION	1.1400114755164727E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998181865121102	WITHOUT_CLASSIFICATION	1.8181348788981269E-4	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998699365522504	WITHOUT_CLASSIFICATION	1.3006344774945552E-4	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997420089812944	WITHOUT_CLASSIFICATION	2.579910187056195E-4	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999553729023537	WITHOUT_CLASSIFICATION	4.462709764637E-5	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.999850218903061	WITHOUT_CLASSIFICATION	1.4978109693901685E-4	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999067852962781	WITHOUT_CLASSIFICATION	9.32147037219363E-5	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998883408759732	WITHOUT_CLASSIFICATION	1.1165912402677287E-4	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9993681204517437	WITHOUT_CLASSIFICATION	6.318795482562841E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999143693566599	WITHOUT_CLASSIFICATION	8.56306433401175E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999399165938724	WITHOUT_CLASSIFICATION	6.008340612756206E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999514150546128	WITHOUT_CLASSIFICATION	4.858494538719287E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908268784727	WITHOUT_CLASSIFICATION	9.173121527198764E-6	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725213666013	WITHOUT_CLASSIFICATION	1.2747863339863033E-4	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999217739497248	WITHOUT_CLASSIFICATION	7.822605027513637E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997709528375185	WITHOUT_CLASSIFICATION	2.290471624814813E-4	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.998535121561277	WITHOUT_CLASSIFICATION	0.0014648784387229121	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9988109315236217	WITHOUT_CLASSIFICATION	0.0011890684763782577	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998507921422102	WITHOUT_CLASSIFICATION	1.492078577899333E-4	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999291645505063	WITHOUT_CLASSIFICATION	7.083544949373798E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999228024300382	WITHOUT_CLASSIFICATION	7.719756996185605E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999386908504563	WITHOUT_CLASSIFICATION	6.130914954367297E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999164257508505	WITHOUT_CLASSIFICATION	8.3574249149488E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868808611607	WITHOUT_CLASSIFICATION	1.3119138839358504E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999386908504563	WITHOUT_CLASSIFICATION	6.130914954367297E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999954028001158	WITHOUT_CLASSIFICATION	4.597199884190222E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999229124794516	WITHOUT_CLASSIFICATION	7.708752054835905E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999458499386846	WITHOUT_CLASSIFICATION	5.4150061315383965E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9941238053713521	WITHOUT_CLASSIFICATION	0.0058761946286477774	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998826456313296	WITHOUT_CLASSIFICATION	1.17354368670412E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999134693695759	WITHOUT_CLASSIFICATION	8.653063042403444E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100254746097	WITHOUT_CLASSIFICATION	8.997452539032268E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999992748979817	WITHOUT_CLASSIFICATION	7.251020182865621E-6	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9987250806424054	WITHOUT_CLASSIFICATION	0.0012749193575945991	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9989927051483469	WITHOUT_CLASSIFICATION	0.001007294851653029	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999509665157419	WITHOUT_CLASSIFICATION	4.903348425822744E-5	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999459489761848	WITHOUT_CLASSIFICATION	5.40510238151587E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999970388937629	WITHOUT_CLASSIFICATION	2.9611062371270075E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998956584403801	WITHOUT_CLASSIFICATION	1.0434155961995116E-4	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9996928847450426	WITHOUT_CLASSIFICATION	3.071152549574203E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999862759057262	WITHOUT_CLASSIFICATION	1.3724094273790254E-5	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998648543199415	WITHOUT_CLASSIFICATION	1.351456800584737E-4	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999391945942733	WITHOUT_CLASSIFICATION	6.080540572658462E-5	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999158515318847	WITHOUT_CLASSIFICATION	8.414846811532237E-5	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999833303523497	WITHOUT_CLASSIFICATION	1.6669647650320813E-5	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999859720810105	WITHOUT_CLASSIFICATION	1.4027918989596135E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999087411319252	WITHOUT_CLASSIFICATION	9.125886807474444E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172494220189	WITHOUT_CLASSIFICATION	8.275057798122818E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998931071728252	WITHOUT_CLASSIFICATION	1.0689282717477867E-4	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997740639271492	WITHOUT_CLASSIFICATION	2.2593607285092206E-4	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996832383733081	WITHOUT_CLASSIFICATION	3.1676162669194556E-4	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994266842425531	WITHOUT_CLASSIFICATION	5.733157574470111E-4	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9910633748730723	WITHOUT_CLASSIFICATION	0.008936625126927762	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995088729693495	WITHOUT_CLASSIFICATION	4.911270306505467E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996594234767369	WITHOUT_CLASSIFICATION	3.4057652326316206E-4	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999509901263399	WITHOUT_CLASSIFICATION	4.900987366010112E-4	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999117809198832	WITHOUT_CLASSIFICATION	8.821908011676189E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995088729693495	WITHOUT_CLASSIFICATION	4.911270306505467E-4	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997234228067641	WITHOUT_CLASSIFICATION	2.7657719323596663E-4	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996504106558117	WITHOUT_CLASSIFICATION	3.4958934418835867E-4	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338621444012	WITHOUT_CLASSIFICATION	6.613785559885165E-5	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999448414043534	WITHOUT_CLASSIFICATION	5.515859564666419E-5	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9996362791327614	WITHOUT_CLASSIFICATION	3.637208672385688E-4	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999851572978549	WITHOUT_CLASSIFICATION	1.484270214517649E-5	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999529214090234	WITHOUT_CLASSIFICATION	4.707859097657382E-5	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999523729076321	WITHOUT_CLASSIFICATION	4.762709236789458E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999523729076321	WITHOUT_CLASSIFICATION	4.762709236789458E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999715539169207	WITHOUT_CLASSIFICATION	2.8446083079280263E-5	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999852906680542	WITHOUT_CLASSIFICATION	1.470933194579665E-4	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999772018315492	WITHOUT_CLASSIFICATION	2.2798168450790835E-4	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999177229366633	WITHOUT_CLASSIFICATION	8.227706333674477E-5	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9977385569627885	WITHOUT_CLASSIFICATION	0.002261443037211506	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999249062368273	WITHOUT_CLASSIFICATION	7.509376317271432E-5	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999968460046169	WITHOUT_CLASSIFICATION	3.1539953830506315E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999686701889297	WITHOUT_CLASSIFICATION	3.1329811070346394E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9994006813778085	WITHOUT_CLASSIFICATION	5.993186221916581E-4	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999936420917799	WITHOUT_CLASSIFICATION	6.357908220166142E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999822098773182	WITHOUT_CLASSIFICATION	1.779012268184769E-5	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999420095463492	WITHOUT_CLASSIFICATION	5.799045365085132E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999778548056064	WITHOUT_CLASSIFICATION	2.2145194393586242E-5	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9989236805138615	WITHOUT_CLASSIFICATION	0.0010763194861385915	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999126140811674	WITHOUT_CLASSIFICATION	8.738591883263718E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996606501402531	WITHOUT_CLASSIFICATION	3.3934985974693545E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9992624422514249	WITHOUT_CLASSIFICATION	7.375577485751042E-4	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9978692149732469	WITHOUT_CLASSIFICATION	0.0021307850267531735	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999863986980888	WITHOUT_CLASSIFICATION	1.3601301911126847E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998228079557469	WITHOUT_CLASSIFICATION	1.7719204425309913E-4	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998970886193025	WITHOUT_CLASSIFICATION	1.0291138069744548E-4	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999018765283284	WITHOUT_CLASSIFICATION	9.812347167165044E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999735365462892	WITHOUT_CLASSIFICATION	2.646345371087181E-5	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999744170268411	WITHOUT_CLASSIFICATION	2.5582973158960513E-5	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999155509777501	WITHOUT_CLASSIFICATION	8.44490222499875E-5	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995814379090352	WITHOUT_CLASSIFICATION	4.185620909647555E-4	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9992119610927411	WITHOUT_CLASSIFICATION	7.880389072589593E-4	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996992359335534	WITHOUT_CLASSIFICATION	3.007640664466482E-4	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9864769997244315	WITHOUT_CLASSIFICATION	0.013523000275568488	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993015829284922	WITHOUT_CLASSIFICATION	6.984170715076841E-4	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999263363981552	WITHOUT_CLASSIFICATION	7.366360184485229E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999589578464289	WITHOUT_CLASSIFICATION	4.104215357112463E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999061941918664	WITHOUT_CLASSIFICATION	9.38058081335352E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999595533828392	WITHOUT_CLASSIFICATION	4.044661716072507E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998469446057345	WITHOUT_CLASSIFICATION	1.5305539426544468E-4	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999348016043735	WITHOUT_CLASSIFICATION	6.519839562644931E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9988813146624878	WITHOUT_CLASSIFICATION	0.0011186853375122533	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999834002805752	WITHOUT_CLASSIFICATION	1.659971942472394E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9050828259245661	WITHOUT_CLASSIFICATION	0.09491717407543385	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999553600869778	WITHOUT_CLASSIFICATION	4.4639913022100406E-5	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998518441992098	WITHOUT_CLASSIFICATION	1.481558007901883E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998593515610166	WITHOUT_CLASSIFICATION	1.4064843898349512E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998593515610166	WITHOUT_CLASSIFICATION	1.4064843898349512E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997607634207847	WITHOUT_CLASSIFICATION	2.39236579215298E-4	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998052754667534	WITHOUT_CLASSIFICATION	1.9472453324660807E-4	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999409967940872	WITHOUT_CLASSIFICATION	5.900320591265663E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999896396105391	WITHOUT_CLASSIFICATION	1.0360389460881028E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999462939525794	WITHOUT_CLASSIFICATION	5.370604742063082E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9996470653773135	WITHOUT_CLASSIFICATION	3.529346226865269E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997082165746086	WITHOUT_CLASSIFICATION	2.917834253913515E-4	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999997744715774	WITHOUT_CLASSIFICATION	2.2552842260315037E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999124946269	WITHOUT_CLASSIFICATION	8.750537310687619E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998666027496654	WITHOUT_CLASSIFICATION	1.333972503345483E-4	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998101986621117	WITHOUT_CLASSIFICATION	1.898013378883649E-4	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999844724044895	WITHOUT_CLASSIFICATION	1.5527595510533056E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996993741614792	WITHOUT_CLASSIFICATION	3.0062583852069825E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998664100819862	WITHOUT_CLASSIFICATION	1.335899180138279E-4	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998797528792124	WITHOUT_CLASSIFICATION	1.2024712078759636E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999756622612332	WITHOUT_CLASSIFICATION	2.4337738766688697E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9998056725983968	WITHOUT_CLASSIFICATION	1.94327401603332E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994932995478262	WITHOUT_CLASSIFICATION	5.067004521738392E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9998984162793321	WITHOUT_CLASSIFICATION	1.0158372066796409E-4	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998744791088722	WITHOUT_CLASSIFICATION	1.255208911279063E-4	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994932995478262	WITHOUT_CLASSIFICATION	5.067004521738392E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999825344105016	WITHOUT_CLASSIFICATION	1.746558949844906E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999442686908921	WITHOUT_CLASSIFICATION	5.5731309107970976E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999790896262786	WITHOUT_CLASSIFICATION	2.0910373721373748E-5	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998780745848512	WITHOUT_CLASSIFICATION	1.2192541514877966E-4	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999513816685439	WITHOUT_CLASSIFICATION	4.8618331456034414E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999991081594859	WITHOUT_CLASSIFICATION	8.918405140937698E-6	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.99967954078494	WITHOUT_CLASSIFICATION	3.2045921505997215E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999191826460898	WITHOUT_CLASSIFICATION	8.08173539101499E-5	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998899666370726	WITHOUT_CLASSIFICATION	1.1003336292736551E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999850476972088	WITHOUT_CLASSIFICATION	1.495230279121203E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999055019667723	WITHOUT_CLASSIFICATION	9.449803322767922E-5	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999194856588912	WITHOUT_CLASSIFICATION	8.051434110874032E-5	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999786724387338	WITHOUT_CLASSIFICATION	2.1327561266181776E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999951496827211	WITHOUT_CLASSIFICATION	4.850317278999923E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998027349997108	WITHOUT_CLASSIFICATION	1.9726500028903105E-4	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999919841452803	WITHOUT_CLASSIFICATION	8.015854719700296E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994963373181749	WITHOUT_CLASSIFICATION	5.036626818251028E-4	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997551199327174	WITHOUT_CLASSIFICATION	2.44880067282596E-4	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.993573225875892	WITHOUT_CLASSIFICATION	0.006426774124108021	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998922496901924	WITHOUT_CLASSIFICATION	1.0775030980755978E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999969585080588	WITHOUT_CLASSIFICATION	3.0414919412038365E-5	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999436550734241	WITHOUT_CLASSIFICATION	5.634492657585098E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.997875103777879	WITHOUT_CLASSIFICATION	0.002124896222120993	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999545186250716	WITHOUT_CLASSIFICATION	4.548137492841E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999748921159	WITHOUT_CLASSIFICATION	2.510788416815274E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998633433285724	WITHOUT_CLASSIFICATION	1.3665667142760929E-4	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9961272945252359	WITHOUT_CLASSIFICATION	0.0038727054747642402	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997562916306513	WITHOUT_CLASSIFICATION	2.4370836934883893E-4	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999087411319252	WITHOUT_CLASSIFICATION	9.125886807474444E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9990773945301188	WITHOUT_CLASSIFICATION	9.226054698811943E-4	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999057313442915	WITHOUT_CLASSIFICATION	9.426865570850602E-5	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9817581806729504	WITHOUT_CLASSIFICATION	0.018241819327049585	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999556569179668	WITHOUT_CLASSIFICATION	4.43430820330412E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998641365906435	WITHOUT_CLASSIFICATION	1.3586340935651414E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998638011895514	WITHOUT_CLASSIFICATION	1.3619881044857723E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9963934437536587	WITHOUT_CLASSIFICATION	0.003606556246341445	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999730240577306	WITHOUT_CLASSIFICATION	2.6975942269399325E-5	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999801522242758	WITHOUT_CLASSIFICATION	1.9847775724155638E-5	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999802671363626	WITHOUT_CLASSIFICATION	1.973286363746724E-5	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999956557053102	WITHOUT_CLASSIFICATION	4.3442946897335404E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999660997364577	WITHOUT_CLASSIFICATION	3.390026354225178E-5	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9978721065150354	WITHOUT_CLASSIFICATION	0.0021278934849645434	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996484362891823	WITHOUT_CLASSIFICATION	3.5156371081764156E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999983690755671	WITHOUT_CLASSIFICATION	1.630924432909306E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999290591609895	WITHOUT_CLASSIFICATION	7.094083901050535E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999084852118616	WITHOUT_CLASSIFICATION	9.151478813851256E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999830587267353	WITHOUT_CLASSIFICATION	1.694127326460418E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999963435810983	WITHOUT_CLASSIFICATION	3.656418901696825E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999836953222774	WITHOUT_CLASSIFICATION	1.6304677722599813E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999819295520057	WITHOUT_CLASSIFICATION	1.8070447994319452E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999989933425226	WITHOUT_CLASSIFICATION	1.0066574774016397E-5	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999524367685135	WITHOUT_CLASSIFICATION	4.75632314864376E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999166365177055	WITHOUT_CLASSIFICATION	8.336348229454955E-5	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999803086706666	WITHOUT_CLASSIFICATION	1.9691329333438943E-5	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9989901665088042	WITHOUT_CLASSIFICATION	0.0010098334911958205	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999949268381367	WITHOUT_CLASSIFICATION	5.0731618632311445E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9976280557980315	WITHOUT_CLASSIFICATION	0.002371944201968535	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999568635288648	WITHOUT_CLASSIFICATION	4.313647113529823E-5	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999002331567843	WITHOUT_CLASSIFICATION	9.976684321568093E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997894508296465	WITHOUT_CLASSIFICATION	2.105491703533776E-4	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997931292020292	WITHOUT_CLASSIFICATION	2.0687079797074265E-4	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9997883716925787	WITHOUT_CLASSIFICATION	2.116283074211456E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999124392971799	WITHOUT_CLASSIFICATION	8.756070282013775E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999831609433091	WITHOUT_CLASSIFICATION	1.6839056690942508E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9972042191904569	WITHOUT_CLASSIFICATION	0.002795780809543064	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998257657673455	WITHOUT_CLASSIFICATION	1.7423423265446546E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998982509132118	WITHOUT_CLASSIFICATION	1.0174908678810903E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9998257657673455	WITHOUT_CLASSIFICATION	1.7423423265446546E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993832782672394	WITHOUT_CLASSIFICATION	6.167217327605721E-4	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999762621512484	WITHOUT_CLASSIFICATION	2.3737848751603626E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999413111148523	WITHOUT_CLASSIFICATION	5.868888514777224E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999882152347178	WITHOUT_CLASSIFICATION	1.1784765282094025E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999353811216277	WITHOUT_CLASSIFICATION	6.461887837221567E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998792176767396	WITHOUT_CLASSIFICATION	1.2078232326034514E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999436942616872	WITHOUT_CLASSIFICATION	5.6305738312720576E-5	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9984658655051311	WITHOUT_CLASSIFICATION	0.0015341344948690044	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999961810661739	WITHOUT_CLASSIFICATION	3.81893382604204E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999979743706594	WITHOUT_CLASSIFICATION	2.0256293404924974E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999941889499717	WITHOUT_CLASSIFICATION	5.811050028305479E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998025670939623	WITHOUT_CLASSIFICATION	1.9743290603778526E-4	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9994422510976718	WITHOUT_CLASSIFICATION	5.577489023281736E-4	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9315710067477763	WITHOUT_CLASSIFICATION	0.06842899325222374	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.99999377614399	WITHOUT_CLASSIFICATION	6.223856010060485E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999735378690295	WITHOUT_CLASSIFICATION	2.6462130970486634E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999651631388466	WITHOUT_CLASSIFICATION	3.483686115346599E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999651631388466	WITHOUT_CLASSIFICATION	3.483686115346599E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998652601732749	WITHOUT_CLASSIFICATION	1.3473982672508554E-4	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999342318244085	WITHOUT_CLASSIFICATION	6.576817559145995E-5	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999840834986218	WITHOUT_CLASSIFICATION	1.591650137820825E-5	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9995599492826693	WITHOUT_CLASSIFICATION	4.400507173307079E-4	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998828834714181	WITHOUT_CLASSIFICATION	1.171165285819457E-4	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9996547999990304	WITHOUT_CLASSIFICATION	3.4520000096954957E-4	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9981138409372327	WITHOUT_CLASSIFICATION	0.0018861590627673639	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999130360702103	WITHOUT_CLASSIFICATION	8.696392978966685E-5	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999881331247993	WITHOUT_CLASSIFICATION	1.186687520072488E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999287926637183	WITHOUT_CLASSIFICATION	7.120733628171657E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99989363582414	WITHOUT_CLASSIFICATION	1.063641758599932E-4	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999929572754341	WITHOUT_CLASSIFICATION	7.042724565774092E-6	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999306360436677	WITHOUT_CLASSIFICATION	6.93639563322015E-5	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999630097562953	WITHOUT_CLASSIFICATION	3.69902437047753E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996676734687446	WITHOUT_CLASSIFICATION	3.3232653125537447E-4	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999254389148361	WITHOUT_CLASSIFICATION	7.456108516386246E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998164212204972	WITHOUT_CLASSIFICATION	1.835787795027505E-4	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995252980517091	WITHOUT_CLASSIFICATION	4.7470194829083264E-4	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999150428572795	WITHOUT_CLASSIFICATION	8.495714272058511E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999977048557285	WITHOUT_CLASSIFICATION	2.2951442715033755E-5	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999983654966263	WITHOUT_CLASSIFICATION	1.6345033736994684E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999953853012539	WITHOUT_CLASSIFICATION	4.614698746095353E-5	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999842081132148	WITHOUT_CLASSIFICATION	1.579188678525574E-5	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999642939645742	WITHOUT_CLASSIFICATION	3.570603542574396E-5	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9996612431438333	WITHOUT_CLASSIFICATION	3.387568561667086E-4	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999498401035395	WITHOUT_CLASSIFICATION	5.015989646059099E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998668628806979	WITHOUT_CLASSIFICATION	1.331371193021166E-4	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9987323501529565	WITHOUT_CLASSIFICATION	0.0012676498470434651	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998826323225842	WITHOUT_CLASSIFICATION	1.1736767741569495E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996965562969328	WITHOUT_CLASSIFICATION	3.0344370306726763E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998555535729355	WITHOUT_CLASSIFICATION	1.4444642706439107E-4	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999964080894213	WITHOUT_CLASSIFICATION	3.5919105787849267E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9988673799158172	WITHOUT_CLASSIFICATION	0.0011326200841828686	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998831240359215	WITHOUT_CLASSIFICATION	1.168759640784402E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999043169895738	WITHOUT_CLASSIFICATION	9.568301042619098E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999878882263651	WITHOUT_CLASSIFICATION	1.2111773635019451E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999982051860815	WITHOUT_CLASSIFICATION	1.794813918497256E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999649356165752	WITHOUT_CLASSIFICATION	3.506438342479161E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999400425084465	WITHOUT_CLASSIFICATION	5.995749155342889E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.997391800430649	WITHOUT_CLASSIFICATION	0.002608199569350979	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997831277170649	WITHOUT_CLASSIFICATION	2.1687228293522444E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998543100694479	WITHOUT_CLASSIFICATION	1.456899305520208E-4	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9998864685466792	WITHOUT_CLASSIFICATION	1.1353145332079653E-4	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9856770567185728	WITHOUT_CLASSIFICATION	0.014322943281427261	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9992936198786682	WITHOUT_CLASSIFICATION	7.063801213317886E-4	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9882849729055714	WITHOUT_CLASSIFICATION	0.01171502709442855	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9811347523382303	WITHOUT_CLASSIFICATION	0.018865247661769648	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999987725225261	WITHOUT_CLASSIFICATION	1.2274774738039243E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998568618401452	WITHOUT_CLASSIFICATION	1.4313815985484766E-4	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999586203871775	WITHOUT_CLASSIFICATION	4.1379612822428563E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998543100694479	WITHOUT_CLASSIFICATION	1.456899305520208E-4	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999720209499184	WITHOUT_CLASSIFICATION	2.797905008162045E-5	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999535334762609	WITHOUT_CLASSIFICATION	4.646652373906527E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9997818780622313	WITHOUT_CLASSIFICATION	2.181219377687565E-4	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.999888271546883	WITHOUT_CLASSIFICATION	1.1172845311709522E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934145313044	WITHOUT_CLASSIFICATION	6.585468695599889E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.999934145313044	WITHOUT_CLASSIFICATION	6.585468695599889E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999759684712772	WITHOUT_CLASSIFICATION	2.4031528722795103E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9991106669428474	WITHOUT_CLASSIFICATION	8.893330571526487E-4	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999386005175166	WITHOUT_CLASSIFICATION	6.139948248341311E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9992188110728071	WITHOUT_CLASSIFICATION	7.811889271930006E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997878638109222	WITHOUT_CLASSIFICATION	2.1213618907783578E-4	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999690175416674	WITHOUT_CLASSIFICATION	3.0982458332564145E-5	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999941790108952	WITHOUT_CLASSIFICATION	5.82098910474228E-6	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994173004651208	WITHOUT_CLASSIFICATION	5.826995348791472E-4	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999529665925232	WITHOUT_CLASSIFICATION	4.70334074768617E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9997937785457433	WITHOUT_CLASSIFICATION	2.0622145425669414E-4	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9986893661046753	WITHOUT_CLASSIFICATION	0.0013106338953246225	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999887235967815	WITHOUT_CLASSIFICATION	1.1276403218506719E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999296000448363	WITHOUT_CLASSIFICATION	7.039995516359987E-5	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9952237669971465	WITHOUT_CLASSIFICATION	0.004776233002853506	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998679022358548	WITHOUT_CLASSIFICATION	1.3209776414527269E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9994303232161055	WITHOUT_CLASSIFICATION	5.69676783894536E-4	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.969936550271698	WITHOUT_CLASSIFICATION	0.03006344972830194	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998884177865235	WITHOUT_CLASSIFICATION	1.1158221347643429E-4	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999874219956637	WITHOUT_CLASSIFICATION	1.2578004336386456E-5	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997348006797228	WITHOUT_CLASSIFICATION	2.651993202772403E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999245905828036	WITHOUT_CLASSIFICATION	7.540941719641249E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999995896371113	WITHOUT_CLASSIFICATION	4.1036288867989955E-7	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999521486498505	WITHOUT_CLASSIFICATION	4.785135014948486E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999646187281327	WITHOUT_CLASSIFICATION	3.538127186734843E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999657920013227	WITHOUT_CLASSIFICATION	3.420799867724183E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999412757633833	WITHOUT_CLASSIFICATION	5.87242366166334E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999828408921412	WITHOUT_CLASSIFICATION	1.7159107858851387E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999415474658329	WITHOUT_CLASSIFICATION	5.8452534167139377E-5	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999855653178072	WITHOUT_CLASSIFICATION	1.4434682192718568E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999971218817424	WITHOUT_CLASSIFICATION	2.8781182576042322E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999415474658329	WITHOUT_CLASSIFICATION	5.8452534167139377E-5	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9991902447159213	WITHOUT_CLASSIFICATION	8.097552840785604E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999679810822244	WITHOUT_CLASSIFICATION	3.201891777566887E-5	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999004518591403	WITHOUT_CLASSIFICATION	9.954814085967819E-5	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997126157990687	WITHOUT_CLASSIFICATION	2.873842009313018E-4	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999423861031452	WITHOUT_CLASSIFICATION	5.7613896854776316E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99989363582414	WITHOUT_CLASSIFICATION	1.063641758599932E-4	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999918977649609	WITHOUT_CLASSIFICATION	8.102235039095442E-5	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998956584403801	WITHOUT_CLASSIFICATION	1.0434155961995116E-4	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9989396879592622	WITHOUT_CLASSIFICATION	0.0010603120407377087	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999272248818138	WITHOUT_CLASSIFICATION	7.277511818609084E-5	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999836939391797	WITHOUT_CLASSIFICATION	1.630606082020284E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999619930598391	WITHOUT_CLASSIFICATION	3.800694016082043E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999600286649253	WITHOUT_CLASSIFICATION	3.997133507480586E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999755274800479	WITHOUT_CLASSIFICATION	2.4472519952021714E-5	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999223037253474	WITHOUT_CLASSIFICATION	7.769627465258042E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999026905030829	WITHOUT_CLASSIFICATION	9.730949691707768E-5	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999658008397768	WITHOUT_CLASSIFICATION	3.4199160223176065E-5	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998154270956683	WITHOUT_CLASSIFICATION	1.8457290433173662E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999898923177137	WITHOUT_CLASSIFICATION	1.0107682286396833E-5	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999245344174996	WITHOUT_CLASSIFICATION	7.546558250040107E-5	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999954573925084	WITHOUT_CLASSIFICATION	4.5426074916099706E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999653112978802	WITHOUT_CLASSIFICATION	3.4688702119859876E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999698498964834	WITHOUT_CLASSIFICATION	3.01501035164868E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9996775538681333	WITHOUT_CLASSIFICATION	3.2244613186665697E-4	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999937914248738	WITHOUT_CLASSIFICATION	6.208575126283505E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999335610228259	WITHOUT_CLASSIFICATION	6.643897717405164E-5	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999000891547378	WITHOUT_CLASSIFICATION	9.991084526206636E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9986667845846686	WITHOUT_CLASSIFICATION	0.0013332154153313262	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999519925047845	WITHOUT_CLASSIFICATION	4.800749521541415E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999473577537127	WITHOUT_CLASSIFICATION	5.264224628722068E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998533361497834	WITHOUT_CLASSIFICATION	1.4666385021653257E-4	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997552242229107	WITHOUT_CLASSIFICATION	2.4477577708926265E-4	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9982996526981167	WITHOUT_CLASSIFICATION	0.001700347301883255	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999810439158477	WITHOUT_CLASSIFICATION	1.895608415221895E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999469142592384	WITHOUT_CLASSIFICATION	5.308574076159923E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999992758902465	WITHOUT_CLASSIFICATION	7.241097533608951E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998168969968652	WITHOUT_CLASSIFICATION	1.8310300313492466E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999594369733936	WITHOUT_CLASSIFICATION	4.056302660639211E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998468852311068	WITHOUT_CLASSIFICATION	1.5311476889321658E-4	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998597221544588	WITHOUT_CLASSIFICATION	1.4027784554109454E-4	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.999597518090492	WITHOUT_CLASSIFICATION	4.0248190950799187E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999954138711968	WITHOUT_CLASSIFICATION	4.586128803143721E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999862309258429	WITHOUT_CLASSIFICATION	1.3769074157122327E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998966344377108	WITHOUT_CLASSIFICATION	1.0336556228917252E-4	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.99999783609809	WITHOUT_CLASSIFICATION	2.163901909880287E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999581819803057	WITHOUT_CLASSIFICATION	4.181801969421912E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999161565618	WITHOUT_CLASSIFICATION	8.384343820142254E-7	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9987846694349664	WITHOUT_CLASSIFICATION	0.0012153305650337168	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999254719012101	WITHOUT_CLASSIFICATION	7.452809878993897E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999919818209043	WITHOUT_CLASSIFICATION	8.01817909569302E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994168655707343	WITHOUT_CLASSIFICATION	5.83134429265743E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997654209012291	WITHOUT_CLASSIFICATION	2.34579098770738E-4	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998588131194779	WITHOUT_CLASSIFICATION	1.41186880522105E-4	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998046523444083	WITHOUT_CLASSIFICATION	1.9534765559182848E-4	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999928634262155	WITHOUT_CLASSIFICATION	7.136573784454357E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999875953327128	WITHOUT_CLASSIFICATION	1.2404667287213392E-5	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999017203015715	WITHOUT_CLASSIFICATION	9.827969842847315E-5	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999152517889526	WITHOUT_CLASSIFICATION	8.474821104742653E-5	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999240835423622	WITHOUT_CLASSIFICATION	7.591645763775089E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998533361497834	WITHOUT_CLASSIFICATION	1.4666385021653257E-4	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998842997716325	WITHOUT_CLASSIFICATION	1.157002283674732E-4	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999879185493631	WITHOUT_CLASSIFICATION	1.2081450636991806E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998211192891875	WITHOUT_CLASSIFICATION	1.788807108124669E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999468898092667	WITHOUT_CLASSIFICATION	5.311019073339786E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999988932794666	WITHOUT_CLASSIFICATION	1.1067205334340779E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9993169082666188	WITHOUT_CLASSIFICATION	6.83091733381203E-4	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997659471011683	WITHOUT_CLASSIFICATION	2.3405289883166817E-4	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999987852537539	WITHOUT_CLASSIFICATION	1.2147462461113425E-5	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999888926421295	WITHOUT_CLASSIFICATION	1.110735787048553E-5	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997848624513407	WITHOUT_CLASSIFICATION	2.1513754865933214E-4	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999101768185421	WITHOUT_CLASSIFICATION	8.982318145791006E-4	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999677844891099	WITHOUT_CLASSIFICATION	3.221551089010556E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999966465925892	WITHOUT_CLASSIFICATION	3.3534074107500167E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997117472730187	WITHOUT_CLASSIFICATION	2.882527269812347E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993832782672394	WITHOUT_CLASSIFICATION	6.167217327605721E-4	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999940861808178	WITHOUT_CLASSIFICATION	5.913819182206723E-5	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9991712325531881	WITHOUT_CLASSIFICATION	8.287674468119391E-4	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998730303690752	WITHOUT_CLASSIFICATION	1.2696963092477488E-4	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999801127464503	WITHOUT_CLASSIFICATION	1.9887253549707784E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999913804538109	WITHOUT_CLASSIFICATION	8.61954618920227E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999028580629828	WITHOUT_CLASSIFICATION	9.71419370171608E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999028580629828	WITHOUT_CLASSIFICATION	9.71419370171608E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999604296152972	WITHOUT_CLASSIFICATION	3.957038470282448E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999949593641101	WITHOUT_CLASSIFICATION	5.040635889871565E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997384087261882	WITHOUT_CLASSIFICATION	2.6159127381168484E-4	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999356978982588	WITHOUT_CLASSIFICATION	6.430210174125024E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999236881366006	WITHOUT_CLASSIFICATION	7.631186339936112E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999955158821832	WITHOUT_CLASSIFICATION	4.484117816808774E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999607617927492	WITHOUT_CLASSIFICATION	3.9238207250919035E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993302368179319	WITHOUT_CLASSIFICATION	6.697631820680698E-4	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993302368179319	WITHOUT_CLASSIFICATION	6.697631820680698E-4	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997967437328468	WITHOUT_CLASSIFICATION	2.0325626715332468E-4	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999644223316951	WITHOUT_CLASSIFICATION	3.557766830487998E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998034948791573	WITHOUT_CLASSIFICATION	1.965051208426942E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998987065401949	WITHOUT_CLASSIFICATION	1.0129345980515079E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998987065401949	WITHOUT_CLASSIFICATION	1.0129345980515079E-4	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998987065401949	WITHOUT_CLASSIFICATION	1.0129345980515079E-4	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999547309305337	WITHOUT_CLASSIFICATION	4.526906946633378E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999368656740131	WITHOUT_CLASSIFICATION	6.313432598692545E-5	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999996582287093	WITHOUT_CLASSIFICATION	3.417712907075576E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997943511788931	WITHOUT_CLASSIFICATION	2.0564882110687423E-4	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999438093569899	WITHOUT_CLASSIFICATION	5.61906430100376E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999812077702096	WITHOUT_CLASSIFICATION	1.879222979043976E-5	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999740196695114	WITHOUT_CLASSIFICATION	2.5980330488668545E-5	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9374473091001051	WITHOUT_CLASSIFICATION	0.06255269089989483	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999827422102915	WITHOUT_CLASSIFICATION	1.7257789708480772E-5	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999436501727126	WITHOUT_CLASSIFICATION	5.634982728747472E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998998035988963	WITHOUT_CLASSIFICATION	1.0019640110374249E-4	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9958312275886122	WITHOUT_CLASSIFICATION	0.004168772411387758	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999986588785323	WITHOUT_CLASSIFICATION	1.3411214677110145E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999810359317165	WITHOUT_CLASSIFICATION	1.896406828350452E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999933905633407	WITHOUT_CLASSIFICATION	6.6094366593464414E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999884916119677	WITHOUT_CLASSIFICATION	1.1508388032291825E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999477043560965	WITHOUT_CLASSIFICATION	5.229564390361758E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999028580629828	WITHOUT_CLASSIFICATION	9.71419370171608E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999909070100633	WITHOUT_CLASSIFICATION	9.092989936714467E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9713477443809744	WITHOUT_CLASSIFICATION	0.028652255619025617	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997751847093482	WITHOUT_CLASSIFICATION	2.2481529065175368E-4	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999558216008345	WITHOUT_CLASSIFICATION	4.4178399165481596E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999486020414351	WITHOUT_CLASSIFICATION	5.139795856486354E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999277123128215	WITHOUT_CLASSIFICATION	7.228768717849479E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999914828238828	WITHOUT_CLASSIFICATION	8.517176117140231E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998218008099571	WITHOUT_CLASSIFICATION	1.7819919004294322E-4	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999065007985845	WITHOUT_CLASSIFICATION	9.349920141556768E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999202595186664	WITHOUT_CLASSIFICATION	7.974048133367518E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9996868876896288	WITHOUT_CLASSIFICATION	3.1311231037120415E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999474865061594	WITHOUT_CLASSIFICATION	5.2513493840560435E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9997503565517346	WITHOUT_CLASSIFICATION	2.496434482653928E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999150802089704	WITHOUT_CLASSIFICATION	8.491979102963401E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.999980931211271	WITHOUT_CLASSIFICATION	1.9068788729084E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8471853976996604	WITHOUT_CLASSIFICATION	0.1528146023003397	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9995003750590953	WITHOUT_CLASSIFICATION	4.996249409047332E-4	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999903205765716	WITHOUT_CLASSIFICATION	9.679423428558438E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999735125948512	WITHOUT_CLASSIFICATION	2.6487405148770526E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999735125948512	WITHOUT_CLASSIFICATION	2.6487405148770526E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999214842118404	WITHOUT_CLASSIFICATION	7.851578815973411E-5	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999754539062612	WITHOUT_CLASSIFICATION	2.4546093738914687E-5	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999140876554627	WITHOUT_CLASSIFICATION	8.591234453729399E-5	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999621093646273	WITHOUT_CLASSIFICATION	3.789063537266769E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997319264236394	WITHOUT_CLASSIFICATION	2.6807357636055116E-4	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999894198862076	WITHOUT_CLASSIFICATION	1.0580113792390496E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998480818916745	WITHOUT_CLASSIFICATION	1.5191810832546345E-4	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998559781441696	WITHOUT_CLASSIFICATION	1.4402185583028637E-4	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999778257961527	WITHOUT_CLASSIFICATION	2.2174203847310876E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999681349362296	WITHOUT_CLASSIFICATION	3.186506377037821E-5	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9996211906008755	WITHOUT_CLASSIFICATION	3.7880939912446625E-4	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996871414362883	WITHOUT_CLASSIFICATION	3.128585637116478E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999969923704709	WITHOUT_CLASSIFICATION	3.0076295290247347E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999448800762321	WITHOUT_CLASSIFICATION	5.51199237680413E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999951111179431	WITHOUT_CLASSIFICATION	4.888882056849889E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9994598610416559	WITHOUT_CLASSIFICATION	5.40138958344103E-4	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999812071820021	WITHOUT_CLASSIFICATION	1.8792817997875316E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999812071820021	WITHOUT_CLASSIFICATION	1.8792817997875316E-5	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997933440363611	WITHOUT_CLASSIFICATION	2.0665596363899494E-4	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9964370748286242	WITHOUT_CLASSIFICATION	0.0035629251713757983	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999513258724438	WITHOUT_CLASSIFICATION	4.867412755620133E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.999513258724438	WITHOUT_CLASSIFICATION	4.867412755620133E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998485625660761	WITHOUT_CLASSIFICATION	1.514374339240003E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996583607298829	WITHOUT_CLASSIFICATION	3.4163927011708915E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999436145199289	WITHOUT_CLASSIFICATION	5.638548007113914E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988261010308868	WITHOUT_CLASSIFICATION	0.001173898969113234	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9992697698682376	WITHOUT_CLASSIFICATION	7.302301317624132E-4	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999857401588359	WITHOUT_CLASSIFICATION	1.425984116409771E-4	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999690479893572	WITHOUT_CLASSIFICATION	3.095201064289406E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988261010308868	WITHOUT_CLASSIFICATION	0.001173898969113234	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9982236227462292	WITHOUT_CLASSIFICATION	0.0017763772537707926	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998817407836804	WITHOUT_CLASSIFICATION	1.1825921631963642E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998896098920136	WITHOUT_CLASSIFICATION	1.1039010798643199E-4	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9996757729702149	WITHOUT_CLASSIFICATION	3.2422702978507297E-4	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999877496481864	WITHOUT_CLASSIFICATION	1.225035181360898E-4	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999966842373779	WITHOUT_CLASSIFICATION	3.3157626221219997E-6	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999747248413754	WITHOUT_CLASSIFICATION	2.5275158624689492E-5	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999572539954061	WITHOUT_CLASSIFICATION	4.27460045939402E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998547922087232	WITHOUT_CLASSIFICATION	1.452077912767682E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9984767897840431	WITHOUT_CLASSIFICATION	0.0015232102159569339	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999316337251699	WITHOUT_CLASSIFICATION	6.836627483010927E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999116560967896	WITHOUT_CLASSIFICATION	8.834390321037897E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999445981908115	WITHOUT_CLASSIFICATION	5.54018091884489E-5	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999917136158533	WITHOUT_CLASSIFICATION	8.286384146734721E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999208573594609	WITHOUT_CLASSIFICATION	7.914264053906302E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999192317185146	WITHOUT_CLASSIFICATION	8.076828148546567E-5	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999966472986791	WITHOUT_CLASSIFICATION	3.352701320894537E-5	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9995282069195462	WITHOUT_CLASSIFICATION	4.717930804538244E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995282069195462	WITHOUT_CLASSIFICATION	4.717930804538244E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999747248413754	WITHOUT_CLASSIFICATION	2.5275158624689492E-5	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998044660240476	WITHOUT_CLASSIFICATION	1.9553397595241883E-4	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997099019548	WITHOUT_CLASSIFICATION	2.900980452000228E-4	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.997954670006121	WITHOUT_CLASSIFICATION	0.002045329993878991	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9997959467884598	WITHOUT_CLASSIFICATION	2.0405321154018247E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999928444951328	WITHOUT_CLASSIFICATION	7.1555048672036906E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999847542905527	WITHOUT_CLASSIFICATION	1.5245709447206952E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999251537102775	WITHOUT_CLASSIFICATION	7.48462897225314E-5	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.998995525507748	WITHOUT_CLASSIFICATION	0.0010044744922521295	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999978381162168	WITHOUT_CLASSIFICATION	2.1618837831527697E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999520577632152	WITHOUT_CLASSIFICATION	4.794223678491239E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999896723109806	WITHOUT_CLASSIFICATION	1.0327689019527795E-5	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9984269437194733	WITHOUT_CLASSIFICATION	0.0015730562805267388	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995812523802962	WITHOUT_CLASSIFICATION	4.187476197038621E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999943756711893	WITHOUT_CLASSIFICATION	5.624328810673832E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999743254286392	WITHOUT_CLASSIFICATION	2.5674571360912296E-5	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999905236988148	WITHOUT_CLASSIFICATION	9.4763011851843E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999997978549468	WITHOUT_CLASSIFICATION	2.0214505320595995E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999368062315626	WITHOUT_CLASSIFICATION	6.319376843734989E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999985120963591	WITHOUT_CLASSIFICATION	1.4879036408978005E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999688130883001	WITHOUT_CLASSIFICATION	3.1186911699884406E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999863616905751	WITHOUT_CLASSIFICATION	1.3638309424786856E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998450300916415	WITHOUT_CLASSIFICATION	1.5496990835855916E-4	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999511764886831	WITHOUT_CLASSIFICATION	4.8823511316896955E-5	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999950944095475	WITHOUT_CLASSIFICATION	4.905590452500136E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999989704057438	WITHOUT_CLASSIFICATION	1.0295942561576078E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999340630908286	WITHOUT_CLASSIFICATION	6.593690917136874E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999714333785312	WITHOUT_CLASSIFICATION	2.856662146882578E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999766126926133	WITHOUT_CLASSIFICATION	2.338730738674165E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999953211181664	WITHOUT_CLASSIFICATION	4.678881833634558E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9993987335769402	WITHOUT_CLASSIFICATION	6.012664230598851E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999743130633697	WITHOUT_CLASSIFICATION	2.5686936630267602E-5	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999892244873629	WITHOUT_CLASSIFICATION	1.0775512637106324E-5	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997780350039555	WITHOUT_CLASSIFICATION	2.2196499604444582E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999993092709193	WITHOUT_CLASSIFICATION	6.9072908069819575E-6	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999119316602935	WITHOUT_CLASSIFICATION	8.806833970652189E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996692548463215	WITHOUT_CLASSIFICATION	3.30745153678423E-4	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999899907996596	WITHOUT_CLASSIFICATION	1.000920034039662E-4	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999562018791395	WITHOUT_CLASSIFICATION	4.379812086064227E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999919309909918	WITHOUT_CLASSIFICATION	8.069009008210906E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9985013375819846	WITHOUT_CLASSIFICATION	0.0014986624180154497	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999573616685136	WITHOUT_CLASSIFICATION	4.263833148642626E-5	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9996634742828825	WITHOUT_CLASSIFICATION	3.3652571711745625E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5300710692547335	DEFECT	0.46992893074526654	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9996576178628422	WITHOUT_CLASSIFICATION	3.423821371578402E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999845423859767	WITHOUT_CLASSIFICATION	1.5457614023293707E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998605955076738	WITHOUT_CLASSIFICATION	1.394044923263176E-4	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9993176595945433	WITHOUT_CLASSIFICATION	6.823404054567075E-4	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9994626372057304	WITHOUT_CLASSIFICATION	5.37362794269652E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999987184728543	WITHOUT_CLASSIFICATION	1.281527145705665E-5	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999029178595982	WITHOUT_CLASSIFICATION	9.708214040183574E-5	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997073934306321	WITHOUT_CLASSIFICATION	2.926065693680126E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9992697698682376	WITHOUT_CLASSIFICATION	7.302301317624132E-4	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999995513875181	WITHOUT_CLASSIFICATION	4.4861248196727403E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999743254286392	WITHOUT_CLASSIFICATION	2.5674571360912296E-5	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9969444962571715	WITHOUT_CLASSIFICATION	0.0030555037428284227	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998191639609472	WITHOUT_CLASSIFICATION	1.8083603905286056E-4	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999715634092402	WITHOUT_CLASSIFICATION	2.8436590759792227E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999714963533503	WITHOUT_CLASSIFICATION	2.8503646649803082E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999144074090989	WITHOUT_CLASSIFICATION	8.559259090106234E-5	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999962657783206	WITHOUT_CLASSIFICATION	3.7342216795120472E-6	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998790393222867	WITHOUT_CLASSIFICATION	1.2096067771337085E-4	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999957423718568	WITHOUT_CLASSIFICATION	4.257628143075293E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9785536565990337	WITHOUT_CLASSIFICATION	0.02144634340096628	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998211555688447	WITHOUT_CLASSIFICATION	1.7884443115529793E-4	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999852138384944	WITHOUT_CLASSIFICATION	1.478616150569859E-5	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999975239399573	WITHOUT_CLASSIFICATION	2.4760600426823935E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999685637852413	WITHOUT_CLASSIFICATION	3.143621475861938E-5	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999685637852413	WITHOUT_CLASSIFICATION	3.143621475861938E-5	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999971518936246	WITHOUT_CLASSIFICATION	2.848106375429867E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997751831160744	WITHOUT_CLASSIFICATION	2.248168839256402E-4	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999959833205425	WITHOUT_CLASSIFICATION	4.016679457457306E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999898389395608	WITHOUT_CLASSIFICATION	1.0161060439123481E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999175311283407	WITHOUT_CLASSIFICATION	8.24688716593441E-5	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999459608601965	WITHOUT_CLASSIFICATION	5.403913980347024E-5	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9997917931640937	WITHOUT_CLASSIFICATION	2.0820683590622125E-4	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998825556709093	WITHOUT_CLASSIFICATION	1.1744432909067972E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999725692045197	WITHOUT_CLASSIFICATION	2.7430795480215048E-5	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999711791044693	WITHOUT_CLASSIFICATION	2.8820895530693592E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999283472314248	WITHOUT_CLASSIFICATION	7.165276857524171E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999283472314248	WITHOUT_CLASSIFICATION	7.165276857524171E-5	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9997489641178144	WITHOUT_CLASSIFICATION	2.510358821856356E-4	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999473157745388	WITHOUT_CLASSIFICATION	5.268422546126752E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9986399673138219	WITHOUT_CLASSIFICATION	0.0013600326861781433	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998166584473057	WITHOUT_CLASSIFICATION	1.8334155269425145E-4	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999943217404793	WITHOUT_CLASSIFICATION	5.678259520609845E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9995673599968699	WITHOUT_CLASSIFICATION	4.3264000313016505E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9995713172961596	WITHOUT_CLASSIFICATION	4.2868270384043965E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991656967780972	WITHOUT_CLASSIFICATION	8.343032219028132E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999193233379831	WITHOUT_CLASSIFICATION	8.06766620169212E-5	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998841629787912	WITHOUT_CLASSIFICATION	1.1583702120873472E-4	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999973289468188	WITHOUT_CLASSIFICATION	2.6710531812056215E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498147152624	WITHOUT_CLASSIFICATION	1.5018528473774488E-4	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999328318116241	WITHOUT_CLASSIFICATION	6.716818837596946E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996617123100043	WITHOUT_CLASSIFICATION	3.3828768999558936E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999596774190559	WITHOUT_CLASSIFICATION	4.032258094410275E-4	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999396993705169	WITHOUT_CLASSIFICATION	6.030062948300987E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934060733264413	WITHOUT_CLASSIFICATION	0.006593926673558731	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999763158236713	WITHOUT_CLASSIFICATION	2.3684176328694003E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999929661210799	WITHOUT_CLASSIFICATION	7.033878920058072E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999342131388188	WITHOUT_CLASSIFICATION	6.578686118114976E-5	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997348006797228	WITHOUT_CLASSIFICATION	2.651993202772403E-4	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999623274128846	WITHOUT_CLASSIFICATION	3.76725871154339E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996064388099215	WITHOUT_CLASSIFICATION	3.935611900784857E-4	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999298762954412	WITHOUT_CLASSIFICATION	7.012370455893475E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999319821859013	WITHOUT_CLASSIFICATION	6.801781409863074E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999145057606257	WITHOUT_CLASSIFICATION	8.549423937435036E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999197510472904	WITHOUT_CLASSIFICATION	8.024895270961557E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999979240294146	WITHOUT_CLASSIFICATION	2.075970585405378E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999592538268556	WITHOUT_CLASSIFICATION	4.0746173144419984E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999458499386846	WITHOUT_CLASSIFICATION	5.4150061315383965E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9972520989498816	WITHOUT_CLASSIFICATION	0.002747901050118321	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999809005197663	WITHOUT_CLASSIFICATION	1.9099480233667877E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998942502112	WITHOUT_CLASSIFICATION	1.057497888361322E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998782591525153	WITHOUT_CLASSIFICATION	1.2174084748480493E-4	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999357145433877	WITHOUT_CLASSIFICATION	6.428545661229454E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999970113869339	WITHOUT_CLASSIFICATION	2.9886130661858037E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998851802119448	WITHOUT_CLASSIFICATION	1.1481978805527739E-4	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998337859245212	WITHOUT_CLASSIFICATION	1.662140754789014E-4	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999987082952832	WITHOUT_CLASSIFICATION	1.2917047167963239E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993563622197844	WITHOUT_CLASSIFICATION	6.43637780215633E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997598832592951	WITHOUT_CLASSIFICATION	2.4011674070477485E-4	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999050519569038	WITHOUT_CLASSIFICATION	9.494804309615932E-5	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999510464651725	WITHOUT_CLASSIFICATION	4.895353482748314E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9997945322732626	WITHOUT_CLASSIFICATION	2.0546772673740293E-4	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999205265685409	WITHOUT_CLASSIFICATION	7.947343145909096E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9991371209306757	WITHOUT_CLASSIFICATION	8.628790693242684E-4	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999738303129571	WITHOUT_CLASSIFICATION	2.6169687042957343E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999520996631099	WITHOUT_CLASSIFICATION	4.790033689002972E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999727706483743	WITHOUT_CLASSIFICATION	2.7229351625689286E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9992389069663663	WITHOUT_CLASSIFICATION	7.610930336336649E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999439925035581	WITHOUT_CLASSIFICATION	5.600749644180714E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999339466517821	WITHOUT_CLASSIFICATION	6.605334821790223E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999736759617077	WITHOUT_CLASSIFICATION	2.6324038292276275E-5	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999351874597747	WITHOUT_CLASSIFICATION	6.48125402252427E-5	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999736759617077	WITHOUT_CLASSIFICATION	2.6324038292276275E-5	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9947348432878441	WITHOUT_CLASSIFICATION	0.005265156712155954	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9961661540391681	WITHOUT_CLASSIFICATION	0.003833845960831953	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999473964798195	WITHOUT_CLASSIFICATION	5.260352018047928E-5	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999995049899828	WITHOUT_CLASSIFICATION	4.950100172033837E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999005694773558	WITHOUT_CLASSIFICATION	9.94305226440915E-5	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999473964798195	WITHOUT_CLASSIFICATION	5.260352018047928E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999983862248453	WITHOUT_CLASSIFICATION	1.6137751548223296E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999813076391692	WITHOUT_CLASSIFICATION	1.8692360830791844E-4	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999645338672845	WITHOUT_CLASSIFICATION	3.546613271560768E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999765534210255	WITHOUT_CLASSIFICATION	2.3446578974515702E-5	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999932832828595	WITHOUT_CLASSIFICATION	6.716717140498051E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999968696600973	WITHOUT_CLASSIFICATION	3.1303399026981984E-5	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999989801479487	WITHOUT_CLASSIFICATION	1.0198520513080195E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999510967821266	WITHOUT_CLASSIFICATION	4.89032178733836E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999857686052753	WITHOUT_CLASSIFICATION	1.4231394724651002E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999332550176453	WITHOUT_CLASSIFICATION	6.674498235477188E-5	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9988323449603629	WITHOUT_CLASSIFICATION	0.001167655039637147	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999087710264606	WITHOUT_CLASSIFICATION	9.12289735394315E-5	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998767291209711	WITHOUT_CLASSIFICATION	1.232708790288282E-4	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999389674916964	WITHOUT_CLASSIFICATION	6.103250830365368E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999371675378625	WITHOUT_CLASSIFICATION	6.283246213748595E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9996792077604519	WITHOUT_CLASSIFICATION	3.207922395480935E-4	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9994022623922271	WITHOUT_CLASSIFICATION	5.977376077728842E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996183299185772	WITHOUT_CLASSIFICATION	3.8167008142268513E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998595297050012	WITHOUT_CLASSIFICATION	1.4047029499879502E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9978387002297815	WITHOUT_CLASSIFICATION	0.0021612997702184404	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9992958914961507	WITHOUT_CLASSIFICATION	7.041085038492287E-4	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9997663404508056	WITHOUT_CLASSIFICATION	2.3365954919448334E-4	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997599388768126	WITHOUT_CLASSIFICATION	2.400611231874417E-4	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9991112939176818	WITHOUT_CLASSIFICATION	8.887060823182685E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.999882892926345	WITHOUT_CLASSIFICATION	1.1710707365502047E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9553420672491898	WITHOUT_CLASSIFICATION	0.04465793275081015	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9887692911283914	WITHOUT_CLASSIFICATION	0.011230708871608661	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999928963476464	WITHOUT_CLASSIFICATION	7.103652353510315E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999411353262375	WITHOUT_CLASSIFICATION	5.8864673762390055E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9997023326834051	WITHOUT_CLASSIFICATION	2.976673165948639E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999944825112774	WITHOUT_CLASSIFICATION	5.517488722591796E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998711415850463	WITHOUT_CLASSIFICATION	1.2885841495374715E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9940059877269893	WITHOUT_CLASSIFICATION	0.005994012273010748	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9978387002297815	WITHOUT_CLASSIFICATION	0.0021612997702184404	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999970393104343	WITHOUT_CLASSIFICATION	2.9606895657000268E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9996288887256373	WITHOUT_CLASSIFICATION	3.711112743626388E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996867399914829	WITHOUT_CLASSIFICATION	3.132600085170704E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9998642477294098	WITHOUT_CLASSIFICATION	1.357522705901224E-4	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999974329869836	WITHOUT_CLASSIFICATION	2.5670130163393116E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999867188050435	WITHOUT_CLASSIFICATION	1.3281194956415832E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9914296934916204	WITHOUT_CLASSIFICATION	0.00857030650837969	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998593288241316	WITHOUT_CLASSIFICATION	1.4067117586833076E-4	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9993745198050588	WITHOUT_CLASSIFICATION	6.254801949412518E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999226370900506	WITHOUT_CLASSIFICATION	7.736290994940223E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.99999485587854	WITHOUT_CLASSIFICATION	5.144121460012121E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999696715284297	WITHOUT_CLASSIFICATION	3.0328471570344797E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999260043299506	WITHOUT_CLASSIFICATION	7.399567004940427E-5	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999843052333625	WITHOUT_CLASSIFICATION	1.569476663757272E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998948979919101	WITHOUT_CLASSIFICATION	1.0510200808989227E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999797172745447	WITHOUT_CLASSIFICATION	2.0282725455303045E-5	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9970377256360099	WITHOUT_CLASSIFICATION	0.0029622743639901986	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994316610156501	WITHOUT_CLASSIFICATION	5.683389843499435E-4	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9985826563950412	WITHOUT_CLASSIFICATION	0.0014173436049587718	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9992227187414692	WITHOUT_CLASSIFICATION	7.77281258530862E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997409306149623	WITHOUT_CLASSIFICATION	2.590693850377933E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997409306149623	WITHOUT_CLASSIFICATION	2.590693850377933E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999493898553447	WITHOUT_CLASSIFICATION	5.061014465534595E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997409306149623	WITHOUT_CLASSIFICATION	2.590693850377933E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997409306149623	WITHOUT_CLASSIFICATION	2.590693850377933E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9927235498779352	WITHOUT_CLASSIFICATION	0.00727645012206475	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995542700387193	WITHOUT_CLASSIFICATION	4.4572996128065367E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998698738953895	WITHOUT_CLASSIFICATION	1.301261046105676E-4	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998698738953895	WITHOUT_CLASSIFICATION	1.301261046105676E-4	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9978705011390673	WITHOUT_CLASSIFICATION	0.0021294988609327535	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999824072132149	WITHOUT_CLASSIFICATION	1.7592786785191377E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.997562632605962	WITHOUT_CLASSIFICATION	0.0024373673940380793	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998940936794877	WITHOUT_CLASSIFICATION	1.0590632051225766E-4	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998779059507044	WITHOUT_CLASSIFICATION	1.220940492955813E-4	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998966823674867	WITHOUT_CLASSIFICATION	1.0331763251334846E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995487679154456	WITHOUT_CLASSIFICATION	4.5123208455445386E-4	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999473509901742	WITHOUT_CLASSIFICATION	5.264900982586288E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998816371553487	WITHOUT_CLASSIFICATION	1.1836284465128349E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998744638037179	WITHOUT_CLASSIFICATION	1.255361962821257E-4	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999652979282683	WITHOUT_CLASSIFICATION	3.4702071731696225E-4	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9978585173466917	WITHOUT_CLASSIFICATION	0.002141482653308304	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999831609433091	WITHOUT_CLASSIFICATION	1.6839056690942508E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999389596167436	WITHOUT_CLASSIFICATION	6.104038325632609E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9983063865764106	WITHOUT_CLASSIFICATION	0.0016936134235894186	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9997424071691912	WITHOUT_CLASSIFICATION	2.5759283080877427E-4	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999448992689815	WITHOUT_CLASSIFICATION	5.51007310185045E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999866488555114	WITHOUT_CLASSIFICATION	1.3351144488572623E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999831609433091	WITHOUT_CLASSIFICATION	1.6839056690942508E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9992958914961507	WITHOUT_CLASSIFICATION	7.041085038492287E-4	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9996726590708608	WITHOUT_CLASSIFICATION	3.2734092913923145E-4	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996594234767369	WITHOUT_CLASSIFICATION	3.4057652326316206E-4	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995088729693495	WITHOUT_CLASSIFICATION	4.911270306505467E-4	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.999947029342875	WITHOUT_CLASSIFICATION	5.297065712497687E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999326251652596	WITHOUT_CLASSIFICATION	6.737483474032918E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999634246980648	WITHOUT_CLASSIFICATION	3.657530193521801E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998330367985078	WITHOUT_CLASSIFICATION	1.6696320149224865E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999689400500017	WITHOUT_CLASSIFICATION	3.105994999833408E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999995070421964	WITHOUT_CLASSIFICATION	4.929578036249749E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998942074088022	WITHOUT_CLASSIFICATION	1.0579259119780454E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999515319742088	WITHOUT_CLASSIFICATION	4.846802579109941E-5	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9996628145432258	WITHOUT_CLASSIFICATION	3.3718545677424673E-4	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998873885776866	WITHOUT_CLASSIFICATION	1.1261142231349191E-4	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9913015014344385	WITHOUT_CLASSIFICATION	0.00869849856556144	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999677934151913	WITHOUT_CLASSIFICATION	3.220658480881344E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999672491659592	WITHOUT_CLASSIFICATION	3.275083404069122E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998534662727226	WITHOUT_CLASSIFICATION	1.4653372727740056E-4	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998882684363373	WITHOUT_CLASSIFICATION	1.1173156366266131E-4	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998114822756687	WITHOUT_CLASSIFICATION	1.885177243312777E-4	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996594184015472	WITHOUT_CLASSIFICATION	3.405815984528763E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9993397475774605	WITHOUT_CLASSIFICATION	6.602524225394986E-4	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999366585679	WITHOUT_CLASSIFICATION	6.334143208761557E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999689400500017	WITHOUT_CLASSIFICATION	3.105994999833408E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999921031373719	WITHOUT_CLASSIFICATION	7.896862628097952E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999067694032829	WITHOUT_CLASSIFICATION	9.323059671708517E-5	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998230289463133	WITHOUT_CLASSIFICATION	1.7697105368687986E-4	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999291645505063	WITHOUT_CLASSIFICATION	7.083544949373798E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9998860028881448	WITHOUT_CLASSIFICATION	1.1399711185515852E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.999904291990356	WITHOUT_CLASSIFICATION	9.570800964398148E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999341597689446	WITHOUT_CLASSIFICATION	6.584023105534205E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999040943190427	WITHOUT_CLASSIFICATION	9.59056809572824E-5	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.999892044929576	WITHOUT_CLASSIFICATION	1.0795507042412318E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991444696339	WITHOUT_CLASSIFICATION	8.555303661000913E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999816671393236	WITHOUT_CLASSIFICATION	1.833286067647388E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999754573886006	WITHOUT_CLASSIFICATION	2.4542611399343222E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999954484363558	WITHOUT_CLASSIFICATION	4.551563644203391E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999628455565455	WITHOUT_CLASSIFICATION	3.71544434545814E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995061367320397	WITHOUT_CLASSIFICATION	4.93863267960262E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991444696339	WITHOUT_CLASSIFICATION	8.555303661000913E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999421015983521	WITHOUT_CLASSIFICATION	5.789840164806036E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9994954336140293	WITHOUT_CLASSIFICATION	5.045663859707487E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998228079557469	WITHOUT_CLASSIFICATION	1.7719204425309913E-4	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999778433182905	WITHOUT_CLASSIFICATION	2.2156681709464844E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999646961965876	WITHOUT_CLASSIFICATION	3.5303803412509525E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999878965989873	WITHOUT_CLASSIFICATION	1.2103401012737049E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999386884850713	WITHOUT_CLASSIFICATION	6.131151492867574E-5	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998652392975784	WITHOUT_CLASSIFICATION	1.34760702421499E-4	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998671377523706	WITHOUT_CLASSIFICATION	1.328622476294289E-4	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996640620624964	WITHOUT_CLASSIFICATION	3.3593793750358927E-4	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996640620624964	WITHOUT_CLASSIFICATION	3.3593793750358927E-4	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996640620624964	WITHOUT_CLASSIFICATION	3.3593793750358927E-4	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999496988841535	WITHOUT_CLASSIFICATION	5.030111584644967E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999496988841535	WITHOUT_CLASSIFICATION	5.030111584644967E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9926590513393866	WITHOUT_CLASSIFICATION	0.0073409486606133756	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999959468195846	WITHOUT_CLASSIFICATION	4.053180415377959E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.999846811192025	WITHOUT_CLASSIFICATION	1.5318880797507588E-4	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9998614712688157	WITHOUT_CLASSIFICATION	1.3852873118421093E-4	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9991122748505948	WITHOUT_CLASSIFICATION	8.877251494050732E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998502776257988	WITHOUT_CLASSIFICATION	1.497223742011855E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773930542401	WITHOUT_CLASSIFICATION	1.2260694576000561E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997455568593322	WITHOUT_CLASSIFICATION	2.544431406678126E-4	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999136693137669	WITHOUT_CLASSIFICATION	8.633068623314057E-5	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998502776257988	WITHOUT_CLASSIFICATION	1.497223742011855E-4	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773930542401	WITHOUT_CLASSIFICATION	1.2260694576000561E-4	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999982748355429	WITHOUT_CLASSIFICATION	1.725164457108522E-5	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998940349144501	WITHOUT_CLASSIFICATION	1.0596508554996848E-4	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999905538120593	WITHOUT_CLASSIFICATION	9.446187940808084E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998904327169857	WITHOUT_CLASSIFICATION	1.0956728301424498E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998879996255592	WITHOUT_CLASSIFICATION	1.1200037444084568E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999254120325929	WITHOUT_CLASSIFICATION	7.4587967407059E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999386908504563	WITHOUT_CLASSIFICATION	6.130914954367297E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999882324615806	WITHOUT_CLASSIFICATION	1.1767538419465174E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997874822283151	WITHOUT_CLASSIFICATION	2.125177716848352E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9953869466877174	WITHOUT_CLASSIFICATION	0.004613053312282549	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999805581540245	WITHOUT_CLASSIFICATION	1.9441845975504707E-4	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999810748322698	WITHOUT_CLASSIFICATION	1.892516773021105E-5	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998703035528351	WITHOUT_CLASSIFICATION	1.2969644716487346E-4	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9989004562544406	WITHOUT_CLASSIFICATION	0.001099543745559436	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999454157554036	WITHOUT_CLASSIFICATION	5.458424459633066E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999549842141171	WITHOUT_CLASSIFICATION	4.501578588301794E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9987709260747731	WITHOUT_CLASSIFICATION	0.0012290739252268945	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963980516389	WITHOUT_CLASSIFICATION	3.6019483612128964E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998323635331957	WITHOUT_CLASSIFICATION	1.6763646680423045E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999759340047358	WITHOUT_CLASSIFICATION	2.4065995264225385E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999994047918738	WITHOUT_CLASSIFICATION	5.952081261507794E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9995903083158734	WITHOUT_CLASSIFICATION	4.09691684126639E-4	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998478356297292	WITHOUT_CLASSIFICATION	1.5216437027087246E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508144979028	WITHOUT_CLASSIFICATION	1.491855020973037E-4	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999127507491	WITHOUT_CLASSIFICATION	8.724925103018403E-8	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998636577647092	WITHOUT_CLASSIFICATION	1.3634223529091714E-4	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996518223620343	WITHOUT_CLASSIFICATION	3.4817763796563434E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998101986621117	WITHOUT_CLASSIFICATION	1.898013378883649E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998101986621117	WITHOUT_CLASSIFICATION	1.898013378883649E-4	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998075226291676	WITHOUT_CLASSIFICATION	1.9247737083238648E-4	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9991495844087491	WITHOUT_CLASSIFICATION	8.504155912508371E-4	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999577871074053	WITHOUT_CLASSIFICATION	4.2212892594590615E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999825125483126	WITHOUT_CLASSIFICATION	1.748745168741274E-5	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999124597205309	WITHOUT_CLASSIFICATION	8.75402794691796E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9995837665717324	WITHOUT_CLASSIFICATION	4.1623342826765106E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.999996674949029	WITHOUT_CLASSIFICATION	3.325050971029416E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999756622612332	WITHOUT_CLASSIFICATION	2.4337738766688697E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999016659957829	WITHOUT_CLASSIFICATION	9.833400421709881E-5	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993172281064	WITHOUT_CLASSIFICATION	1.0068277189357772E-4	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998998112038009	WITHOUT_CLASSIFICATION	1.0018879619906638E-4	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9990219016716888	WITHOUT_CLASSIFICATION	9.780983283112375E-4	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998367946532236	WITHOUT_CLASSIFICATION	1.6320534677636715E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985967536546111	WITHOUT_CLASSIFICATION	0.0014032463453889376	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995781000918232	WITHOUT_CLASSIFICATION	4.2189990817673194E-4	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999883431107809	WITHOUT_CLASSIFICATION	1.1656889219251055E-5	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998728768562551	WITHOUT_CLASSIFICATION	1.2712314374480898E-4	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999897153263544	WITHOUT_CLASSIFICATION	1.0284673645528466E-5	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999901355732994	WITHOUT_CLASSIFICATION	9.864426700608831E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985967536546111	WITHOUT_CLASSIFICATION	0.0014032463453889376	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985967536546111	WITHOUT_CLASSIFICATION	0.0014032463453889376	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998813759314447	WITHOUT_CLASSIFICATION	1.1862406855535236E-4	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999916348196234	WITHOUT_CLASSIFICATION	8.365180376662139E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999730746936152	WITHOUT_CLASSIFICATION	2.6925306384795086E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999947286189717	WITHOUT_CLASSIFICATION	5.271381028293339E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999150802089704	WITHOUT_CLASSIFICATION	8.491979102963401E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999549842141171	WITHOUT_CLASSIFICATION	4.501578588301794E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999504450075716	WITHOUT_CLASSIFICATION	4.955499242842054E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999610009690438	WITHOUT_CLASSIFICATION	3.8999030956177946E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999225690796752	WITHOUT_CLASSIFICATION	7.743092032481001E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301953092202	WITHOUT_CLASSIFICATION	6.980469077983119E-5	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9995292402697431	WITHOUT_CLASSIFICATION	4.707597302568733E-4	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998717931431292	WITHOUT_CLASSIFICATION	1.282068568707208E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995544286445269	WITHOUT_CLASSIFICATION	4.455713554730652E-4	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9995544286445269	WITHOUT_CLASSIFICATION	4.455713554730652E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995544286445269	WITHOUT_CLASSIFICATION	4.455713554730652E-4	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995544286445269	WITHOUT_CLASSIFICATION	4.455713554730652E-4	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939519341163	WITHOUT_CLASSIFICATION	1.0604806588361491E-4	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997541743885248	WITHOUT_CLASSIFICATION	2.458256114752676E-4	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176882069684	WITHOUT_CLASSIFICATION	1.8231179303151767E-4	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999241975815001	WITHOUT_CLASSIFICATION	7.580241849989782E-4	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999224515838263	WITHOUT_CLASSIFICATION	7.754841617379766E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998704920638891	WITHOUT_CLASSIFICATION	1.2950793611083507E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998952316122525	WITHOUT_CLASSIFICATION	1.0476838774760757E-4	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999823812778631	WITHOUT_CLASSIFICATION	1.761872213689795E-5	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999910737609495	WITHOUT_CLASSIFICATION	8.926239050415051E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999919645532003	WITHOUT_CLASSIFICATION	8.035446799672074E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999340325453797	WITHOUT_CLASSIFICATION	6.59674546203477E-5	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999556717542485	WITHOUT_CLASSIFICATION	4.432824575158673E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998988899910836	WITHOUT_CLASSIFICATION	1.0111000891645694E-4	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999421233653673	WITHOUT_CLASSIFICATION	5.787663463288498E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999955659982466	WITHOUT_CLASSIFICATION	4.434001753383889E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999955659982466	WITHOUT_CLASSIFICATION	4.434001753383889E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999878169244285	WITHOUT_CLASSIFICATION	1.2183075571622174E-5	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999715070318905	WITHOUT_CLASSIFICATION	2.8492968109572564E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999956868674937	WITHOUT_CLASSIFICATION	4.313132506311685E-6	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998222377064366	WITHOUT_CLASSIFICATION	1.7776229356344104E-4	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998222377064366	WITHOUT_CLASSIFICATION	1.7776229356344104E-4	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9994217898103865	WITHOUT_CLASSIFICATION	5.782101896135065E-4	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996640620624964	WITHOUT_CLASSIFICATION	3.3593793750358927E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999927082894206	WITHOUT_CLASSIFICATION	7.291710579404909E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999621715851604	WITHOUT_CLASSIFICATION	3.7828414839585546E-5	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999995231995499	WITHOUT_CLASSIFICATION	4.768004501725094E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9984612696545776	WITHOUT_CLASSIFICATION	0.0015387303454224217	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998511410381364	WITHOUT_CLASSIFICATION	1.4885896186355693E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9994824182814349	WITHOUT_CLASSIFICATION	5.175817185650713E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999872174473927	WITHOUT_CLASSIFICATION	1.2782552607220638E-5	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998912163817765	WITHOUT_CLASSIFICATION	1.0878361822355432E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999936422809753	WITHOUT_CLASSIFICATION	6.357719024693366E-5	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997611461083956	WITHOUT_CLASSIFICATION	2.3885389160435472E-4	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998377660609367	WITHOUT_CLASSIFICATION	1.622339390634217E-4	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999723726395967	WITHOUT_CLASSIFICATION	2.762736040327785E-5	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999947281630202	WITHOUT_CLASSIFICATION	5.2718369798293305E-6	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999760627943898	WITHOUT_CLASSIFICATION	2.3937205610273326E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999972091839093	WITHOUT_CLASSIFICATION	2.7908160907251857E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999980544536474	WITHOUT_CLASSIFICATION	1.945546352661305E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999712392089309	WITHOUT_CLASSIFICATION	2.8760791069070915E-5	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993706697676872	WITHOUT_CLASSIFICATION	6.293302323127336E-4	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9967154788917535	WITHOUT_CLASSIFICATION	0.0032845211082464898	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998967154397329	WITHOUT_CLASSIFICATION	1.0328456026703716E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998849332829781	WITHOUT_CLASSIFICATION	1.1506671702186305E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999084852118616	WITHOUT_CLASSIFICATION	9.151478813851256E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999976633934055	WITHOUT_CLASSIFICATION	2.336606594591567E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999307832381074	WITHOUT_CLASSIFICATION	6.921676189265013E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.99923254946023	WITHOUT_CLASSIFICATION	7.674505397699707E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999872097257879	WITHOUT_CLASSIFICATION	1.2790274212076153E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9947300983438906	WITHOUT_CLASSIFICATION	0.005269901656109477	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9994303232161055	WITHOUT_CLASSIFICATION	5.69676783894536E-4	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999976607322089	WITHOUT_CLASSIFICATION	2.3392677910896855E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999862453990367	WITHOUT_CLASSIFICATION	1.3754600963335093E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999636549683262	WITHOUT_CLASSIFICATION	3.63450316737103E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9985171221022316	WITHOUT_CLASSIFICATION	0.0014828778977683044	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999097488987259	WITHOUT_CLASSIFICATION	9.025110127408599E-5	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999265569125472	WITHOUT_CLASSIFICATION	7.344308745282078E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999051638388112	WITHOUT_CLASSIFICATION	9.483616118882636E-5	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999047425522865	WITHOUT_CLASSIFICATION	9.525744771353077E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997127418043676	WITHOUT_CLASSIFICATION	2.872581956322896E-4	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9995730826307696	WITHOUT_CLASSIFICATION	4.2691736923037535E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999651631388466	WITHOUT_CLASSIFICATION	3.483686115346599E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999875158546296	WITHOUT_CLASSIFICATION	1.2484145370399247E-4	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999516413126742	WITHOUT_CLASSIFICATION	4.835868732578735E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999981149345025	WITHOUT_CLASSIFICATION	1.8850654974985832E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999508039943921	WITHOUT_CLASSIFICATION	4.9196005607903134E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9975509856794983	WITHOUT_CLASSIFICATION	0.0024490143205017504	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9989242137373103	WITHOUT_CLASSIFICATION	0.0010757862626896506	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996285542874748	WITHOUT_CLASSIFICATION	3.7144571252524034E-4	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999677066117361	WITHOUT_CLASSIFICATION	3.229338826395049E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998729009648912	WITHOUT_CLASSIFICATION	1.2709903510868046E-4	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999676471468351	WITHOUT_CLASSIFICATION	3.2352853164903116E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999990455127976	WITHOUT_CLASSIFICATION	9.544872023988978E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998391974459341	WITHOUT_CLASSIFICATION	1.608025540658413E-4	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999775454316542	WITHOUT_CLASSIFICATION	2.2454568345857087E-5	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997974868249853	WITHOUT_CLASSIFICATION	2.0251317501461435E-4	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9998237144114327	WITHOUT_CLASSIFICATION	1.7628558856729162E-4	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999176711604593	WITHOUT_CLASSIFICATION	8.232883954070305E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999497173354895	WITHOUT_CLASSIFICATION	5.028266451042878E-5	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998860753505349	WITHOUT_CLASSIFICATION	1.1392464946507146E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9995974086795957	WITHOUT_CLASSIFICATION	4.0259132040423997E-4	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999892765671624	WITHOUT_CLASSIFICATION	1.0723432837579852E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996328755882783	WITHOUT_CLASSIFICATION	3.671244117216901E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999766086630718	WITHOUT_CLASSIFICATION	2.3391336928259032E-5	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999678573017512	WITHOUT_CLASSIFICATION	3.2142698248826155E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999966894410596	WITHOUT_CLASSIFICATION	3.310558940392904E-5	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999848119680508	WITHOUT_CLASSIFICATION	1.5188031949161186E-5	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999974995530414	WITHOUT_CLASSIFICATION	2.500446958631103E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999670539725509	WITHOUT_CLASSIFICATION	3.294602744911021E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998492619322761	WITHOUT_CLASSIFICATION	1.5073806772388963E-4	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999993618197918	WITHOUT_CLASSIFICATION	6.381802082041644E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999782573657439	WITHOUT_CLASSIFICATION	2.1742634256111983E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9993513961316374	WITHOUT_CLASSIFICATION	6.4860386836264E-4	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9996495395338864	WITHOUT_CLASSIFICATION	3.504604661135823E-4	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999938699689698	WITHOUT_CLASSIFICATION	6.130031030222518E-6	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998335861326613	WITHOUT_CLASSIFICATION	1.6641386733865835E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999630226155193	WITHOUT_CLASSIFICATION	3.6977384480688635E-5	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9996792077604519	WITHOUT_CLASSIFICATION	3.207922395480935E-4	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998061171307504	WITHOUT_CLASSIFICATION	1.9388286924965973E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998648426986589	WITHOUT_CLASSIFICATION	1.351573013411327E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999472223355909	WITHOUT_CLASSIFICATION	5.2777664409029604E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999765832934552	WITHOUT_CLASSIFICATION	2.3416706544905594E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999749271287113	WITHOUT_CLASSIFICATION	2.5072871288806728E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991037245547343	WITHOUT_CLASSIFICATION	8.962754452657796E-4	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997559049893996	WITHOUT_CLASSIFICATION	2.440950106004959E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9995855973008633	WITHOUT_CLASSIFICATION	4.1440269913668704E-4	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997719903391805	WITHOUT_CLASSIFICATION	2.2800966081950742E-4	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999523286461539	WITHOUT_CLASSIFICATION	4.7671353846117505E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9982708261695797	WITHOUT_CLASSIFICATION	0.0017291738304202548	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999956513548132	WITHOUT_CLASSIFICATION	4.3486451868018606E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999903123789967	WITHOUT_CLASSIFICATION	9.687621003224208E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999971730665829	WITHOUT_CLASSIFICATION	2.8269334171983844E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999422049824992	WITHOUT_CLASSIFICATION	5.779501750081228E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999619024318042	WITHOUT_CLASSIFICATION	3.809756819596822E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999581515047771	WITHOUT_CLASSIFICATION	4.184849522295834E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998139470405117	WITHOUT_CLASSIFICATION	1.8605295948814497E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998139470405117	WITHOUT_CLASSIFICATION	1.8605295948814497E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999479714186098	WITHOUT_CLASSIFICATION	5.2028581390323976E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.99928190573011	WITHOUT_CLASSIFICATION	7.180942698899289E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999849455386304	WITHOUT_CLASSIFICATION	1.505446136960782E-4	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9976273421392489	WITHOUT_CLASSIFICATION	0.0023726578607512023	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998718002713038	WITHOUT_CLASSIFICATION	1.2819972869617348E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991643371066177	WITHOUT_CLASSIFICATION	8.356628933823541E-4	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999882564878194	WITHOUT_CLASSIFICATION	1.1743512180596026E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999724164586067	WITHOUT_CLASSIFICATION	2.758354139329826E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991719708284841	WITHOUT_CLASSIFICATION	8.280291715158759E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999914994017742	WITHOUT_CLASSIFICATION	8.500598225766465E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9994231989860348	WITHOUT_CLASSIFICATION	5.768010139651516E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999954428822961	WITHOUT_CLASSIFICATION	4.5571177038866526E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999856324138611	WITHOUT_CLASSIFICATION	1.4367586138940245E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997171194436278	WITHOUT_CLASSIFICATION	2.8288055637223724E-4	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999682932042354	WITHOUT_CLASSIFICATION	3.170679576452042E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.996893011835115	WITHOUT_CLASSIFICATION	0.0031069881648849522	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.996893011835115	WITHOUT_CLASSIFICATION	0.0031069881648849522	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999336985890316	WITHOUT_CLASSIFICATION	6.630141096843402E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997135630184862	WITHOUT_CLASSIFICATION	2.864369815137818E-4	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999834609397497	WITHOUT_CLASSIFICATION	1.6539060250339835E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999512103482194	WITHOUT_CLASSIFICATION	4.878965178055322E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999906151184351	WITHOUT_CLASSIFICATION	9.38488156494877E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999891070994138	WITHOUT_CLASSIFICATION	1.0892900586275947E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999891070994138	WITHOUT_CLASSIFICATION	1.0892900586275947E-5	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999920648406755	WITHOUT_CLASSIFICATION	7.935159324493814E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999658879697465	WITHOUT_CLASSIFICATION	3.4112030253627946E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999973564232562	WITHOUT_CLASSIFICATION	2.6435767437909452E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9970911541509286	WITHOUT_CLASSIFICATION	0.002908845849071319	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999737323813555	WITHOUT_CLASSIFICATION	2.6267618644455966E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999696714863252	WITHOUT_CLASSIFICATION	3.032851367486444E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999477043560965	WITHOUT_CLASSIFICATION	5.229564390361758E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999741299805538	WITHOUT_CLASSIFICATION	2.587001944616513E-5	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9952434416325379	WITHOUT_CLASSIFICATION	0.004756558367462104	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994168655707343	WITHOUT_CLASSIFICATION	5.83134429265743E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999468898092667	WITHOUT_CLASSIFICATION	5.311019073339786E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998478079701559	WITHOUT_CLASSIFICATION	1.5219202984409334E-4	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999542518735225	WITHOUT_CLASSIFICATION	4.574812647760013E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999596774190559	WITHOUT_CLASSIFICATION	4.032258094410275E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9988516450603246	WITHOUT_CLASSIFICATION	0.0011483549396753964	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.999955571240646	WITHOUT_CLASSIFICATION	4.4428759353980136E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9944472910605575	WITHOUT_CLASSIFICATION	0.005552708939442435	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997948816702328	WITHOUT_CLASSIFICATION	2.0511832976721775E-4	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998943784154652	WITHOUT_CLASSIFICATION	1.0562158453471991E-4	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998862666340868	WITHOUT_CLASSIFICATION	1.1373336591322943E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999540240250359	WITHOUT_CLASSIFICATION	4.597597496417356E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999722086340825	WITHOUT_CLASSIFICATION	2.779136591735993E-5	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998857597511572	WITHOUT_CLASSIFICATION	1.1424024884275453E-4	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997409555251009	WITHOUT_CLASSIFICATION	2.5904447489904066E-4	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999900612574546	WITHOUT_CLASSIFICATION	9.938742545399838E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999994142470832	WITHOUT_CLASSIFICATION	5.857529167309536E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999007490354271	WITHOUT_CLASSIFICATION	9.925096457284654E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999812071820021	WITHOUT_CLASSIFICATION	1.8792817997875316E-5	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997517954657716	WITHOUT_CLASSIFICATION	2.482045342283677E-4	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9998830883468507	WITHOUT_CLASSIFICATION	1.1691165314938865E-4	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9407670691839635	WITHOUT_CLASSIFICATION	0.059232930816036485	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9951752626804367	WITHOUT_CLASSIFICATION	0.004824737319563306	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999867210923564	WITHOUT_CLASSIFICATION	1.327890764359914E-4	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997058730422095	WITHOUT_CLASSIFICATION	2.941269577904913E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9998927826832239	WITHOUT_CLASSIFICATION	1.072173167759774E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999442876991388	WITHOUT_CLASSIFICATION	5.571230086109642E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999698098343589	WITHOUT_CLASSIFICATION	3.0190165641101137E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995498635506574	WITHOUT_CLASSIFICATION	4.5013644934248533E-4	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999372825034912	WITHOUT_CLASSIFICATION	6.27174965088116E-5	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999765778415582	WITHOUT_CLASSIFICATION	2.3422158441767543E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9970874433825221	WITHOUT_CLASSIFICATION	0.0029125566174780116	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9994243093208327	WITHOUT_CLASSIFICATION	5.756906791672952E-4	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999339301465081	WITHOUT_CLASSIFICATION	6.60698534919597E-5	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994441913305218	WITHOUT_CLASSIFICATION	5.558086694781636E-4	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999698098343589	WITHOUT_CLASSIFICATION	3.0190165641101137E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9995498635506574	WITHOUT_CLASSIFICATION	4.5013644934248533E-4	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993674781133257	WITHOUT_CLASSIFICATION	6.325218866742068E-4	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998645996957704	WITHOUT_CLASSIFICATION	1.3540030422966743E-4	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999984109850394	WITHOUT_CLASSIFICATION	1.589014960618859E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997407977921197	WITHOUT_CLASSIFICATION	2.592022078804027E-4	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998493793852866	WITHOUT_CLASSIFICATION	1.5062061471334033E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9991208761377349	WITHOUT_CLASSIFICATION	8.791238622649985E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999603534198623	WITHOUT_CLASSIFICATION	3.9646580137733235E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9997231134612663	WITHOUT_CLASSIFICATION	2.7688653873368674E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999537790621833	WITHOUT_CLASSIFICATION	4.622093781666672E-5	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999864151627531	WITHOUT_CLASSIFICATION	1.3584837246877919E-5	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9994296927418984	WITHOUT_CLASSIFICATION	5.703072581016107E-4	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999864151627531	WITHOUT_CLASSIFICATION	1.3584837246877919E-5	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9996569237494697	WITHOUT_CLASSIFICATION	3.4307625053038343E-4	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997062989375683	WITHOUT_CLASSIFICATION	2.9370106243157645E-4	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9996569237494697	WITHOUT_CLASSIFICATION	3.4307625053038343E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998292437691462	WITHOUT_CLASSIFICATION	1.7075623085375478E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9928084518780674	WITHOUT_CLASSIFICATION	0.0071915481219324935	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9995993346727368	WITHOUT_CLASSIFICATION	4.0066532726323417E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9995993346727368	WITHOUT_CLASSIFICATION	4.0066532726323417E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997082165746086	WITHOUT_CLASSIFICATION	2.917834253913515E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997092064684081	WITHOUT_CLASSIFICATION	2.907935315918819E-4	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997082165746086	WITHOUT_CLASSIFICATION	2.917834253913515E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999870948505852	WITHOUT_CLASSIFICATION	1.290514941479043E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999464169058175	WITHOUT_CLASSIFICATION	5.358309418246993E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999887504988141	WITHOUT_CLASSIFICATION	1.1249501185893934E-4	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998124408163575	WITHOUT_CLASSIFICATION	1.8755918364253568E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998078059573404	WITHOUT_CLASSIFICATION	1.9219404265963862E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9998890809017636	WITHOUT_CLASSIFICATION	1.1091909823635252E-4	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9994278397620988	WITHOUT_CLASSIFICATION	5.721602379012069E-4	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999608950202494	WITHOUT_CLASSIFICATION	3.9104979750642795E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998173251497853	WITHOUT_CLASSIFICATION	1.826748502146147E-4	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999740293658731	WITHOUT_CLASSIFICATION	2.5970634126864364E-5	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999567589240342	WITHOUT_CLASSIFICATION	4.32410759657243E-5	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996853311526567	WITHOUT_CLASSIFICATION	3.1466884734326174E-4	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999525410004626	WITHOUT_CLASSIFICATION	4.7458999537328826E-5	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999543739119101	WITHOUT_CLASSIFICATION	4.5626088089916356E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998794693490924	WITHOUT_CLASSIFICATION	1.2053065090753155E-4	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997494679712088	WITHOUT_CLASSIFICATION	2.505320287912238E-4	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998782012289824	WITHOUT_CLASSIFICATION	1.2179877101750714E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9997001635236368	WITHOUT_CLASSIFICATION	2.998364763632711E-4	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998540279749072	WITHOUT_CLASSIFICATION	1.4597202509279643E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998819611133272	WITHOUT_CLASSIFICATION	1.1803888667275396E-4	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998949079606344	WITHOUT_CLASSIFICATION	1.0509203936559794E-4	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9988887514545806	WITHOUT_CLASSIFICATION	0.001111248545419457	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9994230021509533	WITHOUT_CLASSIFICATION	5.769978490467396E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.999887504988141	WITHOUT_CLASSIFICATION	1.1249501185893934E-4	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999463630339483	WITHOUT_CLASSIFICATION	5.363696605150729E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999345448978356	WITHOUT_CLASSIFICATION	6.545510216437015E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.998945682904321	WITHOUT_CLASSIFICATION	0.0010543170956791152	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9998876179536291	WITHOUT_CLASSIFICATION	1.1238204637092153E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999824150783075	WITHOUT_CLASSIFICATION	1.7584921692485656E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999888815498155	WITHOUT_CLASSIFICATION	1.111845018454123E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999870948505852	WITHOUT_CLASSIFICATION	1.290514941479043E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999870948505852	WITHOUT_CLASSIFICATION	1.290514941479043E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999260052703844	WITHOUT_CLASSIFICATION	7.399472961563971E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999887177703953	WITHOUT_CLASSIFICATION	1.1282229604615441E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997155711779158	WITHOUT_CLASSIFICATION	2.844288220842051E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999612451632051	WITHOUT_CLASSIFICATION	3.875483679489166E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9983769299364573	WITHOUT_CLASSIFICATION	0.0016230700635426164	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9990095144760059	WITHOUT_CLASSIFICATION	9.904855239940905E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9987124790723618	WITHOUT_CLASSIFICATION	0.001287520927638195	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999679919636008	WITHOUT_CLASSIFICATION	3.200803639932005E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997111280126706	WITHOUT_CLASSIFICATION	2.8887198732934014E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999780008773858	WITHOUT_CLASSIFICATION	2.1999122614193165E-4	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998173251497853	WITHOUT_CLASSIFICATION	1.826748502146147E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999360312134269	WITHOUT_CLASSIFICATION	6.396878657304473E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999780008773858	WITHOUT_CLASSIFICATION	2.1999122614193165E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999606243416956	WITHOUT_CLASSIFICATION	3.937565830437226E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999701512145713	WITHOUT_CLASSIFICATION	2.9848785428586508E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999360272089342	WITHOUT_CLASSIFICATION	6.397279106590213E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9995015487381327	WITHOUT_CLASSIFICATION	4.984512618673789E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996441497508367	WITHOUT_CLASSIFICATION	3.558502491633371E-4	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9992497501169857	WITHOUT_CLASSIFICATION	7.502498830142011E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999774690267581	WITHOUT_CLASSIFICATION	2.2530973241878472E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9997500288524607	WITHOUT_CLASSIFICATION	2.4997114753926703E-4	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999949893377354	WITHOUT_CLASSIFICATION	5.0106622645975E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999473508186848	WITHOUT_CLASSIFICATION	5.264918131514417E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995110279242058	WITHOUT_CLASSIFICATION	4.889720757943454E-4	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999704904486006	WITHOUT_CLASSIFICATION	2.9509551399352076E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999780008773858	WITHOUT_CLASSIFICATION	2.1999122614193165E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996441497508367	WITHOUT_CLASSIFICATION	3.558502491633371E-4	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999774690267581	WITHOUT_CLASSIFICATION	2.2530973241878472E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998045887800384	WITHOUT_CLASSIFICATION	1.9541121996158E-4	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999985505669182	WITHOUT_CLASSIFICATION	1.4494330817948126E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999623447972519	WITHOUT_CLASSIFICATION	3.7655202748047014E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999928493985867	WITHOUT_CLASSIFICATION	7.150601413297148E-5	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999595513449075	WITHOUT_CLASSIFICATION	4.044865509242752E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999444998664573	WITHOUT_CLASSIFICATION	5.5500133542769996E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999606243416956	WITHOUT_CLASSIFICATION	3.937565830437226E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997581529751609	WITHOUT_CLASSIFICATION	2.418470248389866E-4	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999546749917371	WITHOUT_CLASSIFICATION	4.532500826295502E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999576206117677	WITHOUT_CLASSIFICATION	4.237938823224989E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999803678111846	WITHOUT_CLASSIFICATION	1.9632188815317484E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999792305337559	WITHOUT_CLASSIFICATION	2.076946624408794E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.999959240698784	WITHOUT_CLASSIFICATION	4.0759301216152695E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998292437691462	WITHOUT_CLASSIFICATION	1.7075623085375478E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998144276060373	WITHOUT_CLASSIFICATION	1.855723939626948E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999897491240047	WITHOUT_CLASSIFICATION	1.0250875995201221E-5	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.997421728737521	WITHOUT_CLASSIFICATION	0.0025782712624789605	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9979214994878862	WITHOUT_CLASSIFICATION	0.002078500512113853	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9982652396389182	WITHOUT_CLASSIFICATION	0.0017347603610818048	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999665065142609	WITHOUT_CLASSIFICATION	3.3493485739101165E-4	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9998420497395556	WITHOUT_CLASSIFICATION	1.5795026044435103E-4	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997857140104854	WITHOUT_CLASSIFICATION	2.1428598951455632E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999444998664573	WITHOUT_CLASSIFICATION	5.5500133542769996E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998830487283438	WITHOUT_CLASSIFICATION	1.169512716563116E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999938954954664	WITHOUT_CLASSIFICATION	6.104504533603695E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9997599341786673	WITHOUT_CLASSIFICATION	2.400658213326928E-4	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999083919937783	WITHOUT_CLASSIFICATION	9.160800622156795E-5	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995869025903642	WITHOUT_CLASSIFICATION	4.1309740963586756E-4	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998857738405343	WITHOUT_CLASSIFICATION	1.142261594657113E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999529415245568	WITHOUT_CLASSIFICATION	4.7058475443190605E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9936052315379871	WITHOUT_CLASSIFICATION	0.006394768462012877	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999105994449221	WITHOUT_CLASSIFICATION	8.940055507791438E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999529395466014	WITHOUT_CLASSIFICATION	4.706045339869604E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999449234531975	WITHOUT_CLASSIFICATION	5.50765468024855E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997989841708372	WITHOUT_CLASSIFICATION	2.0101582916274438E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999953007492858	WITHOUT_CLASSIFICATION	4.6992507141937616E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999935842844184	WITHOUT_CLASSIFICATION	6.415715581564622E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9993658619035213	WITHOUT_CLASSIFICATION	6.34138096478832E-4	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999941513608733	WITHOUT_CLASSIFICATION	5.848639126637844E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999842262703398	WITHOUT_CLASSIFICATION	1.577372966020085E-5	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9995672929078997	WITHOUT_CLASSIFICATION	4.327070921001845E-4	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999536941003668	WITHOUT_CLASSIFICATION	4.630589963309711E-5	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999466499422935	WITHOUT_CLASSIFICATION	5.335005770649532E-5	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999906569746864	WITHOUT_CLASSIFICATION	9.343025313605249E-5	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999949391803295	WITHOUT_CLASSIFICATION	5.060819670500228E-5	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9679057921459975	WITHOUT_CLASSIFICATION	0.03209420785400258	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999412195745789	WITHOUT_CLASSIFICATION	5.878042542119446E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996852687699159	WITHOUT_CLASSIFICATION	3.1473123008415453E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9996850042559974	WITHOUT_CLASSIFICATION	3.1499574400256685E-4	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9979484858997676	WITHOUT_CLASSIFICATION	0.0020515141002324356	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998342611384549	WITHOUT_CLASSIFICATION	1.6573886154507117E-4	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9984767897840431	WITHOUT_CLASSIFICATION	0.0015232102159569339	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999608467225207	WITHOUT_CLASSIFICATION	3.915327747918395E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999995513875181	WITHOUT_CLASSIFICATION	4.4861248196727403E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996712113236449	WITHOUT_CLASSIFICATION	3.287886763551109E-4	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997759852931116	WITHOUT_CLASSIFICATION	2.240147068884111E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999202510603667	WITHOUT_CLASSIFICATION	7.974893963323009E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9958524725283502	WITHOUT_CLASSIFICATION	0.004147527471649789	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9997759852931116	WITHOUT_CLASSIFICATION	2.240147068884111E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996712113236449	WITHOUT_CLASSIFICATION	3.287886763551109E-4	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999202510603667	WITHOUT_CLASSIFICATION	7.974893963323009E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9997912105419808	WITHOUT_CLASSIFICATION	2.0878945801922625E-4	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999647068390093	WITHOUT_CLASSIFICATION	3.529316099077929E-5	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995950140365358	WITHOUT_CLASSIFICATION	4.0498596346412436E-4	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999208713935203	WITHOUT_CLASSIFICATION	7.912860647975008E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999667850767062	WITHOUT_CLASSIFICATION	3.321492329369156E-5	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9430845840464843	WITHOUT_CLASSIFICATION	0.05691541595351574	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999300506657072	WITHOUT_CLASSIFICATION	6.994933429289171E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996752283344418	WITHOUT_CLASSIFICATION	3.2477166555820573E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999995457445229	WITHOUT_CLASSIFICATION	4.542554771274152E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.997633044279396	WITHOUT_CLASSIFICATION	0.002366955720603935	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999469228764946	WITHOUT_CLASSIFICATION	5.307712350547591E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998805164287212	WITHOUT_CLASSIFICATION	1.194835712787657E-4	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998506081181	WITHOUT_CLASSIFICATION	1.4939188189994144E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998324836469566	WITHOUT_CLASSIFICATION	1.675163530433405E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999981935345921	WITHOUT_CLASSIFICATION	1.806465407907402E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999834435975792	WITHOUT_CLASSIFICATION	1.6556402420783947E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993826727308371	WITHOUT_CLASSIFICATION	6.173272691627999E-4	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999976412567738	WITHOUT_CLASSIFICATION	2.3587432261466335E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997493356606614	WITHOUT_CLASSIFICATION	2.506643393386723E-4	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999509403476069	WITHOUT_CLASSIFICATION	4.905965239313962E-5	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9985682289762579	WITHOUT_CLASSIFICATION	0.001431771023742184	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999989966854126	WITHOUT_CLASSIFICATION	1.0033145873821953E-6	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999905789874116	WITHOUT_CLASSIFICATION	9.421012588394902E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999714300096763	WITHOUT_CLASSIFICATION	2.8569990323766223E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999475958921766	WITHOUT_CLASSIFICATION	5.240410782326516E-5	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999475958921766	WITHOUT_CLASSIFICATION	5.240410782326516E-5	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999904585687157	WITHOUT_CLASSIFICATION	9.541431284331408E-6	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999904585687157	WITHOUT_CLASSIFICATION	9.541431284331408E-6	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9996839481326062	WITHOUT_CLASSIFICATION	3.1605186739376123E-4	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993826727308371	WITHOUT_CLASSIFICATION	6.173272691627999E-4	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999628894082604	WITHOUT_CLASSIFICATION	3.711059173961057E-5	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999678795919592	WITHOUT_CLASSIFICATION	3.2120408040815225E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999916213320913	WITHOUT_CLASSIFICATION	8.378667908708377E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999916213320913	WITHOUT_CLASSIFICATION	8.378667908708377E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999623404884997	WITHOUT_CLASSIFICATION	3.765951150028285E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998924231038211	WITHOUT_CLASSIFICATION	1.0757689617890692E-4	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999589284034225	WITHOUT_CLASSIFICATION	4.107159657744711E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999822628508244	WITHOUT_CLASSIFICATION	1.773714917560836E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993615183414318	WITHOUT_CLASSIFICATION	6.38481658568275E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9998855391203142	WITHOUT_CLASSIFICATION	1.1446087968577932E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998596017730469	WITHOUT_CLASSIFICATION	1.4039822695310238E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9997866701058449	WITHOUT_CLASSIFICATION	2.1332989415517268E-4	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999342314370614	WITHOUT_CLASSIFICATION	6.576856293858776E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9987909235185047	WITHOUT_CLASSIFICATION	0.0012090764814952366	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999477751470168	WITHOUT_CLASSIFICATION	5.222485298308926E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999207284688827	WITHOUT_CLASSIFICATION	7.927153111730122E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999292865761938	WITHOUT_CLASSIFICATION	7.071342380618567E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999364698303417	WITHOUT_CLASSIFICATION	6.353016965840904E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999069122611147	WITHOUT_CLASSIFICATION	9.308773888534497E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998631280502729	WITHOUT_CLASSIFICATION	1.3687194972714857E-4	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999008347485351	WITHOUT_CLASSIFICATION	9.916525146497702E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999471505082475	WITHOUT_CLASSIFICATION	5.284949175260338E-5	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.99994638157342	WITHOUT_CLASSIFICATION	5.361842658004551E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9979679339849967	WITHOUT_CLASSIFICATION	0.0020320660150032564	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999949150117964	WITHOUT_CLASSIFICATION	5.084988203594109E-5	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9974588790208502	WITHOUT_CLASSIFICATION	0.002541120979149858	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999012873393452	WITHOUT_CLASSIFICATION	9.871266065479655E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999619547239407	WITHOUT_CLASSIFICATION	3.8045276059314825E-5	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999677844891099	WITHOUT_CLASSIFICATION	3.221551089010556E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997583559570308	WITHOUT_CLASSIFICATION	2.4164404296914637E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999529395466014	WITHOUT_CLASSIFICATION	4.706045339869604E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998484110082487	WITHOUT_CLASSIFICATION	1.5158899175128328E-4	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9985431851921511	WITHOUT_CLASSIFICATION	0.0014568148078488022	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998498553466298	WITHOUT_CLASSIFICATION	1.5014465337022409E-4	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998484607842841	WITHOUT_CLASSIFICATION	1.5153921571592666E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998872739702472	WITHOUT_CLASSIFICATION	1.1272602975275758E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998872739702472	WITHOUT_CLASSIFICATION	1.1272602975275758E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999765975967945	WITHOUT_CLASSIFICATION	2.340240320557222E-5	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999706318602782	WITHOUT_CLASSIFICATION	2.936813972182126E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.999961129828429	WITHOUT_CLASSIFICATION	3.8870171571035915E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.999961129828429	WITHOUT_CLASSIFICATION	3.8870171571035915E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996692548463215	WITHOUT_CLASSIFICATION	3.30745153678423E-4	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994061365828265	WITHOUT_CLASSIFICATION	5.938634171735473E-4	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9988222880103039	WITHOUT_CLASSIFICATION	0.0011777119896960498	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999150802089704	WITHOUT_CLASSIFICATION	8.491979102963401E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998942074088022	WITHOUT_CLASSIFICATION	1.0579259119780454E-4	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998569628928641	WITHOUT_CLASSIFICATION	1.4303710713593792E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999967388263605	WITHOUT_CLASSIFICATION	3.261173639502027E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999348313296074	WITHOUT_CLASSIFICATION	6.516867039265207E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999348313296074	WITHOUT_CLASSIFICATION	6.516867039265207E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999975233743867	WITHOUT_CLASSIFICATION	2.4766256132962194E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999227136861679	WITHOUT_CLASSIFICATION	7.728631383215179E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999227136861679	WITHOUT_CLASSIFICATION	7.728631383215179E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999635811547839	WITHOUT_CLASSIFICATION	3.641884521602138E-5	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999499975598519	WITHOUT_CLASSIFICATION	5.0002440148104365E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999862111683842	WITHOUT_CLASSIFICATION	1.3788831616001327E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999984782832272	WITHOUT_CLASSIFICATION	1.5217167727947967E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999648530080253	WITHOUT_CLASSIFICATION	3.514699197467857E-5	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9961624993829034	WITHOUT_CLASSIFICATION	0.0038375006170966027	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9995201902664826	WITHOUT_CLASSIFICATION	4.798097335174127E-4	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998728624001179	WITHOUT_CLASSIFICATION	1.2713759988214224E-4	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9986676444841482	WITHOUT_CLASSIFICATION	0.0013323555158516838	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974705851016298	WITHOUT_CLASSIFICATION	0.0025294148983701966	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999671233880735	WITHOUT_CLASSIFICATION	3.287661192648959E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998831979556921	WITHOUT_CLASSIFICATION	1.168020443078422E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998831979556921	WITHOUT_CLASSIFICATION	1.168020443078422E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998831979556921	WITHOUT_CLASSIFICATION	1.168020443078422E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998831979556921	WITHOUT_CLASSIFICATION	1.168020443078422E-4	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999264222281448	WITHOUT_CLASSIFICATION	7.357777185514773E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9959424435926447	WITHOUT_CLASSIFICATION	0.004057556407355186	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.99991839468918	WITHOUT_CLASSIFICATION	8.160531082003535E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998865209692451	WITHOUT_CLASSIFICATION	1.1347903075481973E-4	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9987678711242648	WITHOUT_CLASSIFICATION	0.0012321288757351511	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999327689744962	WITHOUT_CLASSIFICATION	6.72310255038219E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997711705339096	WITHOUT_CLASSIFICATION	2.2882946609035642E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998756219521212	WITHOUT_CLASSIFICATION	1.2437804787867522E-4	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999161800094344	WITHOUT_CLASSIFICATION	8.381999056570874E-5	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999601433923913	WITHOUT_CLASSIFICATION	3.985660760870713E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999148940231933	WITHOUT_CLASSIFICATION	8.510597680659314E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9994722472728663	WITHOUT_CLASSIFICATION	5.27752727133615E-4	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998690890129599	WITHOUT_CLASSIFICATION	1.3091098704002565E-4	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999940762469942	WITHOUT_CLASSIFICATION	5.923753005828911E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999148940231933	WITHOUT_CLASSIFICATION	8.510597680659314E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999954927801128	WITHOUT_CLASSIFICATION	4.507219887193116E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997308322369113	WITHOUT_CLASSIFICATION	2.691677630887009E-4	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999964312090344	WITHOUT_CLASSIFICATION	3.568790965561193E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999726959657689	WITHOUT_CLASSIFICATION	2.7304034231100653E-4	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999834746562191	WITHOUT_CLASSIFICATION	1.6525343780893038E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9986931285067153	WITHOUT_CLASSIFICATION	0.0013068714932846848	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999825773997528	WITHOUT_CLASSIFICATION	1.7422600247093034E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999353837969404	WITHOUT_CLASSIFICATION	6.4616203059632E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757683720559	WITHOUT_CLASSIFICATION	2.4231627944074274E-5	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998690818761924	WITHOUT_CLASSIFICATION	1.3091812380755337E-4	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757683720559	WITHOUT_CLASSIFICATION	2.4231627944074274E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998951570798087	WITHOUT_CLASSIFICATION	1.0484292019137622E-4	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9968950891469309	WITHOUT_CLASSIFICATION	0.003104910853069142	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998330130295154	WITHOUT_CLASSIFICATION	1.669869704845891E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997855830610745	WITHOUT_CLASSIFICATION	2.1441693892548726E-4	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999727770866917	WITHOUT_CLASSIFICATION	2.7222913308299663E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948952686107	WITHOUT_CLASSIFICATION	5.10473138923474E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999063007941075	WITHOUT_CLASSIFICATION	9.369920589261429E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999155433466053	WITHOUT_CLASSIFICATION	8.44566533947672E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999063007941075	WITHOUT_CLASSIFICATION	9.369920589261429E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998977595264242	WITHOUT_CLASSIFICATION	1.0224047357572968E-4	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999812017212076	WITHOUT_CLASSIFICATION	1.8798278792329007E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999613894292515	WITHOUT_CLASSIFICATION	3.861057074840684E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999836659180983	WITHOUT_CLASSIFICATION	1.6334081901644148E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948952686107	WITHOUT_CLASSIFICATION	5.10473138923474E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999155433466053	WITHOUT_CLASSIFICATION	8.44566533947672E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998977595264242	WITHOUT_CLASSIFICATION	1.0224047357572968E-4	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999545592419914	WITHOUT_CLASSIFICATION	4.5440758008571234E-5	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9998936371232972	WITHOUT_CLASSIFICATION	1.0636287670284766E-4	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9996896115048527	WITHOUT_CLASSIFICATION	3.1038849514728687E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998540644289081	WITHOUT_CLASSIFICATION	1.4593557109184946E-4	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998175664384098	WITHOUT_CLASSIFICATION	1.8243356159018732E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999609014507197	WITHOUT_CLASSIFICATION	3.909854928026797E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999008347485351	WITHOUT_CLASSIFICATION	9.916525146497702E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999812017212076	WITHOUT_CLASSIFICATION	1.8798278792329007E-5	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999547811182138	WITHOUT_CLASSIFICATION	4.521888178618838E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9994118455076103	WITHOUT_CLASSIFICATION	5.881544923896413E-4	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999628970302491	WITHOUT_CLASSIFICATION	3.710296975093785E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999008347485351	WITHOUT_CLASSIFICATION	9.916525146497702E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999106417730568	WITHOUT_CLASSIFICATION	8.93582269433012E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999008347485351	WITHOUT_CLASSIFICATION	9.916525146497702E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999873287715202	WITHOUT_CLASSIFICATION	1.2671228479933194E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999145057606257	WITHOUT_CLASSIFICATION	8.549423937435036E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998511577161401	WITHOUT_CLASSIFICATION	1.4884228385982483E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999762244895865	WITHOUT_CLASSIFICATION	2.3775510413587743E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999809005197663	WITHOUT_CLASSIFICATION	1.9099480233667877E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999251056174839	WITHOUT_CLASSIFICATION	7.489438251601873E-5	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999465523274899	WITHOUT_CLASSIFICATION	5.344767251024582E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997474085652391	WITHOUT_CLASSIFICATION	2.525914347608753E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999787806243498	WITHOUT_CLASSIFICATION	2.1219375650192096E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.999826539305451	WITHOUT_CLASSIFICATION	1.7346069454909893E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998454784447487	WITHOUT_CLASSIFICATION	1.5452155525134625E-4	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998262377660774	WITHOUT_CLASSIFICATION	1.7376223392267956E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9648314854151832	WITHOUT_CLASSIFICATION	0.03516851458481684	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998322909622381	WITHOUT_CLASSIFICATION	1.6770903776193457E-4	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9993625550042665	WITHOUT_CLASSIFICATION	6.374449957335845E-4	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999972571096032	WITHOUT_CLASSIFICATION	2.742890396876249E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999776621887739	WITHOUT_CLASSIFICATION	2.233781122608156E-5	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9995956157975192	WITHOUT_CLASSIFICATION	4.043842024808528E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999894696688163	WITHOUT_CLASSIFICATION	1.0530331183652482E-5	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997526438705696	WITHOUT_CLASSIFICATION	2.473561294303871E-4	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994068905915748	WITHOUT_CLASSIFICATION	5.931094084252138E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994068905915748	WITHOUT_CLASSIFICATION	5.931094084252138E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999980778409752	WITHOUT_CLASSIFICATION	1.9221590248018794E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9997666662329089	WITHOUT_CLASSIFICATION	2.3333376709118195E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995677767772095	WITHOUT_CLASSIFICATION	4.3222322279044476E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999895981284629	WITHOUT_CLASSIFICATION	1.0401871537121793E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996919048919028	WITHOUT_CLASSIFICATION	3.080951080971131E-4	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999173523645194	WITHOUT_CLASSIFICATION	8.26476354806053E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.99987069111334	WITHOUT_CLASSIFICATION	1.2930888666000436E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9981794057498157	WITHOUT_CLASSIFICATION	0.0018205942501843978	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9932063326732419	WITHOUT_CLASSIFICATION	0.006793667326758183	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999439925035581	WITHOUT_CLASSIFICATION	5.600749644180714E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998014689455889	WITHOUT_CLASSIFICATION	1.9853105441115272E-4	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9996846469809438	WITHOUT_CLASSIFICATION	3.1535301905609594E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998674611213392	WITHOUT_CLASSIFICATION	1.325388786608077E-4	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999535235499101	WITHOUT_CLASSIFICATION	4.6476450089905064E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999995049899828	WITHOUT_CLASSIFICATION	4.950100172033837E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996923732900853	WITHOUT_CLASSIFICATION	3.076267099147057E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999913605544557	WITHOUT_CLASSIFICATION	8.639445544303119E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.999913605544557	WITHOUT_CLASSIFICATION	8.639445544303119E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999963255039806	WITHOUT_CLASSIFICATION	3.674496019395948E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997474085652391	WITHOUT_CLASSIFICATION	2.525914347608753E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989962487930701	WITHOUT_CLASSIFICATION	0.0010037512069299317	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999793737359234	WITHOUT_CLASSIFICATION	2.062626407661121E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998697859619959	WITHOUT_CLASSIFICATION	1.3021403800403953E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997050984259244	WITHOUT_CLASSIFICATION	2.949015740756791E-4	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999155869381523	WITHOUT_CLASSIFICATION	8.441306184768791E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9995808941765464	WITHOUT_CLASSIFICATION	4.191058234536176E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999701568223727	WITHOUT_CLASSIFICATION	2.9843177627450104E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998833938125082	WITHOUT_CLASSIFICATION	1.1660618749181091E-4	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999858052459379	WITHOUT_CLASSIFICATION	1.4194754061919407E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999285887500249	WITHOUT_CLASSIFICATION	7.141124997504824E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999508906799759	WITHOUT_CLASSIFICATION	4.910932002412677E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998820091159508	WITHOUT_CLASSIFICATION	1.1799088404913528E-4	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998669356321	WITHOUT_CLASSIFICATION	1.3306436780639063E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999030655824805	WITHOUT_CLASSIFICATION	9.693441751946477E-5	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999813818137638	WITHOUT_CLASSIFICATION	1.8618186236110924E-5	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999938713417659	WITHOUT_CLASSIFICATION	6.128658234156217E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999846071080897	WITHOUT_CLASSIFICATION	1.5392891910305395E-4	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999992934421701	WITHOUT_CLASSIFICATION	7.06557829960228E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995749140400121	WITHOUT_CLASSIFICATION	4.2508595998786574E-4	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999432839163677	WITHOUT_CLASSIFICATION	5.67160836323267E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9927347185999202	WITHOUT_CLASSIFICATION	0.00726528140007976	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999797043625415	WITHOUT_CLASSIFICATION	2.0295637458596357E-5	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999596241094274	WITHOUT_CLASSIFICATION	4.0375890572567025E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998135726209287	WITHOUT_CLASSIFICATION	1.8642737907138642E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9992339571837906	WITHOUT_CLASSIFICATION	7.660428162094598E-4	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996916404470036	WITHOUT_CLASSIFICATION	3.083595529962966E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999826061678555	WITHOUT_CLASSIFICATION	1.739383214448353E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9965166972549095	WITHOUT_CLASSIFICATION	0.0034833027450904453	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998504226536283	WITHOUT_CLASSIFICATION	1.4957734637167437E-4	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998798794076367	WITHOUT_CLASSIFICATION	1.2012059236328927E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998702364793591	WITHOUT_CLASSIFICATION	1.2976352064089915E-4	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997956817283709	WITHOUT_CLASSIFICATION	2.043182716291472E-4	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.998976250970176	WITHOUT_CLASSIFICATION	0.0010237490298240606	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9982137978320114	WITHOUT_CLASSIFICATION	0.0017862021679886095	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9236621499468605	WITHOUT_CLASSIFICATION	0.07633785005313959	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999950942596258	WITHOUT_CLASSIFICATION	4.905740374197766E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999950942596258	WITHOUT_CLASSIFICATION	4.905740374197766E-5	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999605838045492	WITHOUT_CLASSIFICATION	3.94161954507463E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999761470841038	WITHOUT_CLASSIFICATION	2.3852915896150658E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999466061568911	WITHOUT_CLASSIFICATION	5.339384310894001E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999466061568911	WITHOUT_CLASSIFICATION	5.339384310894001E-5	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999909148247866	WITHOUT_CLASSIFICATION	9.085175213462527E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999473509901742	WITHOUT_CLASSIFICATION	5.264900982586288E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999391772685184	WITHOUT_CLASSIFICATION	6.082273148157514E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999982314516693	WITHOUT_CLASSIFICATION	1.7685483305791517E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998551248982105	WITHOUT_CLASSIFICATION	1.448751017895639E-4	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999088400762218	WITHOUT_CLASSIFICATION	9.11599237780688E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999088400762218	WITHOUT_CLASSIFICATION	9.11599237780688E-5	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9998468065732008	WITHOUT_CLASSIFICATION	1.5319342679920737E-4	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999870948505852	WITHOUT_CLASSIFICATION	1.290514941479043E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999445036398292	WITHOUT_CLASSIFICATION	5.5496360170735005E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999445036398292	WITHOUT_CLASSIFICATION	5.5496360170735005E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999678034881767	WITHOUT_CLASSIFICATION	3.219651182320862E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999650996660535	WITHOUT_CLASSIFICATION	3.490033394653727E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999299518155206	WITHOUT_CLASSIFICATION	7.004818447937743E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999915838186171	WITHOUT_CLASSIFICATION	8.41618138295278E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999813801203554	WITHOUT_CLASSIFICATION	1.8619879644601658E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.99995020923982	WITHOUT_CLASSIFICATION	4.979076018002936E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999918586757105	WITHOUT_CLASSIFICATION	8.1413242894961E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999829721245516	WITHOUT_CLASSIFICATION	1.702787544838893E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999971514257723	WITHOUT_CLASSIFICATION	2.848574227751592E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999105212694978	WITHOUT_CLASSIFICATION	8.947873050225482E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998656661699458	WITHOUT_CLASSIFICATION	1.3433383005431406E-4	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9979322339080378	WITHOUT_CLASSIFICATION	0.0020677660919622164	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999600636877122	WITHOUT_CLASSIFICATION	3.993631228793216E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.99995664800604	WITHOUT_CLASSIFICATION	4.335199396001815E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999504903458627	WITHOUT_CLASSIFICATION	4.950965413729501E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999644632654083	WITHOUT_CLASSIFICATION	3.553673459170073E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998903379578092	WITHOUT_CLASSIFICATION	1.0966204219083947E-4	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997190761123531	WITHOUT_CLASSIFICATION	2.809238876469014E-4	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999607414617951	WITHOUT_CLASSIFICATION	3.925853820497153E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997630349896761	WITHOUT_CLASSIFICATION	2.369650103238098E-4	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996301994240767	WITHOUT_CLASSIFICATION	3.698005759231954E-4	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999120974916822	WITHOUT_CLASSIFICATION	8.790250831782616E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999594025576745	WITHOUT_CLASSIFICATION	4.05974423255357E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9992294987150159	WITHOUT_CLASSIFICATION	7.705012849841609E-4	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9995675857260656	WITHOUT_CLASSIFICATION	4.3241427393438694E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999345325105435	WITHOUT_CLASSIFICATION	6.54674894564295E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999580208874731	WITHOUT_CLASSIFICATION	4.1979112526868715E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999992903083463	WITHOUT_CLASSIFICATION	7.096916536794167E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999810748322698	WITHOUT_CLASSIFICATION	1.892516773021105E-5	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999963980516389	WITHOUT_CLASSIFICATION	3.6019483612128964E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999791907628365	WITHOUT_CLASSIFICATION	2.0809237163428324E-5	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999834511254758	WITHOUT_CLASSIFICATION	1.6548874524193152E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999961008813492	WITHOUT_CLASSIFICATION	3.899118650849605E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998702050997407	WITHOUT_CLASSIFICATION	1.2979490025933756E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.99988409235377	WITHOUT_CLASSIFICATION	1.159076462300284E-4	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999118425440306	WITHOUT_CLASSIFICATION	8.815745596936299E-5	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998875984321686	WITHOUT_CLASSIFICATION	1.1240156783143253E-4	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9990438620120811	WITHOUT_CLASSIFICATION	9.561379879189652E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999568831636593	WITHOUT_CLASSIFICATION	4.311683634068611E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999751318229536	WITHOUT_CLASSIFICATION	2.4868177046401048E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.999883815234116	WITHOUT_CLASSIFICATION	1.1618476588415919E-4	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999474938177675	WITHOUT_CLASSIFICATION	5.250618223259937E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9992150030116447	WITHOUT_CLASSIFICATION	7.849969883553858E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999810421921721	WITHOUT_CLASSIFICATION	1.8957807827922026E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998975127213588	WITHOUT_CLASSIFICATION	1.0248727864115755E-4	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999529698074651	WITHOUT_CLASSIFICATION	4.703019253502346E-5	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998522502364814	WITHOUT_CLASSIFICATION	1.4774976351852913E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999913213273092	WITHOUT_CLASSIFICATION	8.678672690872348E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999722694140747	WITHOUT_CLASSIFICATION	2.7730585925311406E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999890928486145	WITHOUT_CLASSIFICATION	1.090715138546063E-5	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996933534968567	WITHOUT_CLASSIFICATION	3.0664650314330815E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999602151352692	WITHOUT_CLASSIFICATION	3.978486473072369E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9986191239588509	WITHOUT_CLASSIFICATION	0.001380876041149114	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999474013404145	WITHOUT_CLASSIFICATION	5.259865958564379E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9990446044589267	WITHOUT_CLASSIFICATION	9.553955410732806E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999842823692867	WITHOUT_CLASSIFICATION	1.5717630713360224E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999758511114681	WITHOUT_CLASSIFICATION	2.4148888531865238E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999758511114681	WITHOUT_CLASSIFICATION	2.4148888531865238E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999909122536739	WITHOUT_CLASSIFICATION	9.087746326255756E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999525903273563	WITHOUT_CLASSIFICATION	4.740967264370383E-4	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999880180093279	WITHOUT_CLASSIFICATION	1.1981990672129926E-5	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999702539672898	WITHOUT_CLASSIFICATION	2.9746032710224858E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999693988405649	WITHOUT_CLASSIFICATION	3.06011594350111E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997355448050659	WITHOUT_CLASSIFICATION	2.6445519493415164E-4	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999994229839906	WITHOUT_CLASSIFICATION	5.7701600939056275E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999596737097507	WITHOUT_CLASSIFICATION	4.0326290249343934E-5	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9997280945013594	WITHOUT_CLASSIFICATION	2.7190549864062897E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999734608763646	WITHOUT_CLASSIFICATION	2.653912363527422E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999706240612803	WITHOUT_CLASSIFICATION	2.937593871966209E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9956607581254512	WITHOUT_CLASSIFICATION	0.004339241874548743	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999995518601854	WITHOUT_CLASSIFICATION	4.481398145599539E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999994918686049	WITHOUT_CLASSIFICATION	5.081313949796718E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995061367320397	WITHOUT_CLASSIFICATION	4.93863267960262E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995061367320397	WITHOUT_CLASSIFICATION	4.93863267960262E-4	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999148437416808	WITHOUT_CLASSIFICATION	8.515625831919828E-5	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999278933902302	WITHOUT_CLASSIFICATION	7.210660976979049E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998614908656234	WITHOUT_CLASSIFICATION	1.3850913437658314E-4	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999772922831789	WITHOUT_CLASSIFICATION	2.2707716821094037E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999991444696339	WITHOUT_CLASSIFICATION	8.555303661000913E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999191496621282	WITHOUT_CLASSIFICATION	8.085033787180244E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998419902389037	WITHOUT_CLASSIFICATION	1.5800976109631504E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.997191211354515	WITHOUT_CLASSIFICATION	0.0028087886454849532	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999998128806281	WITHOUT_CLASSIFICATION	1.8711937189751973E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999571023068252	WITHOUT_CLASSIFICATION	4.2897693174694076E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999701112022824	WITHOUT_CLASSIFICATION	2.988879771768436E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998592011124013	WITHOUT_CLASSIFICATION	1.4079888759872727E-4	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999860354716923	WITHOUT_CLASSIFICATION	1.3964528307655304E-5	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999612982985362	WITHOUT_CLASSIFICATION	3.8701701463838086E-5	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998761922051002	WITHOUT_CLASSIFICATION	1.238077948998662E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998918366332724	WITHOUT_CLASSIFICATION	1.0816336672761659E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999885998852448	WITHOUT_CLASSIFICATION	1.1400114755164727E-5	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999873269804315	WITHOUT_CLASSIFICATION	1.2673019568505817E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999963781911732	WITHOUT_CLASSIFICATION	3.6218088267971794E-5	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999748441655596	WITHOUT_CLASSIFICATION	2.5155834440338067E-5	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999338387972667	WITHOUT_CLASSIFICATION	6.61612027332236E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999920911006605	WITHOUT_CLASSIFICATION	7.908899339549602E-6	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999866496824672	WITHOUT_CLASSIFICATION	1.335031753273967E-5	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998823868340926	WITHOUT_CLASSIFICATION	1.1761316590738164E-4	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997874822283151	WITHOUT_CLASSIFICATION	2.125177716848352E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999179828368595	WITHOUT_CLASSIFICATION	8.201716314040931E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999325018854063	WITHOUT_CLASSIFICATION	6.749811459365024E-5	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997339340106418	WITHOUT_CLASSIFICATION	2.6606598935817894E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9996389132330964	WITHOUT_CLASSIFICATION	3.610867669036537E-4	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9997152847033811	WITHOUT_CLASSIFICATION	2.8471529661887204E-4	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997948842235537	WITHOUT_CLASSIFICATION	2.05115776446196E-4	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999664960346418	WITHOUT_CLASSIFICATION	3.35039653581853E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999928837095097	WITHOUT_CLASSIFICATION	7.116290490396279E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996939537397591	WITHOUT_CLASSIFICATION	3.060462602409227E-4	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999660948033952	WITHOUT_CLASSIFICATION	3.3905196604788596E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998641528739762	WITHOUT_CLASSIFICATION	1.3584712602364142E-4	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999800630059312	WITHOUT_CLASSIFICATION	1.993699406874402E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997801632372052	WITHOUT_CLASSIFICATION	2.1983676279467364E-4	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998465434046357	WITHOUT_CLASSIFICATION	1.53456595364161E-4	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999937723106318	WITHOUT_CLASSIFICATION	6.227689368216347E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9822007336059715	WITHOUT_CLASSIFICATION	0.017799266394028568	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9822007336059715	WITHOUT_CLASSIFICATION	0.017799266394028568	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999906933887525	WITHOUT_CLASSIFICATION	9.30661124755902E-6	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8264503766192105	WITHOUT_CLASSIFICATION	0.17354962338078955	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999862819260604	WITHOUT_CLASSIFICATION	1.371807393958768E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999675085938831	WITHOUT_CLASSIFICATION	3.2491406116979446E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9997625705429308	WITHOUT_CLASSIFICATION	2.374294570691825E-4	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999033948381992	WITHOUT_CLASSIFICATION	9.660516180080831E-4	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999744370142445	WITHOUT_CLASSIFICATION	2.556298575542603E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999677210507389	WITHOUT_CLASSIFICATION	3.2278949261105365E-4	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9970545407393737	WITHOUT_CLASSIFICATION	0.0029454592606263427	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997930843499773	WITHOUT_CLASSIFICATION	2.0691565002268795E-4	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991698364856	WITHOUT_CLASSIFICATION	1.0083016351439215E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9985967536546111	WITHOUT_CLASSIFICATION	0.0014032463453889376	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999370069063485	WITHOUT_CLASSIFICATION	6.299309365149266E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999497635427931	WITHOUT_CLASSIFICATION	5.023645720689584E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9995287312440164	WITHOUT_CLASSIFICATION	4.712687559835247E-4	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999782341337599	WITHOUT_CLASSIFICATION	2.1765866240106398E-4	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999739520441202	WITHOUT_CLASSIFICATION	2.6047955879750597E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999061229910753	WITHOUT_CLASSIFICATION	9.387700892470995E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994939612074668	WITHOUT_CLASSIFICATION	5.060387925331718E-4	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9936487117880812	WITHOUT_CLASSIFICATION	0.006351288211918773	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998940391199294	WITHOUT_CLASSIFICATION	1.0596088007067146E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999993968313339	WITHOUT_CLASSIFICATION	6.031686661023482E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999949631737123	WITHOUT_CLASSIFICATION	5.0368262877556135E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998297386462922	WITHOUT_CLASSIFICATION	1.7026135370792867E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995934500248075	WITHOUT_CLASSIFICATION	4.0654997519250224E-4	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999935792530452	WITHOUT_CLASSIFICATION	6.420746954802399E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997529268919986	WITHOUT_CLASSIFICATION	2.470731080014693E-4	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9931109287136752	WITHOUT_CLASSIFICATION	0.006889071286324822	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999639130994716	WITHOUT_CLASSIFICATION	3.608690052838765E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9993578176802488	WITHOUT_CLASSIFICATION	6.421823197510984E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999963952346731	WITHOUT_CLASSIFICATION	3.6047653269054808E-6	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999600077252465	WITHOUT_CLASSIFICATION	3.999227475345604E-5	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9998559608803554	WITHOUT_CLASSIFICATION	1.4403911964449645E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998211555688447	WITHOUT_CLASSIFICATION	1.7884443115529793E-4	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999304033422622	WITHOUT_CLASSIFICATION	6.959665773779995E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996183299185772	WITHOUT_CLASSIFICATION	3.8167008142268513E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999229790095769	WITHOUT_CLASSIFICATION	7.702099042302681E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999990633446059	WITHOUT_CLASSIFICATION	9.366553941022096E-6	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999577226567525	WITHOUT_CLASSIFICATION	4.227734324735519E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999456894216435	WITHOUT_CLASSIFICATION	5.4310578356505937E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999851492014954	WITHOUT_CLASSIFICATION	1.4850798504588645E-4	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9993960246439423	WITHOUT_CLASSIFICATION	6.039753560577659E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999949103784921	WITHOUT_CLASSIFICATION	5.089621507902624E-5	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999960506199419	WITHOUT_CLASSIFICATION	3.949380058081213E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999251028024	WITHOUT_CLASSIFICATION	7.489719758864951E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996005030166574	WITHOUT_CLASSIFICATION	3.9949698334273466E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997573826197337	WITHOUT_CLASSIFICATION	2.4261738026626857E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999995518601854	WITHOUT_CLASSIFICATION	4.481398145599539E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9997999912206631	WITHOUT_CLASSIFICATION	2.0000877933680416E-4	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999941905960613	WITHOUT_CLASSIFICATION	5.809403938680866E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998116761741309	WITHOUT_CLASSIFICATION	1.8832382586912106E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999076763645578	WITHOUT_CLASSIFICATION	9.232363544217284E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999977167992113	WITHOUT_CLASSIFICATION	2.2832007886790688E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9988739782273884	WITHOUT_CLASSIFICATION	0.0011260217726115475	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9995982725409621	WITHOUT_CLASSIFICATION	4.017274590378443E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7215576255775671	WITHOUT_CLASSIFICATION	0.2784423744224328	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999919645532003	WITHOUT_CLASSIFICATION	8.035446799672074E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995600403415713	WITHOUT_CLASSIFICATION	4.3995965842866523E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9799220242567478	WITHOUT_CLASSIFICATION	0.020077975743252208	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9985826563950412	WITHOUT_CLASSIFICATION	0.0014173436049587718	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999873076042933	WITHOUT_CLASSIFICATION	1.2692395706706736E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9992773174771681	WITHOUT_CLASSIFICATION	7.226825228319826E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998319834665977	WITHOUT_CLASSIFICATION	1.680165334021799E-4	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9997223009081646	WITHOUT_CLASSIFICATION	2.7769909183530467E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999968804210763	WITHOUT_CLASSIFICATION	3.1195789237170698E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9990163354914958	WITHOUT_CLASSIFICATION	9.836645085041418E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998319834665977	WITHOUT_CLASSIFICATION	1.680165334021799E-4	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999192725502309	WITHOUT_CLASSIFICATION	8.072744976909342E-4	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999752930906123	WITHOUT_CLASSIFICATION	2.4706909387661573E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999913967127477	WITHOUT_CLASSIFICATION	8.603287252321243E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9983041471740034	WITHOUT_CLASSIFICATION	0.0016958528259966251	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999073703621674	WITHOUT_CLASSIFICATION	9.262963783268119E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9974731280964482	WITHOUT_CLASSIFICATION	0.002526871903551862	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999985171941643	WITHOUT_CLASSIFICATION	1.4828058357016318E-5	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999664417185209	WITHOUT_CLASSIFICATION	3.355828147913482E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999920264432414	WITHOUT_CLASSIFICATION	7.973556758651436E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9882867378925642	WITHOUT_CLASSIFICATION	0.01171326210743579	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996561441914061	WITHOUT_CLASSIFICATION	3.438558085939263E-4	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9922184696861857	WITHOUT_CLASSIFICATION	0.007781530313814391	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999210006150394	WITHOUT_CLASSIFICATION	7.899938496059551E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999809628403075	WITHOUT_CLASSIFICATION	1.90371596925389E-5	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999869867159416	WITHOUT_CLASSIFICATION	1.3013284058401484E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9927347185999202	WITHOUT_CLASSIFICATION	0.00726528140007976	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9977322664109632	WITHOUT_CLASSIFICATION	0.0022677335890368	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999749545356376	WITHOUT_CLASSIFICATION	2.504546436242359E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995256381168315	WITHOUT_CLASSIFICATION	4.7436188316845766E-4	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9962913155008652	WITHOUT_CLASSIFICATION	0.0037086844991346393	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999926382132241	WITHOUT_CLASSIFICATION	7.36178677577668E-6	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999672389027917	WITHOUT_CLASSIFICATION	3.276109720832831E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9979091340172914	WITHOUT_CLASSIFICATION	0.0020908659827086223	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999569678399	WITHOUT_CLASSIFICATION	4.303216013056358E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999973348838274	WITHOUT_CLASSIFICATION	2.665116172621755E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9997407571289295	WITHOUT_CLASSIFICATION	2.592428710704613E-4	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998554253012264	WITHOUT_CLASSIFICATION	1.4457469877367904E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999936422809753	WITHOUT_CLASSIFICATION	6.357719024693366E-5	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9749155015444114	WITHOUT_CLASSIFICATION	0.025084498455588515	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999869077556133	WITHOUT_CLASSIFICATION	1.3092244386826522E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999646238075967	WITHOUT_CLASSIFICATION	3.537619240338336E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996612807106373	WITHOUT_CLASSIFICATION	3.387192893626782E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999562815540466	WITHOUT_CLASSIFICATION	4.371844595339663E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999704163853612	WITHOUT_CLASSIFICATION	2.9583614638721644E-5	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999991964583703	WITHOUT_CLASSIFICATION	8.035416297982711E-7	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994504621523	WITHOUT_CLASSIFICATION	5.495378477045072E-7	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999201910621108	WITHOUT_CLASSIFICATION	7.980893788921665E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999415672362788	WITHOUT_CLASSIFICATION	5.843276372126634E-5	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999667868856043	WITHOUT_CLASSIFICATION	3.321311439571709E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9995855973008633	WITHOUT_CLASSIFICATION	4.1440269913668704E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998859534359869	WITHOUT_CLASSIFICATION	1.1404656401320273E-4	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998859534359869	WITHOUT_CLASSIFICATION	1.1404656401320273E-4	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991643371066177	WITHOUT_CLASSIFICATION	8.356628933823541E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999914994017742	WITHOUT_CLASSIFICATION	8.500598225766465E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999512103482194	WITHOUT_CLASSIFICATION	4.878965178055322E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.8022285040538045	WITHOUT_CLASSIFICATION	0.19777149594619542	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999150802089704	WITHOUT_CLASSIFICATION	8.491979102963401E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999150802089704	WITHOUT_CLASSIFICATION	8.491979102963401E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998717571285167	WITHOUT_CLASSIFICATION	1.2824287148320554E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9988516450603246	WITHOUT_CLASSIFICATION	0.0011483549396753964	DEFECT
//	WITHOUT_CLASSIFICATION	0.9997957147336473	WITHOUT_CLASSIFICATION	2.0428526635268585E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999540240250359	WITHOUT_CLASSIFICATION	4.597597496417356E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999852036948208	WITHOUT_CLASSIFICATION	1.4796305179168208E-5	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9996929516375502	WITHOUT_CLASSIFICATION	3.0704836244971166E-4	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998023348645313	WITHOUT_CLASSIFICATION	1.9766513546874175E-4	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999540922484177	WITHOUT_CLASSIFICATION	4.590775158231886E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999889435750051	WITHOUT_CLASSIFICATION	1.1056424994885115E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965216739961	WITHOUT_CLASSIFICATION	1.0347832600382223E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965216739961	WITHOUT_CLASSIFICATION	1.0347832600382223E-4	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997367589792854	WITHOUT_CLASSIFICATION	2.6324102071457236E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999444452994025	WITHOUT_CLASSIFICATION	5.555470059753027E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.999949893377354	WITHOUT_CLASSIFICATION	5.0106622645975E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997568621444747	WITHOUT_CLASSIFICATION	2.431378555254231E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999613152421338	WITHOUT_CLASSIFICATION	3.8684757866066884E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998144276060373	WITHOUT_CLASSIFICATION	1.855723939626948E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475842570017	WITHOUT_CLASSIFICATION	1.5241574299818016E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999723816026888	WITHOUT_CLASSIFICATION	2.7618397311297603E-5	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998950987940589	WITHOUT_CLASSIFICATION	1.0490120594109366E-4	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9989766090461446	WITHOUT_CLASSIFICATION	0.0010233909538553815	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999641689407988	WITHOUT_CLASSIFICATION	3.5831059201290154E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9882867378925642	WITHOUT_CLASSIFICATION	0.01171326210743579	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999969591694683	WITHOUT_CLASSIFICATION	3.0408305316176828E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9979190780981982	WITHOUT_CLASSIFICATION	0.0020809219018016563	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999912566593308	WITHOUT_CLASSIFICATION	8.743340669214405E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9998173242034637	WITHOUT_CLASSIFICATION	1.8267579653626314E-4	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998777853427857	WITHOUT_CLASSIFICATION	1.2221465721417543E-4	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9996773601807897	WITHOUT_CLASSIFICATION	3.2263981921029286E-4	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996959974846799	WITHOUT_CLASSIFICATION	3.0400251532009887E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999994289728733	WITHOUT_CLASSIFICATION	5.71027126698088E-6	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995347706345401	WITHOUT_CLASSIFICATION	4.652293654599256E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.998519385932016	WITHOUT_CLASSIFICATION	0.0014806140679840486	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.998519385932016	WITHOUT_CLASSIFICATION	0.0014806140679840486	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999148940231933	WITHOUT_CLASSIFICATION	8.510597680659314E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999991431834407	WITHOUT_CLASSIFICATION	8.568165592779798E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.999882902799173	WITHOUT_CLASSIFICATION	1.1709720082705389E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.99976805534632	WITHOUT_CLASSIFICATION	2.3194465368015977E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999973258929034	WITHOUT_CLASSIFICATION	2.674107096594272E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997827371044097	WITHOUT_CLASSIFICATION	2.172628955902578E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997855830610745	WITHOUT_CLASSIFICATION	2.1441693892548726E-4	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9989862772591193	WITHOUT_CLASSIFICATION	0.0010137227408806876	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999545592419914	WITHOUT_CLASSIFICATION	4.5440758008571234E-5	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999191790851293	WITHOUT_CLASSIFICATION	8.082091487079509E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999008347485351	WITHOUT_CLASSIFICATION	9.916525146497702E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999410960148662	WITHOUT_CLASSIFICATION	5.890398513382204E-5	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999856904717402	WITHOUT_CLASSIFICATION	1.4309528259902328E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999909854562842	WITHOUT_CLASSIFICATION	9.014543715855119E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999954956363163	WITHOUT_CLASSIFICATION	4.504363683717093E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999794468578136	WITHOUT_CLASSIFICATION	2.0553142186347482E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9997379728395902	WITHOUT_CLASSIFICATION	2.620271604098043E-4	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998057163354882	WITHOUT_CLASSIFICATION	1.942836645119048E-4	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9991653435310185	WITHOUT_CLASSIFICATION	8.346564689814031E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.96443451053265	WITHOUT_CLASSIFICATION	0.03556548946734994	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9997538082706466	WITHOUT_CLASSIFICATION	2.4619172935341435E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995098970464	WITHOUT_CLASSIFICATION	4.901029534859856E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999299518155206	WITHOUT_CLASSIFICATION	7.004818447937743E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999655014211	WITHOUT_CLASSIFICATION	3.449857882027979E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999916144692867	WITHOUT_CLASSIFICATION	8.385530713185018E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999916144692867	WITHOUT_CLASSIFICATION	8.385530713185018E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999711914451554	WITHOUT_CLASSIFICATION	2.880855484459953E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999502558468997	WITHOUT_CLASSIFICATION	4.9744153100363506E-5	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999893789104337	WITHOUT_CLASSIFICATION	1.0621089566213885E-5	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998699136842926	WITHOUT_CLASSIFICATION	1.3008631570737971E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999983772751595	WITHOUT_CLASSIFICATION	1.62272484050399E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998048481065027	WITHOUT_CLASSIFICATION	1.951518934973723E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9895478118464147	WITHOUT_CLASSIFICATION	0.010452188153585262	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998649648589889	WITHOUT_CLASSIFICATION	1.3503514101111932E-4	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.7785237782876286	DEFECT	0.22147622171237136	WITHOUT_CLASSIFICATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.8938109204053057	WITHOUT_CLASSIFICATION	0.10618907959469424	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9997588212285045	WITHOUT_CLASSIFICATION	2.4117877149556696E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9996081066204453	WITHOUT_CLASSIFICATION	3.9189337955462816E-4	DEFECT
/*	DEFECT	0.9934060733264413	WITHOUT_CLASSIFICATION	0.006593926673558731	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9997543458578492	WITHOUT_CLASSIFICATION	2.456541421508614E-4	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.730665254431239	DEFECT	0.2693347455687611	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9417670076123937	WITHOUT_CLASSIFICATION	0.05823299238760628	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9125686565761018	WITHOUT_CLASSIFICATION	0.08743134342389823	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8195249046303156	DEFECT	0.18047509536968448	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9985045367843206	WITHOUT_CLASSIFICATION	0.0014954632156793327	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9985045367843206	WITHOUT_CLASSIFICATION	0.0014954632156793327	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9747803168235813	WITHOUT_CLASSIFICATION	0.025219683176418747	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999780625337358	WITHOUT_CLASSIFICATION	2.193746626420265E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8904895974708589	WITHOUT_CLASSIFICATION	0.10951040252914108	DEFECT
// this call is side-effecty	DEFECT	0.9998170591703051	WITHOUT_CLASSIFICATION	1.829408296949494E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.6792274197133737	WITHOUT_CLASSIFICATION	0.3207725802866263	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9992348359297704	WITHOUT_CLASSIFICATION	7.651640702296209E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8996603491828505	WITHOUT_CLASSIFICATION	0.10033965081714945	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9993922793307628	WITHOUT_CLASSIFICATION	6.077206692371821E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9919305000606099	WITHOUT_CLASSIFICATION	0.008069499939390086	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999674459551863	WITHOUT_CLASSIFICATION	3.2554044813704885E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9510781207256402	WITHOUT_CLASSIFICATION	0.048921879274359745	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9991951374702602	WITHOUT_CLASSIFICATION	8.048625297397228E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.6176781228877066	DEFECT	0.3823218771122935	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9989274455599808	DEFECT	0.00107255444001919	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.8183627591010837	DEFECT	0.18163724089891634	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.5499937332734098	WITHOUT_CLASSIFICATION	0.45000626672659017	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8795009387654469	WITHOUT_CLASSIFICATION	0.12049906123455319	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9338108838772629	WITHOUT_CLASSIFICATION	0.06618911612273724	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9897988652929011	WITHOUT_CLASSIFICATION	0.010201134707098998	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9985045367843206	WITHOUT_CLASSIFICATION	0.0014954632156793327	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9799713707273824	DEFECT	0.02002862927261769	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.8387209685530355	WITHOUT_CLASSIFICATION	0.16127903144696457	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9997994671410636	WITHOUT_CLASSIFICATION	2.0053285893642156E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9937935839924988	WITHOUT_CLASSIFICATION	0.006206416007501165	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9898281643005726	WITHOUT_CLASSIFICATION	0.010171835699427447	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9987651562415507	WITHOUT_CLASSIFICATION	0.001234843758449354	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.918620131914397	WITHOUT_CLASSIFICATION	0.08137986808560302	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9493676471370401	WITHOUT_CLASSIFICATION	0.05063235286295985	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9964457043529087	WITHOUT_CLASSIFICATION	0.0035542956470912303	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9057602252658793	WITHOUT_CLASSIFICATION	0.09423977473412068	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9996983629736959	WITHOUT_CLASSIFICATION	3.016370263041287E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9931286799571576	WITHOUT_CLASSIFICATION	0.006871320042842386	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9844675231216627	WITHOUT_CLASSIFICATION	0.015532476878337255	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9992167132898441	WITHOUT_CLASSIFICATION	7.832867101558856E-4	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.982268182439567	WITHOUT_CLASSIFICATION	0.017731817560432975	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.687633045641699	WITHOUT_CLASSIFICATION	0.3123669543583011	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999734748831376	DEFECT	2.652511686251417E-5	WITHOUT_CLASSIFICATION
