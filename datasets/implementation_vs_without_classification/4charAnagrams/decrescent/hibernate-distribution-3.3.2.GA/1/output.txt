// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9754343379985876	WITHOUT_CLASSIFICATION	0.024565662001412508	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9754343379985876	WITHOUT_CLASSIFICATION	0.024565662001412508	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9997573789078534	WITHOUT_CLASSIFICATION	2.426210921466503E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9798389572568312	WITHOUT_CLASSIFICATION	0.020161042743168846	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9983455507749586	WITHOUT_CLASSIFICATION	0.0016544492250414348	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.6008234443429084	WITHOUT_CLASSIFICATION	0.39917655565709165	IMPLEMENTATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.99596665186539	WITHOUT_CLASSIFICATION	0.004033348134610007	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9632412477164386	WITHOUT_CLASSIFICATION	0.03675875228356136	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9999881629464309	WITHOUT_CLASSIFICATION	1.1837053569224701E-5	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.993551406516661	WITHOUT_CLASSIFICATION	0.006448593483339063	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.999654958271442	WITHOUT_CLASSIFICATION	3.450417285579637E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9750651333818382	WITHOUT_CLASSIFICATION	0.024934866618161754	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9993132340918244	WITHOUT_CLASSIFICATION	6.867659081755171E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9993132340918244	WITHOUT_CLASSIFICATION	6.867659081755171E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9995382759900197	WITHOUT_CLASSIFICATION	4.617240099803036E-4	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8965807431473825	IMPLEMENTATION	0.10341925685261752	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999338691627783	IMPLEMENTATION	6.613083722167125E-5	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.6790183304180609	WITHOUT_CLASSIFICATION	0.320981669581939	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999627604493	WITHOUT_CLASSIFICATION	3.723955054873593E-8	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9976027121267277	WITHOUT_CLASSIFICATION	0.002397287873272379	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9666238915942248	WITHOUT_CLASSIFICATION	0.033376108405775234	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9997842499072004	WITHOUT_CLASSIFICATION	2.1575009279959902E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9996293023048448	WITHOUT_CLASSIFICATION	3.7069769515508185E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9052295278747439	IMPLEMENTATION	0.09477047212525615	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9052295278747439	IMPLEMENTATION	0.09477047212525615	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9978217492979782	IMPLEMENTATION	0.0021782507020217993	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9986636380052123	WITHOUT_CLASSIFICATION	0.0013363619947877503	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.927585104825949	IMPLEMENTATION	0.07241489517405103	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9935307873844446	WITHOUT_CLASSIFICATION	0.006469212615555437	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.937400457303009	WITHOUT_CLASSIFICATION	0.06259954269699107	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9966019364931069	WITHOUT_CLASSIFICATION	0.003398063506893153	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9743063261588504	WITHOUT_CLASSIFICATION	0.02569367384114962	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997409131885199	WITHOUT_CLASSIFICATION	2.5908681148010886E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9682233129240582	WITHOUT_CLASSIFICATION	0.03177668707594187	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8030827537391935	WITHOUT_CLASSIFICATION	0.19691724626080645	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9684764225776412	WITHOUT_CLASSIFICATION	0.03152357742235874	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.6930173672534657	WITHOUT_CLASSIFICATION	0.30698263274653437	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.986096120110067	WITHOUT_CLASSIFICATION	0.013903879889932887	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9994401945199017	WITHOUT_CLASSIFICATION	5.598054800982797E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9982354441786607	IMPLEMENTATION	0.0017645558213393196	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9982354441786607	IMPLEMENTATION	0.0017645558213393196	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9783548744523584	IMPLEMENTATION	0.021645125547641673	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9972020836901699	WITHOUT_CLASSIFICATION	0.002797916309830136	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9952114314641738	WITHOUT_CLASSIFICATION	0.004788568535826269	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9997173137240287	IMPLEMENTATION	2.826862759713732E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9975947256282711	WITHOUT_CLASSIFICATION	0.002405274371728932	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.999719486794995	WITHOUT_CLASSIFICATION	2.8051320500502064E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9984134768619994	WITHOUT_CLASSIFICATION	0.0015865231380005548	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998844735205733	WITHOUT_CLASSIFICATION	1.1552647942676374E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9929926988213166	WITHOUT_CLASSIFICATION	0.007007301178683443	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.998845135997736	WITHOUT_CLASSIFICATION	0.001154864002263973	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.63021011692521	IMPLEMENTATION	0.36978988307479005	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6615021653905226	IMPLEMENTATION	0.3384978346094775	WITHOUT_CLASSIFICATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9879686945144182	WITHOUT_CLASSIFICATION	0.012031305485581956	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8677445649951314	WITHOUT_CLASSIFICATION	0.13225543500486864	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.8493353671389542	IMPLEMENTATION	0.15066463286104584	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8677445649951314	WITHOUT_CLASSIFICATION	0.13225543500486864	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999994433994418	IMPLEMENTATION	5.566005582469495E-7	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.8288321987512749	IMPLEMENTATION	0.17116780124872513	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8677445649951314	WITHOUT_CLASSIFICATION	0.13225543500486864	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.99999998045049	WITHOUT_CLASSIFICATION	1.9549509921989145E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999822365895	WITHOUT_CLASSIFICATION	1.7763410524410542E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9995007202642315	IMPLEMENTATION	4.992797357683813E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999990938613601	WITHOUT_CLASSIFICATION	9.061386398564625E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999702643626985	WITHOUT_CLASSIFICATION	2.973563730149753E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999932079039114	WITHOUT_CLASSIFICATION	6.7920960886050415E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999979155488898	WITHOUT_CLASSIFICATION	2.0844511102143654E-6	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999981756439787	WITHOUT_CLASSIFICATION	1.8243560211520537E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999971325416271	WITHOUT_CLASSIFICATION	2.8674583728198795E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999971325416271	WITHOUT_CLASSIFICATION	2.8674583728198795E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999935363506	WITHOUT_CLASSIFICATION	6.4636494417678604E-9	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995862214341	WITHOUT_CLASSIFICATION	4.1377856578969525E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996369941262	WITHOUT_CLASSIFICATION	3.6300587383233145E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999881640486006	WITHOUT_CLASSIFICATION	1.1835951399366164E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999106364612	WITHOUT_CLASSIFICATION	8.936353872903124E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999106364612	WITHOUT_CLASSIFICATION	8.936353872903124E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999988013429436	WITHOUT_CLASSIFICATION	1.198657056402634E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996968085932881	WITHOUT_CLASSIFICATION	3.0319140671193563E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999967416482457	WITHOUT_CLASSIFICATION	3.2583517542178998E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998731022752	WITHOUT_CLASSIFICATION	1.2689772479494543E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967484392	WITHOUT_CLASSIFICATION	3.2515608159298473E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999983582802479	WITHOUT_CLASSIFICATION	1.6417197521920183E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999729034754046	WITHOUT_CLASSIFICATION	2.7096524595444358E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999808388052605	WITHOUT_CLASSIFICATION	1.9161194739582138E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997934766715287	WITHOUT_CLASSIFICATION	2.0652332847126984E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9997974857813319	WITHOUT_CLASSIFICATION	2.0251421866818866E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999007675154785	WITHOUT_CLASSIFICATION	9.923248452151945E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999792347954396	WITHOUT_CLASSIFICATION	2.0765204560428463E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999980393354	WITHOUT_CLASSIFICATION	1.960664668677972E-9	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999645629054296	WITHOUT_CLASSIFICATION	3.543709457050764E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999645629054296	WITHOUT_CLASSIFICATION	3.543709457050764E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999980738658985	WITHOUT_CLASSIFICATION	1.9261341016313373E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999838961725116	WITHOUT_CLASSIFICATION	1.610382748845125E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998369766643	WITHOUT_CLASSIFICATION	1.6302333573427173E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998521678358225	WITHOUT_CLASSIFICATION	1.4783216417740442E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9942908427623143	WITHOUT_CLASSIFICATION	0.0057091572376858045	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995382759900197	WITHOUT_CLASSIFICATION	4.617240099803036E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995382759900197	WITHOUT_CLASSIFICATION	4.617240099803036E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999984924928901	WITHOUT_CLASSIFICATION	1.507507109979633E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999983153039854	WITHOUT_CLASSIFICATION	1.6846960145645562E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999990981697715	WITHOUT_CLASSIFICATION	9.018302284837503E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996718930758138	WITHOUT_CLASSIFICATION	3.281069241861858E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999870759755557	WITHOUT_CLASSIFICATION	1.2924024444400787E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998553177816789	WITHOUT_CLASSIFICATION	1.446822183210522E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999933847119241	WITHOUT_CLASSIFICATION	6.6152880758948E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999650294638	WITHOUT_CLASSIFICATION	3.4970536301818876E-8	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999946125122942	WITHOUT_CLASSIFICATION	5.3874877058000187E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999993426659403	WITHOUT_CLASSIFICATION	6.573340596914282E-6	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999180564556164	WITHOUT_CLASSIFICATION	8.19435443837243E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999946125122942	WITHOUT_CLASSIFICATION	5.3874877058000187E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999180564556164	WITHOUT_CLASSIFICATION	8.19435443837243E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999894605869	WITHOUT_CLASSIFICATION	1.053941300399706E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9986484568370317	WITHOUT_CLASSIFICATION	0.001351543162968256	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9988931815221352	WITHOUT_CLASSIFICATION	0.00110681847786474	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994380647446213	WITHOUT_CLASSIFICATION	5.619352553787873E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999992108872968	WITHOUT_CLASSIFICATION	7.891127031528221E-7	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999836730944	WITHOUT_CLASSIFICATION	1.63269055893539E-8	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9273378672613509	WITHOUT_CLASSIFICATION	0.07266213273864897	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999279661556142	WITHOUT_CLASSIFICATION	7.203384438579581E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.8954504883228196	WITHOUT_CLASSIFICATION	0.10454951167718045	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998880983052246	WITHOUT_CLASSIFICATION	1.119016947753396E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999686106549737	WITHOUT_CLASSIFICATION	3.1389345026281356E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999776685765289	WITHOUT_CLASSIFICATION	2.2331423471102565E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998387677002	WITHOUT_CLASSIFICATION	1.6123229976960002E-7	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.997256612623834	WITHOUT_CLASSIFICATION	0.0027433873761660166	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999897596446726	WITHOUT_CLASSIFICATION	1.024035532743965E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999999916256	WITHOUT_CLASSIFICATION	8.37440599049135E-11	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999996462469071	WITHOUT_CLASSIFICATION	3.53753092980919E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999945048732787	WITHOUT_CLASSIFICATION	5.495126721307012E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999939593273942	WITHOUT_CLASSIFICATION	6.040672605813061E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999987515108909	WITHOUT_CLASSIFICATION	1.2484891090753177E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999951622419386	WITHOUT_CLASSIFICATION	4.83775806132017E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998595449174	WITHOUT_CLASSIFICATION	1.4045508250375874E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985701725187	WITHOUT_CLASSIFICATION	1.4298274813013789E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999888562216745	WITHOUT_CLASSIFICATION	1.1143778325478148E-5	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9930145292173279	WITHOUT_CLASSIFICATION	0.006985470782672049	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999841780208403	WITHOUT_CLASSIFICATION	1.5821979159710794E-5	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999728803783	WITHOUT_CLASSIFICATION	2.7119621653604506E-8	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9938458171746193	WITHOUT_CLASSIFICATION	0.006154182825380629	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999105889904	WITHOUT_CLASSIFICATION	8.941100959238469E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999963005841839	WITHOUT_CLASSIFICATION	3.6994158160837096E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999858532526	WITHOUT_CLASSIFICATION	1.4146747366346363E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999846927442977	WITHOUT_CLASSIFICATION	1.5307255702358455E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998210191338	WITHOUT_CLASSIFICATION	1.7898086628877095E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999765609059494	WITHOUT_CLASSIFICATION	2.343909405050267E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999940036416378	WITHOUT_CLASSIFICATION	5.9963583622109555E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999547769962	WITHOUT_CLASSIFICATION	4.522300381787807E-8	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999765609059494	WITHOUT_CLASSIFICATION	2.343909405050267E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998869133326	WITHOUT_CLASSIFICATION	1.1308666739035406E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999968995057888	WITHOUT_CLASSIFICATION	3.100494211131595E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999920943232008	WITHOUT_CLASSIFICATION	7.905676799110089E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999880491164815	WITHOUT_CLASSIFICATION	1.195088351841166E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999925456576638	WITHOUT_CLASSIFICATION	7.454342336164539E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993462874138	WITHOUT_CLASSIFICATION	6.537125862469573E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993462874138	WITHOUT_CLASSIFICATION	6.537125862469573E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999503655029791	WITHOUT_CLASSIFICATION	4.963449702097821E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999622559943	WITHOUT_CLASSIFICATION	3.774400577505967E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999287495536818	WITHOUT_CLASSIFICATION	7.125044631812774E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999933795943	WITHOUT_CLASSIFICATION	6.620405766474215E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999943926109246	WITHOUT_CLASSIFICATION	5.607389075356351E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999970826694404	WITHOUT_CLASSIFICATION	2.917330559604967E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999852206731139	WITHOUT_CLASSIFICATION	1.4779326885980288E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.99987341350519	WITHOUT_CLASSIFICATION	1.265864948099494E-4	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999115734381	WITHOUT_CLASSIFICATION	8.842656188255596E-8	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.99999997574772	WITHOUT_CLASSIFICATION	2.4252279917683344E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925064135856	WITHOUT_CLASSIFICATION	7.493586414477612E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925064135856	WITHOUT_CLASSIFICATION	7.493586414477612E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995377775283185	WITHOUT_CLASSIFICATION	4.6222247168151674E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999985788746614	WITHOUT_CLASSIFICATION	1.4211253385927246E-5	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999992668507895	WITHOUT_CLASSIFICATION	7.331492104855708E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925064135856	WITHOUT_CLASSIFICATION	7.493586414477612E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995377775283185	WITHOUT_CLASSIFICATION	4.6222247168151674E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995377775283185	WITHOUT_CLASSIFICATION	4.6222247168151674E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999999889211655	WITHOUT_CLASSIFICATION	1.1078834503805959E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998765975744062	WITHOUT_CLASSIFICATION	1.2340242559383708E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999998978164805	WITHOUT_CLASSIFICATION	1.0218351950051677E-6	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999983775224063	WITHOUT_CLASSIFICATION	1.6224775936725624E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999016776847864	WITHOUT_CLASSIFICATION	9.832231521352803E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999016776847864	WITHOUT_CLASSIFICATION	9.832231521352803E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999613863685457	WITHOUT_CLASSIFICATION	3.8613631454266836E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999959465909708	WITHOUT_CLASSIFICATION	4.053409029252133E-6	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999984622111188	WITHOUT_CLASSIFICATION	1.5377888813254874E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999801767722	WITHOUT_CLASSIFICATION	1.9823227809630766E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999801767722	WITHOUT_CLASSIFICATION	1.9823227809630766E-8	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999793037522604	WITHOUT_CLASSIFICATION	2.0696247739592736E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998742416686034	WITHOUT_CLASSIFICATION	1.257583313966711E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.8909647853983593	WITHOUT_CLASSIFICATION	0.10903521460164066	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999922368317	WITHOUT_CLASSIFICATION	7.763168416768254E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999998845847846	WITHOUT_CLASSIFICATION	1.1541521532608666E-7	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999987587050112	WITHOUT_CLASSIFICATION	1.2412949887793E-6	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998642988254989	WITHOUT_CLASSIFICATION	1.3570117450113124E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9863487706517161	WITHOUT_CLASSIFICATION	0.013651229348284024	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999827891396741	WITHOUT_CLASSIFICATION	1.7210860325897006E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.8909647853983593	WITHOUT_CLASSIFICATION	0.10903521460164066	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9998448125653079	WITHOUT_CLASSIFICATION	1.551874346920774E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9974082859169386	WITHOUT_CLASSIFICATION	0.002591714083061268	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9974082859169386	WITHOUT_CLASSIFICATION	0.002591714083061268	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9973254748059972	WITHOUT_CLASSIFICATION	0.00267452519400289	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9992083163970403	WITHOUT_CLASSIFICATION	7.916836029597079E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9937411705757716	WITHOUT_CLASSIFICATION	0.0062588294242284315	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998922723452214	WITHOUT_CLASSIFICATION	1.077276547786443E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997137183517412	WITHOUT_CLASSIFICATION	2.862816482587992E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9993062977139041	WITHOUT_CLASSIFICATION	6.937022860958442E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999899219129363	WITHOUT_CLASSIFICATION	1.0078087063682573E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999391582189056	WITHOUT_CLASSIFICATION	6.084178109444207E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999857239003	WITHOUT_CLASSIFICATION	1.4276099654975476E-8	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999857239003	WITHOUT_CLASSIFICATION	1.4276099654975476E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999702643626985	WITHOUT_CLASSIFICATION	2.973563730149753E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999998856304523	WITHOUT_CLASSIFICATION	1.1436954762577964E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.999996885787944	WITHOUT_CLASSIFICATION	3.1142120560140903E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999926801977522	WITHOUT_CLASSIFICATION	7.319802247709763E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999973098830374	WITHOUT_CLASSIFICATION	2.6901169625935353E-6	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999995249719925	WITHOUT_CLASSIFICATION	4.7502800758145975E-7	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995286468285	WITHOUT_CLASSIFICATION	4.7135317144305626E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999931560781397	WITHOUT_CLASSIFICATION	6.843921860443808E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999451560055286	WITHOUT_CLASSIFICATION	5.4843994471334434E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999976173097888	WITHOUT_CLASSIFICATION	2.382690211183445E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999969921529972	WITHOUT_CLASSIFICATION	3.0078470028552003E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999979155488898	WITHOUT_CLASSIFICATION	2.0844511102143654E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999936880584126	WITHOUT_CLASSIFICATION	6.31194158740144E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999936880584126	WITHOUT_CLASSIFICATION	6.31194158740144E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997474842807	WITHOUT_CLASSIFICATION	2.525157192915507E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999997087200933	WITHOUT_CLASSIFICATION	2.912799067068375E-6	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999990997368545	WITHOUT_CLASSIFICATION	9.002631454459308E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999982707166583	WITHOUT_CLASSIFICATION	1.7292833416617434E-6	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999955015866585	WITHOUT_CLASSIFICATION	4.498413341539769E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999481802257372	WITHOUT_CLASSIFICATION	5.181977426294886E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999971325416271	WITHOUT_CLASSIFICATION	2.8674583728198795E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999789905238815	WITHOUT_CLASSIFICATION	2.1009476118416006E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999924818590413	WITHOUT_CLASSIFICATION	7.518140958707564E-6	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999995034726795	WITHOUT_CLASSIFICATION	4.965273205068779E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996994497433	WITHOUT_CLASSIFICATION	3.0055025668762696E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.999979290473756	WITHOUT_CLASSIFICATION	2.0709526243905095E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999977280906021	WITHOUT_CLASSIFICATION	2.271909397827754E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999936826239112	WITHOUT_CLASSIFICATION	6.317376088766911E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998499817401	WITHOUT_CLASSIFICATION	1.500182598453726E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999923876439812	WITHOUT_CLASSIFICATION	7.612356018739402E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999993115899591	WITHOUT_CLASSIFICATION	6.884100409146125E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998799856277683	WITHOUT_CLASSIFICATION	1.2001437223172903E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997972530739	WITHOUT_CLASSIFICATION	2.0274692605162772E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999987082014099	WITHOUT_CLASSIFICATION	1.2917985900552543E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999976173097888	WITHOUT_CLASSIFICATION	2.382690211183445E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999936880584126	WITHOUT_CLASSIFICATION	6.31194158740144E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999936826239112	WITHOUT_CLASSIFICATION	6.317376088766911E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999935363506	WITHOUT_CLASSIFICATION	6.4636494417678604E-9	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999850287306	WITHOUT_CLASSIFICATION	1.497126952378953E-8	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999981639309319	WITHOUT_CLASSIFICATION	1.836069068110659E-6	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998734134684	WITHOUT_CLASSIFICATION	1.2658653157797117E-7	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999979196016036	WITHOUT_CLASSIFICATION	2.080398396382793E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999965388232405	WITHOUT_CLASSIFICATION	3.461176759543439E-6	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999997324634984	WITHOUT_CLASSIFICATION	2.6753650159402947E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996889977208	WITHOUT_CLASSIFICATION	3.1100227913882804E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999777726093231	WITHOUT_CLASSIFICATION	2.2227390676911658E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999998666745729	WITHOUT_CLASSIFICATION	1.3332542707064416E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999959459961391	WITHOUT_CLASSIFICATION	4.054003860986066E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999959459961391	WITHOUT_CLASSIFICATION	4.054003860986066E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999080562281	WITHOUT_CLASSIFICATION	9.194377189802415E-8	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999357424982	WITHOUT_CLASSIFICATION	6.425750176753873E-8	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999968434083897	WITHOUT_CLASSIFICATION	3.1565916104013486E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999870207537952	WITHOUT_CLASSIFICATION	1.2979246204824922E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999994698238149	WITHOUT_CLASSIFICATION	5.301761850120764E-7	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999085254063	WITHOUT_CLASSIFICATION	9.147459373481022E-8	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999999931288884	WITHOUT_CLASSIFICATION	6.871111605891884E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995862214341	WITHOUT_CLASSIFICATION	4.1377856578969525E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999942842955094	WITHOUT_CLASSIFICATION	5.715704490578416E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999554283623	WITHOUT_CLASSIFICATION	4.4571637707828944E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999554283623	WITHOUT_CLASSIFICATION	4.4571637707828944E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999988389911385	WITHOUT_CLASSIFICATION	1.1610088614984637E-6	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998585252686	WITHOUT_CLASSIFICATION	1.4147473135039245E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999993277747942	WITHOUT_CLASSIFICATION	6.72225205767421E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998018384999	WITHOUT_CLASSIFICATION	1.9816150007205859E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.999997565782563	WITHOUT_CLASSIFICATION	2.4342174369236793E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999967478669008	WITHOUT_CLASSIFICATION	3.25213309919811E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999976173097888	WITHOUT_CLASSIFICATION	2.382690211183445E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999979155488898	WITHOUT_CLASSIFICATION	2.0844511102143654E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999936826239112	WITHOUT_CLASSIFICATION	6.317376088766911E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999936826239112	WITHOUT_CLASSIFICATION	6.317376088766911E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998013164824	WITHOUT_CLASSIFICATION	1.9868351768899214E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998013164824	WITHOUT_CLASSIFICATION	1.9868351768899214E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999948772727038	WITHOUT_CLASSIFICATION	5.122727296298961E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999982963778385	WITHOUT_CLASSIFICATION	1.703622161462036E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999982963778385	WITHOUT_CLASSIFICATION	1.703622161462036E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999851450043513	WITHOUT_CLASSIFICATION	1.4854995648604106E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999832830868502	WITHOUT_CLASSIFICATION	1.671691314975124E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997038923089	WITHOUT_CLASSIFICATION	2.9610769124449957E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999833173978	WITHOUT_CLASSIFICATION	1.668260219444997E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999209273199	WITHOUT_CLASSIFICATION	7.907267998974663E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999881640486006	WITHOUT_CLASSIFICATION	1.1835951399366164E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999881640486006	WITHOUT_CLASSIFICATION	1.1835951399366164E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9990549509381829	WITHOUT_CLASSIFICATION	9.450490618172634E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999987337322189	WITHOUT_CLASSIFICATION	1.2662677810386965E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.999998849256326	WITHOUT_CLASSIFICATION	1.1507436739764433E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999888171607076	WITHOUT_CLASSIFICATION	1.1182839292277649E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999997781209752	WITHOUT_CLASSIFICATION	2.2187902472735678E-7	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999941077403522	WITHOUT_CLASSIFICATION	5.892259647786192E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999106364612	WITHOUT_CLASSIFICATION	8.936353872903124E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999996239770983	WITHOUT_CLASSIFICATION	3.7602290170087354E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999996239770983	WITHOUT_CLASSIFICATION	3.7602290170087354E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999988013429436	WITHOUT_CLASSIFICATION	1.198657056402634E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999988013429436	WITHOUT_CLASSIFICATION	1.198657056402634E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999585798955795	WITHOUT_CLASSIFICATION	4.142010442053807E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999585798955795	WITHOUT_CLASSIFICATION	4.142010442053807E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994194095438	WITHOUT_CLASSIFICATION	5.805904562093606E-7	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994194095438	WITHOUT_CLASSIFICATION	5.805904562093606E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999881640486006	WITHOUT_CLASSIFICATION	1.1835951399366164E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999106364612	WITHOUT_CLASSIFICATION	8.936353872903124E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999996239770983	WITHOUT_CLASSIFICATION	3.7602290170087354E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999996239770983	WITHOUT_CLASSIFICATION	3.7602290170087354E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999988013429436	WITHOUT_CLASSIFICATION	1.198657056402634E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999585798955795	WITHOUT_CLASSIFICATION	4.142010442053807E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999585798955795	WITHOUT_CLASSIFICATION	4.142010442053807E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994194095438	WITHOUT_CLASSIFICATION	5.805904562093606E-7	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999947655635936	WITHOUT_CLASSIFICATION	5.234436406491645E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999552695248131	WITHOUT_CLASSIFICATION	4.473047518696756E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9996768731617618	WITHOUT_CLASSIFICATION	3.231268382382463E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999983519228393	WITHOUT_CLASSIFICATION	1.6480771607128594E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999527421531073	WITHOUT_CLASSIFICATION	4.7257846892788474E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999604763442697	WITHOUT_CLASSIFICATION	3.952365573037634E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999157615161457	WITHOUT_CLASSIFICATION	8.423848385424022E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999980947635607	WITHOUT_CLASSIFICATION	1.9052364392203886E-6	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999970525118287	WITHOUT_CLASSIFICATION	2.947488171301172E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999992432500403	WITHOUT_CLASSIFICATION	7.567499597282071E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999989754986125	WITHOUT_CLASSIFICATION	1.0245013875037798E-5	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995557971989	WITHOUT_CLASSIFICATION	4.4420280106150557E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999503655029791	WITHOUT_CLASSIFICATION	4.963449702097821E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999604763442697	WITHOUT_CLASSIFICATION	3.952365573037634E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999545346590261	WITHOUT_CLASSIFICATION	4.546534097384683E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999545346590261	WITHOUT_CLASSIFICATION	4.546534097384683E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999670787476739	WITHOUT_CLASSIFICATION	3.2921252326176486E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998666559904	WITHOUT_CLASSIFICATION	1.3334400963576076E-7	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998666559904	WITHOUT_CLASSIFICATION	1.3334400963576076E-7	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999580536191074	WITHOUT_CLASSIFICATION	4.19463808925514E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999813515179	WITHOUT_CLASSIFICATION	1.864848204525095E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999961152194222	WITHOUT_CLASSIFICATION	3.884780577720693E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999319824649872	WITHOUT_CLASSIFICATION	6.801753501278414E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999319824649872	WITHOUT_CLASSIFICATION	6.801753501278414E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967484392	WITHOUT_CLASSIFICATION	3.2515608159298473E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999986393435659	WITHOUT_CLASSIFICATION	1.3606564339706824E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999986393435659	WITHOUT_CLASSIFICATION	1.3606564339706824E-6	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999986815777359	WITHOUT_CLASSIFICATION	1.3184222641106196E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999987411441488	WITHOUT_CLASSIFICATION	1.2588558512675048E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999955305846	WITHOUT_CLASSIFICATION	4.469415361709377E-9	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999156016240891	WITHOUT_CLASSIFICATION	8.439837591090771E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999960549559336	WITHOUT_CLASSIFICATION	3.945044066403111E-6	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999960770146666	WITHOUT_CLASSIFICATION	3.922985333414663E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999983582802479	WITHOUT_CLASSIFICATION	1.6417197521920183E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999617494130667	WITHOUT_CLASSIFICATION	3.8250586933427005E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9884764267735795	WITHOUT_CLASSIFICATION	0.011523573226420532	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999800499876957	WITHOUT_CLASSIFICATION	1.9950012304290867E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999843285235546	WITHOUT_CLASSIFICATION	1.56714764455295E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997934766715287	WITHOUT_CLASSIFICATION	2.0652332847126984E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998197993378	WITHOUT_CLASSIFICATION	1.8020066215015023E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999543304880704	WITHOUT_CLASSIFICATION	4.566951192959177E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999996779456848	WITHOUT_CLASSIFICATION	3.220543152331468E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997934766715287	WITHOUT_CLASSIFICATION	2.0652332847126984E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999888260272083	WITHOUT_CLASSIFICATION	1.1173972791685394E-5	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999339706758377	WITHOUT_CLASSIFICATION	6.602932416236153E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999554544534082	WITHOUT_CLASSIFICATION	4.4545546591941455E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999883696563662	WITHOUT_CLASSIFICATION	1.1630343633872929E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999683725878408	WITHOUT_CLASSIFICATION	3.1627412159254406E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.99998205127423	WITHOUT_CLASSIFICATION	1.794872577003228E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999805859248061	WITHOUT_CLASSIFICATION	1.9414075193897377E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999792347954396	WITHOUT_CLASSIFICATION	2.0765204560428463E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999913519718082	WITHOUT_CLASSIFICATION	8.648028191870378E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999980393354	WITHOUT_CLASSIFICATION	1.960664668677972E-9	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999854479027099	WITHOUT_CLASSIFICATION	1.455209729008051E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999265118026	WITHOUT_CLASSIFICATION	7.348819738147037E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999957263187006	WITHOUT_CLASSIFICATION	4.273681299448006E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999983582802479	WITHOUT_CLASSIFICATION	1.6417197521920183E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999913519718082	WITHOUT_CLASSIFICATION	8.648028191870378E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999854479027099	WITHOUT_CLASSIFICATION	1.455209729008051E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999957263187006	WITHOUT_CLASSIFICATION	4.273681299448006E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999635942779255	WITHOUT_CLASSIFICATION	3.6405722074551845E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999129607497875	WITHOUT_CLASSIFICATION	8.70392502125418E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999677382924609	WITHOUT_CLASSIFICATION	3.2261707539192466E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999645629054296	WITHOUT_CLASSIFICATION	3.543709457050764E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.99998844153695	WITHOUT_CLASSIFICATION	1.1558463050024822E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999848666889739	WITHOUT_CLASSIFICATION	1.5133311026150541E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999790415258198	WITHOUT_CLASSIFICATION	2.0958474180134877E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999282016786896	WITHOUT_CLASSIFICATION	7.179832131042664E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999973737771504	WITHOUT_CLASSIFICATION	2.626222849609158E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997604390003	WITHOUT_CLASSIFICATION	2.3956099968068624E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998857927567	WITHOUT_CLASSIFICATION	1.142072433204087E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999949632810609	WITHOUT_CLASSIFICATION	5.036718939206912E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999103733274	WITHOUT_CLASSIFICATION	8.962667261285276E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999573445904	WITHOUT_CLASSIFICATION	4.2655409604656606E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.999959889631179	WITHOUT_CLASSIFICATION	4.011036882103765E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999790539635353	WITHOUT_CLASSIFICATION	2.094603646471347E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999838961725116	WITHOUT_CLASSIFICATION	1.610382748845125E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999907416433	WITHOUT_CLASSIFICATION	9.258356768504928E-9	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999997171771018	WITHOUT_CLASSIFICATION	2.8282289819952665E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999913519718082	WITHOUT_CLASSIFICATION	8.648028191870378E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999724698504	WITHOUT_CLASSIFICATION	2.753014959915079E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999799864659548	WITHOUT_CLASSIFICATION	2.0013534045299834E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999970475284398	WITHOUT_CLASSIFICATION	2.9524715602212656E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9944071420631208	WITHOUT_CLASSIFICATION	0.005592857936879314	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999854624315169	WITHOUT_CLASSIFICATION	1.4537568483070285E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999960342462728	WITHOUT_CLASSIFICATION	3.965753727127872E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999944254249499	WITHOUT_CLASSIFICATION	5.574575050181372E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999181060538	WITHOUT_CLASSIFICATION	8.189394617917228E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999775443284776	WITHOUT_CLASSIFICATION	2.245567152237436E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999547078389756	WITHOUT_CLASSIFICATION	4.52921610244582E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998564020602763	WITHOUT_CLASSIFICATION	1.4359793972370816E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999956259753759	WITHOUT_CLASSIFICATION	4.374024624106008E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9912903739110925	WITHOUT_CLASSIFICATION	0.008709626088907583	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998521678358225	WITHOUT_CLASSIFICATION	1.4783216417740442E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999979765269611	WITHOUT_CLASSIFICATION	2.0234730389724785E-6	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999765053556017	WITHOUT_CLASSIFICATION	2.3494644398308296E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9996427961674214	WITHOUT_CLASSIFICATION	3.572038325787436E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9998840657398913	WITHOUT_CLASSIFICATION	1.1593426010874187E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999870981606301	WITHOUT_CLASSIFICATION	1.290183936988229E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999919391229824	WITHOUT_CLASSIFICATION	8.060877017595152E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999987238930864	WITHOUT_CLASSIFICATION	1.2761069136243807E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998386279005487	WITHOUT_CLASSIFICATION	1.6137209945140562E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999287045716534	WITHOUT_CLASSIFICATION	7.129542834656913E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999920588738171	WITHOUT_CLASSIFICATION	7.941126182923442E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.998293752377349	WITHOUT_CLASSIFICATION	0.0017062476226510615	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.998293752377349	WITHOUT_CLASSIFICATION	0.0017062476226510615	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999470857175655	WITHOUT_CLASSIFICATION	5.2914282434591646E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9964930525027884	WITHOUT_CLASSIFICATION	0.0035069474972115318	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999905948650086	WITHOUT_CLASSIFICATION	9.405134991278432E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999953154042766	WITHOUT_CLASSIFICATION	4.684595723374809E-6	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999952203880127	WITHOUT_CLASSIFICATION	4.779611987291091E-6	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999960639342375	WITHOUT_CLASSIFICATION	3.93606576253748E-6	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999677879602834	WITHOUT_CLASSIFICATION	3.2212039716596585E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9906904291077432	WITHOUT_CLASSIFICATION	0.009309570892256726	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999951757478553	WITHOUT_CLASSIFICATION	4.824252144715198E-6	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999955457075441	WITHOUT_CLASSIFICATION	4.45429245586116E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9998041163973483	WITHOUT_CLASSIFICATION	1.9588360265161976E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999876470188424	WITHOUT_CLASSIFICATION	1.2352981157533318E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999853038353194	WITHOUT_CLASSIFICATION	1.4696164680753214E-5	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9995614586777095	WITHOUT_CLASSIFICATION	4.385413222905049E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976864019308	WITHOUT_CLASSIFICATION	2.313598069290683E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993004478476527	WITHOUT_CLASSIFICATION	6.995521523472835E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999867478229166	WITHOUT_CLASSIFICATION	1.3252177083342133E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999999766325824	WITHOUT_CLASSIFICATION	2.336741759873517E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9992976305279389	WITHOUT_CLASSIFICATION	7.02369472061172E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999291140337198	WITHOUT_CLASSIFICATION	7.088596628020211E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999990227147705	WITHOUT_CLASSIFICATION	9.772852294368175E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999990227147705	WITHOUT_CLASSIFICATION	9.772852294368175E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999940745449605	WITHOUT_CLASSIFICATION	5.925455039421575E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999940745449605	WITHOUT_CLASSIFICATION	5.925455039421575E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999287045716534	WITHOUT_CLASSIFICATION	7.129542834656913E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999918415104398	WITHOUT_CLASSIFICATION	8.15848956023331E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9966145578635119	WITHOUT_CLASSIFICATION	0.003385442136488069	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999406276097921	WITHOUT_CLASSIFICATION	5.937239020801483E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9966145578635119	WITHOUT_CLASSIFICATION	0.003385442136488069	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999406276097921	WITHOUT_CLASSIFICATION	5.937239020801483E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996036897284319	WITHOUT_CLASSIFICATION	3.963102715680494E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999966269625429	WITHOUT_CLASSIFICATION	3.3730374572402E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999981909899772	WITHOUT_CLASSIFICATION	1.8090100226694916E-6	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999986239989744	WITHOUT_CLASSIFICATION	1.3760010254935484E-6	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9972955863877022	WITHOUT_CLASSIFICATION	0.0027044136122978597	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9727323654546772	WITHOUT_CLASSIFICATION	0.02726763454532273	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999938229104	WITHOUT_CLASSIFICATION	6.177089661110062E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999777328242	WITHOUT_CLASSIFICATION	2.2267175773932263E-8	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999936779927653	WITHOUT_CLASSIFICATION	6.322007234781699E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999987245082345	WITHOUT_CLASSIFICATION	1.2754917654947322E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999921369537759	WITHOUT_CLASSIFICATION	7.86304622410394E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998312026126	WITHOUT_CLASSIFICATION	1.687973874300861E-7	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998781026289	WITHOUT_CLASSIFICATION	1.2189737104484814E-7	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999752645561674	WITHOUT_CLASSIFICATION	2.4735443832646528E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999985115974855	WITHOUT_CLASSIFICATION	1.4884025145077301E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999992560307235	WITHOUT_CLASSIFICATION	7.439692765942951E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999992560307235	WITHOUT_CLASSIFICATION	7.439692765942951E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999839822393597	WITHOUT_CLASSIFICATION	1.6017760640318532E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996036897284319	WITHOUT_CLASSIFICATION	3.963102715680494E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999927013083246	WITHOUT_CLASSIFICATION	7.298691675410268E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9995337580355355	WITHOUT_CLASSIFICATION	4.662419644645726E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.992273298075693	WITHOUT_CLASSIFICATION	0.0077267019243069624	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999980132201042	WITHOUT_CLASSIFICATION	1.9867798958137265E-6	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993604324597866	WITHOUT_CLASSIFICATION	6.395675402133174E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996036897284319	WITHOUT_CLASSIFICATION	3.963102715680494E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999980132201042	WITHOUT_CLASSIFICATION	1.9867798958137265E-6	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993604324597866	WITHOUT_CLASSIFICATION	6.395675402133174E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9956286784735807	WITHOUT_CLASSIFICATION	0.004371321526419293	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999697958710857	WITHOUT_CLASSIFICATION	3.020412891419995E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999912277246175	WITHOUT_CLASSIFICATION	8.772275382477387E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996036897284319	WITHOUT_CLASSIFICATION	3.963102715680494E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9996036897284319	WITHOUT_CLASSIFICATION	3.963102715680494E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999902539394512	WITHOUT_CLASSIFICATION	9.746060548701657E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999902761941359	WITHOUT_CLASSIFICATION	9.723805864083518E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999018475506218	WITHOUT_CLASSIFICATION	9.81524493781414E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999155317632475	WITHOUT_CLASSIFICATION	8.446823675245795E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999878294909779	WITHOUT_CLASSIFICATION	1.2170509022092086E-5	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999388541956	WITHOUT_CLASSIFICATION	6.114580444602001E-8	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999945604194054	WITHOUT_CLASSIFICATION	5.439580594629241E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999996931094996	WITHOUT_CLASSIFICATION	3.068905004100977E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999936238948332	WITHOUT_CLASSIFICATION	6.376105166849989E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.999928890383871	WITHOUT_CLASSIFICATION	7.110961612897535E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999782150786609	WITHOUT_CLASSIFICATION	2.1784921339041694E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999829510058717	WITHOUT_CLASSIFICATION	1.7048994128297213E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999134959217	WITHOUT_CLASSIFICATION	8.650407825589274E-8	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999427167875508	WITHOUT_CLASSIFICATION	5.7283212449157916E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988643019109	WITHOUT_CLASSIFICATION	1.1356980890798216E-6	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998325343209	WITHOUT_CLASSIFICATION	1.6746567905192225E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996718930758138	WITHOUT_CLASSIFICATION	3.281069241861858E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999989639430532	WITHOUT_CLASSIFICATION	1.0360569467657248E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998601016989516	WITHOUT_CLASSIFICATION	1.3989830104845703E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999285677157917	WITHOUT_CLASSIFICATION	7.143228420830139E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998491797672644	WITHOUT_CLASSIFICATION	1.5082023273555665E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9865194274604163	WITHOUT_CLASSIFICATION	0.013480572539583756	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9865194274604163	WITHOUT_CLASSIFICATION	0.013480572539583756	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996718930758138	WITHOUT_CLASSIFICATION	3.281069241861858E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9745559091433037	WITHOUT_CLASSIFICATION	0.025444090856696355	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999997949125641	WITHOUT_CLASSIFICATION	2.0508743595157397E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9473896219388347	IMPLEMENTATION	0.05261037806116535	WITHOUT_CLASSIFICATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999993330406343	WITHOUT_CLASSIFICATION	6.669593656199137E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999208192019658	WITHOUT_CLASSIFICATION	7.918079803414525E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999990813443532	WITHOUT_CLASSIFICATION	9.186556468430458E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9996711646322696	WITHOUT_CLASSIFICATION	3.2883536773048005E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998176673850774	WITHOUT_CLASSIFICATION	1.8233261492268306E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999996493102582	WITHOUT_CLASSIFICATION	3.5068974182058115E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999727312258453	WITHOUT_CLASSIFICATION	2.726877415481296E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999706332816508	WITHOUT_CLASSIFICATION	2.9366718349244746E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999982908635596	WITHOUT_CLASSIFICATION	1.7091364403990157E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994721517952626	WITHOUT_CLASSIFICATION	5.278482047374284E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999992146184328	WITHOUT_CLASSIFICATION	7.85381567314503E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914802401727	WITHOUT_CLASSIFICATION	8.51975982729037E-6	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999993937757057	WITHOUT_CLASSIFICATION	6.062242943567238E-7	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999995725301276	WITHOUT_CLASSIFICATION	4.274698723889749E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999661687860989	WITHOUT_CLASSIFICATION	3.383121390107264E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982109413339	WITHOUT_CLASSIFICATION	1.7890586660663353E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999995828395449	WITHOUT_CLASSIFICATION	4.1716045510181164E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999710790240982	WITHOUT_CLASSIFICATION	2.8920975901810214E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999835453186197	WITHOUT_CLASSIFICATION	1.6454681380343324E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680700993706	WITHOUT_CLASSIFICATION	3.192990062943867E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997978390876167	WITHOUT_CLASSIFICATION	2.0216091238347067E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986995776939988	WITHOUT_CLASSIFICATION	0.001300422306001249	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996853367238806	WITHOUT_CLASSIFICATION	3.146632761194205E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950841338916182	WITHOUT_CLASSIFICATION	0.0049158661083818	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994762211296059	WITHOUT_CLASSIFICATION	5.23778870394199E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984473151662652	WITHOUT_CLASSIFICATION	0.0015526848337348233	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992418211467837	WITHOUT_CLASSIFICATION	7.581788532162296E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998336770874463	WITHOUT_CLASSIFICATION	1.6632291255368347E-4	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999308517709397	WITHOUT_CLASSIFICATION	6.914822906032585E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543382817518	WITHOUT_CLASSIFICATION	4.5661718248054574E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754479445898	WITHOUT_CLASSIFICATION	2.45520554101728E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998035574375764	WITHOUT_CLASSIFICATION	1.9644256242357078E-4	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958275044710827	WITHOUT_CLASSIFICATION	0.004172495528917371	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999598619613884	WITHOUT_CLASSIFICATION	4.013803861166163E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999154755770528	WITHOUT_CLASSIFICATION	8.45244229470916E-5	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959345617084627	WITHOUT_CLASSIFICATION	0.004065438291537223	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986213186363986	WITHOUT_CLASSIFICATION	0.0013786813636013906	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999411725857187	WITHOUT_CLASSIFICATION	5.882741428129048E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995056227481497	WITHOUT_CLASSIFICATION	4.943772518503468E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999145972221966	WITHOUT_CLASSIFICATION	8.540277780350637E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999749572751834	WITHOUT_CLASSIFICATION	2.5042724816710183E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999998844465333	WITHOUT_CLASSIFICATION	1.1555346668550433E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999935649326182	WITHOUT_CLASSIFICATION	6.435067381867741E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999606378555049	WITHOUT_CLASSIFICATION	3.936214449517322E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999918233905086	WITHOUT_CLASSIFICATION	8.176609491280926E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999953254318891	WITHOUT_CLASSIFICATION	4.674568110914053E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999827220710839	WITHOUT_CLASSIFICATION	1.7277928916194928E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999195938238917	WITHOUT_CLASSIFICATION	8.040617610833077E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999571288702915	WITHOUT_CLASSIFICATION	4.2871129708555816E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999931413706413	WITHOUT_CLASSIFICATION	6.858629358726011E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999662252678682	WITHOUT_CLASSIFICATION	3.377473213178711E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999016732344	WITHOUT_CLASSIFICATION	9.832676557496546E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999985507488811	WITHOUT_CLASSIFICATION	1.449251118847276E-6	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996568772471497	WITHOUT_CLASSIFICATION	3.431227528503092E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999952921958568	WITHOUT_CLASSIFICATION	4.7078041431319825E-6	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999994924056106	WITHOUT_CLASSIFICATION	5.075943893833943E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440074930493	WITHOUT_CLASSIFICATION	5.5992506950656986E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861317179317	WITHOUT_CLASSIFICATION	1.3868282068381942E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467223471141	WITHOUT_CLASSIFICATION	5.327765288593473E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999859260679856	WITHOUT_CLASSIFICATION	1.407393201440882E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9954722860405838	WITHOUT_CLASSIFICATION	0.0045277139594162375	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999888462711153	WITHOUT_CLASSIFICATION	1.115372888469886E-5	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9663847901185814	WITHOUT_CLASSIFICATION	0.033615209881418695	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9993777140056148	WITHOUT_CLASSIFICATION	6.222859943852517E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999003216898037	WITHOUT_CLASSIFICATION	9.967831019620636E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999941781369014	WITHOUT_CLASSIFICATION	5.8218630986876144E-6	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999999689247787	WITHOUT_CLASSIFICATION	3.107522129146486E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999887320128451	WITHOUT_CLASSIFICATION	1.1267987154805999E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996552148626	WITHOUT_CLASSIFICATION	3.4478513741844915E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9990202079218515	WITHOUT_CLASSIFICATION	9.797920781484401E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9988345012099383	WITHOUT_CLASSIFICATION	0.001165498790061677	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999998840235208	WITHOUT_CLASSIFICATION	1.1597647920402227E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999828946001372	WITHOUT_CLASSIFICATION	1.7105399862725447E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999935649326182	WITHOUT_CLASSIFICATION	6.435067381867741E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999979198157403	WITHOUT_CLASSIFICATION	2.08018425976736E-6	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999507695463069	WITHOUT_CLASSIFICATION	4.92304536931007E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999401646408432	WITHOUT_CLASSIFICATION	5.983535915684741E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999339603199505	WITHOUT_CLASSIFICATION	6.603968004948952E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999958854825536	WITHOUT_CLASSIFICATION	4.114517446400109E-6	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999950320254669	WITHOUT_CLASSIFICATION	4.967974533056035E-6	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9993894470709226	WITHOUT_CLASSIFICATION	6.105529290774803E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.99995438878539	WITHOUT_CLASSIFICATION	4.561121460999941E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999253417473991	WITHOUT_CLASSIFICATION	7.465825260096243E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999994168101468	WITHOUT_CLASSIFICATION	5.83189853138529E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999956553896727	WITHOUT_CLASSIFICATION	4.344610327360183E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992764318182	WITHOUT_CLASSIFICATION	7.235681818102346E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999963344667708	WITHOUT_CLASSIFICATION	3.66553322914949E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999313619245301	WITHOUT_CLASSIFICATION	6.86380754698806E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999151206433086	WITHOUT_CLASSIFICATION	8.487935669144394E-5	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999908137676632	WITHOUT_CLASSIFICATION	9.186232336730026E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998683266555645	WITHOUT_CLASSIFICATION	1.316733444354503E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999408035254153	WITHOUT_CLASSIFICATION	5.919647458470086E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9995853337204865	WITHOUT_CLASSIFICATION	4.146662795135321E-4	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999482272080583	WITHOUT_CLASSIFICATION	5.1772791941670375E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999705231283875	WITHOUT_CLASSIFICATION	2.9476871612544544E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999640455868497	WITHOUT_CLASSIFICATION	3.5954413150280204E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999931473597555	WITHOUT_CLASSIFICATION	6.852640244458594E-6	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997431056476839	WITHOUT_CLASSIFICATION	2.5689435231617344E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999757765981298	WITHOUT_CLASSIFICATION	2.4223401870231803E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999996136467424	WITHOUT_CLASSIFICATION	3.8635325760215643E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9997974857813319	WITHOUT_CLASSIFICATION	2.0251421866818866E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999910158347908	WITHOUT_CLASSIFICATION	8.984165209185773E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999974064399836	WITHOUT_CLASSIFICATION	2.593560016474419E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999812504136867	WITHOUT_CLASSIFICATION	1.874958631325325E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999935649326182	WITHOUT_CLASSIFICATION	6.435067381867741E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.998318645400239	WITHOUT_CLASSIFICATION	0.0016813545997610626	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998763243055	WITHOUT_CLASSIFICATION	1.236756944868288E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999282484852	WITHOUT_CLASSIFICATION	7.175151484774483E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999935649326182	WITHOUT_CLASSIFICATION	6.435067381867741E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998336683777	WITHOUT_CLASSIFICATION	1.6633162232024917E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999705231283875	WITHOUT_CLASSIFICATION	2.9476871612544544E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9994960071661767	WITHOUT_CLASSIFICATION	5.039928338232777E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9989640432585499	WITHOUT_CLASSIFICATION	0.0010359567414500504	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999094145955286	WITHOUT_CLASSIFICATION	9.058540447132414E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999994168101468	WITHOUT_CLASSIFICATION	5.83189853138529E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999956553896727	WITHOUT_CLASSIFICATION	4.344610327360183E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992764318182	WITHOUT_CLASSIFICATION	7.235681818102346E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999079299077	WITHOUT_CLASSIFICATION	9.207009226393816E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999970967375155	WITHOUT_CLASSIFICATION	2.9032624844990698E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999994055031348	WITHOUT_CLASSIFICATION	5.944968651416272E-7	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999549955645	WITHOUT_CLASSIFICATION	4.500443556901111E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999995735654049	WITHOUT_CLASSIFICATION	4.2643459518196103E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999935649326182	WITHOUT_CLASSIFICATION	6.435067381867741E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999963344667708	WITHOUT_CLASSIFICATION	3.66553322914949E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999313619245301	WITHOUT_CLASSIFICATION	6.86380754698806E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992245482645	WITHOUT_CLASSIFICATION	7.754517355494368E-7	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999632854514	WITHOUT_CLASSIFICATION	3.6714548600486317E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999995515004451	WITHOUT_CLASSIFICATION	4.484995549334649E-7	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999986618171859	WITHOUT_CLASSIFICATION	1.3381828140881163E-6	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995456947233	WITHOUT_CLASSIFICATION	4.543052766641057E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999977988709585	WITHOUT_CLASSIFICATION	2.201129041471043E-6	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986213186363986	WITHOUT_CLASSIFICATION	0.0013786813636013906	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999946662107769	WITHOUT_CLASSIFICATION	5.333789223131566E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.998916660854657	WITHOUT_CLASSIFICATION	0.0010833391453429415	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999926076325996	WITHOUT_CLASSIFICATION	7.3923674004209754E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999997352210667	WITHOUT_CLASSIFICATION	2.6477893336310747E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999988447937249	WITHOUT_CLASSIFICATION	1.1552062751147342E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950841338916182	WITHOUT_CLASSIFICATION	0.0049158661083818	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994762211296059	WITHOUT_CLASSIFICATION	5.23778870394199E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754479445898	WITHOUT_CLASSIFICATION	2.45520554101728E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999988447937249	WITHOUT_CLASSIFICATION	1.1552062751147342E-6	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999981050631257	WITHOUT_CLASSIFICATION	1.894936874331461E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999992482294128	WITHOUT_CLASSIFICATION	7.517705872066533E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994277565526676	WITHOUT_CLASSIFICATION	5.722434473323269E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998380937290486	WITHOUT_CLASSIFICATION	0.0016190627095139549	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9843488007127215	WITHOUT_CLASSIFICATION	0.01565119928727856	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999884152534192	WITHOUT_CLASSIFICATION	1.158474658078362E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998035574375764	WITHOUT_CLASSIFICATION	1.9644256242357078E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999154755770528	WITHOUT_CLASSIFICATION	8.45244229470916E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996552148626	WITHOUT_CLASSIFICATION	3.4478513741844915E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999667801958	WITHOUT_CLASSIFICATION	3.3219804243875456E-8	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999754325699534	WITHOUT_CLASSIFICATION	2.456743004662155E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999996904527386	WITHOUT_CLASSIFICATION	3.0954726138488143E-7	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999955831386109	WITHOUT_CLASSIFICATION	4.416861389087912E-6	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999996982503773	WITHOUT_CLASSIFICATION	3.017496227235801E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999730008173067	WITHOUT_CLASSIFICATION	2.6999182693301165E-5	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999243423879791	WITHOUT_CLASSIFICATION	7.565761202091009E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999996493102582	WITHOUT_CLASSIFICATION	3.5068974182058115E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998275965493926	WITHOUT_CLASSIFICATION	1.724034506073583E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999950388101313	WITHOUT_CLASSIFICATION	4.961189868726609E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9996976251228694	WITHOUT_CLASSIFICATION	3.0237487713054447E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9997895556617259	WITHOUT_CLASSIFICATION	2.104443382741154E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999947062975807	WITHOUT_CLASSIFICATION	5.293702419393783E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999397606294858	WITHOUT_CLASSIFICATION	6.023937051417943E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907319255271	WITHOUT_CLASSIFICATION	1.0926807447284297E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9840987551925715	WITHOUT_CLASSIFICATION	0.01590124480742852	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999744836811366	WITHOUT_CLASSIFICATION	2.551631886333483E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999738060960884	WITHOUT_CLASSIFICATION	2.619390391159017E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999817624876371	WITHOUT_CLASSIFICATION	1.8237512362866318E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998251188656994	WITHOUT_CLASSIFICATION	1.748811343006178E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999401567624768	WITHOUT_CLASSIFICATION	5.984323752317414E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999533566890548	WITHOUT_CLASSIFICATION	4.664331094515066E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999395740740391	WITHOUT_CLASSIFICATION	6.042592596083248E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999940173816745	WITHOUT_CLASSIFICATION	5.9826183255800494E-6	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999987686838531	WITHOUT_CLASSIFICATION	1.2313161468936458E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998718935588756	WITHOUT_CLASSIFICATION	1.2810644112432358E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9960397793469626	WITHOUT_CLASSIFICATION	0.003960220653037294	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997237695201956	WITHOUT_CLASSIFICATION	2.762304798044409E-4	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863847605626	WITHOUT_CLASSIFICATION	1.3615239437396404E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9993593915396415	WITHOUT_CLASSIFICATION	6.406084603585224E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995403317872	WITHOUT_CLASSIFICATION	4.596682127788553E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9996236359997069	WITHOUT_CLASSIFICATION	3.763640002930844E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999945170773856	WITHOUT_CLASSIFICATION	5.482922614442494E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998754225946106	WITHOUT_CLASSIFICATION	1.245774053893475E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997400943552887	WITHOUT_CLASSIFICATION	2.599056447113652E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999978031831565	WITHOUT_CLASSIFICATION	2.196816843461469E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999992187993242	WITHOUT_CLASSIFICATION	7.812006758046667E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999667821440597	WITHOUT_CLASSIFICATION	3.3217855940380324E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999954096180764	WITHOUT_CLASSIFICATION	4.590381923471147E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999896646949992	WITHOUT_CLASSIFICATION	1.033530500088743E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9952701513580342	WITHOUT_CLASSIFICATION	0.004729848641965824	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999809768575	WITHOUT_CLASSIFICATION	1.9023142496214214E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999803318596864	WITHOUT_CLASSIFICATION	1.9668140313600344E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999993292655627	WITHOUT_CLASSIFICATION	6.707344373062564E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999929201070403	WITHOUT_CLASSIFICATION	7.07989295964614E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999993162266643	WITHOUT_CLASSIFICATION	6.837733357424465E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999317081093	WITHOUT_CLASSIFICATION	6.829189064649979E-8	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9976008160036549	WITHOUT_CLASSIFICATION	0.002399183996345171	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.7978478921176227	IMPLEMENTATION	0.2021521078823774	WITHOUT_CLASSIFICATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998097563738562	WITHOUT_CLASSIFICATION	1.9024362614387906E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999196492581994	WITHOUT_CLASSIFICATION	8.035074180065969E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996204843875	WITHOUT_CLASSIFICATION	3.795156125193699E-7	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9971334306538012	WITHOUT_CLASSIFICATION	0.0028665693461988255	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996596808704933	WITHOUT_CLASSIFICATION	3.4031912950671883E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999492003714023	WITHOUT_CLASSIFICATION	5.0799628597612926E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9997020959474908	WITHOUT_CLASSIFICATION	2.979040525092642E-4	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999022885944715	WITHOUT_CLASSIFICATION	9.771140552852153E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999952459696657	WITHOUT_CLASSIFICATION	4.7540303342941846E-6	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999161934398789	WITHOUT_CLASSIFICATION	8.380656012106325E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999041415226	WITHOUT_CLASSIFICATION	9.585847738019069E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999956020587855	WITHOUT_CLASSIFICATION	4.397941214616519E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999851984369	WITHOUT_CLASSIFICATION	1.4801563095585934E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9891055749621865	WITHOUT_CLASSIFICATION	0.010894425037813436	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9777684125704421	WITHOUT_CLASSIFICATION	0.022231587429557918	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999931449440156	WITHOUT_CLASSIFICATION	6.855055984305619E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999451744289306	WITHOUT_CLASSIFICATION	5.4825571069412154E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999768802010184	WITHOUT_CLASSIFICATION	2.311979898156181E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999925274806705	WITHOUT_CLASSIFICATION	7.472519329587154E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9996430027253607	WITHOUT_CLASSIFICATION	3.5699727463932014E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999968314536711	WITHOUT_CLASSIFICATION	3.168546328855278E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999957461975114	WITHOUT_CLASSIFICATION	4.253802488567125E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9983170351507543	WITHOUT_CLASSIFICATION	0.0016829648492457197	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9993397539109161	WITHOUT_CLASSIFICATION	6.602460890838969E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9996896772354137	WITHOUT_CLASSIFICATION	3.103227645863111E-4	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999996544893778	WITHOUT_CLASSIFICATION	3.4551062220092903E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995198706015564	WITHOUT_CLASSIFICATION	4.8012939844354415E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999837020589248	WITHOUT_CLASSIFICATION	1.6297941075240792E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999353201347315	WITHOUT_CLASSIFICATION	6.467986526838466E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999527862416623	WITHOUT_CLASSIFICATION	4.7213758337701973E-4	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999774331130725	WITHOUT_CLASSIFICATION	2.2566886927531646E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999577550834299	WITHOUT_CLASSIFICATION	4.224491657020698E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996230943289	WITHOUT_CLASSIFICATION	3.7690567106835167E-7	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999922633836441	WITHOUT_CLASSIFICATION	7.736616355823849E-6	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999947444539893	WITHOUT_CLASSIFICATION	5.2555460107475055E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998977396742	WITHOUT_CLASSIFICATION	1.0226032574790311E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999741098525267	WITHOUT_CLASSIFICATION	2.5890147473297105E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999990024	WITHOUT_CLASSIFICATION	9.976756203606135E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999806576627932	WITHOUT_CLASSIFICATION	1.9342337206808008E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997872039829648	WITHOUT_CLASSIFICATION	2.127960170352133E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998643454399221	WITHOUT_CLASSIFICATION	1.3565456007789224E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997452138654489	WITHOUT_CLASSIFICATION	2.5478613455105493E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996108080078305	WITHOUT_CLASSIFICATION	3.89191992169456E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999552580755686	WITHOUT_CLASSIFICATION	4.474192443129854E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997109770347954	WITHOUT_CLASSIFICATION	2.890229652045403E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999403413957997	WITHOUT_CLASSIFICATION	5.9658604200384024E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997404359183559	WITHOUT_CLASSIFICATION	2.5956408164411096E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999705134762344	WITHOUT_CLASSIFICATION	2.9486523765527625E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999970944660749	WITHOUT_CLASSIFICATION	2.9055339249969584E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998823445746408	WITHOUT_CLASSIFICATION	1.1765542535933438E-4	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999131708652835	WITHOUT_CLASSIFICATION	8.682913471652376E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999857569014472	WITHOUT_CLASSIFICATION	1.424309855278755E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9998823445746408	WITHOUT_CLASSIFICATION	1.1765542535933438E-4	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998223615676	WITHOUT_CLASSIFICATION	1.7763843235722132E-7	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999976066550847	WITHOUT_CLASSIFICATION	2.3933449153376184E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998840367776132	WITHOUT_CLASSIFICATION	1.1596322238683486E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9509751735325571	WITHOUT_CLASSIFICATION	0.0490248264674428	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999984522922568	WITHOUT_CLASSIFICATION	1.5477077431274637E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999994931662538	WITHOUT_CLASSIFICATION	5.068337463048405E-7	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9992431082736989	WITHOUT_CLASSIFICATION	7.568917263010114E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999985905301567	WITHOUT_CLASSIFICATION	1.4094698432272738E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9973864505709523	WITHOUT_CLASSIFICATION	0.002613549429047723	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997479612884003	WITHOUT_CLASSIFICATION	2.5203871159975915E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999300812935	WITHOUT_CLASSIFICATION	6.991870652016243E-8	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999930401046891	WITHOUT_CLASSIFICATION	6.959895310739014E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998703348528317	WITHOUT_CLASSIFICATION	1.2966514716825832E-4	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999772624966	WITHOUT_CLASSIFICATION	2.2737503423949237E-8	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999594577114516	WITHOUT_CLASSIFICATION	4.054228854834399E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9942166083868328	WITHOUT_CLASSIFICATION	0.005783391613167158	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9946027982726933	WITHOUT_CLASSIFICATION	0.005397201727306751	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9946027982726933	WITHOUT_CLASSIFICATION	0.005397201727306751	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999733170470896	WITHOUT_CLASSIFICATION	2.6682952910426347E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999735528389923	WITHOUT_CLASSIFICATION	2.6447161007784104E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999989355758836	WITHOUT_CLASSIFICATION	1.0644241163471217E-6	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9995766703451894	WITHOUT_CLASSIFICATION	4.2332965481056836E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999962207110223	WITHOUT_CLASSIFICATION	3.7792889777244682E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999655736132514	WITHOUT_CLASSIFICATION	3.442638674849333E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999818287112519	WITHOUT_CLASSIFICATION	1.8171288748080404E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999629492314	WITHOUT_CLASSIFICATION	3.705076866355282E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999997139111048	WITHOUT_CLASSIFICATION	2.8608889526336086E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999655765416842	WITHOUT_CLASSIFICATION	3.4423458315812217E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999885071309278	WITHOUT_CLASSIFICATION	1.1492869072112336E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999257613058	WITHOUT_CLASSIFICATION	7.423869419210345E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999914177990397	WITHOUT_CLASSIFICATION	8.582200960242225E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999692659749669	WITHOUT_CLASSIFICATION	3.073402503309581E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999997112935773	WITHOUT_CLASSIFICATION	2.8870642274297875E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999397606294858	WITHOUT_CLASSIFICATION	6.023937051417943E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9995586340870176	WITHOUT_CLASSIFICATION	4.4136591298237876E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999991845910301	WITHOUT_CLASSIFICATION	8.154089699002141E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999673286258177	WITHOUT_CLASSIFICATION	3.267137418230724E-5	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999545226748999	WITHOUT_CLASSIFICATION	4.547732510008062E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999974656987498	WITHOUT_CLASSIFICATION	2.5343012501662236E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.999969846109785	WITHOUT_CLASSIFICATION	3.015389021491899E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999957109507	WITHOUT_CLASSIFICATION	4.289049378555615E-9	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999944678462992	WITHOUT_CLASSIFICATION	5.532153700904257E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999223356371157	WITHOUT_CLASSIFICATION	7.766436288426788E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998227792797222	WITHOUT_CLASSIFICATION	1.7722072027778456E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999999304452	WITHOUT_CLASSIFICATION	6.955478512173478E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999785149524111	WITHOUT_CLASSIFICATION	2.148504758889857E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9998778238040134	WITHOUT_CLASSIFICATION	1.221761959866348E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.999993319115488	WITHOUT_CLASSIFICATION	6.680884511956094E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999475782964491	WITHOUT_CLASSIFICATION	5.2421703550911626E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999992264106934	WITHOUT_CLASSIFICATION	7.735893066016217E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999924890366177	WITHOUT_CLASSIFICATION	7.510963382356581E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999939826087848	WITHOUT_CLASSIFICATION	6.017391215267155E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999972563513764	WITHOUT_CLASSIFICATION	2.743648623515291E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999814503312572	WITHOUT_CLASSIFICATION	1.8549668742807903E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998581139775348	WITHOUT_CLASSIFICATION	1.418860224652579E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999889889673396	WITHOUT_CLASSIFICATION	1.1011032660517665E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999936823603203	WITHOUT_CLASSIFICATION	6.317639679779809E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999992077036414	WITHOUT_CLASSIFICATION	7.922963585925614E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999931110906003	WITHOUT_CLASSIFICATION	6.888909399723213E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999992845951614	WITHOUT_CLASSIFICATION	7.154048385594969E-7	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999540006291823	WITHOUT_CLASSIFICATION	4.5999370817879886E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999927660417369	WITHOUT_CLASSIFICATION	7.233958263027042E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999972632861048	WITHOUT_CLASSIFICATION	2.7367138951271796E-6	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999986408537042	WITHOUT_CLASSIFICATION	1.3591462958387347E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827259286901	WITHOUT_CLASSIFICATION	1.7274071309959017E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895948670519	WITHOUT_CLASSIFICATION	1.0405132948190828E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489216757157	WITHOUT_CLASSIFICATION	5.107832428431398E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9964696827962921	WITHOUT_CLASSIFICATION	0.003530317203707904	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999949417216016	WITHOUT_CLASSIFICATION	5.058278398317833E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963391338248	WITHOUT_CLASSIFICATION	3.660866175103253E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999991792122916	WITHOUT_CLASSIFICATION	8.207877084069708E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999891824935276	WITHOUT_CLASSIFICATION	1.0817506472318295E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757143034925	WITHOUT_CLASSIFICATION	2.4285696507490106E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999891824935276	WITHOUT_CLASSIFICATION	1.0817506472318295E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999795422976083	WITHOUT_CLASSIFICATION	2.045770239164085E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999957753560155	WITHOUT_CLASSIFICATION	4.2246439845798394E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9998809367364393	WITHOUT_CLASSIFICATION	1.1906326356077056E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999504439598652	WITHOUT_CLASSIFICATION	4.9556040134746856E-5	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999664068294053	WITHOUT_CLASSIFICATION	3.359317059475723E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999987324653004	WITHOUT_CLASSIFICATION	1.2675346996560064E-6	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999577516372045	WITHOUT_CLASSIFICATION	4.224836279551843E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999992058604057	WITHOUT_CLASSIFICATION	7.941395943143278E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999917649614583	WITHOUT_CLASSIFICATION	8.235038541624267E-6	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9948906610872468	WITHOUT_CLASSIFICATION	0.005109338912753224	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999984413535906	WITHOUT_CLASSIFICATION	1.5586464093448005E-6	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9987567698418979	WITHOUT_CLASSIFICATION	0.0012432301581020687	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999843012108703	WITHOUT_CLASSIFICATION	1.5698789129645402E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999873780411928	WITHOUT_CLASSIFICATION	1.2621958807329085E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9947375122532134	WITHOUT_CLASSIFICATION	0.005262487746786609	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999897903563911	WITHOUT_CLASSIFICATION	1.020964360891126E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999877276524034	WITHOUT_CLASSIFICATION	1.227234759651164E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999877276524034	WITHOUT_CLASSIFICATION	1.227234759651164E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999199767264313	WITHOUT_CLASSIFICATION	8.0023273568783E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997441455756	WITHOUT_CLASSIFICATION	2.5585442441827055E-7	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999563343328	WITHOUT_CLASSIFICATION	4.3665667195409434E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999961784877168	WITHOUT_CLASSIFICATION	3.821512283176062E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999997055205216	WITHOUT_CLASSIFICATION	2.9447947835340945E-7	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999117132396428	WITHOUT_CLASSIFICATION	8.828676035720667E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.951904590244984	IMPLEMENTATION	0.04809540975501599	WITHOUT_CLASSIFICATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999985542810323	WITHOUT_CLASSIFICATION	1.4457189676731685E-6	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999986540020013	WITHOUT_CLASSIFICATION	1.3459979987524268E-6	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999862200095192	WITHOUT_CLASSIFICATION	1.3779990480804362E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999971976520996	WITHOUT_CLASSIFICATION	2.802347900396341E-6	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999997134596088	WITHOUT_CLASSIFICATION	2.8654039120773815E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999048163658757	WITHOUT_CLASSIFICATION	9.51836341243049E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999502234114624	WITHOUT_CLASSIFICATION	4.977658853745951E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997779240708466	WITHOUT_CLASSIFICATION	2.2207592915336703E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999092943878	WITHOUT_CLASSIFICATION	9.070561227704564E-8	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999941696644212	WITHOUT_CLASSIFICATION	5.830335578769147E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994249416945931	WITHOUT_CLASSIFICATION	5.750583054069216E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9997811512879142	WITHOUT_CLASSIFICATION	2.1884871208568691E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999907664114355	WITHOUT_CLASSIFICATION	9.233588564521182E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999859611441315	WITHOUT_CLASSIFICATION	1.4038855868421163E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9996080875250737	WITHOUT_CLASSIFICATION	3.9191247492628673E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999513055102689	WITHOUT_CLASSIFICATION	4.869448973109511E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995080672564128	WITHOUT_CLASSIFICATION	4.919327435872155E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9977549082065025	WITHOUT_CLASSIFICATION	0.002245091793497447	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999992050961293	WITHOUT_CLASSIFICATION	7.949038706922772E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999956419666289	WITHOUT_CLASSIFICATION	4.358033371072429E-6	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9974239910310762	WITHOUT_CLASSIFICATION	0.0025760089689239336	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999897672059237	WITHOUT_CLASSIFICATION	1.0232794076404203E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999990737438526	WITHOUT_CLASSIFICATION	9.262561473754738E-7	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999995039334834	WITHOUT_CLASSIFICATION	4.960665166728934E-7	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997233121433053	WITHOUT_CLASSIFICATION	2.7668785669466997E-4	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9989561993363095	WITHOUT_CLASSIFICATION	0.0010438006636904044	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999635912644925	WITHOUT_CLASSIFICATION	3.6408735507478416E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995317311952012	WITHOUT_CLASSIFICATION	4.6826880479875307E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999712457836912	WITHOUT_CLASSIFICATION	2.875421630882376E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999935938911895	WITHOUT_CLASSIFICATION	6.406108810571054E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999191630496386	WITHOUT_CLASSIFICATION	8.083695036139381E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999967527423976	WITHOUT_CLASSIFICATION	3.247257602481211E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999989171674762	WITHOUT_CLASSIFICATION	1.082832523797876E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999992366141256	WITHOUT_CLASSIFICATION	7.633858744713165E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999711671779	WITHOUT_CLASSIFICATION	2.8832822096214096E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999846607959725	WITHOUT_CLASSIFICATION	1.5339204027602623E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.7819663379558304	WITHOUT_CLASSIFICATION	0.21803366204416966	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991260506264066	WITHOUT_CLASSIFICATION	8.739493735932947E-4	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9820231547476013	WITHOUT_CLASSIFICATION	0.0179768452523987	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8044309280033907	IMPLEMENTATION	0.19556907199660925	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997192879692	WITHOUT_CLASSIFICATION	2.8071203087222533E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999726001155305	WITHOUT_CLASSIFICATION	2.7399884469476025E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998190177208266	WITHOUT_CLASSIFICATION	1.809822791734501E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999664433253	WITHOUT_CLASSIFICATION	3.3556674686047047E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.99999865447007	WITHOUT_CLASSIFICATION	1.3455299300438846E-6	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999997817235237	WITHOUT_CLASSIFICATION	2.1827647630907247E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998301130577365	WITHOUT_CLASSIFICATION	1.6988694226350922E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999388025938709	WITHOUT_CLASSIFICATION	6.119740612914152E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998336683777	WITHOUT_CLASSIFICATION	1.6633162232024917E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998336683777	WITHOUT_CLASSIFICATION	1.6633162232024917E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999990384570479	WITHOUT_CLASSIFICATION	9.615429521103545E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998491594506538	WITHOUT_CLASSIFICATION	1.5084054934619122E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999934132262207	WITHOUT_CLASSIFICATION	6.586773779267057E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999496472156563	WITHOUT_CLASSIFICATION	5.035278434379554E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998518749738641	WITHOUT_CLASSIFICATION	1.4812502613600754E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9986548396180378	WITHOUT_CLASSIFICATION	0.0013451603819621693	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999708260954716	WITHOUT_CLASSIFICATION	2.917390452840364E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999939545908232	WITHOUT_CLASSIFICATION	6.045409176812915E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999994597502757	WITHOUT_CLASSIFICATION	5.402497242573538E-7	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999469029932363	WITHOUT_CLASSIFICATION	5.309700676364461E-5	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999914389029294	WITHOUT_CLASSIFICATION	8.561097070555973E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997508964045261	WITHOUT_CLASSIFICATION	2.4910359547384626E-4	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999665043913122	WITHOUT_CLASSIFICATION	3.349560868782268E-5	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996494060249	WITHOUT_CLASSIFICATION	3.50593975052673E-7	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999960577762396	WITHOUT_CLASSIFICATION	3.942223760382571E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999752261478094	WITHOUT_CLASSIFICATION	2.4773852190515022E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999896123175688	WITHOUT_CLASSIFICATION	1.0387682431249084E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9998992705017204	WITHOUT_CLASSIFICATION	1.0072949827954109E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999974635404326	WITHOUT_CLASSIFICATION	2.5364595673477487E-6	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9984959964838968	WITHOUT_CLASSIFICATION	0.0015040035161032355	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999685315174	WITHOUT_CLASSIFICATION	3.14684824968963E-8	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999964161297572	WITHOUT_CLASSIFICATION	3.583870242862059E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997119408253013	WITHOUT_CLASSIFICATION	2.880591746987138E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994848637071049	WITHOUT_CLASSIFICATION	5.151362928951281E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9993271470481842	WITHOUT_CLASSIFICATION	6.728529518158141E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8949022265642238	WITHOUT_CLASSIFICATION	0.10509777343577624	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9841224231331205	WITHOUT_CLASSIFICATION	0.015877576866879566	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993747679756301	WITHOUT_CLASSIFICATION	6.25232024370004E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999457755411914	WITHOUT_CLASSIFICATION	5.422445880870271E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997119408253013	WITHOUT_CLASSIFICATION	2.880591746987138E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999728780896336	WITHOUT_CLASSIFICATION	2.7121910366302948E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999943580893	WITHOUT_CLASSIFICATION	5.641910718757557E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999537582083468	WITHOUT_CLASSIFICATION	4.6241791653144365E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999827783286279	WITHOUT_CLASSIFICATION	1.7221671372055253E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999929332727245	WITHOUT_CLASSIFICATION	7.066727275530191E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9995262436732251	WITHOUT_CLASSIFICATION	4.737563267749169E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999791165928961	WITHOUT_CLASSIFICATION	2.0883407103887947E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998242133966	WITHOUT_CLASSIFICATION	1.7578660330653034E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9325233618139697	WITHOUT_CLASSIFICATION	0.06747663818603034	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999827783286279	WITHOUT_CLASSIFICATION	1.7221671372055253E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999974665313995	WITHOUT_CLASSIFICATION	2.533468600451549E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997459055081	WITHOUT_CLASSIFICATION	2.540944919621867E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9985599992985492	WITHOUT_CLASSIFICATION	0.001440000701450868	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997277035589787	WITHOUT_CLASSIFICATION	2.72296441021309E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9971990291965421	WITHOUT_CLASSIFICATION	0.0028009708034579524	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999971976520996	WITHOUT_CLASSIFICATION	2.802347900396341E-6	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999833324508083	WITHOUT_CLASSIFICATION	1.6667549191680117E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999901573376413	WITHOUT_CLASSIFICATION	9.842662358696288E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999829288955624	WITHOUT_CLASSIFICATION	1.7071104437561785E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9921225747374897	WITHOUT_CLASSIFICATION	0.007877425262510415	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999737535723	WITHOUT_CLASSIFICATION	2.6246427688093497E-8	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999645091141811	WITHOUT_CLASSIFICATION	3.549088581886394E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999818845522189	WITHOUT_CLASSIFICATION	1.811544778101858E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999998627380248	WITHOUT_CLASSIFICATION	1.3726197520507331E-6	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999991977290276	WITHOUT_CLASSIFICATION	8.022709723950783E-6	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996680006180502	WITHOUT_CLASSIFICATION	3.319993819498579E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996538484681082	WITHOUT_CLASSIFICATION	3.461515318918078E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999997892014753	WITHOUT_CLASSIFICATION	2.1079852479833528E-7	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999994411616182	WITHOUT_CLASSIFICATION	5.588383817768322E-7	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9996536728292978	WITHOUT_CLASSIFICATION	3.4632717070213126E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999971720809716	WITHOUT_CLASSIFICATION	2.8279190282554254E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999979258900186	WITHOUT_CLASSIFICATION	2.0741099813882433E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997426379596661	WITHOUT_CLASSIFICATION	2.573620403338021E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999924139648766	WITHOUT_CLASSIFICATION	7.5860351233695566E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999500608724642	WITHOUT_CLASSIFICATION	4.9939127535886234E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998729034139932	WITHOUT_CLASSIFICATION	1.2709658600685805E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999402403201045	WITHOUT_CLASSIFICATION	5.9759679895383654E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999963919687823	WITHOUT_CLASSIFICATION	3.608031217652776E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999982379013566	WITHOUT_CLASSIFICATION	1.76209864345309E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999696945737	WITHOUT_CLASSIFICATION	3.0305426319799303E-8	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9989886658443722	WITHOUT_CLASSIFICATION	0.001011334155627818	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999576576632887	WITHOUT_CLASSIFICATION	4.234233671132571E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999517820144034	WITHOUT_CLASSIFICATION	4.821798559663246E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843886813453	WITHOUT_CLASSIFICATION	1.5611318654663135E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993441940298	WITHOUT_CLASSIFICATION	6.558059702037294E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996139371336555	WITHOUT_CLASSIFICATION	3.8606286634450525E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998771012143327	WITHOUT_CLASSIFICATION	1.2289878566727926E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999968903483134	WITHOUT_CLASSIFICATION	3.1096516866159957E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998302122799	WITHOUT_CLASSIFICATION	1.6978772024730792E-7	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9788554607103995	WITHOUT_CLASSIFICATION	0.02114453928960046	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999858012170684	WITHOUT_CLASSIFICATION	1.4198782931657879E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999877950121484	WITHOUT_CLASSIFICATION	1.220498785149285E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999771346572257	WITHOUT_CLASSIFICATION	2.286534277426961E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997219886094377	WITHOUT_CLASSIFICATION	2.780113905622249E-4	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999892963614555	WITHOUT_CLASSIFICATION	1.0703638544580637E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999815183593838	WITHOUT_CLASSIFICATION	1.848164061624792E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999555590864772	WITHOUT_CLASSIFICATION	4.4440913522962965E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999033638796183	WITHOUT_CLASSIFICATION	9.663612038173736E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999904597083474	WITHOUT_CLASSIFICATION	9.540291652633286E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999024572565	WITHOUT_CLASSIFICATION	9.754274350325029E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999952824815904	WITHOUT_CLASSIFICATION	4.7175184096045396E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999536911906195	WITHOUT_CLASSIFICATION	4.630880938052853E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9995343784811295	WITHOUT_CLASSIFICATION	4.656215188705668E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9751755458043813	WITHOUT_CLASSIFICATION	0.024824454195618805	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999820728369689	WITHOUT_CLASSIFICATION	1.792716303110773E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999804669222073	WITHOUT_CLASSIFICATION	1.9533077792710466E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999986847917706	WITHOUT_CLASSIFICATION	1.3152082294809853E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999866911220561	WITHOUT_CLASSIFICATION	1.3308877943891978E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999084761813397	WITHOUT_CLASSIFICATION	9.1523818660267E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999971132205033	WITHOUT_CLASSIFICATION	2.886779496703832E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9984709045852681	WITHOUT_CLASSIFICATION	0.0015290954147319765	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.997781272948572	WITHOUT_CLASSIFICATION	0.0022187270514279892	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843886813453	WITHOUT_CLASSIFICATION	1.5611318654663135E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998985392456093	WITHOUT_CLASSIFICATION	1.0146075439068689E-4	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999977959480023	WITHOUT_CLASSIFICATION	2.2040519977232353E-6	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.999999225816969	WITHOUT_CLASSIFICATION	7.741830309496118E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999985623929487	WITHOUT_CLASSIFICATION	1.4376070512970231E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999946447704167	WITHOUT_CLASSIFICATION	5.3552295833653925E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999853494908894	WITHOUT_CLASSIFICATION	1.465050911061836E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945698599926	WITHOUT_CLASSIFICATION	5.430140007364936E-6	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999770052298	WITHOUT_CLASSIFICATION	2.299477026353426E-8	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.99999976854982	WITHOUT_CLASSIFICATION	2.3145017995299625E-7	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999922759936207	WITHOUT_CLASSIFICATION	7.7240063792692E-6	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999658434905345	WITHOUT_CLASSIFICATION	3.415650946548434E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999868414431436	WITHOUT_CLASSIFICATION	1.3158556856407804E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999979778290743	WITHOUT_CLASSIFICATION	2.022170925769981E-6	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999963038951486	WITHOUT_CLASSIFICATION	3.696104851369548E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999795422976083	WITHOUT_CLASSIFICATION	2.045770239164085E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999991645834191	WITHOUT_CLASSIFICATION	8.354165809037085E-7	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999993630864219	WITHOUT_CLASSIFICATION	6.369135781379137E-7	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999989991960679	WITHOUT_CLASSIFICATION	1.0008039320767186E-6	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999843737948653	WITHOUT_CLASSIFICATION	1.5626205134829654E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998906002142	WITHOUT_CLASSIFICATION	1.0939978573829467E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.997922251947368	WITHOUT_CLASSIFICATION	0.0020777480526319443	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.997922251947368	WITHOUT_CLASSIFICATION	0.0020777480526319443	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999779263781099	WITHOUT_CLASSIFICATION	2.2073621890108912E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999593079892	WITHOUT_CLASSIFICATION	4.069201071224643E-8	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9992154153492124	WITHOUT_CLASSIFICATION	7.845846507874665E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998231352459371	WITHOUT_CLASSIFICATION	1.7686475406287675E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999445055139645	WITHOUT_CLASSIFICATION	5.549448603539314E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999760160640798	WITHOUT_CLASSIFICATION	2.3983935920208718E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999986632484926	WITHOUT_CLASSIFICATION	1.3367515073906528E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999240121566	WITHOUT_CLASSIFICATION	7.598784332596324E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999240121566	WITHOUT_CLASSIFICATION	7.598784332596324E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998216098166502	WITHOUT_CLASSIFICATION	1.7839018334974907E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999905940579835	WITHOUT_CLASSIFICATION	9.405942016366453E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999777650419657	WITHOUT_CLASSIFICATION	2.2234958034256108E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984296106258	WITHOUT_CLASSIFICATION	1.5703893742619704E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984296106258	WITHOUT_CLASSIFICATION	1.5703893742619704E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984296106258	WITHOUT_CLASSIFICATION	1.5703893742619704E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999933854520766	WITHOUT_CLASSIFICATION	6.614547923453084E-6	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998339973305	WITHOUT_CLASSIFICATION	1.6600266949332975E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9788684375639046	WITHOUT_CLASSIFICATION	0.021131562436095333	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997072917845266	WITHOUT_CLASSIFICATION	2.9270821547347763E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999983435170516	WITHOUT_CLASSIFICATION	1.6564829482982618E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9998457638814074	WITHOUT_CLASSIFICATION	1.5423611859268735E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997632545072853	WITHOUT_CLASSIFICATION	2.3674549271475738E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996453770523509	WITHOUT_CLASSIFICATION	3.5462294764910054E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999989255336386	WITHOUT_CLASSIFICATION	1.0744663615015802E-6	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999572377290242	WITHOUT_CLASSIFICATION	4.276227097575506E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999983202521748	WITHOUT_CLASSIFICATION	1.6797478251908553E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999988134041326	WITHOUT_CLASSIFICATION	1.1865958673837423E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999783230945006	WITHOUT_CLASSIFICATION	2.1676905499411127E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999976997206816	WITHOUT_CLASSIFICATION	2.3002793184539224E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999928424295955	WITHOUT_CLASSIFICATION	7.157570404542303E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999876638665167	WITHOUT_CLASSIFICATION	1.2336133483186615E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999982371713106	WITHOUT_CLASSIFICATION	1.7628286893248004E-6	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999982371713106	WITHOUT_CLASSIFICATION	1.7628286893248004E-6	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999983413712207	WITHOUT_CLASSIFICATION	1.658628779387323E-6	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999983413712207	WITHOUT_CLASSIFICATION	1.658628779387323E-6	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999982370882279	WITHOUT_CLASSIFICATION	1.7629117721040697E-6	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999935258864432	WITHOUT_CLASSIFICATION	6.474113556826627E-6	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999935258864432	WITHOUT_CLASSIFICATION	6.474113556826627E-6	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999959645739164	WITHOUT_CLASSIFICATION	4.035426083597016E-6	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999945410908652	WITHOUT_CLASSIFICATION	5.458909134874796E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998884077399388	WITHOUT_CLASSIFICATION	1.1159226006122989E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.997922251947368	WITHOUT_CLASSIFICATION	0.0020777480526319443	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999169681030556	WITHOUT_CLASSIFICATION	8.303189694441154E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999945410908652	WITHOUT_CLASSIFICATION	5.458909134874796E-6	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998548345769328	WITHOUT_CLASSIFICATION	1.4516542306712002E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997412629142273	WITHOUT_CLASSIFICATION	2.5873708577266044E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999982036081814	WITHOUT_CLASSIFICATION	1.7963918186475582E-6	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999983346307766	WITHOUT_CLASSIFICATION	1.6653692234240321E-6	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999978969489063	WITHOUT_CLASSIFICATION	2.103051093664003E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997976347965919	WITHOUT_CLASSIFICATION	2.0236520340815274E-4	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999938933182717	WITHOUT_CLASSIFICATION	6.106681728295024E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9991865923498173	WITHOUT_CLASSIFICATION	8.134076501827075E-4	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999249261595878	WITHOUT_CLASSIFICATION	7.50738404121884E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999998090221194	WITHOUT_CLASSIFICATION	1.9097788052461848E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999995608875377	WITHOUT_CLASSIFICATION	4.391124623012211E-7	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999931592872054	WITHOUT_CLASSIFICATION	6.840712794622001E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999906446315804	WITHOUT_CLASSIFICATION	9.355368419661987E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999904238254617	WITHOUT_CLASSIFICATION	9.576174538280971E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9154891121422762	WITHOUT_CLASSIFICATION	0.08451088785772365	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999534374892774	WITHOUT_CLASSIFICATION	4.6562510722606646E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999048691289	WITHOUT_CLASSIFICATION	9.513087110616711E-8	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999981545333627	WITHOUT_CLASSIFICATION	1.8454666373180055E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999981545333627	WITHOUT_CLASSIFICATION	1.8454666373180055E-6	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999994607365155	WITHOUT_CLASSIFICATION	5.39263484583632E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997512967244	WITHOUT_CLASSIFICATION	2.487032755504214E-7	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999992089117663	WITHOUT_CLASSIFICATION	7.910882338328532E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9992937405504134	WITHOUT_CLASSIFICATION	7.062594495866006E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999944824021804	WITHOUT_CLASSIFICATION	5.517597819662282E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998640768816932	WITHOUT_CLASSIFICATION	1.359231183068748E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9992996896567804	WITHOUT_CLASSIFICATION	7.003103432196104E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999909018522928	WITHOUT_CLASSIFICATION	9.09814770713685E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998616436980562	WITHOUT_CLASSIFICATION	1.3835630194380236E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998464639293	WITHOUT_CLASSIFICATION	1.5353607072255994E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999984378107085	WITHOUT_CLASSIFICATION	1.5621892914493345E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999868414431436	WITHOUT_CLASSIFICATION	1.3158556856407804E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999989937389661	WITHOUT_CLASSIFICATION	1.0062610339194439E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999587885631642	WITHOUT_CLASSIFICATION	4.121143683578313E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999993313270596	WITHOUT_CLASSIFICATION	6.686729404023108E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999577259467893	WITHOUT_CLASSIFICATION	4.227405321067175E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965148349657	WITHOUT_CLASSIFICATION	3.4851650343281987E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965148349657	WITHOUT_CLASSIFICATION	3.4851650343281987E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997708442004737	WITHOUT_CLASSIFICATION	2.2915579952632425E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9998832548455868	WITHOUT_CLASSIFICATION	1.1674515441319568E-4	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9997846662040604	WITHOUT_CLASSIFICATION	2.153337959396603E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999449029831987	WITHOUT_CLASSIFICATION	5.5097016801183394E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999986043143286	WITHOUT_CLASSIFICATION	1.3956856712897753E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999569102359406	WITHOUT_CLASSIFICATION	4.308976405942568E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9954602949092268	WITHOUT_CLASSIFICATION	0.00453970509077324	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999978025298962	WITHOUT_CLASSIFICATION	2.1974701038548606E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9945926721905781	WITHOUT_CLASSIFICATION	0.005407327809421904	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999988771408103	WITHOUT_CLASSIFICATION	1.1228591897231499E-6	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999513451158	WITHOUT_CLASSIFICATION	4.8654884341588685E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999978025298962	WITHOUT_CLASSIFICATION	2.1974701038548606E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999943824495875	WITHOUT_CLASSIFICATION	5.617550412512864E-6	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999557853150092	WITHOUT_CLASSIFICATION	4.4214684990768406E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999995609346142	WITHOUT_CLASSIFICATION	4.390653858455394E-7	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999991608333763	WITHOUT_CLASSIFICATION	8.391666238101684E-7	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999287747674	WITHOUT_CLASSIFICATION	7.122523255396082E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999977438131871	WITHOUT_CLASSIFICATION	2.256186812908491E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999074582307264	WITHOUT_CLASSIFICATION	9.25417692735855E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999920249819428	WITHOUT_CLASSIFICATION	7.975018057128235E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999989345423929	WITHOUT_CLASSIFICATION	1.0654576071824495E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999966707106391	WITHOUT_CLASSIFICATION	3.329289360892244E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.997687145178404	WITHOUT_CLASSIFICATION	0.0023128548215960616	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999728969544	WITHOUT_CLASSIFICATION	2.710304559207236E-7	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999956497292588	WITHOUT_CLASSIFICATION	4.350270741153774E-6	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994765265362	WITHOUT_CLASSIFICATION	5.234734636746515E-7	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998526430351861	WITHOUT_CLASSIFICATION	1.4735696481392273E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999972172712834	WITHOUT_CLASSIFICATION	2.7827287165465866E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999839585777308	WITHOUT_CLASSIFICATION	1.604142226928155E-5	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997438776671838	WITHOUT_CLASSIFICATION	2.561223328162345E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998679742169894	WITHOUT_CLASSIFICATION	1.32025783010629E-4	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999083105175525	WITHOUT_CLASSIFICATION	9.168948244755967E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999988906134762	WITHOUT_CLASSIFICATION	1.1093865237859924E-6	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999419821479155	WITHOUT_CLASSIFICATION	5.801785208450231E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999945467571647	WITHOUT_CLASSIFICATION	5.45324283536369E-6	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999976504088901	WITHOUT_CLASSIFICATION	2.3495911098255346E-6	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999963062387651	WITHOUT_CLASSIFICATION	3.693761234863849E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9974082859169386	WITHOUT_CLASSIFICATION	0.002591714083061268	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999908299418535	WITHOUT_CLASSIFICATION	9.170058146515098E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9996173923386771	WITHOUT_CLASSIFICATION	3.8260766132288814E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999441210048	WITHOUT_CLASSIFICATION	5.587899520426352E-7	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999154680363467	WITHOUT_CLASSIFICATION	8.453196365324713E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999248332517	WITHOUT_CLASSIFICATION	7.516674823641899E-8	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999819456696427	WITHOUT_CLASSIFICATION	1.805433035730374E-5	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999979077075564	WITHOUT_CLASSIFICATION	2.092292443601904E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999995462027281	WITHOUT_CLASSIFICATION	4.537972719322767E-7	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999933770317678	WITHOUT_CLASSIFICATION	6.622968232204497E-6	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997408441753772	WITHOUT_CLASSIFICATION	2.5915582462274857E-4	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999993904573689	WITHOUT_CLASSIFICATION	6.09542631106118E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999979783404	WITHOUT_CLASSIFICATION	2.0216595906227995E-8	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995337941844	WITHOUT_CLASSIFICATION	4.662058155399691E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999950285467969	WITHOUT_CLASSIFICATION	4.97145320309155E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999874365636714	WITHOUT_CLASSIFICATION	1.2563436328532936E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999980733604337	WITHOUT_CLASSIFICATION	1.9266395662950996E-5	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999970767951889	WITHOUT_CLASSIFICATION	2.9232048110973952E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998804628968	WITHOUT_CLASSIFICATION	1.1953710329794317E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999996014494945	WITHOUT_CLASSIFICATION	3.9855050544118305E-7	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999977875607086	WITHOUT_CLASSIFICATION	2.2124392914435786E-6	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999962549027037	WITHOUT_CLASSIFICATION	3.745097296292292E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999912540557876	WITHOUT_CLASSIFICATION	8.745944212313759E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999980414458707	WITHOUT_CLASSIFICATION	1.958554129309438E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999982641623154	WITHOUT_CLASSIFICATION	1.735837684603356E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175486822961	WITHOUT_CLASSIFICATION	1.8245131770400498E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999871381451253	WITHOUT_CLASSIFICATION	1.2861854874804893E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999999971215012	WITHOUT_CLASSIFICATION	2.8784987948009414E-8	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999531844178	WITHOUT_CLASSIFICATION	4.681558224076704E-8	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999986852454497	WITHOUT_CLASSIFICATION	1.3147545503750056E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999773026607227	WITHOUT_CLASSIFICATION	2.2697339277297113E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9898059851790952	WITHOUT_CLASSIFICATION	0.010194014820904767	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999583100182778	WITHOUT_CLASSIFICATION	4.168998172218153E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.999989124736817	WITHOUT_CLASSIFICATION	1.0875263183035461E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999346554501	WITHOUT_CLASSIFICATION	6.534454988945007E-8	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999988714548724	WITHOUT_CLASSIFICATION	1.1285451275375445E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999015640467926	WITHOUT_CLASSIFICATION	9.843595320736902E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999517595856345	WITHOUT_CLASSIFICATION	4.8240414365434996E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999615580175	WITHOUT_CLASSIFICATION	3.844198249747899E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999994560533974	WITHOUT_CLASSIFICATION	5.439466025757197E-7	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998060057590538	WITHOUT_CLASSIFICATION	1.9399424094623566E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175486822961	WITHOUT_CLASSIFICATION	1.8245131770400498E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999539982984109	WITHOUT_CLASSIFICATION	4.6001701589216914E-5	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999542070362686	WITHOUT_CLASSIFICATION	4.579296373136332E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999987531513397	WITHOUT_CLASSIFICATION	1.2468486603044459E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999968357426816	WITHOUT_CLASSIFICATION	3.1642573183471678E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9993268581859291	WITHOUT_CLASSIFICATION	6.731418140708058E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999997141765812	WITHOUT_CLASSIFICATION	2.8582341879555574E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9945926721905781	WITHOUT_CLASSIFICATION	0.005407327809421904	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999077192607032	WITHOUT_CLASSIFICATION	9.228073929678058E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999933770317678	WITHOUT_CLASSIFICATION	6.622968232204497E-6	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999631147565567	WITHOUT_CLASSIFICATION	3.6885243443267494E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999962330568543	WITHOUT_CLASSIFICATION	3.766943145848382E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991656458802	WITHOUT_CLASSIFICATION	8.343541198054831E-7	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999972354287875	WITHOUT_CLASSIFICATION	2.764571212561016E-6	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9996856605281351	WITHOUT_CLASSIFICATION	3.14339471864812E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999842430183739	WITHOUT_CLASSIFICATION	1.575698162613209E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999883446504719	WITHOUT_CLASSIFICATION	1.1655349528013159E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999465785631	WITHOUT_CLASSIFICATION	5.342143690265887E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999656359876506	WITHOUT_CLASSIFICATION	3.436401234930382E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999996585429869	WITHOUT_CLASSIFICATION	3.414570131185701E-7	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999121745224757	WITHOUT_CLASSIFICATION	8.782547752418864E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999533221330529	WITHOUT_CLASSIFICATION	4.667786694704518E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999997003946323	WITHOUT_CLASSIFICATION	2.9960536770763913E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999997003946323	WITHOUT_CLASSIFICATION	2.9960536770763913E-6	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999992317731994	WITHOUT_CLASSIFICATION	7.682268005893933E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998575074350122	WITHOUT_CLASSIFICATION	1.4249256498781955E-4	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999763415062	WITHOUT_CLASSIFICATION	2.365849390650258E-8	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999916582544442	WITHOUT_CLASSIFICATION	8.341745555865122E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999300719901	WITHOUT_CLASSIFICATION	6.992800993280965E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998698459633686	WITHOUT_CLASSIFICATION	1.3015403663148504E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999981615483	WITHOUT_CLASSIFICATION	1.8384517333667643E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999958103169413	WITHOUT_CLASSIFICATION	4.189683058738144E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999987501961403	WITHOUT_CLASSIFICATION	1.2498038597578239E-6	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999995784018657	WITHOUT_CLASSIFICATION	4.215981342900443E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998586079067883	WITHOUT_CLASSIFICATION	1.413920932116993E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9997868226387573	WITHOUT_CLASSIFICATION	2.1317736124268648E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999817142584968	WITHOUT_CLASSIFICATION	1.8285741503235002E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999992702397907	WITHOUT_CLASSIFICATION	7.297602093397702E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995716819803454	WITHOUT_CLASSIFICATION	4.283180196546036E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995226422734	WITHOUT_CLASSIFICATION	4.77357726607003E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998975291736376	WITHOUT_CLASSIFICATION	1.024708263623162E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999879431989	WITHOUT_CLASSIFICATION	1.2056801015230302E-8	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999948761762	WITHOUT_CLASSIFICATION	5.123823791031757E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999964884212404	WITHOUT_CLASSIFICATION	3.511578759546346E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999994363328973	WITHOUT_CLASSIFICATION	5.636671027368894E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999962944618	WITHOUT_CLASSIFICATION	3.7055382084947187E-8	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999902308688551	WITHOUT_CLASSIFICATION	9.769131144972388E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9992308538540834	WITHOUT_CLASSIFICATION	7.691461459165841E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.997293553727935	WITHOUT_CLASSIFICATION	0.0027064462720649005	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994828726848752	WITHOUT_CLASSIFICATION	5.171273151247897E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999706332816508	WITHOUT_CLASSIFICATION	2.9366718349244746E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999998920465232	WITHOUT_CLASSIFICATION	1.0795347683813898E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999988384708286	WITHOUT_CLASSIFICATION	1.1615291714867844E-6	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999482217144136	WITHOUT_CLASSIFICATION	5.177828558655235E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9997974857813319	WITHOUT_CLASSIFICATION	2.0251421866818866E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999945906598937	WITHOUT_CLASSIFICATION	5.409340106257855E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999934597397022	WITHOUT_CLASSIFICATION	6.5402602978057885E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9974700938519696	WITHOUT_CLASSIFICATION	0.0025299061480303555	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999534843907852	WITHOUT_CLASSIFICATION	4.651560921463601E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999958447278963	WITHOUT_CLASSIFICATION	4.1552721037266534E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999813320567776	WITHOUT_CLASSIFICATION	1.8667943222360845E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999603542968186	WITHOUT_CLASSIFICATION	3.964570318140861E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999968687791023	WITHOUT_CLASSIFICATION	3.131220897808174E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999916053340187	WITHOUT_CLASSIFICATION	8.394665981410818E-6	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992803410128042	WITHOUT_CLASSIFICATION	7.196589871959593E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.99999804485892	WITHOUT_CLASSIFICATION	1.9551410800000873E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999826429680472	WITHOUT_CLASSIFICATION	1.7357031952725513E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999518564801622	WITHOUT_CLASSIFICATION	4.814351983794858E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999798668618551	WITHOUT_CLASSIFICATION	2.013313814477169E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994277565526676	WITHOUT_CLASSIFICATION	5.722434473323269E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9997642850394336	WITHOUT_CLASSIFICATION	2.3571496056647105E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999959634783445	WITHOUT_CLASSIFICATION	4.036521655494742E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999981928779266	WITHOUT_CLASSIFICATION	1.807122073494424E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999561086552389	WITHOUT_CLASSIFICATION	4.3891344761128565E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919103208373	WITHOUT_CLASSIFICATION	8.089679162652138E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9995267097709891	WITHOUT_CLASSIFICATION	4.7329022901086454E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999993109579396	WITHOUT_CLASSIFICATION	6.890420604086523E-7	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999716402865636	WITHOUT_CLASSIFICATION	2.835971343635538E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999955435124014	WITHOUT_CLASSIFICATION	4.456487598639016E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9998110207795029	WITHOUT_CLASSIFICATION	1.889792204970892E-4	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999996124673367	WITHOUT_CLASSIFICATION	3.8753266326051017E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999910210914338	WITHOUT_CLASSIFICATION	8.978908566161294E-6	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999973319140169	WITHOUT_CLASSIFICATION	2.6680859831221333E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999879642999162	WITHOUT_CLASSIFICATION	1.2035700083713854E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999991272537908	WITHOUT_CLASSIFICATION	8.727462092946202E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996633326697	WITHOUT_CLASSIFICATION	3.366673304059132E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9996241140168374	WITHOUT_CLASSIFICATION	3.758859831626685E-4	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998445983606876	WITHOUT_CLASSIFICATION	1.554016393124335E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999323180763	WITHOUT_CLASSIFICATION	6.768192378431845E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999616254417	WITHOUT_CLASSIFICATION	3.837455826684088E-8	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999996682745635	WITHOUT_CLASSIFICATION	3.3172543649767476E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9996473476959754	WITHOUT_CLASSIFICATION	3.5265230402451716E-4	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999914640111024	WITHOUT_CLASSIFICATION	8.535988897580168E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999892159986282	WITHOUT_CLASSIFICATION	1.0784001371708006E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999914640111024	WITHOUT_CLASSIFICATION	8.535988897580168E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998063641482046	WITHOUT_CLASSIFICATION	1.9363585179547215E-4	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999806128493587	WITHOUT_CLASSIFICATION	1.938715064135898E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999410821206792	WITHOUT_CLASSIFICATION	5.8917879320722395E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999937704572885	WITHOUT_CLASSIFICATION	6.229542711483022E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999987681537017	WITHOUT_CLASSIFICATION	1.2318462982860096E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999918606739172	WITHOUT_CLASSIFICATION	8.139326082801668E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997666012882	WITHOUT_CLASSIFICATION	2.3339871188617351E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999708068971	WITHOUT_CLASSIFICATION	2.9193102971824453E-8	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999991754224479	WITHOUT_CLASSIFICATION	8.245775520125347E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9994672454303068	WITHOUT_CLASSIFICATION	5.32754569693212E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999971989281561	WITHOUT_CLASSIFICATION	2.8010718437952087E-6	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999998761186288	WITHOUT_CLASSIFICATION	1.238813712121275E-7	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999998453391004	WITHOUT_CLASSIFICATION	1.546608995982029E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9760414681623705	WITHOUT_CLASSIFICATION	0.0239585318376295	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997803593598743	WITHOUT_CLASSIFICATION	2.196406401255747E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999989874624629	WITHOUT_CLASSIFICATION	1.0125375371965584E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999914410874916	WITHOUT_CLASSIFICATION	8.558912508484142E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999955521788474	WITHOUT_CLASSIFICATION	4.44782115260553E-6	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999993475130913	WITHOUT_CLASSIFICATION	6.524869087042333E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999976498364962	WITHOUT_CLASSIFICATION	2.3501635038044523E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999984749386737	WITHOUT_CLASSIFICATION	1.5250613263851255E-6	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998945428767155	WITHOUT_CLASSIFICATION	1.0545712328448488E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9985832383750447	WITHOUT_CLASSIFICATION	0.0014167616249552673	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999915753564379	WITHOUT_CLASSIFICATION	8.42464356214121E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999028369555547	WITHOUT_CLASSIFICATION	9.716304444531484E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999576231761	WITHOUT_CLASSIFICATION	4.237682390250556E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997398569870238	WITHOUT_CLASSIFICATION	2.601430129761357E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999846289290631	WITHOUT_CLASSIFICATION	1.537107093679005E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999665778138469	WITHOUT_CLASSIFICATION	3.342218615309613E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999777514339603	WITHOUT_CLASSIFICATION	2.2248566039710293E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999277055889235	WITHOUT_CLASSIFICATION	7.22944110764639E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9973828783030075	WITHOUT_CLASSIFICATION	0.0026171216969925197	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999962006045989	WITHOUT_CLASSIFICATION	3.799395401015042E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999989388721799	WITHOUT_CLASSIFICATION	1.0611278201411619E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998371858525444	WITHOUT_CLASSIFICATION	1.628141474555729E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999722874798181	WITHOUT_CLASSIFICATION	2.7712520181797513E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999884265620156	WITHOUT_CLASSIFICATION	1.157343798441536E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999804048264123	WITHOUT_CLASSIFICATION	1.95951735877863E-5	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9992123297548589	WITHOUT_CLASSIFICATION	7.876702451411255E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999961383529234	WITHOUT_CLASSIFICATION	3.861647076505453E-6	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.999999950877142	WITHOUT_CLASSIFICATION	4.9122858069354466E-8	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999854912295131	WITHOUT_CLASSIFICATION	1.4508770486959401E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999282484852	WITHOUT_CLASSIFICATION	7.175151484774483E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999576231761	WITHOUT_CLASSIFICATION	4.237682390250556E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996402578253866	WITHOUT_CLASSIFICATION	3.597421746133757E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999995406888773	WITHOUT_CLASSIFICATION	4.5931112261084553E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999375543973168	WITHOUT_CLASSIFICATION	6.244560268327308E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999991639061369	WITHOUT_CLASSIFICATION	8.360938632248977E-7	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999325798772957	WITHOUT_CLASSIFICATION	6.742012270436392E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999802027948	WITHOUT_CLASSIFICATION	1.9797205192712758E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998778549309	WITHOUT_CLASSIFICATION	1.221450689505344E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999966648846735	WITHOUT_CLASSIFICATION	3.3351153264054907E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999502076938687	WITHOUT_CLASSIFICATION	4.9792306131298066E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999910434104304	WITHOUT_CLASSIFICATION	8.956589569478855E-6	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9992345251545597	WITHOUT_CLASSIFICATION	7.654748454403623E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999857889281515	WITHOUT_CLASSIFICATION	1.42110718485013E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998310386585718	WITHOUT_CLASSIFICATION	1.689613414282334E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999475134173054	WITHOUT_CLASSIFICATION	5.248658269464735E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999100669796	WITHOUT_CLASSIFICATION	8.993302040415451E-8	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999989390106236	WITHOUT_CLASSIFICATION	1.0609893763512206E-6	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999994649164139	WITHOUT_CLASSIFICATION	5.350835861886472E-7	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999998139148524	WITHOUT_CLASSIFICATION	1.8608514759839163E-6	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999999054047097	WITHOUT_CLASSIFICATION	9.459529022064806E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996402578253866	WITHOUT_CLASSIFICATION	3.597421746133757E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999911654244203	WITHOUT_CLASSIFICATION	8.834575579701251E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999932695931152	WITHOUT_CLASSIFICATION	6.7304068848856195E-6	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999766854560016	WITHOUT_CLASSIFICATION	2.3314543998422915E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999868824123913	WITHOUT_CLASSIFICATION	1.3117587608658214E-5	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999989345873482	WITHOUT_CLASSIFICATION	1.0654126517202646E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9020085819383176	WITHOUT_CLASSIFICATION	0.09799141806168248	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9020085819383176	WITHOUT_CLASSIFICATION	0.09799141806168248	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999930333079954	WITHOUT_CLASSIFICATION	6.966692004659736E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9020085819383176	WITHOUT_CLASSIFICATION	0.09799141806168248	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9020085819383176	WITHOUT_CLASSIFICATION	0.09799141806168248	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9992078454020579	WITHOUT_CLASSIFICATION	7.921545979420468E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999911454621143	WITHOUT_CLASSIFICATION	8.854537885596778E-6	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999907718417967	WITHOUT_CLASSIFICATION	9.228158203257881E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999250085383576	WITHOUT_CLASSIFICATION	7.499146164227794E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9986884546532123	WITHOUT_CLASSIFICATION	0.001311545346787729	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9975177950326423	WITHOUT_CLASSIFICATION	0.0024822049673576536	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9985438306866482	WITHOUT_CLASSIFICATION	0.0014561693133518143	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998059735671426	WITHOUT_CLASSIFICATION	1.9402643285733749E-4	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999382729621118	WITHOUT_CLASSIFICATION	6.17270378882086E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999464698435314	WITHOUT_CLASSIFICATION	5.353015646855342E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999951149860545	WITHOUT_CLASSIFICATION	4.885013945506866E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999817882385013	WITHOUT_CLASSIFICATION	1.821176149874588E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999981334707834	WITHOUT_CLASSIFICATION	1.8665292166328612E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999878671097236	WITHOUT_CLASSIFICATION	1.2132890276363706E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999995863289137	WITHOUT_CLASSIFICATION	4.136710862979155E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9993873125848184	WITHOUT_CLASSIFICATION	6.126874151816521E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963391338248	WITHOUT_CLASSIFICATION	3.660866175103253E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999319176640055	WITHOUT_CLASSIFICATION	6.808233599449614E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9984310822850144	WITHOUT_CLASSIFICATION	0.0015689177149855297	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999863718370513	WITHOUT_CLASSIFICATION	1.3628162948737812E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999369637609988	WITHOUT_CLASSIFICATION	6.303623900112054E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999642073465153	WITHOUT_CLASSIFICATION	3.579265348472247E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963391338248	WITHOUT_CLASSIFICATION	3.660866175103253E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997398569870238	WITHOUT_CLASSIFICATION	2.601430129761357E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998865889911203	WITHOUT_CLASSIFICATION	1.1341100887980636E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999395740740391	WITHOUT_CLASSIFICATION	6.042592596083248E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998718935588756	WITHOUT_CLASSIFICATION	1.2810644112432358E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999216339750471	WITHOUT_CLASSIFICATION	7.836602495286322E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999841260532876	WITHOUT_CLASSIFICATION	1.5873946712452348E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999962590017917	WITHOUT_CLASSIFICATION	3.7409982083566586E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.990402101271642	WITHOUT_CLASSIFICATION	0.009597898728358086	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999894699701859	WITHOUT_CLASSIFICATION	1.0530029814145875E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.99996114153459	WITHOUT_CLASSIFICATION	3.8858465409850456E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9994906386267687	WITHOUT_CLASSIFICATION	5.093613732313939E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998763141995	WITHOUT_CLASSIFICATION	1.2368580054799535E-7	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999711268740051	WITHOUT_CLASSIFICATION	2.8873125994938373E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999917996777171	WITHOUT_CLASSIFICATION	8.200322282943796E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9930195314429745	WITHOUT_CLASSIFICATION	0.006980468557025588	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999986733533834	WITHOUT_CLASSIFICATION	1.3266466165294325E-6	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999996859723944	WITHOUT_CLASSIFICATION	3.140276055859374E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997758037706376	WITHOUT_CLASSIFICATION	2.241962293623837E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999712091157	WITHOUT_CLASSIFICATION	2.879088427903247E-8	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999796706577475	WITHOUT_CLASSIFICATION	2.0329342252390587E-5	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999017482009155	WITHOUT_CLASSIFICATION	9.825179908458652E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999841077455291	WITHOUT_CLASSIFICATION	1.5892254470847456E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999971444685264	WITHOUT_CLASSIFICATION	2.85553147361894E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999894699701859	WITHOUT_CLASSIFICATION	1.0530029814145875E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999657803847268	WITHOUT_CLASSIFICATION	3.421961527321156E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.999898712253929	WITHOUT_CLASSIFICATION	1.0128774607109933E-4	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9991376801696302	WITHOUT_CLASSIFICATION	8.623198303697928E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999877617378912	WITHOUT_CLASSIFICATION	1.2238262108805306E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999698048294161	WITHOUT_CLASSIFICATION	3.0195170583875003E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999860975870124	WITHOUT_CLASSIFICATION	1.390241298749061E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9998908431184974	WITHOUT_CLASSIFICATION	1.0915688150256733E-4	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.999998637479208	WITHOUT_CLASSIFICATION	1.362520791958368E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999919642889299	WITHOUT_CLASSIFICATION	8.035711070128971E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999890518900152	WITHOUT_CLASSIFICATION	1.0948109984856987E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999969163003741	WITHOUT_CLASSIFICATION	3.0836996258097576E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999975670429326	WITHOUT_CLASSIFICATION	2.4329570673949414E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9994705874443522	WITHOUT_CLASSIFICATION	5.294125556477517E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999930619822748	WITHOUT_CLASSIFICATION	6.938017725232539E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999875932753031	WITHOUT_CLASSIFICATION	1.2406724696896867E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999103410924163	WITHOUT_CLASSIFICATION	8.965890758367326E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999969163003741	WITHOUT_CLASSIFICATION	3.0836996258097576E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999982036315026	WITHOUT_CLASSIFICATION	1.7963684975121877E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9998137447650989	WITHOUT_CLASSIFICATION	1.86255234901099E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999771784559903	WITHOUT_CLASSIFICATION	2.2821544009660833E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9934041143557357	WITHOUT_CLASSIFICATION	0.006595885644264189	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999982261353489	WITHOUT_CLASSIFICATION	1.7738646511323585E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999864721631303	WITHOUT_CLASSIFICATION	1.3527836869727643E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999332978114482	WITHOUT_CLASSIFICATION	6.670218855175395E-5	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715033045962	WITHOUT_CLASSIFICATION	2.8496695403826784E-5	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984001466072	WITHOUT_CLASSIFICATION	1.5998533928413312E-6	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996602819970405	WITHOUT_CLASSIFICATION	3.3971800295948707E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.5658069700998938	WITHOUT_CLASSIFICATION	0.43419302990010605	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7828128268539841	WITHOUT_CLASSIFICATION	0.21718717314601596	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999785905363379	WITHOUT_CLASSIFICATION	2.1409463662094953E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999785905363379	WITHOUT_CLASSIFICATION	2.1409463662094953E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999894461744232	WITHOUT_CLASSIFICATION	1.0553825576795873E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999974594699955	WITHOUT_CLASSIFICATION	2.5405300044052405E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999954253713894	WITHOUT_CLASSIFICATION	4.574628610569535E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999930998670115	WITHOUT_CLASSIFICATION	6.900132988619014E-6	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999234728748614	WITHOUT_CLASSIFICATION	7.652712513862216E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972532069206	WITHOUT_CLASSIFICATION	2.7467930793467076E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970367671319	WITHOUT_CLASSIFICATION	2.963232868048189E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99989179795271	WITHOUT_CLASSIFICATION	1.0820204729004481E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999986354293522	WITHOUT_CLASSIFICATION	1.3645706477990504E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980513829991	WITHOUT_CLASSIFICATION	1.948617000797403E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972532069206	WITHOUT_CLASSIFICATION	2.7467930793467076E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970367671319	WITHOUT_CLASSIFICATION	2.963232868048189E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99989179795271	WITHOUT_CLASSIFICATION	1.0820204729004481E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999993467944975	WITHOUT_CLASSIFICATION	6.532055023554712E-7	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9984963520437361	WITHOUT_CLASSIFICATION	0.0015036479562638625	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999253456986	WITHOUT_CLASSIFICATION	7.465430147471842E-8	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999710600972362	WITHOUT_CLASSIFICATION	2.893990276380346E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999954700127958	WITHOUT_CLASSIFICATION	4.5299872041772836E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999962851494589	WITHOUT_CLASSIFICATION	3.714850540949754E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999939618594925	WITHOUT_CLASSIFICATION	6.038140507470308E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.999989742889909	WITHOUT_CLASSIFICATION	1.0257110090865239E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999875623236785	WITHOUT_CLASSIFICATION	1.2437676321549069E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999889547279257	WITHOUT_CLASSIFICATION	1.104527207435964E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999974166021571	WITHOUT_CLASSIFICATION	2.5833978429000434E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999522658999395	WITHOUT_CLASSIFICATION	4.773410006061472E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999834808834298	WITHOUT_CLASSIFICATION	1.6519116570212652E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999995941570056	WITHOUT_CLASSIFICATION	4.0584299444804935E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999746837094134	WITHOUT_CLASSIFICATION	2.5316290586481895E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998098613399	WITHOUT_CLASSIFICATION	1.9013866020068486E-7	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9988418179419718	WITHOUT_CLASSIFICATION	0.001158182058028217	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996727890024735	WITHOUT_CLASSIFICATION	3.2721099752644765E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999967147888831	WITHOUT_CLASSIFICATION	3.2852111168899627E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999845263507264	WITHOUT_CLASSIFICATION	1.5473649273523108E-5	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999107396482	WITHOUT_CLASSIFICATION	8.926035183794175E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9992397893830719	WITHOUT_CLASSIFICATION	7.602106169281387E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.99999980848369	WITHOUT_CLASSIFICATION	1.9151631002613601E-7	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999986694572265	WITHOUT_CLASSIFICATION	1.330542773550952E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999968285853	WITHOUT_CLASSIFICATION	3.1714145323535435E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9912849398378006	WITHOUT_CLASSIFICATION	0.008715060162199405	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896506792476	WITHOUT_CLASSIFICATION	1.0349320752394875E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819612479446	WITHOUT_CLASSIFICATION	1.803875205532563E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999968943777863	WITHOUT_CLASSIFICATION	3.1056222137274878E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918499128572	WITHOUT_CLASSIFICATION	8.150087142838545E-6	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968349481675	WITHOUT_CLASSIFICATION	3.1650518324176933E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998643454399221	WITHOUT_CLASSIFICATION	1.3565456007789224E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998643454399221	WITHOUT_CLASSIFICATION	1.3565456007789224E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999908981982	WITHOUT_CLASSIFICATION	9.101801792544119E-9	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999911213093049	WITHOUT_CLASSIFICATION	8.878690695094265E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999464975996748	WITHOUT_CLASSIFICATION	5.3502400325281236E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999868414431436	WITHOUT_CLASSIFICATION	1.3158556856407804E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9995048869920291	WITHOUT_CLASSIFICATION	4.951130079709148E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999993989495506	WITHOUT_CLASSIFICATION	6.010504492944454E-7	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999685712731781	WITHOUT_CLASSIFICATION	3.1428726821918905E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999902916149881	WITHOUT_CLASSIFICATION	9.70838501195662E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999705134762344	WITHOUT_CLASSIFICATION	2.9486523765527625E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993832293822	WITHOUT_CLASSIFICATION	6.16770617846866E-7	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999466834522	WITHOUT_CLASSIFICATION	5.331654778982839E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993539581845	WITHOUT_CLASSIFICATION	6.4604181552293E-7	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941185335981	WITHOUT_CLASSIFICATION	5.881466401892453E-6	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990446816736	WITHOUT_CLASSIFICATION	9.55318326485293E-7	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990035054235	WITHOUT_CLASSIFICATION	9.964945766145484E-7	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990890795847	WITHOUT_CLASSIFICATION	9.109204153743303E-7	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991722932575	WITHOUT_CLASSIFICATION	8.277067425462883E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983509276311	WITHOUT_CLASSIFICATION	1.6490723687900367E-6	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978398150227	WITHOUT_CLASSIFICATION	2.1601849773455845E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997508039247	WITHOUT_CLASSIFICATION	2.4919607529244903E-6	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999973170337776	WITHOUT_CLASSIFICATION	2.6829662223710716E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999896627233548	WITHOUT_CLASSIFICATION	1.0337276645156842E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999655301960496	WITHOUT_CLASSIFICATION	3.446980395049318E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995692149299946	WITHOUT_CLASSIFICATION	4.307850700053792E-4	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999962429903291	WITHOUT_CLASSIFICATION	3.757009671023605E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9998163547142304	WITHOUT_CLASSIFICATION	1.8364528576961164E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999035881287	WITHOUT_CLASSIFICATION	9.641187129787327E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9971138690626631	WITHOUT_CLASSIFICATION	0.002886130937336956	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999655301960496	WITHOUT_CLASSIFICATION	3.446980395049318E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999655301960496	WITHOUT_CLASSIFICATION	3.446980395049318E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999406990027334	WITHOUT_CLASSIFICATION	5.9300997266548325E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999889074469382	WITHOUT_CLASSIFICATION	1.109255306170001E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999949266267888	WITHOUT_CLASSIFICATION	5.0733732110978144E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999882864533894	WITHOUT_CLASSIFICATION	1.1713546610604446E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999906446315804	WITHOUT_CLASSIFICATION	9.355368419661987E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999845263507264	WITHOUT_CLASSIFICATION	1.5473649273523108E-5	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999324180651173	WITHOUT_CLASSIFICATION	6.7581934882678E-5	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999932748783985	WITHOUT_CLASSIFICATION	6.725121601475082E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999982827017581	WITHOUT_CLASSIFICATION	1.7172982418420498E-6	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980293493697	WITHOUT_CLASSIFICATION	1.9706506303794825E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.997538870082307	WITHOUT_CLASSIFICATION	0.0024611299176928976	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390565799846	WITHOUT_CLASSIFICATION	6.094342001540255E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998138674298356	WITHOUT_CLASSIFICATION	1.8613257016446126E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998138674298356	WITHOUT_CLASSIFICATION	1.8613257016446126E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999879039148736	WITHOUT_CLASSIFICATION	1.2096085126497588E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999879039148736	WITHOUT_CLASSIFICATION	1.2096085126497588E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998843639968852	WITHOUT_CLASSIFICATION	0.0011563600311479902	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998663225262	WITHOUT_CLASSIFICATION	1.3367747374070266E-7	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999997449579932	WITHOUT_CLASSIFICATION	2.5504200683546164E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987973631609706	WITHOUT_CLASSIFICATION	0.0012026368390293698	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999748709147486	WITHOUT_CLASSIFICATION	2.512908525150533E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999727425139433	WITHOUT_CLASSIFICATION	2.7257486056633852E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998177109205447	WITHOUT_CLASSIFICATION	1.8228907945534685E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914332064209	WITHOUT_CLASSIFICATION	8.566793579022803E-6	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999971254906299	WITHOUT_CLASSIFICATION	2.8745093700779106E-6	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999985972546195	WITHOUT_CLASSIFICATION	1.4027453804807732E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999336711899	WITHOUT_CLASSIFICATION	6.632881003603017E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9994207355532375	WITHOUT_CLASSIFICATION	5.792644467624612E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997401005593388	WITHOUT_CLASSIFICATION	2.598994406611386E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999945696595813	WITHOUT_CLASSIFICATION	5.430340418637822E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.999988137937524	WITHOUT_CLASSIFICATION	1.1862062475990548E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999965830789476	WITHOUT_CLASSIFICATION	3.416921052398323E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.999965830789476	WITHOUT_CLASSIFICATION	3.416921052398323E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999739470141141	WITHOUT_CLASSIFICATION	2.6052985885939906E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999993251144175	WITHOUT_CLASSIFICATION	6.748855825564443E-7	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999674499914	WITHOUT_CLASSIFICATION	3.255000846226707E-8	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998491594506538	WITHOUT_CLASSIFICATION	1.5084054934619122E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994290463671833	WITHOUT_CLASSIFICATION	5.709536328166199E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997943906819324	WITHOUT_CLASSIFICATION	2.0560931806761203E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999835739222094	WITHOUT_CLASSIFICATION	1.6426077790686004E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.5920333414237244	WITHOUT_CLASSIFICATION	0.4079666585762755	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999945715176711	WITHOUT_CLASSIFICATION	5.4284823288667435E-6	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999993475163127	WITHOUT_CLASSIFICATION	6.524836872007965E-7	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999986772749868	WITHOUT_CLASSIFICATION	1.3227250131983277E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997870598595268	WITHOUT_CLASSIFICATION	2.129401404732635E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988643019109	WITHOUT_CLASSIFICATION	1.1356980890798216E-6	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999969291617472	WITHOUT_CLASSIFICATION	3.07083825277685E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999745931373322	WITHOUT_CLASSIFICATION	2.540686266781434E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999531576577818	WITHOUT_CLASSIFICATION	4.684234221816472E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999849499981508	WITHOUT_CLASSIFICATION	1.5050001849112055E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999400156238192	WITHOUT_CLASSIFICATION	5.998437618080116E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999290408586844	WITHOUT_CLASSIFICATION	7.095914131559212E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999944551947867	WITHOUT_CLASSIFICATION	5.544805213375121E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999545255056	WITHOUT_CLASSIFICATION	4.547449439306539E-8	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999775097390194	WITHOUT_CLASSIFICATION	2.2490260980550897E-5	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9997856849570763	WITHOUT_CLASSIFICATION	2.1431504292376719E-4	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999937407497695	WITHOUT_CLASSIFICATION	6.259250230511607E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998978030331056	WITHOUT_CLASSIFICATION	1.0219696689440202E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9992476482224654	WITHOUT_CLASSIFICATION	7.523517775346741E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997204492647	WITHOUT_CLASSIFICATION	2.795507353482353E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999952211984864	WITHOUT_CLASSIFICATION	4.778801513541994E-6	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999996797062	WITHOUT_CLASSIFICATION	3.2029380265490743E-9	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999939826087848	WITHOUT_CLASSIFICATION	6.017391215267155E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999934312747987	WITHOUT_CLASSIFICATION	6.568725201295378E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999899377935598	WITHOUT_CLASSIFICATION	1.0062206440273067E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999809090199542	WITHOUT_CLASSIFICATION	1.9090980045785366E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9362637341161221	WITHOUT_CLASSIFICATION	0.06373626588387786	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999935024385603	WITHOUT_CLASSIFICATION	6.497561439629529E-6	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992474239656703	WITHOUT_CLASSIFICATION	7.525760343295636E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999896123175688	WITHOUT_CLASSIFICATION	1.0387682431249084E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999219733223746	WITHOUT_CLASSIFICATION	7.802667762530166E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998017732907	WITHOUT_CLASSIFICATION	1.982267092161436E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9992812018903113	WITHOUT_CLASSIFICATION	7.187981096886738E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999091282111191	WITHOUT_CLASSIFICATION	9.087178888090391E-5	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999337798473	WITHOUT_CLASSIFICATION	6.62201526069436E-8	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9260567675334885	WITHOUT_CLASSIFICATION	0.07394323246651141	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9982467992353833	WITHOUT_CLASSIFICATION	0.0017532007646166362	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9995515625033818	WITHOUT_CLASSIFICATION	4.48437496618136E-4	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999929865098143	WITHOUT_CLASSIFICATION	7.013490185704793E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999974974858381	WITHOUT_CLASSIFICATION	2.502514161962975E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999877276524034	WITHOUT_CLASSIFICATION	1.227234759651164E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998194267304333	WITHOUT_CLASSIFICATION	1.8057326956671322E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999215219711277	WITHOUT_CLASSIFICATION	7.847802887226426E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999056315799009	WITHOUT_CLASSIFICATION	9.436842009919113E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9988993672525966	WITHOUT_CLASSIFICATION	0.0011006327474034068	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998622237183437	WITHOUT_CLASSIFICATION	1.3777628165632559E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992711084220451	WITHOUT_CLASSIFICATION	7.288915779549201E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9990542786531299	WITHOUT_CLASSIFICATION	9.457213468699918E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.999970720097627	WITHOUT_CLASSIFICATION	2.9279902373046564E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9827379645516836	WITHOUT_CLASSIFICATION	0.01726203544831638	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999160035839497	WITHOUT_CLASSIFICATION	8.399641605019726E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999996098310316	WITHOUT_CLASSIFICATION	3.9016896835335374E-7	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9983396224047507	WITHOUT_CLASSIFICATION	0.0016603775952493184	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999923469220843	WITHOUT_CLASSIFICATION	7.65307791565516E-6	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.99998276100513	WITHOUT_CLASSIFICATION	1.7238994869980546E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999825839233	WITHOUT_CLASSIFICATION	1.7416076634099214E-8	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999954775599562	WITHOUT_CLASSIFICATION	4.52244004375921E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999491637728	WITHOUT_CLASSIFICATION	5.0836227259363066E-8	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998228014697363	WITHOUT_CLASSIFICATION	1.7719853026371295E-4	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999712513547278	WITHOUT_CLASSIFICATION	2.874864527215994E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999871333913051	WITHOUT_CLASSIFICATION	1.2866608694999534E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997119408253013	WITHOUT_CLASSIFICATION	2.880591746987138E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997119408253013	WITHOUT_CLASSIFICATION	2.880591746987138E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999983062667678	WITHOUT_CLASSIFICATION	1.6937332321407962E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999095626423605	WITHOUT_CLASSIFICATION	9.0437357639564E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999763282357	WITHOUT_CLASSIFICATION	2.3671764343036637E-8	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999989367390331	WITHOUT_CLASSIFICATION	1.0632609669573233E-6	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999616365600221	WITHOUT_CLASSIFICATION	3.836343997779825E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9992584612363862	WITHOUT_CLASSIFICATION	7.415387636138447E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999998677136642	WITHOUT_CLASSIFICATION	1.322863357537743E-7	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999994262720069	WITHOUT_CLASSIFICATION	5.737279931537864E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998466697397268	WITHOUT_CLASSIFICATION	1.5333026027316513E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999989249962	WITHOUT_CLASSIFICATION	1.0750037999596445E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992609358804	WITHOUT_CLASSIFICATION	7.390641195357503E-7	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999339600421091	WITHOUT_CLASSIFICATION	6.603995789088857E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999914275668987	WITHOUT_CLASSIFICATION	8.572433101268138E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999318492206	WITHOUT_CLASSIFICATION	6.815077933012014E-8	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999838574514348	WITHOUT_CLASSIFICATION	1.6142548565249766E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8256593447209433	WITHOUT_CLASSIFICATION	0.17434065527905662	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999930712441634	WITHOUT_CLASSIFICATION	6.92875583662892E-6	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9788265537078303	WITHOUT_CLASSIFICATION	0.02117344629216963	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9992133251296608	WITHOUT_CLASSIFICATION	7.86674870339181E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999902782758489	WITHOUT_CLASSIFICATION	9.721724151217507E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999958215370826	WITHOUT_CLASSIFICATION	4.178462917520446E-6	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999750509382741	WITHOUT_CLASSIFICATION	2.4949061725924727E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999935695048412	WITHOUT_CLASSIFICATION	6.4304951588763065E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9988706565326427	WITHOUT_CLASSIFICATION	0.0011293434673573565	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997326792038	WITHOUT_CLASSIFICATION	2.673207961316176E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999862871026276	WITHOUT_CLASSIFICATION	1.3712897372359482E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999888334610292	WITHOUT_CLASSIFICATION	1.1166538970739237E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999972221630571	WITHOUT_CLASSIFICATION	2.7778369428424012E-6	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999943924572	WITHOUT_CLASSIFICATION	5.607542799927214E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999715993316872	WITHOUT_CLASSIFICATION	2.8400668312778208E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999988114000226	WITHOUT_CLASSIFICATION	1.18859997746317E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999313084610354	WITHOUT_CLASSIFICATION	6.86915389646084E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.999993534845404	WITHOUT_CLASSIFICATION	6.465154596004705E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9998982807634657	WITHOUT_CLASSIFICATION	1.017192365342668E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998746297070156	WITHOUT_CLASSIFICATION	1.2537029298441475E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998746297070156	WITHOUT_CLASSIFICATION	1.2537029298441475E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998839720220556	WITHOUT_CLASSIFICATION	1.1602797794440152E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9984607330037539	WITHOUT_CLASSIFICATION	0.001539266996246121	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999987321821469	WITHOUT_CLASSIFICATION	1.2678178531706695E-6	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999962262321846	WITHOUT_CLASSIFICATION	3.7737678152573638E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999981341916238	WITHOUT_CLASSIFICATION	1.8658083762957262E-6	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999980541560245	WITHOUT_CLASSIFICATION	1.9458439754989146E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999883157984785	WITHOUT_CLASSIFICATION	1.1684201521618774E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999993809966213	WITHOUT_CLASSIFICATION	6.190033787226231E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9988973152180329	WITHOUT_CLASSIFICATION	0.0011026847819670463	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993050483211	WITHOUT_CLASSIFICATION	6.949516787481452E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999802910003838	WITHOUT_CLASSIFICATION	1.9708999616224903E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999531131326795	WITHOUT_CLASSIFICATION	4.688686732058515E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999996783112627	WITHOUT_CLASSIFICATION	3.2168873735420566E-7	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999732929413299	WITHOUT_CLASSIFICATION	2.6707058670098023E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999803592071145	WITHOUT_CLASSIFICATION	1.9640792885534523E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.5968872463440374	WITHOUT_CLASSIFICATION	0.40311275365596244	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.5968872463440374	WITHOUT_CLASSIFICATION	0.40311275365596244	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999429007976842	WITHOUT_CLASSIFICATION	5.7099202315855756E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999937053376651	WITHOUT_CLASSIFICATION	6.2946623349169665E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999381546902985	WITHOUT_CLASSIFICATION	6.184530970155868E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996037195918	WITHOUT_CLASSIFICATION	3.9628040823758406E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993747679756301	WITHOUT_CLASSIFICATION	6.25232024370004E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999975487390288	WITHOUT_CLASSIFICATION	2.4512609712383827E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999973948205936	WITHOUT_CLASSIFICATION	2.6051794064032977E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999973948205936	WITHOUT_CLASSIFICATION	2.6051794064032977E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999596240690382	WITHOUT_CLASSIFICATION	4.0375930961889174E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999813060562334	WITHOUT_CLASSIFICATION	1.8693943766607557E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.99998407788349	WITHOUT_CLASSIFICATION	1.5922116510007616E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999995574974074	WITHOUT_CLASSIFICATION	4.425025926037769E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.999995122962312	WITHOUT_CLASSIFICATION	4.877037688102981E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997277035589787	WITHOUT_CLASSIFICATION	2.72296441021309E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9989857934599484	WITHOUT_CLASSIFICATION	0.0010142065400515145	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998884077399388	WITHOUT_CLASSIFICATION	1.1159226006122989E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999992598929907	WITHOUT_CLASSIFICATION	7.4010700930466E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9954716455099503	WITHOUT_CLASSIFICATION	0.0045283544900497665	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9751755458043813	WITHOUT_CLASSIFICATION	0.024824454195618805	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999985623929487	WITHOUT_CLASSIFICATION	1.4376070512970231E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999775902350113	WITHOUT_CLASSIFICATION	2.2409764988672528E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999982370882279	WITHOUT_CLASSIFICATION	1.7629117721040697E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999988384708286	WITHOUT_CLASSIFICATION	1.1615291714867844E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999250588888	WITHOUT_CLASSIFICATION	7.494111117301066E-8	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999991890925136	WITHOUT_CLASSIFICATION	8.109074862853045E-7	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999882776568808	WITHOUT_CLASSIFICATION	1.1722343119217277E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999832812713877	WITHOUT_CLASSIFICATION	1.6718728612301836E-4	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999376121141117	WITHOUT_CLASSIFICATION	6.238788588831116E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995610979338	WITHOUT_CLASSIFICATION	4.3890206630972275E-7	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999959645739164	WITHOUT_CLASSIFICATION	4.035426083597016E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998005748702221	WITHOUT_CLASSIFICATION	1.9942512977789815E-4	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9988953196848598	WITHOUT_CLASSIFICATION	0.0011046803151401792	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999791145219046	WITHOUT_CLASSIFICATION	2.088547809541196E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997852521393862	WITHOUT_CLASSIFICATION	2.147478606139138E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9588289931480003	WITHOUT_CLASSIFICATION	0.04117100685199961	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999967632910741	WITHOUT_CLASSIFICATION	3.2367089258078157E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9844934392961254	WITHOUT_CLASSIFICATION	0.015506560703874621	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965148349657	WITHOUT_CLASSIFICATION	3.4851650343281987E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999301231716954	WITHOUT_CLASSIFICATION	6.987682830468308E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999979665431148	WITHOUT_CLASSIFICATION	2.0334568852052715E-6	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999994852018239	WITHOUT_CLASSIFICATION	5.147981761035742E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999708580085319	WITHOUT_CLASSIFICATION	2.9141991468173194E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997357387022221	WITHOUT_CLASSIFICATION	2.642612977778535E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999926070489056	WITHOUT_CLASSIFICATION	7.3929510945399945E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999945884461436	WITHOUT_CLASSIFICATION	5.4115538563132805E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.999998544823997	WITHOUT_CLASSIFICATION	1.4551760030021482E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999991946586094	WITHOUT_CLASSIFICATION	8.053413905568337E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994674177817	WITHOUT_CLASSIFICATION	5.325822182747608E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997709983328	WITHOUT_CLASSIFICATION	2.2900166723182366E-7	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999845252450628	WITHOUT_CLASSIFICATION	1.547475493722502E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999326627832569	WITHOUT_CLASSIFICATION	6.733721674305217E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9988961594554222	WITHOUT_CLASSIFICATION	0.0011038405445778223	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999995169984	WITHOUT_CLASSIFICATION	4.83001589220392E-10	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999054835045952	WITHOUT_CLASSIFICATION	9.451649540486599E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999991946586094	WITHOUT_CLASSIFICATION	8.053413905568337E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994674177817	WITHOUT_CLASSIFICATION	5.325822182747608E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998691959633705	WITHOUT_CLASSIFICATION	1.3080403662942436E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9858569471279776	WITHOUT_CLASSIFICATION	0.014143052872022482	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997962161092	WITHOUT_CLASSIFICATION	2.0378389077691063E-7	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997191846528496	WITHOUT_CLASSIFICATION	2.808153471504146E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999835560566556	WITHOUT_CLASSIFICATION	1.6443943344467067E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998353800592	WITHOUT_CLASSIFICATION	1.646199408509126E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9979777615693091	WITHOUT_CLASSIFICATION	0.0020222384306909148	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999959474911535	WITHOUT_CLASSIFICATION	4.052508846552844E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999346685174724	WITHOUT_CLASSIFICATION	6.533148252766075E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9986987490725836	WITHOUT_CLASSIFICATION	0.001301250927416364	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999994205537	WITHOUT_CLASSIFICATION	5.794462340684718E-10	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9986987490725836	WITHOUT_CLASSIFICATION	0.001301250927416364	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999459998828	WITHOUT_CLASSIFICATION	5.400011725052138E-8	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999871188865582	WITHOUT_CLASSIFICATION	1.2881113441801818E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999238782018	WITHOUT_CLASSIFICATION	7.612179815050913E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922846155831	WITHOUT_CLASSIFICATION	7.715384417031773E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999374283036534	WITHOUT_CLASSIFICATION	6.257169634660059E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999399293313304	WITHOUT_CLASSIFICATION	6.00706686697512E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999399293313304	WITHOUT_CLASSIFICATION	6.00706686697512E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999980196140513	WITHOUT_CLASSIFICATION	1.9803859486693013E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999950773967743	WITHOUT_CLASSIFICATION	4.922603225650132E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.99997763752552	WITHOUT_CLASSIFICATION	2.236247447995642E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999648031790843	WITHOUT_CLASSIFICATION	3.51968209157968E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999924802661163	WITHOUT_CLASSIFICATION	7.519733883653725E-6	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8260987602058826	WITHOUT_CLASSIFICATION	0.17390123979411734	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999928799778522	WITHOUT_CLASSIFICATION	7.120022147767592E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999979423949656	WITHOUT_CLASSIFICATION	2.0576050343254384E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999957263187006	WITHOUT_CLASSIFICATION	4.273681299448006E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999904551340684	WITHOUT_CLASSIFICATION	9.544865931507928E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999933797368249	WITHOUT_CLASSIFICATION	6.620263175127913E-6	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999908359739214	WITHOUT_CLASSIFICATION	9.164026078571093E-6	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.999899177925448	WITHOUT_CLASSIFICATION	1.0082207455202829E-4	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.999999073303035	WITHOUT_CLASSIFICATION	9.266969650325849E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999409820522036	WITHOUT_CLASSIFICATION	5.9017947796435324E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999912168633057	WITHOUT_CLASSIFICATION	8.783136694219739E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999952787809157	WITHOUT_CLASSIFICATION	4.7212190842722796E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999218531210092	WITHOUT_CLASSIFICATION	7.814687899075386E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999963460295243	WITHOUT_CLASSIFICATION	3.6539704756308958E-6	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999637111157545	WITHOUT_CLASSIFICATION	3.628888424540149E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998919656759191	WITHOUT_CLASSIFICATION	1.0803432408089285E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998517256569777	WITHOUT_CLASSIFICATION	1.4827434302226418E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996310125280338	WITHOUT_CLASSIFICATION	3.689874719662353E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998336249582134	WITHOUT_CLASSIFICATION	1.6637504178671313E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999147674323977	WITHOUT_CLASSIFICATION	8.523256760223621E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999668437666727	WITHOUT_CLASSIFICATION	3.3156233327302126E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999587810431682	WITHOUT_CLASSIFICATION	4.1218956831818615E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9951066750730799	WITHOUT_CLASSIFICATION	0.004893324926920101	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998969017876632	WITHOUT_CLASSIFICATION	1.0309821233670846E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999483611234111	WITHOUT_CLASSIFICATION	5.163887658890331E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999687420450349	WITHOUT_CLASSIFICATION	3.125795496509702E-5	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999766425741433	WITHOUT_CLASSIFICATION	2.3357425856627197E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999928799778522	WITHOUT_CLASSIFICATION	7.120022147767592E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999776678010185	WITHOUT_CLASSIFICATION	2.2332198981560384E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9866608888430066	WITHOUT_CLASSIFICATION	0.013339111156993322	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9997876102742319	WITHOUT_CLASSIFICATION	2.1238972576800126E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999995171611027	WITHOUT_CLASSIFICATION	4.828388972895328E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999847565826385	WITHOUT_CLASSIFICATION	1.5243417361487173E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999954871726325	WITHOUT_CLASSIFICATION	4.512827367461711E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999648031790843	WITHOUT_CLASSIFICATION	3.51968209157968E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999648031790843	WITHOUT_CLASSIFICATION	3.51968209157968E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9995581014994572	WITHOUT_CLASSIFICATION	4.418985005428385E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999511609492203	WITHOUT_CLASSIFICATION	4.8839050779647866E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999844928671372	WITHOUT_CLASSIFICATION	1.550713286281349E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999586138724877	WITHOUT_CLASSIFICATION	4.1386127512184256E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.6170101193613933	WITHOUT_CLASSIFICATION	0.38298988063860684	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999988539366581	WITHOUT_CLASSIFICATION	1.1460633419721156E-6	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999816328664439	WITHOUT_CLASSIFICATION	1.8367133556066802E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999967486127205	WITHOUT_CLASSIFICATION	3.2513872793888627E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998768039373694	WITHOUT_CLASSIFICATION	1.2319606263067008E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999265021453	WITHOUT_CLASSIFICATION	7.349785471654674E-8	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999986511896966	WITHOUT_CLASSIFICATION	1.348810303493628E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995595177322187	WITHOUT_CLASSIFICATION	4.404822677812714E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999947321735682	WITHOUT_CLASSIFICATION	5.267826431747848E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999265021453	WITHOUT_CLASSIFICATION	7.349785471654674E-8	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999964450751334	WITHOUT_CLASSIFICATION	3.5549248666783347E-6	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999866582669825	WITHOUT_CLASSIFICATION	1.3341733017444632E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999946312462586	WITHOUT_CLASSIFICATION	5.368753741439561E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9010449888614168	WITHOUT_CLASSIFICATION	0.09895501113858321	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995595177322187	WITHOUT_CLASSIFICATION	4.404822677812714E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999951753852	WITHOUT_CLASSIFICATION	4.82461471985745E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999972509799	WITHOUT_CLASSIFICATION	2.7490200728401467E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999803349325	WITHOUT_CLASSIFICATION	1.9665067519482867E-8	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999901469	WITHOUT_CLASSIFICATION	9.85314918390602E-12	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.999508069347026	WITHOUT_CLASSIFICATION	4.919306529739741E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999988454436267	WITHOUT_CLASSIFICATION	1.1545563732845895E-6	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999965965102	WITHOUT_CLASSIFICATION	3.403489921122564E-9	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999863087020742	WITHOUT_CLASSIFICATION	1.3691297925932136E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999031476084137	WITHOUT_CLASSIFICATION	9.685239158624298E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999860003410788	WITHOUT_CLASSIFICATION	1.3999658921133252E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999976493883411	WITHOUT_CLASSIFICATION	2.3506116587955627E-6	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9996527214628096	WITHOUT_CLASSIFICATION	3.4727853719041413E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999265021453	WITHOUT_CLASSIFICATION	7.349785471654674E-8	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999951753852	WITHOUT_CLASSIFICATION	4.82461471985745E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999803349325	WITHOUT_CLASSIFICATION	1.9665067519482867E-8	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999960599904042	WITHOUT_CLASSIFICATION	3.940009595857564E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9988454980075505	WITHOUT_CLASSIFICATION	0.0011545019924494417	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999995369244011	WITHOUT_CLASSIFICATION	4.630755989531402E-7	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995595177322187	WITHOUT_CLASSIFICATION	4.404822677812714E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999966222829768	WITHOUT_CLASSIFICATION	3.3777170232499568E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999900553624934	WITHOUT_CLASSIFICATION	9.94463750661253E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997934766715287	WITHOUT_CLASSIFICATION	2.0652332847126984E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999645629054296	WITHOUT_CLASSIFICATION	3.543709457050764E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999863087020742	WITHOUT_CLASSIFICATION	1.3691297925932136E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999964450751334	WITHOUT_CLASSIFICATION	3.5549248666783347E-6	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999865078556002	WITHOUT_CLASSIFICATION	1.3492144399822258E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999978123381799	WITHOUT_CLASSIFICATION	2.1876618201605634E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999438606437285	WITHOUT_CLASSIFICATION	5.613935627158984E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999408192678733	WITHOUT_CLASSIFICATION	5.918073212680335E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9941684534166273	WITHOUT_CLASSIFICATION	0.005831546583372696	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9995957838157414	WITHOUT_CLASSIFICATION	4.042161842586213E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9997710703913906	WITHOUT_CLASSIFICATION	2.289296086094717E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922846155831	WITHOUT_CLASSIFICATION	7.715384417031773E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894480603536	WITHOUT_CLASSIFICATION	1.0551939646428342E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999991623037422	WITHOUT_CLASSIFICATION	8.376962577167535E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999746900295	WITHOUT_CLASSIFICATION	2.530997033436458E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999692286061	WITHOUT_CLASSIFICATION	3.07713939445413E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999320766106	WITHOUT_CLASSIFICATION	6.792338939000155E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998145548563	WITHOUT_CLASSIFICATION	1.854451437673425E-7	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999995207213703	WITHOUT_CLASSIFICATION	4.792786296366873E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999975030537583	WITHOUT_CLASSIFICATION	2.4969462416359546E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999645629054296	WITHOUT_CLASSIFICATION	3.543709457050764E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999891615573936	WITHOUT_CLASSIFICATION	1.0838442606401531E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999867258540037	WITHOUT_CLASSIFICATION	1.3274145996249253E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999365645106804	WITHOUT_CLASSIFICATION	6.343548931961626E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999871394303378	WITHOUT_CLASSIFICATION	1.2860569662091862E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999523833636575	WITHOUT_CLASSIFICATION	4.76166363423952E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999988170782081	WITHOUT_CLASSIFICATION	1.1829217918985655E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999753908267284	WITHOUT_CLASSIFICATION	2.4609173271603592E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997434073499296	WITHOUT_CLASSIFICATION	2.5659265007042586E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9997892199781379	WITHOUT_CLASSIFICATION	2.1078002186213573E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999975329928096	WITHOUT_CLASSIFICATION	2.467007190424633E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999996447681166	WITHOUT_CLASSIFICATION	3.5523188340969486E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999143572651	WITHOUT_CLASSIFICATION	8.564273499425493E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9994760262330121	WITHOUT_CLASSIFICATION	5.239737669878517E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999653098802965	WITHOUT_CLASSIFICATION	3.469011970344034E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999939870194193	WITHOUT_CLASSIFICATION	6.012980580762892E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999996331880362	WITHOUT_CLASSIFICATION	3.668119637401555E-7	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998471192106243	WITHOUT_CLASSIFICATION	1.5288078937561735E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999956632987718	WITHOUT_CLASSIFICATION	4.336701228296747E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999962828537162	WITHOUT_CLASSIFICATION	3.717146283733577E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999993929659255	WITHOUT_CLASSIFICATION	6.0703407449537054E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999885195062768	WITHOUT_CLASSIFICATION	1.1480493723297543E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999913417063687	WITHOUT_CLASSIFICATION	8.658293631253195E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999985163390226	WITHOUT_CLASSIFICATION	1.4836609773691862E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999938375657854	WITHOUT_CLASSIFICATION	6.162434214593974E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999995279602275	WITHOUT_CLASSIFICATION	4.720397724973964E-7	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.696799490100042	WITHOUT_CLASSIFICATION	0.30320050989995784	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9987558306836107	WITHOUT_CLASSIFICATION	0.001244169316389233	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999423529715957	WITHOUT_CLASSIFICATION	5.7647028404246815E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998911743080329	WITHOUT_CLASSIFICATION	1.088256919671869E-4	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8166170368426788	WITHOUT_CLASSIFICATION	0.1833829631573211	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999916198058	WITHOUT_CLASSIFICATION	8.380194151474497E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999966707106391	WITHOUT_CLASSIFICATION	3.329289360892244E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999990325872409	WITHOUT_CLASSIFICATION	9.67412759130842E-7	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999077192607032	WITHOUT_CLASSIFICATION	9.228073929678058E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999992288517171	WITHOUT_CLASSIFICATION	7.71148282926967E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999963960276146	WITHOUT_CLASSIFICATION	3.603972385448266E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999995364323494	WITHOUT_CLASSIFICATION	4.635676505987805E-7	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999985964106358	WITHOUT_CLASSIFICATION	1.4035893641556742E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999963960276146	WITHOUT_CLASSIFICATION	3.603972385448266E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999992288517171	WITHOUT_CLASSIFICATION	7.71148282926967E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999995364323494	WITHOUT_CLASSIFICATION	4.635676505987805E-7	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999945826519048	WITHOUT_CLASSIFICATION	5.417348095245722E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999993256092783	WITHOUT_CLASSIFICATION	6.743907217762547E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999827680714041	WITHOUT_CLASSIFICATION	1.723192859597952E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999398582146906	WITHOUT_CLASSIFICATION	6.014178530941751E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999808379676	WITHOUT_CLASSIFICATION	1.9162032380660633E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8231275719756057	IMPLEMENTATION	0.17687242802439426	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9957655964673484	WITHOUT_CLASSIFICATION	0.004234403532651658	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998682080318206	WITHOUT_CLASSIFICATION	1.3179196817943788E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999985646283425	WITHOUT_CLASSIFICATION	1.435371657438884E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999929349958355	WITHOUT_CLASSIFICATION	7.065004164369479E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999964949556109	WITHOUT_CLASSIFICATION	3.505044388929746E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999970512667378	WITHOUT_CLASSIFICATION	2.9487332622170175E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996504193922916	WITHOUT_CLASSIFICATION	3.495806077084352E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997551346564816	WITHOUT_CLASSIFICATION	2.448653435183741E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999081808549224	WITHOUT_CLASSIFICATION	9.181914507758899E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996808322721	WITHOUT_CLASSIFICATION	3.1916772793857755E-7	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999349275028	WITHOUT_CLASSIFICATION	6.507249713142588E-8	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999969853758	WITHOUT_CLASSIFICATION	3.014624196165626E-8	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999999218549819	WITHOUT_CLASSIFICATION	7.814501811166454E-7	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999964593893854	WITHOUT_CLASSIFICATION	3.5406106145594456E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8971001178922805	WITHOUT_CLASSIFICATION	0.1028998821077195	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999586314158	WITHOUT_CLASSIFICATION	4.136858426356604E-8	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999897252749241	WITHOUT_CLASSIFICATION	1.027472507578178E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999956903044607	WITHOUT_CLASSIFICATION	4.309695539319011E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999974515812192	WITHOUT_CLASSIFICATION	2.548418780812083E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999974515812192	WITHOUT_CLASSIFICATION	2.548418780812083E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999741178593	WITHOUT_CLASSIFICATION	2.5882140602555943E-8	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999741178593	WITHOUT_CLASSIFICATION	2.5882140602555943E-8	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.8994176928078559	WITHOUT_CLASSIFICATION	0.10058230719214407	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999349275028	WITHOUT_CLASSIFICATION	6.507249713142588E-8	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999156742209983	WITHOUT_CLASSIFICATION	8.432577900179213E-5	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999954105830021	WITHOUT_CLASSIFICATION	4.58941699795741E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999987739417405	WITHOUT_CLASSIFICATION	1.226058259433175E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999987739417405	WITHOUT_CLASSIFICATION	1.226058259433175E-6	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999936813619011	WITHOUT_CLASSIFICATION	6.318638098825247E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999994096817197	WITHOUT_CLASSIFICATION	5.9031828030109336E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999986388910921	WITHOUT_CLASSIFICATION	1.3611089078713915E-6	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999947846744573	WITHOUT_CLASSIFICATION	5.215325542722773E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993247233850221	WITHOUT_CLASSIFICATION	6.75276614977799E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999948392904652	WITHOUT_CLASSIFICATION	5.160709534884385E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999640002286003	WITHOUT_CLASSIFICATION	3.5999771399767575E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999715088066586	WITHOUT_CLASSIFICATION	2.8491193341308433E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9996515686830981	WITHOUT_CLASSIFICATION	3.484313169018393E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999959102253223	WITHOUT_CLASSIFICATION	4.0897746777193696E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.99999461813066	WITHOUT_CLASSIFICATION	5.38186933997805E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9989552445258761	WITHOUT_CLASSIFICATION	0.0010447554741238184	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999993216772864	WITHOUT_CLASSIFICATION	6.783227135659175E-7	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999890890974924	WITHOUT_CLASSIFICATION	1.0910902507605649E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9979549785902921	WITHOUT_CLASSIFICATION	0.002045021409707795	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999252748227668	WITHOUT_CLASSIFICATION	7.472517723319813E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325539068216	WITHOUT_CLASSIFICATION	6.744609317844173E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9994290272137588	WITHOUT_CLASSIFICATION	5.70972786241185E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9996058806985638	WITHOUT_CLASSIFICATION	3.941193014361994E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999964509403321	WITHOUT_CLASSIFICATION	3.5490596679669715E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998914039396002	WITHOUT_CLASSIFICATION	1.0859606039985503E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999994104017711	WITHOUT_CLASSIFICATION	5.895982290095557E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999872622268189	WITHOUT_CLASSIFICATION	1.2737773181153877E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999398087704597	WITHOUT_CLASSIFICATION	6.019122954020123E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999868414431436	WITHOUT_CLASSIFICATION	1.3158556856407804E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999973648924965	WITHOUT_CLASSIFICATION	2.635107503483375E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999143572651	WITHOUT_CLASSIFICATION	8.564273499425493E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999992607023162	WITHOUT_CLASSIFICATION	7.39297683809072E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999976487471411	WITHOUT_CLASSIFICATION	2.3512528588617884E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999508696411102	WITHOUT_CLASSIFICATION	4.913035888980087E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997277898983805	WITHOUT_CLASSIFICATION	2.722101016195116E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999510755683966	WITHOUT_CLASSIFICATION	4.8924431603441166E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999510755683966	WITHOUT_CLASSIFICATION	4.8924431603441166E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999975097239674	WITHOUT_CLASSIFICATION	2.490276032603153E-6	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999665336754683	WITHOUT_CLASSIFICATION	3.346632453163231E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999965264438876	WITHOUT_CLASSIFICATION	3.47355611235413E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999965264438876	WITHOUT_CLASSIFICATION	3.47355611235413E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9898059851790952	WITHOUT_CLASSIFICATION	0.010194014820904767	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996312691676426	WITHOUT_CLASSIFICATION	3.687308323574351E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999782593297498	WITHOUT_CLASSIFICATION	2.1740670250196302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999906446315804	WITHOUT_CLASSIFICATION	9.355368419661987E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.999916008757405	WITHOUT_CLASSIFICATION	8.399124259493351E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999502671906608	WITHOUT_CLASSIFICATION	4.973280933904642E-5	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9993033858084828	WITHOUT_CLASSIFICATION	6.966141915171922E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999947655635936	WITHOUT_CLASSIFICATION	5.234436406491645E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999970089355606	WITHOUT_CLASSIFICATION	2.991064439208654E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999970089355606	WITHOUT_CLASSIFICATION	2.991064439208654E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998890285339396	WITHOUT_CLASSIFICATION	1.1097146606053255E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986283690203	WITHOUT_CLASSIFICATION	1.3716309796914285E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986283690203	WITHOUT_CLASSIFICATION	1.3716309796914285E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993368116504	WITHOUT_CLASSIFICATION	6.631883495079571E-7	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999926651838	WITHOUT_CLASSIFICATION	7.334816210603775E-9	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991057848775846	WITHOUT_CLASSIFICATION	8.942151224154374E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999841881909042	WITHOUT_CLASSIFICATION	1.581180909591345E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999952843147519	WITHOUT_CLASSIFICATION	4.715685248064688E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998387188352	WITHOUT_CLASSIFICATION	1.6128116479191033E-7	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999298237591556	WITHOUT_CLASSIFICATION	7.017624084447226E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996578840473979	WITHOUT_CLASSIFICATION	3.4211595260207316E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999998830264551	WITHOUT_CLASSIFICATION	1.1697354480882411E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9960190237756514	WITHOUT_CLASSIFICATION	0.003980976224348557	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999923969634436	WITHOUT_CLASSIFICATION	7.603036556398813E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999340097756592	WITHOUT_CLASSIFICATION	6.59902243409306E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999208192019658	WITHOUT_CLASSIFICATION	7.918079803414525E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999208192019658	WITHOUT_CLASSIFICATION	7.918079803414525E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999208192019658	WITHOUT_CLASSIFICATION	7.918079803414525E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999208192019658	WITHOUT_CLASSIFICATION	7.918079803414525E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999889805539418	WITHOUT_CLASSIFICATION	1.1019446058279683E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999844881704242	WITHOUT_CLASSIFICATION	1.5511829575743892E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996901786647329	WITHOUT_CLASSIFICATION	3.0982133526713366E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9998522143686532	WITHOUT_CLASSIFICATION	1.4778563134677553E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999099732169916	WITHOUT_CLASSIFICATION	9.00267830084898E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.999968260259601	WITHOUT_CLASSIFICATION	3.173974039903058E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999608034139257	WITHOUT_CLASSIFICATION	3.919658607429656E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9996415277619297	WITHOUT_CLASSIFICATION	3.5847223807036917E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999742252026125	WITHOUT_CLASSIFICATION	2.577479738759851E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999919132094929	WITHOUT_CLASSIFICATION	8.08679050717828E-6	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999743070075037	WITHOUT_CLASSIFICATION	2.56929924962395E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988783113573	WITHOUT_CLASSIFICATION	1.1216886426622558E-6	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999570514890965	WITHOUT_CLASSIFICATION	4.294851090351692E-5	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9996544136666011	WITHOUT_CLASSIFICATION	3.455863333987981E-4	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999013910616328	WITHOUT_CLASSIFICATION	9.860893836728112E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988783113573	WITHOUT_CLASSIFICATION	1.1216886426622558E-6	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8976532537441158	WITHOUT_CLASSIFICATION	0.10234674625588434	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999883041107914	WITHOUT_CLASSIFICATION	1.1695889208673498E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999964482250436	WITHOUT_CLASSIFICATION	3.5517749564111505E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999950936379827	WITHOUT_CLASSIFICATION	4.906362017382748E-6	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.996848267223889	WITHOUT_CLASSIFICATION	0.003151732776111007	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998575897419423	WITHOUT_CLASSIFICATION	1.4241025805772115E-4	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999988353636191	WITHOUT_CLASSIFICATION	1.1646363809737038E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999629791776588	WITHOUT_CLASSIFICATION	3.702082234130452E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997917103874703	WITHOUT_CLASSIFICATION	2.082896125297403E-4	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998914340444	WITHOUT_CLASSIFICATION	1.0856595557385458E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933384345977	WITHOUT_CLASSIFICATION	6.661565402321812E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999993533186198	WITHOUT_CLASSIFICATION	6.46681380242243E-7	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999457439123763	WITHOUT_CLASSIFICATION	5.425608762361611E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9971116649466737	WITHOUT_CLASSIFICATION	0.0028883350533263495	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999147883448	WITHOUT_CLASSIFICATION	8.521165517498007E-8	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999700790283667	WITHOUT_CLASSIFICATION	2.9920971633306332E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999927747295	WITHOUT_CLASSIFICATION	7.225270571747717E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999988387123493	WITHOUT_CLASSIFICATION	1.161287650697205E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990126009168	WITHOUT_CLASSIFICATION	9.873990831255614E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999988387123493	WITHOUT_CLASSIFICATION	1.161287650697205E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999927374905924	WITHOUT_CLASSIFICATION	7.2625094076481245E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999140391126	WITHOUT_CLASSIFICATION	8.596088740605924E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999851235293424	WITHOUT_CLASSIFICATION	1.4876470657528082E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999985875168932	WITHOUT_CLASSIFICATION	1.4124831067810408E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999927747295	WITHOUT_CLASSIFICATION	7.225270571747717E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990126009168	WITHOUT_CLASSIFICATION	9.873990831255614E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999927374905924	WITHOUT_CLASSIFICATION	7.2625094076481245E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999598089717798	WITHOUT_CLASSIFICATION	4.01910282202122E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9997491500605994	WITHOUT_CLASSIFICATION	2.508499394005153E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9978627586995562	WITHOUT_CLASSIFICATION	0.0021372413004437847	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.99669517939022	WITHOUT_CLASSIFICATION	0.0033048206097799947	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998994492586449	WITHOUT_CLASSIFICATION	1.0055074135500293E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999988795654465	WITHOUT_CLASSIFICATION	1.1204345534751277E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325539068216	WITHOUT_CLASSIFICATION	6.744609317844173E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999140391126	WITHOUT_CLASSIFICATION	8.596088740605924E-8	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999997038341323	WITHOUT_CLASSIFICATION	2.961658677538201E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998273172335791	WITHOUT_CLASSIFICATION	1.72682766420813E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999996986598604	WITHOUT_CLASSIFICATION	3.013401396232571E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325539068216	WITHOUT_CLASSIFICATION	6.744609317844173E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999977251360967	WITHOUT_CLASSIFICATION	2.2748639032222416E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325539068216	WITHOUT_CLASSIFICATION	6.744609317844173E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999993096454992	WITHOUT_CLASSIFICATION	6.903545007029416E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999916053340187	WITHOUT_CLASSIFICATION	8.394665981410818E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999760528698811	WITHOUT_CLASSIFICATION	2.3947130118893934E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999875389921137	WITHOUT_CLASSIFICATION	1.2461007886308561E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999959634783445	WITHOUT_CLASSIFICATION	4.036521655494742E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999817839002948	WITHOUT_CLASSIFICATION	1.8216099705133838E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999994727463143	WITHOUT_CLASSIFICATION	5.2725368582381E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999514791495727	WITHOUT_CLASSIFICATION	4.852085042725119E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999979639415876	WITHOUT_CLASSIFICATION	2.036058412395283E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999880656446183	WITHOUT_CLASSIFICATION	1.1934355381750405E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997119408253013	WITHOUT_CLASSIFICATION	2.880591746987138E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999573075092	WITHOUT_CLASSIFICATION	4.269249067883988E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991057848775846	WITHOUT_CLASSIFICATION	8.942151224154374E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999830499842062	WITHOUT_CLASSIFICATION	1.695001579387788E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999849124024768	WITHOUT_CLASSIFICATION	1.5087597523084029E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999878388690806	WITHOUT_CLASSIFICATION	1.2161130919490454E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999826429680472	WITHOUT_CLASSIFICATION	1.7357031952725513E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999999980069581	WITHOUT_CLASSIFICATION	1.9930418974540335E-8	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999490121287729	WITHOUT_CLASSIFICATION	5.098787122718977E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9944600087851557	WITHOUT_CLASSIFICATION	0.0055399912148443664	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9977296694645715	WITHOUT_CLASSIFICATION	0.002270330535428531	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997145499611	WITHOUT_CLASSIFICATION	2.8545003887674785E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999558234246	WITHOUT_CLASSIFICATION	4.4176575436850346E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9991057848775846	WITHOUT_CLASSIFICATION	8.942151224154374E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999306761603729	WITHOUT_CLASSIFICATION	6.93238396271799E-5	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999991609354295	WITHOUT_CLASSIFICATION	8.390645705037418E-6	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999988858499119	WITHOUT_CLASSIFICATION	1.114150088059296E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999545123646801	WITHOUT_CLASSIFICATION	4.548763531987179E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999545346590261	WITHOUT_CLASSIFICATION	4.546534097384683E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998793614236	WITHOUT_CLASSIFICATION	1.2063857645332277E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9846879648133653	WITHOUT_CLASSIFICATION	0.01531203518663474	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999915136238174	WITHOUT_CLASSIFICATION	8.486376182485266E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997805987018301	WITHOUT_CLASSIFICATION	2.194012981699386E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999707900706829	WITHOUT_CLASSIFICATION	2.9209929317192428E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9991545785097949	WITHOUT_CLASSIFICATION	8.454214902049509E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999996682745635	WITHOUT_CLASSIFICATION	3.3172543649767476E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999736231334153	WITHOUT_CLASSIFICATION	2.637686658462285E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998631922503375	WITHOUT_CLASSIFICATION	1.3680774966247708E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996498562550431	WITHOUT_CLASSIFICATION	3.501437449568497E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999986818140787	WITHOUT_CLASSIFICATION	1.3181859213176797E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9958333995059241	WITHOUT_CLASSIFICATION	0.004166600494075955	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999963992994129	WITHOUT_CLASSIFICATION	3.6007005870308564E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9990645144654757	WITHOUT_CLASSIFICATION	9.354855345243057E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9994312603882963	WITHOUT_CLASSIFICATION	5.687396117037231E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9994312603882963	WITHOUT_CLASSIFICATION	5.687396117037231E-4	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.7517055786338369	WITHOUT_CLASSIFICATION	0.24829442136616306	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999514791495727	WITHOUT_CLASSIFICATION	4.852085042725119E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995934523465138	WITHOUT_CLASSIFICATION	4.0654765348623805E-4	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999846140997	WITHOUT_CLASSIFICATION	1.538590029259814E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999687382843009	WITHOUT_CLASSIFICATION	3.126171569908709E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9985181741931015	WITHOUT_CLASSIFICATION	0.0014818258068983914	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999931668276285	WITHOUT_CLASSIFICATION	6.833172371481451E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999282128929976	WITHOUT_CLASSIFICATION	7.178710700241573E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999876444741952	WITHOUT_CLASSIFICATION	1.2355525804920718E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999928513796	WITHOUT_CLASSIFICATION	7.148620465101206E-9	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9760573010865577	WITHOUT_CLASSIFICATION	0.023942698913442282	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999990725393771	WITHOUT_CLASSIFICATION	9.27460622823565E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999978732362329	WITHOUT_CLASSIFICATION	2.1267637671060825E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999997492700328	WITHOUT_CLASSIFICATION	2.5072996721969764E-7	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999998722342742	WITHOUT_CLASSIFICATION	1.2776572579666965E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9962406321044841	WITHOUT_CLASSIFICATION	0.0037593678955159843	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999995212648781	WITHOUT_CLASSIFICATION	4.787351217771632E-7	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998912416505	WITHOUT_CLASSIFICATION	1.0875834950297278E-7	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999935371177	WITHOUT_CLASSIFICATION	6.4628824054868175E-9	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9900472922788773	WITHOUT_CLASSIFICATION	0.009952707721122694	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999907615037058	WITHOUT_CLASSIFICATION	9.23849629422237E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994016061173818	WITHOUT_CLASSIFICATION	5.983938826182142E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999962796774514	WITHOUT_CLASSIFICATION	3.720322548602727E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998578023042	WITHOUT_CLASSIFICATION	1.4219769570978118E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9958333995059241	WITHOUT_CLASSIFICATION	0.004166600494075955	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999906548485711	WITHOUT_CLASSIFICATION	9.345151428928005E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999995888031198	WITHOUT_CLASSIFICATION	4.1119688020262215E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999652453296	WITHOUT_CLASSIFICATION	3.475467031033308E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999932921011161	WITHOUT_CLASSIFICATION	6.707898883902351E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9935664279784022	WITHOUT_CLASSIFICATION	0.006433572021597751	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999972179598191	WITHOUT_CLASSIFICATION	2.7820401809016592E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999980752682263	WITHOUT_CLASSIFICATION	1.924731773765287E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999977065364225	WITHOUT_CLASSIFICATION	2.2934635775395956E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997403528581	WITHOUT_CLASSIFICATION	2.596471419645885E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999997971397053	WITHOUT_CLASSIFICATION	2.0286029469809186E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999821678707668	WITHOUT_CLASSIFICATION	1.7832129233204905E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999995731027258	WITHOUT_CLASSIFICATION	4.2689727419723475E-6	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999988946861703	WITHOUT_CLASSIFICATION	1.1053138297310232E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997084978207481	WITHOUT_CLASSIFICATION	2.9150217925191E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995187176531665	WITHOUT_CLASSIFICATION	4.8128234683363693E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995187176531665	WITHOUT_CLASSIFICATION	4.8128234683363693E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999167432443795	WITHOUT_CLASSIFICATION	8.325675562052472E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999024762233212	WITHOUT_CLASSIFICATION	9.752377667875986E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999967226681942	WITHOUT_CLASSIFICATION	3.277331805744059E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999967226681942	WITHOUT_CLASSIFICATION	3.277331805744059E-6	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999998028570272	WITHOUT_CLASSIFICATION	1.9714297292641035E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999817882385013	WITHOUT_CLASSIFICATION	1.821176149874588E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7986834103014899	WITHOUT_CLASSIFICATION	0.2013165896985101	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999998949396097	WITHOUT_CLASSIFICATION	1.0506039025641972E-7	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993796428057	WITHOUT_CLASSIFICATION	6.203571942474812E-7	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996300603682	WITHOUT_CLASSIFICATION	3.6993963182493537E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.99999987657977	WITHOUT_CLASSIFICATION	1.234202299947124E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.99999987657977	WITHOUT_CLASSIFICATION	1.234202299947124E-7	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992967851874	WITHOUT_CLASSIFICATION	7.032148126428265E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999973055986537	WITHOUT_CLASSIFICATION	2.694401346179113E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999969251009362	WITHOUT_CLASSIFICATION	3.0748990639502093E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999976219944622	WITHOUT_CLASSIFICATION	2.378005537753023E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999976219944622	WITHOUT_CLASSIFICATION	2.378005537753023E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999983158641021	WITHOUT_CLASSIFICATION	1.6841358979576118E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999825053196968	WITHOUT_CLASSIFICATION	1.7494680303195243E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999959256133747	WITHOUT_CLASSIFICATION	4.0743866252932856E-6	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999945377486882	WITHOUT_CLASSIFICATION	5.462251311728298E-6	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999988268984397	WITHOUT_CLASSIFICATION	1.1731015603286852E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999856900309141	WITHOUT_CLASSIFICATION	1.4309969085964724E-5	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999572894640656	WITHOUT_CLASSIFICATION	4.2710535934506114E-5	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999830203574096	WITHOUT_CLASSIFICATION	1.6979642590394118E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999992817714594	WITHOUT_CLASSIFICATION	7.182285407716034E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999906501883715	WITHOUT_CLASSIFICATION	9.34981162847889E-6	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998456760179	WITHOUT_CLASSIFICATION	1.5432398220803416E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9936137633897489	WITHOUT_CLASSIFICATION	0.006386236610251125	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9808549440016766	WITHOUT_CLASSIFICATION	0.019145055998323387	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999483713812853	WITHOUT_CLASSIFICATION	5.16286187147673E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999443727039231	WITHOUT_CLASSIFICATION	5.562729607692325E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999430843057	WITHOUT_CLASSIFICATION	5.691569417303811E-8	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998274056937455	WITHOUT_CLASSIFICATION	1.725943062545454E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999958406522341	WITHOUT_CLASSIFICATION	4.159347765785426E-6	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999950576716077	WITHOUT_CLASSIFICATION	4.942328392364001E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999992204521109	WITHOUT_CLASSIFICATION	7.795478890941373E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999986194730573	WITHOUT_CLASSIFICATION	1.3805269427188812E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997082024737459	WITHOUT_CLASSIFICATION	2.917975262541087E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9727076238520292	WITHOUT_CLASSIFICATION	0.0272923761479708	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999898689040918	WITHOUT_CLASSIFICATION	1.0131095908235589E-5	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999873298916099	WITHOUT_CLASSIFICATION	1.2670108390095048E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999934494327	WITHOUT_CLASSIFICATION	6.550567425828086E-9	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999103721888	WITHOUT_CLASSIFICATION	8.962781121229469E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999514765083852	WITHOUT_CLASSIFICATION	4.8523491614797295E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997050800549	WITHOUT_CLASSIFICATION	2.9491994513718494E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999746837094134	WITHOUT_CLASSIFICATION	2.5316290586481895E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9992397893830719	WITHOUT_CLASSIFICATION	7.602106169281387E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999952039947742	WITHOUT_CLASSIFICATION	4.796005225921626E-6	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996195569928	WITHOUT_CLASSIFICATION	3.8044300717190273E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999316763789813	WITHOUT_CLASSIFICATION	6.832362101868868E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999619756875261	WITHOUT_CLASSIFICATION	3.802431247385841E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999351985741328	WITHOUT_CLASSIFICATION	6.480142586719149E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9993002774666382	WITHOUT_CLASSIFICATION	6.997225333617328E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999996399643002	WITHOUT_CLASSIFICATION	3.600356997782526E-7	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999849884875373	WITHOUT_CLASSIFICATION	1.501151246273501E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998709090349	WITHOUT_CLASSIFICATION	1.2909096513390842E-7	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999994642840766	WITHOUT_CLASSIFICATION	5.357159233032716E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999991451765478	WITHOUT_CLASSIFICATION	8.54823452192251E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999966656689304	WITHOUT_CLASSIFICATION	3.3343310695392745E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999674777799626	WITHOUT_CLASSIFICATION	3.252222003733698E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999561154838978	WITHOUT_CLASSIFICATION	4.3884516102289095E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999991959216358	WITHOUT_CLASSIFICATION	8.040783641475645E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999607038769752	WITHOUT_CLASSIFICATION	3.929612302486399E-5	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999952657844644	WITHOUT_CLASSIFICATION	4.7342155356082176E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999988582560091	WITHOUT_CLASSIFICATION	1.1417439909437913E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999992637589062	WITHOUT_CLASSIFICATION	7.362410937449783E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999804205377171	WITHOUT_CLASSIFICATION	1.9579462282882882E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9953752812174683	WITHOUT_CLASSIFICATION	0.004624718782531647	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9922422792074599	WITHOUT_CLASSIFICATION	0.00775772079254006	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999994161130922	WITHOUT_CLASSIFICATION	5.838869077494754E-7	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999987528474857	WITHOUT_CLASSIFICATION	1.2471525143048665E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9979834832188295	WITHOUT_CLASSIFICATION	0.002016516781170551	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999986496216633	WITHOUT_CLASSIFICATION	1.3503783367000966E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999962942427995	WITHOUT_CLASSIFICATION	3.70575720059571E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999986569268396	WITHOUT_CLASSIFICATION	1.3430731603069973E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999977684735463	WITHOUT_CLASSIFICATION	2.2315264537261942E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994485562596	WITHOUT_CLASSIFICATION	5.51443740386352E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994485562596	WITHOUT_CLASSIFICATION	5.51443740386352E-7	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999998586194286	WITHOUT_CLASSIFICATION	1.413805713832271E-7	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999991331397773	WITHOUT_CLASSIFICATION	8.668602227102632E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998613401844	WITHOUT_CLASSIFICATION	1.3865981563223078E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999722438884	WITHOUT_CLASSIFICATION	2.7756111636159658E-8	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999989630316262	WITHOUT_CLASSIFICATION	1.0369683738439886E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9998799104456831	WITHOUT_CLASSIFICATION	1.2008955431697337E-4	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999937002518	WITHOUT_CLASSIFICATION	6.299748190793474E-9	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999978850959533	WITHOUT_CLASSIFICATION	2.1149040466044558E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999997135763234	WITHOUT_CLASSIFICATION	2.864236765056989E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999267902046	WITHOUT_CLASSIFICATION	7.320979535557038E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999997136651714	WITHOUT_CLASSIFICATION	2.8633482859287207E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999881214145151	WITHOUT_CLASSIFICATION	1.187858548494885E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999978155869497	WITHOUT_CLASSIFICATION	2.1844130503277144E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999350786109056	WITHOUT_CLASSIFICATION	6.492138909441093E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999103410924163	WITHOUT_CLASSIFICATION	8.965890758367326E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999103410924163	WITHOUT_CLASSIFICATION	8.965890758367326E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999988783996	WITHOUT_CLASSIFICATION	1.121600344197676E-9	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999990631678548	WITHOUT_CLASSIFICATION	9.36832145091058E-7	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999996239262827	WITHOUT_CLASSIFICATION	3.760737173404587E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999176756978	WITHOUT_CLASSIFICATION	8.232430211714317E-8	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999969163003741	WITHOUT_CLASSIFICATION	3.0836996258097576E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961304439658	WITHOUT_CLASSIFICATION	3.8695560341617966E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999814309965992	WITHOUT_CLASSIFICATION	1.856900340079714E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9997971018869402	WITHOUT_CLASSIFICATION	2.0289811305989561E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999989382388794	WITHOUT_CLASSIFICATION	1.0617611206158054E-6	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997506612177	WITHOUT_CLASSIFICATION	2.4933878225991625E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999989411165828	WITHOUT_CLASSIFICATION	1.0588834172343999E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999962958423815	WITHOUT_CLASSIFICATION	3.7041576184710234E-6	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999998120006919	WITHOUT_CLASSIFICATION	1.879993080668847E-7	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999936318582958	WITHOUT_CLASSIFICATION	6.3681417042045955E-6	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999953886766093	WITHOUT_CLASSIFICATION	4.611323390730098E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999979198157403	WITHOUT_CLASSIFICATION	2.08018425976736E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999094145955286	WITHOUT_CLASSIFICATION	9.058540447132414E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999698848944	WITHOUT_CLASSIFICATION	3.0115105602238463E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999999766968268	WITHOUT_CLASSIFICATION	2.3303173214391913E-7	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999986138150458	WITHOUT_CLASSIFICATION	1.386184954138051E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999982183449531	WITHOUT_CLASSIFICATION	1.7816550468802887E-6	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990265048838	WITHOUT_CLASSIFICATION	9.734951161938735E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999984845210564	WITHOUT_CLASSIFICATION	1.5154789435534222E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999672900303095	WITHOUT_CLASSIFICATION	3.270996969053604E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999522658999395	WITHOUT_CLASSIFICATION	4.773410006061472E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997327172750843	WITHOUT_CLASSIFICATION	2.6728272491564117E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999941820013432	WITHOUT_CLASSIFICATION	5.817998656788379E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9446896863307762	WITHOUT_CLASSIFICATION	0.05531031366922365	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994189171296	WITHOUT_CLASSIFICATION	5.81082870467044E-7	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999998053469898	WITHOUT_CLASSIFICATION	1.9465301007420392E-7	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999971078732063	WITHOUT_CLASSIFICATION	2.8921267937490477E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999993916378888	WITHOUT_CLASSIFICATION	6.083621113770867E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996955874439974	WITHOUT_CLASSIFICATION	3.044125560025434E-4	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999965001356555	WITHOUT_CLASSIFICATION	3.4998643445146976E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.990242463325749	WITHOUT_CLASSIFICATION	0.00975753667425115	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999980318624678	WITHOUT_CLASSIFICATION	1.968137532230327E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999928617437123	WITHOUT_CLASSIFICATION	7.1382562876352165E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998486686191	WITHOUT_CLASSIFICATION	1.5133138088224995E-7	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999842449607269	WITHOUT_CLASSIFICATION	1.5755039273161963E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999984003630539	WITHOUT_CLASSIFICATION	1.599636946140687E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996366694879142	WITHOUT_CLASSIFICATION	3.6333051208576185E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996366694879142	WITHOUT_CLASSIFICATION	3.6333051208576185E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999842881274521	WITHOUT_CLASSIFICATION	1.5711872547841437E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999033505041798	WITHOUT_CLASSIFICATION	9.664949582010999E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9985225054804985	WITHOUT_CLASSIFICATION	0.001477494519501491	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999988946857097	WITHOUT_CLASSIFICATION	1.1053142902185559E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999329887972581	WITHOUT_CLASSIFICATION	6.701120274189101E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999935659021554	WITHOUT_CLASSIFICATION	6.43409784470983E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999904504538448	WITHOUT_CLASSIFICATION	9.549546155205822E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999895388994376	WITHOUT_CLASSIFICATION	1.0461100562307075E-5	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999911073712325	WITHOUT_CLASSIFICATION	8.892628767440489E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990354872678	WITHOUT_CLASSIFICATION	9.645127322613485E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991820769337	WITHOUT_CLASSIFICATION	8.179230661761772E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999655301960496	WITHOUT_CLASSIFICATION	3.446980395049318E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999573166291017	WITHOUT_CLASSIFICATION	4.268337089833766E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999990134144464	WITHOUT_CLASSIFICATION	9.865855536010552E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997110182073821	WITHOUT_CLASSIFICATION	2.8898179261799994E-4	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9772490310917562	WITHOUT_CLASSIFICATION	0.022750968908243727	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999980675749357	WITHOUT_CLASSIFICATION	1.9324250642535743E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999989679000857	WITHOUT_CLASSIFICATION	1.032099914222147E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999603331500858	WITHOUT_CLASSIFICATION	3.9666849914183936E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999998295344212	WITHOUT_CLASSIFICATION	1.7046557890382629E-7	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999704992022	WITHOUT_CLASSIFICATION	2.950079784542408E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9991509048262932	WITHOUT_CLASSIFICATION	8.490951737068648E-4	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999833002170043	WITHOUT_CLASSIFICATION	1.669978299570012E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999971270927898	WITHOUT_CLASSIFICATION	2.8729072102065528E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999420609344282	WITHOUT_CLASSIFICATION	5.7939065571773755E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998580047875076	WITHOUT_CLASSIFICATION	1.4199521249241224E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999997934447464	WITHOUT_CLASSIFICATION	2.0655525360763865E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999998279701742	WITHOUT_CLASSIFICATION	1.7202982586504234E-7	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9588553859265133	WITHOUT_CLASSIFICATION	0.04114461407348671	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9981285347356348	WITHOUT_CLASSIFICATION	0.001871465264365241	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999465451459574	WITHOUT_CLASSIFICATION	5.3454854042598584E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9995687175669865	WITHOUT_CLASSIFICATION	4.312824330134791E-4	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999751009464	WITHOUT_CLASSIFICATION	2.489905360365561E-8	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999996585429869	WITHOUT_CLASSIFICATION	3.414570131185701E-7	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999148865509	WITHOUT_CLASSIFICATION	8.511344910071108E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999915753564379	WITHOUT_CLASSIFICATION	8.42464356214121E-6	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999996841316894	WITHOUT_CLASSIFICATION	3.1586831060660286E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998933143778	WITHOUT_CLASSIFICATION	1.0668562228081667E-7	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999856670484566	WITHOUT_CLASSIFICATION	1.4332951543342536E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999033382692911	WITHOUT_CLASSIFICATION	9.666173070890497E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999995512499547	WITHOUT_CLASSIFICATION	4.487500452935309E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993595119212	WITHOUT_CLASSIFICATION	6.404880788004649E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999816760643	WITHOUT_CLASSIFICATION	1.8323935623049624E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999997860164245	WITHOUT_CLASSIFICATION	2.1398357556860828E-7	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999907368767798	WITHOUT_CLASSIFICATION	9.263123220207094E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996583564870101	WITHOUT_CLASSIFICATION	3.416435129899762E-4	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999987386811846	WITHOUT_CLASSIFICATION	1.2613188154330001E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999978155869497	WITHOUT_CLASSIFICATION	2.1844130503277144E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999996792691	WITHOUT_CLASSIFICATION	3.20730793818964E-10	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999889047867	WITHOUT_CLASSIFICATION	1.109521330067392E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9966914072007753	WITHOUT_CLASSIFICATION	0.0033085927992247814	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999173056451537	WITHOUT_CLASSIFICATION	8.269435484634812E-5	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999919127887479	WITHOUT_CLASSIFICATION	8.087211252085648E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995173887460345	WITHOUT_CLASSIFICATION	4.8261125396550746E-4	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.7516494105631797	WITHOUT_CLASSIFICATION	0.24835058943682028	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999386302002978	WITHOUT_CLASSIFICATION	6.136979970219371E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999336711899	WITHOUT_CLASSIFICATION	6.632881003603017E-8	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9986170904022496	WITHOUT_CLASSIFICATION	0.0013829095977504326	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9931676812048122	WITHOUT_CLASSIFICATION	0.006832318795187758	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999868824123913	WITHOUT_CLASSIFICATION	1.3117587608658214E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999807904799	WITHOUT_CLASSIFICATION	1.9209520077374356E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999588307178	WITHOUT_CLASSIFICATION	4.116928218503713E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998389024138074	WITHOUT_CLASSIFICATION	1.6109758619271234E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9987413528838517	WITHOUT_CLASSIFICATION	0.0012586471161483	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999997904747409	WITHOUT_CLASSIFICATION	2.0952525906234655E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999899424367126	WITHOUT_CLASSIFICATION	1.0057563287437297E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999881782379156	WITHOUT_CLASSIFICATION	1.1821762084262675E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998389024138074	WITHOUT_CLASSIFICATION	1.6109758619271234E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999998706347304	WITHOUT_CLASSIFICATION	1.2936526958068576E-7	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999933541649	WITHOUT_CLASSIFICATION	6.645835157189747E-9	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999960704474627	WITHOUT_CLASSIFICATION	3.929552537226399E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998944906474	WITHOUT_CLASSIFICATION	1.0550935262648546E-7	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999995297790977	WITHOUT_CLASSIFICATION	4.702209023007724E-7	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999985019832	WITHOUT_CLASSIFICATION	1.498016799668918E-8	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999678293505	WITHOUT_CLASSIFICATION	3.2170649494378073E-8	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9985603888723281	WITHOUT_CLASSIFICATION	0.0014396111276718162	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999819327456	WITHOUT_CLASSIFICATION	1.8067254409801845E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999989966879396	WITHOUT_CLASSIFICATION	1.0033120604142225E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9878641935640079	WITHOUT_CLASSIFICATION	0.012135806435992116	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.999944457044262	WITHOUT_CLASSIFICATION	5.554295573788303E-5	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999986796044806	WITHOUT_CLASSIFICATION	1.320395519310976E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9061098857477694	WITHOUT_CLASSIFICATION	0.09389011425223051	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9985801450771147	WITHOUT_CLASSIFICATION	0.001419854922885241	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998578023042	WITHOUT_CLASSIFICATION	1.4219769570978118E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999950164252273	WITHOUT_CLASSIFICATION	4.983574772841104E-6	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999999858827395	WITHOUT_CLASSIFICATION	1.4117260493376672E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9940721972727592	WITHOUT_CLASSIFICATION	0.0059278027272408875	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9852062583004109	WITHOUT_CLASSIFICATION	0.014793741699589103	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9987676800417669	WITHOUT_CLASSIFICATION	0.0012323199582331404	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999333315126607	WITHOUT_CLASSIFICATION	6.666848733926488E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999973061378076	WITHOUT_CLASSIFICATION	2.693862192403104E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999992540415737	WITHOUT_CLASSIFICATION	7.459584263114712E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999995355678	WITHOUT_CLASSIFICATION	4.644320826561545E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999127427536	WITHOUT_CLASSIFICATION	8.725724640045672E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998659622501499	WITHOUT_CLASSIFICATION	1.3403774985004183E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999849499981508	WITHOUT_CLASSIFICATION	1.5050001849112055E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.6257275917772788	WITHOUT_CLASSIFICATION	0.37427240822272123	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9777371873931672	IMPLEMENTATION	0.022262812606832768	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999961616292234	WITHOUT_CLASSIFICATION	3.8383707765660554E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9977613354544118	WITHOUT_CLASSIFICATION	0.00223866454558823	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9995556682714796	WITHOUT_CLASSIFICATION	4.4433172852048896E-4	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999904356915374	WITHOUT_CLASSIFICATION	9.564308462555874E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999939512958618	WITHOUT_CLASSIFICATION	6.048704138311673E-6	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999899365865	WITHOUT_CLASSIFICATION	1.0063413549512194E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999483183266774	WITHOUT_CLASSIFICATION	5.168167332254146E-5	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999990315592641	WITHOUT_CLASSIFICATION	9.684407358669958E-7	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999851405714	WITHOUT_CLASSIFICATION	1.4859428678309358E-8	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999997326792038	WITHOUT_CLASSIFICATION	2.673207961316176E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9795808674670303	WITHOUT_CLASSIFICATION	0.020419132532969647	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9795808674670303	WITHOUT_CLASSIFICATION	0.020419132532969647	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999980541560245	WITHOUT_CLASSIFICATION	1.9458439754989146E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993050483211	WITHOUT_CLASSIFICATION	6.949516787481452E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996037195918	WITHOUT_CLASSIFICATION	3.9628040823758406E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9995382759900197	WITHOUT_CLASSIFICATION	4.617240099803036E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999906446315804	WITHOUT_CLASSIFICATION	9.355368419661987E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999906446315804	WITHOUT_CLASSIFICATION	9.355368419661987E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999683920696689	WITHOUT_CLASSIFICATION	3.160793033104809E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999250588888	WITHOUT_CLASSIFICATION	7.494111117301066E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999581189837122	WITHOUT_CLASSIFICATION	4.1881016287772415E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998005748702221	WITHOUT_CLASSIFICATION	1.9942512977789815E-4	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999976452662861	WITHOUT_CLASSIFICATION	2.3547337138849837E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999774996099401	WITHOUT_CLASSIFICATION	2.2500390059960204E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999986634758274	WITHOUT_CLASSIFICATION	1.3365241724675546E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999982564236394	WITHOUT_CLASSIFICATION	1.743576360604547E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999786981635	WITHOUT_CLASSIFICATION	2.1301836527430054E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995097401486	WITHOUT_CLASSIFICATION	4.90259851391387E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995097401486	WITHOUT_CLASSIFICATION	4.90259851391387E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999995527447394	WITHOUT_CLASSIFICATION	4.4725526058123783E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999863087020742	WITHOUT_CLASSIFICATION	1.3691297925932136E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999988454436267	WITHOUT_CLASSIFICATION	1.1545563732845895E-6	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999336096036855	WITHOUT_CLASSIFICATION	6.639039631455005E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999489765173567	WITHOUT_CLASSIFICATION	5.102348264333975E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894480603536	WITHOUT_CLASSIFICATION	1.0551939646428342E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970790102498	WITHOUT_CLASSIFICATION	2.9209897501976852E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999990840690816	WITHOUT_CLASSIFICATION	9.159309183877155E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999947087878964	WITHOUT_CLASSIFICATION	5.291212103570294E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999426078143302	WITHOUT_CLASSIFICATION	5.739218566989778E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999853385051605	WITHOUT_CLASSIFICATION	1.4661494839466241E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999989966879396	WITHOUT_CLASSIFICATION	1.0033120604142225E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999994561686805	WITHOUT_CLASSIFICATION	5.438313196558234E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999633916080328	WITHOUT_CLASSIFICATION	3.660839196721336E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999934818383855	WITHOUT_CLASSIFICATION	6.518161614419013E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999917074064197	WITHOUT_CLASSIFICATION	8.292593580262377E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999907574516029	WITHOUT_CLASSIFICATION	9.242548397142114E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999997458382874	WITHOUT_CLASSIFICATION	2.5416171260304475E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999873695542063	WITHOUT_CLASSIFICATION	1.2630445793562898E-5	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999975083180885	WITHOUT_CLASSIFICATION	2.491681911469049E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999974425431554	WITHOUT_CLASSIFICATION	2.5574568447268117E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992974281591712	WITHOUT_CLASSIFICATION	7.025718408287603E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992974281591712	WITHOUT_CLASSIFICATION	7.025718408287603E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988783113573	WITHOUT_CLASSIFICATION	1.1216886426622558E-6	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9994629632363655	WITHOUT_CLASSIFICATION	5.370367636345361E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997903631299494	WITHOUT_CLASSIFICATION	2.0963687005067186E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9990122135361041	WITHOUT_CLASSIFICATION	9.87786463895851E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999880491164815	WITHOUT_CLASSIFICATION	1.195088351841166E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999656853380692	WITHOUT_CLASSIFICATION	3.4314661930890075E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999147883448	WITHOUT_CLASSIFICATION	8.521165517498007E-8	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999996504940264	WITHOUT_CLASSIFICATION	3.4950597371127073E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999598089717798	WITHOUT_CLASSIFICATION	4.01910282202122E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994380647446213	WITHOUT_CLASSIFICATION	5.619352553787873E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999325539068216	WITHOUT_CLASSIFICATION	6.744609317844173E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997166477270647	WITHOUT_CLASSIFICATION	2.833522729352686E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8910073758831143	WITHOUT_CLASSIFICATION	0.10899262411688565	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998387677002	WITHOUT_CLASSIFICATION	1.6123229976960002E-7	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999985518669112	WITHOUT_CLASSIFICATION	1.448133088725344E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985701725187	WITHOUT_CLASSIFICATION	1.4298274813013789E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999937994379	WITHOUT_CLASSIFICATION	6.200562111553271E-9	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999888562216745	WITHOUT_CLASSIFICATION	1.1143778325478148E-5	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999850204755562	WITHOUT_CLASSIFICATION	1.4979524443791596E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999998637396	WITHOUT_CLASSIFICATION	1.362604711535111E-10	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999885616228	WITHOUT_CLASSIFICATION	1.1438377212796227E-8	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999947912509365	WITHOUT_CLASSIFICATION	5.208749063453973E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999959256133747	WITHOUT_CLASSIFICATION	4.0743866252932856E-6	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999944771026	WITHOUT_CLASSIFICATION	5.522897333114309E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993462874138	WITHOUT_CLASSIFICATION	6.537125862469573E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993462874138	WITHOUT_CLASSIFICATION	6.537125862469573E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998742416686034	WITHOUT_CLASSIFICATION	1.257583313966711E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9937411705757716	WITHOUT_CLASSIFICATION	0.0062588294242284315	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999297011978789	WITHOUT_CLASSIFICATION	7.029880212100991E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999993661156917	WITHOUT_CLASSIFICATION	6.338843083060939E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999920756179514	WITHOUT_CLASSIFICATION	7.924382048617149E-6	IMPLEMENTATION
