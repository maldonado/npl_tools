// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9946977592719649	WITHOUT_CLASSIFICATION	0.005302240728035153	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9946977592719649	WITHOUT_CLASSIFICATION	0.005302240728035153	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9998208022928347	WITHOUT_CLASSIFICATION	1.7919770716533811E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9695968586946154	WITHOUT_CLASSIFICATION	0.030403141305384556	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9840808841599443	WITHOUT_CLASSIFICATION	0.01591911584005569	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9555841030253551	IMPLEMENTATION	0.0444158969746448	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9918458791756409	WITHOUT_CLASSIFICATION	0.008154120824359084	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9555977170161599	WITHOUT_CLASSIFICATION	0.044402282983840094	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9942307790248478	WITHOUT_CLASSIFICATION	0.005769220975152281	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9012446952881229	WITHOUT_CLASSIFICATION	0.09875530471187716	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9868404574036733	WITHOUT_CLASSIFICATION	0.013159542596326602	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.5649833885136444	IMPLEMENTATION	0.4350166114863556	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9546071815807836	WITHOUT_CLASSIFICATION	0.04539281841921632	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9546071815807836	WITHOUT_CLASSIFICATION	0.04539281841921632	IMPLEMENTATION
/**	IMPLEMENTATION	0.7289685833385907	IMPLEMENTATION	0.2710314166614093	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.736960881004781	IMPLEMENTATION	0.2630391189952191	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.999873328416613	IMPLEMENTATION	1.2667158338700545E-4	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9988716672639544	WITHOUT_CLASSIFICATION	0.0011283327360455475	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999995383794	WITHOUT_CLASSIFICATION	4.6162058904766106E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.5915664359693354	IMPLEMENTATION	0.40843356403066444	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8755023393942001	WITHOUT_CLASSIFICATION	0.12449766060579993	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999149304952969	WITHOUT_CLASSIFICATION	8.50695047031253E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9461995150736541	WITHOUT_CLASSIFICATION	0.053800484926345926	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8351668889391333	IMPLEMENTATION	0.1648331110608667	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8351668889391333	IMPLEMENTATION	0.1648331110608667	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9982192416199259	IMPLEMENTATION	0.0017807583800740526	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9422064617905241	WITHOUT_CLASSIFICATION	0.05779353820947576	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9989307062658345	IMPLEMENTATION	0.0010692937341655851	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8337014823028864	IMPLEMENTATION	0.1662985176971135	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7640855190770228	IMPLEMENTATION	0.23591448092297712	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9692504090018522	WITHOUT_CLASSIFICATION	0.030749590998147752	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.8262671355832131	IMPLEMENTATION	0.1737328644167869	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9988622188840269	WITHOUT_CLASSIFICATION	0.001137781115973075	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6553664594292534	WITHOUT_CLASSIFICATION	0.3446335405707466	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8239750260617245	IMPLEMENTATION	0.1760249739382755	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.999492212765304	WITHOUT_CLASSIFICATION	5.07787234696018E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.815614361593879	IMPLEMENTATION	0.184385638406121	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9705514462394949	WITHOUT_CLASSIFICATION	0.029448553760505092	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9858153594347064	WITHOUT_CLASSIFICATION	0.014184640565293593	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9940929247942036	IMPLEMENTATION	0.005907075205796381	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9940929247942036	IMPLEMENTATION	0.005907075205796381	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8355082357054538	IMPLEMENTATION	0.16449176429454623	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9993230559627017	WITHOUT_CLASSIFICATION	6.769440372982477E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9497890683736936	WITHOUT_CLASSIFICATION	0.05021093162630642	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9995449256558684	IMPLEMENTATION	4.5507434413162226E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9363133210527994	WITHOUT_CLASSIFICATION	0.0636866789472007	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9988289490798569	WITHOUT_CLASSIFICATION	0.0011710509201431213	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.950564294346932	WITHOUT_CLASSIFICATION	0.049435705653067964	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999870457814839	WITHOUT_CLASSIFICATION	1.2954218516048868E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.5768880216647665	IMPLEMENTATION	0.4231119783352336	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9980194624592768	WITHOUT_CLASSIFICATION	0.001980537540723247	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9988380563921675	IMPLEMENTATION	0.0011619436078324679	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7649223583301565	WITHOUT_CLASSIFICATION	0.23507764166984346	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9499593928078297	WITHOUT_CLASSIFICATION	0.050040607192170225	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8889435133207374	WITHOUT_CLASSIFICATION	0.11105648667926261	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9639739483514274	IMPLEMENTATION	0.036026051648572595	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8889435133207374	WITHOUT_CLASSIFICATION	0.11105648667926261	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999948199158911	IMPLEMENTATION	5.1800841089516E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9940601515255973	IMPLEMENTATION	0.005939848474402706	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8889435133207374	WITHOUT_CLASSIFICATION	0.11105648667926261	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999630635218	WITHOUT_CLASSIFICATION	3.693647826578168E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999999976969564	WITHOUT_CLASSIFICATION	2.3030436017495474E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997981410850921	IMPLEMENTATION	2.01858914907923E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999894113969694	WITHOUT_CLASSIFICATION	1.0588603030703883E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999742018974944	WITHOUT_CLASSIFICATION	2.5798102505609215E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999988739804895	WITHOUT_CLASSIFICATION	1.126019510494517E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123660668	WITHOUT_CLASSIFICATION	8.763393329975815E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999997507991502	WITHOUT_CLASSIFICATION	2.49200849805321E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527725972	WITHOUT_CLASSIFICATION	4.722740271800665E-8	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527725972	WITHOUT_CLASSIFICATION	4.722740271800665E-8	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999927813615	WITHOUT_CLASSIFICATION	7.218638451237977E-9	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995596895866	WITHOUT_CLASSIFICATION	4.40310413345249E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999981377314326	WITHOUT_CLASSIFICATION	1.8622685674007372E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999985852450964	WITHOUT_CLASSIFICATION	1.4147549035910596E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960268	WITHOUT_CLASSIFICATION	9.4039732307499E-9	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960268	WITHOUT_CLASSIFICATION	9.4039732307499E-9	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032445098	WITHOUT_CLASSIFICATION	1.9675549019645065E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9987045225029241	WITHOUT_CLASSIFICATION	0.0012954774970759461	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999986208062924	WITHOUT_CLASSIFICATION	1.3791937076265024E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999997388916824	WITHOUT_CLASSIFICATION	2.611083177113256E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998904227	WITHOUT_CLASSIFICATION	1.0957729765708461E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080883	WITHOUT_CLASSIFICATION	1.6919116646705791E-9	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999982026565999	WITHOUT_CLASSIFICATION	1.7973434000520477E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999998480992361	WITHOUT_CLASSIFICATION	1.5190076391613185E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330730506	WITHOUT_CLASSIFICATION	2.0966926949400272E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641046018062	WITHOUT_CLASSIFICATION	0.0032358953981938216	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999937266358042	WITHOUT_CLASSIFICATION	6.273364195823349E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998833143758	WITHOUT_CLASSIFICATION	1.166856241934843E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999777708	WITHOUT_CLASSIFICATION	2.222912594240949E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999989365632366	WITHOUT_CLASSIFICATION	1.0634367633892598E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999989365632366	WITHOUT_CLASSIFICATION	1.0634367633892598E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999418356159	WITHOUT_CLASSIFICATION	5.816438415063851E-8	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999994747387169	WITHOUT_CLASSIFICATION	5.252612831519936E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997951180524	WITHOUT_CLASSIFICATION	2.0488194766743328E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999851074564107	WITHOUT_CLASSIFICATION	1.4892543589306234E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999850959381886	WITHOUT_CLASSIFICATION	1.4904061811409964E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289685833385907	IMPLEMENTATION	0.2710314166614093	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289685833385907	IMPLEMENTATION	0.2710314166614093	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995380438828	WITHOUT_CLASSIFICATION	4.6195611726837613E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999999996705066	WITHOUT_CLASSIFICATION	3.2949340387698428E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999982964811	WITHOUT_CLASSIFICATION	1.7035188118925355E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917466432566	WITHOUT_CLASSIFICATION	8.253356743414019E-6	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998193899516	WITHOUT_CLASSIFICATION	1.8061004843643104E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985238626842	WITHOUT_CLASSIFICATION	1.476137315795099E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998264313287	WITHOUT_CLASSIFICATION	1.735686712975458E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998958292762	WITHOUT_CLASSIFICATION	1.0417072382148105E-7	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999879632957045	WITHOUT_CLASSIFICATION	1.203670429538672E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997984358304	WITHOUT_CLASSIFICATION	2.015641696996498E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999949507156448	WITHOUT_CLASSIFICATION	5.049284355148451E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999879632957045	WITHOUT_CLASSIFICATION	1.203670429538672E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999949507156448	WITHOUT_CLASSIFICATION	5.049284355148451E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999087851412	WITHOUT_CLASSIFICATION	9.121485872808853E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999991260451822	WITHOUT_CLASSIFICATION	8.739548177990653E-7	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999953078073595	WITHOUT_CLASSIFICATION	4.692192640528897E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9992882692967463	WITHOUT_CLASSIFICATION	7.117307032538353E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999951721484	WITHOUT_CLASSIFICATION	4.8278515188463814E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999863487112	WITHOUT_CLASSIFICATION	1.3651288761607636E-8	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9987758471045395	WITHOUT_CLASSIFICATION	0.001224152895460491	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9978720730071132	WITHOUT_CLASSIFICATION	0.002127926992886672	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9996113907674847	WITHOUT_CLASSIFICATION	3.886092325152947E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998834500829655	WITHOUT_CLASSIFICATION	1.165499170344614E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999726963228464	WITHOUT_CLASSIFICATION	2.7303677153601488E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990485681172	WITHOUT_CLASSIFICATION	9.514318829143427E-7	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999956069311	WITHOUT_CLASSIFICATION	4.3930688351799505E-9	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999674311282463	WITHOUT_CLASSIFICATION	3.256887175364677E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997861344888	WITHOUT_CLASSIFICATION	2.138655110763578E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999993813824	WITHOUT_CLASSIFICATION	6.186175267741284E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999646436158	WITHOUT_CLASSIFICATION	3.535638419098627E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999434480787819	WITHOUT_CLASSIFICATION	5.655192121809993E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999948273132009	WITHOUT_CLASSIFICATION	5.172686799184041E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998608664931	WITHOUT_CLASSIFICATION	1.3913350702016618E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999997056956632	WITHOUT_CLASSIFICATION	2.9430433680397413E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999923924924	WITHOUT_CLASSIFICATION	7.607507516573223E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997081889048	WITHOUT_CLASSIFICATION	2.9181109522417375E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997772114892	WITHOUT_CLASSIFICATION	2.2278851070725067E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9851735568397796	WITHOUT_CLASSIFICATION	0.014826443160220281	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998981484954	WITHOUT_CLASSIFICATION	1.0185150454136579E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999904805568	WITHOUT_CLASSIFICATION	9.519443207718714E-8	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9402307889056728	WITHOUT_CLASSIFICATION	0.05976921109432722	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999937348159	WITHOUT_CLASSIFICATION	6.265184140061153E-9	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999947304357	WITHOUT_CLASSIFICATION	5.26956425489868E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999547083571	WITHOUT_CLASSIFICATION	4.529164299410632E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999472338587	WITHOUT_CLASSIFICATION	5.276614142038277E-8	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999998864552442	WITHOUT_CLASSIFICATION	1.1354475571439423E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999932957989	WITHOUT_CLASSIFICATION	6.704201034731869E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998888153276	WITHOUT_CLASSIFICATION	1.1118467229727734E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999653558	WITHOUT_CLASSIFICATION	3.464419763742863E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999932957989	WITHOUT_CLASSIFICATION	6.704201034731869E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999995255899231	WITHOUT_CLASSIFICATION	4.744100768826625E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999961166000034	WITHOUT_CLASSIFICATION	3.8833999966324816E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999991569904577	WITHOUT_CLASSIFICATION	8.430095423231963E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999998555310495	WITHOUT_CLASSIFICATION	1.4446895049722333E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999990537568983	WITHOUT_CLASSIFICATION	9.462431017454827E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850477	WITHOUT_CLASSIFICATION	6.414952400860781E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850477	WITHOUT_CLASSIFICATION	6.414952400860781E-9	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999952894785287	WITHOUT_CLASSIFICATION	4.710521471282861E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999874364284	WITHOUT_CLASSIFICATION	1.2563571672069289E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999602601629628	WITHOUT_CLASSIFICATION	3.973983703714105E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999235801	WITHOUT_CLASSIFICATION	7.641989861714738E-11	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996117910809	WITHOUT_CLASSIFICATION	3.882089190210236E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999935312008437	WITHOUT_CLASSIFICATION	6.4687991562647305E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996824349163	WITHOUT_CLASSIFICATION	3.175650836464119E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.999995015871585	WITHOUT_CLASSIFICATION	4.984128414899772E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995548325791	WITHOUT_CLASSIFICATION	4.451674210069344E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999991354587	WITHOUT_CLASSIFICATION	8.645414180593858E-10	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505188429	WITHOUT_CLASSIFICATION	1.4948115716781038E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505188429	WITHOUT_CLASSIFICATION	1.4948115716781038E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781768057631	WITHOUT_CLASSIFICATION	2.182319423698784E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999345743179	WITHOUT_CLASSIFICATION	6.542568214641723E-8	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998126955257	WITHOUT_CLASSIFICATION	1.8730447426108474E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505188429	WITHOUT_CLASSIFICATION	1.4948115716781038E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781768057631	WITHOUT_CLASSIFICATION	2.182319423698784E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781768057631	WITHOUT_CLASSIFICATION	2.182319423698784E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999862155082	WITHOUT_CLASSIFICATION	1.37844917882409E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999877614540458	WITHOUT_CLASSIFICATION	1.2238545954179479E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999968634888	WITHOUT_CLASSIFICATION	3.1365110317114563E-9	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999868112663	WITHOUT_CLASSIFICATION	1.3188733635434395E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999994327398878	WITHOUT_CLASSIFICATION	5.672601122034241E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999994327398878	WITHOUT_CLASSIFICATION	5.672601122034241E-6	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999985393819711	WITHOUT_CLASSIFICATION	1.4606180288521823E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999889079727	WITHOUT_CLASSIFICATION	1.109202728930188E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999999710150347	WITHOUT_CLASSIFICATION	2.8984965362020174E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999930338622	WITHOUT_CLASSIFICATION	6.966137796117648E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999930338622	WITHOUT_CLASSIFICATION	6.966137796117648E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998571864728	WITHOUT_CLASSIFICATION	1.4281352727843887E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996621742587	WITHOUT_CLASSIFICATION	3.378257412092998E-7	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999939337786387	WITHOUT_CLASSIFICATION	6.0662213613920055E-6	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999674338657	WITHOUT_CLASSIFICATION	3.256613435283226E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999998836466	WITHOUT_CLASSIFICATION	1.1635328248994025E-10	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999943570793	WITHOUT_CLASSIFICATION	5.6429206209077245E-9	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999648866562677	WITHOUT_CLASSIFICATION	3.511334373219557E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999870371976575	WITHOUT_CLASSIFICATION	1.2962802342569505E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999906950062419	WITHOUT_CLASSIFICATION	9.304993758012862E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999939337786387	WITHOUT_CLASSIFICATION	6.0662213613920055E-6	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999936535323811	WITHOUT_CLASSIFICATION	6.346467618870565E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999948919097837	WITHOUT_CLASSIFICATION	5.1080902163099826E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999948919097837	WITHOUT_CLASSIFICATION	5.1080902163099826E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999894992526	WITHOUT_CLASSIFICATION	1.0500747403380275E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999991214043985	WITHOUT_CLASSIFICATION	8.785956014923289E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998234702310472	WITHOUT_CLASSIFICATION	1.7652976895288032E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999990851568881	WITHOUT_CLASSIFICATION	9.148431119182807E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999848573169874	WITHOUT_CLASSIFICATION	1.5142683012608237E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999315040881348	WITHOUT_CLASSIFICATION	6.849591186519819E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999964982468695	WITHOUT_CLASSIFICATION	3.5017531304179283E-6	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999981532589942	WITHOUT_CLASSIFICATION	1.8467410057247532E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999996721863	WITHOUT_CLASSIFICATION	3.2781366334525607E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999996721863	WITHOUT_CLASSIFICATION	3.2781366334525607E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999742018974944	WITHOUT_CLASSIFICATION	2.5798102505609215E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999916338252	WITHOUT_CLASSIFICATION	8.366174647682752E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999472224013	WITHOUT_CLASSIFICATION	5.27775988329855E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999999837925555	WITHOUT_CLASSIFICATION	1.6207444496568807E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999999960404087	WITHOUT_CLASSIFICATION	3.9595913065959496E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999827735243	WITHOUT_CLASSIFICATION	1.7226475702171702E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995113855917	WITHOUT_CLASSIFICATION	4.886144081923813E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999994384805158	WITHOUT_CLASSIFICATION	5.615194842794695E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999993228608535	WITHOUT_CLASSIFICATION	6.771391464835393E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506385093	WITHOUT_CLASSIFICATION	4.936149066261894E-8	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989182103056	WITHOUT_CLASSIFICATION	1.081789694297245E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123660668	WITHOUT_CLASSIFICATION	8.763393329975815E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690310355	WITHOUT_CLASSIFICATION	1.3096896449620494E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690310355	WITHOUT_CLASSIFICATION	1.3096896449620494E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998321165914	WITHOUT_CLASSIFICATION	1.678834086687223E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999518119618088	WITHOUT_CLASSIFICATION	4.8188038191243245E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998440148902	WITHOUT_CLASSIFICATION	1.5598510985172927E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999259352356	WITHOUT_CLASSIFICATION	7.406476446149269E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999996022394345	WITHOUT_CLASSIFICATION	3.9776056551772435E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999994575469306	WITHOUT_CLASSIFICATION	5.42453069378793E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527725972	WITHOUT_CLASSIFICATION	4.722740271800665E-8	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999957077659247	WITHOUT_CLASSIFICATION	4.292234075360375E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999994676077356	WITHOUT_CLASSIFICATION	5.323922643004368E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999987783314794	WITHOUT_CLASSIFICATION	1.2216685204944856E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998687624085	WITHOUT_CLASSIFICATION	1.3123759152027818E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999949383121083	WITHOUT_CLASSIFICATION	5.061687891609161E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999981576824303	WITHOUT_CLASSIFICATION	1.8423175697318882E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326537074	WITHOUT_CLASSIFICATION	4.6734629256233475E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999678424114	WITHOUT_CLASSIFICATION	3.2157588675862E-8	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999989080604147	WITHOUT_CLASSIFICATION	1.0919395852994081E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996367364633	WITHOUT_CLASSIFICATION	3.6326353660759193E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999836214607126	WITHOUT_CLASSIFICATION	1.637853928744953E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999981470149071	WITHOUT_CLASSIFICATION	1.852985092975025E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644399785	WITHOUT_CLASSIFICATION	2.3556002153812638E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506385093	WITHOUT_CLASSIFICATION	4.936149066261894E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690310355	WITHOUT_CLASSIFICATION	1.3096896449620494E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326537074	WITHOUT_CLASSIFICATION	4.6734629256233475E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999927813615	WITHOUT_CLASSIFICATION	7.218638451237977E-9	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999451209279	WITHOUT_CLASSIFICATION	5.4879071993388155E-8	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999999792981307	WITHOUT_CLASSIFICATION	2.070186928950202E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999949042971678	WITHOUT_CLASSIFICATION	5.095702832263847E-6	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999987981932895	WITHOUT_CLASSIFICATION	1.2018067105079202E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999819749726	WITHOUT_CLASSIFICATION	1.8025027431208207E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999999384288782	WITHOUT_CLASSIFICATION	6.157112180409841E-8	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998249692771	WITHOUT_CLASSIFICATION	1.7503072293552182E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999835275305651	WITHOUT_CLASSIFICATION	1.6472469434991836E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999999587024329	WITHOUT_CLASSIFICATION	4.1297567100022065E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986169325796	WITHOUT_CLASSIFICATION	1.3830674203453422E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986169325796	WITHOUT_CLASSIFICATION	1.3830674203453422E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999999488339	WITHOUT_CLASSIFICATION	5.116609608070322E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999998877336531	WITHOUT_CLASSIFICATION	1.122663469005565E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999928181957457	WITHOUT_CLASSIFICATION	7.181804254197876E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999996917768994	WITHOUT_CLASSIFICATION	3.0822310059514463E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999984944794	WITHOUT_CLASSIFICATION	1.5055205528885446E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999980591166026	WITHOUT_CLASSIFICATION	1.9408833974099548E-6	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999709881595	WITHOUT_CLASSIFICATION	2.901184047776981E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995596895866	WITHOUT_CLASSIFICATION	4.40310413345249E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.999999065221194	WITHOUT_CLASSIFICATION	9.347788059967792E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999865343885	WITHOUT_CLASSIFICATION	1.3465611547473862E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999865343885	WITHOUT_CLASSIFICATION	1.3465611547473862E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999662663037	WITHOUT_CLASSIFICATION	3.373369621393025E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999993265218552	WITHOUT_CLASSIFICATION	6.734781447279291E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997856132773	WITHOUT_CLASSIFICATION	2.1438672279066894E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999673207447	WITHOUT_CLASSIFICATION	3.267925525282722E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999999258753608	WITHOUT_CLASSIFICATION	7.41246393065145E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962295865	WITHOUT_CLASSIFICATION	1.0377041349543372E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506385093	WITHOUT_CLASSIFICATION	4.936149066261894E-8	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123660668	WITHOUT_CLASSIFICATION	8.763393329975815E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326537074	WITHOUT_CLASSIFICATION	4.6734629256233475E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326537074	WITHOUT_CLASSIFICATION	4.6734629256233475E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997192742331	WITHOUT_CLASSIFICATION	2.8072576684500287E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997192742331	WITHOUT_CLASSIFICATION	2.8072576684500287E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999991034301802	WITHOUT_CLASSIFICATION	8.965698197931398E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993675070136	WITHOUT_CLASSIFICATION	6.324929863037146E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993675070136	WITHOUT_CLASSIFICATION	6.324929863037146E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999982945827091	WITHOUT_CLASSIFICATION	1.7054172908585562E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999997635101993	WITHOUT_CLASSIFICATION	2.3648980087517221E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.999999954406027	WITHOUT_CLASSIFICATION	4.559397296067918E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999999851842969	WITHOUT_CLASSIFICATION	1.4815703099522247E-7	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998981958894	WITHOUT_CLASSIFICATION	1.01804110686768E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999985852450964	WITHOUT_CLASSIFICATION	1.4147549035910596E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999985852450964	WITHOUT_CLASSIFICATION	1.4147549035910596E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997550802059685	WITHOUT_CLASSIFICATION	2.4491979403150983E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999983959093378	WITHOUT_CLASSIFICATION	1.604090662193373E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999859076987	WITHOUT_CLASSIFICATION	1.4092301295598259E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999985798593068	WITHOUT_CLASSIFICATION	1.420140693144325E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999965131333	WITHOUT_CLASSIFICATION	3.486866658737396E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999997141242915	WITHOUT_CLASSIFICATION	2.858757084596728E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960268	WITHOUT_CLASSIFICATION	9.4039732307499E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468478121	WITHOUT_CLASSIFICATION	5.3152187825886884E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468478121	WITHOUT_CLASSIFICATION	5.3152187825886884E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032445098	WITHOUT_CLASSIFICATION	1.9675549019645065E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032445098	WITHOUT_CLASSIFICATION	1.9675549019645065E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513935048	WITHOUT_CLASSIFICATION	1.754860649511461E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513935048	WITHOUT_CLASSIFICATION	1.754860649511461E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965418035	WITHOUT_CLASSIFICATION	3.458196508046947E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965418035	WITHOUT_CLASSIFICATION	3.458196508046947E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999985852450964	WITHOUT_CLASSIFICATION	1.4147549035910596E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960268	WITHOUT_CLASSIFICATION	9.4039732307499E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468478121	WITHOUT_CLASSIFICATION	5.3152187825886884E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468478121	WITHOUT_CLASSIFICATION	5.3152187825886884E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032445098	WITHOUT_CLASSIFICATION	1.9675549019645065E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513935048	WITHOUT_CLASSIFICATION	1.754860649511461E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513935048	WITHOUT_CLASSIFICATION	1.754860649511461E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965418035	WITHOUT_CLASSIFICATION	3.458196508046947E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999891637740088	WITHOUT_CLASSIFICATION	1.0836225991262409E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999997148549475	WITHOUT_CLASSIFICATION	2.851450524596813E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999430001938873	WITHOUT_CLASSIFICATION	5.699980611266518E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999945221994657	WITHOUT_CLASSIFICATION	5.4778005342997725E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999955141318252	WITHOUT_CLASSIFICATION	4.485868174806617E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999981702370901	WITHOUT_CLASSIFICATION	1.8297629098314904E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999147898945	WITHOUT_CLASSIFICATION	8.521010555560295E-8	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999711228291	WITHOUT_CLASSIFICATION	2.8877170888707986E-8	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999994590852197	WITHOUT_CLASSIFICATION	5.409147801909016E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999935406729	WITHOUT_CLASSIFICATION	6.459327091502337E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999996851538357	WITHOUT_CLASSIFICATION	3.148461642124444E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999902427676	WITHOUT_CLASSIFICATION	9.757232366359439E-9	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999952894785287	WITHOUT_CLASSIFICATION	4.710521471282861E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999981702370901	WITHOUT_CLASSIFICATION	1.8297629098314904E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909675762865	WITHOUT_CLASSIFICATION	9.032423713562027E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909675762865	WITHOUT_CLASSIFICATION	9.032423713562027E-6	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999835000116	WITHOUT_CLASSIFICATION	1.649998830815345E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999531181005	WITHOUT_CLASSIFICATION	4.688189953636614E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999531181005	WITHOUT_CLASSIFICATION	4.688189953636614E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999980565533	WITHOUT_CLASSIFICATION	1.9434468124405476E-9	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999998481460867	WITHOUT_CLASSIFICATION	1.5185391330336973E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999667421677	WITHOUT_CLASSIFICATION	3.325783227077755E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999694319086091	WITHOUT_CLASSIFICATION	3.0568091390988835E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999694319086091	WITHOUT_CLASSIFICATION	3.0568091390988835E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998904227	WITHOUT_CLASSIFICATION	1.0957729765708461E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998281205429	WITHOUT_CLASSIFICATION	1.7187945707601236E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998281205429	WITHOUT_CLASSIFICATION	1.7187945707601236E-7	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999998010107279	WITHOUT_CLASSIFICATION	1.9898927205516232E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999954459897	WITHOUT_CLASSIFICATION	4.554010202490185E-9	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999998460434	WITHOUT_CLASSIFICATION	1.5395673443066478E-10	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999983060752955	WITHOUT_CLASSIFICATION	1.6939247045340437E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999754387858	WITHOUT_CLASSIFICATION	2.4561214161056022E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999704508338	WITHOUT_CLASSIFICATION	2.9549166223513435E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080883	WITHOUT_CLASSIFICATION	1.6919116646705791E-9	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999989756798909	WITHOUT_CLASSIFICATION	1.0243201091653464E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9889540377241258	WITHOUT_CLASSIFICATION	0.011045962275874177	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999988518704972	WITHOUT_CLASSIFICATION	1.1481295028253518E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999998534020974	WITHOUT_CLASSIFICATION	1.4659790260632094E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330730506	WITHOUT_CLASSIFICATION	2.0966926949400272E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999999977859796	WITHOUT_CLASSIFICATION	2.2140203925959497E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998594712693	WITHOUT_CLASSIFICATION	1.405287306284633E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999423252478	WITHOUT_CLASSIFICATION	5.767475222376109E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330730506	WITHOUT_CLASSIFICATION	2.0966926949400272E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999556023106	WITHOUT_CLASSIFICATION	4.439768941163274E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988231797966	WITHOUT_CLASSIFICATION	1.1768202032927941E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999946325245521	WITHOUT_CLASSIFICATION	5.367475447858486E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999996055999006	WITHOUT_CLASSIFICATION	3.944000994204645E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999996405218055	WITHOUT_CLASSIFICATION	3.594781945061006E-7	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999998593904142	WITHOUT_CLASSIFICATION	1.4060958577577653E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999424376825	WITHOUT_CLASSIFICATION	5.756231760749207E-8	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998833143758	WITHOUT_CLASSIFICATION	1.166856241934843E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102759	WITHOUT_CLASSIFICATION	3.4789724110988984E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999777708	WITHOUT_CLASSIFICATION	2.222912594240949E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988271894256	WITHOUT_CLASSIFICATION	1.1728105744531688E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999954005911	WITHOUT_CLASSIFICATION	4.599408903613804E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330177244	WITHOUT_CLASSIFICATION	6.69822756737733E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080883	WITHOUT_CLASSIFICATION	1.6919116646705791E-9	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102759	WITHOUT_CLASSIFICATION	3.4789724110988984E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988271894256	WITHOUT_CLASSIFICATION	1.1728105744531688E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330177244	WITHOUT_CLASSIFICATION	6.69822756737733E-8	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994241763167	WITHOUT_CLASSIFICATION	5.75823683292682E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999963284506492	WITHOUT_CLASSIFICATION	3.6715493508128454E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996747869438	WITHOUT_CLASSIFICATION	3.2521305614552604E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999989365632366	WITHOUT_CLASSIFICATION	1.0634367633892598E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999998999181454	WITHOUT_CLASSIFICATION	1.00081854579867E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999914717747574	WITHOUT_CLASSIFICATION	8.528225242575148E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999993086985964	WITHOUT_CLASSIFICATION	6.913014034751179E-7	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999982443850901	WITHOUT_CLASSIFICATION	1.7556149099798273E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999999050611161	WITHOUT_CLASSIFICATION	9.493888391048833E-8	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999997588892	WITHOUT_CLASSIFICATION	2.411107908759274E-9	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999626728249	WITHOUT_CLASSIFICATION	3.732717520453448E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999980683484554	WITHOUT_CLASSIFICATION	1.9316515445433196E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999674236966	WITHOUT_CLASSIFICATION	3.257630340777752E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997282433905	WITHOUT_CLASSIFICATION	2.7175660950542316E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999995580257347	WITHOUT_CLASSIFICATION	4.4197426537267183E-7	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999993695593715	WITHOUT_CLASSIFICATION	6.304406284824054E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999994747387169	WITHOUT_CLASSIFICATION	5.252612831519936E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999814207309	WITHOUT_CLASSIFICATION	1.857926917748839E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999997801248005	WITHOUT_CLASSIFICATION	2.1987519941251604E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102759	WITHOUT_CLASSIFICATION	3.4789724110988984E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998687678914	WITHOUT_CLASSIFICATION	1.3123210864820164E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999970189542928	WITHOUT_CLASSIFICATION	2.9810457071658078E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999992831957122	WITHOUT_CLASSIFICATION	7.168042877863833E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999988569446217	WITHOUT_CLASSIFICATION	1.1430553783280656E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999681270427	WITHOUT_CLASSIFICATION	3.18729572896855E-8	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999999588732351	WITHOUT_CLASSIFICATION	4.112676485802259E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999992821365	WITHOUT_CLASSIFICATION	7.178635050857021E-9	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999799741067	WITHOUT_CLASSIFICATION	2.0025893280921186E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.99999467433868	WITHOUT_CLASSIFICATION	5.325661320100844E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999993920038243	WITHOUT_CLASSIFICATION	6.07996175830123E-7	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999966244725467	WITHOUT_CLASSIFICATION	3.37552745335647E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999997243632401	WITHOUT_CLASSIFICATION	2.7563675988140744E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995546434892576	WITHOUT_CLASSIFICATION	4.45356510742298E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999851074564107	WITHOUT_CLASSIFICATION	1.4892543589306234E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998082736222	WITHOUT_CLASSIFICATION	1.917263778367665E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998413099237707	WITHOUT_CLASSIFICATION	1.586900762292637E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999515057360382	WITHOUT_CLASSIFICATION	4.849426396182368E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999833270461114	WITHOUT_CLASSIFICATION	1.6672953888686232E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999871728774695	WITHOUT_CLASSIFICATION	1.2827122530554446E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999969575473371	WITHOUT_CLASSIFICATION	3.0424526629978316E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999957849249	WITHOUT_CLASSIFICATION	4.215075119808801E-9	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999970336964008	WITHOUT_CLASSIFICATION	2.9663035991410427E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978433030164	WITHOUT_CLASSIFICATION	2.1566969836524786E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999996826139671	WITHOUT_CLASSIFICATION	3.1738603297371897E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826623472162	WITHOUT_CLASSIFICATION	1.733765278380725E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826623472162	WITHOUT_CLASSIFICATION	1.733765278380725E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999748716897449	WITHOUT_CLASSIFICATION	2.5128310255125858E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999727361668018	WITHOUT_CLASSIFICATION	2.7263833198202213E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999972717146031	WITHOUT_CLASSIFICATION	2.7282853969114373E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999998040849594	WITHOUT_CLASSIFICATION	1.9591504064179306E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999922278406	WITHOUT_CLASSIFICATION	7.77215930100614E-9	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999970556805	WITHOUT_CLASSIFICATION	2.944319559482622E-9	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999995313363459	WITHOUT_CLASSIFICATION	4.6866365413545506E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997362290574	WITHOUT_CLASSIFICATION	2.637709426065165E-7	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999990378420452	WITHOUT_CLASSIFICATION	9.621579547954385E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999998375690375	WITHOUT_CLASSIFICATION	1.6243096239034013E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999958086461269	WITHOUT_CLASSIFICATION	4.191353873095958E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999987191041525	WITHOUT_CLASSIFICATION	1.2808958474918742E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999889006455	WITHOUT_CLASSIFICATION	1.1099354564839219E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999988277584354	WITHOUT_CLASSIFICATION	1.1722415645407426E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999972546257	WITHOUT_CLASSIFICATION	2.7453743030893026E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994555222025	WITHOUT_CLASSIFICATION	5.444777974489938E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999999426672623	WITHOUT_CLASSIFICATION	5.733273770486417E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999996312912	WITHOUT_CLASSIFICATION	3.6870887447548996E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999995426667475	WITHOUT_CLASSIFICATION	4.573332524945373E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997770279757335	WITHOUT_CLASSIFICATION	2.229720242664921E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999995829958359	WITHOUT_CLASSIFICATION	4.1700416411807174E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999995829958359	WITHOUT_CLASSIFICATION	4.1700416411807174E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.999999749572768	WITHOUT_CLASSIFICATION	2.504272319383794E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.999999749572768	WITHOUT_CLASSIFICATION	2.504272319383794E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978433030164	WITHOUT_CLASSIFICATION	2.1566969836524786E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999989974078392	WITHOUT_CLASSIFICATION	1.0025921609126228E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993945228848712	WITHOUT_CLASSIFICATION	6.054771151287852E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995438626481	WITHOUT_CLASSIFICATION	4.561373518566711E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993945228848712	WITHOUT_CLASSIFICATION	6.054771151287852E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995438626481	WITHOUT_CLASSIFICATION	4.561373518566711E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839838818472	WITHOUT_CLASSIFICATION	1.601611815283E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999988045644	WITHOUT_CLASSIFICATION	1.195435631138266E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999356765892	WITHOUT_CLASSIFICATION	6.43234108824616E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999992654543965	WITHOUT_CLASSIFICATION	7.345456035567163E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999266558888805	WITHOUT_CLASSIFICATION	7.334411111943613E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9974303604905291	WITHOUT_CLASSIFICATION	0.002569639509470916	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999849921685	WITHOUT_CLASSIFICATION	1.5007831512003068E-8	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.999999860857221	WITHOUT_CLASSIFICATION	1.391427788886316E-7	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999993090314325	WITHOUT_CLASSIFICATION	6.909685674634599E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999997702578	WITHOUT_CLASSIFICATION	2.2974220420254867E-9	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999975915941133	WITHOUT_CLASSIFICATION	2.408405886663846E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999845684276	WITHOUT_CLASSIFICATION	1.5431572359045254E-8	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999237225148	WITHOUT_CLASSIFICATION	7.627748527561212E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999873229046649	WITHOUT_CLASSIFICATION	1.2677095335122393E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999965386311451	WITHOUT_CLASSIFICATION	3.4613688548163296E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999709579999	WITHOUT_CLASSIFICATION	2.9042000084915092E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999709579999	WITHOUT_CLASSIFICATION	2.9042000084915092E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999018649703	WITHOUT_CLASSIFICATION	9.813502966598393E-8	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839838818472	WITHOUT_CLASSIFICATION	1.601611815283E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999965098973995	WITHOUT_CLASSIFICATION	3.4901026005746665E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999703052292221	WITHOUT_CLASSIFICATION	2.9694770777840493E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.99934508806167	WITHOUT_CLASSIFICATION	6.549119383300596E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998698571374	WITHOUT_CLASSIFICATION	1.301428625494858E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999726152066386	WITHOUT_CLASSIFICATION	2.738479336139298E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839838818472	WITHOUT_CLASSIFICATION	1.601611815283E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998698571374	WITHOUT_CLASSIFICATION	1.301428625494858E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999726152066386	WITHOUT_CLASSIFICATION	2.738479336139298E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999519131563364	WITHOUT_CLASSIFICATION	4.808684366361331E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999995746618922	WITHOUT_CLASSIFICATION	4.2533810784022813E-7	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999971442678944	WITHOUT_CLASSIFICATION	2.8557321055756876E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839838818472	WITHOUT_CLASSIFICATION	1.601611815283E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839838818472	WITHOUT_CLASSIFICATION	1.601611815283E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.999999906763655	WITHOUT_CLASSIFICATION	9.323634503459093E-8	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999997833093874	WITHOUT_CLASSIFICATION	2.166906126332604E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999987062744082	WITHOUT_CLASSIFICATION	1.2937255917817025E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999979693143933	WITHOUT_CLASSIFICATION	2.0306856067017985E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998787938904	WITHOUT_CLASSIFICATION	1.2120610953581785E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999972188705	WITHOUT_CLASSIFICATION	2.781129562400402E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999982131999783	WITHOUT_CLASSIFICATION	1.786800021675329E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999927192205	WITHOUT_CLASSIFICATION	7.280779502442018E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999440035663	WITHOUT_CLASSIFICATION	5.599643368797276E-8	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999991447256139	WITHOUT_CLASSIFICATION	8.552743860549446E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999989565835982	WITHOUT_CLASSIFICATION	1.0434164017353052E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.99999844060517	WITHOUT_CLASSIFICATION	1.5593948300448933E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999990064842	WITHOUT_CLASSIFICATION	9.935158536634552E-10	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999998332389111	WITHOUT_CLASSIFICATION	1.667610888763151E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219094292	WITHOUT_CLASSIFICATION	7.809057074008345E-8	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999991452377	WITHOUT_CLASSIFICATION	8.547622085109882E-10	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917466432566	WITHOUT_CLASSIFICATION	8.253356743414019E-6	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999989661848235	WITHOUT_CLASSIFICATION	1.0338151764488226E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998444343180211	WITHOUT_CLASSIFICATION	1.5556568197893088E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997751774122	WITHOUT_CLASSIFICATION	2.2482258761032478E-7	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999878323001284	WITHOUT_CLASSIFICATION	1.2167699871606413E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9969740990446923	WITHOUT_CLASSIFICATION	0.0030259009553077936	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9969740990446923	WITHOUT_CLASSIFICATION	0.0030259009553077936	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917466432566	WITHOUT_CLASSIFICATION	8.253356743414019E-6	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999993615587172	WITHOUT_CLASSIFICATION	6.38441282914511E-7	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999835578934	WITHOUT_CLASSIFICATION	1.6442106542332793E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9899045514363704	WITHOUT_CLASSIFICATION	0.010095448563629724	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999273786566	WITHOUT_CLASSIFICATION	7.262134344687403E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963588770535	WITHOUT_CLASSIFICATION	3.6411229464204157E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999220883854	WITHOUT_CLASSIFICATION	7.79116146107061E-8	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998120949671	WITHOUT_CLASSIFICATION	1.8790503293802223E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999991840095698	WITHOUT_CLASSIFICATION	8.159904303196783E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999771678967	WITHOUT_CLASSIFICATION	2.2832103247165387E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999996639192837	WITHOUT_CLASSIFICATION	3.3608071624506625E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999983032024586	WITHOUT_CLASSIFICATION	1.6967975413622498E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999996769709345	WITHOUT_CLASSIFICATION	3.23029065482511E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999855626204156	WITHOUT_CLASSIFICATION	1.4437379584412152E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999990954961281	WITHOUT_CLASSIFICATION	9.045038719385385E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998943346905	WITHOUT_CLASSIFICATION	1.0566530950422534E-6	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999867009965	WITHOUT_CLASSIFICATION	1.3299003458515292E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999857658574	WITHOUT_CLASSIFICATION	1.4234142655490182E-8	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999999128766964	WITHOUT_CLASSIFICATION	8.712330360505512E-7	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998827358221	WITHOUT_CLASSIFICATION	1.1726417799378322E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998345232619	WITHOUT_CLASSIFICATION	1.6547673810341986E-7	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999729276710788	WITHOUT_CLASSIFICATION	2.7072328921184683E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999972772149165	WITHOUT_CLASSIFICATION	2.7227850834685195E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869639203794	WITHOUT_CLASSIFICATION	1.3036079620495012E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995127677157558	WITHOUT_CLASSIFICATION	4.8723228424417874E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904440341079	WITHOUT_CLASSIFICATION	9.555965892104633E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720639384551	WITHOUT_CLASSIFICATION	2.7936061544926546E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998043735848005	WITHOUT_CLASSIFICATION	1.9562641519959447E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815346608101	WITHOUT_CLASSIFICATION	1.846533918997454E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998428429558754	WITHOUT_CLASSIFICATION	1.571570441246003E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977771672395	WITHOUT_CLASSIFICATION	2.222832760581914E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999950600701666	WITHOUT_CLASSIFICATION	4.939929833369092E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999877042752964	WITHOUT_CLASSIFICATION	1.2295724703667453E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954324789996	WITHOUT_CLASSIFICATION	4.5675210003703404E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990963617021	WITHOUT_CLASSIFICATION	9.036382979563443E-7	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428239021932	WITHOUT_CLASSIFICATION	5.7176097806764345E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999904482237402	WITHOUT_CLASSIFICATION	9.551776259796786E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851567258188	WITHOUT_CLASSIFICATION	1.4843274181248062E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954070689043	WITHOUT_CLASSIFICATION	4.5929310956673005E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998969743461977	WITHOUT_CLASSIFICATION	1.0302565380221993E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999308684114951	WITHOUT_CLASSIFICATION	6.913158850487196E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999999486429042	WITHOUT_CLASSIFICATION	5.135709580673338E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853254621752	WITHOUT_CLASSIFICATION	1.467453782484837E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9976427889325338	WITHOUT_CLASSIFICATION	0.002357211067466259	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999509989554	WITHOUT_CLASSIFICATION	4.900104457369733E-8	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999955878385	WITHOUT_CLASSIFICATION	4.412161510625035E-9	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562020265	WITHOUT_CLASSIFICATION	4.3797973584202794E-8	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999974230626161	WITHOUT_CLASSIFICATION	2.5769373840498533E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999996870659985	WITHOUT_CLASSIFICATION	3.129340015037527E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999998000371398	WITHOUT_CLASSIFICATION	1.999628601688683E-7	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999933655082	WITHOUT_CLASSIFICATION	6.63449187993898E-9	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999984064922495	WITHOUT_CLASSIFICATION	1.593507750592365E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999986651927228	WITHOUT_CLASSIFICATION	1.3348072771274841E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999995186298951	WITHOUT_CLASSIFICATION	4.813701048420519E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999998837043933	WITHOUT_CLASSIFICATION	1.1629560675091816E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999475925765	WITHOUT_CLASSIFICATION	5.240742358165274E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999958370115	WITHOUT_CLASSIFICATION	4.162988584059228E-9	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999991584983465	WITHOUT_CLASSIFICATION	8.415016533448007E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999630624349	WITHOUT_CLASSIFICATION	3.693756512038892E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996039884119	WITHOUT_CLASSIFICATION	3.9601158816599516E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475778715265	WITHOUT_CLASSIFICATION	5.242212847343769E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966799835723	WITHOUT_CLASSIFICATION	3.320016427815467E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999617476058726	WITHOUT_CLASSIFICATION	3.8252394127272274E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879806702096	WITHOUT_CLASSIFICATION	1.2019329790373173E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999047639490307	WITHOUT_CLASSIFICATION	9.523605096929764E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999832488385	WITHOUT_CLASSIFICATION	1.6751161497627867E-8	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9968588284105094	WITHOUT_CLASSIFICATION	0.00314117158949057	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996640016012798	WITHOUT_CLASSIFICATION	3.3599839872023034E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900157308599	WITHOUT_CLASSIFICATION	9.984269140102245E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999835821671	WITHOUT_CLASSIFICATION	1.641783287166934E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999999974679335	WITHOUT_CLASSIFICATION	2.5320665027621766E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999859194262	WITHOUT_CLASSIFICATION	1.4080573786001313E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967219113	WITHOUT_CLASSIFICATION	3.2780887445207385E-9	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999920532609538	WITHOUT_CLASSIFICATION	7.946739046228507E-6	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999995632311932	WITHOUT_CLASSIFICATION	4.367688068051963E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999894946866	WITHOUT_CLASSIFICATION	1.0505313509246175E-8	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999992413051246	WITHOUT_CLASSIFICATION	7.586948754399757E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562020265	WITHOUT_CLASSIFICATION	4.3797973584202794E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997835894586	WITHOUT_CLASSIFICATION	2.1641054129092752E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999793170392159	WITHOUT_CLASSIFICATION	2.0682960783988653E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999901397166505	WITHOUT_CLASSIFICATION	9.860283349484E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996341425608	WITHOUT_CLASSIFICATION	3.658574392533485E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996944291506	WITHOUT_CLASSIFICATION	3.0557084935039367E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999997255353958	WITHOUT_CLASSIFICATION	2.7446460415981607E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.999983655530219	WITHOUT_CLASSIFICATION	1.6344469781144773E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997406926403	WITHOUT_CLASSIFICATION	2.593073596299849E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999990002530035	WITHOUT_CLASSIFICATION	9.997469964872527E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998738422559	WITHOUT_CLASSIFICATION	1.2615774412217223E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999981690730326	WITHOUT_CLASSIFICATION	1.8309269673011685E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998743022823	WITHOUT_CLASSIFICATION	1.2569771756822895E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999887683411	WITHOUT_CLASSIFICATION	1.1231659063370366E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99997943370821	WITHOUT_CLASSIFICATION	2.056629179007699E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999369879777	WITHOUT_CLASSIFICATION	6.30120222582968E-8	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999995232600687	WITHOUT_CLASSIFICATION	4.7673993133134545E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999898618981566	WITHOUT_CLASSIFICATION	1.01381018432485E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985423482405	WITHOUT_CLASSIFICATION	1.4576517595002416E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999192292532	WITHOUT_CLASSIFICATION	8.077074679844237E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999988262074597	WITHOUT_CLASSIFICATION	1.1737925402905551E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988974041271	WITHOUT_CLASSIFICATION	1.1025958729363622E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999985327959887	WITHOUT_CLASSIFICATION	1.4672040112306114E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999843516672214	WITHOUT_CLASSIFICATION	1.5648332778592602E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.99990395504143	WITHOUT_CLASSIFICATION	9.604495857002752E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999964913891414	WITHOUT_CLASSIFICATION	3.508610858505566E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.999999760238148	WITHOUT_CLASSIFICATION	2.397618520010698E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641046018062	WITHOUT_CLASSIFICATION	0.0032358953981938216	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999989940453031	WITHOUT_CLASSIFICATION	1.005954696877607E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999995898837101	WITHOUT_CLASSIFICATION	4.101162899284283E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999646011852	WITHOUT_CLASSIFICATION	3.5398814716858785E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562020265	WITHOUT_CLASSIFICATION	4.3797973584202794E-8	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999997540781629	WITHOUT_CLASSIFICATION	2.4592183709685855E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998719963346	WITHOUT_CLASSIFICATION	1.2800366538107656E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996792664765	WITHOUT_CLASSIFICATION	3.207335235231811E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562020265	WITHOUT_CLASSIFICATION	4.3797973584202794E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161679066	WITHOUT_CLASSIFICATION	8.383209335189904E-8	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988974041271	WITHOUT_CLASSIFICATION	1.1025958729363622E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999743850461806	WITHOUT_CLASSIFICATION	2.5614953819368583E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999853156171267	WITHOUT_CLASSIFICATION	1.4684382873374402E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968744997422	WITHOUT_CLASSIFICATION	3.1255002577718867E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998738422559	WITHOUT_CLASSIFICATION	1.2615774412217223E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999981690730326	WITHOUT_CLASSIFICATION	1.8309269673011685E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998743022823	WITHOUT_CLASSIFICATION	1.2569771756822895E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999990075714	WITHOUT_CLASSIFICATION	9.924286575842729E-10	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999997290306067	WITHOUT_CLASSIFICATION	2.7096939329307654E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999982972294224	WITHOUT_CLASSIFICATION	1.7027705776428285E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999600667975	WITHOUT_CLASSIFICATION	3.993320241617476E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999129958	WITHOUT_CLASSIFICATION	8.700409297666723E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562020265	WITHOUT_CLASSIFICATION	4.3797973584202794E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999887683411	WITHOUT_CLASSIFICATION	1.1231659063370366E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.99997943370821	WITHOUT_CLASSIFICATION	2.056629179007699E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999904223851	WITHOUT_CLASSIFICATION	9.577614900551309E-9	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999725468183	WITHOUT_CLASSIFICATION	2.745318167818677E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999993553016	WITHOUT_CLASSIFICATION	6.446984712823208E-10	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999974231399	WITHOUT_CLASSIFICATION	2.5768600722428934E-9	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999788451025	WITHOUT_CLASSIFICATION	2.1154897552364214E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999488331512	WITHOUT_CLASSIFICATION	5.1166848641160314E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999308684114951	WITHOUT_CLASSIFICATION	6.913158850487196E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999841521056	WITHOUT_CLASSIFICATION	1.584789434710597E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.998145855625796	WITHOUT_CLASSIFICATION	0.0018541443742039103	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999997219027869	WITHOUT_CLASSIFICATION	2.780972131587318E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999987005465824	WITHOUT_CLASSIFICATION	1.2994534176809053E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999781767212	WITHOUT_CLASSIFICATION	2.182327880483417E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998043735848005	WITHOUT_CLASSIFICATION	1.9562641519959447E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815346608101	WITHOUT_CLASSIFICATION	1.846533918997454E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990963617021	WITHOUT_CLASSIFICATION	9.036382979563443E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999781767212	WITHOUT_CLASSIFICATION	2.182327880483417E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999939765661324	WITHOUT_CLASSIFICATION	6.023433867602881E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999866638952	WITHOUT_CLASSIFICATION	1.3336104796260407E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576520351957	WITHOUT_CLASSIFICATION	2.4234796480437175E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998889129575946	WITHOUT_CLASSIFICATION	1.1108704240530652E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999601687602261	WITHOUT_CLASSIFICATION	3.983123977401361E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999959655580677	WITHOUT_CLASSIFICATION	4.03444193230059E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428239021932	WITHOUT_CLASSIFICATION	5.7176097806764345E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954070689043	WITHOUT_CLASSIFICATION	4.5929310956673005E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967219113	WITHOUT_CLASSIFICATION	3.2780887445207385E-9	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999928026029	WITHOUT_CLASSIFICATION	7.197397075268813E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999114918687	WITHOUT_CLASSIFICATION	8.850813128144844E-8	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999173511238	WITHOUT_CLASSIFICATION	8.264887612888799E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999515694206	WITHOUT_CLASSIFICATION	4.843057947758362E-8	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999996531760483	WITHOUT_CLASSIFICATION	3.4682395155749995E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997402406406	WITHOUT_CLASSIFICATION	2.5975935935125715E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999849689861853	WITHOUT_CLASSIFICATION	1.5031013814854643E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999771678967	WITHOUT_CLASSIFICATION	2.2832103247165387E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999701899801872	WITHOUT_CLASSIFICATION	2.981001981275201E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999956270314714	WITHOUT_CLASSIFICATION	4.372968528673215E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999988849660969	WITHOUT_CLASSIFICATION	1.1150339030875986E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999261649191	WITHOUT_CLASSIFICATION	7.383508092469456E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999995650729417	WITHOUT_CLASSIFICATION	4.349270582582075E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999846406674718	WITHOUT_CLASSIFICATION	1.5359332528247295E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786090749891	WITHOUT_CLASSIFICATION	2.139092501090377E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995924876886605	WITHOUT_CLASSIFICATION	4.075123113395035E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986241687313	WITHOUT_CLASSIFICATION	1.3758312687097236E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999993311872217	WITHOUT_CLASSIFICATION	6.688127783285998E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999945398021399	WITHOUT_CLASSIFICATION	5.460197860068125E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999762160375445	WITHOUT_CLASSIFICATION	2.3783962455508228E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999948096347919	WITHOUT_CLASSIFICATION	5.190365208067158E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988044975863	WITHOUT_CLASSIFICATION	1.1955024136832022E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982950747175	WITHOUT_CLASSIFICATION	1.704925282516453E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998604106943	WITHOUT_CLASSIFICATION	1.3958930568437603E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998186325897	WITHOUT_CLASSIFICATION	1.8136741029349055E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996158805551	WITHOUT_CLASSIFICATION	3.841194449011586E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999976853080128	WITHOUT_CLASSIFICATION	2.3146919872205643E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997086217564	WITHOUT_CLASSIFICATION	2.9137824357388667E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991824513138	WITHOUT_CLASSIFICATION	8.175486861878178E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999990308099367	WITHOUT_CLASSIFICATION	9.691900633285853E-7	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999535435407	WITHOUT_CLASSIFICATION	4.645645932677129E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997153051525	WITHOUT_CLASSIFICATION	2.846948473844224E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999994496230096	WITHOUT_CLASSIFICATION	5.503769904514673E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999376280725893	WITHOUT_CLASSIFICATION	6.237192741067891E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999470442901335	WITHOUT_CLASSIFICATION	5.295570986651932E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998313403693	WITHOUT_CLASSIFICATION	1.6865963078165795E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999994184808634	WITHOUT_CLASSIFICATION	5.815191365970058E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999982760855404	WITHOUT_CLASSIFICATION	1.7239144597526196E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999378972689653	WITHOUT_CLASSIFICATION	6.210273103465537E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999776397489	WITHOUT_CLASSIFICATION	2.236025102720224E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9990111781429305	WITHOUT_CLASSIFICATION	9.888218570695266E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999827152632	WITHOUT_CLASSIFICATION	1.7284736834907824E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999951328652601	WITHOUT_CLASSIFICATION	4.867134739836135E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999982850684366	WITHOUT_CLASSIFICATION	1.7149315633795145E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999646275894	WITHOUT_CLASSIFICATION	3.537241058917919E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998989481668	WITHOUT_CLASSIFICATION	1.0105183320046042E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998507651412	WITHOUT_CLASSIFICATION	1.4923485876185167E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999992098692501	WITHOUT_CLASSIFICATION	7.901307498491253E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9987625218724562	WITHOUT_CLASSIFICATION	0.001237478127543815	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998886081270023	WITHOUT_CLASSIFICATION	1.1139187299769642E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999994068215726	WITHOUT_CLASSIFICATION	5.931784273286096E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999999991800272	WITHOUT_CLASSIFICATION	8.199727922336729E-9	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999384826173646	WITHOUT_CLASSIFICATION	6.15173826353388E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999842495234598	WITHOUT_CLASSIFICATION	1.5750476540162162E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997823967167	WITHOUT_CLASSIFICATION	2.1760328328694222E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999835317282586	WITHOUT_CLASSIFICATION	1.646827174131555E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995074104026	WITHOUT_CLASSIFICATION	4.925895974675885E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9990040202304389	WITHOUT_CLASSIFICATION	9.95979769561123E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999810099912304	WITHOUT_CLASSIFICATION	1.8990008769563525E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999998805105	WITHOUT_CLASSIFICATION	1.194895181925522E-10	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998172873861	WITHOUT_CLASSIFICATION	1.8271261397506566E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999914771367	WITHOUT_CLASSIFICATION	8.522863343751873E-9	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999233693895	WITHOUT_CLASSIFICATION	7.663061050538575E-8	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.99267541643066	WITHOUT_CLASSIFICATION	0.0073245835693400135	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999992216792295	WITHOUT_CLASSIFICATION	7.783207704932619E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999986154936434	WITHOUT_CLASSIFICATION	1.3845063565849597E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999995550576957	WITHOUT_CLASSIFICATION	4.4494230435388963E-7	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999998408210294	WITHOUT_CLASSIFICATION	1.5917897064817862E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999924589661999	WITHOUT_CLASSIFICATION	7.541033800049298E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999991931736546	WITHOUT_CLASSIFICATION	8.06826345474986E-7	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999997208037708	WITHOUT_CLASSIFICATION	2.7919622931243355E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9966919507556793	WITHOUT_CLASSIFICATION	0.0033080492443206314	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999192622615857	WITHOUT_CLASSIFICATION	8.07377384143736E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999992037608206	WITHOUT_CLASSIFICATION	7.962391792862367E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999789619480396	WITHOUT_CLASSIFICATION	2.103805196037648E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999996762913833	WITHOUT_CLASSIFICATION	3.237086167147122E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999996217994359	WITHOUT_CLASSIFICATION	3.78200564087578E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999994772006789	WITHOUT_CLASSIFICATION	5.227993210904793E-7	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999829670764975	WITHOUT_CLASSIFICATION	1.7032923502523872E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999997714083	WITHOUT_CLASSIFICATION	2.285916575065925E-10	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999993393636359	WITHOUT_CLASSIFICATION	6.606363641113734E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999950543804	WITHOUT_CLASSIFICATION	4.9456195875297555E-9	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998972850510235	WITHOUT_CLASSIFICATION	1.0271494897648538E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999988917626724	WITHOUT_CLASSIFICATION	1.1082373276279312E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999982930544	WITHOUT_CLASSIFICATION	1.7069456139644245E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999055272883	WITHOUT_CLASSIFICATION	9.447271170438726E-8	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999991254	WITHOUT_CLASSIFICATION	8.745937989202618E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999945510551144	WITHOUT_CLASSIFICATION	5.448944885598598E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999857191056655	WITHOUT_CLASSIFICATION	1.4280894334429435E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630105	WITHOUT_CLASSIFICATION	6.273698948882907E-8	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999999043868129	WITHOUT_CLASSIFICATION	9.561318710964859E-8	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999634422788821	WITHOUT_CLASSIFICATION	3.655772111788326E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999999109122542	WITHOUT_CLASSIFICATION	8.908774577878144E-8	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999721866228507	WITHOUT_CLASSIFICATION	2.7813377149307068E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999950173003377	WITHOUT_CLASSIFICATION	4.9826996623683335E-6	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999806440377615	WITHOUT_CLASSIFICATION	1.9355962238476866E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999971142727071	WITHOUT_CLASSIFICATION	2.885727292952129E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999334333021	WITHOUT_CLASSIFICATION	6.656669793713135E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984049331375	WITHOUT_CLASSIFICATION	1.595066862481155E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999943580037086	WITHOUT_CLASSIFICATION	5.641996291303695E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999671735174	WITHOUT_CLASSIFICATION	3.2826482705007195E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984049331375	WITHOUT_CLASSIFICATION	1.595066862481155E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999953411316	WITHOUT_CLASSIFICATION	4.658868390707276E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999998354419682	WITHOUT_CLASSIFICATION	1.6455803170583964E-7	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999899628089582	WITHOUT_CLASSIFICATION	1.0037191041753794E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995055484989901	WITHOUT_CLASSIFICATION	4.944515010099278E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998035087367	WITHOUT_CLASSIFICATION	1.964912632535411E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.99999992064036	WITHOUT_CLASSIFICATION	7.935963999657069E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999946855311765	WITHOUT_CLASSIFICATION	5.314468823428001E-6	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997549013317	WITHOUT_CLASSIFICATION	2.450986681854136E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999671497837201	WITHOUT_CLASSIFICATION	3.285021627985185E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999986782423854	WITHOUT_CLASSIFICATION	1.3217576144859112E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999994914396	WITHOUT_CLASSIFICATION	5.085604500693332E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999991984435631	WITHOUT_CLASSIFICATION	8.015564369490769E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999993584508691	WITHOUT_CLASSIFICATION	6.415491309519953E-7	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999991351181	WITHOUT_CLASSIFICATION	8.648818473803756E-10	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999148488056	WITHOUT_CLASSIFICATION	8.515119439296561E-7	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999992751280673	WITHOUT_CLASSIFICATION	7.248719327267511E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993539726846249	WITHOUT_CLASSIFICATION	6.460273153750494E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993539726846249	WITHOUT_CLASSIFICATION	6.460273153750494E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999998488213445	WITHOUT_CLASSIFICATION	1.5117865551116776E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999757405758896	WITHOUT_CLASSIFICATION	2.42594241103937E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996555291064	WITHOUT_CLASSIFICATION	3.4447089358140487E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999360109799661	WITHOUT_CLASSIFICATION	6.398902003386435E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999937227577352	WITHOUT_CLASSIFICATION	6.277242264736278E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999920450602879	WITHOUT_CLASSIFICATION	7.954939712005728E-6	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999989133225989	WITHOUT_CLASSIFICATION	1.0866774010327717E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999880998984	WITHOUT_CLASSIFICATION	1.1900101630463902E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999894303954	WITHOUT_CLASSIFICATION	1.0569604609221346E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998950121066009	WITHOUT_CLASSIFICATION	1.0498789339911974E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999977779505455	WITHOUT_CLASSIFICATION	2.222049454508886E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999834958231	WITHOUT_CLASSIFICATION	1.6504176975210618E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999988645752281	WITHOUT_CLASSIFICATION	1.135424771859867E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999995097870173	WITHOUT_CLASSIFICATION	4.90212982705409E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999435403777	WITHOUT_CLASSIFICATION	5.64596223377416E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999846406674718	WITHOUT_CLASSIFICATION	1.5359332528247295E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999956470644823	WITHOUT_CLASSIFICATION	4.352935517689159E-6	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999097842945	WITHOUT_CLASSIFICATION	9.021570550113718E-8	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9954439925788894	WITHOUT_CLASSIFICATION	0.004556007421110619	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999945658297072	WITHOUT_CLASSIFICATION	5.434170292800062E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999985122986	WITHOUT_CLASSIFICATION	1.4877014450189653E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999988366971668	WITHOUT_CLASSIFICATION	1.163302833264648E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999999999881918	WITHOUT_CLASSIFICATION	1.1808189170369636E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999961486739	WITHOUT_CLASSIFICATION	3.851326098957117E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999956049359429	WITHOUT_CLASSIFICATION	4.39506405714904E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999981504143494	WITHOUT_CLASSIFICATION	1.8495856507079038E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998671962	WITHOUT_CLASSIFICATION	1.3280369314900914E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999076211467993	WITHOUT_CLASSIFICATION	9.237885320062975E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999300664210082	WITHOUT_CLASSIFICATION	6.993357899177875E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999980802481714	WITHOUT_CLASSIFICATION	1.919751828590768E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999987266980965	WITHOUT_CLASSIFICATION	1.273301903454611E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999992669879616	WITHOUT_CLASSIFICATION	7.33012038355215E-7	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.999995371029975	WITHOUT_CLASSIFICATION	4.6289700250118086E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899590200649	WITHOUT_CLASSIFICATION	1.0040979935061278E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999991560842107	WITHOUT_CLASSIFICATION	8.439157892099806E-7	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999627902314239	WITHOUT_CLASSIFICATION	3.720976857624265E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999706108585343	WITHOUT_CLASSIFICATION	2.938914146556876E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999910987846736	WITHOUT_CLASSIFICATION	8.901215326308538E-6	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997337571945	WITHOUT_CLASSIFICATION	2.662428053646667E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999995869363135	WITHOUT_CLASSIFICATION	4.130636864560456E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999989288846646	WITHOUT_CLASSIFICATION	1.0711153354043477E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.999998241808019	WITHOUT_CLASSIFICATION	1.758191981084104E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999993218541324	WITHOUT_CLASSIFICATION	6.781458675935158E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998275199403	WITHOUT_CLASSIFICATION	1.7248005975514853E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999781879144	WITHOUT_CLASSIFICATION	2.1812085619944818E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995015244998	WITHOUT_CLASSIFICATION	4.984755003202874E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979166604058	WITHOUT_CLASSIFICATION	2.0833395941092663E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994445357685	WITHOUT_CLASSIFICATION	5.554642314747707E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998834209411	WITHOUT_CLASSIFICATION	1.1657905889795786E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999993089541096	WITHOUT_CLASSIFICATION	6.910458903665532E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999982823601893	WITHOUT_CLASSIFICATION	1.7176398107022872E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817477652	WITHOUT_CLASSIFICATION	1.1825223481050386E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998266298804	WITHOUT_CLASSIFICATION	1.7337011956366883E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999840677581725	WITHOUT_CLASSIFICATION	1.5932241827499814E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625916031298	WITHOUT_CLASSIFICATION	3.740839687007679E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999840677581725	WITHOUT_CLASSIFICATION	1.5932241827499814E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999529647411839	WITHOUT_CLASSIFICATION	4.70352588161884E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999946832628	WITHOUT_CLASSIFICATION	5.31673718945081E-8	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999980220770316	WITHOUT_CLASSIFICATION	1.9779229683638778E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998851063722	WITHOUT_CLASSIFICATION	1.1489362792867792E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999605781665	WITHOUT_CLASSIFICATION	3.9421833563737335E-8	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999898928842	WITHOUT_CLASSIFICATION	1.0107115832388437E-8	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999861873714	WITHOUT_CLASSIFICATION	1.3812628601340462E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999922399224	WITHOUT_CLASSIFICATION	7.760077483909232E-9	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999998757846236	WITHOUT_CLASSIFICATION	1.2421537639775775E-6	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997117574699239	WITHOUT_CLASSIFICATION	2.8824253007608564E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999927205725074	WITHOUT_CLASSIFICATION	7.279427492482521E-6	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999702763713	WITHOUT_CLASSIFICATION	2.9723628649824747E-8	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999999337420814	WITHOUT_CLASSIFICATION	6.625791863624645E-8	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999999988588383	WITHOUT_CLASSIFICATION	1.1411617031271138E-8	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999086318474	WITHOUT_CLASSIFICATION	9.136815259653831E-7	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999987830045	WITHOUT_CLASSIFICATION	1.2169954937941968E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364374158	WITHOUT_CLASSIFICATION	1.0635625842680727E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364374158	WITHOUT_CLASSIFICATION	1.0635625842680727E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999984239810396	WITHOUT_CLASSIFICATION	1.5760189604143427E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999837261885	WITHOUT_CLASSIFICATION	1.6273811583315903E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999995773916	WITHOUT_CLASSIFICATION	4.22608453175013E-10	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998237374307687	WITHOUT_CLASSIFICATION	1.762625692312994E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999995685681	WITHOUT_CLASSIFICATION	4.314319871463445E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994420188731	WITHOUT_CLASSIFICATION	5.579811268146856E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999021879175922	WITHOUT_CLASSIFICATION	9.781208240779474E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999488220211135	WITHOUT_CLASSIFICATION	5.117797888650431E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999101490883	WITHOUT_CLASSIFICATION	8.985091166404979E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998199446357	WITHOUT_CLASSIFICATION	1.8005536436509542E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999991730083	WITHOUT_CLASSIFICATION	8.269916998913845E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997123322375	WITHOUT_CLASSIFICATION	2.876677625906761E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999935606682482	WITHOUT_CLASSIFICATION	6.439331751864842E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999972414332	WITHOUT_CLASSIFICATION	2.7585667963759434E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999983276964489	WITHOUT_CLASSIFICATION	1.672303551098525E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999546075	WITHOUT_CLASSIFICATION	4.53924666218082E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999771217204527	WITHOUT_CLASSIFICATION	2.2878279547301326E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9986720721114645	WITHOUT_CLASSIFICATION	0.0013279278885356307	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999910114568799	WITHOUT_CLASSIFICATION	8.988543120219254E-6	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999328908966	WITHOUT_CLASSIFICATION	6.710910341698951E-8	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997672213158	WITHOUT_CLASSIFICATION	2.327786843423657E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999750959377904	WITHOUT_CLASSIFICATION	2.490406220951811E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999988175356687	WITHOUT_CLASSIFICATION	1.1824643312801483E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9946406183799742	WITHOUT_CLASSIFICATION	0.005359381620025813	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999994715957773	WITHOUT_CLASSIFICATION	5.284042226780366E-7	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999800156003	WITHOUT_CLASSIFICATION	1.9984399683543757E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999905476926	WITHOUT_CLASSIFICATION	9.452307402846053E-9	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999981369009095	WITHOUT_CLASSIFICATION	1.8630990905111738E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999998519101385	WITHOUT_CLASSIFICATION	1.4808986152945324E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999967688706	WITHOUT_CLASSIFICATION	3.2311294027929654E-9	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999898150906	WITHOUT_CLASSIFICATION	1.0184909321814333E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999994932604351	WITHOUT_CLASSIFICATION	5.067395648321689E-7	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998921039895576	WITHOUT_CLASSIFICATION	1.0789601044234027E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998645830662	WITHOUT_CLASSIFICATION	1.3541693376184406E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999572634199308	WITHOUT_CLASSIFICATION	4.273658006920332E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992672547489	WITHOUT_CLASSIFICATION	7.327452511043535E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999522301847	WITHOUT_CLASSIFICATION	4.7769815375421494E-8	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999892487409947	WITHOUT_CLASSIFICATION	1.0751259005218915E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998546315642	WITHOUT_CLASSIFICATION	1.4536843588041695E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999979392451288	WITHOUT_CLASSIFICATION	2.060754871198036E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999999173653	WITHOUT_CLASSIFICATION	8.263472227273187E-11	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999917200352	WITHOUT_CLASSIFICATION	8.279964802210736E-8	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999781608199604	WITHOUT_CLASSIFICATION	2.1839180039636772E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9356539919257191	WITHOUT_CLASSIFICATION	0.06434600807428088	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998310108892	WITHOUT_CLASSIFICATION	1.6898911086906608E-7	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9993935629899336	WITHOUT_CLASSIFICATION	6.06437010066355E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6561020332240286	WITHOUT_CLASSIFICATION	0.34389796677597145	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999980106572	WITHOUT_CLASSIFICATION	1.9893427976883926E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999962257404867	WITHOUT_CLASSIFICATION	3.7742595133033835E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997781913306	WITHOUT_CLASSIFICATION	2.2180866942172708E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998449686042	WITHOUT_CLASSIFICATION	1.550313957275982E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999933431601	WITHOUT_CLASSIFICATION	6.656839839325238E-9	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999999342089	WITHOUT_CLASSIFICATION	6.579110331133305E-10	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999953714581656	WITHOUT_CLASSIFICATION	4.628541834354272E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999895067072936	WITHOUT_CLASSIFICATION	1.0493292706453372E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161679066	WITHOUT_CLASSIFICATION	8.383209335189904E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161679066	WITHOUT_CLASSIFICATION	8.383209335189904E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999991420599	WITHOUT_CLASSIFICATION	8.57940093727655E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999969122947177	WITHOUT_CLASSIFICATION	3.0877052823979107E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999979182594125	WITHOUT_CLASSIFICATION	2.081740587445688E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999992629518667	WITHOUT_CLASSIFICATION	7.370481332648239E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999978735944757	WITHOUT_CLASSIFICATION	2.1264055243057342E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9991590318226932	WITHOUT_CLASSIFICATION	8.409681773068818E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998038803085999	WITHOUT_CLASSIFICATION	1.9611969139999314E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999994281410651	WITHOUT_CLASSIFICATION	5.718589349061907E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999982368412	WITHOUT_CLASSIFICATION	1.76315881070376E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999897788947	WITHOUT_CLASSIFICATION	1.0221105368794196E-8	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999996282818047	WITHOUT_CLASSIFICATION	3.7171819534851077E-7	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999988764766304	WITHOUT_CLASSIFICATION	1.1235233695384359E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999990373839508	WITHOUT_CLASSIFICATION	9.62616049148156E-7	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999518143157	WITHOUT_CLASSIFICATION	4.8185684431731566E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999953405217	WITHOUT_CLASSIFICATION	4.659478309992545E-8	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999987242198177	WITHOUT_CLASSIFICATION	1.2757801822609857E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998288469497	WITHOUT_CLASSIFICATION	1.7115305032606774E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999948748010807	WITHOUT_CLASSIFICATION	5.125198919306352E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999930797275	WITHOUT_CLASSIFICATION	6.920272391797515E-9	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999981013916389	WITHOUT_CLASSIFICATION	1.8986083611034208E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999991930151	WITHOUT_CLASSIFICATION	8.069849332478589E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999990282066992	WITHOUT_CLASSIFICATION	9.717933008313004E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403231751	WITHOUT_CLASSIFICATION	8.359676824872475E-6	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999797771402348	WITHOUT_CLASSIFICATION	2.022285976524939E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997592093502439	WITHOUT_CLASSIFICATION	2.407906497561079E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.992647253546295	WITHOUT_CLASSIFICATION	0.007352746453705072	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9939002621807053	WITHOUT_CLASSIFICATION	0.006099737819294767	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999124712474781	WITHOUT_CLASSIFICATION	8.752875252195713E-5	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999981236256467	WITHOUT_CLASSIFICATION	1.8763743534250506E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403231751	WITHOUT_CLASSIFICATION	8.359676824872475E-6	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999999946107318	WITHOUT_CLASSIFICATION	5.389268191193831E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999755197	WITHOUT_CLASSIFICATION	2.4480311701585577E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999959434651705	WITHOUT_CLASSIFICATION	4.05653482946607E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.999990900438878	WITHOUT_CLASSIFICATION	9.099561121957317E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999908032607	WITHOUT_CLASSIFICATION	9.196739210285165E-9	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999997348443252	WITHOUT_CLASSIFICATION	2.651556746977233E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999673445835913	WITHOUT_CLASSIFICATION	3.265541640874386E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999975275503	WITHOUT_CLASSIFICATION	2.472449709614464E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9989572812056643	WITHOUT_CLASSIFICATION	0.0010427187943357012	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.999990900438878	WITHOUT_CLASSIFICATION	9.099561121957317E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999996541249	WITHOUT_CLASSIFICATION	3.4587502325527184E-10	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999672497959	WITHOUT_CLASSIFICATION	3.2750204039169355E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999963418135843	WITHOUT_CLASSIFICATION	3.6581864155515586E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999841963355174	WITHOUT_CLASSIFICATION	1.580366448264782E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999977881838907	WITHOUT_CLASSIFICATION	2.2118161092286684E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999991730083	WITHOUT_CLASSIFICATION	8.269916998913845E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999985099984	WITHOUT_CLASSIFICATION	1.4900015658697656E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998792547766	WITHOUT_CLASSIFICATION	1.20745223301882E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999893099017	WITHOUT_CLASSIFICATION	1.0690098330863485E-8	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9985932312879646	WITHOUT_CLASSIFICATION	0.001406768712035399	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999995087648	WITHOUT_CLASSIFICATION	4.912352358849486E-10	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999999030040673	WITHOUT_CLASSIFICATION	9.699593280571472E-8	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999993377865181	WITHOUT_CLASSIFICATION	6.62213481900932E-7	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999882476756	WITHOUT_CLASSIFICATION	1.1752324463890295E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997990065912	WITHOUT_CLASSIFICATION	2.0099340873660614E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999904656086124	WITHOUT_CLASSIFICATION	9.53439138771064E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999917355606353	WITHOUT_CLASSIFICATION	8.264439364750302E-6	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999557535846	WITHOUT_CLASSIFICATION	4.424641543612282E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999984746479782	WITHOUT_CLASSIFICATION	1.5253520218094335E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999978727408753	WITHOUT_CLASSIFICATION	2.127259124780026E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999985600766178	WITHOUT_CLASSIFICATION	1.4399233821666233E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999937889196407	WITHOUT_CLASSIFICATION	6.2110803592499985E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999999468089605	WITHOUT_CLASSIFICATION	5.31910394906385E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998249221338	WITHOUT_CLASSIFICATION	1.7507786608545341E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999993497849349	WITHOUT_CLASSIFICATION	6.502150650418456E-7	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999968411129908	WITHOUT_CLASSIFICATION	3.158887009165163E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999927352607565	WITHOUT_CLASSIFICATION	7.264739243435577E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999952712973713	WITHOUT_CLASSIFICATION	4.7287026286908985E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998101275968	WITHOUT_CLASSIFICATION	1.8987240323285126E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999835402	WITHOUT_CLASSIFICATION	1.645978654798547E-11	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998380625017784	WITHOUT_CLASSIFICATION	1.619374982215945E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998113254672886	WITHOUT_CLASSIFICATION	1.8867453271134165E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998573021044	WITHOUT_CLASSIFICATION	1.4269789551102598E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247448213651	WITHOUT_CLASSIFICATION	7.525517863497682E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998529022521	WITHOUT_CLASSIFICATION	1.4709774789977114E-5	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999938320977134	WITHOUT_CLASSIFICATION	6.1679022865580955E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998312592347236	WITHOUT_CLASSIFICATION	1.6874076527631274E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999975238583821	WITHOUT_CLASSIFICATION	2.476141617876298E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999999143856	WITHOUT_CLASSIFICATION	8.561441067582363E-10	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999096763869862	WITHOUT_CLASSIFICATION	9.032361301375108E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999628455733732	WITHOUT_CLASSIFICATION	3.715442662668012E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999875393785593	WITHOUT_CLASSIFICATION	1.2460621440663866E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999972366767981	WITHOUT_CLASSIFICATION	2.763323201936455E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999981568400107	WITHOUT_CLASSIFICATION	1.8431599893356535E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.99999990310267	WITHOUT_CLASSIFICATION	9.689733006002873E-8	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999999756401968	WITHOUT_CLASSIFICATION	2.43598031974216E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999642846228	WITHOUT_CLASSIFICATION	3.571537726531425E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999969155645	WITHOUT_CLASSIFICATION	3.084435497225284E-9	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999584539497	WITHOUT_CLASSIFICATION	4.1546050256952424E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997108615875	WITHOUT_CLASSIFICATION	2.891384124824831E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999892594765122	WITHOUT_CLASSIFICATION	1.0740523487831166E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999999635457348	WITHOUT_CLASSIFICATION	3.64542651917942E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999997865262667	WITHOUT_CLASSIFICATION	2.134737333041637E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9972873351566267	WITHOUT_CLASSIFICATION	0.0027126648433732077	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998103162995	WITHOUT_CLASSIFICATION	1.8968370054461573E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997588388788	WITHOUT_CLASSIFICATION	2.4116112120438403E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999384731727	WITHOUT_CLASSIFICATION	6.152682730193965E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994997042290477	WITHOUT_CLASSIFICATION	5.00295770952241E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999835798871916	WITHOUT_CLASSIFICATION	1.642011280853068E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999901062723	WITHOUT_CLASSIFICATION	9.893727692885338E-8	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999834865436215	WITHOUT_CLASSIFICATION	1.651345637860089E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999823155335372	WITHOUT_CLASSIFICATION	1.76844664627785E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247448213651	WITHOUT_CLASSIFICATION	7.525517863497682E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999994103360189	WITHOUT_CLASSIFICATION	5.896639811035832E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999983346242	WITHOUT_CLASSIFICATION	1.665375812743921E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999999658480536	WITHOUT_CLASSIFICATION	3.415194642111552E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999916102835575	WITHOUT_CLASSIFICATION	8.389716442434557E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999717784098396	WITHOUT_CLASSIFICATION	2.8221590160385384E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999969283707145	WITHOUT_CLASSIFICATION	3.071629285362911E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998219727393	WITHOUT_CLASSIFICATION	1.780272607156874E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999764613752	WITHOUT_CLASSIFICATION	2.3538624849026614E-8	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999916813259	WITHOUT_CLASSIFICATION	8.318674059124278E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999994962607818	WITHOUT_CLASSIFICATION	5.037392181545069E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997499237989	WITHOUT_CLASSIFICATION	2.5007620103494266E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923104231756	WITHOUT_CLASSIFICATION	7.689576824502263E-6	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999400611582	WITHOUT_CLASSIFICATION	5.993884179061876E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999031634113	WITHOUT_CLASSIFICATION	9.683658865787933E-8	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999529647411839	WITHOUT_CLASSIFICATION	4.70352588161884E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999998174524	WITHOUT_CLASSIFICATION	1.82547677196755E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999968855254	WITHOUT_CLASSIFICATION	3.114474631199904E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999964415107	WITHOUT_CLASSIFICATION	3.558489169035533E-9	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999999153150309	WITHOUT_CLASSIFICATION	8.468496918419097E-8	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999928404573	WITHOUT_CLASSIFICATION	7.159542780708722E-9	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258583187	WITHOUT_CLASSIFICATION	8.374141681236113E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258583187	WITHOUT_CLASSIFICATION	8.374141681236113E-6	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999980256127536	WITHOUT_CLASSIFICATION	1.974387246260836E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99999999431501	WITHOUT_CLASSIFICATION	5.684990060102396E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9994064595512628	WITHOUT_CLASSIFICATION	5.935404487371506E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998450434744751	WITHOUT_CLASSIFICATION	1.5495652552486807E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999989530519914	WITHOUT_CLASSIFICATION	1.0469480086431872E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998326940466	WITHOUT_CLASSIFICATION	1.6730595336937976E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999970194226837	WITHOUT_CLASSIFICATION	2.98057731619965E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999832871096	WITHOUT_CLASSIFICATION	1.671289044380968E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999832871096	WITHOUT_CLASSIFICATION	1.671289044380968E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999985265737366	WITHOUT_CLASSIFICATION	1.4734262633712808E-6	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999885466200276	WITHOUT_CLASSIFICATION	1.1453379972550045E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999385556998	WITHOUT_CLASSIFICATION	6.14443002263169E-8	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583966565	WITHOUT_CLASSIFICATION	1.3416033435329084E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583966565	WITHOUT_CLASSIFICATION	1.3416033435329084E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583966565	WITHOUT_CLASSIFICATION	1.3416033435329084E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999562692107099	WITHOUT_CLASSIFICATION	4.373078929013308E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999281199609	WITHOUT_CLASSIFICATION	7.188003922198009E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9631594616775687	WITHOUT_CLASSIFICATION	0.03684053832243126	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9946713651334312	WITHOUT_CLASSIFICATION	0.005328634866568681	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999993241004937	WITHOUT_CLASSIFICATION	6.758995063663413E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996392943727	WITHOUT_CLASSIFICATION	3.607056272410515E-7	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999975465090446	WITHOUT_CLASSIFICATION	2.453490955394762E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.995811233522395	WITHOUT_CLASSIFICATION	0.004188766477605099	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.99999998755546	WITHOUT_CLASSIFICATION	1.2444539931653063E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999920336931983	WITHOUT_CLASSIFICATION	7.966306801703637E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999998496641064	WITHOUT_CLASSIFICATION	1.5033589362763057E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999989981622683	WITHOUT_CLASSIFICATION	1.0018377316972439E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999995704968953	WITHOUT_CLASSIFICATION	4.295031048400495E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999857443697	WITHOUT_CLASSIFICATION	1.425563037527434E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999856163382	WITHOUT_CLASSIFICATION	1.438366172032621E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999993318733077	WITHOUT_CLASSIFICATION	6.681266923044829E-7	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999563494417	WITHOUT_CLASSIFICATION	4.365055827567973E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999563494417	WITHOUT_CLASSIFICATION	4.365055827567964E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999672729747	WITHOUT_CLASSIFICATION	3.272702536672826E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999672729747	WITHOUT_CLASSIFICATION	3.272702536672826E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999656823993	WITHOUT_CLASSIFICATION	3.431760055598954E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998814577173	WITHOUT_CLASSIFICATION	1.1854228265513285E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998814577173	WITHOUT_CLASSIFICATION	1.1854228265513285E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998090019395	WITHOUT_CLASSIFICATION	1.9099806051865437E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998991053686	WITHOUT_CLASSIFICATION	1.0089463144257116E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999828438454571	WITHOUT_CLASSIFICATION	1.7156154542895033E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258583187	WITHOUT_CLASSIFICATION	8.374141681236113E-6	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999781057034974	WITHOUT_CLASSIFICATION	2.189429650251614E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998991053686	WITHOUT_CLASSIFICATION	1.0089463144257116E-7	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999780059766558	WITHOUT_CLASSIFICATION	2.1994023344178143E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999023227166007	WITHOUT_CLASSIFICATION	9.76772833992419E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999701712674	WITHOUT_CLASSIFICATION	2.982873253638459E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999357055824	WITHOUT_CLASSIFICATION	6.429441750723066E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999987661236216	WITHOUT_CLASSIFICATION	1.2338763783843698E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999945322245581	WITHOUT_CLASSIFICATION	5.467775441843189E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999846277151	WITHOUT_CLASSIFICATION	1.5372284905164089E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999546718388	WITHOUT_CLASSIFICATION	4.5328161337977636E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998739465604	WITHOUT_CLASSIFICATION	1.2605343957735854E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999842153016	WITHOUT_CLASSIFICATION	1.578469845992082E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999996675815	WITHOUT_CLASSIFICATION	3.3241853852749835E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999996545291632	WITHOUT_CLASSIFICATION	3.4547083685706203E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591195546	WITHOUT_CLASSIFICATION	1.040880445375205E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999999908188601	WITHOUT_CLASSIFICATION	9.181139902504496E-8	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998131068293745	WITHOUT_CLASSIFICATION	1.8689317062547476E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999989511779293	WITHOUT_CLASSIFICATION	1.048822070703401E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999753508195	WITHOUT_CLASSIFICATION	2.4649180494674785E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999844726246	WITHOUT_CLASSIFICATION	1.5527375390329925E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999999844726246	WITHOUT_CLASSIFICATION	1.5527375390329925E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999995873088525	WITHOUT_CLASSIFICATION	4.126911474694665E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999354542547	WITHOUT_CLASSIFICATION	6.454574527353312E-8	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999989273740277	WITHOUT_CLASSIFICATION	1.0726259722382844E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999748823705219	WITHOUT_CLASSIFICATION	2.511762947807979E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998657345852	WITHOUT_CLASSIFICATION	1.3426541478008212E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999856424564841	WITHOUT_CLASSIFICATION	1.4357543515888474E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999849609678327	WITHOUT_CLASSIFICATION	1.5039032167294054E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999983387050726	WITHOUT_CLASSIFICATION	1.6612949274496568E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999990524047258	WITHOUT_CLASSIFICATION	9.475952741349371E-7	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998986350052	WITHOUT_CLASSIFICATION	1.0136499483610126E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999993276907482	WITHOUT_CLASSIFICATION	6.723092517320753E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923104231756	WITHOUT_CLASSIFICATION	7.689576824502263E-6	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999226645332	WITHOUT_CLASSIFICATION	7.733546675824973E-8	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999959158703521	WITHOUT_CLASSIFICATION	4.084129647886282E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999471573907414	WITHOUT_CLASSIFICATION	5.284260925856511E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999991811950481	WITHOUT_CLASSIFICATION	8.188049519030864E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999223881685	WITHOUT_CLASSIFICATION	7.761183142504136E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999223881685	WITHOUT_CLASSIFICATION	7.761183142504136E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999290446075606	WITHOUT_CLASSIFICATION	7.0955392439409E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999979365960031	WITHOUT_CLASSIFICATION	2.0634039969266372E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999557418241282	WITHOUT_CLASSIFICATION	4.4258175871812965E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999920860562059	WITHOUT_CLASSIFICATION	7.913943794149079E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999981557085885	WITHOUT_CLASSIFICATION	1.8442914114422227E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999988177647814	WITHOUT_CLASSIFICATION	1.1822352185721576E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999891817612162	WITHOUT_CLASSIFICATION	1.0818238783806104E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999417821088	WITHOUT_CLASSIFICATION	5.82178911261782E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710315305155	WITHOUT_CLASSIFICATION	2.896846948446152E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999968612987	WITHOUT_CLASSIFICATION	3.138701259907267E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998246896811	WITHOUT_CLASSIFICATION	1.7531031888538095E-7	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999417821088	WITHOUT_CLASSIFICATION	5.82178911261782E-8	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999995632225369	WITHOUT_CLASSIFICATION	4.3677746296827034E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999974666175027	WITHOUT_CLASSIFICATION	2.533382497282774E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999785437407	WITHOUT_CLASSIFICATION	2.1456259381664417E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999912076348	WITHOUT_CLASSIFICATION	8.792365208625806E-9	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999505248911	WITHOUT_CLASSIFICATION	4.947510894440269E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999988778204	WITHOUT_CLASSIFICATION	1.1221796078199766E-8	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999993768053208	WITHOUT_CLASSIFICATION	6.23194679237892E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997757821163	WITHOUT_CLASSIFICATION	2.242178837684804E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999998669463	WITHOUT_CLASSIFICATION	1.3305370028902602E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999731638362164	WITHOUT_CLASSIFICATION	2.6836163783616557E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997314301541448	WITHOUT_CLASSIFICATION	2.6856984585521933E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999977401663	WITHOUT_CLASSIFICATION	2.2598337152285994E-9	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995606793215	WITHOUT_CLASSIFICATION	4.393206783946016E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999933339580968	WITHOUT_CLASSIFICATION	6.666041903279248E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999265726732345	WITHOUT_CLASSIFICATION	7.342732676562369E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999505320205	WITHOUT_CLASSIFICATION	4.946797943935547E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999985598167	WITHOUT_CLASSIFICATION	1.4401833181390794E-9	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999384176872026	WITHOUT_CLASSIFICATION	6.158231279743777E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999882925498794	WITHOUT_CLASSIFICATION	1.1707450120436963E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991555960531	WITHOUT_CLASSIFICATION	8.444039469689393E-7	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999993500934451	WITHOUT_CLASSIFICATION	6.499065547920891E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999959429954236	WITHOUT_CLASSIFICATION	4.057004576404172E-6	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.99992273533204	WITHOUT_CLASSIFICATION	7.726466796002794E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999329572326	WITHOUT_CLASSIFICATION	6.704276742850648E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999641329181	WITHOUT_CLASSIFICATION	3.586708198489547E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999948919097837	WITHOUT_CLASSIFICATION	5.1080902163099826E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999996026424042	WITHOUT_CLASSIFICATION	3.9735759581374674E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999949049782416	WITHOUT_CLASSIFICATION	5.095021758437633E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996231282351	WITHOUT_CLASSIFICATION	3.768717648625599E-7	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999894546315983	WITHOUT_CLASSIFICATION	1.0545368401818168E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999989889707265	WITHOUT_CLASSIFICATION	1.0110292734573496E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999983599734031	WITHOUT_CLASSIFICATION	1.6400265968312746E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999823579905996	WITHOUT_CLASSIFICATION	1.764200940033001E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999967435721	WITHOUT_CLASSIFICATION	3.2564279674359328E-9	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999000351133	WITHOUT_CLASSIFICATION	9.996488667409383E-8	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998164051216	WITHOUT_CLASSIFICATION	1.8359487832045994E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999136414555	WITHOUT_CLASSIFICATION	8.63585445859866E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999821733011	WITHOUT_CLASSIFICATION	1.782669884489672E-8	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999378465613	WITHOUT_CLASSIFICATION	6.215343871644512E-8	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999368402991456	WITHOUT_CLASSIFICATION	6.315970085442003E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999965243606511	WITHOUT_CLASSIFICATION	3.4756393488311602E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999997780994672	WITHOUT_CLASSIFICATION	2.2190053270681238E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999987605960242	WITHOUT_CLASSIFICATION	1.2394039758102104E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999899845321	WITHOUT_CLASSIFICATION	1.0015467895618898E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999999989433578	WITHOUT_CLASSIFICATION	1.0566421996278735E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999872841412	WITHOUT_CLASSIFICATION	1.2715858810122184E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998357991323	WITHOUT_CLASSIFICATION	1.6420086779160853E-7	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999778182589922	WITHOUT_CLASSIFICATION	2.2181741007771365E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999998379747143	WITHOUT_CLASSIFICATION	1.6202528569591382E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997646649412	WITHOUT_CLASSIFICATION	2.3533505871497763E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991481658494	WITHOUT_CLASSIFICATION	8.518341505953643E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998433460526	WITHOUT_CLASSIFICATION	1.5665394731973994E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999959072695	WITHOUT_CLASSIFICATION	4.0927305707555365E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999996656423	WITHOUT_CLASSIFICATION	3.3435772721866277E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999997351177833	WITHOUT_CLASSIFICATION	2.648822167589531E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999994199427761	WITHOUT_CLASSIFICATION	5.800572238656925E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999786734130384	WITHOUT_CLASSIFICATION	2.1326586961668416E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999989303134613	WITHOUT_CLASSIFICATION	1.0696865386098199E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999376017107	WITHOUT_CLASSIFICATION	6.239828935927071E-8	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999952532802	WITHOUT_CLASSIFICATION	4.746719845414968E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998718631895	WITHOUT_CLASSIFICATION	1.2813681046520919E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999994398614982	WITHOUT_CLASSIFICATION	5.601385017955597E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999633777215926	WITHOUT_CLASSIFICATION	3.662227840740726E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999913557	WITHOUT_CLASSIFICATION	8.64432464219847E-12	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999495782158	WITHOUT_CLASSIFICATION	5.042178425123324E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999982865333316	WITHOUT_CLASSIFICATION	1.7134666683671178E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991481658494	WITHOUT_CLASSIFICATION	8.518341505953643E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999977376083643	WITHOUT_CLASSIFICATION	2.262391635732522E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999964896848657	WITHOUT_CLASSIFICATION	3.5103151344241455E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999868863848	WITHOUT_CLASSIFICATION	1.311361518131451E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998488383269	WITHOUT_CLASSIFICATION	1.5116167303320006E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999911754519534	WITHOUT_CLASSIFICATION	8.824548046609658E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999534442675	WITHOUT_CLASSIFICATION	4.6555732474158076E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710315305155	WITHOUT_CLASSIFICATION	2.896846948446152E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999174234144875	WITHOUT_CLASSIFICATION	8.257658551252187E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999000351133	WITHOUT_CLASSIFICATION	9.996488667409383E-8	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998377235152837	WITHOUT_CLASSIFICATION	1.6227648471636152E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996254958173	WITHOUT_CLASSIFICATION	3.7450418269409157E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999955331349	WITHOUT_CLASSIFICATION	4.46686512089124E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999976727649	WITHOUT_CLASSIFICATION	2.3272350976042134E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994776336572	WITHOUT_CLASSIFICATION	5.223663428235034E-7	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999663568771654	WITHOUT_CLASSIFICATION	3.364312283461125E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999910245219	WITHOUT_CLASSIFICATION	8.975478097914537E-9	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998395753777	WITHOUT_CLASSIFICATION	1.6042462215020013E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999906952854003	WITHOUT_CLASSIFICATION	9.30471459959765E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999999369358	WITHOUT_CLASSIFICATION	6.306422376078272E-11	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999975002039037	WITHOUT_CLASSIFICATION	2.4997960963353226E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999781283894701	WITHOUT_CLASSIFICATION	2.187161052995754E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999984380012	WITHOUT_CLASSIFICATION	1.5619988517643244E-9	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999984380012	WITHOUT_CLASSIFICATION	1.5619988517643244E-9	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999920961383	WITHOUT_CLASSIFICATION	7.903861740402937E-9	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999926956358471	WITHOUT_CLASSIFICATION	7.304364152855442E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999997821543	WITHOUT_CLASSIFICATION	2.1784564504592754E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999872591696	WITHOUT_CLASSIFICATION	1.274083049648863E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999777837199	WITHOUT_CLASSIFICATION	2.2216280226809055E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998578360637	WITHOUT_CLASSIFICATION	1.4216393627820467E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999993233731	WITHOUT_CLASSIFICATION	6.766269199093663E-10	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998384051206	WITHOUT_CLASSIFICATION	1.6159487938355896E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999813808298	WITHOUT_CLASSIFICATION	1.861917015828693E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998757962641	WITHOUT_CLASSIFICATION	1.2420373588933143E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999886768640953	WITHOUT_CLASSIFICATION	1.1323135904603186E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999948654938865	WITHOUT_CLASSIFICATION	5.134506113477496E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999979027436716	WITHOUT_CLASSIFICATION	2.0972563283758584E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999985526853	WITHOUT_CLASSIFICATION	1.4473147234256399E-9	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999627079004941	WITHOUT_CLASSIFICATION	3.729209950581822E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999399749842	WITHOUT_CLASSIFICATION	6.002501580353915E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999998606367754	WITHOUT_CLASSIFICATION	1.393632246913344E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999995964846	WITHOUT_CLASSIFICATION	4.035154052364465E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998421280674	WITHOUT_CLASSIFICATION	1.5787193271747652E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999836472521	WITHOUT_CLASSIFICATION	1.635274792067151E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999993932225834	WITHOUT_CLASSIFICATION	6.067774166042556E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999995118314	WITHOUT_CLASSIFICATION	4.881686054666999E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999991001650446	WITHOUT_CLASSIFICATION	8.998349554115124E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.99922612977352	WITHOUT_CLASSIFICATION	7.738702264800218E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9955232392397557	WITHOUT_CLASSIFICATION	0.004476760760244369	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642761268	WITHOUT_CLASSIFICATION	4.035723873142767E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999983032024586	WITHOUT_CLASSIFICATION	1.6967975413622498E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999995489714266	WITHOUT_CLASSIFICATION	4.5102857340850535E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999600726066	WITHOUT_CLASSIFICATION	3.9927393396641085E-8	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998488514981	WITHOUT_CLASSIFICATION	1.5114850193242892E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641046018062	WITHOUT_CLASSIFICATION	0.0032358953981938216	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999987539277099	WITHOUT_CLASSIFICATION	1.2460722901627113E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.99999762853989	WITHOUT_CLASSIFICATION	2.371460109980256E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9907405381045622	WITHOUT_CLASSIFICATION	0.009259461895437849	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999971927338562	WITHOUT_CLASSIFICATION	2.80726614378401E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996410409171	WITHOUT_CLASSIFICATION	3.5895908290754645E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999972560662335	WITHOUT_CLASSIFICATION	2.7439337666259895E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9994045307538545	WITHOUT_CLASSIFICATION	5.954692461455235E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999977629514218	WITHOUT_CLASSIFICATION	2.2370485781422293E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997314668535	WITHOUT_CLASSIFICATION	2.685331464949185E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999817597097512	WITHOUT_CLASSIFICATION	1.8240290248799584E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996608733576	WITHOUT_CLASSIFICATION	3.391266423875082E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989067154637	WITHOUT_CLASSIFICATION	1.093284536285151E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999999260130367	WITHOUT_CLASSIFICATION	7.398696329371018E-7	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999993157646505	WITHOUT_CLASSIFICATION	6.842353494036404E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576520351957	WITHOUT_CLASSIFICATION	2.4234796480437175E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9990538978328477	WITHOUT_CLASSIFICATION	9.461021671522645E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989153041884	WITHOUT_CLASSIFICATION	1.0846958115723206E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999969911383987	WITHOUT_CLASSIFICATION	3.008861601353164E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999752753306609	WITHOUT_CLASSIFICATION	2.4724669339152398E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984748734597	WITHOUT_CLASSIFICATION	1.5251265402816174E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9997780557215681	WITHOUT_CLASSIFICATION	2.2194427843196673E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999958982222	WITHOUT_CLASSIFICATION	4.101777807731134E-9	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999996572241613	WITHOUT_CLASSIFICATION	3.4277583863542807E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999949361018559	WITHOUT_CLASSIFICATION	5.063898144189755E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999970571514024	WITHOUT_CLASSIFICATION	2.9428485976669732E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999507061847	WITHOUT_CLASSIFICATION	4.929381531655982E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999639038359196	WITHOUT_CLASSIFICATION	3.609616408035989E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999975607455409	WITHOUT_CLASSIFICATION	2.4392544591801344E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998689832128	WITHOUT_CLASSIFICATION	1.310167871605679E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995467327258	WITHOUT_CLASSIFICATION	4.5326727415278997E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999810119309	WITHOUT_CLASSIFICATION	1.89880690747182E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999761721799969	WITHOUT_CLASSIFICATION	2.3827820003201473E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999993762976946	WITHOUT_CLASSIFICATION	6.237023054697736E-7	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999993130363918	WITHOUT_CLASSIFICATION	6.869636082243629E-7	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999994434514	WITHOUT_CLASSIFICATION	5.565485337771484E-10	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999900405629	WITHOUT_CLASSIFICATION	9.959437097372878E-8	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999883342458447	WITHOUT_CLASSIFICATION	1.1665754155350422E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999778278341702	WITHOUT_CLASSIFICATION	2.217216582983732E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999966147889292	WITHOUT_CLASSIFICATION	3.385211070703791E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999778278341702	WITHOUT_CLASSIFICATION	2.217216582983732E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999947204385	WITHOUT_CLASSIFICATION	5.279561473780078E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999963112081517	WITHOUT_CLASSIFICATION	3.6887918484100476E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998205144449858	WITHOUT_CLASSIFICATION	1.7948555501416799E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999924152428323	WITHOUT_CLASSIFICATION	7.584757167730481E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999970260226904	WITHOUT_CLASSIFICATION	2.9739773095737708E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999581113487606	WITHOUT_CLASSIFICATION	4.188865123938404E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999785162269	WITHOUT_CLASSIFICATION	2.1483773101099E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999824013897	WITHOUT_CLASSIFICATION	1.7598610313314915E-8	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998518367553	WITHOUT_CLASSIFICATION	1.4816324479198805E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999993054162166	WITHOUT_CLASSIFICATION	6.94583783286095E-7	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999995991551635	WITHOUT_CLASSIFICATION	4.008448364511121E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997547557676	WITHOUT_CLASSIFICATION	2.452442323691478E-7	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999832725976	WITHOUT_CLASSIFICATION	1.6727402338564896E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999987470832357	WITHOUT_CLASSIFICATION	1.2529167643616049E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999071535161098	WITHOUT_CLASSIFICATION	9.284648389027919E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999983966975845	WITHOUT_CLASSIFICATION	1.603302415483787E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999994605805939	WITHOUT_CLASSIFICATION	5.394194061003458E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999989962626	WITHOUT_CLASSIFICATION	1.0037373547662445E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999164653601	WITHOUT_CLASSIFICATION	8.353463995167185E-8	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999201265841	WITHOUT_CLASSIFICATION	7.987341599512907E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996916931299	WITHOUT_CLASSIFICATION	3.083068701944223E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999223701231602	WITHOUT_CLASSIFICATION	7.762987683977303E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9988607331569619	WITHOUT_CLASSIFICATION	0.0011392668430381177	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998073482550058	WITHOUT_CLASSIFICATION	1.926517449942899E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999920412612135	WITHOUT_CLASSIFICATION	7.958738786431407E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999982337644	WITHOUT_CLASSIFICATION	1.766235598869295E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999992142386719	WITHOUT_CLASSIFICATION	7.857613281537821E-7	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999963468017572	WITHOUT_CLASSIFICATION	3.6531982428689696E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997640614752	WITHOUT_CLASSIFICATION	2.359385247380226E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999996783936129	WITHOUT_CLASSIFICATION	3.216063870436605E-7	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999996208360272	WITHOUT_CLASSIFICATION	3.791639727993914E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999968583309197	WITHOUT_CLASSIFICATION	3.141669080366573E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999999999889295	WITHOUT_CLASSIFICATION	1.107048971019757E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998863142341	WITHOUT_CLASSIFICATION	1.1368576589213086E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999991077761703	WITHOUT_CLASSIFICATION	8.922238296942087E-6	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999978471865916	WITHOUT_CLASSIFICATION	2.1528134083773675E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999988551611358	WITHOUT_CLASSIFICATION	1.1448388640872094E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998869578578	WITHOUT_CLASSIFICATION	1.1304214218136914E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999636553581306	WITHOUT_CLASSIFICATION	3.634464186948515E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999642300211	WITHOUT_CLASSIFICATION	3.57699788547702E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999942388136	WITHOUT_CLASSIFICATION	5.7611864448190305E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999703917238154	WITHOUT_CLASSIFICATION	2.9608276184635066E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996792664765	WITHOUT_CLASSIFICATION	3.207335235231811E-7	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999982337644	WITHOUT_CLASSIFICATION	1.766235598869295E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999337595041495	WITHOUT_CLASSIFICATION	6.624049585052914E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999997158502093	WITHOUT_CLASSIFICATION	2.841497907073355E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999863444588102	WITHOUT_CLASSIFICATION	1.3655541189762238E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999966099976	WITHOUT_CLASSIFICATION	3.3900023423836534E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999974786154293	WITHOUT_CLASSIFICATION	2.5213845707305666E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999725203538	WITHOUT_CLASSIFICATION	2.7479646190382737E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999943976056008	WITHOUT_CLASSIFICATION	5.60239439923708E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999714431553295	WITHOUT_CLASSIFICATION	2.8556844670469967E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999940477723559	WITHOUT_CLASSIFICATION	5.952227644118137E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999205824672	WITHOUT_CLASSIFICATION	7.941753274340859E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999158402838862	WITHOUT_CLASSIFICATION	8.415971611386018E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999871030734	WITHOUT_CLASSIFICATION	1.2896926757341971E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999968639415592	WITHOUT_CLASSIFICATION	3.136058440754036E-6	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999967238491869	WITHOUT_CLASSIFICATION	3.276150813082517E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999972495344	WITHOUT_CLASSIFICATION	2.7504656985876137E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999970443755	WITHOUT_CLASSIFICATION	2.9556245541684654E-9	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999999929858947	WITHOUT_CLASSIFICATION	7.01410529932113E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999944576554	WITHOUT_CLASSIFICATION	5.542344613746145E-8	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999984007181849	WITHOUT_CLASSIFICATION	1.5992818150561027E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999337595041495	WITHOUT_CLASSIFICATION	6.624049585052914E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999857051429895	WITHOUT_CLASSIFICATION	1.4294857010475528E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999252372662	WITHOUT_CLASSIFICATION	7.476273382579486E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999999204623949	WITHOUT_CLASSIFICATION	7.953760513640853E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998906273072	WITHOUT_CLASSIFICATION	1.0937269287945155E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999970262458	WITHOUT_CLASSIFICATION	2.9737543078686595E-9	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908143939423236	WITHOUT_CLASSIFICATION	0.009185606057676274	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908143939423236	WITHOUT_CLASSIFICATION	0.009185606057676274	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998068739233	WITHOUT_CLASSIFICATION	1.9312607667271266E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908143939423236	WITHOUT_CLASSIFICATION	0.009185606057676274	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9908143939423236	WITHOUT_CLASSIFICATION	0.009185606057676274	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999923292655444	WITHOUT_CLASSIFICATION	7.670734455598401E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999874894072	WITHOUT_CLASSIFICATION	1.2510592904783631E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999985275001713	WITHOUT_CLASSIFICATION	1.4724998287143153E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999989188570517	WITHOUT_CLASSIFICATION	1.081142948297592E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997186145937	WITHOUT_CLASSIFICATION	2.813854063076457E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999957565107536	WITHOUT_CLASSIFICATION	4.2434892464063965E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994758542552423	WITHOUT_CLASSIFICATION	5.24145744757671E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999951429547	WITHOUT_CLASSIFICATION	4.857045279762062E-9	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999748850118024	WITHOUT_CLASSIFICATION	2.511498819759804E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999718836486302	WITHOUT_CLASSIFICATION	2.8116351369760632E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999869683835558	WITHOUT_CLASSIFICATION	1.3031616444202827E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999971719282936	WITHOUT_CLASSIFICATION	2.8280717064497704E-6	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999998634851919	WITHOUT_CLASSIFICATION	1.365148081324419E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999900513112538	WITHOUT_CLASSIFICATION	9.94868874620655E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999599705122	WITHOUT_CLASSIFICATION	4.0029487887679074E-8	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999929276973704	WITHOUT_CLASSIFICATION	7.072302629650987E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817477652	WITHOUT_CLASSIFICATION	1.1825223481050386E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999999027620597	WITHOUT_CLASSIFICATION	9.723794029502602E-7	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999974818082436	WITHOUT_CLASSIFICATION	2.5181917563958297E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999931783743111	WITHOUT_CLASSIFICATION	6.821625688857867E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999504359549308	WITHOUT_CLASSIFICATION	4.95640450692606E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999978148498305	WITHOUT_CLASSIFICATION	2.1851501694849325E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817477652	WITHOUT_CLASSIFICATION	1.1825223481050386E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999992142386719	WITHOUT_CLASSIFICATION	7.857613281537821E-7	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999345894365665	WITHOUT_CLASSIFICATION	6.541056343341021E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982950747175	WITHOUT_CLASSIFICATION	1.704925282516453E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996158805551	WITHOUT_CLASSIFICATION	3.841194449011586E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999918298406841	WITHOUT_CLASSIFICATION	8.170159315872159E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999972329337496	WITHOUT_CLASSIFICATION	2.7670662503122607E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999998320819713	WITHOUT_CLASSIFICATION	1.679180286167887E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9918884503891223	WITHOUT_CLASSIFICATION	0.00811154961087771	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999937561391099	WITHOUT_CLASSIFICATION	6.243860890193716E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999861057041854	WITHOUT_CLASSIFICATION	1.389429581457656E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999515709179205	WITHOUT_CLASSIFICATION	4.842908207952256E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999990425251	WITHOUT_CLASSIFICATION	9.574748377924012E-10	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999968173712	WITHOUT_CLASSIFICATION	3.1826287985501736E-8	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997887598774	WITHOUT_CLASSIFICATION	2.1124012269051018E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999422725945678	WITHOUT_CLASSIFICATION	5.7727405432161684E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999936280904	WITHOUT_CLASSIFICATION	6.371909511992118E-9	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997889744088	WITHOUT_CLASSIFICATION	2.1102559119749147E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998542616096895	WITHOUT_CLASSIFICATION	1.4573839031048504E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999949470408	WITHOUT_CLASSIFICATION	5.052959134230953E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999995859866951	WITHOUT_CLASSIFICATION	4.1401330488331344E-7	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999807267700972	WITHOUT_CLASSIFICATION	1.927322990281082E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.99999541078988	WITHOUT_CLASSIFICATION	4.589210120124652E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999993292473045	WITHOUT_CLASSIFICATION	6.707526954919882E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999937561391099	WITHOUT_CLASSIFICATION	6.243860890193716E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999957231968943	WITHOUT_CLASSIFICATION	4.276803105605785E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999934013666887	WITHOUT_CLASSIFICATION	6.598633311282721E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998285470309165	WITHOUT_CLASSIFICATION	1.7145296908350577E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999997312402235	WITHOUT_CLASSIFICATION	2.687597765555348E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994767047475	WITHOUT_CLASSIFICATION	5.232952525097753E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999967809348854	WITHOUT_CLASSIFICATION	3.2190651146463036E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999995822221006	WITHOUT_CLASSIFICATION	4.177778994218317E-7	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999992155126572	WITHOUT_CLASSIFICATION	7.84487342796598E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999994648534554	WITHOUT_CLASSIFICATION	5.351465446330667E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999292740654946	WITHOUT_CLASSIFICATION	7.072593450549202E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889711273	WITHOUT_CLASSIFICATION	5.11028872716868E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999711165061	WITHOUT_CLASSIFICATION	2.8883494013329456E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997873081872919	WITHOUT_CLASSIFICATION	2.1269181270816616E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999977538194	WITHOUT_CLASSIFICATION	2.246180581269575E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999348383889	WITHOUT_CLASSIFICATION	6.516161113811303E-8	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363299218	WITHOUT_CLASSIFICATION	1.5636700782070238E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889711273	WITHOUT_CLASSIFICATION	5.11028872716868E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999999827119	WITHOUT_CLASSIFICATION	1.728810254011638E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999998867619434	WITHOUT_CLASSIFICATION	1.1323805652531305E-7	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995823995305	WITHOUT_CLASSIFICATION	4.176004695913009E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999832843666864	WITHOUT_CLASSIFICATION	1.6715633313608275E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999991708928749	WITHOUT_CLASSIFICATION	8.291071250523183E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999947578975962	WITHOUT_CLASSIFICATION	5.242102403835023E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999984044168047	WITHOUT_CLASSIFICATION	1.595583195370298E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998858213415	WITHOUT_CLASSIFICATION	1.1417865851304411E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999074147229	WITHOUT_CLASSIFICATION	9.25852771852767E-8	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993559660496468	WITHOUT_CLASSIFICATION	6.440339503530885E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9737075185253645	WITHOUT_CLASSIFICATION	0.026292481474635424	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9893846372310622	WITHOUT_CLASSIFICATION	0.010615362768937845	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995711371705	WITHOUT_CLASSIFICATION	4.2886282958368583E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995711371705	WITHOUT_CLASSIFICATION	4.2886282958368583E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999685564315	WITHOUT_CLASSIFICATION	3.144356852256058E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996620955456	WITHOUT_CLASSIFICATION	3.3790445445411087E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999996980795262	WITHOUT_CLASSIFICATION	3.0192047387306657E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997330288575	WITHOUT_CLASSIFICATION	2.6697114252974354E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999913669333922	WITHOUT_CLASSIFICATION	8.633066607839858E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999981287903	WITHOUT_CLASSIFICATION	1.871209695170869E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994762476482	WITHOUT_CLASSIFICATION	5.237523518087805E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994791700243	WITHOUT_CLASSIFICATION	5.208299756268442E-7	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999247084069	WITHOUT_CLASSIFICATION	7.529159310895176E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999613345627	WITHOUT_CLASSIFICATION	3.86654372279255E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999981287903	WITHOUT_CLASSIFICATION	1.871209695170869E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994762476482	WITHOUT_CLASSIFICATION	5.237523518087805E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994791700243	WITHOUT_CLASSIFICATION	5.208299756268442E-7	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999972963186	WITHOUT_CLASSIFICATION	2.703681306381981E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999487711801277	WITHOUT_CLASSIFICATION	5.122881987219752E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999954090961	WITHOUT_CLASSIFICATION	4.590903921234707E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999986583583613	WITHOUT_CLASSIFICATION	1.3416416386347748E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999907357432	WITHOUT_CLASSIFICATION	9.264256837848663E-9	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999999925856963	WITHOUT_CLASSIFICATION	7.414303704702923E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999982358261545	WITHOUT_CLASSIFICATION	1.7641738453976486E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999818100576544	WITHOUT_CLASSIFICATION	1.8189942345591264E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999961260956939	WITHOUT_CLASSIFICATION	3.873904306114947E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999967058903245	WITHOUT_CLASSIFICATION	3.294109675533371E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999983047801	WITHOUT_CLASSIFICATION	1.6952198885616328E-9	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999941935614806	WITHOUT_CLASSIFICATION	5.806438519404822E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999855073688978	WITHOUT_CLASSIFICATION	1.4492631102054335E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999460287317	WITHOUT_CLASSIFICATION	5.397126833904845E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999968366252838	WITHOUT_CLASSIFICATION	3.1633747161681E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998486750633	WITHOUT_CLASSIFICATION	1.513249365766579E-7	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999979920153982	WITHOUT_CLASSIFICATION	2.0079846017759144E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999843763771411	WITHOUT_CLASSIFICATION	1.5623622858901425E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999997853731156	WITHOUT_CLASSIFICATION	2.1462688428034616E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999996557280863	WITHOUT_CLASSIFICATION	3.442719137010051E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999813171181	WITHOUT_CLASSIFICATION	1.8682881929967106E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9726884050402524	WITHOUT_CLASSIFICATION	0.02731159495974761	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999915223161594	WITHOUT_CLASSIFICATION	8.477683840597283E-6	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999942203732509	WITHOUT_CLASSIFICATION	5.779626749074315E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999997597127	WITHOUT_CLASSIFICATION	2.402873745268976E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998138822458997	WITHOUT_CLASSIFICATION	1.8611775410021274E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999492026176	WITHOUT_CLASSIFICATION	5.079738238785852E-8	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984724151826	WITHOUT_CLASSIFICATION	1.5275848173868667E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999996214141	WITHOUT_CLASSIFICATION	3.785859143810239E-10	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998338852206	WITHOUT_CLASSIFICATION	1.6611477941685344E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988911546234	WITHOUT_CLASSIFICATION	1.1088453766443282E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630105	WITHOUT_CLASSIFICATION	6.273698948882907E-8	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630105	WITHOUT_CLASSIFICATION	6.273698948882907E-8	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999995832891	WITHOUT_CLASSIFICATION	4.167108890857376E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999991509113	WITHOUT_CLASSIFICATION	8.49088762087761E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999856515185475	WITHOUT_CLASSIFICATION	1.4348481452567731E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923104231756	WITHOUT_CLASSIFICATION	7.689576824502263E-6	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999674422027056	WITHOUT_CLASSIFICATION	3.255779729434378E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999937265917	WITHOUT_CLASSIFICATION	6.2734084014819136E-9	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999983610248696	WITHOUT_CLASSIFICATION	1.63897513040901E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999951669619067	WITHOUT_CLASSIFICATION	4.8330380932976535E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999971142727071	WITHOUT_CLASSIFICATION	2.885727292952129E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999654210412	WITHOUT_CLASSIFICATION	3.457895891243928E-8	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998973255118	WITHOUT_CLASSIFICATION	1.0267448827685242E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999494128491	WITHOUT_CLASSIFICATION	5.0587150845970295E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999532821796	WITHOUT_CLASSIFICATION	4.671782047126975E-8	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999925225674	WITHOUT_CLASSIFICATION	7.47743249570125E-9	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999414461932	WITHOUT_CLASSIFICATION	5.855380672393843E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999700544413	WITHOUT_CLASSIFICATION	2.9945558663171046E-8	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996734118053	WITHOUT_CLASSIFICATION	3.265881946396345E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998876398434	WITHOUT_CLASSIFICATION	1.1236015671208104E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999665417586	WITHOUT_CLASSIFICATION	3.345824140162674E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999678910835	WITHOUT_CLASSIFICATION	3.210891653585437E-8	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999999678285019	WITHOUT_CLASSIFICATION	3.217149809880133E-7	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.99999769082317	WITHOUT_CLASSIFICATION	2.3091768299001135E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729225812822	WITHOUT_CLASSIFICATION	2.7077418717712963E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999991722363344	WITHOUT_CLASSIFICATION	8.277636655172289E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999523633822	WITHOUT_CLASSIFICATION	4.763661777015228E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999929008937329	WITHOUT_CLASSIFICATION	7.099106267053935E-6	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999993361993018	WITHOUT_CLASSIFICATION	6.638006981579551E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.963232841382384	WITHOUT_CLASSIFICATION	0.03676715861761601	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729225812822	WITHOUT_CLASSIFICATION	2.7077418717712963E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729225812822	WITHOUT_CLASSIFICATION	2.7077418717712963E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9994673106952078	WITHOUT_CLASSIFICATION	5.326893047922139E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999981590241828	WITHOUT_CLASSIFICATION	1.8409758173046406E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999997778999	WITHOUT_CLASSIFICATION	2.2210013849696833E-10	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999954153465969	WITHOUT_CLASSIFICATION	4.584653403103364E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591195546	WITHOUT_CLASSIFICATION	1.040880445375205E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999996557280863	WITHOUT_CLASSIFICATION	3.442719137010051E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999564651781	WITHOUT_CLASSIFICATION	4.353482197122645E-8	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999894873545168	WITHOUT_CLASSIFICATION	1.0512645483292302E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999688255724	WITHOUT_CLASSIFICATION	3.117442761364161E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851989141603	WITHOUT_CLASSIFICATION	1.4801085839731022E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9990881829077366	WITHOUT_CLASSIFICATION	9.118170922634974E-4	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948309188588	WITHOUT_CLASSIFICATION	5.169081141245195E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991843957076	WITHOUT_CLASSIFICATION	8.156042923229928E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991843957076	WITHOUT_CLASSIFICATION	8.156042923229928E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999900687842	WITHOUT_CLASSIFICATION	9.931215807899208E-8	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999999900687842	WITHOUT_CLASSIFICATION	9.931215807899208E-8	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991097632143523	WITHOUT_CLASSIFICATION	8.90236785647713E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999989620716	WITHOUT_CLASSIFICATION	1.0379283490766063E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999995363637386	WITHOUT_CLASSIFICATION	4.6363626127677345E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99987716336882	WITHOUT_CLASSIFICATION	1.228366311799636E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999979530217428	WITHOUT_CLASSIFICATION	2.04697825727828E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999798935108583	WITHOUT_CLASSIFICATION	2.0106489141703894E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978474303441	WITHOUT_CLASSIFICATION	2.1525696557940134E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999468984546	WITHOUT_CLASSIFICATION	5.3101545378641084E-8	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999566206872	WITHOUT_CLASSIFICATION	4.3379312914938216E-8	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.999999991299265	WITHOUT_CLASSIFICATION	8.700735035070176E-9	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999993645884	WITHOUT_CLASSIFICATION	6.354115756726032E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999760644751426	WITHOUT_CLASSIFICATION	2.3935524857384717E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999468750208471	WITHOUT_CLASSIFICATION	5.3124979152960096E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997202691222	WITHOUT_CLASSIFICATION	2.7973087783847424E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.999997467741388	WITHOUT_CLASSIFICATION	2.5322586120538786E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999976620112578	WITHOUT_CLASSIFICATION	2.3379887421542506E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999976620112578	WITHOUT_CLASSIFICATION	2.3379887421542506E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997898415348	WITHOUT_CLASSIFICATION	2.1015846529613456E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998974199573	WITHOUT_CLASSIFICATION	1.0258004265618516E-7	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999804381	WITHOUT_CLASSIFICATION	1.956195740643781E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999969123757919	WITHOUT_CLASSIFICATION	3.0876242081002443E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998385758384	WITHOUT_CLASSIFICATION	1.6142416159817417E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986361508431	WITHOUT_CLASSIFICATION	1.3638491569166186E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999988599713197	WITHOUT_CLASSIFICATION	1.140028680331364E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986180085492989	WITHOUT_CLASSIFICATION	0.001381991450700986	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9936441286565327	WITHOUT_CLASSIFICATION	0.006355871343467195	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999965429337	WITHOUT_CLASSIFICATION	3.4570663685026977E-9	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999521851519	WITHOUT_CLASSIFICATION	4.781484812147639E-8	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9972113687025674	WITHOUT_CLASSIFICATION	0.002788631297432639	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219094292	WITHOUT_CLASSIFICATION	7.809057074008345E-8	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999366305893	WITHOUT_CLASSIFICATION	6.336941068573586E-8	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999772656233815	WITHOUT_CLASSIFICATION	2.27343766185573E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999974110913047	WITHOUT_CLASSIFICATION	2.5889086953257458E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999252745991	WITHOUT_CLASSIFICATION	7.472540090445066E-8	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999977823554475	WITHOUT_CLASSIFICATION	2.2176445525295214E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999976323690858	WITHOUT_CLASSIFICATION	2.367630914129707E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999997639726427	WITHOUT_CLASSIFICATION	2.3602735731990722E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999999996481	WITHOUT_CLASSIFICATION	3.5189589381534557E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999973403205	WITHOUT_CLASSIFICATION	2.6596795676721773E-9	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994489037443	WITHOUT_CLASSIFICATION	5.51096255760942E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999400416525	WITHOUT_CLASSIFICATION	5.995834749884334E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999997782015658	WITHOUT_CLASSIFICATION	2.2179843419454358E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999952778056969	WITHOUT_CLASSIFICATION	4.7221943031774336E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999211104406	WITHOUT_CLASSIFICATION	7.888955942891823E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999999865835278	WITHOUT_CLASSIFICATION	1.3416472070419837E-8	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999897755	WITHOUT_CLASSIFICATION	1.0224569206681862E-11	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899590200649	WITHOUT_CLASSIFICATION	1.0040979935061278E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999757145	WITHOUT_CLASSIFICATION	2.4285421485511713E-11	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999997553082212	WITHOUT_CLASSIFICATION	2.4469177876243574E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999990864402968	WITHOUT_CLASSIFICATION	9.135597032579002E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9994432083103753	WITHOUT_CLASSIFICATION	5.567916896247721E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999831787953	WITHOUT_CLASSIFICATION	1.682120470179552E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999997557952626	WITHOUT_CLASSIFICATION	2.4420473737605373E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998288469497	WITHOUT_CLASSIFICATION	1.7115305032606774E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999455880772381	WITHOUT_CLASSIFICATION	5.441192276183752E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999954833441	WITHOUT_CLASSIFICATION	4.516655926287612E-9	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9996207723611513	WITHOUT_CLASSIFICATION	3.792276388487362E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999822991641	WITHOUT_CLASSIFICATION	1.770083588248094E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999998449179171	WITHOUT_CLASSIFICATION	1.550820828883235E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9984217760080514	WITHOUT_CLASSIFICATION	0.0015782239919485287	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999919597472301	WITHOUT_CLASSIFICATION	8.040252769993897E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999976351034	WITHOUT_CLASSIFICATION	2.3648965509016807E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999966033253639	WITHOUT_CLASSIFICATION	3.396674636020859E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998517324707	WITHOUT_CLASSIFICATION	1.4826752932129127E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364374158	WITHOUT_CLASSIFICATION	1.0635625842680727E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999997986974727	WITHOUT_CLASSIFICATION	2.013025273045514E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999993832619574	WITHOUT_CLASSIFICATION	6.167380425438761E-7	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999767528146014	WITHOUT_CLASSIFICATION	2.3247185398619623E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998138183174181	WITHOUT_CLASSIFICATION	1.8618168258194406E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998462665514294	WITHOUT_CLASSIFICATION	1.5373344857057603E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999817988791653	WITHOUT_CLASSIFICATION	1.82011208347991E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999712112541211	WITHOUT_CLASSIFICATION	2.8788745878898026E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999992416395567	WITHOUT_CLASSIFICATION	7.583604433069181E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9931605812757218	WITHOUT_CLASSIFICATION	0.006839418724278076	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999994514060704	WITHOUT_CLASSIFICATION	5.485939296835678E-7	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999843287652	WITHOUT_CLASSIFICATION	1.5671234802292555E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998614769583677	WITHOUT_CLASSIFICATION	1.385230416323569E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999985409242	WITHOUT_CLASSIFICATION	1.459075798877897E-8	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998751114972	WITHOUT_CLASSIFICATION	1.2488850278112052E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999998498967	WITHOUT_CLASSIFICATION	1.5010315766243905E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999697251857	WITHOUT_CLASSIFICATION	3.02748143374163E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999990479115	WITHOUT_CLASSIFICATION	9.520885220440741E-10	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999998903221229	WITHOUT_CLASSIFICATION	1.0967787720412298E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999980452077	WITHOUT_CLASSIFICATION	1.954792297636878E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996926609186	WITHOUT_CLASSIFICATION	3.0733908139467077E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403231751	WITHOUT_CLASSIFICATION	8.359676824872475E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403231751	WITHOUT_CLASSIFICATION	8.359676824872475E-6	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997277676351	WITHOUT_CLASSIFICATION	2.7223236487363497E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999354201726	WITHOUT_CLASSIFICATION	6.457982744014448E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999906475615	WITHOUT_CLASSIFICATION	9.35243838831668E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999992597534442	WITHOUT_CLASSIFICATION	7.402465557378734E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999654919475	WITHOUT_CLASSIFICATION	3.4508052540869855E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999623628674094	WITHOUT_CLASSIFICATION	3.763713259064243E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999987329048	WITHOUT_CLASSIFICATION	1.2670951206240708E-9	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999989514325	WITHOUT_CLASSIFICATION	1.0485674064624685E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.99998238231507	WITHOUT_CLASSIFICATION	1.7617684930041182E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999481242979	WITHOUT_CLASSIFICATION	5.18757021135379E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992016861536	WITHOUT_CLASSIFICATION	7.983138463515823E-7	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996684542164	WITHOUT_CLASSIFICATION	3.315457837226199E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999997857146465	WITHOUT_CLASSIFICATION	2.142853533557534E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999992339231	WITHOUT_CLASSIFICATION	7.660769292520054E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999981999503034	WITHOUT_CLASSIFICATION	1.8000496966194244E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9961589901928034	WITHOUT_CLASSIFICATION	0.0038410098071966314	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999778310398374	WITHOUT_CLASSIFICATION	2.2168960162589073E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9871491120816346	WITHOUT_CLASSIFICATION	0.012850887918365318	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997577252800923	WITHOUT_CLASSIFICATION	2.422747199077511E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999998543588973	WITHOUT_CLASSIFICATION	1.456411027475507E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999998270473831	WITHOUT_CLASSIFICATION	1.729526168452652E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999990845318161	WITHOUT_CLASSIFICATION	9.154681839993021E-7	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999991672531686	WITHOUT_CLASSIFICATION	8.327468314480033E-7	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998940678684369	WITHOUT_CLASSIFICATION	1.0593213156313617E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999442146464	WITHOUT_CLASSIFICATION	5.578535362692019E-8	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999975800763944	WITHOUT_CLASSIFICATION	2.419923605591363E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999878924794662	WITHOUT_CLASSIFICATION	1.2107520533817873E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999728331321	WITHOUT_CLASSIFICATION	2.7166867902374872E-8	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999997741532991	WITHOUT_CLASSIFICATION	2.258467009038245E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999954201029297	WITHOUT_CLASSIFICATION	4.5798970702635904E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996853032554	WITHOUT_CLASSIFICATION	3.1469674462101504E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999767518294757	WITHOUT_CLASSIFICATION	2.3248170524386585E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997352222789	WITHOUT_CLASSIFICATION	2.6477772112786376E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999928878917407	WITHOUT_CLASSIFICATION	7.112108259268767E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999766937021466	WITHOUT_CLASSIFICATION	2.3306297853440968E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999766937021466	WITHOUT_CLASSIFICATION	2.3306297853440968E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991410998138	WITHOUT_CLASSIFICATION	8.589001860614277E-7	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999831602159175	WITHOUT_CLASSIFICATION	1.683978408248533E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999755906533	WITHOUT_CLASSIFICATION	2.4409346644055926E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999964148148703	WITHOUT_CLASSIFICATION	3.585185129516093E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999989031731	WITHOUT_CLASSIFICATION	1.0968268334076522E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999999945998926	WITHOUT_CLASSIFICATION	5.400107388098247E-8	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999997648171343	WITHOUT_CLASSIFICATION	2.351828658222253E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999917239695	WITHOUT_CLASSIFICATION	8.276030432225318E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999999506568688	WITHOUT_CLASSIFICATION	4.934313120263155E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999380888159	WITHOUT_CLASSIFICATION	6.19111840765098E-8	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999806899359102	WITHOUT_CLASSIFICATION	1.931006408983824E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999764021269004	WITHOUT_CLASSIFICATION	2.3597873099605568E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999978324815	WITHOUT_CLASSIFICATION	2.1675184714819627E-9	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999990116285646	WITHOUT_CLASSIFICATION	9.88371435392702E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999997967700465	WITHOUT_CLASSIFICATION	2.0322995349734939E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998931529185149	WITHOUT_CLASSIFICATION	1.0684708148510564E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998931529185149	WITHOUT_CLASSIFICATION	1.0684708148510564E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999991359877815	WITHOUT_CLASSIFICATION	8.640122186736512E-7	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999393802368	WITHOUT_CLASSIFICATION	6.061976328435622E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999963768617621	WITHOUT_CLASSIFICATION	3.623138237922923E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999903931202	WITHOUT_CLASSIFICATION	9.60687979282392E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999124712474781	WITHOUT_CLASSIFICATION	8.752875252195713E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999045120699	WITHOUT_CLASSIFICATION	9.548793019167268E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999656890025	WITHOUT_CLASSIFICATION	3.4310997442729237E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999656890025	WITHOUT_CLASSIFICATION	3.4310997442729237E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999996812690862	WITHOUT_CLASSIFICATION	3.1873091379253957E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999889267011	WITHOUT_CLASSIFICATION	1.1073298908243343E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999987031221967	WITHOUT_CLASSIFICATION	1.2968778032882757E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999986677793	WITHOUT_CLASSIFICATION	1.33222068920485E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999996560615149	WITHOUT_CLASSIFICATION	3.4393848511816523E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999841963355174	WITHOUT_CLASSIFICATION	1.580366448264782E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999667532136236	WITHOUT_CLASSIFICATION	3.324678637649827E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999828438454571	WITHOUT_CLASSIFICATION	1.7156154542895033E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717824165	WITHOUT_CLASSIFICATION	1.2282175835057565E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999578042667688	WITHOUT_CLASSIFICATION	4.2195733231053685E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9972873351566267	WITHOUT_CLASSIFICATION	0.0027126648433732077	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999916102835575	WITHOUT_CLASSIFICATION	8.389716442434557E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998043579886	WITHOUT_CLASSIFICATION	1.9564201141171824E-7	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999656823993	WITHOUT_CLASSIFICATION	3.431760055598954E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999600726066	WITHOUT_CLASSIFICATION	3.9927393396641085E-8	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999913641819	WITHOUT_CLASSIFICATION	8.635818069519864E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999977920421	WITHOUT_CLASSIFICATION	2.2079579501765585E-9	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999988535441631	WITHOUT_CLASSIFICATION	1.1464558368887307E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999990325986331	WITHOUT_CLASSIFICATION	9.674013668969611E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999233943332547	WITHOUT_CLASSIFICATION	7.660566674522215E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999695253909	WITHOUT_CLASSIFICATION	3.047460917003596E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998090019395	WITHOUT_CLASSIFICATION	1.9099806051865437E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999972793427967	WITHOUT_CLASSIFICATION	2.7206572032530828E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999986443131618	WITHOUT_CLASSIFICATION	1.3556868381803476E-6	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997931503104	WITHOUT_CLASSIFICATION	2.0684968957923436E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999785136204298	WITHOUT_CLASSIFICATION	2.1486379570189845E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999971513559631	WITHOUT_CLASSIFICATION	2.8486440368705387E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998686444883811	WITHOUT_CLASSIFICATION	1.313555116189067E-4	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999056711061338	WITHOUT_CLASSIFICATION	9.432889386612526E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999223881685	WITHOUT_CLASSIFICATION	7.761183142504136E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999077609769447	WITHOUT_CLASSIFICATION	9.223902305528813E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999999737731153	WITHOUT_CLASSIFICATION	2.6226884660617923E-8	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999990408687329	WITHOUT_CLASSIFICATION	9.591312670752302E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999985756261702	WITHOUT_CLASSIFICATION	1.4243738297819604E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999910144590778	WITHOUT_CLASSIFICATION	8.985540922194819E-6	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999687731926	WITHOUT_CLASSIFICATION	3.1226807415605775E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999998834652966	WITHOUT_CLASSIFICATION	1.1653470341222252E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999471131489	WITHOUT_CLASSIFICATION	5.288685118350026E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999954729325	WITHOUT_CLASSIFICATION	4.527067422212225E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999612648255	WITHOUT_CLASSIFICATION	3.873517441267563E-8	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999821438781	WITHOUT_CLASSIFICATION	1.7856121980880108E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999962894002045	WITHOUT_CLASSIFICATION	3.7105997954700278E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999867250854194	WITHOUT_CLASSIFICATION	1.327491458056103E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999741077026	WITHOUT_CLASSIFICATION	2.589229741940457E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999753725	WITHOUT_CLASSIFICATION	2.4627437799885077E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9996470530682775	WITHOUT_CLASSIFICATION	3.529469317225085E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999954729325	WITHOUT_CLASSIFICATION	4.527067422212225E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999612648255	WITHOUT_CLASSIFICATION	3.873517441267563E-8	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999970336868227	WITHOUT_CLASSIFICATION	2.9663131773242448E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999658643315158	WITHOUT_CLASSIFICATION	3.4135668484146474E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999985997328	WITHOUT_CLASSIFICATION	1.4002671946733887E-9	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9995429566857611	WITHOUT_CLASSIFICATION	4.5704331423879045E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999992668334955	WITHOUT_CLASSIFICATION	7.331665045653339E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998998182045	WITHOUT_CLASSIFICATION	1.0018179559033314E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9913160494216533	WITHOUT_CLASSIFICATION	0.008683950578346667	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999998464321064	WITHOUT_CLASSIFICATION	1.5356789375439827E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.99999212801518	WITHOUT_CLASSIFICATION	7.871984820084546E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.521593959557021	WITHOUT_CLASSIFICATION	0.47840604044297885	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999740522	WITHOUT_CLASSIFICATION	2.594774976832456E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.521593959557021	WITHOUT_CLASSIFICATION	0.47840604044297885	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999970894689297	WITHOUT_CLASSIFICATION	2.910531070266463E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999997382151756	WITHOUT_CLASSIFICATION	2.6178482443323436E-7	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999999363554372	WITHOUT_CLASSIFICATION	6.364456279365458E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999215842992	WITHOUT_CLASSIFICATION	7.841570077218398E-8	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999982491857329	WITHOUT_CLASSIFICATION	1.7508142671399983E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.999995400628021	WITHOUT_CLASSIFICATION	4.599371979085652E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.999995400628021	WITHOUT_CLASSIFICATION	4.599371979085652E-6	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999475775133	WITHOUT_CLASSIFICATION	5.242248678367505E-8	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999904643632	WITHOUT_CLASSIFICATION	9.535636812438085E-8	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999997059411537	WITHOUT_CLASSIFICATION	2.940588461936795E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897825614346	WITHOUT_CLASSIFICATION	1.0217438565385621E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999997044951351	WITHOUT_CLASSIFICATION	2.9550486495870496E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999985869464324	WITHOUT_CLASSIFICATION	1.4130535676036987E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992609482119	WITHOUT_CLASSIFICATION	7.390517880195147E-7	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999999966580789	WITHOUT_CLASSIFICATION	3.341921083660992E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330177244	WITHOUT_CLASSIFICATION	6.69822756737733E-8	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999998272868102	WITHOUT_CLASSIFICATION	1.7271318979551386E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998690684632	WITHOUT_CLASSIFICATION	1.3093153682530894E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999608712558227	WITHOUT_CLASSIFICATION	3.912874417725694E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999871429801881	WITHOUT_CLASSIFICATION	1.2857019811958186E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999290981054	WITHOUT_CLASSIFICATION	7.090189455685479E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999956238291429	WITHOUT_CLASSIFICATION	4.376170857190637E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999997693692294	WITHOUT_CLASSIFICATION	2.3063077055361643E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999991049574742	WITHOUT_CLASSIFICATION	8.950425257814901E-7	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999949400125108	WITHOUT_CLASSIFICATION	5.059987489155749E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999981149529	WITHOUT_CLASSIFICATION	1.8850470878948776E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999964470477697	WITHOUT_CLASSIFICATION	3.552952230307441E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999886162411418	WITHOUT_CLASSIFICATION	1.138375885826244E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999919053661299	WITHOUT_CLASSIFICATION	8.0946338699943E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999291111679858	WITHOUT_CLASSIFICATION	7.088883201426417E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999806670605583	WITHOUT_CLASSIFICATION	1.9332939441666546E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999880418029478	WITHOUT_CLASSIFICATION	1.1958197052301988E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999997512610648	WITHOUT_CLASSIFICATION	2.487389352550935E-7	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999946576888362	WITHOUT_CLASSIFICATION	5.342311163766224E-6	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998936943079533	WITHOUT_CLASSIFICATION	1.0630569204675717E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9978109581171732	WITHOUT_CLASSIFICATION	0.0021890418828268885	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9868115995956529	WITHOUT_CLASSIFICATION	0.013188400404347187	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9910319024847244	WITHOUT_CLASSIFICATION	0.008968097515275502	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998453029771662	WITHOUT_CLASSIFICATION	1.5469702283381985E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992609482119	WITHOUT_CLASSIFICATION	7.390517880195147E-7	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999994891156228	WITHOUT_CLASSIFICATION	5.108843772789961E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.999952924289982	WITHOUT_CLASSIFICATION	4.7075710018102424E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.986991120548308	WITHOUT_CLASSIFICATION	0.013008879451692101	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999997552298542	WITHOUT_CLASSIFICATION	2.447701457549902E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998528578204885	WITHOUT_CLASSIFICATION	1.4714217951155296E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999993057709576	WITHOUT_CLASSIFICATION	6.942290423145433E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897825614346	WITHOUT_CLASSIFICATION	1.0217438565385621E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897825614346	WITHOUT_CLASSIFICATION	1.0217438565385621E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999508043130604	WITHOUT_CLASSIFICATION	4.91956869396085E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999971691999	WITHOUT_CLASSIFICATION	2.830800099950831E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999993770952349	WITHOUT_CLASSIFICATION	6.22904765208092E-7	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999649228014185	WITHOUT_CLASSIFICATION	3.5077198581524756E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996052504573814	WITHOUT_CLASSIFICATION	3.9474954261862723E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998170514008	WITHOUT_CLASSIFICATION	1.8294859922915786E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999959706822	WITHOUT_CLASSIFICATION	4.029317801164261E-9	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998589344904	WITHOUT_CLASSIFICATION	1.4106550971521923E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999890361065416	WITHOUT_CLASSIFICATION	1.0963893458320403E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653372	WITHOUT_CLASSIFICATION	8.034662806604611E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999974520311086	WITHOUT_CLASSIFICATION	2.547968891531214E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999413283454803	WITHOUT_CLASSIFICATION	5.8671654519588973E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999998675771953	WITHOUT_CLASSIFICATION	1.324228046964735E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653372	WITHOUT_CLASSIFICATION	8.034662806604611E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998866774462	WITHOUT_CLASSIFICATION	1.1332255384448988E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9978855443900906	WITHOUT_CLASSIFICATION	0.0021144556099094536	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999977964583618	WITHOUT_CLASSIFICATION	2.203541638183729E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.5322278956821028	WITHOUT_CLASSIFICATION	0.4677721043178973	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999413283454803	WITHOUT_CLASSIFICATION	5.8671654519588973E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999275196233	WITHOUT_CLASSIFICATION	7.248037676781119E-8	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.99999998196914	WITHOUT_CLASSIFICATION	1.8030860014171307E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999233903679	WITHOUT_CLASSIFICATION	7.66096321355343E-8	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999999999958	WITHOUT_CLASSIFICATION	4.1903112701898714E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999821597887705	WITHOUT_CLASSIFICATION	1.784021122949046E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999899330495	WITHOUT_CLASSIFICATION	1.0066950464618085E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999993050798	WITHOUT_CLASSIFICATION	6.949202210207196E-10	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985307408	WITHOUT_CLASSIFICATION	2.0146925910599514E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998408178505251	WITHOUT_CLASSIFICATION	1.5918214947483744E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999991375807669	WITHOUT_CLASSIFICATION	8.624192331060331E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999989836466822	WITHOUT_CLASSIFICATION	1.0163533178339898E-6	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999945569832464	WITHOUT_CLASSIFICATION	5.443016753648522E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653372	WITHOUT_CLASSIFICATION	8.034662806604611E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999275196233	WITHOUT_CLASSIFICATION	7.248037676781119E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999233903679	WITHOUT_CLASSIFICATION	7.66096321355343E-8	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996756363263	WITHOUT_CLASSIFICATION	3.2436367366733587E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999999948836581	WITHOUT_CLASSIFICATION	5.1163418888764686E-8	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999976936691	WITHOUT_CLASSIFICATION	2.306330852397522E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999413283454803	WITHOUT_CLASSIFICATION	5.8671654519588973E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999987561449762	WITHOUT_CLASSIFICATION	1.24385502376817E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999292173897	WITHOUT_CLASSIFICATION	7.07826103161889E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330730506	WITHOUT_CLASSIFICATION	2.0966926949400272E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999989365632366	WITHOUT_CLASSIFICATION	1.0634367633892598E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985307408	WITHOUT_CLASSIFICATION	2.0146925910599514E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998866774462	WITHOUT_CLASSIFICATION	1.1332255384448988E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999995798545516	WITHOUT_CLASSIFICATION	4.2014544841992867E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993983391299	WITHOUT_CLASSIFICATION	6.016608701242869E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999998923278807	WITHOUT_CLASSIFICATION	1.0767211931222247E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999910591152755	WITHOUT_CLASSIFICATION	8.940884724492261E-6	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9639426899322211	WITHOUT_CLASSIFICATION	0.036057310067778854	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9956405390603357	WITHOUT_CLASSIFICATION	0.0043594609396644095	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999933284431668	WITHOUT_CLASSIFICATION	6.671556833225888E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999215842992	WITHOUT_CLASSIFICATION	7.841570077218398E-8	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585356015	WITHOUT_CLASSIFICATION	4.1464398443908396E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999071957505	WITHOUT_CLASSIFICATION	9.280424955912625E-8	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999997261160372	WITHOUT_CLASSIFICATION	2.7388396280214576E-6	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999651965183	WITHOUT_CLASSIFICATION	3.480348166916816E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999419869816	WITHOUT_CLASSIFICATION	5.801301850138785E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999991942339	WITHOUT_CLASSIFICATION	8.057660946407128E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999693717012	WITHOUT_CLASSIFICATION	3.062829888829162E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999991461881625	WITHOUT_CLASSIFICATION	8.538118375877433E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999989365632366	WITHOUT_CLASSIFICATION	1.0634367633892598E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999939137340396	WITHOUT_CLASSIFICATION	6.086265960479792E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999998470850753	WITHOUT_CLASSIFICATION	1.5291492464627683E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999964038937398	WITHOUT_CLASSIFICATION	3.596106260314649E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999998178521632	WITHOUT_CLASSIFICATION	1.8214783679974454E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999610223640503	WITHOUT_CLASSIFICATION	3.89776359496998E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999985834143014	WITHOUT_CLASSIFICATION	1.4165856986158884E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999981955962575	WITHOUT_CLASSIFICATION	1.8044037425590274E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996467765163212	WITHOUT_CLASSIFICATION	3.5322348367883364E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999757525405	WITHOUT_CLASSIFICATION	2.4247459520628847E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999980096292421	WITHOUT_CLASSIFICATION	1.9903707578024207E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.99999980630822	WITHOUT_CLASSIFICATION	1.936917799944053E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999919320093	WITHOUT_CLASSIFICATION	8.067990770160606E-9	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999064773048204	WITHOUT_CLASSIFICATION	9.3522695179564E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999994131223314	WITHOUT_CLASSIFICATION	5.868776686021046E-7	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998296663147	WITHOUT_CLASSIFICATION	1.7033368531414138E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999671869785	WITHOUT_CLASSIFICATION	3.2813021600854945E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999997577631254	WITHOUT_CLASSIFICATION	2.4223687455297966E-7	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998508125928	WITHOUT_CLASSIFICATION	1.4918740724168525E-7	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999992826645204	WITHOUT_CLASSIFICATION	7.173354794914017E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999978514648543	WITHOUT_CLASSIFICATION	2.148535145668899E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999998595890142	WITHOUT_CLASSIFICATION	1.404109858047556E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998967070768	WITHOUT_CLASSIFICATION	1.032929232304248E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999424283543	WITHOUT_CLASSIFICATION	5.757164578336928E-8	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999976127727	WITHOUT_CLASSIFICATION	2.387227223657375E-9	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999902063536	WITHOUT_CLASSIFICATION	9.79364648429935E-9	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7042869781486252	IMPLEMENTATION	0.29571302185137477	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9950002127051916	WITHOUT_CLASSIFICATION	0.004999787294808463	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999983636973806	WITHOUT_CLASSIFICATION	1.6363026193473542E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999995518012064	WITHOUT_CLASSIFICATION	4.4819879365987834E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5571658608413362	IMPLEMENTATION	0.4428341391586637	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999803580523	WITHOUT_CLASSIFICATION	1.964194775168536E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999731638362164	WITHOUT_CLASSIFICATION	2.6836163783616557E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999994111769025	WITHOUT_CLASSIFICATION	5.88823097592771E-7	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999174234144875	WITHOUT_CLASSIFICATION	8.257658551252187E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999982346215	WITHOUT_CLASSIFICATION	1.765378392327041E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999990235890588	WITHOUT_CLASSIFICATION	9.764109411772294E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999910874877	WITHOUT_CLASSIFICATION	8.91251241072381E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999979908609057	WITHOUT_CLASSIFICATION	2.0091390943981835E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999990235890588	WITHOUT_CLASSIFICATION	9.764109411772294E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999982346215	WITHOUT_CLASSIFICATION	1.765378392327041E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999910874877	WITHOUT_CLASSIFICATION	8.91251241072381E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999991776573406	WITHOUT_CLASSIFICATION	8.223426593551707E-7	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996983614883	WITHOUT_CLASSIFICATION	3.0163851172409574E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999792732419	WITHOUT_CLASSIFICATION	2.0726758014680586E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999830184257	WITHOUT_CLASSIFICATION	1.698157429266541E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999930635409	WITHOUT_CLASSIFICATION	6.936459048066062E-9	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8599432049460417	IMPLEMENTATION	0.1400567950539583	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999035251316327	WITHOUT_CLASSIFICATION	9.647486836729169E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996829158440944	WITHOUT_CLASSIFICATION	3.1708415590558963E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999993438797545	WITHOUT_CLASSIFICATION	6.561202454430212E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999999713770262	WITHOUT_CLASSIFICATION	2.8622973804071533E-7	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999997208331302	WITHOUT_CLASSIFICATION	2.7916686977321593E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999818103320297	WITHOUT_CLASSIFICATION	1.818966797022375E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999919299321105	WITHOUT_CLASSIFICATION	8.070067889497986E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999993431256465	WITHOUT_CLASSIFICATION	6.56874353401426E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9994837670039599	WITHOUT_CLASSIFICATION	5.162329960400161E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999887715226	WITHOUT_CLASSIFICATION	1.1228477404077113E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999991812679	WITHOUT_CLASSIFICATION	8.187321040083302E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999948013525	WITHOUT_CLASSIFICATION	5.198647479478128E-9	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999759451603	WITHOUT_CLASSIFICATION	2.4054839655953826E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998671197591	WITHOUT_CLASSIFICATION	1.3288024089489249E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9795285984926185	WITHOUT_CLASSIFICATION	0.020471401507381533	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999926800306	WITHOUT_CLASSIFICATION	7.3199693539701895E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999993881337249	WITHOUT_CLASSIFICATION	6.118662750950371E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.99999981800493	WITHOUT_CLASSIFICATION	1.8199507001237655E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999226199977	WITHOUT_CLASSIFICATION	7.738000231623826E-8	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999226199977	WITHOUT_CLASSIFICATION	7.738000231623826E-8	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999977378564	WITHOUT_CLASSIFICATION	2.2621436588071745E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999977378564	WITHOUT_CLASSIFICATION	2.2621436588071745E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9947676252490208	WITHOUT_CLASSIFICATION	0.005232374750979086	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999991812679	WITHOUT_CLASSIFICATION	8.187321040083302E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999991604946584	WITHOUT_CLASSIFICATION	8.395053414524986E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999853843466068	WITHOUT_CLASSIFICATION	1.4615653393200354E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984977462077	WITHOUT_CLASSIFICATION	1.5022537921920881E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984977462077	WITHOUT_CLASSIFICATION	1.5022537921920881E-6	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999962767813462	WITHOUT_CLASSIFICATION	3.72321865376321E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999970887103106	WITHOUT_CLASSIFICATION	2.911289689429287E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999985776259	WITHOUT_CLASSIFICATION	1.4223741017247406E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999844765660442	WITHOUT_CLASSIFICATION	1.552343395577131E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999428250514015	WITHOUT_CLASSIFICATION	5.7174948598502745E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999988475966127	WITHOUT_CLASSIFICATION	1.1524033872899515E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999999014033048	WITHOUT_CLASSIFICATION	9.859669519258678E-7	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999956171662949	WITHOUT_CLASSIFICATION	4.382833705058686E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.99997451051644	WITHOUT_CLASSIFICATION	2.5489483559989084E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999937249742543	WITHOUT_CLASSIFICATION	6.275025745697295E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999989947579018	WITHOUT_CLASSIFICATION	1.0052420982559932E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999505287685054	WITHOUT_CLASSIFICATION	4.947123149451471E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999753571328	WITHOUT_CLASSIFICATION	2.4642867239944196E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999997234173125	WITHOUT_CLASSIFICATION	2.765826875648273E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996414199253812	WITHOUT_CLASSIFICATION	3.5858007461875947E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999995827235856	WITHOUT_CLASSIFICATION	4.1727641439962735E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570076148	WITHOUT_CLASSIFICATION	5.429923852916812E-7	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999835987996507	WITHOUT_CLASSIFICATION	1.6401200349200457E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999241957468611	WITHOUT_CLASSIFICATION	7.580425313887014E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999990663915606	WITHOUT_CLASSIFICATION	9.336084395303125E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998214201915523	WITHOUT_CLASSIFICATION	1.7857980844763246E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999908493218	WITHOUT_CLASSIFICATION	9.150678182517708E-9	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999983762206255	WITHOUT_CLASSIFICATION	1.6237793745125343E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998016641423	WITHOUT_CLASSIFICATION	1.9833585768640161E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923104231756	WITHOUT_CLASSIFICATION	7.689576824502263E-6	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998263532942	WITHOUT_CLASSIFICATION	1.736467057650973E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999919320093	WITHOUT_CLASSIFICATION	8.067990770160606E-9	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999978243331024	WITHOUT_CLASSIFICATION	2.175666897638656E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996231582657	WITHOUT_CLASSIFICATION	3.768417343426942E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993603035912	WITHOUT_CLASSIFICATION	6.396964087438294E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810268463186	WITHOUT_CLASSIFICATION	1.8973153681391105E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984782323424	WITHOUT_CLASSIFICATION	1.5217676575258862E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984782323424	WITHOUT_CLASSIFICATION	1.5217676575258862E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998616420395	WITHOUT_CLASSIFICATION	1.383579606364459E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999997272653863	WITHOUT_CLASSIFICATION	2.727346136755748E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999311770386	WITHOUT_CLASSIFICATION	6.882296142430776E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999311770386	WITHOUT_CLASSIFICATION	6.882296142430776E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999786734130384	WITHOUT_CLASSIFICATION	2.1326586961668416E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999146251143767	WITHOUT_CLASSIFICATION	8.537488562323273E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999986816548418	WITHOUT_CLASSIFICATION	1.3183451580971014E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591195546	WITHOUT_CLASSIFICATION	1.040880445375205E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999969329207077	WITHOUT_CLASSIFICATION	3.067079292403886E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999821157373	WITHOUT_CLASSIFICATION	1.7884262669724295E-8	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999662715926549	WITHOUT_CLASSIFICATION	3.3728407344932666E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999891637740088	WITHOUT_CLASSIFICATION	1.0836225991262409E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999811945536	WITHOUT_CLASSIFICATION	1.8805446365754632E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999811945536	WITHOUT_CLASSIFICATION	1.8805446365754632E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999904586214596	WITHOUT_CLASSIFICATION	9.5413785403107E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999691804803	WITHOUT_CLASSIFICATION	3.0819519648915206E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999691804803	WITHOUT_CLASSIFICATION	3.0819519648915206E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999891056007	WITHOUT_CLASSIFICATION	1.0894399257223587E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999571608	WITHOUT_CLASSIFICATION	4.2839307834377134E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9987830837650311	WITHOUT_CLASSIFICATION	0.001216916234968882	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998375133327	WITHOUT_CLASSIFICATION	1.6248666735000892E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998754259255	WITHOUT_CLASSIFICATION	1.2457407449711802E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999978737414	WITHOUT_CLASSIFICATION	2.1262586028093527E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9993445264908796	WITHOUT_CLASSIFICATION	6.554735091204019E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999377069477281	WITHOUT_CLASSIFICATION	6.229305227196542E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999997904659175	WITHOUT_CLASSIFICATION	2.0953408249799723E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996672360173832	WITHOUT_CLASSIFICATION	3.327639826169121E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999999780377406	WITHOUT_CLASSIFICATION	2.1962259404337242E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998557770838945	WITHOUT_CLASSIFICATION	1.4422291610560647E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963588770535	WITHOUT_CLASSIFICATION	3.6411229464204157E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963588770535	WITHOUT_CLASSIFICATION	3.6411229464204157E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963588770535	WITHOUT_CLASSIFICATION	3.6411229464204157E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963588770535	WITHOUT_CLASSIFICATION	3.6411229464204157E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999996739666839	WITHOUT_CLASSIFICATION	3.2603331611878554E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999059296515685	WITHOUT_CLASSIFICATION	9.407034843143633E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999785779340552	WITHOUT_CLASSIFICATION	2.1422065944846578E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999981872014485	WITHOUT_CLASSIFICATION	1.8127985514455033E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999978863550375	WITHOUT_CLASSIFICATION	2.1136449624651666E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999786101233509	WITHOUT_CLASSIFICATION	2.138987664917541E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999997804714968	WITHOUT_CLASSIFICATION	2.19528503159033E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999944402534172	WITHOUT_CLASSIFICATION	5.559746582827858E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999017437184362	WITHOUT_CLASSIFICATION	9.825628156380289E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999632362323	WITHOUT_CLASSIFICATION	3.676376761098065E-8	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.999995729827956	WITHOUT_CLASSIFICATION	4.270172043967285E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263695282	WITHOUT_CLASSIFICATION	6.317363047183765E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999995093488184	WITHOUT_CLASSIFICATION	4.906511816003411E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999997596880598	WITHOUT_CLASSIFICATION	2.403119401606296E-7	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999942324610209	WITHOUT_CLASSIFICATION	5.767538979136989E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263695282	WITHOUT_CLASSIFICATION	6.317363047183765E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999804502765516	WITHOUT_CLASSIFICATION	1.9549723448407895E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999971507384929	WITHOUT_CLASSIFICATION	2.8492615070750956E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994234105092	WITHOUT_CLASSIFICATION	5.765894907582246E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999597811287	WITHOUT_CLASSIFICATION	4.021887132364628E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998981016053	WITHOUT_CLASSIFICATION	1.0189839476712099E-7	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997373817897	WITHOUT_CLASSIFICATION	2.6261821027680954E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999628722822	WITHOUT_CLASSIFICATION	3.7127717733777726E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997397636487235	WITHOUT_CLASSIFICATION	2.602363512764701E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999709651479	WITHOUT_CLASSIFICATION	2.903485210511666E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999224506725	WITHOUT_CLASSIFICATION	7.754932754617339E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999931305704	WITHOUT_CLASSIFICATION	6.869429569051237E-9	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999910526009	WITHOUT_CLASSIFICATION	8.947399096575862E-8	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999977405987137	WITHOUT_CLASSIFICATION	2.2594012864033814E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997258061783084	WITHOUT_CLASSIFICATION	2.7419382169156537E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999988784475719	WITHOUT_CLASSIFICATION	1.121552428098E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999606232463	WITHOUT_CLASSIFICATION	3.93767537962971E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982461117	WITHOUT_CLASSIFICATION	1.7538881947922006E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998486355357	WITHOUT_CLASSIFICATION	1.513644643244102E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999988078585607	WITHOUT_CLASSIFICATION	1.1921414393059297E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998486355357	WITHOUT_CLASSIFICATION	1.513644643244102E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999297573726	WITHOUT_CLASSIFICATION	7.024262746386985E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999999958666	WITHOUT_CLASSIFICATION	4.133408212382741E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999986155463297	WITHOUT_CLASSIFICATION	1.384453670289824E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999930094158	WITHOUT_CLASSIFICATION	6.990584195052034E-9	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982461117	WITHOUT_CLASSIFICATION	1.7538881947922006E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999988078585607	WITHOUT_CLASSIFICATION	1.1921414393059297E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999297573726	WITHOUT_CLASSIFICATION	7.024262746386985E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999950319394815	WITHOUT_CLASSIFICATION	4.9680605184436835E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999897822639394	WITHOUT_CLASSIFICATION	1.0217736060626718E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.999929305233426	WITHOUT_CLASSIFICATION	7.069476657388512E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999212902964549	WITHOUT_CLASSIFICATION	7.870970354499027E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999204564496852	WITHOUT_CLASSIFICATION	7.95435503148061E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999989332601317	WITHOUT_CLASSIFICATION	1.066739868368958E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570076148	WITHOUT_CLASSIFICATION	5.429923852916812E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999999958666	WITHOUT_CLASSIFICATION	4.133408212382741E-11	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999999533965	WITHOUT_CLASSIFICATION	4.6603481478925715E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999989390411868	WITHOUT_CLASSIFICATION	1.0609588132536792E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999785670234	WITHOUT_CLASSIFICATION	2.14329766267102E-8	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570076148	WITHOUT_CLASSIFICATION	5.429923852916812E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999925447035996	WITHOUT_CLASSIFICATION	7.455296400491627E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570076148	WITHOUT_CLASSIFICATION	5.429923852916812E-7	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999508591014	WITHOUT_CLASSIFICATION	4.9140898568222825E-8	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997314668535	WITHOUT_CLASSIFICATION	2.685331464949185E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999846094560266	WITHOUT_CLASSIFICATION	1.539054397332257E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997470262768012	WITHOUT_CLASSIFICATION	2.529737231988151E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989153041884	WITHOUT_CLASSIFICATION	1.0846958115723206E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999996416888667	WITHOUT_CLASSIFICATION	3.583111332342675E-7	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999844499348555	WITHOUT_CLASSIFICATION	1.5550065144457156E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970368667006	WITHOUT_CLASSIFICATION	2.9631332994523133E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999973826144214	WITHOUT_CLASSIFICATION	2.6173855785697395E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999996694599154	WITHOUT_CLASSIFICATION	3.3054008459378183E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403231751	WITHOUT_CLASSIFICATION	8.359676824872475E-6	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999595933514	WITHOUT_CLASSIFICATION	4.0406648627072804E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9987830837650311	WITHOUT_CLASSIFICATION	0.001216916234968882	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999997546709182	WITHOUT_CLASSIFICATION	2.45329081860011E-7	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999989127787144	WITHOUT_CLASSIFICATION	1.0872212856092E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999999888837729	WITHOUT_CLASSIFICATION	1.1116227117872257E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989067154637	WITHOUT_CLASSIFICATION	1.093284536285151E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999203674	WITHOUT_CLASSIFICATION	7.963263212076221E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992815029632	WITHOUT_CLASSIFICATION	7.184970367236446E-7	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999955707204209	WITHOUT_CLASSIFICATION	4.429279579071233E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999836368017778	WITHOUT_CLASSIFICATION	1.6363198222165643E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995407826304	WITHOUT_CLASSIFICATION	4.5921736957267754E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999154681724	WITHOUT_CLASSIFICATION	8.453182766523796E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9988231611059687	WITHOUT_CLASSIFICATION	0.0011768388940313081	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999992545499139	WITHOUT_CLASSIFICATION	7.454500861794786E-7	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999991156269583	WITHOUT_CLASSIFICATION	8.843730415872413E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999997008886808	WITHOUT_CLASSIFICATION	2.9911131916378595E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999966640508755	WITHOUT_CLASSIFICATION	3.3359491245637034E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909675762865	WITHOUT_CLASSIFICATION	9.032423713562027E-6	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997931490098	WITHOUT_CLASSIFICATION	2.0685099015815558E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995598671328438	WITHOUT_CLASSIFICATION	4.401328671562432E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999998439599973	WITHOUT_CLASSIFICATION	1.5604000269366327E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999992256393632	WITHOUT_CLASSIFICATION	7.743606367942564E-7	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999171426923029	WITHOUT_CLASSIFICATION	8.285730769702194E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9998781351948368	WITHOUT_CLASSIFICATION	1.2186480516313076E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999900405629	WITHOUT_CLASSIFICATION	9.959437097372878E-8	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999998834590337	WITHOUT_CLASSIFICATION	1.1654096628721644E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999882649531358	WITHOUT_CLASSIFICATION	1.1735046864378008E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999953796077264	WITHOUT_CLASSIFICATION	4.620392273507316E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999922962237	WITHOUT_CLASSIFICATION	7.70377627420201E-9	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9956082799983761	WITHOUT_CLASSIFICATION	0.004391720001623965	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999738210597108	WITHOUT_CLASSIFICATION	2.6178940289287634E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999971978525437	WITHOUT_CLASSIFICATION	2.802147456317099E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999813123308494	WITHOUT_CLASSIFICATION	1.86876691506195E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999813123308494	WITHOUT_CLASSIFICATION	1.86876691506195E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999558042096082	WITHOUT_CLASSIFICATION	4.419579039191818E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970368667006	WITHOUT_CLASSIFICATION	2.9631332994523133E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999902212416198	WITHOUT_CLASSIFICATION	9.778758380023457E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999779982711	WITHOUT_CLASSIFICATION	2.200172886016435E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999825648201	WITHOUT_CLASSIFICATION	1.743517983417721E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999961685733175	WITHOUT_CLASSIFICATION	3.8314266824991395E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999913935058607	WITHOUT_CLASSIFICATION	8.606494139217656E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999955322330075	WITHOUT_CLASSIFICATION	4.467766992497852E-6	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999990535994	WITHOUT_CLASSIFICATION	9.464006400900112E-10	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999999999459987	WITHOUT_CLASSIFICATION	5.400130638436108E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999758979702658	WITHOUT_CLASSIFICATION	2.4102029734211364E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999999397105572	WITHOUT_CLASSIFICATION	6.02894427632288E-8	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9996163686633203	WITHOUT_CLASSIFICATION	3.8363133667973823E-4	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999707431949	WITHOUT_CLASSIFICATION	2.9256805064515584E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999683084059	WITHOUT_CLASSIFICATION	3.169159405067694E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999967700869	WITHOUT_CLASSIFICATION	3.2299130611344704E-9	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999868379167	WITHOUT_CLASSIFICATION	1.3162083335097263E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999998826944	WITHOUT_CLASSIFICATION	1.173055985497369E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999999163965	WITHOUT_CLASSIFICATION	8.360347127122364E-11	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998700842605662	WITHOUT_CLASSIFICATION	1.299157394338931E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999985141459691	WITHOUT_CLASSIFICATION	1.4858540309254038E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9961799446290073	WITHOUT_CLASSIFICATION	0.0038200553709927714	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999865043807338	WITHOUT_CLASSIFICATION	1.3495619266291587E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998192794446	WITHOUT_CLASSIFICATION	1.807205553445733E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9956082799983761	WITHOUT_CLASSIFICATION	0.004391720001623965	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999815990713	WITHOUT_CLASSIFICATION	1.840092871529055E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999903687387238	WITHOUT_CLASSIFICATION	9.63126127617291E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999992898705	WITHOUT_CLASSIFICATION	7.101295981288669E-10	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999996230879694	WITHOUT_CLASSIFICATION	3.7691203050766794E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998824271590451	WITHOUT_CLASSIFICATION	1.1757284095497046E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999207449068133	WITHOUT_CLASSIFICATION	7.92550931866807E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999996240051929	WITHOUT_CLASSIFICATION	3.7599480712196066E-7	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999562484947	WITHOUT_CLASSIFICATION	4.375150535554499E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998354659206	WITHOUT_CLASSIFICATION	1.6453407930109017E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998269567787	WITHOUT_CLASSIFICATION	1.7304322120363472E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999701806723	WITHOUT_CLASSIFICATION	2.981932764953803E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999820542527	WITHOUT_CLASSIFICATION	1.7945747322474647E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999448422585	WITHOUT_CLASSIFICATION	5.5157741371602384E-8	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999973093835353	WITHOUT_CLASSIFICATION	2.690616464715221E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999949966435937	WITHOUT_CLASSIFICATION	5.003356406368397E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999949966435937	WITHOUT_CLASSIFICATION	5.003356406368397E-6	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999996550353631	WITHOUT_CLASSIFICATION	3.449646368908131E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999923776134593	WITHOUT_CLASSIFICATION	7.622386540652951E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999985865845	WITHOUT_CLASSIFICATION	1.4134154883389155E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999985865845	WITHOUT_CLASSIFICATION	1.4134154883389155E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999896401609	WITHOUT_CLASSIFICATION	1.0359839204623001E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999971719282936	WITHOUT_CLASSIFICATION	2.8280717064497704E-6	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.949183148746892	WITHOUT_CLASSIFICATION	0.050816851253108024	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999973768405	WITHOUT_CLASSIFICATION	2.6231594989473084E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999928506587	WITHOUT_CLASSIFICATION	7.1493414082949445E-9	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999580822303	WITHOUT_CLASSIFICATION	4.191776968672333E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998919709	WITHOUT_CLASSIFICATION	1.0802922536158034E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998919709	WITHOUT_CLASSIFICATION	1.0802922536158034E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999132869742	WITHOUT_CLASSIFICATION	8.67130257738306E-8	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999994057523697	WITHOUT_CLASSIFICATION	5.942476302940801E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999999052623105	WITHOUT_CLASSIFICATION	9.473768954623855E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999762739644	WITHOUT_CLASSIFICATION	2.3726035614464816E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999762739644	WITHOUT_CLASSIFICATION	2.3726035614464816E-8	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999470269453	WITHOUT_CLASSIFICATION	5.297305477283317E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999944271940143	WITHOUT_CLASSIFICATION	5.572805985647883E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999906645696	WITHOUT_CLASSIFICATION	9.335430479616029E-9	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999377399083	WITHOUT_CLASSIFICATION	6.226009177237745E-8	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999993061422705	WITHOUT_CLASSIFICATION	6.938577296220926E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999999987492768	WITHOUT_CLASSIFICATION	1.2507231981355311E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999998353576997	WITHOUT_CLASSIFICATION	1.6464230043310198E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999989019247231	WITHOUT_CLASSIFICATION	1.0980752769517326E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999922575308	WITHOUT_CLASSIFICATION	7.742469284283654E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999798337954	WITHOUT_CLASSIFICATION	2.0166204564651372E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999980945886473	WITHOUT_CLASSIFICATION	1.9054113525968365E-6	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9981054635032027	WITHOUT_CLASSIFICATION	0.001894536496797292	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9911918484183634	WITHOUT_CLASSIFICATION	0.008808151581636618	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999737696851039	WITHOUT_CLASSIFICATION	2.623031489605608E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999953653357048	WITHOUT_CLASSIFICATION	4.634664295181277E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999996908281245	WITHOUT_CLASSIFICATION	3.091718756247321E-7	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999975406812814	WITHOUT_CLASSIFICATION	2.4593187186068096E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999995981466024	WITHOUT_CLASSIFICATION	4.0185339762983856E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999763724899328	WITHOUT_CLASSIFICATION	2.362751006714878E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999958816397747	WITHOUT_CLASSIFICATION	4.118360225259454E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999998293192728	WITHOUT_CLASSIFICATION	1.7068072719501079E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999989969890365	WITHOUT_CLASSIFICATION	1.0030109635600618E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999849019800552	WITHOUT_CLASSIFICATION	1.5098019944789491E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994371172455	WITHOUT_CLASSIFICATION	5.628827545615875E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.999999563057534	WITHOUT_CLASSIFICATION	4.369424659932784E-7	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999277057132	WITHOUT_CLASSIFICATION	7.229428674737922E-8	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999467555563	WITHOUT_CLASSIFICATION	5.3244443879867725E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999937812192814	WITHOUT_CLASSIFICATION	6.218780718627026E-6	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999948653819	WITHOUT_CLASSIFICATION	5.134618042398792E-9	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999968366252838	WITHOUT_CLASSIFICATION	3.1633747161681E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9726884050402524	WITHOUT_CLASSIFICATION	0.02731159495974761	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999796743637	WITHOUT_CLASSIFICATION	2.0325636188979158E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998371245898	WITHOUT_CLASSIFICATION	1.6287541022550589E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999937434201244	WITHOUT_CLASSIFICATION	6.256579875595285E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999974112888143	WITHOUT_CLASSIFICATION	2.5887111857012367E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999702750892174	WITHOUT_CLASSIFICATION	2.972491078247506E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.99998923667766	WITHOUT_CLASSIFICATION	1.0763322339983967E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999996517226	WITHOUT_CLASSIFICATION	3.4827742700503376E-10	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999158162447694	WITHOUT_CLASSIFICATION	8.418375523048296E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999960304193	WITHOUT_CLASSIFICATION	3.969580754314448E-9	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995954547555	WITHOUT_CLASSIFICATION	4.0454524457844585E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997007427766	WITHOUT_CLASSIFICATION	2.992572234410177E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999990138560749	WITHOUT_CLASSIFICATION	9.861439250849019E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999632992101903	WITHOUT_CLASSIFICATION	3.670078980969744E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999981544836224	WITHOUT_CLASSIFICATION	1.8455163776587006E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999250437659	WITHOUT_CLASSIFICATION	7.495623419285417E-8	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999995963760265	WITHOUT_CLASSIFICATION	4.0362397339785357E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999999387298488	WITHOUT_CLASSIFICATION	6.127015111405304E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999938832708983	WITHOUT_CLASSIFICATION	6.116729101670711E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998320909546	WITHOUT_CLASSIFICATION	1.6790904558930695E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999961031466164	WITHOUT_CLASSIFICATION	3.8968533836295E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998938370863221	WITHOUT_CLASSIFICATION	1.0616291367782928E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999974021552505	WITHOUT_CLASSIFICATION	2.5978447494964184E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999979900768	WITHOUT_CLASSIFICATION	2.009923264358694E-9	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999997140293294	WITHOUT_CLASSIFICATION	2.85970670556064E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999971139382957	WITHOUT_CLASSIFICATION	2.8860617042976637E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999679842041	WITHOUT_CLASSIFICATION	3.2015795900883173E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999926437922	WITHOUT_CLASSIFICATION	7.356207797504826E-8	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999448146765118	WITHOUT_CLASSIFICATION	5.5185323488207176E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999909787762	WITHOUT_CLASSIFICATION	9.021223784996645E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999987500457469	WITHOUT_CLASSIFICATION	1.2499542531085552E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999987500457469	WITHOUT_CLASSIFICATION	1.2499542531085552E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999796774	WITHOUT_CLASSIFICATION	2.032263748526098E-11	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999528053680059	WITHOUT_CLASSIFICATION	4.719463199407877E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999719673596	WITHOUT_CLASSIFICATION	2.803264039671893E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999997262229	WITHOUT_CLASSIFICATION	2.73777010211619E-10	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999852678254	WITHOUT_CLASSIFICATION	1.4732174544380392E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999961515339172	WITHOUT_CLASSIFICATION	3.848466082807863E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999997022013	WITHOUT_CLASSIFICATION	2.977986710632129E-10	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999996692945	WITHOUT_CLASSIFICATION	3.307055135490422E-10	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999973531509	WITHOUT_CLASSIFICATION	2.646849049688201E-9	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999827039866	WITHOUT_CLASSIFICATION	1.7296013366824998E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999996575778826	WITHOUT_CLASSIFICATION	3.4242211752442554E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999988602047554	WITHOUT_CLASSIFICATION	1.1397952446716412E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999945798932	WITHOUT_CLASSIFICATION	5.420106740190876E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999950762674993	WITHOUT_CLASSIFICATION	4.923732500678961E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363299218	WITHOUT_CLASSIFICATION	1.5636700782070238E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363299218	WITHOUT_CLASSIFICATION	1.5636700782070238E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999874436	WITHOUT_CLASSIFICATION	1.2556251678742078E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999959670790287	WITHOUT_CLASSIFICATION	4.032920971240483E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998716211576	WITHOUT_CLASSIFICATION	1.2837884248037382E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999924530198	WITHOUT_CLASSIFICATION	7.546980257451545E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889711273	WITHOUT_CLASSIFICATION	5.11028872716868E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994092020444	WITHOUT_CLASSIFICATION	5.907979556631414E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999969792784446	WITHOUT_CLASSIFICATION	3.0207215554513094E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999239432766412	WITHOUT_CLASSIFICATION	7.605672335883345E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998889888189	WITHOUT_CLASSIFICATION	1.1101118115433062E-7	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999730373788271	WITHOUT_CLASSIFICATION	2.696262117296293E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999958514936932	WITHOUT_CLASSIFICATION	4.14850630671802E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999978521628	WITHOUT_CLASSIFICATION	2.147837194040629E-9	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999998489818	WITHOUT_CLASSIFICATION	1.5101824509514785E-10	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999930500411	WITHOUT_CLASSIFICATION	6.949958934838349E-9	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999424312174	WITHOUT_CLASSIFICATION	5.7568782572764295E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997835894586	WITHOUT_CLASSIFICATION	2.1641054129092752E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968744997422	WITHOUT_CLASSIFICATION	3.1255002577718867E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999939470523	WITHOUT_CLASSIFICATION	6.052947695653713E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999982288558	WITHOUT_CLASSIFICATION	1.7711441883648004E-9	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999672475967	WITHOUT_CLASSIFICATION	3.275240333973193E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999839676681	WITHOUT_CLASSIFICATION	1.6032331890504823E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999991998102	WITHOUT_CLASSIFICATION	8.001897579284853E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999902170534	WITHOUT_CLASSIFICATION	9.782946630951764E-9	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999995604474935	WITHOUT_CLASSIFICATION	4.395525065884404E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999941935614806	WITHOUT_CLASSIFICATION	5.806438519404822E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999969195779409	WITHOUT_CLASSIFICATION	3.0804220591478672E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999976464833564	WITHOUT_CLASSIFICATION	2.3535166435454396E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999351410727926	WITHOUT_CLASSIFICATION	6.485892720736827E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999999100657062	WITHOUT_CLASSIFICATION	8.993429379501161E-7	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999968534083	WITHOUT_CLASSIFICATION	3.1465917108620264E-9	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999995795126894	WITHOUT_CLASSIFICATION	4.2048731074912675E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999757226609	WITHOUT_CLASSIFICATION	2.427733911516157E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999982803657	WITHOUT_CLASSIFICATION	1.719634439037367E-9	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992189665124	WITHOUT_CLASSIFICATION	7.81033487481255E-7	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9954330070859557	WITHOUT_CLASSIFICATION	0.004566992914044253	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999525636039	WITHOUT_CLASSIFICATION	4.743639618628313E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999752981102	WITHOUT_CLASSIFICATION	2.4701889764965463E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999846812074	WITHOUT_CLASSIFICATION	1.5318792504520663E-8	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999999409721075	WITHOUT_CLASSIFICATION	5.902789249082185E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999900334103	WITHOUT_CLASSIFICATION	9.966589579328564E-9	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998615890485475	WITHOUT_CLASSIFICATION	1.3841095145258577E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998615890485475	WITHOUT_CLASSIFICATION	1.3841095145258577E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999985687853	WITHOUT_CLASSIFICATION	1.431214737491503E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999266656141	WITHOUT_CLASSIFICATION	7.333438586987852E-8	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9892903000417783	WITHOUT_CLASSIFICATION	0.010709699958221651	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.99999944283998	WITHOUT_CLASSIFICATION	5.571600199381037E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999878810971584	WITHOUT_CLASSIFICATION	1.2118902841516429E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999823597988	WITHOUT_CLASSIFICATION	1.7640201248400583E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999939710005552	WITHOUT_CLASSIFICATION	6.028999444828056E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999602157356	WITHOUT_CLASSIFICATION	3.978426445447926E-8	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999989898377583	WITHOUT_CLASSIFICATION	1.0101622416872862E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999468954617	WITHOUT_CLASSIFICATION	5.310453833518833E-8	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999697472636	WITHOUT_CLASSIFICATION	3.02527364392051E-8	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729225812822	WITHOUT_CLASSIFICATION	2.7077418717712963E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999443534281	WITHOUT_CLASSIFICATION	5.564657186028861E-8	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999967488296	WITHOUT_CLASSIFICATION	3.2511703153240082E-9	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999546435961774	WITHOUT_CLASSIFICATION	4.53564038226548E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999960756500091	WITHOUT_CLASSIFICATION	3.92434999078994E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999809529636	WITHOUT_CLASSIFICATION	1.9047036342145883E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999737782306	WITHOUT_CLASSIFICATION	2.6221769422753106E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999845928960922	WITHOUT_CLASSIFICATION	1.54071039078684E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999693395615	WITHOUT_CLASSIFICATION	3.066043849952047E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999592126648	WITHOUT_CLASSIFICATION	4.078733506121732E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999996325749948	WITHOUT_CLASSIFICATION	3.6742500513686696E-7	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999939961733488	WITHOUT_CLASSIFICATION	6.0038266511625255E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999989775795591	WITHOUT_CLASSIFICATION	1.0224204408008449E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999996251321895	WITHOUT_CLASSIFICATION	3.748678105208024E-7	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998326099694954	WITHOUT_CLASSIFICATION	1.6739003050468893E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999967758506482	WITHOUT_CLASSIFICATION	3.2241493519095725E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999800532346	WITHOUT_CLASSIFICATION	1.9946765306607578E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999994080479055	WITHOUT_CLASSIFICATION	5.919520944813075E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999174996641346	WITHOUT_CLASSIFICATION	8.25003358653799E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999957905723118	WITHOUT_CLASSIFICATION	4.209427688188239E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999981281135553	WITHOUT_CLASSIFICATION	1.8718864447116135E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999940546885	WITHOUT_CLASSIFICATION	5.945311520790422E-9	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999999369358	WITHOUT_CLASSIFICATION	6.306422376078272E-11	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996032872	WITHOUT_CLASSIFICATION	3.9671278046085887E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998073482550058	WITHOUT_CLASSIFICATION	1.926517449942899E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999992437117	WITHOUT_CLASSIFICATION	7.562881868538897E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999633284683	WITHOUT_CLASSIFICATION	3.667153178827023E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999914069923007	WITHOUT_CLASSIFICATION	8.593007699304919E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999996724194006	WITHOUT_CLASSIFICATION	3.2758059948133185E-7	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999709447570431	WITHOUT_CLASSIFICATION	2.905524295692884E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999706996201	WITHOUT_CLASSIFICATION	2.9300379868618152E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999378698133	WITHOUT_CLASSIFICATION	6.213018661627893E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999990068	WITHOUT_CLASSIFICATION	9.931608421426647E-13	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999931601977503	WITHOUT_CLASSIFICATION	6.839802249662502E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999998604418251	WITHOUT_CLASSIFICATION	1.3955817486932691E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997411937864	WITHOUT_CLASSIFICATION	2.588062135018858E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999945798932	WITHOUT_CLASSIFICATION	5.420106740190876E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999970747	WITHOUT_CLASSIFICATION	2.925299074367836E-12	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999675231	WITHOUT_CLASSIFICATION	3.247701350263581E-11	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999633388661293	WITHOUT_CLASSIFICATION	3.666113387063201E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9996875949684157	WITHOUT_CLASSIFICATION	3.1240503158426746E-4	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999891660547	WITHOUT_CLASSIFICATION	1.0833945297581869E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999991752317432	WITHOUT_CLASSIFICATION	8.247682567933286E-7	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9635790599115124	WITHOUT_CLASSIFICATION	0.036420940088487626	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999962913011566	WITHOUT_CLASSIFICATION	3.7086988433174344E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999993645884	WITHOUT_CLASSIFICATION	6.354115756726032E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998996534413764	WITHOUT_CLASSIFICATION	1.0034655862359277E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999961580353	WITHOUT_CLASSIFICATION	3.841964769847414E-9	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998906273072	WITHOUT_CLASSIFICATION	1.0937269287945155E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999994006084	WITHOUT_CLASSIFICATION	5.993915314609091E-10	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999920368233	WITHOUT_CLASSIFICATION	7.963176644209144E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997632831785	WITHOUT_CLASSIFICATION	2.36716821345622E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999879393426397	WITHOUT_CLASSIFICATION	1.2060657360232894E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998735388527	WITHOUT_CLASSIFICATION	1.2646114728600948E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998426149155	WITHOUT_CLASSIFICATION	1.5738508455974424E-7	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996406202493	WITHOUT_CLASSIFICATION	3.5937975070860195E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997632831785	WITHOUT_CLASSIFICATION	2.36716821345622E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999932133043942	WITHOUT_CLASSIFICATION	6.786695605764816E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999991518574	WITHOUT_CLASSIFICATION	8.481425046696769E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998129182194	WITHOUT_CLASSIFICATION	1.8708178059166085E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999804226857	WITHOUT_CLASSIFICATION	1.9577314422050777E-8	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999998488032158	WITHOUT_CLASSIFICATION	1.5119678420871706E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999892794623	WITHOUT_CLASSIFICATION	1.0720537639049849E-8	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999505526	WITHOUT_CLASSIFICATION	4.944742271192793E-11	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999875558302877	WITHOUT_CLASSIFICATION	1.2444169712298985E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999991625433	WITHOUT_CLASSIFICATION	8.374566859369319E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999856899991284	WITHOUT_CLASSIFICATION	1.43100008715832E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998877733701944	WITHOUT_CLASSIFICATION	1.1222662980549142E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999529717047004	WITHOUT_CLASSIFICATION	4.7028295299470455E-5	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999796945263	WITHOUT_CLASSIFICATION	2.030547369075774E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999599191160046	WITHOUT_CLASSIFICATION	4.008088399541747E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999988562095835	WITHOUT_CLASSIFICATION	1.1437904164218801E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998192794446	WITHOUT_CLASSIFICATION	1.807205553445733E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999702663199	WITHOUT_CLASSIFICATION	2.973368017400481E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998632113086	WITHOUT_CLASSIFICATION	1.367886913871867E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997341628847177	WITHOUT_CLASSIFICATION	2.6583711528220397E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999994199612781	WITHOUT_CLASSIFICATION	5.800387219046373E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9998949298272923	WITHOUT_CLASSIFICATION	1.0507017270765117E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999991524423418	WITHOUT_CLASSIFICATION	8.475576582051745E-7	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999312320257	WITHOUT_CLASSIFICATION	6.87679742714409E-8	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999958259406	WITHOUT_CLASSIFICATION	4.174059424063241E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999999964605	WITHOUT_CLASSIFICATION	3.5395061240144317E-11	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999973110032	WITHOUT_CLASSIFICATION	2.6889968066427898E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999796694061719	WITHOUT_CLASSIFICATION	2.0330593828120208E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999252745991	WITHOUT_CLASSIFICATION	7.472540090445066E-8	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9994102966574429	WITHOUT_CLASSIFICATION	5.897033425571937E-4	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9849802533263986	WITHOUT_CLASSIFICATION	0.015019746673601482	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998873200009	WITHOUT_CLASSIFICATION	1.1267999908618287E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999753451379264	WITHOUT_CLASSIFICATION	2.4654862073510848E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999989108569315	WITHOUT_CLASSIFICATION	1.0891430684752798E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999891299659	WITHOUT_CLASSIFICATION	1.0870034121163055E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999964421743	WITHOUT_CLASSIFICATION	3.557825609996708E-9	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999998235092	WITHOUT_CLASSIFICATION	1.7649080062318185E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999975227523	WITHOUT_CLASSIFICATION	2.4772476992644375E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999987347463903	WITHOUT_CLASSIFICATION	1.2652536096435538E-6	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999270469	WITHOUT_CLASSIFICATION	7.295307658207329E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999442146464	WITHOUT_CLASSIFICATION	5.578535362692019E-8	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987670125475159	WITHOUT_CLASSIFICATION	0.0012329874524841856	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987670125475159	WITHOUT_CLASSIFICATION	0.0012329874524841856	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999999945998926	WITHOUT_CLASSIFICATION	5.400107388098247E-8	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999380888159	WITHOUT_CLASSIFICATION	6.19111840765098E-8	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999903931202	WITHOUT_CLASSIFICATION	9.60687979282392E-9	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289685833385907	IMPLEMENTATION	0.2710314166614093	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591195546	WITHOUT_CLASSIFICATION	1.040880445375205E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591195546	WITHOUT_CLASSIFICATION	1.040880445375205E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999992393687438	WITHOUT_CLASSIFICATION	7.606312561947292E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999913641819	WITHOUT_CLASSIFICATION	8.635818069519864E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.999996673055032	WITHOUT_CLASSIFICATION	3.3269449680825026E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999972793427967	WITHOUT_CLASSIFICATION	2.7206572032530828E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999021310242	WITHOUT_CLASSIFICATION	9.786897570610479E-8	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999957417025513	WITHOUT_CLASSIFICATION	4.2582974486583754E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998810885391	WITHOUT_CLASSIFICATION	1.1891146083832878E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999970225752	WITHOUT_CLASSIFICATION	2.977424827546249E-9	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999498249137	WITHOUT_CLASSIFICATION	5.017508620091629E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875433453	WITHOUT_CLASSIFICATION	1.2456654655491988E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875433453	WITHOUT_CLASSIFICATION	1.2456654655491988E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999868717604372	WITHOUT_CLASSIFICATION	1.3128239562805813E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985307408	WITHOUT_CLASSIFICATION	2.0146925910599514E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999899330495	WITHOUT_CLASSIFICATION	1.0066950464618085E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999949727064246	WITHOUT_CLASSIFICATION	5.027293575362707E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999994799127367	WITHOUT_CLASSIFICATION	5.200872631588328E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585356015	WITHOUT_CLASSIFICATION	4.1464398443908396E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580871254	WITHOUT_CLASSIFICATION	7.419128744731541E-7	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991565653886	WITHOUT_CLASSIFICATION	8.434346113312786E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999997998522018	WITHOUT_CLASSIFICATION	2.0014779817084886E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999493384722554	WITHOUT_CLASSIFICATION	5.06615277445736E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999998888533992	WITHOUT_CLASSIFICATION	1.1114660075925495E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999856899991284	WITHOUT_CLASSIFICATION	1.43100008715832E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999991868169158	WITHOUT_CLASSIFICATION	8.131830841084724E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999996968498092	WITHOUT_CLASSIFICATION	3.0315019079624454E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999998848776224	WITHOUT_CLASSIFICATION	1.1512237768450681E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999921706078734	WITHOUT_CLASSIFICATION	7.829392126554193E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990790469112	WITHOUT_CLASSIFICATION	9.209530888396419E-7	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999990973966324	WITHOUT_CLASSIFICATION	9.026033674727705E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998128945915	WITHOUT_CLASSIFICATION	1.871054083731983E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999840545347	WITHOUT_CLASSIFICATION	1.5945465326272225E-8	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995948160982	WITHOUT_CLASSIFICATION	4.05183901807013E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999612101995298	WITHOUT_CLASSIFICATION	3.8789800470152027E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999612101995298	WITHOUT_CLASSIFICATION	3.8789800470152027E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263695282	WITHOUT_CLASSIFICATION	6.317363047183765E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999746900646	WITHOUT_CLASSIFICATION	2.5309935418741675E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963582248	WITHOUT_CLASSIFICATION	7.070364177516627E-5	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999291438254474	WITHOUT_CLASSIFICATION	7.085617455258392E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999998555310495	WITHOUT_CLASSIFICATION	1.4446895049722333E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999615353167	WITHOUT_CLASSIFICATION	3.8464683404606075E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999988784475719	WITHOUT_CLASSIFICATION	1.121552428098E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999999951206	WITHOUT_CLASSIFICATION	4.879400046973702E-11	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999950319394815	WITHOUT_CLASSIFICATION	4.9680605184436835E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9992882692967463	WITHOUT_CLASSIFICATION	7.117307032538353E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570076148	WITHOUT_CLASSIFICATION	5.429923852916812E-7	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998464673181816	WITHOUT_CLASSIFICATION	1.5353268181834514E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9971138886555007	WITHOUT_CLASSIFICATION	0.002886111344499279	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999956069311	WITHOUT_CLASSIFICATION	4.3930688351799505E-9	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999990086041	WITHOUT_CLASSIFICATION	9.913958277827442E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997081889048	WITHOUT_CLASSIFICATION	2.9181109522417375E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999999981260148	WITHOUT_CLASSIFICATION	1.8739852012393353E-8	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997772114892	WITHOUT_CLASSIFICATION	2.2278851070725067E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998794067895325	WITHOUT_CLASSIFICATION	1.2059321046749867E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999964	WITHOUT_CLASSIFICATION	3.4599858965266087E-15	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999867668	WITHOUT_CLASSIFICATION	1.3233156846323847E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999995791539	WITHOUT_CLASSIFICATION	4.208461041620759E-9	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999906645696	WITHOUT_CLASSIFICATION	9.335430479616029E-9	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999996921	WITHOUT_CLASSIFICATION	3.0777647116964345E-13	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850477	WITHOUT_CLASSIFICATION	6.414952400860781E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850477	WITHOUT_CLASSIFICATION	6.414952400860781E-9	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996621742587	WITHOUT_CLASSIFICATION	3.378257412092998E-7	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998234702310472	WITHOUT_CLASSIFICATION	1.7652976895288032E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999491570862	WITHOUT_CLASSIFICATION	5.084291384248065E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999816636798	WITHOUT_CLASSIFICATION	1.833632023158194E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99999971275767	WITHOUT_CLASSIFICATION	2.872423300963392E-7	IMPLEMENTATION
