// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991780270164673	WITHOUT_CLASSIFICATION	8.219729835327701E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991780270164673	WITHOUT_CLASSIFICATION	8.219729835327701E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9998723742490608	WITHOUT_CLASSIFICATION	1.2762575093914206E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9542444391911464	WITHOUT_CLASSIFICATION	0.045755560808853485	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9911393836878238	WITHOUT_CLASSIFICATION	0.008860616312176248	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9733404509431199	IMPLEMENTATION	0.02665954905688006	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9965861940273448	WITHOUT_CLASSIFICATION	0.0034138059726552352	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9332969880186238	WITHOUT_CLASSIFICATION	0.06670301198137621	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.974062447757252	WITHOUT_CLASSIFICATION	0.025937552242748005	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9243261398923176	WITHOUT_CLASSIFICATION	0.07567386010768244	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9970089840235303	WITHOUT_CLASSIFICATION	0.0029910159764696804	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.6058943445364354	IMPLEMENTATION	0.3941056554635647	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9498527199488551	WITHOUT_CLASSIFICATION	0.0501472800511448	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9498527199488551	WITHOUT_CLASSIFICATION	0.0501472800511448	IMPLEMENTATION
/**	IMPLEMENTATION	0.7300483164359683	IMPLEMENTATION	0.26995168356403154	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7863565775027508	IMPLEMENTATION	0.21364342249724916	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9982906215194943	IMPLEMENTATION	0.0017093784805057139	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9943592411354517	WITHOUT_CLASSIFICATION	0.005640758864548231	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999997665393	WITHOUT_CLASSIFICATION	2.3346069499301496E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9805464824563992	WITHOUT_CLASSIFICATION	0.01945351754360084	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.910116990301327	WITHOUT_CLASSIFICATION	0.089883009698673	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999414960938984	WITHOUT_CLASSIFICATION	5.850390610170516E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.851923772666655	WITHOUT_CLASSIFICATION	0.14807622733334505	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9098908908829402	IMPLEMENTATION	0.09010910911705983	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9098908908829402	IMPLEMENTATION	0.09010910911705983	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9983875631272959	IMPLEMENTATION	0.0016124368727040389	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9953927237690996	WITHOUT_CLASSIFICATION	0.004607276230900311	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9945728787262753	IMPLEMENTATION	0.005427121273724595	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6974219878112476	IMPLEMENTATION	0.3025780121887524	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.5040041165534926	WITHOUT_CLASSIFICATION	0.4959958834465074	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9856747467555654	WITHOUT_CLASSIFICATION	0.01432525324443454	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6218052988705373	WITHOUT_CLASSIFICATION	0.3781947011294628	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.999803315205764	WITHOUT_CLASSIFICATION	1.9668479423596018E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8887502171375693	WITHOUT_CLASSIFICATION	0.11124978286243074	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8764945311425405	IMPLEMENTATION	0.12350546885745953	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9992425892821627	WITHOUT_CLASSIFICATION	7.57410717837403E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9409709567969199	IMPLEMENTATION	0.059029043203080195	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9084475827727607	WITHOUT_CLASSIFICATION	0.09155241722723922	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9623024564339236	WITHOUT_CLASSIFICATION	0.0376975435660764	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9989916185126642	IMPLEMENTATION	0.001008381487335871	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9989916185126642	IMPLEMENTATION	0.001008381487335871	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8527419830336636	IMPLEMENTATION	0.1472580169663365	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9997098338552955	WITHOUT_CLASSIFICATION	2.901661447044457E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9729248571167147	WITHOUT_CLASSIFICATION	0.027075142883285337	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9996262208233356	IMPLEMENTATION	3.7377917666442514E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9681777651780457	WITHOUT_CLASSIFICATION	0.03182223482195441	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9996271553671019	WITHOUT_CLASSIFICATION	3.7284463289818644E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9643549951417097	WITHOUT_CLASSIFICATION	0.03564500485829025	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999941545893232	WITHOUT_CLASSIFICATION	5.8454106769348255E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.5655448946733805	WITHOUT_CLASSIFICATION	0.4344551053266195	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9977170953191387	WITHOUT_CLASSIFICATION	0.0022829046808612854	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9240254395571582	IMPLEMENTATION	0.07597456044284184	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6548674021093392	WITHOUT_CLASSIFICATION	0.34513259789066064	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9729929807740911	WITHOUT_CLASSIFICATION	0.027007019225908955	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8130401326542697	WITHOUT_CLASSIFICATION	0.18695986734573036	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9866331780827877	IMPLEMENTATION	0.0133668219172123	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8130401326542697	WITHOUT_CLASSIFICATION	0.18695986734573036	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999969412757705	IMPLEMENTATION	3.0587242295096302E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9959638620170199	IMPLEMENTATION	0.0040361379829801656	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8130401326542697	WITHOUT_CLASSIFICATION	0.18695986734573036	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999789474159	WITHOUT_CLASSIFICATION	2.1052584098962406E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999879143124	WITHOUT_CLASSIFICATION	1.2085687618604668E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9828272308028685	IMPLEMENTATION	0.017172769197131465	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999939481813742	WITHOUT_CLASSIFICATION	6.051818625804768E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998562209270027	WITHOUT_CLASSIFICATION	1.4377907299738572E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999989809066245	WITHOUT_CLASSIFICATION	1.019093375419224E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999092532459	WITHOUT_CLASSIFICATION	9.074675407643212E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999997923981421	WITHOUT_CLASSIFICATION	2.0760185788845979E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998781050154	WITHOUT_CLASSIFICATION	1.2189498445240002E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998781050154	WITHOUT_CLASSIFICATION	1.2189498445240002E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999038603197	WITHOUT_CLASSIFICATION	9.613968029553178E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999603837058	WITHOUT_CLASSIFICATION	3.961629419752838E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999993769449268	WITHOUT_CLASSIFICATION	6.230550731622096E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999997222904428	WITHOUT_CLASSIFICATION	2.7770955718843657E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999821454697	WITHOUT_CLASSIFICATION	1.7854530300878205E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999821454697	WITHOUT_CLASSIFICATION	1.7854530300878205E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998841748751	WITHOUT_CLASSIFICATION	1.1582512499947121E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994583592084737	WITHOUT_CLASSIFICATION	5.416407915262884E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.999998817769156	WITHOUT_CLASSIFICATION	1.1822308439541575E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998993230567	WITHOUT_CLASSIFICATION	1.0067694337656002E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998167376	WITHOUT_CLASSIFICATION	1.832624536365553E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999969559971	WITHOUT_CLASSIFICATION	3.0440029539897753E-9	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999979034953533	WITHOUT_CLASSIFICATION	2.096504646681788E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999996616076593	WITHOUT_CLASSIFICATION	3.3839234071407023E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999980403953985	WITHOUT_CLASSIFICATION	1.9596046015010555E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981363544178183	WITHOUT_CLASSIFICATION	0.0018636455821817448	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999932309307352	WITHOUT_CLASSIFICATION	6.76906926467333E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999987286007749	WITHOUT_CLASSIFICATION	1.2713992250296502E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999836373	WITHOUT_CLASSIFICATION	1.6362627602072492E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999983378473518	WITHOUT_CLASSIFICATION	1.66215264812021E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999983378473518	WITHOUT_CLASSIFICATION	1.66215264812021E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999999905214773	WITHOUT_CLASSIFICATION	9.478522690856493E-8	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999996093698832	WITHOUT_CLASSIFICATION	3.9063011677481E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998029965084	WITHOUT_CLASSIFICATION	1.9700349158756348E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999968471977373	WITHOUT_CLASSIFICATION	3.1528022627618228E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9998568997823016	WITHOUT_CLASSIFICATION	1.4310021769833216E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7300483164359683	IMPLEMENTATION	0.26995168356403154	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7300483164359683	IMPLEMENTATION	0.26995168356403154	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998018025932	WITHOUT_CLASSIFICATION	1.9819740690532343E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999993920698	WITHOUT_CLASSIFICATION	6.079300949551126E-10	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999996945147	WITHOUT_CLASSIFICATION	3.054853482061545E-10	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999848185637948	WITHOUT_CLASSIFICATION	1.5181436205134068E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999994835192991	WITHOUT_CLASSIFICATION	5.164807009022817E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969319494589	WITHOUT_CLASSIFICATION	3.0680505411014097E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992667504246	WITHOUT_CLASSIFICATION	7.332495754479027E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999340789554	WITHOUT_CLASSIFICATION	6.592104460819369E-8	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999897186863982	WITHOUT_CLASSIFICATION	1.028131360182333E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999910383747815	WITHOUT_CLASSIFICATION	8.961625218496144E-6	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999940188908945	WITHOUT_CLASSIFICATION	5.981109105526736E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999897186863982	WITHOUT_CLASSIFICATION	1.028131360182333E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999940188908945	WITHOUT_CLASSIFICATION	5.981109105526736E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999454571596	WITHOUT_CLASSIFICATION	5.4542840345375344E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999992387768436	WITHOUT_CLASSIFICATION	7.612231564065049E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999889111202173	WITHOUT_CLASSIFICATION	1.1088879782680057E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999588686073849	WITHOUT_CLASSIFICATION	4.113139261510594E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999978259541	WITHOUT_CLASSIFICATION	2.1740459939294327E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999992610138	WITHOUT_CLASSIFICATION	7.389862342669417E-10	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9970137662149751	WITHOUT_CLASSIFICATION	0.002986233785024948	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9985248218824793	WITHOUT_CLASSIFICATION	0.001475178117520685	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9994960600512857	WITHOUT_CLASSIFICATION	5.039399487143444E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999585269662885	WITHOUT_CLASSIFICATION	4.14730337114467E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999687196122609	WITHOUT_CLASSIFICATION	3.1280387739107395E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999992571082333	WITHOUT_CLASSIFICATION	7.428917666047418E-7	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999905929108	WITHOUT_CLASSIFICATION	9.40708925980126E-9	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996304634387818	WITHOUT_CLASSIFICATION	3.695365612181731E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999995879288757	WITHOUT_CLASSIFICATION	4.1207112436803524E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999984768042	WITHOUT_CLASSIFICATION	1.5231957613614963E-9	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999250200686	WITHOUT_CLASSIFICATION	7.497993143881663E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999001580837525	WITHOUT_CLASSIFICATION	9.984191624739634E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999973944970909	WITHOUT_CLASSIFICATION	2.605502909008475E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999358051438	WITHOUT_CLASSIFICATION	6.419485621527197E-8	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999975653708588	WITHOUT_CLASSIFICATION	2.434629141086688E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999987716983	WITHOUT_CLASSIFICATION	1.228301632795823E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969553302399	WITHOUT_CLASSIFICATION	3.044669760040756E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998384155656	WITHOUT_CLASSIFICATION	1.6158443451844387E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9976386450502792	WITHOUT_CLASSIFICATION	0.002361354949720702	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999992910093367	WITHOUT_CLASSIFICATION	7.089906633081455E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999992281188	WITHOUT_CLASSIFICATION	7.718813582866197E-10	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9950439991523996	WITHOUT_CLASSIFICATION	0.00495600084760035	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999984848901	WITHOUT_CLASSIFICATION	1.5151099231447012E-9	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999781436437	WITHOUT_CLASSIFICATION	2.185635626586827E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999230558851	WITHOUT_CLASSIFICATION	7.694411482333587E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999995014690364	WITHOUT_CLASSIFICATION	4.985309636063332E-7	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999928605429	WITHOUT_CLASSIFICATION	7.139457193952079E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999933390707	WITHOUT_CLASSIFICATION	6.660929153194676E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999651213627	WITHOUT_CLASSIFICATION	3.4878637250435234E-8	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999997051578	WITHOUT_CLASSIFICATION	2.9484222829282866E-10	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999933390707	WITHOUT_CLASSIFICATION	6.660929153194676E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999697175359	WITHOUT_CLASSIFICATION	3.0282464099465454E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999994595523466	WITHOUT_CLASSIFICATION	5.404476533854003E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999996273211774	WITHOUT_CLASSIFICATION	3.7267882250671765E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999992696128496	WITHOUT_CLASSIFICATION	7.303871504626573E-7	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.999998700712605	WITHOUT_CLASSIFICATION	1.2992873949984632E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999731326739	WITHOUT_CLASSIFICATION	2.6867326158548963E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999731326739	WITHOUT_CLASSIFICATION	2.6867326158548963E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999963658084413	WITHOUT_CLASSIFICATION	3.634191558637454E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997859849056	WITHOUT_CLASSIFICATION	2.1401509440639E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997400027720796	WITHOUT_CLASSIFICATION	2.5999722792035537E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999077023	WITHOUT_CLASSIFICATION	9.229770394414551E-11	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999995446775947	WITHOUT_CLASSIFICATION	4.553224053371609E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999911132550605	WITHOUT_CLASSIFICATION	8.886744939478024E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999998502228965	WITHOUT_CLASSIFICATION	1.4977710341640336E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999961577412116	WITHOUT_CLASSIFICATION	3.842258788273055E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999978448182478	WITHOUT_CLASSIFICATION	2.1551817522058036E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999973562729	WITHOUT_CLASSIFICATION	2.643727024332363E-9	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997735684024	WITHOUT_CLASSIFICATION	2.2643159756965056E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997735684024	WITHOUT_CLASSIFICATION	2.2643159756965056E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999592588259789	WITHOUT_CLASSIFICATION	4.0741174021141486E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999996801939782	WITHOUT_CLASSIFICATION	3.198060217011452E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999995872277128	WITHOUT_CLASSIFICATION	4.127722873291318E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997735684024	WITHOUT_CLASSIFICATION	2.2643159756965056E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999592588259789	WITHOUT_CLASSIFICATION	4.0741174021141486E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999592588259789	WITHOUT_CLASSIFICATION	4.0741174021141486E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998430492155	WITHOUT_CLASSIFICATION	1.5695078444881613E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999874850854058	WITHOUT_CLASSIFICATION	1.2514914594196792E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999890904017	WITHOUT_CLASSIFICATION	1.090959830606475E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999995587137733	WITHOUT_CLASSIFICATION	4.412862266180691E-7	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881158370147	WITHOUT_CLASSIFICATION	1.1884162985300842E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881158370147	WITHOUT_CLASSIFICATION	1.1884162985300842E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999948708966012	WITHOUT_CLASSIFICATION	5.129103398790764E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999999995044205	WITHOUT_CLASSIFICATION	4.955795071170396E-9	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999999582073285	WITHOUT_CLASSIFICATION	4.179267145894824E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999976880698	WITHOUT_CLASSIFICATION	2.311930203830078E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999976880698	WITHOUT_CLASSIFICATION	2.311930203830078E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999993329862721	WITHOUT_CLASSIFICATION	6.670137279588918E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999913225961118	WITHOUT_CLASSIFICATION	8.677403888198072E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999864354312994	WITHOUT_CLASSIFICATION	1.3564568700645096E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999978914683	WITHOUT_CLASSIFICATION	2.1085318069891382E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999999735807	WITHOUT_CLASSIFICATION	2.6419229494957997E-11	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999978232301	WITHOUT_CLASSIFICATION	2.176769922339437E-9	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997770717168594	WITHOUT_CLASSIFICATION	2.229282831406789E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999886593582441	WITHOUT_CLASSIFICATION	1.1340641755795124E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999912062125796	WITHOUT_CLASSIFICATION	8.793787420243145E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999864354312994	WITHOUT_CLASSIFICATION	1.3564568700645096E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999747124321019	WITHOUT_CLASSIFICATION	2.5287567898200562E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999471717070956	WITHOUT_CLASSIFICATION	5.2828292904349995E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999471717070956	WITHOUT_CLASSIFICATION	5.2828292904349995E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997257313862	WITHOUT_CLASSIFICATION	2.7426861371124656E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999302787727732	WITHOUT_CLASSIFICATION	6.972122722674792E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999655253519015	WITHOUT_CLASSIFICATION	3.44746480985098E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999999770741148	WITHOUT_CLASSIFICATION	2.292588519207914E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999200588219008	WITHOUT_CLASSIFICATION	7.994117809919706E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9998081846020461	WITHOUT_CLASSIFICATION	1.9181539795383616E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.999999735572143	WITHOUT_CLASSIFICATION	2.6442785701874807E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999951270559618	WITHOUT_CLASSIFICATION	4.872944038089845E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999999963968	WITHOUT_CLASSIFICATION	3.603191305652197E-11	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999999963968	WITHOUT_CLASSIFICATION	3.603191305652197E-11	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998562209270027	WITHOUT_CLASSIFICATION	1.4377907299738572E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999927044966	WITHOUT_CLASSIFICATION	7.29550348280796E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999161156189	WITHOUT_CLASSIFICATION	8.388438114529399E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998028995695	WITHOUT_CLASSIFICATION	1.971004305290597E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999999926354098	WITHOUT_CLASSIFICATION	7.364590203216242E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.99999996368054	WITHOUT_CLASSIFICATION	3.6319460086578953E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995600960969	WITHOUT_CLASSIFICATION	4.3990390313888136E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999994066392482	WITHOUT_CLASSIFICATION	5.933607517504553E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999992172118725	WITHOUT_CLASSIFICATION	7.827881275840928E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999358600723	WITHOUT_CLASSIFICATION	6.413992770887169E-8	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.99999902847853	WITHOUT_CLASSIFICATION	9.71521470058506E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999092532459	WITHOUT_CLASSIFICATION	9.074675407643212E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996654459304	WITHOUT_CLASSIFICATION	3.3455406952223756E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996654459304	WITHOUT_CLASSIFICATION	3.3455406952223756E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998554221853	WITHOUT_CLASSIFICATION	1.445778146982087E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999985311017727	WITHOUT_CLASSIFICATION	1.468898227308205E-6	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999835354311	WITHOUT_CLASSIFICATION	1.646456891192764E-8	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999350776935	WITHOUT_CLASSIFICATION	6.492230659977031E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999993215851359	WITHOUT_CLASSIFICATION	6.784148640265836E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999992109470675	WITHOUT_CLASSIFICATION	7.890529325087742E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998781050154	WITHOUT_CLASSIFICATION	1.2189498445240002E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999997063941498	WITHOUT_CLASSIFICATION	2.936058502355896E-7	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996941742971	WITHOUT_CLASSIFICATION	3.0582570284596596E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989886780797	WITHOUT_CLASSIFICATION	1.0113219202894122E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998978785006	WITHOUT_CLASSIFICATION	1.021214993877893E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999979866203439	WITHOUT_CLASSIFICATION	2.0133796561762616E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999988499975544	WITHOUT_CLASSIFICATION	1.1500024456059374E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995771688219	WITHOUT_CLASSIFICATION	4.228311781042695E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998409921435	WITHOUT_CLASSIFICATION	1.590078566123757E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999931866001446	WITHOUT_CLASSIFICATION	6.813399855526877E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999993535484762	WITHOUT_CLASSIFICATION	6.464515238509346E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999985726248891	WITHOUT_CLASSIFICATION	1.4273751108849282E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999218124321	WITHOUT_CLASSIFICATION	7.818756785176561E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998289206974	WITHOUT_CLASSIFICATION	1.710793027075693E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999358600723	WITHOUT_CLASSIFICATION	6.413992770887169E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996654459304	WITHOUT_CLASSIFICATION	3.3455406952223756E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995771688219	WITHOUT_CLASSIFICATION	4.228311781042695E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999038603197	WITHOUT_CLASSIFICATION	9.613968029553178E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999982408772	WITHOUT_CLASSIFICATION	1.7591228909180088E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999999215306966	WITHOUT_CLASSIFICATION	7.846930331549911E-8	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999654011842	WITHOUT_CLASSIFICATION	3.459881580372228E-8	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999993409149565	WITHOUT_CLASSIFICATION	6.59085043518319E-7	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999706830877	WITHOUT_CLASSIFICATION	2.9316912429860633E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999999816994912	WITHOUT_CLASSIFICATION	1.830050879595652E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998757803585	WITHOUT_CLASSIFICATION	1.2421964150684403E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999718820882738	WITHOUT_CLASSIFICATION	2.8117911726144226E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999989074374738	WITHOUT_CLASSIFICATION	1.0925625261983043E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999989949570646	WITHOUT_CLASSIFICATION	1.0050429354371945E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999989949570646	WITHOUT_CLASSIFICATION	1.0050429354371945E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999997814151	WITHOUT_CLASSIFICATION	2.1858494266434616E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999999788113602	WITHOUT_CLASSIFICATION	2.1188639791685872E-7	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999682212492247	WITHOUT_CLASSIFICATION	3.1778750775218985E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999965326881316	WITHOUT_CLASSIFICATION	3.4673118684388585E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999991470483	WITHOUT_CLASSIFICATION	8.529515916314048E-10	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999991781540589	WITHOUT_CLASSIFICATION	8.21845941133294E-7	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999663622486	WITHOUT_CLASSIFICATION	3.36377512962915E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999603837058	WITHOUT_CLASSIFICATION	3.961629419752838E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999994368450336	WITHOUT_CLASSIFICATION	5.631549663855395E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999950874814	WITHOUT_CLASSIFICATION	4.9125185957927143E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.999999950874814	WITHOUT_CLASSIFICATION	4.9125185957927143E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998904455051	WITHOUT_CLASSIFICATION	1.0955449492234897E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997511923455	WITHOUT_CLASSIFICATION	2.488076544426673E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999994055283191	WITHOUT_CLASSIFICATION	5.944716808847335E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998549163401	WITHOUT_CLASSIFICATION	1.4508365977380765E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.99999996569218	WITHOUT_CLASSIFICATION	3.4307819936981656E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998867100954	WITHOUT_CLASSIFICATION	1.132899045416368E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999358600723	WITHOUT_CLASSIFICATION	6.413992770887169E-8	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999092532459	WITHOUT_CLASSIFICATION	9.074675407643212E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995771688219	WITHOUT_CLASSIFICATION	4.228311781042695E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995771688219	WITHOUT_CLASSIFICATION	4.228311781042695E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997092446928	WITHOUT_CLASSIFICATION	2.9075530712250215E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997092446928	WITHOUT_CLASSIFICATION	2.9075530712250215E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995852883881	WITHOUT_CLASSIFICATION	4.1471161200875256E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999996448743304	WITHOUT_CLASSIFICATION	3.5512566965328733E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999996448743304	WITHOUT_CLASSIFICATION	3.5512566965328733E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999973922190893	WITHOUT_CLASSIFICATION	2.6077809106953457E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999997401994536	WITHOUT_CLASSIFICATION	2.5980054636893537E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999464274139	WITHOUT_CLASSIFICATION	5.3572586159652244E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999725102842	WITHOUT_CLASSIFICATION	2.748971588378177E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998490689361	WITHOUT_CLASSIFICATION	1.50931063815933E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999997222904428	WITHOUT_CLASSIFICATION	2.7770955718843657E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999997222904428	WITHOUT_CLASSIFICATION	2.7770955718843657E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997422057232263	WITHOUT_CLASSIFICATION	2.577942767736687E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999983187079319	WITHOUT_CLASSIFICATION	1.6812920681851842E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999884090308	WITHOUT_CLASSIFICATION	1.159096926872164E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999995319255222	WITHOUT_CLASSIFICATION	4.680744778374961E-7	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999961046853	WITHOUT_CLASSIFICATION	3.895314774846241E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999996498641606	WITHOUT_CLASSIFICATION	3.501358395165685E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999821454697	WITHOUT_CLASSIFICATION	1.7854530300878205E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999460995198	WITHOUT_CLASSIFICATION	5.3900480321411926E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999460995198	WITHOUT_CLASSIFICATION	5.3900480321411926E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998841748751	WITHOUT_CLASSIFICATION	1.1582512499947121E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998841748751	WITHOUT_CLASSIFICATION	1.1582512499947121E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999954529176749	WITHOUT_CLASSIFICATION	4.547082325086773E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999954529176749	WITHOUT_CLASSIFICATION	4.547082325086773E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999982629487	WITHOUT_CLASSIFICATION	1.7370512554909756E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999982629487	WITHOUT_CLASSIFICATION	1.7370512554909756E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999997222904428	WITHOUT_CLASSIFICATION	2.7770955718843657E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999821454697	WITHOUT_CLASSIFICATION	1.7854530300878205E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999460995198	WITHOUT_CLASSIFICATION	5.3900480321411926E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999460995198	WITHOUT_CLASSIFICATION	5.3900480321411926E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998841748751	WITHOUT_CLASSIFICATION	1.1582512499947121E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999954529176749	WITHOUT_CLASSIFICATION	4.547082325086773E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999954529176749	WITHOUT_CLASSIFICATION	4.547082325086773E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999982629487	WITHOUT_CLASSIFICATION	1.7370512554909756E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999965325866943	WITHOUT_CLASSIFICATION	3.4674133055625365E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999985702671377	WITHOUT_CLASSIFICATION	1.4297328623181272E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998839861408156	WITHOUT_CLASSIFICATION	1.1601385918437041E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999709443915935	WITHOUT_CLASSIFICATION	2.905560840652735E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999979790175806	WITHOUT_CLASSIFICATION	2.0209824193639053E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999984839464948	WITHOUT_CLASSIFICATION	1.516053505216178E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999975139319582	WITHOUT_CLASSIFICATION	2.486068041816155E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999785491229	WITHOUT_CLASSIFICATION	2.145087702859007E-8	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999951399703312	WITHOUT_CLASSIFICATION	4.8600296687611765E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999964379462	WITHOUT_CLASSIFICATION	3.562053803953752E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999989139653822	WITHOUT_CLASSIFICATION	1.0860346177650988E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999778066072	WITHOUT_CLASSIFICATION	2.2193392761302696E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999963658084413	WITHOUT_CLASSIFICATION	3.634191558637454E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999984839464948	WITHOUT_CLASSIFICATION	1.516053505216178E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880408453887	WITHOUT_CLASSIFICATION	1.1959154611191443E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880408453887	WITHOUT_CLASSIFICATION	1.1959154611191443E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999256064093	WITHOUT_CLASSIFICATION	7.439359066806909E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999890650523	WITHOUT_CLASSIFICATION	1.0934947676938613E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999890650523	WITHOUT_CLASSIFICATION	1.0934947676938613E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999852989447	WITHOUT_CLASSIFICATION	1.4701055152477847E-8	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999837703576	WITHOUT_CLASSIFICATION	1.6229642415564047E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999442460898	WITHOUT_CLASSIFICATION	5.575391002644737E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999891934900551	WITHOUT_CLASSIFICATION	1.0806509944907386E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999891934900551	WITHOUT_CLASSIFICATION	1.0806509944907386E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998167376	WITHOUT_CLASSIFICATION	1.832624536365553E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999995373913723	WITHOUT_CLASSIFICATION	4.626086277350943E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999995373913723	WITHOUT_CLASSIFICATION	4.626086277350943E-7	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999999431775903	WITHOUT_CLASSIFICATION	5.682240961509309E-8	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999864975506	WITHOUT_CLASSIFICATION	1.3502449447799884E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999999405852	WITHOUT_CLASSIFICATION	5.941479528543123E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999987676456913	WITHOUT_CLASSIFICATION	1.2323543086861241E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999814612095	WITHOUT_CLASSIFICATION	1.8538790500001094E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999592984851	WITHOUT_CLASSIFICATION	4.070151503500245E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999969559971	WITHOUT_CLASSIFICATION	3.0440029539897753E-9	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999982279150945	WITHOUT_CLASSIFICATION	1.7720849054252278E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9895243910207143	WITHOUT_CLASSIFICATION	0.010475608979285614	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999991945612743	WITHOUT_CLASSIFICATION	8.054387256150495E-7	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999996473627277	WITHOUT_CLASSIFICATION	3.5263727218873876E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999980403953985	WITHOUT_CLASSIFICATION	1.9596046015010555E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999392200603	WITHOUT_CLASSIFICATION	6.077993978719795E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999949178667993	WITHOUT_CLASSIFICATION	5.082133200783525E-6	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999963193468	WITHOUT_CLASSIFICATION	3.6806532919528945E-9	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999980403953985	WITHOUT_CLASSIFICATION	1.9596046015010555E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999810426023	WITHOUT_CLASSIFICATION	1.8957397649217346E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999984084716259	WITHOUT_CLASSIFICATION	1.59152837416256E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999941169256059	WITHOUT_CLASSIFICATION	5.8830743940937485E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999996615700977	WITHOUT_CLASSIFICATION	3.384299022373027E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999999623862423	WITHOUT_CLASSIFICATION	3.761375769662647E-7	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999997843964792	WITHOUT_CLASSIFICATION	2.1560352090063058E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999080941598	WITHOUT_CLASSIFICATION	9.19058402412826E-8	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999987286007749	WITHOUT_CLASSIFICATION	1.2713992250296502E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999491979603	WITHOUT_CLASSIFICATION	5.080203972204774E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999836373	WITHOUT_CLASSIFICATION	1.6362627602072492E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999997588521722	WITHOUT_CLASSIFICATION	2.4114782778423908E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999985707724	WITHOUT_CLASSIFICATION	1.4292276889636369E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999153421708	WITHOUT_CLASSIFICATION	8.465782925085211E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999969559971	WITHOUT_CLASSIFICATION	3.0440029539897753E-9	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999491979603	WITHOUT_CLASSIFICATION	5.080203972204774E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999997588521722	WITHOUT_CLASSIFICATION	2.4114782778423908E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999153421708	WITHOUT_CLASSIFICATION	8.465782925085211E-8	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999995608665624	WITHOUT_CLASSIFICATION	4.391334376207528E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999965738020553	WITHOUT_CLASSIFICATION	3.426197944693239E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997765669842	WITHOUT_CLASSIFICATION	2.2343301573122468E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999983378473518	WITHOUT_CLASSIFICATION	1.66215264812021E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999998261423935	WITHOUT_CLASSIFICATION	1.7385760652216073E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999803713113501	WITHOUT_CLASSIFICATION	1.9628688649989663E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999969747661072	WITHOUT_CLASSIFICATION	3.025233892962218E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999903917880917	WITHOUT_CLASSIFICATION	9.608211908408513E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999998475963877	WITHOUT_CLASSIFICATION	1.524036123076692E-7	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999519305122	WITHOUT_CLASSIFICATION	4.806948790877829E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998775292903	WITHOUT_CLASSIFICATION	1.2247070965673285E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987340662675	WITHOUT_CLASSIFICATION	1.265933732512908E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999796643964	WITHOUT_CLASSIFICATION	2.0335603594610656E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995688236862	WITHOUT_CLASSIFICATION	4.311763137263017E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999990906178676	WITHOUT_CLASSIFICATION	9.093821324623315E-7	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999999223291156	WITHOUT_CLASSIFICATION	7.767088439908064E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999996093698832	WITHOUT_CLASSIFICATION	3.9063011677481E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999838169216	WITHOUT_CLASSIFICATION	1.6183078424312852E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999997715672425	WITHOUT_CLASSIFICATION	2.2843275736605872E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999491979603	WITHOUT_CLASSIFICATION	5.080203972204774E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999737251127	WITHOUT_CLASSIFICATION	2.627488715374613E-8	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999979496338128	WITHOUT_CLASSIFICATION	2.0503661871375833E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999996058583762	WITHOUT_CLASSIFICATION	3.9414162387659055E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999920875437508	WITHOUT_CLASSIFICATION	7.912456249102782E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999048915328	WITHOUT_CLASSIFICATION	9.510846723274926E-8	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999997631212568	WITHOUT_CLASSIFICATION	2.3687874324656352E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996144675128	WITHOUT_CLASSIFICATION	3.855324871654822E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999755846667	WITHOUT_CLASSIFICATION	2.4415333368780544E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999976807778251	WITHOUT_CLASSIFICATION	2.3192221749105036E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999992458554361	WITHOUT_CLASSIFICATION	7.541445639029225E-7	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999961651757322	WITHOUT_CLASSIFICATION	3.834824267863366E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999993699209362	WITHOUT_CLASSIFICATION	6.300790638544716E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9989041172605124	WITHOUT_CLASSIFICATION	0.001095882739487572	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999968471977373	WITHOUT_CLASSIFICATION	3.1528022627618228E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.99999978753475	WITHOUT_CLASSIFICATION	2.124652498140689E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999806493017168	WITHOUT_CLASSIFICATION	1.935069828316921E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999773436356943	WITHOUT_CLASSIFICATION	2.2656364305693232E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999894327190754	WITHOUT_CLASSIFICATION	1.056728092465184E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999902857749962	WITHOUT_CLASSIFICATION	9.714225003771793E-6	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999918762074145	WITHOUT_CLASSIFICATION	8.123792585551222E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999070329847	WITHOUT_CLASSIFICATION	9.29670153800979E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999977749139513	WITHOUT_CLASSIFICATION	2.225086048739505E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999992127169985	WITHOUT_CLASSIFICATION	7.872830013417366E-7	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999988039204337	WITHOUT_CLASSIFICATION	1.1960795662776865E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826907838942	WITHOUT_CLASSIFICATION	1.7309216105750563E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826907838942	WITHOUT_CLASSIFICATION	1.7309216105750563E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999850036963396	WITHOUT_CLASSIFICATION	1.4996303660476347E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999686234383391	WITHOUT_CLASSIFICATION	3.13765616608686E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999859342231414	WITHOUT_CLASSIFICATION	1.4065776858510717E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999996731463019	WITHOUT_CLASSIFICATION	3.268536981919738E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999770425235	WITHOUT_CLASSIFICATION	2.295747646620415E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999865500463	WITHOUT_CLASSIFICATION	1.344995361463473E-8	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999963322445772	WITHOUT_CLASSIFICATION	3.6677554228580174E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999982837518646	WITHOUT_CLASSIFICATION	1.7162481354101528E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999995080704833	WITHOUT_CLASSIFICATION	4.919295167276459E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999998385892895	WITHOUT_CLASSIFICATION	1.6141071039907573E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999885569712144	WITHOUT_CLASSIFICATION	1.1443028785669351E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999998611873257	WITHOUT_CLASSIFICATION	1.3881267429534327E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999999994646475	WITHOUT_CLASSIFICATION	5.353524851738317E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999880801917583	WITHOUT_CLASSIFICATION	1.19198082416682E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999953090827	WITHOUT_CLASSIFICATION	4.690917308254907E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990467279223	WITHOUT_CLASSIFICATION	9.53272077672204E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999991916634691	WITHOUT_CLASSIFICATION	8.083365308855741E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999995501248	WITHOUT_CLASSIFICATION	4.4987529190718154E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999992103751658	WITHOUT_CLASSIFICATION	7.896248342516694E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9995168438250971	WITHOUT_CLASSIFICATION	4.831561749028247E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996082149978	WITHOUT_CLASSIFICATION	3.917850022580139E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996082149978	WITHOUT_CLASSIFICATION	3.917850022580139E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999988295721265	WITHOUT_CLASSIFICATION	1.1704278735652855E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999988295721265	WITHOUT_CLASSIFICATION	1.1704278735652855E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999992127169985	WITHOUT_CLASSIFICATION	7.872830013417366E-7	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999947530481137	WITHOUT_CLASSIFICATION	5.2469518864056535E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999406901644936	WITHOUT_CLASSIFICATION	5.930983550641113E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999981343434438	WITHOUT_CLASSIFICATION	1.8656565562342615E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999406901644936	WITHOUT_CLASSIFICATION	5.930983550641113E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999981343434438	WITHOUT_CLASSIFICATION	1.8656565562342615E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999360155673556	WITHOUT_CLASSIFICATION	6.398443264445344E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999999994249713	WITHOUT_CLASSIFICATION	5.750287092321066E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999608616431	WITHOUT_CLASSIFICATION	3.91383569377048E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999996870973255	WITHOUT_CLASSIFICATION	3.1290267455930243E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9985373561075701	WITHOUT_CLASSIFICATION	0.001462643892429936	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9989730251090446	WITHOUT_CLASSIFICATION	0.00102697489095547	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999918000226	WITHOUT_CLASSIFICATION	8.199977333256348E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998923834416	WITHOUT_CLASSIFICATION	1.0761655838893078E-7	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999999918366728	WITHOUT_CLASSIFICATION	8.163327204488371E-8	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999905403949	WITHOUT_CLASSIFICATION	9.45960512057319E-9	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999954540698359	WITHOUT_CLASSIFICATION	4.545930164088798E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999935859037	WITHOUT_CLASSIFICATION	6.414096316055274E-9	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999150331215	WITHOUT_CLASSIFICATION	8.496687861791281E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999960746925476	WITHOUT_CLASSIFICATION	3.925307452398885E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999938228626432	WITHOUT_CLASSIFICATION	6.177137356842535E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999731943516	WITHOUT_CLASSIFICATION	2.680564845037821E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999731943516	WITHOUT_CLASSIFICATION	2.680564845037821E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999993936235596	WITHOUT_CLASSIFICATION	6.063764405147308E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999360155673556	WITHOUT_CLASSIFICATION	6.398443264445344E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999941958303284	WITHOUT_CLASSIFICATION	5.804169671485747E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999981851508692	WITHOUT_CLASSIFICATION	1.8148491308052645E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9990026098365251	WITHOUT_CLASSIFICATION	9.973901634748252E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998242622886	WITHOUT_CLASSIFICATION	1.7573771133854167E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995387176856776	WITHOUT_CLASSIFICATION	4.6128231432247786E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999360155673556	WITHOUT_CLASSIFICATION	6.398443264445344E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998242622886	WITHOUT_CLASSIFICATION	1.7573771133854167E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995387176856776	WITHOUT_CLASSIFICATION	4.6128231432247786E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9994526996602715	WITHOUT_CLASSIFICATION	5.473003397284366E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999991580201995	WITHOUT_CLASSIFICATION	8.419798005201938E-7	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999963492470707	WITHOUT_CLASSIFICATION	3.6507529292762544E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999360155673556	WITHOUT_CLASSIFICATION	6.398443264445344E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999360155673556	WITHOUT_CLASSIFICATION	6.398443264445344E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999999108125953	WITHOUT_CLASSIFICATION	8.918740467153663E-8	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999995575532078	WITHOUT_CLASSIFICATION	4.4244679210762777E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999953200455027	WITHOUT_CLASSIFICATION	4.6799544972228845E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999975510415718	WITHOUT_CLASSIFICATION	2.4489584280998844E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999996824921794	WITHOUT_CLASSIFICATION	3.1750782063058307E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999991692581	WITHOUT_CLASSIFICATION	8.307419793253672E-10	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999925348163405	WITHOUT_CLASSIFICATION	7.465183659396325E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999416989932	WITHOUT_CLASSIFICATION	5.830100679305236E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999997913884199	WITHOUT_CLASSIFICATION	2.086115801731448E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999991776561556	WITHOUT_CLASSIFICATION	8.223438445001268E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999984948043333	WITHOUT_CLASSIFICATION	1.5051956666843414E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999908589191396	WITHOUT_CLASSIFICATION	9.141080860338918E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999970831914	WITHOUT_CLASSIFICATION	2.91680848390686E-9	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999874773886456	WITHOUT_CLASSIFICATION	1.2522611354574769E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999411641534	WITHOUT_CLASSIFICATION	5.8835846688644756E-8	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999960846577	WITHOUT_CLASSIFICATION	3.915342276879968E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999848185637948	WITHOUT_CLASSIFICATION	1.5181436205134068E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999982038609132	WITHOUT_CLASSIFICATION	1.7961390867467177E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9987621251848856	WITHOUT_CLASSIFICATION	0.001237874815114412	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999983139924337	WITHOUT_CLASSIFICATION	1.6860075664066543E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999681510854874	WITHOUT_CLASSIFICATION	3.1848914512591953E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9947405949101327	WITHOUT_CLASSIFICATION	0.005259405089867359	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9947405949101327	WITHOUT_CLASSIFICATION	0.005259405089867359	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999848185637948	WITHOUT_CLASSIFICATION	1.5181436205134068E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999924686318745	WITHOUT_CLASSIFICATION	7.5313681255403595E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998844372275	WITHOUT_CLASSIFICATION	1.1556277254368542E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9684326563107366	WITHOUT_CLASSIFICATION	0.03156734368926347	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999146766618	WITHOUT_CLASSIFICATION	8.532333812428549E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992978156409	WITHOUT_CLASSIFICATION	7.021843591027429E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998874167599	WITHOUT_CLASSIFICATION	1.1258323999135739E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998239755901	WITHOUT_CLASSIFICATION	1.7602440992489176E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999979802409134	WITHOUT_CLASSIFICATION	2.019759086675982E-6	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998067542608	WITHOUT_CLASSIFICATION	1.932457393286799E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998765950822	WITHOUT_CLASSIFICATION	1.2340491780199203E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993491964878	WITHOUT_CLASSIFICATION	6.508035121355694E-7	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999998319674185	WITHOUT_CLASSIFICATION	1.6803258150370801E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999883482543689	WITHOUT_CLASSIFICATION	1.1651745631062538E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999991573251572	WITHOUT_CLASSIFICATION	8.426748427696652E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998776174155	WITHOUT_CLASSIFICATION	1.2238258455040107E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999907815417	WITHOUT_CLASSIFICATION	9.218458281447762E-9	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998673455632	WITHOUT_CLASSIFICATION	1.3265443666461936E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999968903335402	WITHOUT_CLASSIFICATION	3.10966645975881E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999968976443	WITHOUT_CLASSIFICATION	3.102355700323624E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999782981009	WITHOUT_CLASSIFICATION	2.1701899042403375E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998661172440866	WITHOUT_CLASSIFICATION	1.338827559133184E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999928141058413	WITHOUT_CLASSIFICATION	7.185894158669142E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734439520228	WITHOUT_CLASSIFICATION	2.6556047977082872E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995326074564574	WITHOUT_CLASSIFICATION	4.6739254354263317E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852930239207	WITHOUT_CLASSIFICATION	1.4706976079382159E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894553551901	WITHOUT_CLASSIFICATION	1.0544644809825647E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998177723670072	WITHOUT_CLASSIFICATION	1.822276329927086E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646751587107	WITHOUT_CLASSIFICATION	3.5324841289322294E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998543921312154	WITHOUT_CLASSIFICATION	1.4560786878466066E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957428681787	WITHOUT_CLASSIFICATION	4.257131821335644E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999981417969345	WITHOUT_CLASSIFICATION	1.8582030654593026E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999981043460836	WITHOUT_CLASSIFICATION	1.8956539164027155E-6	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961629318513	WITHOUT_CLASSIFICATION	3.83706814863801E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985855518009	WITHOUT_CLASSIFICATION	1.414448199094673E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572786990288	WITHOUT_CLASSIFICATION	4.272130097117438E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997255182927502	WITHOUT_CLASSIFICATION	2.7448170724967807E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955493135279	WITHOUT_CLASSIFICATION	4.450686472142211E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997049699049	WITHOUT_CLASSIFICATION	2.9503009510412337E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349058688798	WITHOUT_CLASSIFICATION	6.509413112022893E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279117678758	WITHOUT_CLASSIFICATION	7.208823212426454E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996361691862	WITHOUT_CLASSIFICATION	3.6383081391662865E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905088910636	WITHOUT_CLASSIFICATION	9.49110893647289E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9988532543671059	WITHOUT_CLASSIFICATION	0.0011467456328940495	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997103372633	WITHOUT_CLASSIFICATION	2.8966273674873757E-7	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999486179719	WITHOUT_CLASSIFICATION	5.138202816085974E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992474303788	WITHOUT_CLASSIFICATION	7.525696211743837E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999979203372962	WITHOUT_CLASSIFICATION	2.0796627038570352E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999949255355786	WITHOUT_CLASSIFICATION	5.074464421428271E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999991039731067	WITHOUT_CLASSIFICATION	8.960268933742672E-7	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999831675961	WITHOUT_CLASSIFICATION	1.6832403938760717E-8	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999997228955399	WITHOUT_CLASSIFICATION	2.7710446011045253E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999975882478813	WITHOUT_CLASSIFICATION	2.4117521186592094E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999996486447387	WITHOUT_CLASSIFICATION	3.5135526132677033E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999999790949417	WITHOUT_CLASSIFICATION	2.0905058291028964E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999436817514	WITHOUT_CLASSIFICATION	5.6318248552443605E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999951598231	WITHOUT_CLASSIFICATION	4.84017690136364E-9	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999984533423233	WITHOUT_CLASSIFICATION	1.5466576766578432E-6	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999624405219	WITHOUT_CLASSIFICATION	3.7559477989107334E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998317146306	WITHOUT_CLASSIFICATION	1.682853693083606E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690778524788	WITHOUT_CLASSIFICATION	3.092214752120207E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950750779895	WITHOUT_CLASSIFICATION	4.924922010561989E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985625264515	WITHOUT_CLASSIFICATION	1.4374735485113691E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886831670871	WITHOUT_CLASSIFICATION	1.1316832912818512E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.999854093954292	WITHOUT_CLASSIFICATION	1.4590604570790836E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999992753062776	WITHOUT_CLASSIFICATION	7.24693722377064E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9900217327758633	WITHOUT_CLASSIFICATION	0.009978267224136812	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9989173251112038	WITHOUT_CLASSIFICATION	0.0010826748887962302	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927702468045	WITHOUT_CLASSIFICATION	7.229753195499977E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999896527443	WITHOUT_CLASSIFICATION	1.0347255700559515E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999305513415	WITHOUT_CLASSIFICATION	6.944865853884941E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999479569943	WITHOUT_CLASSIFICATION	5.204300563482627E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999916909305	WITHOUT_CLASSIFICATION	8.309069573213335E-9	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999313338097195	WITHOUT_CLASSIFICATION	6.866619028041504E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999975457147909	WITHOUT_CLASSIFICATION	2.454285209096053E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999995123344	WITHOUT_CLASSIFICATION	4.876655966364594E-10	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999983178841813	WITHOUT_CLASSIFICATION	1.682115818804873E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992474303788	WITHOUT_CLASSIFICATION	7.525696211743837E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999841204134	WITHOUT_CLASSIFICATION	1.5879586699771883E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999976835460159	WITHOUT_CLASSIFICATION	2.3164539841939584E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999991150848164	WITHOUT_CLASSIFICATION	8.849151835908378E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983291663291	WITHOUT_CLASSIFICATION	1.67083367082322E-6	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999308678316	WITHOUT_CLASSIFICATION	6.913216838320692E-8	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999998039614135	WITHOUT_CLASSIFICATION	1.9603858656544564E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999585790458078	WITHOUT_CLASSIFICATION	4.1420954192297034E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.99999989436254	WITHOUT_CLASSIFICATION	1.0563746010408104E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999996448603662	WITHOUT_CLASSIFICATION	3.5513963375642354E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999703697708	WITHOUT_CLASSIFICATION	2.9630229153092624E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999584584023	WITHOUT_CLASSIFICATION	4.154159769833764E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999766423732	WITHOUT_CLASSIFICATION	2.3357626751613104E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999707616662	WITHOUT_CLASSIFICATION	2.9238333799112505E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999993387577532	WITHOUT_CLASSIFICATION	6.612422468192082E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999999914784505	WITHOUT_CLASSIFICATION	8.521549506343509E-8	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999998537650098	WITHOUT_CLASSIFICATION	1.462349901958964E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999731534540806	WITHOUT_CLASSIFICATION	2.684654591951853E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999970133963594	WITHOUT_CLASSIFICATION	2.9866036405995492E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999997140716049	WITHOUT_CLASSIFICATION	2.859283950056641E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999960604519242	WITHOUT_CLASSIFICATION	3.939548075762309E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988215137414	WITHOUT_CLASSIFICATION	1.1784862585797235E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999962959864512	WITHOUT_CLASSIFICATION	3.7040135487834018E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999993837160377	WITHOUT_CLASSIFICATION	6.162839623380026E-7	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999661689728616	WITHOUT_CLASSIFICATION	3.383102713837856E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999982741368175	WITHOUT_CLASSIFICATION	1.7258631824379736E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999538165086	WITHOUT_CLASSIFICATION	4.6183491347701895E-8	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981363544178183	WITHOUT_CLASSIFICATION	0.0018636455821817448	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999984125374546	WITHOUT_CLASSIFICATION	1.5874625454063264E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999992604995526	WITHOUT_CLASSIFICATION	7.395004474449547E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996418057457	WITHOUT_CLASSIFICATION	3.581942542371447E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992474303788	WITHOUT_CLASSIFICATION	7.525696211743837E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999868749637668	WITHOUT_CLASSIFICATION	1.312503623319645E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999992193782502	WITHOUT_CLASSIFICATION	7.806217498498537E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999999991333162	WITHOUT_CLASSIFICATION	8.666838122731028E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992474303788	WITHOUT_CLASSIFICATION	7.525696211743837E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998720508558	WITHOUT_CLASSIFICATION	1.279491440701197E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988215137414	WITHOUT_CLASSIFICATION	1.1784862585797235E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999721526227497	WITHOUT_CLASSIFICATION	2.784737725034617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999053492189062	WITHOUT_CLASSIFICATION	9.465078109392622E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999991224988296	WITHOUT_CLASSIFICATION	8.775011703056267E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999703697708	WITHOUT_CLASSIFICATION	2.9630229153092624E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999584584023	WITHOUT_CLASSIFICATION	4.154159769833764E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999766423732	WITHOUT_CLASSIFICATION	2.3357626751613104E-8	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999991795071	WITHOUT_CLASSIFICATION	8.204929565767379E-10	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999998005987468	WITHOUT_CLASSIFICATION	1.9940125322688634E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999984177757273	WITHOUT_CLASSIFICATION	1.5822242726763798E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999804108488	WITHOUT_CLASSIFICATION	1.958915122545201E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999659841	WITHOUT_CLASSIFICATION	3.401591886335131E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999992474303788	WITHOUT_CLASSIFICATION	7.525696211743837E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999707616662	WITHOUT_CLASSIFICATION	2.9238333799112505E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999993387577532	WITHOUT_CLASSIFICATION	6.612422468192082E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999604324977	WITHOUT_CLASSIFICATION	3.956750226968418E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998647092369	WITHOUT_CLASSIFICATION	1.352907631473456E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999982629038	WITHOUT_CLASSIFICATION	1.7370962876746767E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999919235287	WITHOUT_CLASSIFICATION	8.076471278913418E-9	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999164960532	WITHOUT_CLASSIFICATION	8.35039467460337E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999832784026	WITHOUT_CLASSIFICATION	1.6721597417504528E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279117678758	WITHOUT_CLASSIFICATION	7.208823212426454E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999764470119	WITHOUT_CLASSIFICATION	2.3552988187075795E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9991825421503524	WITHOUT_CLASSIFICATION	8.174578496476106E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999998153038975	WITHOUT_CLASSIFICATION	1.8469610245696446E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999996300134996	WITHOUT_CLASSIFICATION	3.6998650044350677E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999324301478	WITHOUT_CLASSIFICATION	6.756985220458888E-8	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998177723670072	WITHOUT_CLASSIFICATION	1.822276329927086E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646751587107	WITHOUT_CLASSIFICATION	3.5324841289322294E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985855518009	WITHOUT_CLASSIFICATION	1.414448199094673E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999324301478	WITHOUT_CLASSIFICATION	6.756985220458888E-8	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999933942455767	WITHOUT_CLASSIFICATION	6.605754423357658E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999924440645	WITHOUT_CLASSIFICATION	7.555935503313054E-8	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998161590168088	WITHOUT_CLASSIFICATION	1.8384098319137744E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999434189456212	WITHOUT_CLASSIFICATION	5.658105437876556E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999408818539798	WITHOUT_CLASSIFICATION	5.911814602022435E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999780583267832	WITHOUT_CLASSIFICATION	2.194167321679049E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572786990288	WITHOUT_CLASSIFICATION	4.272130097117438E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997049699049	WITHOUT_CLASSIFICATION	2.9503009510412337E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999916909305	WITHOUT_CLASSIFICATION	8.309069573213335E-9	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.99999999524083	WITHOUT_CLASSIFICATION	4.759170039667262E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999999740700731	WITHOUT_CLASSIFICATION	2.5929926897766543E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999919469508	WITHOUT_CLASSIFICATION	8.053049122354397E-9	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999997702824008	WITHOUT_CLASSIFICATION	2.2971759928155306E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999987410926118	WITHOUT_CLASSIFICATION	1.2589073881551468E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999995751327115	WITHOUT_CLASSIFICATION	4.2486728839660785E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999825207645177	WITHOUT_CLASSIFICATION	1.747923548242219E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998067542608	WITHOUT_CLASSIFICATION	1.932457393286799E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998845253437064	WITHOUT_CLASSIFICATION	1.1547465629359903E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999969060621493	WITHOUT_CLASSIFICATION	3.093937850624559E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999832062881252	WITHOUT_CLASSIFICATION	1.6793711874834132E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999997942222977	WITHOUT_CLASSIFICATION	2.0577770232471276E-7	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998021091336	WITHOUT_CLASSIFICATION	1.978908664107894E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999646178230063	WITHOUT_CLASSIFICATION	3.538217699381778E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822443675266	WITHOUT_CLASSIFICATION	1.7755632473505015E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989075125334909	WITHOUT_CLASSIFICATION	0.0010924874665092117	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995233489853	WITHOUT_CLASSIFICATION	4.766510146396821E-7	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999995225777413	WITHOUT_CLASSIFICATION	4.774222586828518E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999908802552318	WITHOUT_CLASSIFICATION	9.119744768271139E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999924597567023	WITHOUT_CLASSIFICATION	7.540243297758251E-6	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976801805488	WITHOUT_CLASSIFICATION	2.3198194512048635E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999346012791	WITHOUT_CLASSIFICATION	6.539872090187236E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992807532229	WITHOUT_CLASSIFICATION	7.192467772507057E-7	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998682949335	WITHOUT_CLASSIFICATION	1.3170506655398218E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999999781271754	WITHOUT_CLASSIFICATION	2.1872824593238503E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996667547628	WITHOUT_CLASSIFICATION	3.332452371912633E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999924775050643	WITHOUT_CLASSIFICATION	7.5224949357410305E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995139041996	WITHOUT_CLASSIFICATION	4.860958003189139E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995475373189	WITHOUT_CLASSIFICATION	4.5246268100586576E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999969865264015	WITHOUT_CLASSIFICATION	3.0134735986292648E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999823384932	WITHOUT_CLASSIFICATION	1.7661506741174867E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990219715409	WITHOUT_CLASSIFICATION	9.780284590720433E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999991786876191	WITHOUT_CLASSIFICATION	8.213123808478856E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998832549889107	WITHOUT_CLASSIFICATION	1.1674501108918711E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998958622987236	WITHOUT_CLASSIFICATION	1.041377012764144E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997116601139	WITHOUT_CLASSIFICATION	2.883398860029975E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999990223011107	WITHOUT_CLASSIFICATION	9.776988893319434E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999985179879779	WITHOUT_CLASSIFICATION	1.4820120221041244E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999556367974788	WITHOUT_CLASSIFICATION	4.436320252134812E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999877658607	WITHOUT_CLASSIFICATION	1.2234139289596725E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9977985680973089	WITHOUT_CLASSIFICATION	0.0022014319026910046	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999892051931	WITHOUT_CLASSIFICATION	1.0794806822626414E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994973381049	WITHOUT_CLASSIFICATION	5.026618951479776E-7	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999995932568173	WITHOUT_CLASSIFICATION	4.0674318268527046E-7	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999975631273	WITHOUT_CLASSIFICATION	2.4368726711547026E-9	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999993958227374	WITHOUT_CLASSIFICATION	6.041772625512634E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999530902137	WITHOUT_CLASSIFICATION	4.690978633910847E-8	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999786786399	WITHOUT_CLASSIFICATION	2.132136009882065E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999253973190048	WITHOUT_CLASSIFICATION	7.460268099530705E-5	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996976430159793	WITHOUT_CLASSIFICATION	3.023569840206969E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999990578864439	WITHOUT_CLASSIFICATION	9.421135560186568E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999847835541	WITHOUT_CLASSIFICATION	1.5216445858397137E-8	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997245274153087	WITHOUT_CLASSIFICATION	2.7547258469128326E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999870729621804	WITHOUT_CLASSIFICATION	1.2927037819669707E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999612945949	WITHOUT_CLASSIFICATION	3.870540516821664E-8	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999954927323754	WITHOUT_CLASSIFICATION	4.507267624610905E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995818048796	WITHOUT_CLASSIFICATION	4.181951204456866E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999670962121053	WITHOUT_CLASSIFICATION	3.290378789465991E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999995446344687	WITHOUT_CLASSIFICATION	4.5536553130305975E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999985197758	WITHOUT_CLASSIFICATION	1.4802241088881888E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999995941598248	WITHOUT_CLASSIFICATION	4.058401751656212E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999482640689	WITHOUT_CLASSIFICATION	5.173593103518151E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999984501356637	WITHOUT_CLASSIFICATION	1.5498643362935446E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9996376282657994	WITHOUT_CLASSIFICATION	3.62371734200679E-4	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999983271346552	WITHOUT_CLASSIFICATION	1.672865344809202E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999956895862157	WITHOUT_CLASSIFICATION	4.310413784422172E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999967697783098	WITHOUT_CLASSIFICATION	3.2302216903595813E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999120359054	WITHOUT_CLASSIFICATION	8.796409458545963E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999732448137383	WITHOUT_CLASSIFICATION	2.675518626160657E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999965657782452	WITHOUT_CLASSIFICATION	3.434221754814572E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999996132573726	WITHOUT_CLASSIFICATION	3.8674262728616334E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998341565859628	WITHOUT_CLASSIFICATION	1.6584341403736488E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997603858603454	WITHOUT_CLASSIFICATION	2.396141396546167E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999999188022284	WITHOUT_CLASSIFICATION	8.119777159331995E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999965271129737	WITHOUT_CLASSIFICATION	3.4728870263748896E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999962897959388	WITHOUT_CLASSIFICATION	3.7102040612527626E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999990912600625	WITHOUT_CLASSIFICATION	9.087399375554035E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999975289635125	WITHOUT_CLASSIFICATION	2.471036487509644E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999732321557071	WITHOUT_CLASSIFICATION	2.676784429293419E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999969129233	WITHOUT_CLASSIFICATION	3.0870767285521574E-9	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999841559590432	WITHOUT_CLASSIFICATION	1.584404095674791E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999923710939	WITHOUT_CLASSIFICATION	7.628906129673453E-9	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999871268798909	WITHOUT_CLASSIFICATION	1.2873120109092225E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999993978303032	WITHOUT_CLASSIFICATION	6.021696968284807E-7	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999965297605	WITHOUT_CLASSIFICATION	3.4702394354052224E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999996417602026	WITHOUT_CLASSIFICATION	3.5823979741728995E-7	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999993526	WITHOUT_CLASSIFICATION	6.473093673090174E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999862485539899	WITHOUT_CLASSIFICATION	1.3751446010107838E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999350437108826	WITHOUT_CLASSIFICATION	6.495628911740147E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998350026665	WITHOUT_CLASSIFICATION	1.6499733340317614E-7	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999994067113906	WITHOUT_CLASSIFICATION	5.932886093119086E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999770469415439	WITHOUT_CLASSIFICATION	2.295305845613101E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999997762072326	WITHOUT_CLASSIFICATION	2.2379276743781894E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999527859728495	WITHOUT_CLASSIFICATION	4.721402715055437E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999897179254195	WITHOUT_CLASSIFICATION	1.0282074580548874E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999672711889908	WITHOUT_CLASSIFICATION	3.272881100926602E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999978245244184	WITHOUT_CLASSIFICATION	2.175475581671903E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999750378054	WITHOUT_CLASSIFICATION	2.49621945243813E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999948919341913	WITHOUT_CLASSIFICATION	5.108065808651152E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999961588621498	WITHOUT_CLASSIFICATION	3.841137850263788E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999741200389	WITHOUT_CLASSIFICATION	2.5879961140285823E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999948919341913	WITHOUT_CLASSIFICATION	5.108065808651152E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999998837346	WITHOUT_CLASSIFICATION	1.1626539373079883E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999378426534	WITHOUT_CLASSIFICATION	6.215734654100398E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999851977929752	WITHOUT_CLASSIFICATION	1.4802207024832634E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9991469348691814	WITHOUT_CLASSIFICATION	8.530651308186484E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.999999809072292	WITHOUT_CLASSIFICATION	1.9092770800233593E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999132248923	WITHOUT_CLASSIFICATION	8.67751076870401E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999913528102404	WITHOUT_CLASSIFICATION	8.647189759596293E-6	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999996805814486	WITHOUT_CLASSIFICATION	3.1941855141648385E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998308520432316	WITHOUT_CLASSIFICATION	1.6914795676841964E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999981922068583	WITHOUT_CLASSIFICATION	1.8077931417252617E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999996095895	WITHOUT_CLASSIFICATION	3.9041038911859876E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999992832615752	WITHOUT_CLASSIFICATION	7.167384248446659E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999887851324222	WITHOUT_CLASSIFICATION	1.1214867577927969E-5	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999997347361	WITHOUT_CLASSIFICATION	2.65263849943584E-10	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999943990987331	WITHOUT_CLASSIFICATION	5.600901266878211E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999895335233522	WITHOUT_CLASSIFICATION	1.0466476647762036E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9940887666261925	WITHOUT_CLASSIFICATION	0.005911233373807493	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9940887666261925	WITHOUT_CLASSIFICATION	0.005911233373807493	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999993142683231	WITHOUT_CLASSIFICATION	6.857316768885176E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999838421012728	WITHOUT_CLASSIFICATION	1.6157898727189455E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996486618057	WITHOUT_CLASSIFICATION	3.513381942877219E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999315860916458	WITHOUT_CLASSIFICATION	6.84139083542518E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999992607086606	WITHOUT_CLASSIFICATION	7.392913394278929E-7	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999813162795771	WITHOUT_CLASSIFICATION	1.8683720422948484E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999985302275278	WITHOUT_CLASSIFICATION	1.4697724721751446E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999873140274	WITHOUT_CLASSIFICATION	1.2685972518084952E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999859276939	WITHOUT_CLASSIFICATION	1.407230609507374E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999897017860752	WITHOUT_CLASSIFICATION	1.0298213924770148E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999953837179	WITHOUT_CLASSIFICATION	4.616282191565685E-9	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999902039717	WITHOUT_CLASSIFICATION	9.796028338585907E-9	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999972241434231	WITHOUT_CLASSIFICATION	2.7758565768233893E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999961889615443	WITHOUT_CLASSIFICATION	3.8110384555968773E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999843087702	WITHOUT_CLASSIFICATION	1.5691229718426292E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999646178230063	WITHOUT_CLASSIFICATION	3.538217699381778E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999940144109208	WITHOUT_CLASSIFICATION	5.9855890791353675E-6	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999860705164	WITHOUT_CLASSIFICATION	1.3929483589062702E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9986319420754377	WITHOUT_CLASSIFICATION	0.0013680579245623529	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999876537459615	WITHOUT_CLASSIFICATION	1.2346254038458389E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999980347954	WITHOUT_CLASSIFICATION	1.9652045548990144E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999970365996362	WITHOUT_CLASSIFICATION	2.9634003636660745E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999999349026	WITHOUT_CLASSIFICATION	6.50973220071757E-11	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999414725412	WITHOUT_CLASSIFICATION	5.852745880877964E-8	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999963796598134	WITHOUT_CLASSIFICATION	3.620340186621154E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999943534409522	WITHOUT_CLASSIFICATION	5.6465590478867466E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999999491423	WITHOUT_CLASSIFICATION	5.085753856555E-11	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999964283811018	WITHOUT_CLASSIFICATION	3.5716188982357343E-6	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999881954597245	WITHOUT_CLASSIFICATION	1.1804540275562357E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999985311975442	WITHOUT_CLASSIFICATION	1.4688024557724345E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999941394410823	WITHOUT_CLASSIFICATION	5.860558917650741E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999991412971923	WITHOUT_CLASSIFICATION	8.58702807857741E-7	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999912435173123	WITHOUT_CLASSIFICATION	8.756482687779607E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999841236131615	WITHOUT_CLASSIFICATION	1.5876386838504336E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999974902378758	WITHOUT_CLASSIFICATION	2.5097621242804542E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999617418308047	WITHOUT_CLASSIFICATION	3.825816919527874E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999153516252717	WITHOUT_CLASSIFICATION	8.464837472829843E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999792390928258	WITHOUT_CLASSIFICATION	2.0760907174190007E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999993103402339	WITHOUT_CLASSIFICATION	6.896597660213959E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999997384109204	WITHOUT_CLASSIFICATION	2.615890795939293E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999974315260762	WITHOUT_CLASSIFICATION	2.568473923691808E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999979884490738	WITHOUT_CLASSIFICATION	2.0115509261248874E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999850666325	WITHOUT_CLASSIFICATION	1.493336749904987E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999349729037	WITHOUT_CLASSIFICATION	6.502709630948262E-8	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999753753771	WITHOUT_CLASSIFICATION	2.462462292337026E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999989589969677	WITHOUT_CLASSIFICATION	1.0410030322656846E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982576369142	WITHOUT_CLASSIFICATION	1.7423630858669849E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989491954931	WITHOUT_CLASSIFICATION	1.0508045068601097E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987320378058	WITHOUT_CLASSIFICATION	1.267962194281195E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999789582085	WITHOUT_CLASSIFICATION	2.104179142470475E-8	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999691468782	WITHOUT_CLASSIFICATION	3.0853121800709554E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996119410387	WITHOUT_CLASSIFICATION	3.880589613006782E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999768938479	WITHOUT_CLASSIFICATION	2.310615213318153E-8	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999975916544703	WITHOUT_CLASSIFICATION	2.4083455297118734E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689813246206	WITHOUT_CLASSIFICATION	3.101867537936901E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999975916544703	WITHOUT_CLASSIFICATION	2.4083455297118734E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999723674772656	WITHOUT_CLASSIFICATION	2.7632522734394615E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999999179976694	WITHOUT_CLASSIFICATION	8.200233058030896E-8	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999964293348765	WITHOUT_CLASSIFICATION	3.570665123527372E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999987821745078	WITHOUT_CLASSIFICATION	1.2178254922044637E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999057494939	WITHOUT_CLASSIFICATION	9.425050597136331E-8	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999944607866	WITHOUT_CLASSIFICATION	5.5392134408187446E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998673998401	WITHOUT_CLASSIFICATION	1.326001599263974E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999813262884	WITHOUT_CLASSIFICATION	1.8673711472734385E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998139588444	WITHOUT_CLASSIFICATION	1.8604115560739695E-7	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996931175985405	WITHOUT_CLASSIFICATION	3.068824014595201E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994028326251	WITHOUT_CLASSIFICATION	5.971673750060191E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999998980560029	WITHOUT_CLASSIFICATION	1.0194399703554E-7	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999996420014486	WITHOUT_CLASSIFICATION	3.579985514510078E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999563850333	WITHOUT_CLASSIFICATION	4.361496670377449E-8	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9998768464136414	WITHOUT_CLASSIFICATION	1.2315358635866066E-4	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999993610458	WITHOUT_CLASSIFICATION	6.389542048456548E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999985292358173	WITHOUT_CLASSIFICATION	1.4707641826212424E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999985292358173	WITHOUT_CLASSIFICATION	1.4707641826212424E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999984022599726	WITHOUT_CLASSIFICATION	1.597740027365991E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999740319587	WITHOUT_CLASSIFICATION	2.596804132038634E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999995394507	WITHOUT_CLASSIFICATION	4.605492906205605E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999983196092398	WITHOUT_CLASSIFICATION	1.6803907601921663E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999997268728	WITHOUT_CLASSIFICATION	2.7312712903229536E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999714561225	WITHOUT_CLASSIFICATION	2.8543877498420227E-8	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9980873822634921	WITHOUT_CLASSIFICATION	0.0019126177365078167	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999922212820275	WITHOUT_CLASSIFICATION	7.778717972508109E-6	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999584034606	WITHOUT_CLASSIFICATION	4.1596539392006954E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999993680096471	WITHOUT_CLASSIFICATION	6.31990353038722E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999934221704	WITHOUT_CLASSIFICATION	6.577829604732135E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999983310649	WITHOUT_CLASSIFICATION	1.6689351285085574E-9	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999962956062812	WITHOUT_CLASSIFICATION	3.704393718733835E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999932285851	WITHOUT_CLASSIFICATION	6.771414892651034E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999973302221461	WITHOUT_CLASSIFICATION	2.6697778538820513E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999445915	WITHOUT_CLASSIFICATION	5.5408571969218324E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999995218565159	WITHOUT_CLASSIFICATION	4.781434841860265E-7	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999932866473268	WITHOUT_CLASSIFICATION	6.713352673204093E-5	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.999984632395943	WITHOUT_CLASSIFICATION	1.536760405701402E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996232304244	WITHOUT_CLASSIFICATION	3.767695756440578E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997973681327	WITHOUT_CLASSIFICATION	2.026318673242362E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999863607068242	WITHOUT_CLASSIFICATION	1.3639293175689252E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999947283654569	WITHOUT_CLASSIFICATION	5.271634543218263E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9996948286806202	WITHOUT_CLASSIFICATION	3.0517131937975655E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.999998551786609	WITHOUT_CLASSIFICATION	1.4482133909346914E-6	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999826068017	WITHOUT_CLASSIFICATION	1.7393198359218384E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999990684041	WITHOUT_CLASSIFICATION	9.315959007170925E-9	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998658031094084	WITHOUT_CLASSIFICATION	1.3419689059157217E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999998601605051	WITHOUT_CLASSIFICATION	1.3983949496315786E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999825873114	WITHOUT_CLASSIFICATION	1.7412688607150915E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999048311656	WITHOUT_CLASSIFICATION	9.516883426922555E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999988500079933	WITHOUT_CLASSIFICATION	1.1499920066805018E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996609303960999	WITHOUT_CLASSIFICATION	3.390696039000496E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999993445306403	WITHOUT_CLASSIFICATION	6.554693597443347E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996181827236357	WITHOUT_CLASSIFICATION	3.818172763643363E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999983796938671	WITHOUT_CLASSIFICATION	1.6203061329131337E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998769949954	WITHOUT_CLASSIFICATION	1.2300500470618632E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999848051604847	WITHOUT_CLASSIFICATION	1.5194839515159893E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999488616665	WITHOUT_CLASSIFICATION	5.1138333495683576E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999979798849306	WITHOUT_CLASSIFICATION	2.0201150694636975E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999999880514	WITHOUT_CLASSIFICATION	1.1948607446418074E-10	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998553701092	WITHOUT_CLASSIFICATION	1.446298908052049E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999905898461864	WITHOUT_CLASSIFICATION	9.410153813577326E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.882913486087144	WITHOUT_CLASSIFICATION	0.11708651391285597	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999958068282911	WITHOUT_CLASSIFICATION	4.19317170880799E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999253517368993	WITHOUT_CLASSIFICATION	7.464826310064218E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6617284400338994	WITHOUT_CLASSIFICATION	0.33827155996610064	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999965508434	WITHOUT_CLASSIFICATION	3.449156546652966E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999994783408756	WITHOUT_CLASSIFICATION	5.216591243970849E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997739342513	WITHOUT_CLASSIFICATION	2.260657485442639E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997705902444	WITHOUT_CLASSIFICATION	2.294097557358141E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999431923636	WITHOUT_CLASSIFICATION	5.680763642804947E-8	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999982518294	WITHOUT_CLASSIFICATION	1.7481705107696032E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999854788999514	WITHOUT_CLASSIFICATION	1.4521100048629602E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999927250847229	WITHOUT_CLASSIFICATION	7.274915277041412E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998720508558	WITHOUT_CLASSIFICATION	1.279491440701197E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998720508558	WITHOUT_CLASSIFICATION	1.279491440701197E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999840475109	WITHOUT_CLASSIFICATION	1.5952489115646172E-8	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999963954716189	WITHOUT_CLASSIFICATION	3.6045283812234485E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.99999949035277	WITHOUT_CLASSIFICATION	5.096472299918532E-7	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999999523778142	WITHOUT_CLASSIFICATION	4.7622185773127335E-8	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998859428432	WITHOUT_CLASSIFICATION	1.1405715676033608E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9986478838896214	WITHOUT_CLASSIFICATION	0.0013521161103786418	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998314618943099	WITHOUT_CLASSIFICATION	1.68538105690033E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999988271750636	WITHOUT_CLASSIFICATION	1.1728249363514364E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999942023491	WITHOUT_CLASSIFICATION	5.797650959677758E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999996187979484	WITHOUT_CLASSIFICATION	3.812020515111901E-7	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999999037111365	WITHOUT_CLASSIFICATION	9.628886350456543E-7	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999964378604269	WITHOUT_CLASSIFICATION	3.5621395731044223E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999994231454614	WITHOUT_CLASSIFICATION	5.768545386086497E-7	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999741623182	WITHOUT_CLASSIFICATION	2.5837681837146978E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999999805793307	WITHOUT_CLASSIFICATION	1.942066926332986E-8	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999999533873302	WITHOUT_CLASSIFICATION	4.661266980251951E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998621981133	WITHOUT_CLASSIFICATION	1.378018866542623E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.999965987256173	WITHOUT_CLASSIFICATION	3.401274382693935E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999804990232	WITHOUT_CLASSIFICATION	1.950097690681347E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999361050913808	WITHOUT_CLASSIFICATION	6.389490861928438E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999995135487	WITHOUT_CLASSIFICATION	4.864513162099299E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999988685808042	WITHOUT_CLASSIFICATION	1.1314191958317954E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999823747232766	WITHOUT_CLASSIFICATION	1.7625276723477508E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999118263091958	WITHOUT_CLASSIFICATION	8.817369080419316E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999642407010132	WITHOUT_CLASSIFICATION	3.5759298986880766E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.998097681239282	WITHOUT_CLASSIFICATION	0.0019023187607180735	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9934036415228201	WITHOUT_CLASSIFICATION	0.006596358477179837	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997490427953266	WITHOUT_CLASSIFICATION	2.5095720467333525E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999979158105743	WITHOUT_CLASSIFICATION	2.0841894256521645E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999823747232766	WITHOUT_CLASSIFICATION	1.7625276723477508E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999999964645302	WITHOUT_CLASSIFICATION	3.535469795274029E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999740711	WITHOUT_CLASSIFICATION	2.592897111869061E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999953649944883	WITHOUT_CLASSIFICATION	4.6350055117698385E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999945358470732	WITHOUT_CLASSIFICATION	5.464152926818288E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999451850462	WITHOUT_CLASSIFICATION	5.481495392410981E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999970487140794	WITHOUT_CLASSIFICATION	2.9512859207133828E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999951657444454	WITHOUT_CLASSIFICATION	4.834255554692063E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999011575069	WITHOUT_CLASSIFICATION	9.884249318164785E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993894790570116	WITHOUT_CLASSIFICATION	6.105209429884019E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999945358470732	WITHOUT_CLASSIFICATION	5.464152926818288E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999984233064	WITHOUT_CLASSIFICATION	1.5766936489146013E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998892761667	WITHOUT_CLASSIFICATION	1.1072383339204102E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999864651582473	WITHOUT_CLASSIFICATION	1.3534841752647576E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999744169114534	WITHOUT_CLASSIFICATION	2.5583088546706363E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999962256619275	WITHOUT_CLASSIFICATION	3.7743380725142393E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999934221704	WITHOUT_CLASSIFICATION	6.577829604732135E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999350285151	WITHOUT_CLASSIFICATION	6.497148475676446E-8	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999972954665313	WITHOUT_CLASSIFICATION	2.7045334687983607E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997442323423	WITHOUT_CLASSIFICATION	2.5576765775479354E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9956741342336088	WITHOUT_CLASSIFICATION	0.004325865766391193	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999976996643	WITHOUT_CLASSIFICATION	2.300335719462548E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999997762427653	WITHOUT_CLASSIFICATION	2.2375723466894537E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999981105584317	WITHOUT_CLASSIFICATION	1.8894415682462146E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999888245419	WITHOUT_CLASSIFICATION	1.1175458037257707E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998011179677	WITHOUT_CLASSIFICATION	1.988820323646188E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999901183616631	WITHOUT_CLASSIFICATION	9.881638336964758E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824481884207	WITHOUT_CLASSIFICATION	1.755181157933732E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999622527753	WITHOUT_CLASSIFICATION	3.7747224657457285E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.99999852062166	WITHOUT_CLASSIFICATION	1.4793783400100064E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999933205185756	WITHOUT_CLASSIFICATION	6.679481424370217E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999977443714837	WITHOUT_CLASSIFICATION	2.2556285163821446E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999953229708453	WITHOUT_CLASSIFICATION	4.67702915468535E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999992758042721	WITHOUT_CLASSIFICATION	7.241957279366142E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995830141606	WITHOUT_CLASSIFICATION	4.16985839374838E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999987885272186	WITHOUT_CLASSIFICATION	1.211472781343248E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999996825907688	WITHOUT_CLASSIFICATION	3.1740923114572296E-7	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999984844494801	WITHOUT_CLASSIFICATION	1.5155505198988317E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999658954094485	WITHOUT_CLASSIFICATION	3.410459055158238E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999990457306446	WITHOUT_CLASSIFICATION	9.542693554443073E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999917932	WITHOUT_CLASSIFICATION	8.20671727122885E-12	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997078005586191	WITHOUT_CLASSIFICATION	2.921994413808954E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.99993120286168	WITHOUT_CLASSIFICATION	6.879713831998311E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998421969276	WITHOUT_CLASSIFICATION	1.5780307244623294E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951698744736	WITHOUT_CLASSIFICATION	4.830125526393407E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964269378671	WITHOUT_CLASSIFICATION	3.573062132944091E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999836706673075	WITHOUT_CLASSIFICATION	1.6329332692451647E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999124473997186	WITHOUT_CLASSIFICATION	8.755260028126589E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999944275409158	WITHOUT_CLASSIFICATION	5.5724590842204105E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999963433325	WITHOUT_CLASSIFICATION	3.6566675105424392E-9	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999722482225001	WITHOUT_CLASSIFICATION	2.7751777499887824E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999764952329986	WITHOUT_CLASSIFICATION	2.3504767001482696E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999838533550435	WITHOUT_CLASSIFICATION	1.614664495653055E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999994200468855	WITHOUT_CLASSIFICATION	5.799531145619674E-7	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999981057217993	WITHOUT_CLASSIFICATION	1.8942782006586248E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999995561407501	WITHOUT_CLASSIFICATION	4.438592499948629E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999994034825749	WITHOUT_CLASSIFICATION	5.965174251876933E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999999947901929	WITHOUT_CLASSIFICATION	5.2098070895232394E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999823740651	WITHOUT_CLASSIFICATION	1.762593494162954E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999893539893	WITHOUT_CLASSIFICATION	1.0646010768278712E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999994747239068	WITHOUT_CLASSIFICATION	5.252760932462172E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999941682271467	WITHOUT_CLASSIFICATION	5.8317728532154525E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999991072971193	WITHOUT_CLASSIFICATION	8.927028807996764E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999961606187873	WITHOUT_CLASSIFICATION	3.839381212716662E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9522720978227939	WITHOUT_CLASSIFICATION	0.04772790217720621	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999992722225443	WITHOUT_CLASSIFICATION	7.277774557270192E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997041473692	WITHOUT_CLASSIFICATION	2.958526308142381E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998171654848	WITHOUT_CLASSIFICATION	1.8283451517678602E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9979446017248632	WITHOUT_CLASSIFICATION	0.0020553982751368056	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999889986135293	WITHOUT_CLASSIFICATION	1.1001386470699085E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999998707838215	WITHOUT_CLASSIFICATION	1.292161785398627E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999834632056417	WITHOUT_CLASSIFICATION	1.653679435839975E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999958222643658	WITHOUT_CLASSIFICATION	4.177735634202388E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951698744736	WITHOUT_CLASSIFICATION	4.830125526393407E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999995893476948	WITHOUT_CLASSIFICATION	4.106523052049259E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999630545694	WITHOUT_CLASSIFICATION	3.694543056809943E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999999550828992	WITHOUT_CLASSIFICATION	4.491710084156794E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999994528121228	WITHOUT_CLASSIFICATION	5.47187877200625E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999936914191532	WITHOUT_CLASSIFICATION	6.30858084681616E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999985003449356	WITHOUT_CLASSIFICATION	1.499655064401872E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999610243165	WITHOUT_CLASSIFICATION	3.897568343153379E-8	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999999508217	WITHOUT_CLASSIFICATION	4.91782870317777E-10	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999975025523	WITHOUT_CLASSIFICATION	2.4974477206604707E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999826423757	WITHOUT_CLASSIFICATION	1.735762428324237E-8	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999044941781	WITHOUT_CLASSIFICATION	9.550582190631004E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999990981277726	WITHOUT_CLASSIFICATION	9.018722273899666E-6	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999540956991	WITHOUT_CLASSIFICATION	4.590430097684557E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999999838597375	WITHOUT_CLASSIFICATION	1.6140262514429478E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999723674772656	WITHOUT_CLASSIFICATION	2.7632522734394615E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999997978644	WITHOUT_CLASSIFICATION	2.0213569800269255E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999992959508	WITHOUT_CLASSIFICATION	7.040491722973781E-10	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999993564777	WITHOUT_CLASSIFICATION	6.435223773955554E-10	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999997163062021	WITHOUT_CLASSIFICATION	2.836937979836112E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999959202357	WITHOUT_CLASSIFICATION	4.079764276593067E-9	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999925960073886	WITHOUT_CLASSIFICATION	7.403992611400204E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999925960073886	WITHOUT_CLASSIFICATION	7.403992611400204E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999919059281306	WITHOUT_CLASSIFICATION	8.094071869482073E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999617370138	WITHOUT_CLASSIFICATION	3.8262986146173844E-8	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999851442194491	WITHOUT_CLASSIFICATION	1.4855780550905636E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998385507463453	WITHOUT_CLASSIFICATION	1.6144925365465138E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999995430131755	WITHOUT_CLASSIFICATION	4.569868244786741E-7	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997489385798	WITHOUT_CLASSIFICATION	2.5106142017727716E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999953730047376	WITHOUT_CLASSIFICATION	4.6269952623445864E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999978683304	WITHOUT_CLASSIFICATION	2.1316696059970373E-9	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999978683304	WITHOUT_CLASSIFICATION	2.1316696059970373E-9	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999995912240341	WITHOUT_CLASSIFICATION	4.087759658121996E-7	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999997874165181	WITHOUT_CLASSIFICATION	2.125834818987553E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999999953799382	WITHOUT_CLASSIFICATION	4.620061805456347E-8	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998376578856	WITHOUT_CLASSIFICATION	1.623421144516891E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998376578856	WITHOUT_CLASSIFICATION	1.623421144516891E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998376578856	WITHOUT_CLASSIFICATION	1.623421144516891E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999869250594539	WITHOUT_CLASSIFICATION	1.3074940546160517E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999884088642	WITHOUT_CLASSIFICATION	1.1591135874318935E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9115641829696812	WITHOUT_CLASSIFICATION	0.08843581703031872	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998980701334371	WITHOUT_CLASSIFICATION	1.0192986656285509E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999588675522	WITHOUT_CLASSIFICATION	4.113244780739774E-8	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999974113564477	WITHOUT_CLASSIFICATION	2.588643552413601E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999774750892204	WITHOUT_CLASSIFICATION	2.2524910779594003E-5	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999292213826843	WITHOUT_CLASSIFICATION	7.077861731570956E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999943357522	WITHOUT_CLASSIFICATION	5.664247752127507E-9	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999972812654595	WITHOUT_CLASSIFICATION	2.7187345405129067E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999838076818	WITHOUT_CLASSIFICATION	1.6192318199113377E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999963273065174	WITHOUT_CLASSIFICATION	3.6726934825346483E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999999802376929	WITHOUT_CLASSIFICATION	1.976230708765823E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999343421927	WITHOUT_CLASSIFICATION	6.565780725510752E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999354340181	WITHOUT_CLASSIFICATION	6.456598181320276E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999993535981481	WITHOUT_CLASSIFICATION	6.464018519489045E-7	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999999980739803	WITHOUT_CLASSIFICATION	1.926019707486983E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999999980739803	WITHOUT_CLASSIFICATION	1.926019707486983E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999844129825	WITHOUT_CLASSIFICATION	1.558701747589627E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999844129825	WITHOUT_CLASSIFICATION	1.5587017475896327E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999840379556	WITHOUT_CLASSIFICATION	1.5962044342250152E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999999437918068	WITHOUT_CLASSIFICATION	5.6208193284476434E-8	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999999437918068	WITHOUT_CLASSIFICATION	5.6208193284476434E-8	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999381707827	WITHOUT_CLASSIFICATION	6.182921723733306E-8	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999580122224	WITHOUT_CLASSIFICATION	4.19877776673814E-8	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999882384624521	WITHOUT_CLASSIFICATION	1.176153754793701E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999925960073886	WITHOUT_CLASSIFICATION	7.403992611400204E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999897981178062	WITHOUT_CLASSIFICATION	1.020188219371583E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999580122224	WITHOUT_CLASSIFICATION	4.19877776673814E-8	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999562265933576	WITHOUT_CLASSIFICATION	4.3773406642342665E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999690454924832	WITHOUT_CLASSIFICATION	3.095450751680453E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999715314642	WITHOUT_CLASSIFICATION	2.846853573968338E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999563018587	WITHOUT_CLASSIFICATION	4.369814127538956E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999984672251329	WITHOUT_CLASSIFICATION	1.5327748670341074E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999947585441062	WITHOUT_CLASSIFICATION	5.241455893764289E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999988801363832	WITHOUT_CLASSIFICATION	1.1198636168432798E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999988151065866	WITHOUT_CLASSIFICATION	1.1848934133884694E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999999720558115	WITHOUT_CLASSIFICATION	2.7944188495155186E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999945835868	WITHOUT_CLASSIFICATION	5.416413181153632E-9	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999996481482	WITHOUT_CLASSIFICATION	3.5185175339793943E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999993837411869	WITHOUT_CLASSIFICATION	6.162588130334278E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996626337802	WITHOUT_CLASSIFICATION	3.3736621978678863E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999998785112529	WITHOUT_CLASSIFICATION	1.2148874707262947E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999567488770197	WITHOUT_CLASSIFICATION	4.325112298025933E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999946980694457	WITHOUT_CLASSIFICATION	5.30193055423761E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999996128161655	WITHOUT_CLASSIFICATION	3.8718383460092354E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996292824399	WITHOUT_CLASSIFICATION	3.707175600330602E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996292824399	WITHOUT_CLASSIFICATION	3.707175600330602E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998009917496	WITHOUT_CLASSIFICATION	1.9900825045612733E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999999931851521	WITHOUT_CLASSIFICATION	6.814847903451299E-8	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994684839767	WITHOUT_CLASSIFICATION	5.315160233211149E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998706840862919	WITHOUT_CLASSIFICATION	1.2931591370807683E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999996713955518	WITHOUT_CLASSIFICATION	3.286044482219224E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999851209894379	WITHOUT_CLASSIFICATION	1.487901056200951E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999956425737907	WITHOUT_CLASSIFICATION	4.35742620924488E-6	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999987893554902	WITHOUT_CLASSIFICATION	1.210644509832006E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999978444917054	WITHOUT_CLASSIFICATION	2.155508294580024E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999959741137	WITHOUT_CLASSIFICATION	4.02588630370236E-9	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999530021035	WITHOUT_CLASSIFICATION	4.699789643165756E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999990981277726	WITHOUT_CLASSIFICATION	9.018722273899666E-6	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999394777151	WITHOUT_CLASSIFICATION	6.052228489562785E-8	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999785234689348	WITHOUT_CLASSIFICATION	2.1476531065191296E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999474973244352	WITHOUT_CLASSIFICATION	5.2502675564781145E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999879867267244	WITHOUT_CLASSIFICATION	1.2013273275643042E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999396240198	WITHOUT_CLASSIFICATION	6.037598018020067E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999396240198	WITHOUT_CLASSIFICATION	6.037598018020067E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999885202480941	WITHOUT_CLASSIFICATION	1.1479751905959714E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999987350141656	WITHOUT_CLASSIFICATION	1.2649858344049447E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999325806730386	WITHOUT_CLASSIFICATION	6.741932696133633E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999953489800266	WITHOUT_CLASSIFICATION	4.651019973433308E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999998833391786	WITHOUT_CLASSIFICATION	1.166608214153468E-7	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999982694909553	WITHOUT_CLASSIFICATION	1.7305090446961313E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998847628975167	WITHOUT_CLASSIFICATION	1.1523710248330217E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998346542828	WITHOUT_CLASSIFICATION	1.6534571736204852E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998778618075573	WITHOUT_CLASSIFICATION	1.2213819244271686E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999961613549	WITHOUT_CLASSIFICATION	3.838645122781555E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999994223233	WITHOUT_CLASSIFICATION	5.776766895683364E-10	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998346542828	WITHOUT_CLASSIFICATION	1.6534571736204852E-7	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999999819840436	WITHOUT_CLASSIFICATION	1.8015956416294304E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999954058486185	WITHOUT_CLASSIFICATION	4.594151381572724E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999994505517	WITHOUT_CLASSIFICATION	5.494483670291075E-10	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999896727187	WITHOUT_CLASSIFICATION	1.0327281166101279E-8	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999537968695	WITHOUT_CLASSIFICATION	4.620313045810987E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.99999999402652	WITHOUT_CLASSIFICATION	5.973479999546239E-9	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999965517636575	WITHOUT_CLASSIFICATION	3.448236342383804E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999990123689372	WITHOUT_CLASSIFICATION	9.876310627550328E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999998079879	WITHOUT_CLASSIFICATION	1.920120939696234E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998204710767478	WITHOUT_CLASSIFICATION	1.7952892325234424E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993908173300377	WITHOUT_CLASSIFICATION	6.091826699623206E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999785876958	WITHOUT_CLASSIFICATION	2.1412304117812662E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999998896897737	WITHOUT_CLASSIFICATION	1.1031022621737555E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999961317508651	WITHOUT_CLASSIFICATION	3.868249134844769E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999017023833615	WITHOUT_CLASSIFICATION	9.829761663846403E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999687503387	WITHOUT_CLASSIFICATION	3.124966132954865E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999988977402	WITHOUT_CLASSIFICATION	1.1022598059959037E-8	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999653648880424	WITHOUT_CLASSIFICATION	3.463511195758737E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999894156287341	WITHOUT_CLASSIFICATION	1.0584371265822956E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999963669162477	WITHOUT_CLASSIFICATION	3.6330837522749917E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999995674065958	WITHOUT_CLASSIFICATION	4.325934041251456E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999301244442	WITHOUT_CLASSIFICATION	6.987555574563696E-8	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999901530422157	WITHOUT_CLASSIFICATION	9.846957784179269E-6	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999446394405	WITHOUT_CLASSIFICATION	5.5360559543369905E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999852881606	WITHOUT_CLASSIFICATION	1.4711839456892268E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999471717070956	WITHOUT_CLASSIFICATION	5.2828292904349995E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999233398541	WITHOUT_CLASSIFICATION	7.666014589469801E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999833965359008	WITHOUT_CLASSIFICATION	1.660346409913817E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999989702301243	WITHOUT_CLASSIFICATION	1.0297698757301064E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999937963950009	WITHOUT_CLASSIFICATION	6.2036049990456875E-6	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997199837819	WITHOUT_CLASSIFICATION	2.800162181180977E-7	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999957982478771	WITHOUT_CLASSIFICATION	4.2017521228413594E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999667179185903	WITHOUT_CLASSIFICATION	3.3282081409720325E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999992004742	WITHOUT_CLASSIFICATION	7.99525855294529E-10	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998630966372	WITHOUT_CLASSIFICATION	1.3690336286888646E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999992770922773	WITHOUT_CLASSIFICATION	7.229077227258137E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999414537876	WITHOUT_CLASSIFICATION	5.8546212338008135E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999995932425	WITHOUT_CLASSIFICATION	4.0675750700435886E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998084683247	WITHOUT_CLASSIFICATION	1.9153167522576108E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999997707805796	WITHOUT_CLASSIFICATION	2.2921942039504994E-6	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999919622606217	WITHOUT_CLASSIFICATION	8.037739378232728E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999513189239	WITHOUT_CLASSIFICATION	4.868107597682855E-8	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999957050905779	WITHOUT_CLASSIFICATION	4.294909422064206E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999928382196	WITHOUT_CLASSIFICATION	7.161780378539359E-9	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999912149492	WITHOUT_CLASSIFICATION	8.785050887509939E-9	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999992048402	WITHOUT_CLASSIFICATION	7.951598002062796E-9	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999956338466	WITHOUT_CLASSIFICATION	4.366153410239213E-9	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999987162811992	WITHOUT_CLASSIFICATION	1.2837188007503769E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999999924432089	WITHOUT_CLASSIFICATION	7.55679109939463E-8	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999999018404354	WITHOUT_CLASSIFICATION	9.815956459206857E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773662424811	WITHOUT_CLASSIFICATION	2.2633757518880002E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999995268559118	WITHOUT_CLASSIFICATION	4.731440882881522E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999975256835	WITHOUT_CLASSIFICATION	2.4743165537788372E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999999107052	WITHOUT_CLASSIFICATION	8.929483633882487E-11	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998372791918	WITHOUT_CLASSIFICATION	1.6272080818916094E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999973484253503	WITHOUT_CLASSIFICATION	2.651574649840446E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999417488802677	WITHOUT_CLASSIFICATION	5.825111973228922E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999958060376951	WITHOUT_CLASSIFICATION	4.193962304985659E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999119755666	WITHOUT_CLASSIFICATION	8.802443336634223E-8	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999976490233	WITHOUT_CLASSIFICATION	2.3509766781957745E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999997897481858	WITHOUT_CLASSIFICATION	2.1025181417935887E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999980586213924	WITHOUT_CLASSIFICATION	1.94137860759163E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999619785653154	WITHOUT_CLASSIFICATION	3.802143468453038E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999121958	WITHOUT_CLASSIFICATION	8.780423841357122E-11	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999721822731	WITHOUT_CLASSIFICATION	2.7817726835906392E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999861028618567	WITHOUT_CLASSIFICATION	1.3897138143312798E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773662424811	WITHOUT_CLASSIFICATION	2.2633757518880002E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999956698374458	WITHOUT_CLASSIFICATION	4.330162554139621E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999868326702919	WITHOUT_CLASSIFICATION	1.3167329708165378E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999599431941	WITHOUT_CLASSIFICATION	4.00568059483305E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998459362172	WITHOUT_CLASSIFICATION	1.5406378277372174E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999694136962984	WITHOUT_CLASSIFICATION	3.0586303701505135E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999998934583161	WITHOUT_CLASSIFICATION	1.0654168392646193E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998778618075573	WITHOUT_CLASSIFICATION	1.2213819244271686E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997933743878501	WITHOUT_CLASSIFICATION	2.0662561214997353E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998630966372	WITHOUT_CLASSIFICATION	1.3690336286888646E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999860567546364	WITHOUT_CLASSIFICATION	1.3943245363635803E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999262653001	WITHOUT_CLASSIFICATION	7.37346998874584E-8	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999992425351	WITHOUT_CLASSIFICATION	7.574648882714877E-10	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999995991166	WITHOUT_CLASSIFICATION	4.008833996425051E-9	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999991239525192	WITHOUT_CLASSIFICATION	8.760474807494206E-7	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999997951224579	WITHOUT_CLASSIFICATION	2.04877542099367E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999858766451	WITHOUT_CLASSIFICATION	1.4123354913056345E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999843709808	WITHOUT_CLASSIFICATION	1.5629019185359092E-8	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999907500841633	WITHOUT_CLASSIFICATION	9.249915836759836E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999992983436	WITHOUT_CLASSIFICATION	7.016563613200026E-10	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999978139626711	WITHOUT_CLASSIFICATION	2.186037328996029E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999632008555657	WITHOUT_CLASSIFICATION	3.679914443440938E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999952023281	WITHOUT_CLASSIFICATION	4.7976719298781846E-9	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999952023281	WITHOUT_CLASSIFICATION	4.7976719298781846E-9	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999298915551	WITHOUT_CLASSIFICATION	7.010844493072642E-8	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999982944289642	WITHOUT_CLASSIFICATION	1.7055710359352863E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999982868473	WITHOUT_CLASSIFICATION	1.7131526800647291E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999820290973	WITHOUT_CLASSIFICATION	1.7970902663835286E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999965525648	WITHOUT_CLASSIFICATION	3.447435245263792E-9	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999445925647	WITHOUT_CLASSIFICATION	5.540743528695499E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999998465143	WITHOUT_CLASSIFICATION	1.5348568082526648E-10	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999992564682313	WITHOUT_CLASSIFICATION	7.435317686892126E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998956603587	WITHOUT_CLASSIFICATION	1.04339641237403E-7	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999877581522	WITHOUT_CLASSIFICATION	1.2241847854921615E-8	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999908000837944	WITHOUT_CLASSIFICATION	9.199916205556889E-6	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999965794084497	WITHOUT_CLASSIFICATION	3.4205915502857148E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999983574817511	WITHOUT_CLASSIFICATION	1.642518248843288E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999348684122	WITHOUT_CLASSIFICATION	6.513158777187835E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999706043943166	WITHOUT_CLASSIFICATION	2.9395605683339823E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999538851198	WITHOUT_CLASSIFICATION	4.6114880244431555E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999999971528651	WITHOUT_CLASSIFICATION	2.847134896024134E-8	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999951658075	WITHOUT_CLASSIFICATION	4.834192427208763E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999600303512	WITHOUT_CLASSIFICATION	3.996964887125699E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999067828197	WITHOUT_CLASSIFICATION	9.321718022650372E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999995006381269	WITHOUT_CLASSIFICATION	4.993618729613857E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999981939881	WITHOUT_CLASSIFICATION	1.8060119385686514E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999990635189473	WITHOUT_CLASSIFICATION	9.364810526465911E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9970303149323093	WITHOUT_CLASSIFICATION	0.0029696850676906696	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9960803526617815	WITHOUT_CLASSIFICATION	0.0039196473382184256	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988023760475	WITHOUT_CLASSIFICATION	1.1976239525099752E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993491964878	WITHOUT_CLASSIFICATION	6.508035121355694E-7	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999639473514	WITHOUT_CLASSIFICATION	3.6052648536471135E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998902708115	WITHOUT_CLASSIFICATION	1.0972918855539283E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999988473600575	WITHOUT_CLASSIFICATION	1.1526399424669064E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981363544178183	WITHOUT_CLASSIFICATION	0.0018636455821817448	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999998169287127	WITHOUT_CLASSIFICATION	1.830712872922104E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999993541761641	WITHOUT_CLASSIFICATION	6.458238358712473E-7	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9693470914958743	WITHOUT_CLASSIFICATION	0.030652908504125692	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999979128471242	WITHOUT_CLASSIFICATION	2.087152875850516E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999991787743784	WITHOUT_CLASSIFICATION	8.21225621509457E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999969887481408	WITHOUT_CLASSIFICATION	3.01125185923506E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999018527736802	WITHOUT_CLASSIFICATION	9.814722631986458E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999999690328889	WITHOUT_CLASSIFICATION	3.09671110929604E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997516696066	WITHOUT_CLASSIFICATION	2.4833039333926867E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999069696707273	WITHOUT_CLASSIFICATION	9.303032927265413E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998263460801	WITHOUT_CLASSIFICATION	1.7365391981329629E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999950272250338	WITHOUT_CLASSIFICATION	4.972774966326303E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.99999685272956	WITHOUT_CLASSIFICATION	3.1472704400282954E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999984134797271	WITHOUT_CLASSIFICATION	1.5865202729641546E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998161590168088	WITHOUT_CLASSIFICATION	1.8384098319137744E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.999397962002243	WITHOUT_CLASSIFICATION	6.02037997757099E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989327246122	WITHOUT_CLASSIFICATION	1.0672753879412072E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999969326812874	WITHOUT_CLASSIFICATION	3.067318712563694E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999557545087039	WITHOUT_CLASSIFICATION	4.4245491296121835E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991344067222	WITHOUT_CLASSIFICATION	8.655932778008561E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999031273665117	WITHOUT_CLASSIFICATION	9.687263348831481E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999864139449	WITHOUT_CLASSIFICATION	1.3586055022952195E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991520023642	WITHOUT_CLASSIFICATION	8.479976356613632E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999971879639169	WITHOUT_CLASSIFICATION	2.812036083148892E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999996685615444	WITHOUT_CLASSIFICATION	3.3143845561391197E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999547438214	WITHOUT_CLASSIFICATION	4.5256178579218324E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999747964099218	WITHOUT_CLASSIFICATION	2.520359007814457E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999991125169131	WITHOUT_CLASSIFICATION	8.874830867678787E-7	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999995411426796	WITHOUT_CLASSIFICATION	4.588573203423404E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999997008601382	WITHOUT_CLASSIFICATION	2.9913986186680284E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999950198926	WITHOUT_CLASSIFICATION	4.980107466832737E-9	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999643552608448	WITHOUT_CLASSIFICATION	3.5644739155141485E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999954555388465	WITHOUT_CLASSIFICATION	4.54446115354326E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999437405767	WITHOUT_CLASSIFICATION	5.6259423279044086E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999999306255	WITHOUT_CLASSIFICATION	6.937450057686091E-10	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998788914336	WITHOUT_CLASSIFICATION	1.211085664079447E-7	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999942488496505	WITHOUT_CLASSIFICATION	5.751150349519114E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999949076088787	WITHOUT_CLASSIFICATION	5.09239112133725E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999965528267234	WITHOUT_CLASSIFICATION	3.4471732765359447E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999949076088787	WITHOUT_CLASSIFICATION	5.09239112133725E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999959195088	WITHOUT_CLASSIFICATION	4.0804912610382706E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999991436896012	WITHOUT_CLASSIFICATION	8.563103988291943E-7	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999762573567457	WITHOUT_CLASSIFICATION	2.3742643254342286E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999746144416221	WITHOUT_CLASSIFICATION	2.538555837794763E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999991763239855	WITHOUT_CLASSIFICATION	8.236760145772754E-7	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999944781743811	WITHOUT_CLASSIFICATION	5.521825618866514E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999985555223	WITHOUT_CLASSIFICATION	1.444477690159603E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999943253151	WITHOUT_CLASSIFICATION	5.6746850480352674E-9	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998832502071	WITHOUT_CLASSIFICATION	1.1674979303797173E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999975003099512	WITHOUT_CLASSIFICATION	2.4996900488232075E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998042195594	WITHOUT_CLASSIFICATION	1.9578044064402655E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999658647932	WITHOUT_CLASSIFICATION	3.413520674626346E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999289775574	WITHOUT_CLASSIFICATION	7.102244268282416E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999944344136257	WITHOUT_CLASSIFICATION	5.565586374296018E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999054667729008	WITHOUT_CLASSIFICATION	9.453322709918298E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998943121213	WITHOUT_CLASSIFICATION	1.056878786324226E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998645570591	WITHOUT_CLASSIFICATION	1.354429407627576E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999953656463	WITHOUT_CLASSIFICATION	4.634353695397887E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999950456947	WITHOUT_CLASSIFICATION	4.9543052973553014E-8	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999059450639	WITHOUT_CLASSIFICATION	9.405493608917896E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999998890195965	WITHOUT_CLASSIFICATION	1.1098040351630769E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998640355978157	WITHOUT_CLASSIFICATION	1.3596440218437074E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9994374502982349	WITHOUT_CLASSIFICATION	5.62549701765139E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999499626892231	WITHOUT_CLASSIFICATION	5.0037310776996276E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999912599816658	WITHOUT_CLASSIFICATION	8.740018334154777E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999434610928	WITHOUT_CLASSIFICATION	5.653890720619552E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999967952515086	WITHOUT_CLASSIFICATION	3.2047484912228415E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.999995031024545	WITHOUT_CLASSIFICATION	4.968975454891673E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999231916328	WITHOUT_CLASSIFICATION	7.68083671934751E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999949947752259	WITHOUT_CLASSIFICATION	5.005224774153786E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999986598830479	WITHOUT_CLASSIFICATION	1.3401169519805728E-6	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999961580122783	WITHOUT_CLASSIFICATION	3.8419877217593765E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999992249804	WITHOUT_CLASSIFICATION	7.750196376967159E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998108422771	WITHOUT_CLASSIFICATION	1.8915772282278668E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999734178470632	WITHOUT_CLASSIFICATION	2.6582152936884816E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999988490001549	WITHOUT_CLASSIFICATION	1.1509998451313067E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999981967621567	WITHOUT_CLASSIFICATION	1.80323784323993E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996198284115	WITHOUT_CLASSIFICATION	3.8017158848232463E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999257305888001	WITHOUT_CLASSIFICATION	7.426941119989591E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997059361608	WITHOUT_CLASSIFICATION	2.9406383926435007E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999966317629	WITHOUT_CLASSIFICATION	3.368237041829249E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.999957575276568	WITHOUT_CLASSIFICATION	4.242472343200189E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999999991333162	WITHOUT_CLASSIFICATION	8.666838122731028E-9	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999434610928	WITHOUT_CLASSIFICATION	5.653890720619552E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999203574041556	WITHOUT_CLASSIFICATION	7.964259584444627E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999997791245446	WITHOUT_CLASSIFICATION	2.2087545541378182E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999651319335293	WITHOUT_CLASSIFICATION	3.486806647058795E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999976764282	WITHOUT_CLASSIFICATION	2.3235718948624245E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999941510991613	WITHOUT_CLASSIFICATION	5.848900838760946E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999953002157	WITHOUT_CLASSIFICATION	4.699784272551302E-9	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999994256054555	WITHOUT_CLASSIFICATION	5.743945445985487E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999535461339156	WITHOUT_CLASSIFICATION	4.6453866084389675E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999933919524212	WITHOUT_CLASSIFICATION	6.608047578788957E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999973023174	WITHOUT_CLASSIFICATION	2.6976826831450558E-9	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.999842959371354	WITHOUT_CLASSIFICATION	1.5704062864603402E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999616941235	WITHOUT_CLASSIFICATION	3.830587650088739E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999892865731501	WITHOUT_CLASSIFICATION	1.0713426849959483E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999964411293605	WITHOUT_CLASSIFICATION	3.558870639467981E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999999995595911	WITHOUT_CLASSIFICATION	4.404088963280792E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.99999998719003	WITHOUT_CLASSIFICATION	1.2809970040982284E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999650551792	WITHOUT_CLASSIFICATION	3.494482080860597E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999244936982	WITHOUT_CLASSIFICATION	7.550630176448831E-8	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999977798299471	WITHOUT_CLASSIFICATION	2.2201700529318266E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999203574041556	WITHOUT_CLASSIFICATION	7.964259584444627E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999981767033866	WITHOUT_CLASSIFICATION	1.8232966134018522E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999835878034	WITHOUT_CLASSIFICATION	1.6412196652802563E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999997690046193	WITHOUT_CLASSIFICATION	2.3099538069657407E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999833026888	WITHOUT_CLASSIFICATION	1.669731125113899E-8	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999944646853	WITHOUT_CLASSIFICATION	5.535314755455781E-9	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918994673058441	WITHOUT_CLASSIFICATION	0.008100532694155945	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918994673058441	WITHOUT_CLASSIFICATION	0.008100532694155945	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997171076968	WITHOUT_CLASSIFICATION	2.828923032334026E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918994673058441	WITHOUT_CLASSIFICATION	0.008100532694155945	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9918994673058441	WITHOUT_CLASSIFICATION	0.008100532694155945	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.99997390309894	WITHOUT_CLASSIFICATION	2.609690105991426E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.99999978893052	WITHOUT_CLASSIFICATION	2.1106948009027808E-7	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998172515934	WITHOUT_CLASSIFICATION	1.8274840665316567E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999948228576937	WITHOUT_CLASSIFICATION	5.177142306374212E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999996010596145	WITHOUT_CLASSIFICATION	3.9894038548255786E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999022008760339	WITHOUT_CLASSIFICATION	9.779912396615867E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999025041217616	WITHOUT_CLASSIFICATION	9.749587823829687E-5	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999269896792	WITHOUT_CLASSIFICATION	7.301032078712135E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999829069694522	WITHOUT_CLASSIFICATION	1.7093030547762694E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999416352408445	WITHOUT_CLASSIFICATION	5.836475915548397E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999586191566222	WITHOUT_CLASSIFICATION	4.13808433778715E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999917499853188	WITHOUT_CLASSIFICATION	8.250014681199841E-6	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995532947843	WITHOUT_CLASSIFICATION	4.467052156490876E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999860346217468	WITHOUT_CLASSIFICATION	1.3965378253194936E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997722807377	WITHOUT_CLASSIFICATION	2.2771926232986232E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999810410377883	WITHOUT_CLASSIFICATION	1.895896221175796E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996119410387	WITHOUT_CLASSIFICATION	3.880589613006782E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999971734977301	WITHOUT_CLASSIFICATION	2.8265022698532028E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999821596315446	WITHOUT_CLASSIFICATION	1.7840368455364023E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999859460386393	WITHOUT_CLASSIFICATION	1.4053961360712016E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999683906217083	WITHOUT_CLASSIFICATION	3.160937829169835E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999985958390019	WITHOUT_CLASSIFICATION	1.4041609980758247E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996119410387	WITHOUT_CLASSIFICATION	3.880589613006782E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999967952515086	WITHOUT_CLASSIFICATION	3.2047484912228415E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998759461811554	WITHOUT_CLASSIFICATION	1.240538188444939E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992807532229	WITHOUT_CLASSIFICATION	7.192467772507057E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996667547628	WITHOUT_CLASSIFICATION	3.332452371912633E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999843023319699	WITHOUT_CLASSIFICATION	1.569766803017615E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999954175185668	WITHOUT_CLASSIFICATION	4.5824814330999826E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999995225334789	WITHOUT_CLASSIFICATION	4.774665211092505E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9842195263734427	WITHOUT_CLASSIFICATION	0.01578047362655728	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999988562047763	WITHOUT_CLASSIFICATION	1.1437952236994247E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999911092524736	WITHOUT_CLASSIFICATION	8.890747526448673E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999231094453319	WITHOUT_CLASSIFICATION	7.68905546680977E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999998104668	WITHOUT_CLASSIFICATION	1.895331949120378E-10	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999999932944919	WITHOUT_CLASSIFICATION	6.705508105617294E-8	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999991572318888	WITHOUT_CLASSIFICATION	8.427681110820429E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999420742788769	WITHOUT_CLASSIFICATION	5.792572112304919E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999997960484	WITHOUT_CLASSIFICATION	2.039516793134316E-10	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999707587702	WITHOUT_CLASSIFICATION	2.92412298475096E-8	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998003413578999	WITHOUT_CLASSIFICATION	1.9965864210009937E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999936437196	WITHOUT_CLASSIFICATION	6.356280403052025E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999961138011363	WITHOUT_CLASSIFICATION	3.886198863684314E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997165691799956	WITHOUT_CLASSIFICATION	2.834308200043887E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999988877736055	WITHOUT_CLASSIFICATION	1.1122263944940358E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999438517936	WITHOUT_CLASSIFICATION	5.614820642127578E-8	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999988562047763	WITHOUT_CLASSIFICATION	1.1437952236994247E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999959681500192	WITHOUT_CLASSIFICATION	4.031849980788642E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999943754900081	WITHOUT_CLASSIFICATION	5.624509991800654E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9990541842706856	WITHOUT_CLASSIFICATION	9.458157293144104E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999993812018347	WITHOUT_CLASSIFICATION	6.187981653524241E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994375886537	WITHOUT_CLASSIFICATION	5.624113463629879E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999912594165231	WITHOUT_CLASSIFICATION	8.74058347691208E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.999998429747345	WITHOUT_CLASSIFICATION	1.5702526550339913E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999997448398816	WITHOUT_CLASSIFICATION	2.55160118380832E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.999999306450286	WITHOUT_CLASSIFICATION	6.935497138965251E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998284006820004	WITHOUT_CLASSIFICATION	1.7159931799966318E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993549732781	WITHOUT_CLASSIFICATION	6.450267219281916E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999029694531	WITHOUT_CLASSIFICATION	9.70305470207263E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997120280302659	WITHOUT_CLASSIFICATION	2.8797196973415196E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999886850129	WITHOUT_CLASSIFICATION	1.1314986983261143E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999817814939	WITHOUT_CLASSIFICATION	1.821850606865184E-8	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999884165173172	WITHOUT_CLASSIFICATION	1.1583482682805349E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993549732781	WITHOUT_CLASSIFICATION	6.450267219281916E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999995980523	WITHOUT_CLASSIFICATION	4.019476743041971E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999994698859909	WITHOUT_CLASSIFICATION	5.301140090972253E-7	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999673097475	WITHOUT_CLASSIFICATION	3.2690252412083446E-8	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999863790524071	WITHOUT_CLASSIFICATION	1.3620947593018087E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999996792869058	WITHOUT_CLASSIFICATION	3.207130941660786E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999990677571108	WITHOUT_CLASSIFICATION	9.322428892595002E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999974736839978	WITHOUT_CLASSIFICATION	2.52631600218261E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996594307008	WITHOUT_CLASSIFICATION	3.405692992179896E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997172612488	WITHOUT_CLASSIFICATION	2.827387512414742E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9912507838119798	WITHOUT_CLASSIFICATION	0.008749216188020159	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9323021421393815	WITHOUT_CLASSIFICATION	0.06769785786061858	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9426181672574735	WITHOUT_CLASSIFICATION	0.05738183274252637	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998667396881	WITHOUT_CLASSIFICATION	1.3326031191717551E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998667396881	WITHOUT_CLASSIFICATION	1.3326031191717551E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999002210649	WITHOUT_CLASSIFICATION	9.97789351261204E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998245619588	WITHOUT_CLASSIFICATION	1.754380412188915E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999996630785668	WITHOUT_CLASSIFICATION	3.3692143319754416E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997493541235	WITHOUT_CLASSIFICATION	2.50645876526001E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999928629271563	WITHOUT_CLASSIFICATION	7.137072843769405E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999552287755	WITHOUT_CLASSIFICATION	4.477122457432616E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999435404921	WITHOUT_CLASSIFICATION	5.645950789342668E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985363621764	WITHOUT_CLASSIFICATION	1.463637823674189E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.99999979409165	WITHOUT_CLASSIFICATION	2.059083499849239E-7	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999938980207	WITHOUT_CLASSIFICATION	6.101979258977455E-9	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999552287755	WITHOUT_CLASSIFICATION	4.477122457432616E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999435404921	WITHOUT_CLASSIFICATION	5.645950789342668E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985363621764	WITHOUT_CLASSIFICATION	1.463637823674189E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999932873957	WITHOUT_CLASSIFICATION	6.712604255389461E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9998618551752895	WITHOUT_CLASSIFICATION	1.3814482471052127E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999986831543	WITHOUT_CLASSIFICATION	1.3168458050740094E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999965872346473	WITHOUT_CLASSIFICATION	3.412765352581458E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.99999994973678	WITHOUT_CLASSIFICATION	5.026322000522947E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999664220398	WITHOUT_CLASSIFICATION	3.35779601390303E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999980586056846	WITHOUT_CLASSIFICATION	1.9413943154800127E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999982768099207	WITHOUT_CLASSIFICATION	1.7231900792369384E-6	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999958065053621	WITHOUT_CLASSIFICATION	4.193494637929139E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.99999901534212	WITHOUT_CLASSIFICATION	9.84657880058357E-7	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999999990432593	WITHOUT_CLASSIFICATION	9.567407078581612E-9	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999968736029367	WITHOUT_CLASSIFICATION	3.126397063302871E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999993118469152	WITHOUT_CLASSIFICATION	6.881530848680972E-7	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999339765794	WITHOUT_CLASSIFICATION	6.602342066361636E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999973670371706	WITHOUT_CLASSIFICATION	2.6329628293660675E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999676529705	WITHOUT_CLASSIFICATION	3.234702953132845E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999991621526022	WITHOUT_CLASSIFICATION	8.378473977388629E-7	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999745235452624	WITHOUT_CLASSIFICATION	2.5476454737616812E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998562979993	WITHOUT_CLASSIFICATION	1.437020007186894E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995854507818	WITHOUT_CLASSIFICATION	4.1454921818218057E-7	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999823142506	WITHOUT_CLASSIFICATION	1.768574938437204E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9859602973792684	WITHOUT_CLASSIFICATION	0.014039702620731573	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999983502329154	WITHOUT_CLASSIFICATION	1.6497670846124812E-6	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999966560973943	WITHOUT_CLASSIFICATION	3.3439026056390384E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999988582928	WITHOUT_CLASSIFICATION	1.141707133114095E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9979829770400109	WITHOUT_CLASSIFICATION	0.0020170229599890833	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999437387406	WITHOUT_CLASSIFICATION	5.62612593648628E-8	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987864994375	WITHOUT_CLASSIFICATION	1.2135005624646453E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999994173505	WITHOUT_CLASSIFICATION	5.826494716788024E-10	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998551502864	WITHOUT_CLASSIFICATION	1.448497136022669E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996434093237	WITHOUT_CLASSIFICATION	3.56590676243991E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998350026665	WITHOUT_CLASSIFICATION	1.6499733340317614E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998350026665	WITHOUT_CLASSIFICATION	1.6499733340317614E-7	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999999999710308	WITHOUT_CLASSIFICATION	2.896919953268868E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999995636759	WITHOUT_CLASSIFICATION	4.3632415335428193E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999478143421388	WITHOUT_CLASSIFICATION	5.218565786124139E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999990981277726	WITHOUT_CLASSIFICATION	9.018722273899666E-6	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999504667011743	WITHOUT_CLASSIFICATION	4.953329882581232E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999757007169	WITHOUT_CLASSIFICATION	2.4299283103907112E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999987107829887	WITHOUT_CLASSIFICATION	1.2892170113353296E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999979520776859	WITHOUT_CLASSIFICATION	2.047922314076038E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999978245244184	WITHOUT_CLASSIFICATION	2.175475581671903E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999392725656	WITHOUT_CLASSIFICATION	6.072743446420232E-8	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999279009111	WITHOUT_CLASSIFICATION	7.209908885360589E-8	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999196997027	WITHOUT_CLASSIFICATION	8.030029736592182E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999054945103	WITHOUT_CLASSIFICATION	9.450548969385346E-8	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999978281415	WITHOUT_CLASSIFICATION	2.171858493608713E-8	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999591370029	WITHOUT_CLASSIFICATION	4.086299702329726E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999453385011	WITHOUT_CLASSIFICATION	5.466149897437716E-8	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997433238046	WITHOUT_CLASSIFICATION	2.566761954709654E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998986717129	WITHOUT_CLASSIFICATION	1.0132828719176453E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996680659685	WITHOUT_CLASSIFICATION	3.319340313910423E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999285715193	WITHOUT_CLASSIFICATION	7.14284806584862E-8	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999992530134103	WITHOUT_CLASSIFICATION	7.469865897670424E-7	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999983662647327	WITHOUT_CLASSIFICATION	1.633735267317722E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994516124708	WITHOUT_CLASSIFICATION	5.48387529190737E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999972001177	WITHOUT_CLASSIFICATION	2.7998823000490134E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999460288562	WITHOUT_CLASSIFICATION	5.397114387612566E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999838706204743	WITHOUT_CLASSIFICATION	1.6129379525681913E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998405018544	WITHOUT_CLASSIFICATION	1.594981456393802E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998470820681991	WITHOUT_CLASSIFICATION	1.5291793180098012E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994516124708	WITHOUT_CLASSIFICATION	5.48387529190737E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994516124708	WITHOUT_CLASSIFICATION	5.48387529190737E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998156500575093	WITHOUT_CLASSIFICATION	1.8434994249072446E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999959379508224	WITHOUT_CLASSIFICATION	4.062049177611639E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999912221854	WITHOUT_CLASSIFICATION	8.777814510698592E-9	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999979366557289	WITHOUT_CLASSIFICATION	2.063344271131874E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996626337802	WITHOUT_CLASSIFICATION	3.3736621978678863E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995854507818	WITHOUT_CLASSIFICATION	4.1454921818218057E-7	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999995335890617	WITHOUT_CLASSIFICATION	4.664109382424426E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999975797036682	WITHOUT_CLASSIFICATION	2.420296331855596E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999947845206	WITHOUT_CLASSIFICATION	5.215479436779493E-9	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992078210682	WITHOUT_CLASSIFICATION	7.921789317945635E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9977450083411704	WITHOUT_CLASSIFICATION	0.002254991658829549	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993832698313	WITHOUT_CLASSIFICATION	6.167301687036266E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999820600766	WITHOUT_CLASSIFICATION	1.793992339689161E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999820600766	WITHOUT_CLASSIFICATION	1.793992339689161E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999510204771	WITHOUT_CLASSIFICATION	4.8979522989201577E-8	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999510204771	WITHOUT_CLASSIFICATION	4.8979522989201577E-8	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999431250174047	WITHOUT_CLASSIFICATION	5.687498259530294E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999987271652	WITHOUT_CLASSIFICATION	1.272834769735634E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999999924537336	WITHOUT_CLASSIFICATION	7.546266399728419E-8	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997974187297602	WITHOUT_CLASSIFICATION	2.0258127023971032E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999993503177004	WITHOUT_CLASSIFICATION	6.496822995702312E-7	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999923536848253	WITHOUT_CLASSIFICATION	7.646315174776346E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992612316995	WITHOUT_CLASSIFICATION	7.387683005008672E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996891216857	WITHOUT_CLASSIFICATION	3.108783143321502E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999936536681	WITHOUT_CLASSIFICATION	6.346331886323203E-9	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999895777828	WITHOUT_CLASSIFICATION	1.042221721913816E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999997235449	WITHOUT_CLASSIFICATION	2.7645510583732273E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999882188281793	WITHOUT_CLASSIFICATION	1.1781171820639718E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9995566859597056	WITHOUT_CLASSIFICATION	4.4331404029444426E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997878357789	WITHOUT_CLASSIFICATION	2.1216422116438657E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999957630485362	WITHOUT_CLASSIFICATION	4.2369514638259605E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999969410061801	WITHOUT_CLASSIFICATION	3.058993819891325E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999969410061801	WITHOUT_CLASSIFICATION	3.058993819891325E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999981812175941	WITHOUT_CLASSIFICATION	1.8187824058476812E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999906411787	WITHOUT_CLASSIFICATION	9.358821277008216E-9	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999851056	WITHOUT_CLASSIFICATION	1.489441728461251E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999996395600862	WITHOUT_CLASSIFICATION	3.6043991380441175E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869195642114	WITHOUT_CLASSIFICATION	1.308043578859383E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982034359058	WITHOUT_CLASSIFICATION	1.7965640941822362E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999083381218	WITHOUT_CLASSIFICATION	9.166187820975601E-7	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9798579919598394	WITHOUT_CLASSIFICATION	0.02014200804016067	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9997123084289604	WITHOUT_CLASSIFICATION	2.8769157103964745E-4	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999926717553	WITHOUT_CLASSIFICATION	7.328244703066766E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996326116575	WITHOUT_CLASSIFICATION	3.6738834258675765E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999666280730793	WITHOUT_CLASSIFICATION	3.3371926920634495E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999411641534	WITHOUT_CLASSIFICATION	5.8835846688644756E-8	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998063530785	WITHOUT_CLASSIFICATION	1.9364692141173045E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999670803232795	WITHOUT_CLASSIFICATION	3.2919676720548936E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.99999710235468	WITHOUT_CLASSIFICATION	2.8976453200404218E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999744242675	WITHOUT_CLASSIFICATION	2.557573247482563E-8	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999974612338788	WITHOUT_CLASSIFICATION	2.5387661212401715E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999964821334417	WITHOUT_CLASSIFICATION	3.517866558337359E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996175770383	WITHOUT_CLASSIFICATION	3.824229617425061E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999951348	WITHOUT_CLASSIFICATION	4.865151908298556E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.99999982974532	WITHOUT_CLASSIFICATION	1.70254679914136E-7	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999916266864581	WITHOUT_CLASSIFICATION	8.373313541875207E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999997439536646	WITHOUT_CLASSIFICATION	2.5604633532488257E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999980596456994	WITHOUT_CLASSIFICATION	1.940354300611426E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999987984775361	WITHOUT_CLASSIFICATION	1.2015224638268335E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999216110937	WITHOUT_CLASSIFICATION	7.838890620248479E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.99999981638219	WITHOUT_CLASSIFICATION	1.8361780997841365E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999921106	WITHOUT_CLASSIFICATION	7.889403533663924E-12	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999841236131615	WITHOUT_CLASSIFICATION	1.5876386838504336E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999690784	WITHOUT_CLASSIFICATION	3.092154504343889E-11	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999991392862244	WITHOUT_CLASSIFICATION	8.607137755140089E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999987342983769	WITHOUT_CLASSIFICATION	1.2657016230990402E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9995367621302861	WITHOUT_CLASSIFICATION	4.632378697138978E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999506900837	WITHOUT_CLASSIFICATION	4.930991627169848E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999995516954058	WITHOUT_CLASSIFICATION	4.4830459417293565E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998621981133	WITHOUT_CLASSIFICATION	1.378018866542623E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999505287692803	WITHOUT_CLASSIFICATION	4.947123071979729E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999323414432	WITHOUT_CLASSIFICATION	6.765855683802704E-8	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.999845780310387	WITHOUT_CLASSIFICATION	1.5421968961290309E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999787017492	WITHOUT_CLASSIFICATION	2.129825086890538E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991978757603	WITHOUT_CLASSIFICATION	8.021242396692574E-7	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9983935312257936	WITHOUT_CLASSIFICATION	0.0016064687742064461	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999888762030799	WITHOUT_CLASSIFICATION	1.1123796920069945E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999943613176	WITHOUT_CLASSIFICATION	5.63868237454393E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999948725276095	WITHOUT_CLASSIFICATION	5.127472390496015E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999997111032394	WITHOUT_CLASSIFICATION	2.8889676060650804E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999985292358173	WITHOUT_CLASSIFICATION	1.4707641826212424E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999988235891727	WITHOUT_CLASSIFICATION	1.176410827247822E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999987676752259	WITHOUT_CLASSIFICATION	1.2323247741015045E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999451662840184	WITHOUT_CLASSIFICATION	5.4833715981523284E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999020009393532	WITHOUT_CLASSIFICATION	9.799906064666676E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999700301064111	WITHOUT_CLASSIFICATION	2.9969893588843187E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996802137932032	WITHOUT_CLASSIFICATION	3.197862067969406E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998870195608935	WITHOUT_CLASSIFICATION	1.1298043910638666E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999990855714627	WITHOUT_CLASSIFICATION	9.144285373154492E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9961200151097076	WITHOUT_CLASSIFICATION	0.003879984890292351	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999966168789619	WITHOUT_CLASSIFICATION	3.383121037973781E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999981056026	WITHOUT_CLASSIFICATION	1.8943973640006378E-9	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998058753291031	WITHOUT_CLASSIFICATION	1.9412467089683695E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999642087278	WITHOUT_CLASSIFICATION	3.579127227606191E-8	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999446825906	WITHOUT_CLASSIFICATION	5.531740940625099E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999993585038	WITHOUT_CLASSIFICATION	6.414961442792893E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999361253669	WITHOUT_CLASSIFICATION	6.387463305700417E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999975526518	WITHOUT_CLASSIFICATION	2.4473483487725005E-9	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999997263045057	WITHOUT_CLASSIFICATION	2.736954943053172E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999312977149	WITHOUT_CLASSIFICATION	6.870228508171678E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999988706250243	WITHOUT_CLASSIFICATION	1.129374975625276E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999823747232766	WITHOUT_CLASSIFICATION	1.7625276723477508E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999823747232766	WITHOUT_CLASSIFICATION	1.7625276723477508E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999996137345274	WITHOUT_CLASSIFICATION	3.8626547254537467E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999513719734	WITHOUT_CLASSIFICATION	4.862802662205688E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999967283536	WITHOUT_CLASSIFICATION	3.2716464683257415E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999996995433307	WITHOUT_CLASSIFICATION	3.0045666938100296E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999498631706	WITHOUT_CLASSIFICATION	5.013682937674262E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999388143469798	WITHOUT_CLASSIFICATION	6.118565302015507E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999766566428	WITHOUT_CLASSIFICATION	2.334335725316418E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999991305505	WITHOUT_CLASSIFICATION	8.69449548043927E-10	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999833604714212	WITHOUT_CLASSIFICATION	1.6639528578785767E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999126595895	WITHOUT_CLASSIFICATION	8.734041043045766E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999991047593121	WITHOUT_CLASSIFICATION	8.952406878987769E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999940848727759	WITHOUT_CLASSIFICATION	5.91512722413292E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999995690805699	WITHOUT_CLASSIFICATION	4.3091943014376197E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999999456731	WITHOUT_CLASSIFICATION	5.432690439756337E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999968327449743	WITHOUT_CLASSIFICATION	3.1672550256613645E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9962260219674652	WITHOUT_CLASSIFICATION	0.0037739780325348462	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999545600750278	WITHOUT_CLASSIFICATION	4.543992497221469E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9971718134073647	WITHOUT_CLASSIFICATION	0.0028281865926353313	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998294494328346	WITHOUT_CLASSIFICATION	1.7055056716530655E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999996145606549	WITHOUT_CLASSIFICATION	3.8543934512910005E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999998887256152	WITHOUT_CLASSIFICATION	1.112743848897441E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999922410105196	WITHOUT_CLASSIFICATION	7.758989480286219E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999989580072204	WITHOUT_CLASSIFICATION	1.0419927796943702E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997877060088006	WITHOUT_CLASSIFICATION	2.1229399119947865E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998514314309	WITHOUT_CLASSIFICATION	1.4856856916777333E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999910632214081	WITHOUT_CLASSIFICATION	8.936778591879092E-6	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999917700046176	WITHOUT_CLASSIFICATION	8.22999538244428E-6	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999533978001	WITHOUT_CLASSIFICATION	4.6602199866755094E-8	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999998641581107	WITHOUT_CLASSIFICATION	1.3584188936369758E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999863425728238	WITHOUT_CLASSIFICATION	1.365742717621236E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997820817735	WITHOUT_CLASSIFICATION	2.1791822654710902E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999931065065921	WITHOUT_CLASSIFICATION	6.893493407927979E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999994727282346	WITHOUT_CLASSIFICATION	5.27271765283798E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999968464676487	WITHOUT_CLASSIFICATION	3.1535323512192677E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999053093627813	WITHOUT_CLASSIFICATION	9.469063721870696E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999053093627813	WITHOUT_CLASSIFICATION	9.469063721870696E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999988146333119	WITHOUT_CLASSIFICATION	1.1853666881792993E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999202411330279	WITHOUT_CLASSIFICATION	7.975886697208672E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999912721211	WITHOUT_CLASSIFICATION	8.727878901339745E-9	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999945480460947	WITHOUT_CLASSIFICATION	5.451953905358455E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999988748155	WITHOUT_CLASSIFICATION	1.1251845083673966E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999999576710695	WITHOUT_CLASSIFICATION	4.232893050581048E-7	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999998303737051	WITHOUT_CLASSIFICATION	1.6962629479018523E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999536481914	WITHOUT_CLASSIFICATION	4.635180869783073E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999998659526405	WITHOUT_CLASSIFICATION	1.340473594485131E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999918785781	WITHOUT_CLASSIFICATION	8.121421822995317E-9	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999382214762049	WITHOUT_CLASSIFICATION	6.17785237950359E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999558732898098	WITHOUT_CLASSIFICATION	4.41267101902594E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999969118163	WITHOUT_CLASSIFICATION	3.0881836994143077E-9	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999377857603055	WITHOUT_CLASSIFICATION	6.221423969461761E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999995320085614	WITHOUT_CLASSIFICATION	4.6799143869955485E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9990824772152016	WITHOUT_CLASSIFICATION	9.175227847983856E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9990824772152016	WITHOUT_CLASSIFICATION	9.175227847983856E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999968155669654	WITHOUT_CLASSIFICATION	3.184433034629273E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999050912584	WITHOUT_CLASSIFICATION	9.490874167817143E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999721388088081	WITHOUT_CLASSIFICATION	2.7861191191961693E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999449399	WITHOUT_CLASSIFICATION	5.506010013506681E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997490427953266	WITHOUT_CLASSIFICATION	2.5095720467333525E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999331735289	WITHOUT_CLASSIFICATION	6.68264711690639E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999552385948	WITHOUT_CLASSIFICATION	4.4761405216789076E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999552385948	WITHOUT_CLASSIFICATION	4.4761405216789076E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999971770888687	WITHOUT_CLASSIFICATION	2.8229111313677855E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999997295411643	WITHOUT_CLASSIFICATION	2.704588356796564E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999997804865058	WITHOUT_CLASSIFICATION	2.1951349420268308E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999977968116	WITHOUT_CLASSIFICATION	2.2031884305805955E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999995050745034	WITHOUT_CLASSIFICATION	4.94925496607535E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999744169114534	WITHOUT_CLASSIFICATION	2.5583088546706363E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997061468005141	WITHOUT_CLASSIFICATION	2.938531994859302E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999882384624521	WITHOUT_CLASSIFICATION	1.176153754793701E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997879136838	WITHOUT_CLASSIFICATION	2.1208631615938147E-7	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998404872006609	WITHOUT_CLASSIFICATION	1.5951279933913544E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9522720978227939	WITHOUT_CLASSIFICATION	0.04772790217720621	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999994528121228	WITHOUT_CLASSIFICATION	5.47187877200625E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999568232087	WITHOUT_CLASSIFICATION	4.3176791354726234E-8	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999840379556	WITHOUT_CLASSIFICATION	1.5962044342250152E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998902708115	WITHOUT_CLASSIFICATION	1.0972918855539283E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999959800941	WITHOUT_CLASSIFICATION	4.019905920062562E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999995076361	WITHOUT_CLASSIFICATION	4.92363952556218E-10	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999984768584449	WITHOUT_CLASSIFICATION	1.5231415551168219E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999928868022882	WITHOUT_CLASSIFICATION	7.1131977118579645E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999922201575908	WITHOUT_CLASSIFICATION	7.779842409194185E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999784985865	WITHOUT_CLASSIFICATION	2.1501413545790237E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999381707827	WITHOUT_CLASSIFICATION	6.182921723733306E-8	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999949238752559	WITHOUT_CLASSIFICATION	5.076124744189264E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999991670206909	WITHOUT_CLASSIFICATION	8.329793090437763E-7	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999609073466	WITHOUT_CLASSIFICATION	3.909265345128304E-8	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999929399480432	WITHOUT_CLASSIFICATION	7.06005195679588E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9995072852854009	WITHOUT_CLASSIFICATION	4.927147145991298E-4	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999498333252475	WITHOUT_CLASSIFICATION	5.016667475246856E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9993586129049504	WITHOUT_CLASSIFICATION	6.413870950496408E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999396240198	WITHOUT_CLASSIFICATION	6.037598018020067E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999961568129359	WITHOUT_CLASSIFICATION	3.84318706409077E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999998928703929	WITHOUT_CLASSIFICATION	1.0712960698952331E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999994287462098	WITHOUT_CLASSIFICATION	5.712537901020701E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999987037338665	WITHOUT_CLASSIFICATION	1.296266133510376E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999871558800448	WITHOUT_CLASSIFICATION	1.2844119955162976E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999452497118	WITHOUT_CLASSIFICATION	5.4750288157589464E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999998924506717	WITHOUT_CLASSIFICATION	1.0754932840302519E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999802878442	WITHOUT_CLASSIFICATION	1.971215571932085E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999923904022	WITHOUT_CLASSIFICATION	7.609597965184078E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998303478903	WITHOUT_CLASSIFICATION	1.6965210970222667E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999784707178	WITHOUT_CLASSIFICATION	2.1529282231178503E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999990123824022	WITHOUT_CLASSIFICATION	9.876175977836603E-7	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999975125365657	WITHOUT_CLASSIFICATION	2.4874634342452707E-6	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998052700416	WITHOUT_CLASSIFICATION	1.947299583906068E-7	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999752001	WITHOUT_CLASSIFICATION	2.4799865323131903E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995597997898524	WITHOUT_CLASSIFICATION	4.402002101476329E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999923904022	WITHOUT_CLASSIFICATION	7.609597965184078E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998303478903	WITHOUT_CLASSIFICATION	1.6965210970222667E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999817518233548	WITHOUT_CLASSIFICATION	1.8248176645284387E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999401079229656	WITHOUT_CLASSIFICATION	5.989207703449829E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999982556914	WITHOUT_CLASSIFICATION	1.7443086614942606E-9	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997362058739024	WITHOUT_CLASSIFICATION	2.637941260975444E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999995249785495	WITHOUT_CLASSIFICATION	4.7502145053760016E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999999560668869	WITHOUT_CLASSIFICATION	4.3933113094227415E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.992398889761002	WITHOUT_CLASSIFICATION	0.00760111023899809	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999998337179682	WITHOUT_CLASSIFICATION	1.662820318210218E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999882583873014	WITHOUT_CLASSIFICATION	1.1741612698541608E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9736129234705226	WITHOUT_CLASSIFICATION	0.02638707652947741	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999996463607	WITHOUT_CLASSIFICATION	3.5363934957822803E-10	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9736129234705226	WITHOUT_CLASSIFICATION	0.02638707652947741	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999999695609368	WITHOUT_CLASSIFICATION	3.0439063204655235E-7	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999976532394106	WITHOUT_CLASSIFICATION	2.346760589424605E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999014745371	WITHOUT_CLASSIFICATION	9.852546292568808E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998116313372	WITHOUT_CLASSIFICATION	1.8836866276210646E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.99999935521431	WITHOUT_CLASSIFICATION	6.44785689920807E-7	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999892661425853	WITHOUT_CLASSIFICATION	1.073385741469787E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999892661425853	WITHOUT_CLASSIFICATION	1.073385741469787E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999998960785552	WITHOUT_CLASSIFICATION	1.0392144485533497E-7	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998062573938	WITHOUT_CLASSIFICATION	1.937426061175923E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999993648355284	WITHOUT_CLASSIFICATION	6.35164471611156E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999844549506207	WITHOUT_CLASSIFICATION	1.5545049379236646E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999998590764481	WITHOUT_CLASSIFICATION	1.4092355188452107E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999860330296098	WITHOUT_CLASSIFICATION	1.3966970390303963E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999982326354527	WITHOUT_CLASSIFICATION	1.7673645472488657E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999727724683	WITHOUT_CLASSIFICATION	2.7227531621832026E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999153421708	WITHOUT_CLASSIFICATION	8.465782925085211E-8	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999975875917345	WITHOUT_CLASSIFICATION	2.412408265398854E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998670402784	WITHOUT_CLASSIFICATION	1.3295972151292968E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999980998238168	WITHOUT_CLASSIFICATION	1.900176183206909E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999654706922463	WITHOUT_CLASSIFICATION	3.452930775364727E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999132463475	WITHOUT_CLASSIFICATION	8.675365251860183E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999654791755773	WITHOUT_CLASSIFICATION	3.452082442267407E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999994478295868	WITHOUT_CLASSIFICATION	5.521704130958908E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999983106413818	WITHOUT_CLASSIFICATION	1.6893586182037412E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999731695209132	WITHOUT_CLASSIFICATION	2.6830479086739646E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999038667652	WITHOUT_CLASSIFICATION	9.613323474837663E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999944401966689	WITHOUT_CLASSIFICATION	5.5598033310788215E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999939694084495	WITHOUT_CLASSIFICATION	6.030591550506404E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999969380827647	WITHOUT_CLASSIFICATION	3.061917235249741E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993912674962057	WITHOUT_CLASSIFICATION	6.087325037944286E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999656691485475	WITHOUT_CLASSIFICATION	3.433085145248169E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999765007296769	WITHOUT_CLASSIFICATION	2.3499270323074915E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999992913955902	WITHOUT_CLASSIFICATION	7.086044098449754E-7	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999995432906831	WITHOUT_CLASSIFICATION	4.567093169046658E-7	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9993044468704949	WITHOUT_CLASSIFICATION	6.955531295050607E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9992473009982751	WITHOUT_CLASSIFICATION	7.526990017249087E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9964119695488446	WITHOUT_CLASSIFICATION	0.003588030451155388	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9991956593391859	WITHOUT_CLASSIFICATION	8.043406608142631E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998496518220378	WITHOUT_CLASSIFICATION	1.5034817796224782E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999982326354527	WITHOUT_CLASSIFICATION	1.7673645472488657E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999999517311698	WITHOUT_CLASSIFICATION	4.826883020373565E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998854345245177	WITHOUT_CLASSIFICATION	1.1456547548229628E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9988695249350934	WITHOUT_CLASSIFICATION	0.0011304750649066412	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999997880117872	WITHOUT_CLASSIFICATION	2.1198821283906378E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998944077654172	WITHOUT_CLASSIFICATION	1.0559223458286306E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999973448599776	WITHOUT_CLASSIFICATION	2.655140022475701E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999844549506207	WITHOUT_CLASSIFICATION	1.5545049379236646E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999844549506207	WITHOUT_CLASSIFICATION	1.5545049379236646E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999363180691425	WITHOUT_CLASSIFICATION	6.368193085750203E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999915409944717	WITHOUT_CLASSIFICATION	8.459005528287328E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999979239798271	WITHOUT_CLASSIFICATION	2.0760201728956226E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999980368056023	WITHOUT_CLASSIFICATION	1.9631943977033706E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9983533844133817	WITHOUT_CLASSIFICATION	0.0016466155866183855	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998516289831	WITHOUT_CLASSIFICATION	1.4837101698736355E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999686204943	WITHOUT_CLASSIFICATION	3.137950555553113E-8	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999695282973	WITHOUT_CLASSIFICATION	3.0471702780055307E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999726629878054	WITHOUT_CLASSIFICATION	2.7337012194486824E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995712823	WITHOUT_CLASSIFICATION	4.287176924646702E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999904969343512	WITHOUT_CLASSIFICATION	9.503065648837746E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998844219967968	WITHOUT_CLASSIFICATION	1.1557800320315547E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999998023309716	WITHOUT_CLASSIFICATION	1.9766902838656746E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995712823	WITHOUT_CLASSIFICATION	4.287176924646702E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999689755206	WITHOUT_CLASSIFICATION	3.102447939497914E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996109593074981	WITHOUT_CLASSIFICATION	3.8904069250191784E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999976570731344	WITHOUT_CLASSIFICATION	2.3429268656723226E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8973546109371813	WITHOUT_CLASSIFICATION	0.1026453890628186	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998844219967968	WITHOUT_CLASSIFICATION	1.1557800320315547E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999936120291	WITHOUT_CLASSIFICATION	6.3879709323605295E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999996259713	WITHOUT_CLASSIFICATION	3.740286615755312E-10	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999983868818	WITHOUT_CLASSIFICATION	1.613118294195911E-9	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999999553	WITHOUT_CLASSIFICATION	4.47543941103425E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.999966472191483	WITHOUT_CLASSIFICATION	3.352780851702944E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999833012594	WITHOUT_CLASSIFICATION	1.669874063674433E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999987561022	WITHOUT_CLASSIFICATION	1.24389778756468E-9	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999692767699	WITHOUT_CLASSIFICATION	3.0723230105312137E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998728381137909	WITHOUT_CLASSIFICATION	1.2716188620919157E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999920188090978	WITHOUT_CLASSIFICATION	7.981190902214686E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999847501785	WITHOUT_CLASSIFICATION	1.5249821538731808E-8	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999964826245893	WITHOUT_CLASSIFICATION	3.517375410730883E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995712823	WITHOUT_CLASSIFICATION	4.287176924646702E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999936120291	WITHOUT_CLASSIFICATION	6.3879709323605295E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999983868818	WITHOUT_CLASSIFICATION	1.613118294195911E-9	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999991592897849	WITHOUT_CLASSIFICATION	8.407102150052381E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999990694338848	WITHOUT_CLASSIFICATION	9.30566115174219E-7	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999976821304	WITHOUT_CLASSIFICATION	2.317869490831512E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998844219967968	WITHOUT_CLASSIFICATION	1.1557800320315547E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999965495004035	WITHOUT_CLASSIFICATION	3.4504995964461844E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999282999962	WITHOUT_CLASSIFICATION	7.170000377956951E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999980403953985	WITHOUT_CLASSIFICATION	1.9596046015010555E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999983378473518	WITHOUT_CLASSIFICATION	1.66215264812021E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999692767699	WITHOUT_CLASSIFICATION	3.0723230105312137E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999999689755206	WITHOUT_CLASSIFICATION	3.102447939497914E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999995220806296	WITHOUT_CLASSIFICATION	4.779193703646698E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999998376175926	WITHOUT_CLASSIFICATION	1.6238240740599088E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999991483533969	WITHOUT_CLASSIFICATION	8.516466031093567E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999479057058279	WITHOUT_CLASSIFICATION	5.2094294172161334E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.7584157227259931	WITHOUT_CLASSIFICATION	0.24158427727400694	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9925123660427055	WITHOUT_CLASSIFICATION	0.007487633957294498	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999646883029238	WITHOUT_CLASSIFICATION	3.531169707613305E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998116313372	WITHOUT_CLASSIFICATION	1.8836866276210646E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133213133	WITHOUT_CLASSIFICATION	8.667868662972077E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999994820353719	WITHOUT_CLASSIFICATION	5.179646281558883E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999713755054	WITHOUT_CLASSIFICATION	2.8624494551872694E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999868700116	WITHOUT_CLASSIFICATION	1.3129988319004632E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999855766942	WITHOUT_CLASSIFICATION	1.4423305696023233E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999924699698	WITHOUT_CLASSIFICATION	7.53003019226647E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999308744628	WITHOUT_CLASSIFICATION	6.912553713575197E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999996306365573	WITHOUT_CLASSIFICATION	3.6936344273638706E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999983378473518	WITHOUT_CLASSIFICATION	1.66215264812021E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999944359097717	WITHOUT_CLASSIFICATION	5.564090228433189E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999997005342436	WITHOUT_CLASSIFICATION	2.9946575641587494E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999951289564013	WITHOUT_CLASSIFICATION	4.87104359874992E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999997196412085	WITHOUT_CLASSIFICATION	2.8035879154530257E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999936784174439	WITHOUT_CLASSIFICATION	6.3215825561055755E-6	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999988037499961	WITHOUT_CLASSIFICATION	1.196250004027484E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999978536297691	WITHOUT_CLASSIFICATION	2.1463702309223364E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9994507316251633	WITHOUT_CLASSIFICATION	5.49268374836698E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999996998737325	WITHOUT_CLASSIFICATION	3.001262675307509E-7	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999965164174326	WITHOUT_CLASSIFICATION	3.483582567500835E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999995350736822	WITHOUT_CLASSIFICATION	4.6492631780247145E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999894302395	WITHOUT_CLASSIFICATION	1.0569760595649137E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999568743965287	WITHOUT_CLASSIFICATION	4.3125603471339426E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999979052076611	WITHOUT_CLASSIFICATION	2.094792338974855E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998948144876	WITHOUT_CLASSIFICATION	1.0518551250088797E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999783697272	WITHOUT_CLASSIFICATION	2.1630272767448792E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999260056539	WITHOUT_CLASSIFICATION	7.399434600875793E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999569904775	WITHOUT_CLASSIFICATION	4.3009522529410494E-8	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999996840123311	WITHOUT_CLASSIFICATION	3.159876689550473E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999995055340432	WITHOUT_CLASSIFICATION	4.9446595680045606E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999997773348217	WITHOUT_CLASSIFICATION	2.2266517832328865E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998904922409	WITHOUT_CLASSIFICATION	1.0950775914300688E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999432593862	WITHOUT_CLASSIFICATION	5.674061371776145E-8	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999931790577	WITHOUT_CLASSIFICATION	6.820942281437584E-9	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999878754241	WITHOUT_CLASSIFICATION	1.2124575935943982E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8415577990866339	WITHOUT_CLASSIFICATION	0.1584422009133662	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9985950442223985	WITHOUT_CLASSIFICATION	0.001404955777601515	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999913738115159	WITHOUT_CLASSIFICATION	8.626188484026726E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999988519549805	WITHOUT_CLASSIFICATION	1.1480450194841714E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5486785990984667	IMPLEMENTATION	0.4513214009015333	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999846471077	WITHOUT_CLASSIFICATION	1.5352892274110152E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998204710767478	WITHOUT_CLASSIFICATION	1.7952892325234424E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999558168053	WITHOUT_CLASSIFICATION	4.4183194738442054E-8	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997933743878501	WITHOUT_CLASSIFICATION	2.0662561214997353E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999974131203	WITHOUT_CLASSIFICATION	2.5868796387955333E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994886712585	WITHOUT_CLASSIFICATION	5.113287414255531E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999970840421	WITHOUT_CLASSIFICATION	2.9159579252717153E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999950711933384	WITHOUT_CLASSIFICATION	4.928806661606057E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999994886712585	WITHOUT_CLASSIFICATION	5.113287414255531E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999974131203	WITHOUT_CLASSIFICATION	2.5868796387955333E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999970840421	WITHOUT_CLASSIFICATION	2.9159579252717153E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999985826086002	WITHOUT_CLASSIFICATION	1.4173913997402037E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999301781675	WITHOUT_CLASSIFICATION	6.982183247414631E-8	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999997142451751	WITHOUT_CLASSIFICATION	2.8575482484714984E-7	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999985442528374	WITHOUT_CLASSIFICATION	1.4557471626413033E-6	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999981263852	WITHOUT_CLASSIFICATION	1.873614945748215E-9	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8109898203152378	IMPLEMENTATION	0.1890101796847622	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999089624596312	WITHOUT_CLASSIFICATION	9.103754036873804E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999959692133973	WITHOUT_CLASSIFICATION	4.030786602705421E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999960567742542	WITHOUT_CLASSIFICATION	3.943225745818442E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999976904464448	WITHOUT_CLASSIFICATION	2.3095535552492327E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999994309234915	WITHOUT_CLASSIFICATION	5.690765085617928E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999985894175099	WITHOUT_CLASSIFICATION	1.41058249019405E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999014749980509	WITHOUT_CLASSIFICATION	9.85250019491147E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999991620104809	WITHOUT_CLASSIFICATION	8.37989519093909E-6	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9969693780207972	WITHOUT_CLASSIFICATION	0.003030621979202811	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999535053388	WITHOUT_CLASSIFICATION	4.649466127719094E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999980228247	WITHOUT_CLASSIFICATION	1.977175234082089E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999833411586	WITHOUT_CLASSIFICATION	1.6658841454132697E-8	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999161811298	WITHOUT_CLASSIFICATION	8.381887023826868E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998755287749	WITHOUT_CLASSIFICATION	1.2447122516519998E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9925209746459894	WITHOUT_CLASSIFICATION	0.007479025354010551	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999964245716	WITHOUT_CLASSIFICATION	3.5754285289878955E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999997076800877	WITHOUT_CLASSIFICATION	2.92319912262107E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999973093934738	WITHOUT_CLASSIFICATION	2.6906065262625254E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999082574523	WITHOUT_CLASSIFICATION	9.174254762542644E-8	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999082574523	WITHOUT_CLASSIFICATION	9.174254762542644E-8	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999921959142	WITHOUT_CLASSIFICATION	7.804085755539399E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999921959142	WITHOUT_CLASSIFICATION	7.804085755539399E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9938550408315179	WITHOUT_CLASSIFICATION	0.006144959168482146	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999980228247	WITHOUT_CLASSIFICATION	1.977175234082089E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999995874739929	WITHOUT_CLASSIFICATION	4.1252600724251466E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999933664572226	WITHOUT_CLASSIFICATION	6.63354277742583E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999994220238847	WITHOUT_CLASSIFICATION	5.77976115320336E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999994220238847	WITHOUT_CLASSIFICATION	5.77976115320336E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999789325767069	WITHOUT_CLASSIFICATION	2.106742329317483E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999987853179089	WITHOUT_CLASSIFICATION	1.2146820910773802E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999913586104	WITHOUT_CLASSIFICATION	8.641389627771323E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999814604660069	WITHOUT_CLASSIFICATION	1.8539533993121968E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999375870911847	WITHOUT_CLASSIFICATION	6.241290881524284E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998649416276	WITHOUT_CLASSIFICATION	1.3505837230532284E-7	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999971373600745	WITHOUT_CLASSIFICATION	2.8626399256525756E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999929930521431	WITHOUT_CLASSIFICATION	7.006947856966602E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999413952059415	WITHOUT_CLASSIFICATION	5.8604794058550816E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999981942602945	WITHOUT_CLASSIFICATION	1.8057397054918257E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999985420441904	WITHOUT_CLASSIFICATION	1.457955809645735E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997874262643226	WITHOUT_CLASSIFICATION	2.1257373567749437E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999684603406	WITHOUT_CLASSIFICATION	3.153965952993747E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999991923602488	WITHOUT_CLASSIFICATION	8.076397510757294E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999936223483439	WITHOUT_CLASSIFICATION	6.377651656099205E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999826784615136	WITHOUT_CLASSIFICATION	1.7321538486426855E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992679778489	WITHOUT_CLASSIFICATION	7.320221510200871E-7	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998146200860047	WITHOUT_CLASSIFICATION	1.853799139952234E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998761609183815	WITHOUT_CLASSIFICATION	1.2383908161837817E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998024926817	WITHOUT_CLASSIFICATION	1.975073183138815E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997572006488478	WITHOUT_CLASSIFICATION	2.4279935115233015E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999374905689	WITHOUT_CLASSIFICATION	6.250943106438055E-8	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999982018108841	WITHOUT_CLASSIFICATION	1.7981891159066793E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999995564825884	WITHOUT_CLASSIFICATION	4.435174114884569E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999990981277726	WITHOUT_CLASSIFICATION	9.018722273899666E-6	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999990942091603	WITHOUT_CLASSIFICATION	9.057908396960465E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999894302395	WITHOUT_CLASSIFICATION	1.0569760595649137E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999998589376914	WITHOUT_CLASSIFICATION	1.4106230860344304E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999993703522946	WITHOUT_CLASSIFICATION	6.296477053770729E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995019752845	WITHOUT_CLASSIFICATION	4.980247154415729E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999706731201399	WITHOUT_CLASSIFICATION	2.9326879860088176E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999953662285281	WITHOUT_CLASSIFICATION	4.633771471909128E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999953662285281	WITHOUT_CLASSIFICATION	4.633771471909128E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995296932825	WITHOUT_CLASSIFICATION	4.7030671746927916E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999997386317001	WITHOUT_CLASSIFICATION	2.613682998748972E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999634867517	WITHOUT_CLASSIFICATION	3.651324825968083E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999634867517	WITHOUT_CLASSIFICATION	3.651324825968083E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999417488802677	WITHOUT_CLASSIFICATION	5.825111973228922E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999938296262106	WITHOUT_CLASSIFICATION	6.17037378940662E-6	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999983794294287	WITHOUT_CLASSIFICATION	1.6205705713656985E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996626337802	WITHOUT_CLASSIFICATION	3.3736621978678863E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999953440330448	WITHOUT_CLASSIFICATION	4.65596695523786E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998475482275	WITHOUT_CLASSIFICATION	1.5245177244618894E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9998658695712557	WITHOUT_CLASSIFICATION	1.3413042874431665E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999965325866943	WITHOUT_CLASSIFICATION	3.4674133055625365E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999373828998	WITHOUT_CLASSIFICATION	6.261710019646366E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999373828998	WITHOUT_CLASSIFICATION	6.261710019646366E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999869348969554	WITHOUT_CLASSIFICATION	1.3065103044463805E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999969721357	WITHOUT_CLASSIFICATION	3.02786429587659E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.999999969721357	WITHOUT_CLASSIFICATION	3.02786429587659E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999511287068	WITHOUT_CLASSIFICATION	4.887129317916987E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999696274	WITHOUT_CLASSIFICATION	3.0372638052498955E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9994419551591213	WITHOUT_CLASSIFICATION	5.580448408787773E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999992273419769	WITHOUT_CLASSIFICATION	7.726580230490269E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999993809316808	WITHOUT_CLASSIFICATION	6.190683191679207E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999953501614	WITHOUT_CLASSIFICATION	4.6498386039108124E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999877305797513	WITHOUT_CLASSIFICATION	1.2269420248751675E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999534932096447	WITHOUT_CLASSIFICATION	4.6506790355400855E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999991888345331	WITHOUT_CLASSIFICATION	8.111654669204316E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995900186345456	WITHOUT_CLASSIFICATION	4.099813654544746E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999996386551347	WITHOUT_CLASSIFICATION	3.613448652458909E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999653019723636	WITHOUT_CLASSIFICATION	3.4698027636430795E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992978156409	WITHOUT_CLASSIFICATION	7.021843591027429E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992978156409	WITHOUT_CLASSIFICATION	7.021843591027429E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992978156409	WITHOUT_CLASSIFICATION	7.021843591027429E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999992978156409	WITHOUT_CLASSIFICATION	7.021843591027429E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999983959548152	WITHOUT_CLASSIFICATION	1.6040451848053899E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999970630543421	WITHOUT_CLASSIFICATION	2.9369456578859936E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.99998815614594	WITHOUT_CLASSIFICATION	1.1843854059914914E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999955867795193	WITHOUT_CLASSIFICATION	4.413220480692997E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999960575716489	WITHOUT_CLASSIFICATION	3.9424283510371676E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999879469923468	WITHOUT_CLASSIFICATION	1.205300765308212E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999998348489554	WITHOUT_CLASSIFICATION	1.6515104454922606E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999765628033779	WITHOUT_CLASSIFICATION	2.3437196622041713E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999740271795211	WITHOUT_CLASSIFICATION	2.5972820478994107E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999387220131	WITHOUT_CLASSIFICATION	6.127798697129734E-8	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999959091610341	WITHOUT_CLASSIFICATION	4.0908389658096556E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970673214573	WITHOUT_CLASSIFICATION	2.93267854266714E-6	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999994089317583	WITHOUT_CLASSIFICATION	5.910682417313692E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996670300234	WITHOUT_CLASSIFICATION	3.329699765662154E-7	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999981577769879	WITHOUT_CLASSIFICATION	1.842223012102267E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970673214573	WITHOUT_CLASSIFICATION	2.93267854266714E-6	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999485095644581	WITHOUT_CLASSIFICATION	5.149043554182892E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999991515303425	WITHOUT_CLASSIFICATION	8.484696576197013E-7	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994379043666	WITHOUT_CLASSIFICATION	5.620956333538145E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999999989820118	WITHOUT_CLASSIFICATION	1.0179881991414752E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999785033603	WITHOUT_CLASSIFICATION	2.1496639717590075E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999995564755154	WITHOUT_CLASSIFICATION	4.435244845277926E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999935498971	WITHOUT_CLASSIFICATION	6.450102936483736E-9	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9988279523583795	WITHOUT_CLASSIFICATION	0.0011720476416204966	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995802349521	WITHOUT_CLASSIFICATION	4.197650479467042E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999474491591	WITHOUT_CLASSIFICATION	5.25508409151569E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999892204013	WITHOUT_CLASSIFICATION	1.0779598739249893E-8	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999895838269	WITHOUT_CLASSIFICATION	1.0416173094720537E-7	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999983972315029	WITHOUT_CLASSIFICATION	1.6027684971341375E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997037647273493	WITHOUT_CLASSIFICATION	2.9623527265064213E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999806409503552	WITHOUT_CLASSIFICATION	1.9359049644696755E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999369662836	WITHOUT_CLASSIFICATION	6.303371635858318E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999968701824	WITHOUT_CLASSIFICATION	3.12981758794859E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998168618002	WITHOUT_CLASSIFICATION	1.8313819982933453E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999964942687845	WITHOUT_CLASSIFICATION	3.5057312156589404E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998168618002	WITHOUT_CLASSIFICATION	1.8313819982933453E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999805447509	WITHOUT_CLASSIFICATION	1.9455249044382668E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999995824574	WITHOUT_CLASSIFICATION	4.175426210824384E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999977632112411	WITHOUT_CLASSIFICATION	2.2367887588685044E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999609521767	WITHOUT_CLASSIFICATION	3.9047823381707265E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999968701824	WITHOUT_CLASSIFICATION	3.12981758794859E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999964942687845	WITHOUT_CLASSIFICATION	3.5057312156589404E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999805447509	WITHOUT_CLASSIFICATION	1.9455249044382668E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999975853633857	WITHOUT_CLASSIFICATION	2.4146366142392607E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999818163914871	WITHOUT_CLASSIFICATION	1.8183608512884608E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9997470374150034	WITHOUT_CLASSIFICATION	2.5296258499660706E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9998547362994882	WITHOUT_CLASSIFICATION	1.4526370051171655E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999959518653803	WITHOUT_CLASSIFICATION	4.048134619723285E-6	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999994970026997	WITHOUT_CLASSIFICATION	5.02997300304414E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992679778489	WITHOUT_CLASSIFICATION	7.320221510200871E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999995824574	WITHOUT_CLASSIFICATION	4.175426210824384E-10	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999999734513	WITHOUT_CLASSIFICATION	2.6548621327239562E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999870390731349	WITHOUT_CLASSIFICATION	1.2960926865079778E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999973544346	WITHOUT_CLASSIFICATION	2.645565429259797E-9	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992679778489	WITHOUT_CLASSIFICATION	7.320221510200871E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999994976345347	WITHOUT_CLASSIFICATION	5.023654652965656E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992679778489	WITHOUT_CLASSIFICATION	7.320221510200871E-7	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999989394781693	WITHOUT_CLASSIFICATION	1.0605218307144128E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997516696066	WITHOUT_CLASSIFICATION	2.4833039333926867E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999600708931653	WITHOUT_CLASSIFICATION	3.992910683464702E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999421993372666	WITHOUT_CLASSIFICATION	5.780066273329615E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989327246122	WITHOUT_CLASSIFICATION	1.0672753879412072E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999986640079541	WITHOUT_CLASSIFICATION	1.3359920459256603E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999993995452701	WITHOUT_CLASSIFICATION	6.004547299848541E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999994822376467	WITHOUT_CLASSIFICATION	5.177623532939985E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995120644252	WITHOUT_CLASSIFICATION	4.879355749179764E-7	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999993336310119	WITHOUT_CLASSIFICATION	6.663689879887946E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999823747232766	WITHOUT_CLASSIFICATION	1.7625276723477508E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999914930906	WITHOUT_CLASSIFICATION	8.506909412405478E-9	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9994419551591213	WITHOUT_CLASSIFICATION	5.580448408787773E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999994114500478	WITHOUT_CLASSIFICATION	5.885499522246454E-7	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999082099736539	WITHOUT_CLASSIFICATION	9.179002634606799E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993584956601	WITHOUT_CLASSIFICATION	6.415043399341551E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999950272250338	WITHOUT_CLASSIFICATION	4.972774966326303E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999436479	WITHOUT_CLASSIFICATION	5.6352002507851386E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999985674475753	WITHOUT_CLASSIFICATION	1.4325524247227925E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999974356032874	WITHOUT_CLASSIFICATION	2.5643967125900084E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999971054588391	WITHOUT_CLASSIFICATION	2.894541160903835E-6	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999941881253	WITHOUT_CLASSIFICATION	5.811874698220247E-8	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999983956931	WITHOUT_CLASSIFICATION	1.6043069068455493E-9	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9994784067093014	WITHOUT_CLASSIFICATION	5.215932906986534E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999925532197805	WITHOUT_CLASSIFICATION	7.4467802195561906E-6	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999943801115929	WITHOUT_CLASSIFICATION	5.619888407104805E-6	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999997218078004	WITHOUT_CLASSIFICATION	2.781921996038998E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999932039303726	WITHOUT_CLASSIFICATION	6.796069627494632E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880408453887	WITHOUT_CLASSIFICATION	1.1959154611191443E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999625250268	WITHOUT_CLASSIFICATION	3.7474973158121514E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9990388625350096	WITHOUT_CLASSIFICATION	9.611374649902818E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999963454739057	WITHOUT_CLASSIFICATION	3.654526094248595E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999981984873285	WITHOUT_CLASSIFICATION	1.8015126714939455E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999046622310764	WITHOUT_CLASSIFICATION	9.533776892356451E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9999286861838901	WITHOUT_CLASSIFICATION	7.131381611000367E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998788914336	WITHOUT_CLASSIFICATION	1.211085664079447E-7	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999998318811509	WITHOUT_CLASSIFICATION	1.6811884913341127E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999713707936789	WITHOUT_CLASSIFICATION	2.862920632099733E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999786888916647	WITHOUT_CLASSIFICATION	2.131110833532134E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999881996003	WITHOUT_CLASSIFICATION	1.1800399509296737E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977058051098475	WITHOUT_CLASSIFICATION	0.0022941948901524503	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999049519926704	WITHOUT_CLASSIFICATION	9.504800732970634E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999959972912031	WITHOUT_CLASSIFICATION	4.00270879686585E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999679165144472	WITHOUT_CLASSIFICATION	3.208348555280432E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999679165144472	WITHOUT_CLASSIFICATION	3.208348555280432E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9988254524262794	WITHOUT_CLASSIFICATION	0.0011745475737205953	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999994822376467	WITHOUT_CLASSIFICATION	5.177623532939985E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999884938558294	WITHOUT_CLASSIFICATION	1.1506144170543186E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999912795502	WITHOUT_CLASSIFICATION	8.720449769084185E-9	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999083292593	WITHOUT_CLASSIFICATION	9.167074072118723E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999317791544474	WITHOUT_CLASSIFICATION	6.822084555254432E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999817016883246	WITHOUT_CLASSIFICATION	1.8298311675458225E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999907114046521	WITHOUT_CLASSIFICATION	9.28859534791828E-6	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999925884575	WITHOUT_CLASSIFICATION	7.411542489819495E-9	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999992151525	WITHOUT_CLASSIFICATION	7.84847540176018E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999907818282168	WITHOUT_CLASSIFICATION	9.218171783187644E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999999540005373	WITHOUT_CLASSIFICATION	4.5999462739514015E-8	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999902080900406	WITHOUT_CLASSIFICATION	9.791909959364478E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999839561963	WITHOUT_CLASSIFICATION	1.6043803714564258E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999915921658	WITHOUT_CLASSIFICATION	8.407834232078228E-9	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999487300096	WITHOUT_CLASSIFICATION	5.12699902698683E-8	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999738758504	WITHOUT_CLASSIFICATION	2.6124149704744926E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999981016844	WITHOUT_CLASSIFICATION	1.898315572724675E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999994647617	WITHOUT_CLASSIFICATION	5.352382884764852E-10	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999564689225285	WITHOUT_CLASSIFICATION	4.353107747141749E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999978647256867	WITHOUT_CLASSIFICATION	2.135274313353048E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.996306456860395	WITHOUT_CLASSIFICATION	0.003693543139605038	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999754703427679	WITHOUT_CLASSIFICATION	2.4529657232075548E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998223459649	WITHOUT_CLASSIFICATION	1.776540350181469E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9977058051098475	WITHOUT_CLASSIFICATION	0.0022941948901524503	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999167789231	WITHOUT_CLASSIFICATION	8.322107694407637E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999998697154894	WITHOUT_CLASSIFICATION	1.302845106019296E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999989971529	WITHOUT_CLASSIFICATION	1.0028472078674271E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999990288447915	WITHOUT_CLASSIFICATION	9.711552083853562E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999077162374829	WITHOUT_CLASSIFICATION	9.228376251717703E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999546488681547	WITHOUT_CLASSIFICATION	4.535113184545146E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999988899361543	WITHOUT_CLASSIFICATION	1.1100638456763372E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999482797656	WITHOUT_CLASSIFICATION	5.172023457283425E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998607155203	WITHOUT_CLASSIFICATION	1.3928447963319565E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998152075474	WITHOUT_CLASSIFICATION	1.847924524710925E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999667554829	WITHOUT_CLASSIFICATION	3.324451711710037E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999555064666	WITHOUT_CLASSIFICATION	4.449353335018703E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999042641636	WITHOUT_CLASSIFICATION	9.573583637959496E-8	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999998579003229	WITHOUT_CLASSIFICATION	1.4209967709424355E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999597097242067	WITHOUT_CLASSIFICATION	4.0290275793345534E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999597097242067	WITHOUT_CLASSIFICATION	4.0290275793345534E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999996795664347	WITHOUT_CLASSIFICATION	3.204335653184847E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999792679296765	WITHOUT_CLASSIFICATION	2.0732070323461783E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999173513798	WITHOUT_CLASSIFICATION	8.264862010792655E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999173513798	WITHOUT_CLASSIFICATION	8.264862010792655E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999780892073	WITHOUT_CLASSIFICATION	2.1910792728390865E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999917499853188	WITHOUT_CLASSIFICATION	8.250014681199841E-6	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9624538148131581	WITHOUT_CLASSIFICATION	0.0375461851868419	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999942583025	WITHOUT_CLASSIFICATION	5.741697439187798E-9	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999867555028	WITHOUT_CLASSIFICATION	1.324449714876143E-8	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998720965964	WITHOUT_CLASSIFICATION	1.2790340364277255E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999997562113	WITHOUT_CLASSIFICATION	2.437887145521326E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999997562113	WITHOUT_CLASSIFICATION	2.437887145521326E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997689640896	WITHOUT_CLASSIFICATION	2.310359103390435E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999991940624394	WITHOUT_CLASSIFICATION	8.059375605912999E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999987711904169	WITHOUT_CLASSIFICATION	1.2288095830464942E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999064268553	WITHOUT_CLASSIFICATION	9.357314470897876E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999064268553	WITHOUT_CLASSIFICATION	9.357314470897876E-8	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999763271566	WITHOUT_CLASSIFICATION	2.3672843374939133E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999996476039491	WITHOUT_CLASSIFICATION	3.5239605088942465E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998516399593	WITHOUT_CLASSIFICATION	1.483600406249552E-7	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999997741917942	WITHOUT_CLASSIFICATION	2.2580820582245227E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999883545403	WITHOUT_CLASSIFICATION	1.1645459793174558E-8	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999758447885	WITHOUT_CLASSIFICATION	2.4155211444797883E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999996720146863	WITHOUT_CLASSIFICATION	3.279853137308209E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999992603746553	WITHOUT_CLASSIFICATION	7.396253447301599E-7	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999938007712	WITHOUT_CLASSIFICATION	6.19922874426669E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999706787104	WITHOUT_CLASSIFICATION	2.9321289646155257E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999996072503357	WITHOUT_CLASSIFICATION	3.9274966431245454E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9984624848923159	WITHOUT_CLASSIFICATION	0.0015375151076841378	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9779582945451905	WITHOUT_CLASSIFICATION	0.022041705454809605	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.99999694538517	WITHOUT_CLASSIFICATION	3.0546148299909195E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999976991979925	WITHOUT_CLASSIFICATION	2.3008020074459775E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999849795894	WITHOUT_CLASSIFICATION	1.502041053065782E-8	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999909727042539	WITHOUT_CLASSIFICATION	9.027295746157444E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999995916878943	WITHOUT_CLASSIFICATION	4.083121056636548E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999966670278546	WITHOUT_CLASSIFICATION	3.3329721453497303E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999997926354989	WITHOUT_CLASSIFICATION	2.0736450111160603E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999998978993518	WITHOUT_CLASSIFICATION	1.0210064819393534E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999991199109335	WITHOUT_CLASSIFICATION	8.800890664763063E-7	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999334099995735	WITHOUT_CLASSIFICATION	6.659000042648767E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999990419886182	WITHOUT_CLASSIFICATION	9.580113817690266E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999991836774296	WITHOUT_CLASSIFICATION	8.16322570444459E-7	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999950245478	WITHOUT_CLASSIFICATION	4.975452129989979E-9	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999840809228	WITHOUT_CLASSIFICATION	1.591907716339532E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999888456828278	WITHOUT_CLASSIFICATION	1.1154317172216944E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999911521531	WITHOUT_CLASSIFICATION	8.84784691067892E-9	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999973670371706	WITHOUT_CLASSIFICATION	2.6329628293660675E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9859602973792684	WITHOUT_CLASSIFICATION	0.014039702620731573	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999696755383	WITHOUT_CLASSIFICATION	3.032446179433572E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999995546150653	WITHOUT_CLASSIFICATION	4.4538493480444385E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999871191930952	WITHOUT_CLASSIFICATION	1.2880806904746869E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999991370578438	WITHOUT_CLASSIFICATION	8.629421560837912E-7	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999612997182034	WITHOUT_CLASSIFICATION	3.870028179659555E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999131832547945	WITHOUT_CLASSIFICATION	8.681674520553217E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999997385045	WITHOUT_CLASSIFICATION	2.614955139974396E-9	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999809150907252	WITHOUT_CLASSIFICATION	1.908490927478976E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999982498245	WITHOUT_CLASSIFICATION	1.7501755010704304E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999545304199	WITHOUT_CLASSIFICATION	4.546958005365142E-8	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996753324024	WITHOUT_CLASSIFICATION	3.246675975391151E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999996435396883	WITHOUT_CLASSIFICATION	3.564603117113509E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999944457023813	WITHOUT_CLASSIFICATION	5.554297618717587E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999961943153083	WITHOUT_CLASSIFICATION	3.8056846918302023E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999016193767	WITHOUT_CLASSIFICATION	9.838062330140312E-8	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999990891300569	WITHOUT_CLASSIFICATION	9.108699431120907E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999999943360265	WITHOUT_CLASSIFICATION	5.663973486935258E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999997753981613	WITHOUT_CLASSIFICATION	2.246018386965916E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999681555115	WITHOUT_CLASSIFICATION	3.184448849400564E-8	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999990221995628	WITHOUT_CLASSIFICATION	9.778004371735365E-7	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9971735706777654	WITHOUT_CLASSIFICATION	0.002826429322234725	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9993483982671238	WITHOUT_CLASSIFICATION	6.516017328761997E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999023624193	WITHOUT_CLASSIFICATION	9.763758072436622E-8	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999999749657821	WITHOUT_CLASSIFICATION	2.503421790246968E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999789132477622	WITHOUT_CLASSIFICATION	2.108675223784878E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999717158496	WITHOUT_CLASSIFICATION	2.828415039667063E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996341403082	WITHOUT_CLASSIFICATION	3.658596917483766E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999972509235286	WITHOUT_CLASSIFICATION	2.7490764714414883E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999657555724	WITHOUT_CLASSIFICATION	3.424442766336242E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993340471262	WITHOUT_CLASSIFICATION	6.659528738632044E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993340471262	WITHOUT_CLASSIFICATION	6.659528738632044E-7	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999981740086	WITHOUT_CLASSIFICATION	1.8259914152582243E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9994878706564844	WITHOUT_CLASSIFICATION	5.121293435156996E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999997074790518	WITHOUT_CLASSIFICATION	2.9252094824917817E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999950151036	WITHOUT_CLASSIFICATION	4.984896400924768E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999884746258	WITHOUT_CLASSIFICATION	1.1525374144403188E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999918233034719	WITHOUT_CLASSIFICATION	8.176696528022211E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999999721402	WITHOUT_CLASSIFICATION	2.785985801125154E-11	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998930672833	WITHOUT_CLASSIFICATION	1.0693271665757781E-7	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999855964188	WITHOUT_CLASSIFICATION	1.4403581264537928E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999233205292	WITHOUT_CLASSIFICATION	7.667947076831455E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999997825752448	WITHOUT_CLASSIFICATION	2.1742475512668231E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999955168669511	WITHOUT_CLASSIFICATION	4.483133048874545E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999983314373	WITHOUT_CLASSIFICATION	1.6685627717394258E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999922996768345	WITHOUT_CLASSIFICATION	7.700323165672788E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999884165173172	WITHOUT_CLASSIFICATION	1.1583482682805349E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999884165173172	WITHOUT_CLASSIFICATION	1.1583482682805349E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999749807	WITHOUT_CLASSIFICATION	2.501932862554485E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999740511474096	WITHOUT_CLASSIFICATION	2.594885259046936E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997884945796	WITHOUT_CLASSIFICATION	2.115054204069212E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999934318474	WITHOUT_CLASSIFICATION	6.5681526386149205E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993549732781	WITHOUT_CLASSIFICATION	6.450267219281916E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997183991929	WITHOUT_CLASSIFICATION	2.8160080708708843E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999920113446423	WITHOUT_CLASSIFICATION	7.988655357707191E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999034591245626	WITHOUT_CLASSIFICATION	9.654087543749086E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999630732757	WITHOUT_CLASSIFICATION	3.692672432685114E-8	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999979560994998	WITHOUT_CLASSIFICATION	2.043900500220549E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999983252024807	WITHOUT_CLASSIFICATION	1.674797519277411E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999705739121	WITHOUT_CLASSIFICATION	2.9426087796357328E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999522678	WITHOUT_CLASSIFICATION	4.773221028903927E-11	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999965984463	WITHOUT_CLASSIFICATION	3.401553700343733E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999721551083	WITHOUT_CLASSIFICATION	2.784489176000632E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999841204134	WITHOUT_CLASSIFICATION	1.5879586699771883E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999991224988296	WITHOUT_CLASSIFICATION	8.775011703056267E-7	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999973159603	WITHOUT_CLASSIFICATION	2.68403974770587E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999868596626	WITHOUT_CLASSIFICATION	1.3140337417900485E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999999937534312	WITHOUT_CLASSIFICATION	6.246568800712087E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999876839295	WITHOUT_CLASSIFICATION	1.231607047314154E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999615984011	WITHOUT_CLASSIFICATION	3.840159900220092E-8	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999535368054	WITHOUT_CLASSIFICATION	4.646319460411274E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999982999838352	WITHOUT_CLASSIFICATION	1.7000161648126828E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999968736029367	WITHOUT_CLASSIFICATION	3.126397063302871E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999987722832728	WITHOUT_CLASSIFICATION	1.2277167271180534E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999961694287891	WITHOUT_CLASSIFICATION	3.830571210897211E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9989537660679181	WITHOUT_CLASSIFICATION	0.001046233932081874	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999981880193434	WITHOUT_CLASSIFICATION	1.811980656743251E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999793925245	WITHOUT_CLASSIFICATION	2.060747550779489E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999997239429721	WITHOUT_CLASSIFICATION	2.7605702791923707E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999422077055	WITHOUT_CLASSIFICATION	5.779229439082989E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999577670454	WITHOUT_CLASSIFICATION	4.2232954646963246E-8	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999879496116573	WITHOUT_CLASSIFICATION	1.2050388342658246E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9978099225655285	WITHOUT_CLASSIFICATION	0.0021900774344715277	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999376175986	WITHOUT_CLASSIFICATION	6.238240137527909E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998956883468	WITHOUT_CLASSIFICATION	1.0431165319763334E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999988791052	WITHOUT_CLASSIFICATION	1.1208948018218704E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999995679689451	WITHOUT_CLASSIFICATION	4.3203105490642626E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999997468881	WITHOUT_CLASSIFICATION	2.531118945976041E-9	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997945748768984	WITHOUT_CLASSIFICATION	2.0542512310166639E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997945748768984	WITHOUT_CLASSIFICATION	2.0542512310166639E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999954620556	WITHOUT_CLASSIFICATION	4.53794425574455E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997632531549	WITHOUT_CLASSIFICATION	2.3674684521261092E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.99968542502165	WITHOUT_CLASSIFICATION	3.14574978349923E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999988954323661	WITHOUT_CLASSIFICATION	1.1045676338462698E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999992742560848	WITHOUT_CLASSIFICATION	7.257439152060545E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999999943005939	WITHOUT_CLASSIFICATION	5.699406100295142E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999824480540737	WITHOUT_CLASSIFICATION	1.7551945926327534E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999996016592798	WITHOUT_CLASSIFICATION	3.983407202638484E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999933867637725	WITHOUT_CLASSIFICATION	6.613236227516552E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999191674498	WITHOUT_CLASSIFICATION	8.083255030689919E-8	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999371300285	WITHOUT_CLASSIFICATION	6.286997143632245E-8	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999994516124708	WITHOUT_CLASSIFICATION	5.48387529190737E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999982877781202	WITHOUT_CLASSIFICATION	1.7122218798613183E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998888272059	WITHOUT_CLASSIFICATION	1.1117279402978654E-7	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999982198274669	WITHOUT_CLASSIFICATION	1.7801725330929946E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9998840094941176	WITHOUT_CLASSIFICATION	1.1599050588249868E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999999977494615	WITHOUT_CLASSIFICATION	2.2505384943480445E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999999996815862	WITHOUT_CLASSIFICATION	3.1841379984279452E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999623372506752	WITHOUT_CLASSIFICATION	3.76627493248229E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999254100571	WITHOUT_CLASSIFICATION	7.458994292907633E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999856776206	WITHOUT_CLASSIFICATION	1.432237950840226E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999111844323927	WITHOUT_CLASSIFICATION	8.881556760734171E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999987095475147	WITHOUT_CLASSIFICATION	1.2904524853013005E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999984277823785	WITHOUT_CLASSIFICATION	1.5722176216035777E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999986467090873	WITHOUT_CLASSIFICATION	1.3532909125638244E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999387576746734	WITHOUT_CLASSIFICATION	6.124232532660269E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999886405255	WITHOUT_CLASSIFICATION	1.1359474579183922E-8	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999870581268	WITHOUT_CLASSIFICATION	1.294187311154928E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999781365842769	WITHOUT_CLASSIFICATION	2.1863415722997324E-5	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998638879153912	WITHOUT_CLASSIFICATION	1.3611208460882052E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999953281780783	WITHOUT_CLASSIFICATION	4.671821921593342E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999979657646226	WITHOUT_CLASSIFICATION	2.0342353774765965E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999989740087	WITHOUT_CLASSIFICATION	1.0259912798151024E-9	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999992983436	WITHOUT_CLASSIFICATION	7.016563613200026E-10	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996079629	WITHOUT_CLASSIFICATION	3.9203716041030463E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999499626892231	WITHOUT_CLASSIFICATION	5.0037310776996276E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999698514436	WITHOUT_CLASSIFICATION	3.01485563439002E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999918232162	WITHOUT_CLASSIFICATION	8.176783758487496E-9	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999995263772541	WITHOUT_CLASSIFICATION	4.7362274589636126E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999979280123256	WITHOUT_CLASSIFICATION	2.0719876745050648E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999958542433566	WITHOUT_CLASSIFICATION	4.145756643396632E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999872657108	WITHOUT_CLASSIFICATION	1.2734289270970635E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999932814139	WITHOUT_CLASSIFICATION	6.718586162166468E-9	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999981899	WITHOUT_CLASSIFICATION	1.8100874559722163E-12	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999886612544612	WITHOUT_CLASSIFICATION	1.1338745538923125E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999999234464354	WITHOUT_CLASSIFICATION	7.655356451279918E-8	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997043321712	WITHOUT_CLASSIFICATION	2.956678288091046E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999983314373	WITHOUT_CLASSIFICATION	1.6685627717394258E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999733844	WITHOUT_CLASSIFICATION	2.66155492612893E-11	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999999873768	WITHOUT_CLASSIFICATION	1.2623203644567406E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998914024856937	WITHOUT_CLASSIFICATION	1.085975143062744E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9980055379299043	WITHOUT_CLASSIFICATION	0.001994462070095731	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999957922084	WITHOUT_CLASSIFICATION	4.207791656915532E-9	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999978643557988	WITHOUT_CLASSIFICATION	2.135644201210477E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9933412219915082	WITHOUT_CLASSIFICATION	0.006658778008491781	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999975418189467	WITHOUT_CLASSIFICATION	2.4581810532315833E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999997235449	WITHOUT_CLASSIFICATION	2.7645510583732273E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999262925938943	WITHOUT_CLASSIFICATION	7.370740610559031E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998854571784	WITHOUT_CLASSIFICATION	1.1454282153921613E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999833026888	WITHOUT_CLASSIFICATION	1.669731125113899E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999999997534013	WITHOUT_CLASSIFICATION	2.4659869394593474E-9	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999664123844	WITHOUT_CLASSIFICATION	3.3587615532951737E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993267918496	WITHOUT_CLASSIFICATION	6.732081503444212E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999386282250681	WITHOUT_CLASSIFICATION	6.137177493189173E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998643620878	WITHOUT_CLASSIFICATION	1.3563791227381363E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999980479048249	WITHOUT_CLASSIFICATION	1.9520951750971092E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999999673294356	WITHOUT_CLASSIFICATION	3.267056439713044E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993267918496	WITHOUT_CLASSIFICATION	6.732081503444212E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999997845046535	WITHOUT_CLASSIFICATION	2.1549534656603408E-7	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999997331933	WITHOUT_CLASSIFICATION	2.668067408483432E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999972943831533	WITHOUT_CLASSIFICATION	2.7056168466934844E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999995597619	WITHOUT_CLASSIFICATION	4.402381028781176E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999988318770994	WITHOUT_CLASSIFICATION	1.1681229006398806E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999973633336	WITHOUT_CLASSIFICATION	2.6366663342984057E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999743667	WITHOUT_CLASSIFICATION	2.5633179419459146E-11	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999929572177945	WITHOUT_CLASSIFICATION	7.042782205439188E-6	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999997072812	WITHOUT_CLASSIFICATION	2.9271892220591843E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999800121434724	WITHOUT_CLASSIFICATION	1.998785652762778E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9995537005544731	WITHOUT_CLASSIFICATION	4.4629944552689065E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998201322069448	WITHOUT_CLASSIFICATION	1.79867793055258E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999665845453	WITHOUT_CLASSIFICATION	3.341545476347669E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9996997370086289	WITHOUT_CLASSIFICATION	3.0026299137109614E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999893159837541	WITHOUT_CLASSIFICATION	1.068401624599531E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998223459649	WITHOUT_CLASSIFICATION	1.776540350181469E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999521184106	WITHOUT_CLASSIFICATION	4.788158942457884E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999515400056	WITHOUT_CLASSIFICATION	4.8459994427419545E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9992328775668923	WITHOUT_CLASSIFICATION	7.671224331076369E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999972474186275	WITHOUT_CLASSIFICATION	2.7525813725440174E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999709695058602	WITHOUT_CLASSIFICATION	2.9030494139741645E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999984171173094	WITHOUT_CLASSIFICATION	1.5828826905937695E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997342443706	WITHOUT_CLASSIFICATION	2.657556294467066E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999880924033	WITHOUT_CLASSIFICATION	1.190759670906973E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999999130873	WITHOUT_CLASSIFICATION	8.691263270540155E-11	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999821484682	WITHOUT_CLASSIFICATION	1.785153187237285E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998179786876464	WITHOUT_CLASSIFICATION	1.820213123536811E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999744242675	WITHOUT_CLASSIFICATION	2.557573247482563E-8	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9267176589363102	WITHOUT_CLASSIFICATION	0.07328234106368976	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9964004425141993	WITHOUT_CLASSIFICATION	0.0035995574858007015	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999999905001946	WITHOUT_CLASSIFICATION	9.499805401370393E-8	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999614692601412	WITHOUT_CLASSIFICATION	3.853073985888488E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999964957809611	WITHOUT_CLASSIFICATION	3.5042190390791976E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999804287638	WITHOUT_CLASSIFICATION	1.9571236202469954E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.99999943072011	WITHOUT_CLASSIFICATION	5.692798900691186E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999997559065	WITHOUT_CLASSIFICATION	2.4409350422187274E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999996682267	WITHOUT_CLASSIFICATION	3.3177330525479297E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993290709009	WITHOUT_CLASSIFICATION	6.709290991490137E-7	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999552406	WITHOUT_CLASSIFICATION	4.4759509398584956E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998514314309	WITHOUT_CLASSIFICATION	1.4856856916777333E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9984250443694457	WITHOUT_CLASSIFICATION	0.0015749556305543293	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9984250443694457	WITHOUT_CLASSIFICATION	0.0015749556305543293	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999999576710695	WITHOUT_CLASSIFICATION	4.232893050581048E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999918785781	WITHOUT_CLASSIFICATION	8.121421822995317E-9	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999449399	WITHOUT_CLASSIFICATION	5.506010013506681E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7300483164359683	IMPLEMENTATION	0.26995168356403154	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996626337802	WITHOUT_CLASSIFICATION	3.3736621978678863E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996626337802	WITHOUT_CLASSIFICATION	3.3736621978678863E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999990949239098	WITHOUT_CLASSIFICATION	9.050760902414626E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999959800941	WITHOUT_CLASSIFICATION	4.019905920062562E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999958234058817	WITHOUT_CLASSIFICATION	4.176594118307121E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999949238752559	WITHOUT_CLASSIFICATION	5.076124744189264E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998504754711	WITHOUT_CLASSIFICATION	1.4952452892605002E-7	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999946632558748	WITHOUT_CLASSIFICATION	5.336744125216068E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998864926266	WITHOUT_CLASSIFICATION	1.1350737345819472E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999988282581	WITHOUT_CLASSIFICATION	1.1717419048535111E-8	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999799331388	WITHOUT_CLASSIFICATION	2.0066861153674033E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999571345014	WITHOUT_CLASSIFICATION	4.286549852539007E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999571345014	WITHOUT_CLASSIFICATION	4.286549852539007E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999996942301778	WITHOUT_CLASSIFICATION	3.0576982218374028E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999692767699	WITHOUT_CLASSIFICATION	3.0723230105312137E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999833012594	WITHOUT_CLASSIFICATION	1.669874063674433E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999336847493981	WITHOUT_CLASSIFICATION	6.631525060189486E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999989137513936	WITHOUT_CLASSIFICATION	1.0862486063720342E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133213133	WITHOUT_CLASSIFICATION	8.667868662972077E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160552275	WITHOUT_CLASSIFICATION	6.839447724860418E-7	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998464440417	WITHOUT_CLASSIFICATION	1.5355595834698713E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996830247375	WITHOUT_CLASSIFICATION	3.169752624915338E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998357520895714	WITHOUT_CLASSIFICATION	1.6424791042858798E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999927560184	WITHOUT_CLASSIFICATION	7.243981679428538E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999800121434724	WITHOUT_CLASSIFICATION	1.998785652762778E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998732548869	WITHOUT_CLASSIFICATION	1.267451130499997E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999964038186925	WITHOUT_CLASSIFICATION	3.5961813075667354E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997874731056	WITHOUT_CLASSIFICATION	2.1252689437287568E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.999993243413736	WITHOUT_CLASSIFICATION	6.756586264034896E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990054393059	WITHOUT_CLASSIFICATION	9.945606942440445E-7	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999986495741395	WITHOUT_CLASSIFICATION	1.3504258604507007E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999321460126	WITHOUT_CLASSIFICATION	6.785398743203322E-8	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999977407932058	WITHOUT_CLASSIFICATION	2.2592067940993716E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999986849062685	WITHOUT_CLASSIFICATION	1.31509373144095E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999853737032366	WITHOUT_CLASSIFICATION	1.462629676348373E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999853737032366	WITHOUT_CLASSIFICATION	1.462629676348373E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999970673214573	WITHOUT_CLASSIFICATION	2.93267854266714E-6	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999984939812777	WITHOUT_CLASSIFICATION	1.5060187222712013E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998900673635106	WITHOUT_CLASSIFICATION	1.0993263648947228E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998644514471594	WITHOUT_CLASSIFICATION	1.3554855284055714E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999992696128496	WITHOUT_CLASSIFICATION	7.303871504626573E-7	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999613354974	WITHOUT_CLASSIFICATION	3.866450262439675E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999806409503552	WITHOUT_CLASSIFICATION	1.9359049644696755E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999982543446	WITHOUT_CLASSIFICATION	1.7456554086089866E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999975853633857	WITHOUT_CLASSIFICATION	2.4146366142392607E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999588686073849	WITHOUT_CLASSIFICATION	4.113139261510594E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992679778489	WITHOUT_CLASSIFICATION	7.320221510200871E-7	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998868567155524	WITHOUT_CLASSIFICATION	1.1314328444758208E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9996032454838858	WITHOUT_CLASSIFICATION	3.96754516114209E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999905929108	WITHOUT_CLASSIFICATION	9.40708925980126E-9	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999995550322	WITHOUT_CLASSIFICATION	4.4496787262410005E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969553302399	WITHOUT_CLASSIFICATION	3.044669760040756E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999951224976	WITHOUT_CLASSIFICATION	4.877502504161986E-9	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998384155656	WITHOUT_CLASSIFICATION	1.6158443451844387E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999677435630779	WITHOUT_CLASSIFICATION	3.225643692208373E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999644	WITHOUT_CLASSIFICATION	3.5583773190145115E-14	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999999999939347	WITHOUT_CLASSIFICATION	6.06529947844517E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999899822064	WITHOUT_CLASSIFICATION	1.0017793633910191E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999998516399593	WITHOUT_CLASSIFICATION	1.483600406249552E-7	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999992356	WITHOUT_CLASSIFICATION	7.643384290144694E-13	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999731326739	WITHOUT_CLASSIFICATION	2.6867326158548963E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999731326739	WITHOUT_CLASSIFICATION	2.6867326158548963E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999913225961118	WITHOUT_CLASSIFICATION	8.677403888198072E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999655253519015	WITHOUT_CLASSIFICATION	3.44746480985098E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999609434757	WITHOUT_CLASSIFICATION	3.905652439138512E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999994181505	WITHOUT_CLASSIFICATION	5.818495044236192E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999316078255	WITHOUT_CLASSIFICATION	6.839217442410726E-8	IMPLEMENTATION
