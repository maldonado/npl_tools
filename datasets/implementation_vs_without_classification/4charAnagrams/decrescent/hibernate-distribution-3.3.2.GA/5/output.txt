// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998650161971273	WITHOUT_CLASSIFICATION	0.0013498380287269801	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998650161971273	WITHOUT_CLASSIFICATION	0.0013498380287269801	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996122323914436	WITHOUT_CLASSIFICATION	3.8776760855630996E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.8757562720468876	WITHOUT_CLASSIFICATION	0.12424372795311248	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9662027840185966	WITHOUT_CLASSIFICATION	0.03379721598140335	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.7993273453446416	IMPLEMENTATION	0.20067265465535838	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9817887321988368	WITHOUT_CLASSIFICATION	0.018211267801163198	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.824071412026809	WITHOUT_CLASSIFICATION	0.17592858797319097	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9728252042444627	WITHOUT_CLASSIFICATION	0.027174795755537235	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.8971444264408273	WITHOUT_CLASSIFICATION	0.10285557355917277	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9985481236240826	WITHOUT_CLASSIFICATION	0.0014518763759173222	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.6474183562827682	WITHOUT_CLASSIFICATION	0.3525816437172318	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.985685370180709	WITHOUT_CLASSIFICATION	0.014314629819291083	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.985685370180709	WITHOUT_CLASSIFICATION	0.014314629819291083	IMPLEMENTATION
/**	IMPLEMENTATION	0.7289635482952905	IMPLEMENTATION	0.2710364517047095	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7053869009088954	IMPLEMENTATION	0.29461309909110456	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.998259083590343	IMPLEMENTATION	0.0017409164096569996	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9926774736436114	WITHOUT_CLASSIFICATION	0.00732252635638875	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999997010026	WITHOUT_CLASSIFICATION	2.989974474007714E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.908918231313983	WITHOUT_CLASSIFICATION	0.09108176868601701	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.7392222973242283	WITHOUT_CLASSIFICATION	0.26077770267577166	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9992664435389547	WITHOUT_CLASSIFICATION	7.335564610453183E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8373225871682467	WITHOUT_CLASSIFICATION	0.16267741283175324	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9696835815490779	IMPLEMENTATION	0.030316418450922263	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9696835815490779	IMPLEMENTATION	0.030316418450922263	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9988196654624516	IMPLEMENTATION	0.001180334537548428	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9900581429063084	WITHOUT_CLASSIFICATION	0.009941857093691579	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9992785526242163	IMPLEMENTATION	7.21447375783731E-4	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.661518653658909	IMPLEMENTATION	0.338481346341091	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.5462103348622424	IMPLEMENTATION	0.45378966513775765	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9863272468752114	WITHOUT_CLASSIFICATION	0.013672753124788594	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6754325767019121	WITHOUT_CLASSIFICATION	0.32456742329808796	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998147961600584	WITHOUT_CLASSIFICATION	1.852038399415858E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8128676315609372	WITHOUT_CLASSIFICATION	0.18713236843906278	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.7994164368227593	IMPLEMENTATION	0.20058356317724074	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9972932687003451	WITHOUT_CLASSIFICATION	0.0027067312996548925	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.842810809033278	IMPLEMENTATION	0.15718919096672207	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8261471058936116	WITHOUT_CLASSIFICATION	0.1738528941063883	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9879215742838704	WITHOUT_CLASSIFICATION	0.01207842571612961	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.997913379950753	IMPLEMENTATION	0.002086620049246987	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.997913379950753	IMPLEMENTATION	0.002086620049246987	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9636324626892353	IMPLEMENTATION	0.03636753731076472	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9997360261280103	WITHOUT_CLASSIFICATION	2.639738719897519E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9946372004043038	WITHOUT_CLASSIFICATION	0.0053627995956961666	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9999586015786119	IMPLEMENTATION	4.1398421388058994E-5	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9033949783835573	WITHOUT_CLASSIFICATION	0.0966050216164427	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.999082363227534	WITHOUT_CLASSIFICATION	9.176367724660055E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9433333794847192	WITHOUT_CLASSIFICATION	0.05666662051528087	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999952468219373	WITHOUT_CLASSIFICATION	4.753178062684829E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.6852931248701855	IMPLEMENTATION	0.31470687512981443	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9966834017598329	WITHOUT_CLASSIFICATION	0.0033165982401670365	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.8769899584054742	IMPLEMENTATION	0.12301004159452576	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.8737691381664112	IMPLEMENTATION	0.1262308618335887	WITHOUT_CLASSIFICATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9650666450651887	WITHOUT_CLASSIFICATION	0.034933354934811256	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.7928634747939919	WITHOUT_CLASSIFICATION	0.20713652520600806	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9958367182359316	IMPLEMENTATION	0.004163281764068416	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7928634747939919	WITHOUT_CLASSIFICATION	0.20713652520600806	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.999997312814704	IMPLEMENTATION	2.687185296000275E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9989295790399549	IMPLEMENTATION	0.0010704209600450208	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7928634747939919	WITHOUT_CLASSIFICATION	0.20713652520600806	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999998524097153	WITHOUT_CLASSIFICATION	1.4759028463549482E-7	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999220745064	WITHOUT_CLASSIFICATION	7.792549359639016E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.6214240891778439	WITHOUT_CLASSIFICATION	0.37857591082215625	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999707702664955	WITHOUT_CLASSIFICATION	2.922973350451869E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996109253553667	WITHOUT_CLASSIFICATION	3.890746446333487E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999991550269334	WITHOUT_CLASSIFICATION	8.44973066513258E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998864581781	WITHOUT_CLASSIFICATION	1.1354182197459285E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999997842371754	WITHOUT_CLASSIFICATION	2.1576282460884577E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999994735097903	WITHOUT_CLASSIFICATION	5.26490209645665E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999994735097903	WITHOUT_CLASSIFICATION	5.26490209645665E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999851259488	WITHOUT_CLASSIFICATION	1.4874051202215687E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998003234061	WITHOUT_CLASSIFICATION	1.9967659395369653E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999998840045431	WITHOUT_CLASSIFICATION	1.1599545685118452E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999951896427103	WITHOUT_CLASSIFICATION	4.810357289702568E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999833953199	WITHOUT_CLASSIFICATION	1.6604680021935082E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999833953199	WITHOUT_CLASSIFICATION	1.6604680021935082E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997234903443	WITHOUT_CLASSIFICATION	2.765096557857079E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997626689166945	WITHOUT_CLASSIFICATION	2.3733108330549517E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999977245086598	WITHOUT_CLASSIFICATION	2.2754913402502813E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999999811923699	WITHOUT_CLASSIFICATION	1.8807630106355728E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999996877187	WITHOUT_CLASSIFICATION	3.122813727611371E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999882140583	WITHOUT_CLASSIFICATION	1.1785941612211672E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999980784476918	WITHOUT_CLASSIFICATION	1.921552308111972E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999989790327681	WITHOUT_CLASSIFICATION	1.0209672318598145E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999978861064799	WITHOUT_CLASSIFICATION	2.1138935200970162E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998113589192182	WITHOUT_CLASSIFICATION	0.001886410807818052	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999933004743664	WITHOUT_CLASSIFICATION	6.699525633495521E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999974754423337	WITHOUT_CLASSIFICATION	2.5245576661771878E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999878272	WITHOUT_CLASSIFICATION	1.2172818493223137E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999959657001206	WITHOUT_CLASSIFICATION	4.034299879309449E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999959657001206	WITHOUT_CLASSIFICATION	4.034299879309449E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996953624243	WITHOUT_CLASSIFICATION	3.0463757576742265E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999992356192411	WITHOUT_CLASSIFICATION	7.643807590191837E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993432265226	WITHOUT_CLASSIFICATION	6.567734773614398E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999925076568993	WITHOUT_CLASSIFICATION	7.492343100787136E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999869553567323	WITHOUT_CLASSIFICATION	1.3044643267693124E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289635482952905	IMPLEMENTATION	0.2710364517047095	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289635482952905	IMPLEMENTATION	0.2710364517047095	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992798300211	WITHOUT_CLASSIFICATION	7.201699788819274E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999981512846	WITHOUT_CLASSIFICATION	1.8487154276883843E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999990059161	WITHOUT_CLASSIFICATION	9.940839079587006E-10	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999609353833074	WITHOUT_CLASSIFICATION	3.906461669249459E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999973412163878	WITHOUT_CLASSIFICATION	2.6587836120849376E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914319564909	WITHOUT_CLASSIFICATION	8.568043509040958E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985358401253	WITHOUT_CLASSIFICATION	1.4641598746741489E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998543701222	WITHOUT_CLASSIFICATION	1.4562987778479891E-7	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999885483771015	WITHOUT_CLASSIFICATION	1.145162289837696E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999810798042027	WITHOUT_CLASSIFICATION	1.8920195797245877E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999898306262577	WITHOUT_CLASSIFICATION	1.0169373742330077E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999885483771015	WITHOUT_CLASSIFICATION	1.145162289837696E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999898306262577	WITHOUT_CLASSIFICATION	1.0169373742330077E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999244183929	WITHOUT_CLASSIFICATION	7.558160711513668E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999615397131719	WITHOUT_CLASSIFICATION	3.846028682809361E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999802059837818	WITHOUT_CLASSIFICATION	1.9794016218124707E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9991582856556475	WITHOUT_CLASSIFICATION	8.417143443524268E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999923191702	WITHOUT_CLASSIFICATION	7.680829678122037E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999995705492	WITHOUT_CLASSIFICATION	4.2945083818899333E-10	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.8599199286231829	WITHOUT_CLASSIFICATION	0.14008007137681708	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9994004095064976	WITHOUT_CLASSIFICATION	5.995904935024438E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999659067365937	WITHOUT_CLASSIFICATION	3.4093263406297547E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998459411721112	WITHOUT_CLASSIFICATION	1.5405882788877863E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999922696706215	WITHOUT_CLASSIFICATION	7.730329378573767E-6	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999985954120646	WITHOUT_CLASSIFICATION	1.4045879354143122E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999636257665	WITHOUT_CLASSIFICATION	3.637423351352915E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9982029350489503	WITHOUT_CLASSIFICATION	0.0017970649510496326	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999987320097208	WITHOUT_CLASSIFICATION	1.2679902792051795E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999991513598	WITHOUT_CLASSIFICATION	8.486402202228619E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999597922987	WITHOUT_CLASSIFICATION	4.020770119370477E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998328561722234	WITHOUT_CLASSIFICATION	1.6714382777662797E-4	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999735587912648	WITHOUT_CLASSIFICATION	2.6441208735109946E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993325686853	WITHOUT_CLASSIFICATION	6.674313146253717E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999760977345781	WITHOUT_CLASSIFICATION	2.3902265421872136E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999995287761	WITHOUT_CLASSIFICATION	4.7122390055461024E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999952968754378	WITHOUT_CLASSIFICATION	4.7031245622695385E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999380696882	WITHOUT_CLASSIFICATION	6.193031180705632E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9917374436152107	WITHOUT_CLASSIFICATION	0.008262556384789234	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999981832067514	WITHOUT_CLASSIFICATION	1.81679324852315E-6	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999992566412	WITHOUT_CLASSIFICATION	7.433587459975702E-10	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9900005917343803	WITHOUT_CLASSIFICATION	0.009999408265619776	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999883951182	WITHOUT_CLASSIFICATION	1.1604881699754345E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999997815478033	WITHOUT_CLASSIFICATION	2.184521967013427E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999993493472097	WITHOUT_CLASSIFICATION	6.506527903815206E-7	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999986509486302	WITHOUT_CLASSIFICATION	1.3490513698917516E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999956418958	WITHOUT_CLASSIFICATION	4.3581042940492836E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999688570091	WITHOUT_CLASSIFICATION	3.114299085608417E-8	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998181390066	WITHOUT_CLASSIFICATION	1.818609934847352E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999968726367	WITHOUT_CLASSIFICATION	3.1273633134229485E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999688570091	WITHOUT_CLASSIFICATION	3.114299085608417E-8	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996282579253	WITHOUT_CLASSIFICATION	3.717420746659765E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996528211456	WITHOUT_CLASSIFICATION	3.471788543697316E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999995410275891	WITHOUT_CLASSIFICATION	4.5897241093921395E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999987838283215	WITHOUT_CLASSIFICATION	1.2161716784445107E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999978445288326	WITHOUT_CLASSIFICATION	2.155471167504671E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999721322538	WITHOUT_CLASSIFICATION	2.786774617528911E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999721322538	WITHOUT_CLASSIFICATION	2.786774617528911E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999950209846167	WITHOUT_CLASSIFICATION	4.979015383390612E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999979205545578	WITHOUT_CLASSIFICATION	2.0794454421205225E-6	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999033447439836	WITHOUT_CLASSIFICATION	9.665525601644013E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999995919914	WITHOUT_CLASSIFICATION	4.080086703838268E-10	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998430591744	WITHOUT_CLASSIFICATION	1.569408255552711E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999858427403713	WITHOUT_CLASSIFICATION	1.415725962863714E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999994245516566	WITHOUT_CLASSIFICATION	5.754483433713049E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999894303940762	WITHOUT_CLASSIFICATION	1.0569605923865925E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999940825803935	WITHOUT_CLASSIFICATION	5.917419606553142E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999933639516	WITHOUT_CLASSIFICATION	6.636048342577962E-9	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993388716527	WITHOUT_CLASSIFICATION	6.61128347272528E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993388716527	WITHOUT_CLASSIFICATION	6.61128347272528E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999393440462295	WITHOUT_CLASSIFICATION	6.065595377041527E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999787565282	WITHOUT_CLASSIFICATION	2.1243471807707358E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999989517571609	WITHOUT_CLASSIFICATION	1.0482428390256442E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993388716527	WITHOUT_CLASSIFICATION	6.61128347272528E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999393440462295	WITHOUT_CLASSIFICATION	6.065595377041527E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999393440462295	WITHOUT_CLASSIFICATION	6.065595377041527E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999995867298088	WITHOUT_CLASSIFICATION	4.132701912079535E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999766723866003	WITHOUT_CLASSIFICATION	2.3327613399826625E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999846278226	WITHOUT_CLASSIFICATION	1.537217738910411E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999968406812842	WITHOUT_CLASSIFICATION	3.1593187157295556E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999920480445587	WITHOUT_CLASSIFICATION	7.951955441368031E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999920480445587	WITHOUT_CLASSIFICATION	7.951955441368031E-6	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999959239678126	WITHOUT_CLASSIFICATION	4.0760321873449326E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999684526286	WITHOUT_CLASSIFICATION	3.154737139849818E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999998685251549	WITHOUT_CLASSIFICATION	1.314748451766622E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999981799582	WITHOUT_CLASSIFICATION	1.8200416980278808E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999981799582	WITHOUT_CLASSIFICATION	1.8200416980278808E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999998896359719	WITHOUT_CLASSIFICATION	1.1036402810473775E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99996368152837	WITHOUT_CLASSIFICATION	3.6318471630036925E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999405871029714	WITHOUT_CLASSIFICATION	5.941289702870363E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999895534268	WITHOUT_CLASSIFICATION	1.0446573131643078E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999999492573	WITHOUT_CLASSIFICATION	5.074273899067855E-11	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999990732641	WITHOUT_CLASSIFICATION	9.267359007570319E-9	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998574841829871	WITHOUT_CLASSIFICATION	1.4251581701275236E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999620710199064	WITHOUT_CLASSIFICATION	3.792898009356485E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999924721198102	WITHOUT_CLASSIFICATION	7.527880189725701E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999405871029714	WITHOUT_CLASSIFICATION	5.941289702870363E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999724319433849	WITHOUT_CLASSIFICATION	2.7568056615069638E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999440938989439	WITHOUT_CLASSIFICATION	5.59061010560486E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999440938989439	WITHOUT_CLASSIFICATION	5.59061010560486E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999952695947192	WITHOUT_CLASSIFICATION	4.730405280779292E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999861806801535	WITHOUT_CLASSIFICATION	1.3819319846454056E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978343723273866	WITHOUT_CLASSIFICATION	0.0021656276726134066	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999996314318093	WITHOUT_CLASSIFICATION	3.685681907544165E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999002502557895	WITHOUT_CLASSIFICATION	9.974974421051928E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9997329515311195	WITHOUT_CLASSIFICATION	2.6704846888047496E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999998134835301	WITHOUT_CLASSIFICATION	1.8651647005939518E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999989730085111	WITHOUT_CLASSIFICATION	1.0269914888395707E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999999237484	WITHOUT_CLASSIFICATION	7.625149767854577E-11	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999999237484	WITHOUT_CLASSIFICATION	7.625149767854577E-11	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996109253553667	WITHOUT_CLASSIFICATION	3.890746446333487E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999952334266	WITHOUT_CLASSIFICATION	4.76657338419795E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998968694898	WITHOUT_CLASSIFICATION	1.0313051025426137E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999996288521155	WITHOUT_CLASSIFICATION	3.7114788458132934E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999234091992	WITHOUT_CLASSIFICATION	7.659080080891908E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999612054333	WITHOUT_CLASSIFICATION	3.879456674262055E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999993548922508	WITHOUT_CLASSIFICATION	6.451077491875082E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999989522300133	WITHOUT_CLASSIFICATION	1.0477699866635617E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999988357465551	WITHOUT_CLASSIFICATION	1.1642534447983164E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999998884561428	WITHOUT_CLASSIFICATION	1.1154385702982361E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999984680939075	WITHOUT_CLASSIFICATION	1.5319060925727823E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998864581781	WITHOUT_CLASSIFICATION	1.1354182197459285E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.99999940619609	WITHOUT_CLASSIFICATION	5.938039101421863E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.99999940619609	WITHOUT_CLASSIFICATION	5.938039101421863E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998921644258	WITHOUT_CLASSIFICATION	1.0783557417344094E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999990099259726	WITHOUT_CLASSIFICATION	9.900740273804817E-7	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999295937629	WITHOUT_CLASSIFICATION	7.040623707799315E-8	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999025762589	WITHOUT_CLASSIFICATION	9.742374106705238E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999990495307733	WITHOUT_CLASSIFICATION	9.504692266879757E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999989462740371	WITHOUT_CLASSIFICATION	1.0537259629365162E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999994735097903	WITHOUT_CLASSIFICATION	5.26490209645665E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995342272114	WITHOUT_CLASSIFICATION	4.657727884481071E-7	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999994765997919	WITHOUT_CLASSIFICATION	5.234002081307774E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999982563772735	WITHOUT_CLASSIFICATION	1.7436227265233636E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998432800603	WITHOUT_CLASSIFICATION	1.5671993969648918E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.999997242528225	WITHOUT_CLASSIFICATION	2.7574717749952626E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999985834651115	WITHOUT_CLASSIFICATION	1.416534888465178E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995278159107	WITHOUT_CLASSIFICATION	4.7218408926866534E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999044120482	WITHOUT_CLASSIFICATION	9.55879517982731E-8	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999979837547994	WITHOUT_CLASSIFICATION	2.016245200609904E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999981242441884	WITHOUT_CLASSIFICATION	1.8757558116126005E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999984165035849	WITHOUT_CLASSIFICATION	1.583496415058641E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999998149903392	WITHOUT_CLASSIFICATION	1.8500966083718283E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997589844591	WITHOUT_CLASSIFICATION	2.410155408913378E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999998884561428	WITHOUT_CLASSIFICATION	1.1154385702982361E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.99999940619609	WITHOUT_CLASSIFICATION	5.938039101421863E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995278159107	WITHOUT_CLASSIFICATION	4.7218408926866534E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999851259488	WITHOUT_CLASSIFICATION	1.4874051202215687E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999973299533	WITHOUT_CLASSIFICATION	2.6700468251182005E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999998690714121	WITHOUT_CLASSIFICATION	1.3092858776722077E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999296819201	WITHOUT_CLASSIFICATION	7.031807991879113E-8	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999990785100665	WITHOUT_CLASSIFICATION	9.214899333936165E-7	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999383340699	WITHOUT_CLASSIFICATION	6.166593010791387E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999997226693647	WITHOUT_CLASSIFICATION	2.7733063539351487E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998482377644	WITHOUT_CLASSIFICATION	1.517622355860043E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999680723681952	WITHOUT_CLASSIFICATION	3.192763180480132E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999986744626342	WITHOUT_CLASSIFICATION	1.3255373657958111E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.99999823483231	WITHOUT_CLASSIFICATION	1.7651676899644068E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.99999823483231	WITHOUT_CLASSIFICATION	1.7651676899644068E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999994361325	WITHOUT_CLASSIFICATION	5.638674518684065E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999104344074	WITHOUT_CLASSIFICATION	8.956559268890219E-8	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999395082042747	WITHOUT_CLASSIFICATION	6.0491795725386306E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999901926615967	WITHOUT_CLASSIFICATION	9.807338403253322E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999975671269	WITHOUT_CLASSIFICATION	2.4328730387112166E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999001691877	WITHOUT_CLASSIFICATION	9.983081231750813E-8	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999821384173	WITHOUT_CLASSIFICATION	1.7861582593958446E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998003234061	WITHOUT_CLASSIFICATION	1.9967659395369653E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999996097734128	WITHOUT_CLASSIFICATION	3.902265871846967E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999359408106	WITHOUT_CLASSIFICATION	6.405918948083277E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999359408106	WITHOUT_CLASSIFICATION	6.405918948083277E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998736815425	WITHOUT_CLASSIFICATION	1.2631845753379018E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999999449208273	WITHOUT_CLASSIFICATION	5.507917272483027E-8	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999401159322	WITHOUT_CLASSIFICATION	5.988406780275954E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998717917383	WITHOUT_CLASSIFICATION	1.2820826162010917E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999999446860555	WITHOUT_CLASSIFICATION	5.531394451303154E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999997521509568	WITHOUT_CLASSIFICATION	2.478490431489461E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999998884561428	WITHOUT_CLASSIFICATION	1.1154385702982361E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998864581781	WITHOUT_CLASSIFICATION	1.1354182197459285E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995278159107	WITHOUT_CLASSIFICATION	4.7218408926866534E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995278159107	WITHOUT_CLASSIFICATION	4.7218408926866534E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998334890274	WITHOUT_CLASSIFICATION	1.665109724528137E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998334890274	WITHOUT_CLASSIFICATION	1.665109724528137E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999998071451911	WITHOUT_CLASSIFICATION	1.9285480889605207E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999994911518589	WITHOUT_CLASSIFICATION	5.088481411787169E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999994911518589	WITHOUT_CLASSIFICATION	5.088481411787169E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999979262838175	WITHOUT_CLASSIFICATION	2.0737161825460734E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999991738379614	WITHOUT_CLASSIFICATION	8.261620385240883E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999273510951	WITHOUT_CLASSIFICATION	7.264890484991466E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999940848072	WITHOUT_CLASSIFICATION	5.915192731352432E-9	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998607515552	WITHOUT_CLASSIFICATION	1.3924844487900137E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999951896427103	WITHOUT_CLASSIFICATION	4.810357289702568E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999951896427103	WITHOUT_CLASSIFICATION	4.810357289702568E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997656867988928	WITHOUT_CLASSIFICATION	2.3431320110715612E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999989003712929	WITHOUT_CLASSIFICATION	1.0996287071085622E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999928433206	WITHOUT_CLASSIFICATION	7.156679359665821E-9	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999990750910921	WITHOUT_CLASSIFICATION	9.249089078609181E-7	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999910540981	WITHOUT_CLASSIFICATION	8.945901842412382E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999993601079536	WITHOUT_CLASSIFICATION	6.398920462331833E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999833953199	WITHOUT_CLASSIFICATION	1.6604680021935082E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999584439759	WITHOUT_CLASSIFICATION	4.155602398278463E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999584439759	WITHOUT_CLASSIFICATION	4.155602398278463E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997234903443	WITHOUT_CLASSIFICATION	2.765096557857079E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997234903443	WITHOUT_CLASSIFICATION	2.765096557857079E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999906712063221	WITHOUT_CLASSIFICATION	9.328793677981568E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999906712063221	WITHOUT_CLASSIFICATION	9.328793677981568E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999953678694	WITHOUT_CLASSIFICATION	4.632130584823376E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999953678694	WITHOUT_CLASSIFICATION	4.632130584823376E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999951896427103	WITHOUT_CLASSIFICATION	4.810357289702568E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999833953199	WITHOUT_CLASSIFICATION	1.6604680021935082E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999584439759	WITHOUT_CLASSIFICATION	4.155602398278463E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999584439759	WITHOUT_CLASSIFICATION	4.155602398278463E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997234903443	WITHOUT_CLASSIFICATION	2.765096557857079E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999906712063221	WITHOUT_CLASSIFICATION	9.328793677981568E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999906712063221	WITHOUT_CLASSIFICATION	9.328793677981568E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999953678694	WITHOUT_CLASSIFICATION	4.632130584823376E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999965980241607	WITHOUT_CLASSIFICATION	3.4019758392872203E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999978481587521	WITHOUT_CLASSIFICATION	2.151841247902574E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997905881840017	WITHOUT_CLASSIFICATION	2.0941181599838196E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998858984025127	WITHOUT_CLASSIFICATION	1.1410159748727237E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999969423289506	WITHOUT_CLASSIFICATION	3.057671049264556E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999986098404614	WITHOUT_CLASSIFICATION	1.3901595385928574E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999985950188228	WITHOUT_CLASSIFICATION	1.4049811771973598E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999996630056593	WITHOUT_CLASSIFICATION	3.3699434061176946E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999907744076927	WITHOUT_CLASSIFICATION	9.225592307284825E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999686102164	WITHOUT_CLASSIFICATION	3.1389783684477695E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999953732688	WITHOUT_CLASSIFICATION	4.626731200037066E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999276993342	WITHOUT_CLASSIFICATION	7.230066581779636E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999950209846167	WITHOUT_CLASSIFICATION	4.979015383390612E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999986098404614	WITHOUT_CLASSIFICATION	1.3901595385928574E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880237659341	WITHOUT_CLASSIFICATION	1.1976234065819144E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880237659341	WITHOUT_CLASSIFICATION	1.1976234065819144E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999040763475	WITHOUT_CLASSIFICATION	9.592365250458422E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999840218966	WITHOUT_CLASSIFICATION	1.5978103448097898E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999840218966	WITHOUT_CLASSIFICATION	1.5978103448097898E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999818908186	WITHOUT_CLASSIFICATION	1.8109181356052425E-8	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999799404222	WITHOUT_CLASSIFICATION	2.0059577736298543E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999997306592614	WITHOUT_CLASSIFICATION	2.693407385776594E-7	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999942237427234	WITHOUT_CLASSIFICATION	5.776257276533232E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999942237427234	WITHOUT_CLASSIFICATION	5.776257276533232E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999996877187	WITHOUT_CLASSIFICATION	3.122813727611371E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998233559974	WITHOUT_CLASSIFICATION	1.766440027529256E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998233559974	WITHOUT_CLASSIFICATION	1.766440027529256E-7	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999996344308353	WITHOUT_CLASSIFICATION	3.655691647369092E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999870285969	WITHOUT_CLASSIFICATION	1.2971403096946562E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999999520512	WITHOUT_CLASSIFICATION	4.7948853543711384E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999972039438301	WITHOUT_CLASSIFICATION	2.7960561699328072E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999557473912	WITHOUT_CLASSIFICATION	4.4252608684312307E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999367385609	WITHOUT_CLASSIFICATION	6.326143908025955E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999882140583	WITHOUT_CLASSIFICATION	1.1785941612211672E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.99999658449586	WITHOUT_CLASSIFICATION	3.41550413996182E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9888598358379983	WITHOUT_CLASSIFICATION	0.011140164162001687	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999986598821518	WITHOUT_CLASSIFICATION	1.3401178482466999E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999993474778917	WITHOUT_CLASSIFICATION	6.525221082718294E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999978861064799	WITHOUT_CLASSIFICATION	2.1138935200970162E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998737224721	WITHOUT_CLASSIFICATION	1.2627752784138559E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999753481524697	WITHOUT_CLASSIFICATION	2.465184753021382E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999898477879	WITHOUT_CLASSIFICATION	1.0152212146526958E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999978861064799	WITHOUT_CLASSIFICATION	2.1138935200970162E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999439875098	WITHOUT_CLASSIFICATION	5.6012490270184184E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999976708001281	WITHOUT_CLASSIFICATION	2.3291998717754914E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999945813764392	WITHOUT_CLASSIFICATION	5.41862356089081E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999992963099557	WITHOUT_CLASSIFICATION	7.036900442476797E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999989768869219	WITHOUT_CLASSIFICATION	1.0231130781464816E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999996838139115	WITHOUT_CLASSIFICATION	3.16186088555031E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999995853510301	WITHOUT_CLASSIFICATION	4.1464896988099356E-7	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999974754423337	WITHOUT_CLASSIFICATION	2.5245576661771878E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999998328151243	WITHOUT_CLASSIFICATION	1.6718487581582698E-7	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999878272	WITHOUT_CLASSIFICATION	1.2172818493223137E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999951560771658	WITHOUT_CLASSIFICATION	4.843922834221347E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999978497642	WITHOUT_CLASSIFICATION	2.1502358094784266E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999998143618428	WITHOUT_CLASSIFICATION	1.856381572234366E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999882140583	WITHOUT_CLASSIFICATION	1.1785941612211672E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999998328151243	WITHOUT_CLASSIFICATION	1.6718487581582698E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999951560771658	WITHOUT_CLASSIFICATION	4.843922834221347E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999998143618428	WITHOUT_CLASSIFICATION	1.856381572234366E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999985265488621	WITHOUT_CLASSIFICATION	1.4734511379084022E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999932368741593	WITHOUT_CLASSIFICATION	6.7631258406370275E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999998967429239	WITHOUT_CLASSIFICATION	1.0325707610705305E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999959657001206	WITHOUT_CLASSIFICATION	4.034299879309449E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999996103992373	WITHOUT_CLASSIFICATION	3.896007625686635E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999901869403882	WITHOUT_CLASSIFICATION	9.813059611849583E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999967730561843	WITHOUT_CLASSIFICATION	3.22694381571774E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999868776724121	WITHOUT_CLASSIFICATION	1.3122327587774646E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999997955949741	WITHOUT_CLASSIFICATION	2.044050258912781E-7	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999757574433	WITHOUT_CLASSIFICATION	2.4242556777350536E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999848755579	WITHOUT_CLASSIFICATION	1.5124442090393396E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999980586489366	WITHOUT_CLASSIFICATION	1.9413510633734477E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999426457502	WITHOUT_CLASSIFICATION	5.735424971090358E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995700048895	WITHOUT_CLASSIFICATION	4.299951105257397E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999988737406674	WITHOUT_CLASSIFICATION	1.1262593325060645E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999988989215993	WITHOUT_CLASSIFICATION	1.1010784007453838E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999992356192411	WITHOUT_CLASSIFICATION	7.643807590191837E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999892492715	WITHOUT_CLASSIFICATION	1.0750728631255029E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999999676736423	WITHOUT_CLASSIFICATION	3.232635770466075E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999998328151243	WITHOUT_CLASSIFICATION	1.6718487581582698E-7	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999654688446	WITHOUT_CLASSIFICATION	3.453115529592193E-8	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999931019218247	WITHOUT_CLASSIFICATION	6.898078175321466E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999996229005826	WITHOUT_CLASSIFICATION	3.770994173112311E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999975414260672	WITHOUT_CLASSIFICATION	2.4585739327649465E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999998676437929	WITHOUT_CLASSIFICATION	1.3235620710445855E-7	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999997080236275	WITHOUT_CLASSIFICATION	2.9197637250225117E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999976940994422	WITHOUT_CLASSIFICATION	2.305900557870769E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999697348321	WITHOUT_CLASSIFICATION	3.026516792832177E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999974020989457	WITHOUT_CLASSIFICATION	2.5979010542246953E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999983698721392	WITHOUT_CLASSIFICATION	1.6301278608667268E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999963624171607	WITHOUT_CLASSIFICATION	3.637582839250203E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994965253273	WITHOUT_CLASSIFICATION	5.03474672636034E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9989161670231126	WITHOUT_CLASSIFICATION	0.0010838329768873888	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999925076568993	WITHOUT_CLASSIFICATION	7.492343100787136E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999997723641015	WITHOUT_CLASSIFICATION	2.2763589846494603E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999932405812342	WITHOUT_CLASSIFICATION	6.759418765773331E-6	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999239628442415	WITHOUT_CLASSIFICATION	7.603715575851472E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999971843236263	WITHOUT_CLASSIFICATION	2.8156763737028324E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999824972358771	WITHOUT_CLASSIFICATION	1.750276412302203E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999915908975323	WITHOUT_CLASSIFICATION	8.409102467683168E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999422115886	WITHOUT_CLASSIFICATION	5.7788411357865745E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999896912912962	WITHOUT_CLASSIFICATION	1.0308708703853414E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999998246789544	WITHOUT_CLASSIFICATION	1.7532104561209995E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999990354439784	WITHOUT_CLASSIFICATION	9.645560215414665E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999702976093964	WITHOUT_CLASSIFICATION	2.9702390603614846E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999702976093964	WITHOUT_CLASSIFICATION	2.9702390603614846E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999969318197639	WITHOUT_CLASSIFICATION	3.06818023609998E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999528892310136	WITHOUT_CLASSIFICATION	4.711076898640642E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999829430041639	WITHOUT_CLASSIFICATION	1.705699583604569E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999994291236163	WITHOUT_CLASSIFICATION	5.708763837571396E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999432656993	WITHOUT_CLASSIFICATION	5.673430061346317E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999998998387607	WITHOUT_CLASSIFICATION	1.0016123927675997E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999972627329806	WITHOUT_CLASSIFICATION	2.737267019355575E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999707451011304	WITHOUT_CLASSIFICATION	2.9254898869639438E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999995604640065	WITHOUT_CLASSIFICATION	4.3953599348675887E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999996326054073	WITHOUT_CLASSIFICATION	3.673945927337822E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999820890871252	WITHOUT_CLASSIFICATION	1.791091287486135E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999988406048314	WITHOUT_CLASSIFICATION	1.1593951686574792E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999880552377	WITHOUT_CLASSIFICATION	1.1944762213062989E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999889841505851	WITHOUT_CLASSIFICATION	1.1015849414902054E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999880602161	WITHOUT_CLASSIFICATION	1.1939783810122057E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942620490693	WITHOUT_CLASSIFICATION	5.737950930637031E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999983396702801	WITHOUT_CLASSIFICATION	1.660329719949687E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999983562966	WITHOUT_CLASSIFICATION	1.643703422910901E-9	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999951476102394	WITHOUT_CLASSIFICATION	4.852389760544581E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9994425030208223	WITHOUT_CLASSIFICATION	5.574969791776836E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999998238543351	WITHOUT_CLASSIFICATION	1.7614566487452596E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999998238543351	WITHOUT_CLASSIFICATION	1.7614566487452596E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999952222275548	WITHOUT_CLASSIFICATION	4.777772445213954E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999952222275548	WITHOUT_CLASSIFICATION	4.777772445213954E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999998246789544	WITHOUT_CLASSIFICATION	1.7532104561209995E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999986320174673	WITHOUT_CLASSIFICATION	1.3679825326319645E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998472050687113	WITHOUT_CLASSIFICATION	1.5279493128876216E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999986740487963	WITHOUT_CLASSIFICATION	1.325951203707542E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998472050687113	WITHOUT_CLASSIFICATION	1.5279493128876216E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999986740487963	WITHOUT_CLASSIFICATION	1.325951203707542E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998110326246775	WITHOUT_CLASSIFICATION	1.8896737532257476E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999661087814	WITHOUT_CLASSIFICATION	3.3891218607090985E-8	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999769498267	WITHOUT_CLASSIFICATION	2.3050173235156225E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999010752774	WITHOUT_CLASSIFICATION	9.89247226232222E-8	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9868060239210508	WITHOUT_CLASSIFICATION	0.013193976078949262	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9966837372041184	WITHOUT_CLASSIFICATION	0.003316262795881657	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999999995784826	WITHOUT_CLASSIFICATION	4.215173962432333E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999439150741	WITHOUT_CLASSIFICATION	5.6084925886585536E-8	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999992885587715	WITHOUT_CLASSIFICATION	7.114412284790892E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999479273834	WITHOUT_CLASSIFICATION	5.207261650695603E-8	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999962560155493	WITHOUT_CLASSIFICATION	3.743984450639891E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999975725206	WITHOUT_CLASSIFICATION	2.4274794221327606E-9	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999607424416	WITHOUT_CLASSIFICATION	3.9257558335152214E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999573301523637	WITHOUT_CLASSIFICATION	4.266984763627555E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999923277599243	WITHOUT_CLASSIFICATION	7.67224007568649E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998818144217	WITHOUT_CLASSIFICATION	1.1818557823153517E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998818144217	WITHOUT_CLASSIFICATION	1.1818557823153517E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999997160765556	WITHOUT_CLASSIFICATION	2.8392344436224684E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998110326246775	WITHOUT_CLASSIFICATION	1.8896737532257476E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999965071848136	WITHOUT_CLASSIFICATION	3.4928151863653804E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998975798427981	WITHOUT_CLASSIFICATION	1.0242015720184177E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9986147252232637	WITHOUT_CLASSIFICATION	0.0013852747767363715	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999994981849818	WITHOUT_CLASSIFICATION	5.018150181842629E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9980282511506945	WITHOUT_CLASSIFICATION	0.0019717488493056056	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998110326246775	WITHOUT_CLASSIFICATION	1.8896737532257476E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999994981849818	WITHOUT_CLASSIFICATION	5.018150181842629E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9980282511506945	WITHOUT_CLASSIFICATION	0.0019717488493056056	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9996400621942609	WITHOUT_CLASSIFICATION	3.599378057391342E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999970447600117	WITHOUT_CLASSIFICATION	2.955239988356935E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999984926170725	WITHOUT_CLASSIFICATION	1.5073829274845013E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998110326246775	WITHOUT_CLASSIFICATION	1.8896737532257476E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998110326246775	WITHOUT_CLASSIFICATION	1.8896737532257476E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998578493029	WITHOUT_CLASSIFICATION	1.4215069718629312E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999994038093409	WITHOUT_CLASSIFICATION	5.961906590893156E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999936140621069	WITHOUT_CLASSIFICATION	6.385937893183085E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999937053563484	WITHOUT_CLASSIFICATION	6.294643651707587E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999995958487672	WITHOUT_CLASSIFICATION	4.0415123275561003E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999992831586	WITHOUT_CLASSIFICATION	7.168412368976252E-10	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999802298455537	WITHOUT_CLASSIFICATION	1.9770154446326173E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999919661128	WITHOUT_CLASSIFICATION	8.033887203667658E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999994901252917	WITHOUT_CLASSIFICATION	5.09874708387575E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999982003908408	WITHOUT_CLASSIFICATION	1.7996091593473464E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999982090507666	WITHOUT_CLASSIFICATION	1.7909492334001935E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999777932135991	WITHOUT_CLASSIFICATION	2.2206786400808348E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999808059804	WITHOUT_CLASSIFICATION	1.9194019547085606E-8	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999889891307818	WITHOUT_CLASSIFICATION	1.1010869218113481E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998606537859	WITHOUT_CLASSIFICATION	1.3934621406881427E-7	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999512774066	WITHOUT_CLASSIFICATION	4.872259334173597E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999609353833074	WITHOUT_CLASSIFICATION	3.906461669249459E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999964474401561	WITHOUT_CLASSIFICATION	3.552559843841914E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9979456064937325	WITHOUT_CLASSIFICATION	0.0020543935062674176	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999946487438376	WITHOUT_CLASSIFICATION	5.351256162406105E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999559893113945	WITHOUT_CLASSIFICATION	4.401068860546824E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9959697192592825	WITHOUT_CLASSIFICATION	0.0040302807407176	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9959697192592825	WITHOUT_CLASSIFICATION	0.0040302807407176	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999609353833074	WITHOUT_CLASSIFICATION	3.906461669249459E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999504712751355	WITHOUT_CLASSIFICATION	4.952872486446063E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999987211938121	WITHOUT_CLASSIFICATION	1.2788061880259024E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.966905453190266	WITHOUT_CLASSIFICATION	0.03309454680973393	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999473928249	WITHOUT_CLASSIFICATION	5.260717500794251E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999742339130197	WITHOUT_CLASSIFICATION	2.57660869803266E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999995364299878	WITHOUT_CLASSIFICATION	4.635700122520634E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999992425923719	WITHOUT_CLASSIFICATION	7.574076279523159E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999939574444598	WITHOUT_CLASSIFICATION	6.042555540229539E-6	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999066124573	WITHOUT_CLASSIFICATION	9.338754261516854E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997677232988	WITHOUT_CLASSIFICATION	2.3227670115068873E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989235677641	WITHOUT_CLASSIFICATION	1.0764322358226851E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999990672203322	WITHOUT_CLASSIFICATION	9.327796677166381E-7	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999427490422779	WITHOUT_CLASSIFICATION	5.725095772202199E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996704210645	WITHOUT_CLASSIFICATION	3.2957893544001516E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998646659645	WITHOUT_CLASSIFICATION	1.3533403548538882E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999923015701	WITHOUT_CLASSIFICATION	7.698429858848077E-9	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999997350555421	WITHOUT_CLASSIFICATION	2.6494445791871423E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999985662127431	WITHOUT_CLASSIFICATION	1.4337872570154628E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998544784107	WITHOUT_CLASSIFICATION	1.4552158942360736E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999807367946	WITHOUT_CLASSIFICATION	1.926320534325451E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998861756935015	WITHOUT_CLASSIFICATION	1.1382430649844144E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999945682445537	WITHOUT_CLASSIFICATION	5.431755446305807E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999402860574818	WITHOUT_CLASSIFICATION	5.971394251825306E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995784621598596	WITHOUT_CLASSIFICATION	4.2153784014044976E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697434099503	WITHOUT_CLASSIFICATION	3.0256590049844034E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984451932104	WITHOUT_CLASSIFICATION	1.5548067895968237E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997434440659736	WITHOUT_CLASSIFICATION	2.5655593402645085E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685775088594	WITHOUT_CLASSIFICATION	3.142249114050935E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998313880878358	WITHOUT_CLASSIFICATION	1.6861191216419256E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927619899568	WITHOUT_CLASSIFICATION	7.2380100432131415E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999931047574926	WITHOUT_CLASSIFICATION	6.895242507486944E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999851425550478	WITHOUT_CLASSIFICATION	1.4857444952161953E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955367585301	WITHOUT_CLASSIFICATION	4.463241469867602E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980057685076	WITHOUT_CLASSIFICATION	1.9942314923465692E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443672088874	WITHOUT_CLASSIFICATION	5.563279111275715E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991290076440219	WITHOUT_CLASSIFICATION	8.709923559781448E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958566602386	WITHOUT_CLASSIFICATION	4.143339761472174E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998247104172	WITHOUT_CLASSIFICATION	1.7528958280698543E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998603396814206	WITHOUT_CLASSIFICATION	1.3966031857939843E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999028000339623	WITHOUT_CLASSIFICATION	9.719996603765658E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999999144429235	WITHOUT_CLASSIFICATION	8.555707650203977E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999673734186822	WITHOUT_CLASSIFICATION	3.262658131771793E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9941271705252055	WITHOUT_CLASSIFICATION	0.005872829474794507	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997470107698	WITHOUT_CLASSIFICATION	2.5298923027342383E-7	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999699416913	WITHOUT_CLASSIFICATION	3.005830880998971E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999963405695516	WITHOUT_CLASSIFICATION	3.659430448442689E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999938648442817	WITHOUT_CLASSIFICATION	6.135155718274293E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999919940257334	WITHOUT_CLASSIFICATION	8.0059742665861E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.99999773565118	WITHOUT_CLASSIFICATION	2.2643488200695386E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999189121817	WITHOUT_CLASSIFICATION	8.10878183376743E-8	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999970086035282	WITHOUT_CLASSIFICATION	2.9913964716674733E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999997064090035	WITHOUT_CLASSIFICATION	2.935909964974547E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999990360240281	WITHOUT_CLASSIFICATION	9.639759718573212E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999993700957307	WITHOUT_CLASSIFICATION	6.299042692834682E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999708964172	WITHOUT_CLASSIFICATION	2.910358278389165E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999887606132	WITHOUT_CLASSIFICATION	1.123938670576858E-8	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999971188962128	WITHOUT_CLASSIFICATION	2.8811037871538255E-6	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999061647585	WITHOUT_CLASSIFICATION	9.383524148223066E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998960464844	WITHOUT_CLASSIFICATION	1.0395351553560952E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998910209267063	WITHOUT_CLASSIFICATION	1.089790732936524E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854530606733	WITHOUT_CLASSIFICATION	1.4546939326552964E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822593979778	WITHOUT_CLASSIFICATION	1.7740602022165304E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999826381575274	WITHOUT_CLASSIFICATION	1.7361842472507438E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9998758128139142	WITHOUT_CLASSIFICATION	1.2418718608567762E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999990224936137	WITHOUT_CLASSIFICATION	9.775063862599362E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9913312360507704	WITHOUT_CLASSIFICATION	0.008668763949229474	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9997738495322203	WITHOUT_CLASSIFICATION	2.2615046777962192E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999532986070031	WITHOUT_CLASSIFICATION	4.670139299679657E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999467823513	WITHOUT_CLASSIFICATION	5.3217648708683497E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999794340839	WITHOUT_CLASSIFICATION	2.0565916063894852E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997743401846	WITHOUT_CLASSIFICATION	2.256598154690601E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999873246935	WITHOUT_CLASSIFICATION	1.2675306580149375E-8	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996763855697572	WITHOUT_CLASSIFICATION	3.2361443024277707E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999755330302241	WITHOUT_CLASSIFICATION	2.4466969775928678E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999986006121	WITHOUT_CLASSIFICATION	1.399387932492012E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999971750709074	WITHOUT_CLASSIFICATION	2.8249290926599724E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999963405695516	WITHOUT_CLASSIFICATION	3.659430448442689E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999756085614	WITHOUT_CLASSIFICATION	2.4391438662090447E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999930136959319	WITHOUT_CLASSIFICATION	6.986304068146016E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999975476326228	WITHOUT_CLASSIFICATION	2.4523673771438217E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991806361879	WITHOUT_CLASSIFICATION	8.193638120922844E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998335205101	WITHOUT_CLASSIFICATION	1.6647948980430137E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999998370756994	WITHOUT_CLASSIFICATION	1.6292430062849028E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999539300842294	WITHOUT_CLASSIFICATION	4.606991577051409E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997902138169	WITHOUT_CLASSIFICATION	2.0978618303737236E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999009771638	WITHOUT_CLASSIFICATION	9.902283621805745E-8	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999138758273	WITHOUT_CLASSIFICATION	8.612417267742242E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999987880370254	WITHOUT_CLASSIFICATION	1.2119629746048808E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999470488145	WITHOUT_CLASSIFICATION	5.295118544698973E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999500026129	WITHOUT_CLASSIFICATION	4.999738705070551E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977500240891	WITHOUT_CLASSIFICATION	2.249975911009172E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999993922749025	WITHOUT_CLASSIFICATION	6.077250973437269E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999975100294667	WITHOUT_CLASSIFICATION	2.48997053329292E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999784877510202	WITHOUT_CLASSIFICATION	2.151224897984886E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999781696206141	WITHOUT_CLASSIFICATION	2.1830379385828616E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99999937062841	WITHOUT_CLASSIFICATION	6.293715898991713E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999909588448816	WITHOUT_CLASSIFICATION	9.041155118427426E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999997137721656	WITHOUT_CLASSIFICATION	2.8622783440546712E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999934703170563	WITHOUT_CLASSIFICATION	6.529682943670723E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999993810815329	WITHOUT_CLASSIFICATION	6.189184670854601E-7	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999422659880842	WITHOUT_CLASSIFICATION	5.77340119158112E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999991000935111	WITHOUT_CLASSIFICATION	8.999064889146419E-7	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999180933198	WITHOUT_CLASSIFICATION	8.190668021977604E-8	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998113589192182	WITHOUT_CLASSIFICATION	0.001886410807818052	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999978402068608	WITHOUT_CLASSIFICATION	2.1597931393038924E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999992643160149	WITHOUT_CLASSIFICATION	7.356839850746002E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997317758603	WITHOUT_CLASSIFICATION	2.6822413967231375E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999963405695516	WITHOUT_CLASSIFICATION	3.659430448442689E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999992022142121	WITHOUT_CLASSIFICATION	7.977857878922333E-6	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999999542362668	WITHOUT_CLASSIFICATION	4.576373319516598E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999753253171	WITHOUT_CLASSIFICATION	2.467468279280551E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999963405695516	WITHOUT_CLASSIFICATION	3.659430448442689E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998277880948	WITHOUT_CLASSIFICATION	1.722119052281605E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999997137721656	WITHOUT_CLASSIFICATION	2.8622783440546712E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999678700453554	WITHOUT_CLASSIFICATION	3.212995464462373E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997257068337929	WITHOUT_CLASSIFICATION	2.742931662071622E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999988585881595	WITHOUT_CLASSIFICATION	1.1414118404969417E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999138758273	WITHOUT_CLASSIFICATION	8.612417267742242E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999987880370254	WITHOUT_CLASSIFICATION	1.2119629746048808E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999470488145	WITHOUT_CLASSIFICATION	5.295118544698973E-8	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999990926958	WITHOUT_CLASSIFICATION	9.073043488786963E-10	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999993209361163	WITHOUT_CLASSIFICATION	6.790638837075798E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999954066080032	WITHOUT_CLASSIFICATION	4.593391996749705E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999934673794	WITHOUT_CLASSIFICATION	6.532620555094625E-9	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999945677	WITHOUT_CLASSIFICATION	5.432295693450083E-12	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999963405695516	WITHOUT_CLASSIFICATION	3.659430448442689E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999500026129	WITHOUT_CLASSIFICATION	4.999738705070551E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977500240891	WITHOUT_CLASSIFICATION	2.249975911009172E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999954465374	WITHOUT_CLASSIFICATION	4.553462592874048E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997163302986	WITHOUT_CLASSIFICATION	2.836697013927476E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999948970221	WITHOUT_CLASSIFICATION	5.1029778877790134E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999738197071	WITHOUT_CLASSIFICATION	2.6180292888366855E-8	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999136390998	WITHOUT_CLASSIFICATION	8.636090026188581E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999368313277	WITHOUT_CLASSIFICATION	6.316867224578706E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999028000339623	WITHOUT_CLASSIFICATION	9.719996603765658E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999999983353975	WITHOUT_CLASSIFICATION	1.6646024938077207E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9988703211422757	WITHOUT_CLASSIFICATION	0.001129678857724239	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999996466144209	WITHOUT_CLASSIFICATION	3.533855791176544E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999996633419823	WITHOUT_CLASSIFICATION	3.3665801763261307E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998881307991	WITHOUT_CLASSIFICATION	1.118692008454054E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997434440659736	WITHOUT_CLASSIFICATION	2.5655593402645085E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685775088594	WITHOUT_CLASSIFICATION	3.142249114050935E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980057685076	WITHOUT_CLASSIFICATION	1.9942314923465692E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998881307991	WITHOUT_CLASSIFICATION	1.118692008454054E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999962366908728	WITHOUT_CLASSIFICATION	3.7633091271476584E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999994330341327	WITHOUT_CLASSIFICATION	5.669658672663575E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998144831421053	WITHOUT_CLASSIFICATION	1.855168578946656E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639484977978	WITHOUT_CLASSIFICATION	1.3605150220226717E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999891183688789	WITHOUT_CLASSIFICATION	1.088163112114577E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9995333932157873	WITHOUT_CLASSIFICATION	4.6660678421270085E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443672088874	WITHOUT_CLASSIFICATION	5.563279111275715E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998247104172	WITHOUT_CLASSIFICATION	1.7528958280698543E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999873246935	WITHOUT_CLASSIFICATION	1.2675306580149375E-8	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999999997686261	WITHOUT_CLASSIFICATION	2.3137389317308836E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999996427676607	WITHOUT_CLASSIFICATION	3.5723233932755626E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999882570038	WITHOUT_CLASSIFICATION	1.174299626820874E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999997412756242	WITHOUT_CLASSIFICATION	2.5872437584291903E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999998693021406	WITHOUT_CLASSIFICATION	1.3069785939926738E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999993735868258	WITHOUT_CLASSIFICATION	6.264131742614238E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999760206208277	WITHOUT_CLASSIFICATION	2.3979379172293205E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999066124573	WITHOUT_CLASSIFICATION	9.338754261516854E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999197798370226	WITHOUT_CLASSIFICATION	8.022016297733695E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999879722439463	WITHOUT_CLASSIFICATION	1.2027756053593526E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999983219083357	WITHOUT_CLASSIFICATION	1.6780916642999923E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999984545870754	WITHOUT_CLASSIFICATION	1.5454129246189201E-6	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999231626562	WITHOUT_CLASSIFICATION	7.683734380806327E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999597286841392	WITHOUT_CLASSIFICATION	4.0271315860857775E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668176037382	WITHOUT_CLASSIFICATION	3.318239626182119E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972312349822329	WITHOUT_CLASSIFICATION	0.0027687650177671062	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988343835707	WITHOUT_CLASSIFICATION	1.1656164292364421E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999994685591668	WITHOUT_CLASSIFICATION	5.314408332037044E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999936645204214	WITHOUT_CLASSIFICATION	6.335479578580905E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999623762190104	WITHOUT_CLASSIFICATION	3.7623780989473635E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999874269864296	WITHOUT_CLASSIFICATION	1.257301357031102E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999975246836853	WITHOUT_CLASSIFICATION	2.475316314745829E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979243382182	WITHOUT_CLASSIFICATION	2.0756617817495408E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998755961379	WITHOUT_CLASSIFICATION	1.2440386205752511E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999994776972724	WITHOUT_CLASSIFICATION	5.223027275937365E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989698198352	WITHOUT_CLASSIFICATION	1.0301801648720803E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999970135824041	WITHOUT_CLASSIFICATION	2.986417595888565E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969554972766	WITHOUT_CLASSIFICATION	3.0445027234572013E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993282597719	WITHOUT_CLASSIFICATION	6.717402282073233E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999962153307019	WITHOUT_CLASSIFICATION	3.7846692980572393E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999998815949893	WITHOUT_CLASSIFICATION	1.1840501073412867E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999981449438322	WITHOUT_CLASSIFICATION	1.8550561678895203E-6	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999991943632003	WITHOUT_CLASSIFICATION	8.056367997956685E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999892263118601	WITHOUT_CLASSIFICATION	1.0773688139900809E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998817497460041	WITHOUT_CLASSIFICATION	1.1825025399599613E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997890326913	WITHOUT_CLASSIFICATION	2.1096730875070721E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999993491983716	WITHOUT_CLASSIFICATION	6.508016283729678E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999955031075548	WITHOUT_CLASSIFICATION	4.496892445173314E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999518639058044	WITHOUT_CLASSIFICATION	4.813609419561974E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999442392011	WITHOUT_CLASSIFICATION	5.576079890119136E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9970460318046268	WITHOUT_CLASSIFICATION	0.0029539681953731196	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999838749397	WITHOUT_CLASSIFICATION	1.6125060331375892E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999984791392382	WITHOUT_CLASSIFICATION	1.520860761690445E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999993046938678	WITHOUT_CLASSIFICATION	6.953061321062447E-7	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999743441729	WITHOUT_CLASSIFICATION	2.5655827093593977E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999986716786506	WITHOUT_CLASSIFICATION	1.3283213492998879E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999459721846	WITHOUT_CLASSIFICATION	5.4027815386044156E-8	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999356912335	WITHOUT_CLASSIFICATION	6.430876649618678E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.998798286565559	WITHOUT_CLASSIFICATION	0.0012017134344409165	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999642714859197	WITHOUT_CLASSIFICATION	3.572851408030674E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999989532787662	WITHOUT_CLASSIFICATION	1.0467212338307448E-6	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999389310503	WITHOUT_CLASSIFICATION	6.106894963576757E-8	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996872525688255	WITHOUT_CLASSIFICATION	3.1274743117439165E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999969098987044	WITHOUT_CLASSIFICATION	3.0901012956062325E-6	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997295788713	WITHOUT_CLASSIFICATION	2.704211286984301E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999882377619455	WITHOUT_CLASSIFICATION	1.1762238054458E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999991086720134	WITHOUT_CLASSIFICATION	8.913279865542292E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999502534594229	WITHOUT_CLASSIFICATION	4.974654057713548E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999923093679048	WITHOUT_CLASSIFICATION	7.690632095121625E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999911098014	WITHOUT_CLASSIFICATION	8.89019855566027E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998712497324	WITHOUT_CLASSIFICATION	1.2875026749814018E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999739637686	WITHOUT_CLASSIFICATION	2.6036231410326545E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999852674364517	WITHOUT_CLASSIFICATION	1.473256354827008E-5	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9992352118416928	WITHOUT_CLASSIFICATION	7.647881583070527E-4	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999535891156097	WITHOUT_CLASSIFICATION	4.641088439034458E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999937697420694	WITHOUT_CLASSIFICATION	6.230257930476547E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999964499836912	WITHOUT_CLASSIFICATION	3.5500163087664794E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999986246054584	WITHOUT_CLASSIFICATION	1.3753945416298327E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999675507363563	WITHOUT_CLASSIFICATION	3.244926364364333E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999963392384269	WITHOUT_CLASSIFICATION	3.6607615729964374E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999996184036688	WITHOUT_CLASSIFICATION	3.815963311316288E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9987807186916688	WITHOUT_CLASSIFICATION	0.0012192813083311738	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998721144962064	WITHOUT_CLASSIFICATION	1.2788550379361877E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999993950810333	WITHOUT_CLASSIFICATION	6.0491896661524E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999966937217909	WITHOUT_CLASSIFICATION	3.306278209091723E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999944508840803	WITHOUT_CLASSIFICATION	5.549115919634285E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999991019232882	WITHOUT_CLASSIFICATION	8.980767118471105E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.99999761323669	WITHOUT_CLASSIFICATION	2.386763309967668E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999947070750185	WITHOUT_CLASSIFICATION	5.2929249815911185E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999835260832	WITHOUT_CLASSIFICATION	1.647391679744835E-8	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999446735592903	WITHOUT_CLASSIFICATION	5.5326440709731985E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999917712231	WITHOUT_CLASSIFICATION	8.228776898756108E-9	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999918257620933	WITHOUT_CLASSIFICATION	8.174237906608593E-6	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999985914469627	WITHOUT_CLASSIFICATION	1.4085530372989194E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999912729316	WITHOUT_CLASSIFICATION	8.727068355534525E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999982687088145	WITHOUT_CLASSIFICATION	1.7312911855114304E-6	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999991387	WITHOUT_CLASSIFICATION	8.612783224864917E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999960602278058	WITHOUT_CLASSIFICATION	3.939772194145156E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999465517096879	WITHOUT_CLASSIFICATION	5.344829031202889E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997696055885	WITHOUT_CLASSIFICATION	2.3039441155061385E-7	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999984535206359	WITHOUT_CLASSIFICATION	1.5464793641323741E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999775908111118	WITHOUT_CLASSIFICATION	2.2409188888141167E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999995677446404	WITHOUT_CLASSIFICATION	4.322553596189435E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998722297339818	WITHOUT_CLASSIFICATION	1.277702660181531E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999745130714224	WITHOUT_CLASSIFICATION	2.5486928577684356E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.999959998977422	WITHOUT_CLASSIFICATION	4.000102257799152E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999970225796952	WITHOUT_CLASSIFICATION	2.9774203048603953E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999201106985	WITHOUT_CLASSIFICATION	7.988930149189118E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999858574089446	WITHOUT_CLASSIFICATION	1.4142591055383676E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999961106528509	WITHOUT_CLASSIFICATION	3.8893471491275056E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999999914578018	WITHOUT_CLASSIFICATION	8.542198207433427E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999858574089446	WITHOUT_CLASSIFICATION	1.4142591055383676E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999972682765	WITHOUT_CLASSIFICATION	2.7317235120618042E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999260777226	WITHOUT_CLASSIFICATION	7.392227739040448E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998942713732669	WITHOUT_CLASSIFICATION	1.0572862673304358E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9893183916950213	WITHOUT_CLASSIFICATION	0.010681608304978706	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.999999780993796	WITHOUT_CLASSIFICATION	2.1900620402555903E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999447928909	WITHOUT_CLASSIFICATION	5.520710908417519E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999871033827327	WITHOUT_CLASSIFICATION	1.2896617267199087E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997620378833	WITHOUT_CLASSIFICATION	2.379621166151558E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996164926034239	WITHOUT_CLASSIFICATION	3.835073965761013E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999962111392015	WITHOUT_CLASSIFICATION	3.788860798584513E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999989890365	WITHOUT_CLASSIFICATION	1.0109635591964515E-9	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999921507281866	WITHOUT_CLASSIFICATION	7.84927181339633E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999863706966442	WITHOUT_CLASSIFICATION	1.362930335582698E-5	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999982512203	WITHOUT_CLASSIFICATION	1.7487797044384464E-9	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999923244310811	WITHOUT_CLASSIFICATION	7.675568918812587E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999824320561055	WITHOUT_CLASSIFICATION	1.756794389450071E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9948847353935312	WITHOUT_CLASSIFICATION	0.0051152646064687975	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9948847353935312	WITHOUT_CLASSIFICATION	0.0051152646064687975	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999921041125444	WITHOUT_CLASSIFICATION	7.89588745555296E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999842730248037	WITHOUT_CLASSIFICATION	1.572697519626325E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996462113757	WITHOUT_CLASSIFICATION	3.5378862427556367E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998910311543838	WITHOUT_CLASSIFICATION	1.0896884561623154E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.99999950586332	WITHOUT_CLASSIFICATION	4.941366800342673E-7	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999878306210387	WITHOUT_CLASSIFICATION	1.2169378961423092E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999979621480252	WITHOUT_CLASSIFICATION	2.0378519747695104E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999969541357	WITHOUT_CLASSIFICATION	3.0458642543596486E-9	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998349486008	WITHOUT_CLASSIFICATION	1.6505139934550234E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999853523274368	WITHOUT_CLASSIFICATION	1.4647672563303665E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999918474052	WITHOUT_CLASSIFICATION	8.152594816294006E-9	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999766652559	WITHOUT_CLASSIFICATION	2.3334744167180363E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999976131092729	WITHOUT_CLASSIFICATION	2.3868907270455063E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999819385741847	WITHOUT_CLASSIFICATION	1.80614258153029E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999883335065	WITHOUT_CLASSIFICATION	1.1666493544746473E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999597286841392	WITHOUT_CLASSIFICATION	4.0271315860857775E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999981201667253	WITHOUT_CLASSIFICATION	1.879833274701413E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999745600023	WITHOUT_CLASSIFICATION	2.5439997691512224E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9991692044985596	WITHOUT_CLASSIFICATION	8.307955014404111E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999890079639071	WITHOUT_CLASSIFICATION	1.0992036092867743E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999958310508	WITHOUT_CLASSIFICATION	4.168949198087844E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999926013258245	WITHOUT_CLASSIFICATION	7.398674175512174E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999997210233	WITHOUT_CLASSIFICATION	2.7897671137914053E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999790943458	WITHOUT_CLASSIFICATION	2.0905654269360406E-8	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999940697536052	WITHOUT_CLASSIFICATION	5.930246394896422E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999901443468912	WITHOUT_CLASSIFICATION	9.855653108963339E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998926923	WITHOUT_CLASSIFICATION	1.0730772858770164E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999886323552443	WITHOUT_CLASSIFICATION	1.1367644755792438E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999882895789377	WITHOUT_CLASSIFICATION	1.1710421062204282E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999989782136984	WITHOUT_CLASSIFICATION	1.021786301531791E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999923487689945	WITHOUT_CLASSIFICATION	7.6512310056254E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999984349674832	WITHOUT_CLASSIFICATION	1.5650325168282403E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.99999564915995	WITHOUT_CLASSIFICATION	4.3508400499785465E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999827119162956	WITHOUT_CLASSIFICATION	1.7288083704381172E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999986948159159	WITHOUT_CLASSIFICATION	1.3051840841784278E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999421074176521	WITHOUT_CLASSIFICATION	5.789258234791215E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999355384760011	WITHOUT_CLASSIFICATION	6.44615239988498E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999845779650732	WITHOUT_CLASSIFICATION	1.5422034926769273E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999992543471397	WITHOUT_CLASSIFICATION	7.456528603450803E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999998549500904	WITHOUT_CLASSIFICATION	1.4504990965601196E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999961915301114	WITHOUT_CLASSIFICATION	3.8084698884455695E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999980474689565	WITHOUT_CLASSIFICATION	1.952531043542977E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999996500537841	WITHOUT_CLASSIFICATION	3.499462158740152E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999050645965	WITHOUT_CLASSIFICATION	9.4935403603746E-8	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999616977541	WITHOUT_CLASSIFICATION	3.830224592781339E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999977231922743	WITHOUT_CLASSIFICATION	2.276807725675511E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988662857332	WITHOUT_CLASSIFICATION	1.1337142667235626E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997635031606	WITHOUT_CLASSIFICATION	2.3649683939865683E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922723907417	WITHOUT_CLASSIFICATION	7.727609258253627E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998633539299	WITHOUT_CLASSIFICATION	1.3664607012095097E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998351746248	WITHOUT_CLASSIFICATION	1.6482537530578734E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997498286672	WITHOUT_CLASSIFICATION	2.5017133276551565E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998661318551	WITHOUT_CLASSIFICATION	1.3386814492670985E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999965000641396	WITHOUT_CLASSIFICATION	3.4999358603593827E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759601464981	WITHOUT_CLASSIFICATION	2.403985350189762E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999965000641396	WITHOUT_CLASSIFICATION	3.4999358603593827E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999475603064176	WITHOUT_CLASSIFICATION	5.2439693582467146E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999997816722379	WITHOUT_CLASSIFICATION	2.183277621709817E-7	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999943123470816	WITHOUT_CLASSIFICATION	5.687652918384442E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999976590576558	WITHOUT_CLASSIFICATION	2.3409423441739465E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997010778586	WITHOUT_CLASSIFICATION	2.989221413548898E-7	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999950584136	WITHOUT_CLASSIFICATION	4.941586403554307E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997447432378	WITHOUT_CLASSIFICATION	2.5525676217673557E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999765059994	WITHOUT_CLASSIFICATION	2.3494000581331657E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999818581234	WITHOUT_CLASSIFICATION	1.8141876496985208E-8	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999909964493872	WITHOUT_CLASSIFICATION	9.00355061279884E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999998332845824	WITHOUT_CLASSIFICATION	1.6671541755222781E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999994668194959	WITHOUT_CLASSIFICATION	5.331805041513767E-7	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999991864865988	WITHOUT_CLASSIFICATION	8.135134010941506E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999997282224918	WITHOUT_CLASSIFICATION	2.7177750807581726E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9996696323987921	WITHOUT_CLASSIFICATION	3.303676012079381E-4	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998938515061	WITHOUT_CLASSIFICATION	1.0614849399537321E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981849189754	WITHOUT_CLASSIFICATION	1.8150810245602875E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981849189754	WITHOUT_CLASSIFICATION	1.8150810245602875E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999983283849079	WITHOUT_CLASSIFICATION	1.6716150920883336E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999364801937	WITHOUT_CLASSIFICATION	6.351980637660386E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999967675371	WITHOUT_CLASSIFICATION	3.2324628056693994E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999975741671202	WITHOUT_CLASSIFICATION	2.4258328798029306E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999995872901	WITHOUT_CLASSIFICATION	4.127098953250735E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999704433882	WITHOUT_CLASSIFICATION	2.9556611814503123E-8	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9864691039783826	WITHOUT_CLASSIFICATION	0.013530896021617313	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999967966566939	WITHOUT_CLASSIFICATION	3.2033433059848954E-6	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999998959261952	WITHOUT_CLASSIFICATION	1.040738048215778E-7	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999980846866932	WITHOUT_CLASSIFICATION	1.9153133068030413E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999830291744	WITHOUT_CLASSIFICATION	1.6970825575821584E-8	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999924155145	WITHOUT_CLASSIFICATION	7.584485449860304E-9	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999969534989702	WITHOUT_CLASSIFICATION	3.04650102978886E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999997156799955	WITHOUT_CLASSIFICATION	2.84320004632947E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999944706345203	WITHOUT_CLASSIFICATION	5.529365479668516E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999611193	WITHOUT_CLASSIFICATION	3.8880590720806165E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999992947112051	WITHOUT_CLASSIFICATION	7.052887949698411E-7	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995766585186896	WITHOUT_CLASSIFICATION	4.233414813104346E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999840218166277	WITHOUT_CLASSIFICATION	1.5978183372344234E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999979410240917	WITHOUT_CLASSIFICATION	2.058975908391109E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997721457148	WITHOUT_CLASSIFICATION	2.2785428524028427E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999425506771751	WITHOUT_CLASSIFICATION	5.744932282491986E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999800219606962	WITHOUT_CLASSIFICATION	1.9978039303759883E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999671144642097	WITHOUT_CLASSIFICATION	3.2885535790306505E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999963679472906	WITHOUT_CLASSIFICATION	3.6320527093664834E-6	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999733579379	WITHOUT_CLASSIFICATION	2.6642061997471998E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999808656781	WITHOUT_CLASSIFICATION	1.9134321998782398E-8	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997137906412259	WITHOUT_CLASSIFICATION	2.86209358774143E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999999699571588	WITHOUT_CLASSIFICATION	3.004284119774574E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999312603103	WITHOUT_CLASSIFICATION	6.873968965573306E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999998066099623	WITHOUT_CLASSIFICATION	1.9339003762525988E-7	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999960168023863	WITHOUT_CLASSIFICATION	3.98319761368321E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999670808890697	WITHOUT_CLASSIFICATION	3.291911093029483E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999973816429774	WITHOUT_CLASSIFICATION	2.6183570226300006E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993729774673825	WITHOUT_CLASSIFICATION	6.270225326174712E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999972292530456	WITHOUT_CLASSIFICATION	2.7707469543463995E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994871513863	WITHOUT_CLASSIFICATION	5.128486137219368E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999811966126629	WITHOUT_CLASSIFICATION	1.880338733708573E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999581948554	WITHOUT_CLASSIFICATION	4.1805144481171474E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999974397168063	WITHOUT_CLASSIFICATION	2.5602831936953876E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999990714992	WITHOUT_CLASSIFICATION	9.285009139729768E-10	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998485751074	WITHOUT_CLASSIFICATION	1.514248926107022E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999932722557734	WITHOUT_CLASSIFICATION	6.727744226544586E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9878133809504699	WITHOUT_CLASSIFICATION	0.012186619049530155	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999851515108328	WITHOUT_CLASSIFICATION	1.4848489167197092E-5	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9997101077064692	WITHOUT_CLASSIFICATION	2.898922935307779E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9450240751491771	WITHOUT_CLASSIFICATION	0.05497592485082293	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999990408474	WITHOUT_CLASSIFICATION	9.591526834662616E-10	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999969225384527	WITHOUT_CLASSIFICATION	3.0774615471807087E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999967845545419	WITHOUT_CLASSIFICATION	3.2154454580766524E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998492304564	WITHOUT_CLASSIFICATION	1.5076954369887648E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999257382792	WITHOUT_CLASSIFICATION	7.42617207923211E-8	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999617895234	WITHOUT_CLASSIFICATION	3.821047655423474E-8	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999532039544495	WITHOUT_CLASSIFICATION	4.679604555052074E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999926805765622	WITHOUT_CLASSIFICATION	7.3194234377777626E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998277880948	WITHOUT_CLASSIFICATION	1.722119052281605E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998277880948	WITHOUT_CLASSIFICATION	1.722119052281605E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999627320747	WITHOUT_CLASSIFICATION	3.726792541349326E-8	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999949694527511	WITHOUT_CLASSIFICATION	5.030547248885268E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999994371570018	WITHOUT_CLASSIFICATION	5.628429981595938E-7	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999999854920662	WITHOUT_CLASSIFICATION	1.4507933789762398E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999997045223682	WITHOUT_CLASSIFICATION	2.954776318431764E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9985712336801499	WITHOUT_CLASSIFICATION	0.0014287663198500997	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999907849210538	WITHOUT_CLASSIFICATION	9.215078946201872E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999991956784414	WITHOUT_CLASSIFICATION	8.043215585130384E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999518411593	WITHOUT_CLASSIFICATION	4.815884073285734E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999960609456824	WITHOUT_CLASSIFICATION	3.939054317649188E-6	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999934016783989	WITHOUT_CLASSIFICATION	6.598321601160858E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999743157997805	WITHOUT_CLASSIFICATION	2.5684200219581864E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999987064167761	WITHOUT_CLASSIFICATION	1.293583223814166E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999838043199	WITHOUT_CLASSIFICATION	1.6195680096764947E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999998888506559	WITHOUT_CLASSIFICATION	1.1114934398040223E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999999614645053	WITHOUT_CLASSIFICATION	3.8535494695037736E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991654682513	WITHOUT_CLASSIFICATION	8.345317487222628E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999649255491547	WITHOUT_CLASSIFICATION	3.507445084535504E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999576829078	WITHOUT_CLASSIFICATION	4.2317092104366295E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999458802189871	WITHOUT_CLASSIFICATION	5.411978101282826E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999994182601	WITHOUT_CLASSIFICATION	5.817398723784759E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999978619324195	WITHOUT_CLASSIFICATION	2.1380675805638504E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778395986055	WITHOUT_CLASSIFICATION	2.2160401394542182E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999536055034559	WITHOUT_CLASSIFICATION	4.639449654408131E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999784242525908	WITHOUT_CLASSIFICATION	2.1575747409199187E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9976428037460071	WITHOUT_CLASSIFICATION	0.002357196253992822	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9968169325552205	WITHOUT_CLASSIFICATION	0.0031830674447795378	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997292513799851	WITHOUT_CLASSIFICATION	2.7074862001481967E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999979529766232	WITHOUT_CLASSIFICATION	2.0470233767884087E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778395986055	WITHOUT_CLASSIFICATION	2.2160401394542182E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999999576759472	WITHOUT_CLASSIFICATION	4.232405276566417E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999413224	WITHOUT_CLASSIFICATION	5.867757914465587E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.999993933943895	WITHOUT_CLASSIFICATION	6.066056104949786E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999892714021348	WITHOUT_CLASSIFICATION	1.072859786527421E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999196151642	WITHOUT_CLASSIFICATION	8.038483572425458E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999983059658705	WITHOUT_CLASSIFICATION	1.6940341295054231E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999879008472823	WITHOUT_CLASSIFICATION	1.209915271772593E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998589286524	WITHOUT_CLASSIFICATION	1.4107134751426856E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9971567790023572	WITHOUT_CLASSIFICATION	0.0028432209976429032	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999892714021348	WITHOUT_CLASSIFICATION	1.072859786527421E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999980063199	WITHOUT_CLASSIFICATION	1.9936801198117794E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998708428237	WITHOUT_CLASSIFICATION	1.2915717628830974E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999918473609331	WITHOUT_CLASSIFICATION	8.152639066914792E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999649432921065	WITHOUT_CLASSIFICATION	3.5056707893532534E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999952447766666	WITHOUT_CLASSIFICATION	4.755223333337774E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999830291744	WITHOUT_CLASSIFICATION	1.6970825575821584E-8	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997136228599	WITHOUT_CLASSIFICATION	2.8637714010601544E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999957705771682	WITHOUT_CLASSIFICATION	4.229422831832682E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999996532729182	WITHOUT_CLASSIFICATION	3.467270817525781E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9947020910222272	WITHOUT_CLASSIFICATION	0.005297908977772896	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999922573133	WITHOUT_CLASSIFICATION	7.742686805358646E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999997587679131	WITHOUT_CLASSIFICATION	2.412320868191575E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999995379114236	WITHOUT_CLASSIFICATION	4.620885764070445E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999709206514	WITHOUT_CLASSIFICATION	2.907934865536035E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998607587244	WITHOUT_CLASSIFICATION	1.3924127556663414E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999988764552204	WITHOUT_CLASSIFICATION	1.1235447796025087E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999790013996103	WITHOUT_CLASSIFICATION	2.0998600389707488E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999499144063	WITHOUT_CLASSIFICATION	5.008559361006816E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997483027037	WITHOUT_CLASSIFICATION	2.5169729626417104E-7	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999921374968691	WITHOUT_CLASSIFICATION	7.862503130936111E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999991076629011	WITHOUT_CLASSIFICATION	8.923370989054797E-7	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999939414353467	WITHOUT_CLASSIFICATION	6.058564653329575E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999965746361661	WITHOUT_CLASSIFICATION	3.425363833979172E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999989105998442	WITHOUT_CLASSIFICATION	1.0894001557429217E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999972004632205	WITHOUT_CLASSIFICATION	2.7995367794785962E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999992335224426	WITHOUT_CLASSIFICATION	7.664775573891558E-7	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999949637075923	WITHOUT_CLASSIFICATION	5.0362924076715E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999615141843731	WITHOUT_CLASSIFICATION	3.848581562700762E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999995036901181	WITHOUT_CLASSIFICATION	4.963098819581645E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999714744	WITHOUT_CLASSIFICATION	2.8525605638245397E-11	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9997632666652109	WITHOUT_CLASSIFICATION	2.3673333478906183E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999029533773104	WITHOUT_CLASSIFICATION	9.704662268958392E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999997090069082	WITHOUT_CLASSIFICATION	2.9099309192410837E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998832715394	WITHOUT_CLASSIFICATION	1.1672846059969301E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979158902044	WITHOUT_CLASSIFICATION	2.084109795719015E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999728018636579	WITHOUT_CLASSIFICATION	2.7198136342162677E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999951479099198	WITHOUT_CLASSIFICATION	4.8520900801954584E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999993862981099	WITHOUT_CLASSIFICATION	6.1370189009784664E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999912281676	WITHOUT_CLASSIFICATION	8.771832356964316E-9	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.99988647723665	WITHOUT_CLASSIFICATION	1.1352276335002543E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999984544247814	WITHOUT_CLASSIFICATION	1.5455752186059553E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999956074271251	WITHOUT_CLASSIFICATION	4.392572874858418E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999995603300853	WITHOUT_CLASSIFICATION	4.3966991473170255E-7	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999992896901008	WITHOUT_CLASSIFICATION	7.103098993018864E-7	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999990598010333	WITHOUT_CLASSIFICATION	9.401989666275045E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997013772306	WITHOUT_CLASSIFICATION	2.986227693503027E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998974138369	WITHOUT_CLASSIFICATION	1.0258616310367785E-7	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999500196958	WITHOUT_CLASSIFICATION	4.9980304144893475E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999999964217128	WITHOUT_CLASSIFICATION	3.57828720832035E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995073902571	WITHOUT_CLASSIFICATION	4.926097427897243E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999905945999383	WITHOUT_CLASSIFICATION	9.405400061682072E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999989517543276	WITHOUT_CLASSIFICATION	1.048245672321353E-6	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999981456472411	WITHOUT_CLASSIFICATION	1.8543527588942693E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9859565265402368	WITHOUT_CLASSIFICATION	0.014043473459763157	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999994976989324	WITHOUT_CLASSIFICATION	5.023010675047906E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988841197397	WITHOUT_CLASSIFICATION	1.1158802603420581E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999997013200354	WITHOUT_CLASSIFICATION	2.9867996474005867E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9960048085121359	WITHOUT_CLASSIFICATION	0.003995191487864073	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999875755935136	WITHOUT_CLASSIFICATION	1.2424406486361294E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999999321781762	WITHOUT_CLASSIFICATION	6.78218237495647E-8	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9995872167221619	WITHOUT_CLASSIFICATION	4.127832778381562E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999105981655545	WITHOUT_CLASSIFICATION	8.9401834445385E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998832715394	WITHOUT_CLASSIFICATION	1.1672846059969301E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999999291476264	WITHOUT_CLASSIFICATION	7.085237360412642E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999774066896	WITHOUT_CLASSIFICATION	2.2593310363959372E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999999329361448	WITHOUT_CLASSIFICATION	6.706385524429792E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999946517010592	WITHOUT_CLASSIFICATION	5.348298940871325E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999977696251627	WITHOUT_CLASSIFICATION	2.230374837173057E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999980844045689	WITHOUT_CLASSIFICATION	1.915595431067655E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998983027886	WITHOUT_CLASSIFICATION	1.0169721146958291E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999992953947	WITHOUT_CLASSIFICATION	7.046052312763556E-10	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999986790599	WITHOUT_CLASSIFICATION	1.3209400428092617E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999807168788	WITHOUT_CLASSIFICATION	1.9283121235711E-8	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999584148369	WITHOUT_CLASSIFICATION	4.1585163128787046E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999873060739378	WITHOUT_CLASSIFICATION	1.2693926062216066E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998883259551	WITHOUT_CLASSIFICATION	1.116740449931735E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999997306041329	WITHOUT_CLASSIFICATION	2.693958670655003E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999475603064176	WITHOUT_CLASSIFICATION	5.2439693582467146E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999992433759	WITHOUT_CLASSIFICATION	7.566241299428672E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999987546568	WITHOUT_CLASSIFICATION	1.245343135658271E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999990446097	WITHOUT_CLASSIFICATION	9.553902827690884E-10	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999995368093036	WITHOUT_CLASSIFICATION	4.6319069623494475E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999988407533	WITHOUT_CLASSIFICATION	1.159246709383389E-9	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757889316249	WITHOUT_CLASSIFICATION	1.2421106837503441E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757889316249	WITHOUT_CLASSIFICATION	1.2421106837503441E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999955612976241	WITHOUT_CLASSIFICATION	4.438702375885528E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999931359799	WITHOUT_CLASSIFICATION	6.8640201752365634E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997159090395809	WITHOUT_CLASSIFICATION	2.8409096041914815E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998009831124367	WITHOUT_CLASSIFICATION	1.9901688756334662E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999985323065891	WITHOUT_CLASSIFICATION	1.4676934108796706E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997955749657	WITHOUT_CLASSIFICATION	2.0442503433482288E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999953049571461	WITHOUT_CLASSIFICATION	4.695042853965067E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999885492544	WITHOUT_CLASSIFICATION	1.1450745568022434E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999885492544	WITHOUT_CLASSIFICATION	1.1450745568022434E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999989146641395	WITHOUT_CLASSIFICATION	1.0853358605330517E-6	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999998834901646	WITHOUT_CLASSIFICATION	1.1650983539467763E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999998142623642	WITHOUT_CLASSIFICATION	1.8573763585074715E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998683009635	WITHOUT_CLASSIFICATION	1.316990363774022E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998683009635	WITHOUT_CLASSIFICATION	1.316990363774022E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999998683009635	WITHOUT_CLASSIFICATION	1.316990363774022E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999993598529491	WITHOUT_CLASSIFICATION	6.401470508991215E-6	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999550876962	WITHOUT_CLASSIFICATION	4.4912303802201657E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.8691871688873205	WITHOUT_CLASSIFICATION	0.1308128311126794	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999187891789599	WITHOUT_CLASSIFICATION	8.121082104008099E-5	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999999969013035	WITHOUT_CLASSIFICATION	3.098696502018255E-8	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999739721881327	WITHOUT_CLASSIFICATION	2.6027811867300852E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998736382275059	WITHOUT_CLASSIFICATION	1.2636177249415506E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9991564677509999	WITHOUT_CLASSIFICATION	8.435322490001131E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999693286904	WITHOUT_CLASSIFICATION	3.067130956889818E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999966814675294	WITHOUT_CLASSIFICATION	3.318532470665604E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999855869341	WITHOUT_CLASSIFICATION	1.4413065897667736E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999965408323117	WITHOUT_CLASSIFICATION	3.459167688215881E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998216390455	WITHOUT_CLASSIFICATION	1.783609544249752E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999573300077	WITHOUT_CLASSIFICATION	4.266999226330591E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999359249151	WITHOUT_CLASSIFICATION	6.407508500575372E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999991245409569	WITHOUT_CLASSIFICATION	8.754590431407385E-7	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999714972678	WITHOUT_CLASSIFICATION	2.8502732225717754E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999714972678	WITHOUT_CLASSIFICATION	2.8502732225717754E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999740850675	WITHOUT_CLASSIFICATION	2.5914932561659787E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999740850675	WITHOUT_CLASSIFICATION	2.5914932561659787E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999727682951	WITHOUT_CLASSIFICATION	2.7231704866178063E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998917685659	WITHOUT_CLASSIFICATION	1.0823143407480141E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998917685659	WITHOUT_CLASSIFICATION	1.0823143407480141E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998923725177	WITHOUT_CLASSIFICATION	1.0762748221029441E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999149045982	WITHOUT_CLASSIFICATION	8.509540185095363E-8	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999826932970912	WITHOUT_CLASSIFICATION	1.7306702908774866E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998757889316249	WITHOUT_CLASSIFICATION	1.2421106837503441E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999842596070894	WITHOUT_CLASSIFICATION	1.574039291062543E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999149045982	WITHOUT_CLASSIFICATION	8.509540185095363E-8	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998196004150937	WITHOUT_CLASSIFICATION	1.8039958490639137E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999766979002676	WITHOUT_CLASSIFICATION	2.3302099732447044E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999479166419	WITHOUT_CLASSIFICATION	5.208335806203433E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999371406829	WITHOUT_CLASSIFICATION	6.285931713650094E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995532071241	WITHOUT_CLASSIFICATION	4.467928759038364E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999879299461202	WITHOUT_CLASSIFICATION	1.207005387984027E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999980209826382	WITHOUT_CLASSIFICATION	1.979017361693287E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999967809983265	WITHOUT_CLASSIFICATION	3.2190016735634866E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999994087403811	WITHOUT_CLASSIFICATION	5.912596189549245E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999932728587	WITHOUT_CLASSIFICATION	6.72714131718132E-9	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999991746824	WITHOUT_CLASSIFICATION	8.253176779274834E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999999476182861	WITHOUT_CLASSIFICATION	5.238171390692893E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994991760118	WITHOUT_CLASSIFICATION	5.008239881582304E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.999999670778409	WITHOUT_CLASSIFICATION	3.292215910285371E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999387313608031	WITHOUT_CLASSIFICATION	6.126863919679926E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999965447590488	WITHOUT_CLASSIFICATION	3.455240951325246E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999832558215	WITHOUT_CLASSIFICATION	1.6744178502863097E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995909034742	WITHOUT_CLASSIFICATION	4.0909652572972494E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995909034742	WITHOUT_CLASSIFICATION	4.0909652572972494E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997301105957	WITHOUT_CLASSIFICATION	2.6988940425593E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999999942832001	WITHOUT_CLASSIFICATION	5.7167999064461625E-8	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999999515782203	WITHOUT_CLASSIFICATION	4.842177969462905E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.99988095192067	WITHOUT_CLASSIFICATION	1.1904807933007311E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999991824813457	WITHOUT_CLASSIFICATION	8.175186542484749E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999853736910216	WITHOUT_CLASSIFICATION	1.4626308978426934E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999953490487486	WITHOUT_CLASSIFICATION	4.6509512513719986E-6	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999968669220702	WITHOUT_CLASSIFICATION	3.133077929844551E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999962236748768	WITHOUT_CLASSIFICATION	3.7763251232267278E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99999998999733	WITHOUT_CLASSIFICATION	1.0002669982485196E-8	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999990100045	WITHOUT_CLASSIFICATION	9.89995500508571E-9	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999873060739378	WITHOUT_CLASSIFICATION	1.2693926062216066E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999999912866033	WITHOUT_CLASSIFICATION	8.713396697231304E-8	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999755131922551	WITHOUT_CLASSIFICATION	2.448680774490352E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999961071065575	WITHOUT_CLASSIFICATION	3.892893442507394E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999722017305948	WITHOUT_CLASSIFICATION	2.7798269405235944E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999140487086	WITHOUT_CLASSIFICATION	8.595129140274653E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999140487086	WITHOUT_CLASSIFICATION	8.595129140274653E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999816681162613	WITHOUT_CLASSIFICATION	1.833188373868712E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999998766600095	WITHOUT_CLASSIFICATION	1.2333999049020314E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998723478094739	WITHOUT_CLASSIFICATION	1.2765219052608776E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.999987700313439	WITHOUT_CLASSIFICATION	1.2299686561132448E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999998360071201	WITHOUT_CLASSIFICATION	1.6399287990703702E-7	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999960019425861	WITHOUT_CLASSIFICATION	3.998057413916902E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999490279211268	WITHOUT_CLASSIFICATION	5.09720788731491E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999299266666	WITHOUT_CLASSIFICATION	7.007333331731506E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998101053855183	WITHOUT_CLASSIFICATION	1.8989461448171507E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999950100129	WITHOUT_CLASSIFICATION	4.989987034745215E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999991407087	WITHOUT_CLASSIFICATION	8.592912979482404E-10	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999299266666	WITHOUT_CLASSIFICATION	7.007333331731506E-8	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999992262945214	WITHOUT_CLASSIFICATION	7.73705478460366E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999965712997894	WITHOUT_CLASSIFICATION	3.4287002106872444E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999986092185	WITHOUT_CLASSIFICATION	1.3907815210403374E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999804620394	WITHOUT_CLASSIFICATION	1.953796048322145E-8	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999477757168	WITHOUT_CLASSIFICATION	5.222428316906675E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999968584837	WITHOUT_CLASSIFICATION	3.141516376725928E-9	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999941850180984	WITHOUT_CLASSIFICATION	5.814981901588987E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999957548295311	WITHOUT_CLASSIFICATION	4.245170468912738E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999922887556	WITHOUT_CLASSIFICATION	7.711244481258455E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999522515871562	WITHOUT_CLASSIFICATION	4.774841284389775E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997281494226622	WITHOUT_CLASSIFICATION	2.7185057733777147E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999032871716	WITHOUT_CLASSIFICATION	9.671282837046373E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999997920424173	WITHOUT_CLASSIFICATION	2.0795758264842909E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999943081579807	WITHOUT_CLASSIFICATION	5.691842019248773E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999305626742846	WITHOUT_CLASSIFICATION	6.94373257154156E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999997979086442	WITHOUT_CLASSIFICATION	2.0209135574715902E-7	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998904331354	WITHOUT_CLASSIFICATION	1.0956686468162543E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999154397633667	WITHOUT_CLASSIFICATION	8.456023663321098E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999692866380875	WITHOUT_CLASSIFICATION	3.0713361912513706E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999931710219414	WITHOUT_CLASSIFICATION	6.8289780585928765E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999997352233782	WITHOUT_CLASSIFICATION	2.6477662192306473E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998657534309	WITHOUT_CLASSIFICATION	1.3424656907720228E-7	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999935344202797	WITHOUT_CLASSIFICATION	6.465579720300147E-6	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999144212866	WITHOUT_CLASSIFICATION	8.557871341834934E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999626063049	WITHOUT_CLASSIFICATION	3.739369511676766E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999440938989439	WITHOUT_CLASSIFICATION	5.59061010560486E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999992538656214	WITHOUT_CLASSIFICATION	7.461343786265713E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999794785493582	WITHOUT_CLASSIFICATION	2.0521450641877437E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999988584467131	WITHOUT_CLASSIFICATION	1.1415532868829859E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999591933132044	WITHOUT_CLASSIFICATION	4.080668679561231E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998711430792	WITHOUT_CLASSIFICATION	1.2885692090269784E-7	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999933405906073	WITHOUT_CLASSIFICATION	6.659409392744623E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999909736248039	WITHOUT_CLASSIFICATION	9.026375196020692E-6	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999998603383	WITHOUT_CLASSIFICATION	1.3966171345728665E-10	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997708232016	WITHOUT_CLASSIFICATION	2.2917679850097165E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999988861111516	WITHOUT_CLASSIFICATION	1.1138888484292041E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999666627126	WITHOUT_CLASSIFICATION	3.333728745670146E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999976773403	WITHOUT_CLASSIFICATION	2.32265976535867E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995928813202	WITHOUT_CLASSIFICATION	4.0711867977222044E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999986900591387	WITHOUT_CLASSIFICATION	1.3099408613085623E-6	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999704968661908	WITHOUT_CLASSIFICATION	2.9503133809138268E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999731243512	WITHOUT_CLASSIFICATION	2.6875648785636286E-8	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999898066934797	WITHOUT_CLASSIFICATION	1.0193306520346067E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999978813281	WITHOUT_CLASSIFICATION	2.118672000704012E-9	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999705566927	WITHOUT_CLASSIFICATION	2.9443307310294688E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999656442354	WITHOUT_CLASSIFICATION	3.4355764549113564E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999730689615	WITHOUT_CLASSIFICATION	2.6931038602977378E-8	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999945724585994	WITHOUT_CLASSIFICATION	5.4275414006010744E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999998981743182	WITHOUT_CLASSIFICATION	1.0182568173941612E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999990437804405	WITHOUT_CLASSIFICATION	9.562195595786454E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338024834269	WITHOUT_CLASSIFICATION	6.619751657314609E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999992553359446	WITHOUT_CLASSIFICATION	7.446640553732254E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999961300233	WITHOUT_CLASSIFICATION	3.869976665184767E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999995771801	WITHOUT_CLASSIFICATION	4.228198761090651E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998010728961	WITHOUT_CLASSIFICATION	1.9892710393030253E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999903446663108	WITHOUT_CLASSIFICATION	9.65533368925551E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997813635072704	WITHOUT_CLASSIFICATION	2.18636492729672E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999508807050976	WITHOUT_CLASSIFICATION	4.9119294902318957E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999998712996359	WITHOUT_CLASSIFICATION	1.287003641917112E-7	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999961742336	WITHOUT_CLASSIFICATION	3.825766436806577E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998899676934	WITHOUT_CLASSIFICATION	1.10032306547919E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999914291975758	WITHOUT_CLASSIFICATION	8.57080242415185E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999856947272447	WITHOUT_CLASSIFICATION	1.4305272755246836E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999178131	WITHOUT_CLASSIFICATION	8.218689915700268E-11	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999335722392	WITHOUT_CLASSIFICATION	6.642776079031432E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999959480344399	WITHOUT_CLASSIFICATION	4.051965560163074E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338024834269	WITHOUT_CLASSIFICATION	6.619751657314609E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999954582277875	WITHOUT_CLASSIFICATION	4.541772212596695E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999937533147688	WITHOUT_CLASSIFICATION	6.246685231162157E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999923173706	WITHOUT_CLASSIFICATION	7.682629520241413E-9	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999198359792	WITHOUT_CLASSIFICATION	8.016402070659942E-8	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999571752812664	WITHOUT_CLASSIFICATION	4.2824718733644597E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999417549795	WITHOUT_CLASSIFICATION	5.824502045023017E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998101053855183	WITHOUT_CLASSIFICATION	1.8989461448171507E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996077233967949	WITHOUT_CLASSIFICATION	3.922766032050546E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997708232016	WITHOUT_CLASSIFICATION	2.2917679850097165E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999902180616043	WITHOUT_CLASSIFICATION	9.781938395698752E-6	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999655758021	WITHOUT_CLASSIFICATION	3.442419794797464E-8	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999946322625	WITHOUT_CLASSIFICATION	5.367737501412435E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999790800517	WITHOUT_CLASSIFICATION	2.091994837070729E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999943266235551	WITHOUT_CLASSIFICATION	5.673376444744916E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999981488568692	WITHOUT_CLASSIFICATION	1.8511431307427038E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999874305295	WITHOUT_CLASSIFICATION	1.2569470495309595E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999818200385	WITHOUT_CLASSIFICATION	1.8179961538480224E-8	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999936656808611	WITHOUT_CLASSIFICATION	6.334319138825386E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999971515102	WITHOUT_CLASSIFICATION	2.8484898029344843E-9	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999988144648906	WITHOUT_CLASSIFICATION	1.1855351095063276E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999743163114101	WITHOUT_CLASSIFICATION	2.5683688589895805E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999664550303	WITHOUT_CLASSIFICATION	3.354496971784588E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999664550303	WITHOUT_CLASSIFICATION	3.354496971784588E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999996243537345	WITHOUT_CLASSIFICATION	3.7564626552484995E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999998621539303	WITHOUT_CLASSIFICATION	1.3784606969703562E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999975623416	WITHOUT_CLASSIFICATION	2.4376585516025135E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999580323052	WITHOUT_CLASSIFICATION	4.19676946480113E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999974483551	WITHOUT_CLASSIFICATION	2.5516449781359803E-9	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999988965868486	WITHOUT_CLASSIFICATION	1.1034131513889885E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999999777277	WITHOUT_CLASSIFICATION	2.227230119614987E-10	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999999062797817	WITHOUT_CLASSIFICATION	9.372021820801744E-8	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999077096843	WITHOUT_CLASSIFICATION	9.229031571869468E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999597495735	WITHOUT_CLASSIFICATION	4.025042648587364E-8	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999952393080276	WITHOUT_CLASSIFICATION	4.760691972440682E-6	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999970114505409	WITHOUT_CLASSIFICATION	2.988549459114896E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999977896557074	WITHOUT_CLASSIFICATION	2.2103442925491907E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994494778499	WITHOUT_CLASSIFICATION	5.505221501955645E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999432775491902	WITHOUT_CLASSIFICATION	5.6722450809659774E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999760894872	WITHOUT_CLASSIFICATION	2.3910512784920797E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999514227776	WITHOUT_CLASSIFICATION	4.857722225713089E-8	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999954076885	WITHOUT_CLASSIFICATION	4.592311531396495E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998864077788	WITHOUT_CLASSIFICATION	1.1359222127822569E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999997237271453	WITHOUT_CLASSIFICATION	2.762728547120502E-7	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997857301042	WITHOUT_CLASSIFICATION	2.1426989576045479E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999991084105	WITHOUT_CLASSIFICATION	8.915893592384283E-10	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999999383746225	WITHOUT_CLASSIFICATION	6.162537748828726E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9976597208312904	WITHOUT_CLASSIFICATION	0.002340279168709621	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9976037879586475	WITHOUT_CLASSIFICATION	0.0023962120413526	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999190162384954	WITHOUT_CLASSIFICATION	8.098376150446126E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989235677641	WITHOUT_CLASSIFICATION	1.0764322358226851E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999807860451	WITHOUT_CLASSIFICATION	1.921395491125929E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998700376455	WITHOUT_CLASSIFICATION	1.2996235444822336E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999513043313	WITHOUT_CLASSIFICATION	4.869566870137228E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.998113589192182	WITHOUT_CLASSIFICATION	0.001886410807818052	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999983752292051	WITHOUT_CLASSIFICATION	1.6247707948195296E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999999799869588	WITHOUT_CLASSIFICATION	2.0013041141713325E-8	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.994109949567522	WITHOUT_CLASSIFICATION	0.005890050432478036	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999961772130934	WITHOUT_CLASSIFICATION	3.82278690664096E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997148155069	WITHOUT_CLASSIFICATION	2.851844930982699E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999969646382375	WITHOUT_CLASSIFICATION	3.0353617626095446E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999407207106774	WITHOUT_CLASSIFICATION	5.9279289322615364E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999998938686274	WITHOUT_CLASSIFICATION	1.0613137257275803E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993542855952	WITHOUT_CLASSIFICATION	6.457144047153002E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260071113479	WITHOUT_CLASSIFICATION	7.399288865209155E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999993249931975	WITHOUT_CLASSIFICATION	6.750068024916811E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999962400038294	WITHOUT_CLASSIFICATION	3.7599961705481488E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999970913458497	WITHOUT_CLASSIFICATION	2.9086541503588935E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999981588410027	WITHOUT_CLASSIFICATION	1.8411589972811104E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998144831421053	WITHOUT_CLASSIFICATION	1.855168578946656E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9991808527353576	WITHOUT_CLASSIFICATION	8.191472646423631E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995668598364	WITHOUT_CLASSIFICATION	4.3314016351382224E-7	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999993851655856	WITHOUT_CLASSIFICATION	6.148344142929827E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999801391288418	WITHOUT_CLASSIFICATION	1.9860871158208704E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993970483434	WITHOUT_CLASSIFICATION	6.029516567064523E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999268609462989	WITHOUT_CLASSIFICATION	7.313905370111951E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999573227678	WITHOUT_CLASSIFICATION	4.267723224171048E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999982370930737	WITHOUT_CLASSIFICATION	1.7629069262422682E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999982244541556	WITHOUT_CLASSIFICATION	1.7755458443692577E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999990202214073	WITHOUT_CLASSIFICATION	9.797785927157314E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999340241257	WITHOUT_CLASSIFICATION	6.59758743757609E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999717207997352	WITHOUT_CLASSIFICATION	2.827920026473748E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999994970196113	WITHOUT_CLASSIFICATION	5.029803887368573E-7	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999986328262829	WITHOUT_CLASSIFICATION	1.367173717092356E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999989445628955	WITHOUT_CLASSIFICATION	1.0554371044673375E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999949681577	WITHOUT_CLASSIFICATION	5.031842332232878E-9	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999857822579565	WITHOUT_CLASSIFICATION	1.4217742043501826E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999993563318749	WITHOUT_CLASSIFICATION	6.436681251024035E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999939829143	WITHOUT_CLASSIFICATION	6.01708574053078E-9	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999985419749	WITHOUT_CLASSIFICATION	1.458025164650707E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997041292786	WITHOUT_CLASSIFICATION	2.9587072139099214E-7	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999944465090607	WITHOUT_CLASSIFICATION	5.5534909393804395E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999975817269261	WITHOUT_CLASSIFICATION	2.4182730738600745E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999968669303185	WITHOUT_CLASSIFICATION	3.1330696814655866E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999975817269261	WITHOUT_CLASSIFICATION	2.4182730738600745E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999972318666	WITHOUT_CLASSIFICATION	2.768133435613963E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999963865860912	WITHOUT_CLASSIFICATION	3.6134139087439482E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999726135481573	WITHOUT_CLASSIFICATION	2.738645184281128E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999692115262072	WITHOUT_CLASSIFICATION	3.078847379277629E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999956505148135	WITHOUT_CLASSIFICATION	4.34948518644103E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999929897498157	WITHOUT_CLASSIFICATION	7.010250184287664E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999954668041	WITHOUT_CLASSIFICATION	4.5331959023558116E-9	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999897552371	WITHOUT_CLASSIFICATION	1.0244762875251078E-8	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999765559536	WITHOUT_CLASSIFICATION	2.3444046410560745E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999997648950698	WITHOUT_CLASSIFICATION	2.3510493019311726E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999996270529913	WITHOUT_CLASSIFICATION	3.7294700870652883E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999762469429	WITHOUT_CLASSIFICATION	2.3753057137714474E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998876936412	WITHOUT_CLASSIFICATION	1.1230635867429268E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999870312999608	WITHOUT_CLASSIFICATION	1.2968700039189346E-4	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998558606815793	WITHOUT_CLASSIFICATION	1.4413931842073216E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998709412133	WITHOUT_CLASSIFICATION	1.2905878673384254E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999996772926941	WITHOUT_CLASSIFICATION	3.22707305811951E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999914362787	WITHOUT_CLASSIFICATION	8.5637212818892E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999778164356	WITHOUT_CLASSIFICATION	2.2183564346963577E-8	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999031726793	WITHOUT_CLASSIFICATION	9.682732069447266E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999198881903	WITHOUT_CLASSIFICATION	8.011180973079039E-8	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998914106462281	WITHOUT_CLASSIFICATION	1.0858935377178933E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9993235691269768	WITHOUT_CLASSIFICATION	6.764308730231735E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999794175937723	WITHOUT_CLASSIFICATION	2.0582406227733144E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999869975650548	WITHOUT_CLASSIFICATION	1.3002434945242054E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999889614888	WITHOUT_CLASSIFICATION	1.1038511178220007E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999958187619928	WITHOUT_CLASSIFICATION	4.181238007219546E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999937383194512	WITHOUT_CLASSIFICATION	6.261680548827681E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999991465831788	WITHOUT_CLASSIFICATION	8.534168213335813E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999952335075044	WITHOUT_CLASSIFICATION	4.766492495582297E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999948653818345	WITHOUT_CLASSIFICATION	5.134618165492081E-6	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999998268566579	WITHOUT_CLASSIFICATION	1.7314334209725352E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999944304209	WITHOUT_CLASSIFICATION	5.569579145610752E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998393394482	WITHOUT_CLASSIFICATION	1.606605517874673E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999950350998501	WITHOUT_CLASSIFICATION	4.964900149891035E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999974876657963	WITHOUT_CLASSIFICATION	2.5123342037391224E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999937868454438	WITHOUT_CLASSIFICATION	6.213154556150834E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994884974863	WITHOUT_CLASSIFICATION	5.11502513780062E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999129729285887	WITHOUT_CLASSIFICATION	8.70270714112882E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999991106431378	WITHOUT_CLASSIFICATION	8.893568621784534E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999955097323	WITHOUT_CLASSIFICATION	4.490267660792588E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999754415606869	WITHOUT_CLASSIFICATION	2.4558439313197448E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999753253171	WITHOUT_CLASSIFICATION	2.467468279280551E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999889614888	WITHOUT_CLASSIFICATION	1.1038511178220007E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999205289974988	WITHOUT_CLASSIFICATION	7.947100250113505E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999998908771323	WITHOUT_CLASSIFICATION	1.0912286771110854E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999252816660962	WITHOUT_CLASSIFICATION	7.471833390388768E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999993341861	WITHOUT_CLASSIFICATION	6.658139033528686E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999868741675397	WITHOUT_CLASSIFICATION	1.312583246032853E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999990143624	WITHOUT_CLASSIFICATION	9.85637635128538E-10	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999995270789735	WITHOUT_CLASSIFICATION	4.729210263891317E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999875929499458	WITHOUT_CLASSIFICATION	1.240705005420547E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999892269369028	WITHOUT_CLASSIFICATION	1.0773063097169483E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999972833877	WITHOUT_CLASSIFICATION	2.7166123700894064E-9	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9997452710180773	WITHOUT_CLASSIFICATION	2.5472898192273184E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999488888599	WITHOUT_CLASSIFICATION	5.111114012060458E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999960083511215	WITHOUT_CLASSIFICATION	3.9916488784984264E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999931285637733	WITHOUT_CLASSIFICATION	6.871436226575352E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999989385538	WITHOUT_CLASSIFICATION	1.0614460738491724E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999778393869	WITHOUT_CLASSIFICATION	2.216061313154138E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.99999998478882	WITHOUT_CLASSIFICATION	1.5211180058000238E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999585131021	WITHOUT_CLASSIFICATION	4.14868978387625E-8	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999955374692945	WITHOUT_CLASSIFICATION	4.462530705502875E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999205289974988	WITHOUT_CLASSIFICATION	7.947100250113505E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999844928193655	WITHOUT_CLASSIFICATION	1.5507180634515025E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999353556531	WITHOUT_CLASSIFICATION	6.464434687578559E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999999683706224	WITHOUT_CLASSIFICATION	3.1629377597517375E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999968675739	WITHOUT_CLASSIFICATION	3.13242597911217E-9	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999835396179	WITHOUT_CLASSIFICATION	1.6460382111156407E-8	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9891574298428789	WITHOUT_CLASSIFICATION	0.010842570157121185	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9891574298428789	WITHOUT_CLASSIFICATION	0.010842570157121185	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999988512606837	WITHOUT_CLASSIFICATION	1.1487393162537825E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9891574298428789	WITHOUT_CLASSIFICATION	0.010842570157121185	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9891574298428789	WITHOUT_CLASSIFICATION	0.010842570157121185	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999926570877361	WITHOUT_CLASSIFICATION	7.342912263901214E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999997200464857	WITHOUT_CLASSIFICATION	2.799535142604105E-7	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999995027083466	WITHOUT_CLASSIFICATION	4.972916533572385E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999897181059633	WITHOUT_CLASSIFICATION	1.0281894036794136E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999987225978697	WITHOUT_CLASSIFICATION	1.2774021302904312E-6	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9994662230786436	WITHOUT_CLASSIFICATION	5.337769213564848E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998246564023381	WITHOUT_CLASSIFICATION	1.7534359766191866E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998648659475	WITHOUT_CLASSIFICATION	1.3513405252924474E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999886398727951	WITHOUT_CLASSIFICATION	1.1360127204989463E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999167407436597	WITHOUT_CLASSIFICATION	8.325925634037918E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999804404677145	WITHOUT_CLASSIFICATION	1.9559532285563015E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999845997290875	WITHOUT_CLASSIFICATION	1.5400270912498216E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995878719403	WITHOUT_CLASSIFICATION	4.121280597535103E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999766754104298	WITHOUT_CLASSIFICATION	2.3324589570185616E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999994910233397	WITHOUT_CLASSIFICATION	5.089766602840371E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999898010500459	WITHOUT_CLASSIFICATION	1.0198949954079586E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997498286672	WITHOUT_CLASSIFICATION	2.5017133276551565E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999998355018422	WITHOUT_CLASSIFICATION	1.6449815780167043E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998115741829137	WITHOUT_CLASSIFICATION	1.884258170862716E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999757172488286	WITHOUT_CLASSIFICATION	2.4282751171371252E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999827019647974	WITHOUT_CLASSIFICATION	1.7298035202569507E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999987151695304	WITHOUT_CLASSIFICATION	1.2848304696118325E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997498286672	WITHOUT_CLASSIFICATION	2.5017133276551565E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999958187619928	WITHOUT_CLASSIFICATION	4.181238007219546E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999658278730312	WITHOUT_CLASSIFICATION	3.4172126968680806E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979243382182	WITHOUT_CLASSIFICATION	2.0756617817495408E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989698198352	WITHOUT_CLASSIFICATION	1.0301801648720803E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999825367270436	WITHOUT_CLASSIFICATION	1.7463272956381587E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999986349594896	WITHOUT_CLASSIFICATION	1.3650405104429411E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999995920323189	WITHOUT_CLASSIFICATION	4.07967681055351E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9975546609903139	WITHOUT_CLASSIFICATION	0.002445339009686036	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999881971861789	WITHOUT_CLASSIFICATION	1.1802813821156935E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999927861115641	WITHOUT_CLASSIFICATION	7.213888435882312E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9996977376659135	WITHOUT_CLASSIFICATION	3.022623340864545E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999984007488	WITHOUT_CLASSIFICATION	1.5992512579087584E-9	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999997196413064	WITHOUT_CLASSIFICATION	2.8035869356426145E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999985200075259	WITHOUT_CLASSIFICATION	1.47999247413069E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999509509127523	WITHOUT_CLASSIFICATION	4.904908724773181E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999998480045	WITHOUT_CLASSIFICATION	1.5199551047964046E-9	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999843933632	WITHOUT_CLASSIFICATION	1.5606636816883943E-8	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999749034257978	WITHOUT_CLASSIFICATION	2.509657420213158E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999966595781	WITHOUT_CLASSIFICATION	3.3404218403000013E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999998307372782	WITHOUT_CLASSIFICATION	1.6926272181658753E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9997110479761523	WITHOUT_CLASSIFICATION	2.8895202384771973E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999996311707566	WITHOUT_CLASSIFICATION	3.688292434053188E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999436748052	WITHOUT_CLASSIFICATION	5.632519479270267E-8	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999881971861789	WITHOUT_CLASSIFICATION	1.1802813821156935E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999956586735399	WITHOUT_CLASSIFICATION	4.341326460181661E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999895568942854	WITHOUT_CLASSIFICATION	1.0443105714697785E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997893796174461	WITHOUT_CLASSIFICATION	2.1062038255382704E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999995288268119	WITHOUT_CLASSIFICATION	4.7117318814352897E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990608813055	WITHOUT_CLASSIFICATION	9.391186945878097E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999931093387842	WITHOUT_CLASSIFICATION	6.890661215784725E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999964821989823	WITHOUT_CLASSIFICATION	3.5178010175886856E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999998346697219	WITHOUT_CLASSIFICATION	1.653302781401727E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999991199227296	WITHOUT_CLASSIFICATION	8.8007727037142E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998804292848416	WITHOUT_CLASSIFICATION	1.1957071515846767E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996639560375	WITHOUT_CLASSIFICATION	3.360439625756282E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999303672742	WITHOUT_CLASSIFICATION	6.963272583817757E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9995234238434552	WITHOUT_CLASSIFICATION	4.765761565448187E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999268082748	WITHOUT_CLASSIFICATION	7.319172519507134E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999122568304	WITHOUT_CLASSIFICATION	8.774316960044262E-8	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999916085197821	WITHOUT_CLASSIFICATION	8.391480218003686E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996639560375	WITHOUT_CLASSIFICATION	3.360439625756282E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999990449103	WITHOUT_CLASSIFICATION	9.550896127294247E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999973665838882	WITHOUT_CLASSIFICATION	2.633416111843508E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997598948352	WITHOUT_CLASSIFICATION	2.4010516467302737E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999486425972803	WITHOUT_CLASSIFICATION	5.1357402719816624E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999996822601723	WITHOUT_CLASSIFICATION	3.177398276564853E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999987363151946	WITHOUT_CLASSIFICATION	1.2636848053321624E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999924727954957	WITHOUT_CLASSIFICATION	7.527204504341755E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996013386085	WITHOUT_CLASSIFICATION	3.9866139155766697E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996921743789	WITHOUT_CLASSIFICATION	3.0782562105047736E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9430209628823912	WITHOUT_CLASSIFICATION	0.0569790371176087	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9018617294038582	WITHOUT_CLASSIFICATION	0.09813827059614175	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9097317148845184	WITHOUT_CLASSIFICATION	0.0902682851154816	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99999969106881	WITHOUT_CLASSIFICATION	3.089311899987169E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99999969106881	WITHOUT_CLASSIFICATION	3.089311899987169E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999012196444	WITHOUT_CLASSIFICATION	9.878035562961732E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998745002094	WITHOUT_CLASSIFICATION	1.2549979065118811E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999995725463662	WITHOUT_CLASSIFICATION	4.274536339279091E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999993820409074	WITHOUT_CLASSIFICATION	6.179590926059932E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999995389168904	WITHOUT_CLASSIFICATION	4.610831095179282E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998632946704	WITHOUT_CLASSIFICATION	1.367053295490704E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992266904915	WITHOUT_CLASSIFICATION	7.73309508479626E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940653639676	WITHOUT_CLASSIFICATION	5.934636032412475E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999956840889914	WITHOUT_CLASSIFICATION	4.3159110084767455E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999734153686	WITHOUT_CLASSIFICATION	2.658463140534456E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998632946704	WITHOUT_CLASSIFICATION	1.367053295490704E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992266904915	WITHOUT_CLASSIFICATION	7.73309508479626E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940653639676	WITHOUT_CLASSIFICATION	5.934636032412475E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999886167509	WITHOUT_CLASSIFICATION	1.1383249113750478E-8	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9998708223256515	WITHOUT_CLASSIFICATION	1.2917767434843678E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999988706612	WITHOUT_CLASSIFICATION	1.1293388510727784E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999907829569171	WITHOUT_CLASSIFICATION	9.217043082929661E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999583135343	WITHOUT_CLASSIFICATION	4.16864656483712E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999589898351	WITHOUT_CLASSIFICATION	4.101016484432923E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999976557551944	WITHOUT_CLASSIFICATION	2.3442448056450284E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999961023336428	WITHOUT_CLASSIFICATION	3.8976663571890635E-6	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999966380534463	WITHOUT_CLASSIFICATION	3.361946553806089E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999995042889268	WITHOUT_CLASSIFICATION	4.957110732222435E-7	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999487563115	WITHOUT_CLASSIFICATION	5.124368847658953E-8	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999936255596418	WITHOUT_CLASSIFICATION	6.374440358214537E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999993389864218	WITHOUT_CLASSIFICATION	6.610135783026558E-7	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999999920172033	WITHOUT_CLASSIFICATION	7.982796697280374E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999956537272069	WITHOUT_CLASSIFICATION	4.3462727931060435E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.99999996756637	WITHOUT_CLASSIFICATION	3.243362992608099E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999948643999182	WITHOUT_CLASSIFICATION	5.135600081764904E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999966781183939	WITHOUT_CLASSIFICATION	3.321881606092727E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999997971123029	WITHOUT_CLASSIFICATION	2.0288769707640586E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999989792267583	WITHOUT_CLASSIFICATION	1.020773241725509E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999704410724	WITHOUT_CLASSIFICATION	2.9558927702313117E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9858329702657878	WITHOUT_CLASSIFICATION	0.014167029734212326	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999997966911002	WITHOUT_CLASSIFICATION	2.033088998023472E-7	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999954177445661	WITHOUT_CLASSIFICATION	4.582255433808052E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999986593033	WITHOUT_CLASSIFICATION	1.3406966902726829E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9978329137974874	WITHOUT_CLASSIFICATION	0.002167086202512655	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998048741048	WITHOUT_CLASSIFICATION	1.9512589526606402E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983631624398	WITHOUT_CLASSIFICATION	1.6368375600584015E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999995219179	WITHOUT_CLASSIFICATION	4.780821942286585E-10	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997490041949	WITHOUT_CLASSIFICATION	2.5099580510655043E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990964116245	WITHOUT_CLASSIFICATION	9.035883753326101E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997696055885	WITHOUT_CLASSIFICATION	2.3039441155061385E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997696055885	WITHOUT_CLASSIFICATION	2.3039441155061385E-7	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999996763302	WITHOUT_CLASSIFICATION	3.2366984603103427E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999430431246	WITHOUT_CLASSIFICATION	5.695687537999065E-8	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999376439102088	WITHOUT_CLASSIFICATION	6.235608979117479E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999873060739378	WITHOUT_CLASSIFICATION	1.2693926062216066E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999778301317302	WITHOUT_CLASSIFICATION	2.2169868269808883E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999169567447	WITHOUT_CLASSIFICATION	8.30432553066185E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999972814377416	WITHOUT_CLASSIFICATION	2.7185622584765625E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999976648811743	WITHOUT_CLASSIFICATION	2.335118825651036E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999970225796952	WITHOUT_CLASSIFICATION	2.9774203048603953E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998587065357	WITHOUT_CLASSIFICATION	1.4129346419844146E-7	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998429967238	WITHOUT_CLASSIFICATION	1.5700327609805525E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998213952023	WITHOUT_CLASSIFICATION	1.7860479773115684E-7	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604971039	WITHOUT_CLASSIFICATION	1.3950289617730376E-7	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999971019048	WITHOUT_CLASSIFICATION	2.8980951928425744E-8	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999304863388	WITHOUT_CLASSIFICATION	6.951366115421451E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999807285719	WITHOUT_CLASSIFICATION	1.9271428094018621E-7	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996763243999	WITHOUT_CLASSIFICATION	3.236756001288286E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996452885652	WITHOUT_CLASSIFICATION	3.54711434817997E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992775688549	WITHOUT_CLASSIFICATION	7.224311451849266E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999858332223	WITHOUT_CLASSIFICATION	1.4166777698947771E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999998528699056	WITHOUT_CLASSIFICATION	1.471300944030789E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999991978577151	WITHOUT_CLASSIFICATION	8.021422849933733E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999928644251833	WITHOUT_CLASSIFICATION	7.135574816618337E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999968356229882	WITHOUT_CLASSIFICATION	3.1643770117525895E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996637428407	WITHOUT_CLASSIFICATION	3.362571593298471E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.999983743299684	WITHOUT_CLASSIFICATION	1.6256700316018035E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999992785886664	WITHOUT_CLASSIFICATION	7.214113335994312E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998109637697261	WITHOUT_CLASSIFICATION	1.890362302738371E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999928644251833	WITHOUT_CLASSIFICATION	7.135574816618337E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999928644251833	WITHOUT_CLASSIFICATION	7.135574816618337E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9991190423748372	WITHOUT_CLASSIFICATION	8.809576251628722E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999976023281737	WITHOUT_CLASSIFICATION	2.397671826384204E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999633907959	WITHOUT_CLASSIFICATION	3.6609203978541114E-8	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999980108416117	WITHOUT_CLASSIFICATION	1.9891583883672936E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994991760118	WITHOUT_CLASSIFICATION	5.008239881582304E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999989792267583	WITHOUT_CLASSIFICATION	1.020773241725509E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999984697827236	WITHOUT_CLASSIFICATION	1.5302172764658154E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999982975173859	WITHOUT_CLASSIFICATION	1.7024826142021046E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999883299983	WITHOUT_CLASSIFICATION	1.1670001753096517E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948650044074	WITHOUT_CLASSIFICATION	5.134995592631269E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9988083721260724	WITHOUT_CLASSIFICATION	0.001191627873927494	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905873586998	WITHOUT_CLASSIFICATION	9.41264130023666E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999056349724	WITHOUT_CLASSIFICATION	9.436502760682586E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999056349724	WITHOUT_CLASSIFICATION	9.436502760682586E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998361295762	WITHOUT_CLASSIFICATION	1.638704238323317E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998361295762	WITHOUT_CLASSIFICATION	1.638704238323317E-7	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995586092881399	WITHOUT_CLASSIFICATION	4.4139071186005804E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999980088053	WITHOUT_CLASSIFICATION	1.991194643121845E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999285372649	WITHOUT_CLASSIFICATION	7.146273500321364E-8	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999108244412166	WITHOUT_CLASSIFICATION	8.917555878350624E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999986603111355	WITHOUT_CLASSIFICATION	1.3396888645317966E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999820214944981	WITHOUT_CLASSIFICATION	1.7978505501873036E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931713626055	WITHOUT_CLASSIFICATION	6.828637394500776E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996713909743	WITHOUT_CLASSIFICATION	3.2860902559096794E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999918412448	WITHOUT_CLASSIFICATION	8.158755134872274E-9	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999804647012	WITHOUT_CLASSIFICATION	1.9535298842159042E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999994999325	WITHOUT_CLASSIFICATION	5.000675175937251E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999723044391345	WITHOUT_CLASSIFICATION	2.7695560865563236E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9994575470886657	WITHOUT_CLASSIFICATION	5.424529113343438E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997995673633	WITHOUT_CLASSIFICATION	2.0043263662365036E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999937666864637	WITHOUT_CLASSIFICATION	6.23331353631859E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999957536093231	WITHOUT_CLASSIFICATION	4.246390676910313E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999957536093231	WITHOUT_CLASSIFICATION	4.246390676910313E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999987383824657	WITHOUT_CLASSIFICATION	1.2616175343886975E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999956810874	WITHOUT_CLASSIFICATION	4.318912605437623E-9	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999636631	WITHOUT_CLASSIFICATION	3.633690162699953E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999949696851016	WITHOUT_CLASSIFICATION	5.030314898310983E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865762404532	WITHOUT_CLASSIFICATION	1.3423759546828907E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982258776993	WITHOUT_CLASSIFICATION	1.7741223006783202E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999996303998433	WITHOUT_CLASSIFICATION	3.696001567013379E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8883637069146177	WITHOUT_CLASSIFICATION	0.1116362930853823	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.99998902330212	WITHOUT_CLASSIFICATION	1.0976697879984597E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999997630213431	WITHOUT_CLASSIFICATION	2.369786568862658E-7	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999989650169425	WITHOUT_CLASSIFICATION	1.0349830575556228E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999756408172265	WITHOUT_CLASSIFICATION	2.435918277353056E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998606537859	WITHOUT_CLASSIFICATION	1.3934621406881427E-7	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999996290304559	WITHOUT_CLASSIFICATION	3.7096954404858574E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999961520764149	WITHOUT_CLASSIFICATION	3.847923585155058E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999954893061199	WITHOUT_CLASSIFICATION	4.510693880076492E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999994761162675	WITHOUT_CLASSIFICATION	5.23883732478255E-7	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999861240734105	WITHOUT_CLASSIFICATION	1.3875926589635018E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999916090481962	WITHOUT_CLASSIFICATION	8.390951803913448E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999995678202803	WITHOUT_CLASSIFICATION	4.3217971963061225E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999466935	WITHOUT_CLASSIFICATION	5.330650208057644E-11	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999998981134775	WITHOUT_CLASSIFICATION	1.0188652249943938E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999899770631479	WITHOUT_CLASSIFICATION	1.00229368520745E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998232896342	WITHOUT_CLASSIFICATION	1.7671036579724557E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999981116122234	WITHOUT_CLASSIFICATION	1.8883877765596888E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999986024311318	WITHOUT_CLASSIFICATION	1.3975688681278002E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994875015733	WITHOUT_CLASSIFICATION	5.124984267777933E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999993233716009	WITHOUT_CLASSIFICATION	6.766283990102779E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999950681	WITHOUT_CLASSIFICATION	4.93193252553595E-12	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999827119162956	WITHOUT_CLASSIFICATION	1.7288083704381172E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999727418654	WITHOUT_CLASSIFICATION	2.7258134610696803E-8	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999987693154928	WITHOUT_CLASSIFICATION	1.230684507183183E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999984087136431	WITHOUT_CLASSIFICATION	1.5912863569024E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998856081783725	WITHOUT_CLASSIFICATION	1.143918216275084E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999999942494471	WITHOUT_CLASSIFICATION	5.7505528890039484E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999949800345693	WITHOUT_CLASSIFICATION	5.019965430685986E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991654682513	WITHOUT_CLASSIFICATION	8.345317487222628E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999811743281432	WITHOUT_CLASSIFICATION	1.8825671856916242E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998559082045	WITHOUT_CLASSIFICATION	1.440917954842859E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999093512987318	WITHOUT_CLASSIFICATION	9.064870126808423E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999995825677214	WITHOUT_CLASSIFICATION	4.1743227870266016E-7	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999994185301182	WITHOUT_CLASSIFICATION	5.814698818189802E-7	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9977167780229592	WITHOUT_CLASSIFICATION	0.002283221977040758	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999667561070287	WITHOUT_CLASSIFICATION	3.32438929712877E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999861614349	WITHOUT_CLASSIFICATION	1.3838565220293829E-8	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999956957971405	WITHOUT_CLASSIFICATION	4.30420285951808E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999997349781835	WITHOUT_CLASSIFICATION	2.6502181654294886E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981849189754	WITHOUT_CLASSIFICATION	1.8150810245602875E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999998808602384	WITHOUT_CLASSIFICATION	1.191397616010569E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999938501262191	WITHOUT_CLASSIFICATION	6.149873780929007E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999822265499871	WITHOUT_CLASSIFICATION	1.7773450012893848E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997710339522284	WITHOUT_CLASSIFICATION	2.2896604777150904E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999091107887337	WITHOUT_CLASSIFICATION	9.088921126633326E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993341131043582	WITHOUT_CLASSIFICATION	6.658868956417371E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9995402474985253	WITHOUT_CLASSIFICATION	4.5975250147472287E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999985727192839	WITHOUT_CLASSIFICATION	1.427280716026998E-6	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9591644550226679	WITHOUT_CLASSIFICATION	0.04083554497733199	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999957633223707	WITHOUT_CLASSIFICATION	4.23667762935145E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999958767614	WITHOUT_CLASSIFICATION	4.123238685778037E-9	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999789430704252	WITHOUT_CLASSIFICATION	2.1056929574801266E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998558246306	WITHOUT_CLASSIFICATION	1.4417536933728542E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999983500650231	WITHOUT_CLASSIFICATION	1.649934976838752E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999984127973	WITHOUT_CLASSIFICATION	1.5872026811828317E-9	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999997734881445	WITHOUT_CLASSIFICATION	2.2651185540888857E-7	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999972209833	WITHOUT_CLASSIFICATION	2.7790167430768287E-9	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999997286281291	WITHOUT_CLASSIFICATION	2.713718709327439E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995490493515	WITHOUT_CLASSIFICATION	4.509506485234721E-7	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999984851676381	WITHOUT_CLASSIFICATION	1.5148323619161822E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778395986055	WITHOUT_CLASSIFICATION	2.2160401394542182E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778395986055	WITHOUT_CLASSIFICATION	2.2160401394542182E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999991921006318	WITHOUT_CLASSIFICATION	8.078993680702643E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999997420215617	WITHOUT_CLASSIFICATION	2.5797843824386945E-7	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999990272803	WITHOUT_CLASSIFICATION	9.727197066351712E-10	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998796650565	WITHOUT_CLASSIFICATION	1.203349434595049E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997329555896	WITHOUT_CLASSIFICATION	2.6704441038599646E-7	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998445549790275	WITHOUT_CLASSIFICATION	1.5544502097241197E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999638305329	WITHOUT_CLASSIFICATION	3.6169467080363685E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999992602862	WITHOUT_CLASSIFICATION	7.397138013303558E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999864037330773	WITHOUT_CLASSIFICATION	1.3596266922601135E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998205606455	WITHOUT_CLASSIFICATION	1.7943935443931677E-7	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999849513002208	WITHOUT_CLASSIFICATION	1.5048699779233392E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999967372316348	WITHOUT_CLASSIFICATION	3.2627683650762294E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999994527573793	WITHOUT_CLASSIFICATION	5.472426206117753E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999991178002	WITHOUT_CLASSIFICATION	8.821997372381238E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999994491146003	WITHOUT_CLASSIFICATION	5.508853998022478E-7	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9923931223861763	WITHOUT_CLASSIFICATION	0.007606877613823714	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999566000973313	WITHOUT_CLASSIFICATION	4.3399902668782205E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9947712059965312	WITHOUT_CLASSIFICATION	0.005228794003468766	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999690744341592	WITHOUT_CLASSIFICATION	3.0925565840798566E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999991116998708	WITHOUT_CLASSIFICATION	8.883001291039552E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999997703426816	WITHOUT_CLASSIFICATION	2.2965731853348368E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999987979705739	WITHOUT_CLASSIFICATION	1.2020294260930313E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999978042839196	WITHOUT_CLASSIFICATION	2.195716080438511E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9981756072126905	WITHOUT_CLASSIFICATION	0.001824392787309553	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998470177728	WITHOUT_CLASSIFICATION	1.5298222726095768E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999888931382728	WITHOUT_CLASSIFICATION	1.1106861727211562E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999922929312097	WITHOUT_CLASSIFICATION	7.707068790304627E-6	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999179536605	WITHOUT_CLASSIFICATION	8.204633948750297E-8	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999999474036793	WITHOUT_CLASSIFICATION	5.259632074426283E-8	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999789483712991	WITHOUT_CLASSIFICATION	2.1051628700944738E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999991507944159	WITHOUT_CLASSIFICATION	8.492055841424599E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999867601048935	WITHOUT_CLASSIFICATION	1.3239895106543651E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999985794959967	WITHOUT_CLASSIFICATION	1.4205040032153835E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999947285062794	WITHOUT_CLASSIFICATION	5.271493720757881E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998809285608715	WITHOUT_CLASSIFICATION	1.1907143912851088E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998809285608715	WITHOUT_CLASSIFICATION	1.1907143912851088E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999994222456366	WITHOUT_CLASSIFICATION	5.777543633625195E-7	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997636144329829	WITHOUT_CLASSIFICATION	2.363855670170383E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999728069136	WITHOUT_CLASSIFICATION	2.71930864476653E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999913389452605	WITHOUT_CLASSIFICATION	8.661054739505862E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999937803182	WITHOUT_CLASSIFICATION	6.219681793860125E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999982203758158	WITHOUT_CLASSIFICATION	1.7796241842681913E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999996607450475	WITHOUT_CLASSIFICATION	3.392549525605692E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998785332045	WITHOUT_CLASSIFICATION	1.2146679547094016E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999997026663124	WITHOUT_CLASSIFICATION	2.973336875856699E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999706266904	WITHOUT_CLASSIFICATION	2.9373309593273103E-8	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999078276796559	WITHOUT_CLASSIFICATION	9.217232034406651E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998283604169995	WITHOUT_CLASSIFICATION	1.7163958300046517E-4	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999880025965	WITHOUT_CLASSIFICATION	1.1997403572040034E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999481475702193	WITHOUT_CLASSIFICATION	5.1852429780743584E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999987595760461	WITHOUT_CLASSIFICATION	1.2404239539167895E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9974825485393682	WITHOUT_CLASSIFICATION	0.002517451460631865	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9974825485393682	WITHOUT_CLASSIFICATION	0.002517451460631865	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999939956995291	WITHOUT_CLASSIFICATION	6.0043004709745415E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999997743299781	WITHOUT_CLASSIFICATION	2.2567002186655063E-7	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999931754938911	WITHOUT_CLASSIFICATION	6.824506108898859E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998297595319	WITHOUT_CLASSIFICATION	1.7024046804621798E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997292513799851	WITHOUT_CLASSIFICATION	2.7074862001481967E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998622225296	WITHOUT_CLASSIFICATION	1.3777747046832247E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999263594358	WITHOUT_CLASSIFICATION	7.364056426398809E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999263594358	WITHOUT_CLASSIFICATION	7.364056426398809E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999917750184428	WITHOUT_CLASSIFICATION	8.224981557077604E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999990012165981	WITHOUT_CLASSIFICATION	9.987834018345416E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999994619358519	WITHOUT_CLASSIFICATION	5.380641481900557E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999984444499	WITHOUT_CLASSIFICATION	1.5555500471284542E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999974363187512	WITHOUT_CLASSIFICATION	2.5636812488325134E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999649432921065	WITHOUT_CLASSIFICATION	3.5056707893532534E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9994806886673848	WITHOUT_CLASSIFICATION	5.193113326151814E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999826932970912	WITHOUT_CLASSIFICATION	1.7306702908774866E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997600025459	WITHOUT_CLASSIFICATION	2.3999745407105427E-7	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998773254402251	WITHOUT_CLASSIFICATION	1.2267455977487448E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9859565265402368	WITHOUT_CLASSIFICATION	0.014043473459763157	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999946517010592	WITHOUT_CLASSIFICATION	5.348298940871325E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999995665680153	WITHOUT_CLASSIFICATION	4.3343198473997696E-7	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999727682951	WITHOUT_CLASSIFICATION	2.7231704866178063E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998700376455	WITHOUT_CLASSIFICATION	1.2996235444822336E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999884866387	WITHOUT_CLASSIFICATION	1.1513361213382227E-8	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999999634909	WITHOUT_CLASSIFICATION	3.6509096563224246E-10	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.999995989326922	WITHOUT_CLASSIFICATION	4.010673077923999E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999989413774556	WITHOUT_CLASSIFICATION	1.0586225443817626E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997932668746786	WITHOUT_CLASSIFICATION	2.0673312532142068E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999633162902	WITHOUT_CLASSIFICATION	3.668370986750621E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998923725177	WITHOUT_CLASSIFICATION	1.0762748221029441E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999861483583213	WITHOUT_CLASSIFICATION	1.3851641678750078E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.99999851690128	WITHOUT_CLASSIFICATION	1.4830987198968528E-6	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999662225045	WITHOUT_CLASSIFICATION	3.377749539656868E-8	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997688647956171	WITHOUT_CLASSIFICATION	2.311352043827796E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9987678679567958	WITHOUT_CLASSIFICATION	0.0012321320432041685	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999790478333103	WITHOUT_CLASSIFICATION	2.095216668975004E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9990146107409613	WITHOUT_CLASSIFICATION	9.85389259038684E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999140487086	WITHOUT_CLASSIFICATION	8.595129140274653E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999727354518685	WITHOUT_CLASSIFICATION	2.7264548131494663E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999999224519781	WITHOUT_CLASSIFICATION	7.754802195021773E-8	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999974758432519	WITHOUT_CLASSIFICATION	2.5241567481295238E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999986618823066	WITHOUT_CLASSIFICATION	1.338117693445342E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999652892799343	WITHOUT_CLASSIFICATION	3.47107200657288E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999113239615	WITHOUT_CLASSIFICATION	8.86760384380795E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999998624614835	WITHOUT_CLASSIFICATION	1.3753851649403034E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999732564653	WITHOUT_CLASSIFICATION	2.6743534735067356E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999878577507	WITHOUT_CLASSIFICATION	1.2142249288414539E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996872776303	WITHOUT_CLASSIFICATION	3.127223696363079E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999626824745	WITHOUT_CLASSIFICATION	3.7317525483698966E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999986620811542	WITHOUT_CLASSIFICATION	1.3379188458152093E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999978133175174	WITHOUT_CLASSIFICATION	2.18668248257873E-6	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999990474405661	WITHOUT_CLASSIFICATION	9.525594339112518E-7	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999700226	WITHOUT_CLASSIFICATION	2.997726474921602E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997298297609716	WITHOUT_CLASSIFICATION	2.701702390284655E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999878577507	WITHOUT_CLASSIFICATION	1.2142249288414539E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996872776303	WITHOUT_CLASSIFICATION	3.127223696363079E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999893014587123	WITHOUT_CLASSIFICATION	1.069854128766625E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999854124650527	WITHOUT_CLASSIFICATION	1.4587534947295023E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999890177507	WITHOUT_CLASSIFICATION	1.0982249340348827E-8	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998815811512813	WITHOUT_CLASSIFICATION	1.1841884871872544E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999991222520292	WITHOUT_CLASSIFICATION	8.777479707527474E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999991109893724	WITHOUT_CLASSIFICATION	8.890106274923422E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9920267477479074	WITHOUT_CLASSIFICATION	0.00797325225209257	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999997329321276	WITHOUT_CLASSIFICATION	2.6706787241961004E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999912734352271	WITHOUT_CLASSIFICATION	8.72656477299131E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9592534143650111	WITHOUT_CLASSIFICATION	0.04074658563498889	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999999981582	WITHOUT_CLASSIFICATION	1.8418102077688515E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9592534143650111	WITHOUT_CLASSIFICATION	0.04074658563498889	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999995695212716	WITHOUT_CLASSIFICATION	4.304787283781808E-7	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999977132371488	WITHOUT_CLASSIFICATION	2.2867628511638266E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999996008945276	WITHOUT_CLASSIFICATION	3.991054724027483E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999601331493	WITHOUT_CLASSIFICATION	3.9866850705954096E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999981433835673	WITHOUT_CLASSIFICATION	1.8566164327579454E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999858207947557	WITHOUT_CLASSIFICATION	1.4179205244308492E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999858207947557	WITHOUT_CLASSIFICATION	1.4179205244308492E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999994689415306	WITHOUT_CLASSIFICATION	5.310584695012641E-7	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999988251227845	WITHOUT_CLASSIFICATION	1.1748772154187297E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999974776580165	WITHOUT_CLASSIFICATION	2.5223419835584657E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999811278129346	WITHOUT_CLASSIFICATION	1.8872187065437588E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999997832326898	WITHOUT_CLASSIFICATION	2.1676731012735785E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9997524901206944	WITHOUT_CLASSIFICATION	2.47509879305601E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999957342238708	WITHOUT_CLASSIFICATION	4.265776129261045E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999700271659	WITHOUT_CLASSIFICATION	2.9972834195314415E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999998143618428	WITHOUT_CLASSIFICATION	1.856381572234366E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999979139416079	WITHOUT_CLASSIFICATION	2.086058392186827E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999997710119269	WITHOUT_CLASSIFICATION	2.2898807302542556E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999831562873002	WITHOUT_CLASSIFICATION	1.684371269988448E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999679602843791	WITHOUT_CLASSIFICATION	3.203971562093073E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999404307945	WITHOUT_CLASSIFICATION	5.9569205495163984E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.99994847022924	WITHOUT_CLASSIFICATION	5.1529770759921186E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999960881643043	WITHOUT_CLASSIFICATION	3.911835695689747E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999996144166951	WITHOUT_CLASSIFICATION	3.855833048931436E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999966954402778	WITHOUT_CLASSIFICATION	3.304559722200519E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999557528268	WITHOUT_CLASSIFICATION	4.4247173200324244E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.999994330911079	WITHOUT_CLASSIFICATION	5.669088920993235E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999317872997926	WITHOUT_CLASSIFICATION	6.821270020744178E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999954499937036	WITHOUT_CLASSIFICATION	4.550006296449753E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999305196260104	WITHOUT_CLASSIFICATION	6.948037398959941E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999380593323811	WITHOUT_CLASSIFICATION	6.194066761892184E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999750222292716	WITHOUT_CLASSIFICATION	2.4977770728387336E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999988261535196	WITHOUT_CLASSIFICATION	1.1738464803621048E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999993221446231	WITHOUT_CLASSIFICATION	6.778553768695643E-7	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9978808406439001	WITHOUT_CLASSIFICATION	0.0021191593560998872	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997586205013194	WITHOUT_CLASSIFICATION	2.4137949868056297E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9974216895559458	WITHOUT_CLASSIFICATION	0.002578310444054219	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9985873801678613	WITHOUT_CLASSIFICATION	0.001412619832138711	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999577774073302	WITHOUT_CLASSIFICATION	4.2222592669866956E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999957342238708	WITHOUT_CLASSIFICATION	4.265776129261045E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999991625078242	WITHOUT_CLASSIFICATION	8.374921757154151E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9997586155378497	WITHOUT_CLASSIFICATION	2.4138446215018211E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986043690474153	WITHOUT_CLASSIFICATION	0.0013956309525847417	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999996351157034	WITHOUT_CLASSIFICATION	3.648842965379423E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999140444481035	WITHOUT_CLASSIFICATION	8.595555189646874E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999971356774457	WITHOUT_CLASSIFICATION	2.864322554367804E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999811278129346	WITHOUT_CLASSIFICATION	1.8872187065437588E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999811278129346	WITHOUT_CLASSIFICATION	1.8872187065437588E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999535654514508	WITHOUT_CLASSIFICATION	4.643454854916366E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999892201706633	WITHOUT_CLASSIFICATION	1.0779829336689573E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999946324470058	WITHOUT_CLASSIFICATION	5.367552994191659E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999817837539733	WITHOUT_CLASSIFICATION	1.821624602671139E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9963944433609438	WITHOUT_CLASSIFICATION	0.0036055566390562487	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998729294333	WITHOUT_CLASSIFICATION	1.270705667407991E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999998895019607	WITHOUT_CLASSIFICATION	1.1049803928878258E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999795586472	WITHOUT_CLASSIFICATION	2.0441352852729833E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999915989939765	WITHOUT_CLASSIFICATION	8.401006023565727E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995742895	WITHOUT_CLASSIFICATION	4.2571050205059696E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999882046246722	WITHOUT_CLASSIFICATION	1.17953753277932E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997972409597551	WITHOUT_CLASSIFICATION	2.0275904024487498E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997856011815	WITHOUT_CLASSIFICATION	2.1439881839860885E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995742895	WITHOUT_CLASSIFICATION	4.2571050205059696E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996955749928	WITHOUT_CLASSIFICATION	3.044250071902527E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999001314699845	WITHOUT_CLASSIFICATION	9.986853001551776E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999985367982388	WITHOUT_CLASSIFICATION	1.463201761133908E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8735497429903197	WITHOUT_CLASSIFICATION	0.1264502570096802	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997972409597551	WITHOUT_CLASSIFICATION	2.0275904024487498E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999912418333	WITHOUT_CLASSIFICATION	8.758166750638674E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999999765418	WITHOUT_CLASSIFICATION	2.3458203945014355E-10	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999994006343	WITHOUT_CLASSIFICATION	5.993656389814929E-10	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999999203	WITHOUT_CLASSIFICATION	7.975478664538043E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999396544774234	WITHOUT_CLASSIFICATION	6.034552257650192E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999750207755	WITHOUT_CLASSIFICATION	2.4979224534859547E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999987410636	WITHOUT_CLASSIFICATION	1.2589363883828028E-9	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999994753169866	WITHOUT_CLASSIFICATION	5.24683013349196E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999871121980267	WITHOUT_CLASSIFICATION	1.2887801973304362E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999907354165736	WITHOUT_CLASSIFICATION	9.264583426410502E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999999992741463	WITHOUT_CLASSIFICATION	7.2585369934893395E-9	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999964392821518	WITHOUT_CLASSIFICATION	3.5607178482267922E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999999995742895	WITHOUT_CLASSIFICATION	4.2571050205059696E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999912418333	WITHOUT_CLASSIFICATION	8.758166750638674E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999994006343	WITHOUT_CLASSIFICATION	5.993656389814929E-10	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999994870322971	WITHOUT_CLASSIFICATION	5.129677029015125E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999993397500357	WITHOUT_CLASSIFICATION	6.602499643376878E-7	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999887573358	WITHOUT_CLASSIFICATION	1.1242664329851096E-8	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997972409597551	WITHOUT_CLASSIFICATION	2.0275904024487498E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999628943530554	WITHOUT_CLASSIFICATION	3.710564694451793E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999999694869004	WITHOUT_CLASSIFICATION	3.051309959778946E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999978861064799	WITHOUT_CLASSIFICATION	2.1138935200970162E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999959657001206	WITHOUT_CLASSIFICATION	4.034299879309449E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999994753169866	WITHOUT_CLASSIFICATION	5.24683013349196E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996955749928	WITHOUT_CLASSIFICATION	3.044250071902527E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999992901410912	WITHOUT_CLASSIFICATION	7.098589087349914E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999952066690269	WITHOUT_CLASSIFICATION	4.793330973118547E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999988011112251	WITHOUT_CLASSIFICATION	1.1988887749359242E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999536125083308	WITHOUT_CLASSIFICATION	4.6387491669081515E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.6563580950027011	WITHOUT_CLASSIFICATION	0.34364190499729885	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9858681182475406	WITHOUT_CLASSIFICATION	0.014131881752459524	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.999934169884845	WITHOUT_CLASSIFICATION	6.583011515507215E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999601331493	WITHOUT_CLASSIFICATION	3.9866850705954096E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998726354384	WITHOUT_CLASSIFICATION	1.2736456151000502E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999983475168837	WITHOUT_CLASSIFICATION	1.6524831162988324E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999828998835	WITHOUT_CLASSIFICATION	1.7100116602940146E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999898605475	WITHOUT_CLASSIFICATION	1.0139452579841449E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999899867287	WITHOUT_CLASSIFICATION	1.0013271374465881E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999944797181	WITHOUT_CLASSIFICATION	5.520281916924836E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999998669411174	WITHOUT_CLASSIFICATION	1.3305888258826477E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999994465692364	WITHOUT_CLASSIFICATION	5.534307635044157E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999959657001206	WITHOUT_CLASSIFICATION	4.034299879309449E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999909462559424	WITHOUT_CLASSIFICATION	9.053744057600058E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999996641468838	WITHOUT_CLASSIFICATION	3.3585311621128973E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999942718686364	WITHOUT_CLASSIFICATION	5.728131363478953E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999994931631195	WITHOUT_CLASSIFICATION	5.068368804113807E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999933303285745	WITHOUT_CLASSIFICATION	6.669671425522687E-6	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999997144948504	WITHOUT_CLASSIFICATION	2.855051496618113E-7	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999994737846101	WITHOUT_CLASSIFICATION	5.262153899124985E-7	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998449226375611	WITHOUT_CLASSIFICATION	1.55077362438955E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999984113451423	WITHOUT_CLASSIFICATION	1.588654857677542E-6	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999984699501827	WITHOUT_CLASSIFICATION	1.5300498173107952E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999986399053162	WITHOUT_CLASSIFICATION	1.3600946838481118E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999968732994	WITHOUT_CLASSIFICATION	3.126700590768836E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999394083198634	WITHOUT_CLASSIFICATION	6.059168013664402E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999951975727142	WITHOUT_CLASSIFICATION	4.8024272858603345E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998977548105	WITHOUT_CLASSIFICATION	1.0224518951717E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999639487532	WITHOUT_CLASSIFICATION	3.6051246752967724E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999998506285488	WITHOUT_CLASSIFICATION	1.4937145108468187E-7	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999417380107	WITHOUT_CLASSIFICATION	5.8261989280368305E-8	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999996949674878	WITHOUT_CLASSIFICATION	3.0503251233900866E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999868271052235	WITHOUT_CLASSIFICATION	1.3172894776518768E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999996058367818	WITHOUT_CLASSIFICATION	3.9416321821129497E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999994344588766	WITHOUT_CLASSIFICATION	5.655411233285699E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998875522964	WITHOUT_CLASSIFICATION	1.1244770361705659E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999975658573	WITHOUT_CLASSIFICATION	2.4341426934554816E-8	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999794147472	WITHOUT_CLASSIFICATION	2.0585252747879287E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7839519690590027	WITHOUT_CLASSIFICATION	0.21604803094099734	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9975428812270978	WITHOUT_CLASSIFICATION	0.002457118772902235	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999606703663187	WITHOUT_CLASSIFICATION	3.932963368133281E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999955650407212	WITHOUT_CLASSIFICATION	4.434959278797313E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9631556875867494	IMPLEMENTATION	0.03684431241325062	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999753128351	WITHOUT_CLASSIFICATION	2.4687164904155166E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999522515871562	WITHOUT_CLASSIFICATION	4.774841284389775E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999988845148474	WITHOUT_CLASSIFICATION	1.1154851525875659E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996077233967949	WITHOUT_CLASSIFICATION	3.922766032050546E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999919596932	WITHOUT_CLASSIFICATION	8.040306731639405E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999987078833327	WITHOUT_CLASSIFICATION	1.292116667385144E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999905053231	WITHOUT_CLASSIFICATION	9.494677057140599E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999967542793113	WITHOUT_CLASSIFICATION	3.2457206886264878E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999987078833327	WITHOUT_CLASSIFICATION	1.292116667385144E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999919596932	WITHOUT_CLASSIFICATION	8.040306731639405E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999905053231	WITHOUT_CLASSIFICATION	9.494677057140599E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999977219888916	WITHOUT_CLASSIFICATION	2.2780111084075386E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999598128078	WITHOUT_CLASSIFICATION	4.0187192237075274E-8	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999589810745346	WITHOUT_CLASSIFICATION	4.101892546546414E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999973093731729	WITHOUT_CLASSIFICATION	2.690626827115463E-6	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999993412235	WITHOUT_CLASSIFICATION	6.587764959547225E-10	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9252823835618519	IMPLEMENTATION	0.07471761643814809	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998625513093368	WITHOUT_CLASSIFICATION	1.374486906631724E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999136862534809	WITHOUT_CLASSIFICATION	8.631374651920753E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999974796932554	WITHOUT_CLASSIFICATION	2.5203067446462715E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999984110171181	WITHOUT_CLASSIFICATION	1.5889828818816361E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999984827800612	WITHOUT_CLASSIFICATION	1.517219938879664E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999977191249831	WITHOUT_CLASSIFICATION	2.2808750168505567E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998856434722411	WITHOUT_CLASSIFICATION	1.1435652775902884E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999821869665272	WITHOUT_CLASSIFICATION	1.7813033472788408E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9994239034122123	WITHOUT_CLASSIFICATION	5.760965877876752E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999608896123	WITHOUT_CLASSIFICATION	3.911038773462642E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999939330252	WITHOUT_CLASSIFICATION	6.06697483084677E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999760977367	WITHOUT_CLASSIFICATION	2.3902263240655092E-8	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999990210455229	WITHOUT_CLASSIFICATION	9.789544770708168E-7	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997803699243	WITHOUT_CLASSIFICATION	2.196300756256315E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9955946046586098	WITHOUT_CLASSIFICATION	0.004405395341390215	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999911250479	WITHOUT_CLASSIFICATION	8.874952134638615E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999994759166226	WITHOUT_CLASSIFICATION	5.240833772826169E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999893928512821	WITHOUT_CLASSIFICATION	1.0607148717933261E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998460634659	WITHOUT_CLASSIFICATION	1.5393653406819887E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998460634659	WITHOUT_CLASSIFICATION	1.5393653406819887E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999961261784	WITHOUT_CLASSIFICATION	3.873821658436927E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999961261784	WITHOUT_CLASSIFICATION	3.873821658436927E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.995223726307243	WITHOUT_CLASSIFICATION	0.004776273692757051	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999939330252	WITHOUT_CLASSIFICATION	6.06697483084677E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999990061031085	WITHOUT_CLASSIFICATION	9.938968914512538E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999953376365363	WITHOUT_CLASSIFICATION	4.66236346375753E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998484186293	WITHOUT_CLASSIFICATION	1.515813706077563E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998484186293	WITHOUT_CLASSIFICATION	1.515813706077563E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999720144517958	WITHOUT_CLASSIFICATION	2.7985548204218776E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999996010777279	WITHOUT_CLASSIFICATION	3.9892227211286E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999780610186	WITHOUT_CLASSIFICATION	2.1938981378061148E-8	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.99996809532152	WITHOUT_CLASSIFICATION	3.190467848002462E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9996368948348271	WITHOUT_CLASSIFICATION	3.631051651729015E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999991281976554	WITHOUT_CLASSIFICATION	8.71802344766278E-7	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999962271732383	WITHOUT_CLASSIFICATION	3.7728267616425457E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999691319836584	WITHOUT_CLASSIFICATION	3.086801634154418E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9998445697594108	WITHOUT_CLASSIFICATION	1.554302405890796E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999980095823593	WITHOUT_CLASSIFICATION	1.9904176406950287E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999989670631169	WITHOUT_CLASSIFICATION	1.0329368832252662E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998802932556191	WITHOUT_CLASSIFICATION	1.1970674438097272E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999709798302	WITHOUT_CLASSIFICATION	2.902016979620495E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999992867152733	WITHOUT_CLASSIFICATION	7.132847267177101E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999945538646471	WITHOUT_CLASSIFICATION	5.446135352904432E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999690722978333	WITHOUT_CLASSIFICATION	3.0927702166666835E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998386449428	WITHOUT_CLASSIFICATION	1.613550572045817E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998267756767398	WITHOUT_CLASSIFICATION	1.7322432326010573E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9994315131666035	WITHOUT_CLASSIFICATION	5.684868333964622E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998965939817	WITHOUT_CLASSIFICATION	1.0340601830671142E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9996916284967334	WITHOUT_CLASSIFICATION	3.083715032665198E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998503876818	WITHOUT_CLASSIFICATION	1.496123180877682E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999981572449304	WITHOUT_CLASSIFICATION	1.8427550696478338E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999992541552793	WITHOUT_CLASSIFICATION	7.458447207360657E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999873060739378	WITHOUT_CLASSIFICATION	1.2693926062216066E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999975068316559	WITHOUT_CLASSIFICATION	2.493168344073915E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999968732994	WITHOUT_CLASSIFICATION	3.126700590768836E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999980341640315	WITHOUT_CLASSIFICATION	1.96583596844689E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999994351634226	WITHOUT_CLASSIFICATION	5.648365774119217E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991144352129	WITHOUT_CLASSIFICATION	8.855647870423871E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999688582283124	WITHOUT_CLASSIFICATION	3.114177168761191E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999919647890543	WITHOUT_CLASSIFICATION	8.03521094561297E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999919647890543	WITHOUT_CLASSIFICATION	8.03521094561297E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995370186628	WITHOUT_CLASSIFICATION	4.629813371318719E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999994966932653	WITHOUT_CLASSIFICATION	5.033067347700329E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999346855865	WITHOUT_CLASSIFICATION	6.531441348174639E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999346855865	WITHOUT_CLASSIFICATION	6.531441348174639E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997813635072704	WITHOUT_CLASSIFICATION	2.18636492729672E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999946706904437	WITHOUT_CLASSIFICATION	5.329309556304836E-6	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999983849028062	WITHOUT_CLASSIFICATION	1.615097193745718E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994991760118	WITHOUT_CLASSIFICATION	5.008239881582304E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999825022597002	WITHOUT_CLASSIFICATION	1.7497740299773545E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999999563601587	WITHOUT_CLASSIFICATION	4.3639841300494924E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9998146149029788	WITHOUT_CLASSIFICATION	1.853850970211211E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999965980241607	WITHOUT_CLASSIFICATION	3.4019758392872203E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999955485297	WITHOUT_CLASSIFICATION	4.4514703015591084E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999955485297	WITHOUT_CLASSIFICATION	4.4514703015591084E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999735885204563	WITHOUT_CLASSIFICATION	2.641147954378372E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998773474358	WITHOUT_CLASSIFICATION	1.226525641016851E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998773474358	WITHOUT_CLASSIFICATION	1.226525641016851E-7	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999760452122	WITHOUT_CLASSIFICATION	2.395478775053691E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999144236	WITHOUT_CLASSIFICATION	8.557633504868622E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991504851326835	WITHOUT_CLASSIFICATION	8.495148673166113E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999997711605946	WITHOUT_CLASSIFICATION	2.288394054056392E-6	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999985591101794	WITHOUT_CLASSIFICATION	1.440889820472396E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999918369478	WITHOUT_CLASSIFICATION	8.163052206845616E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998865450784264	WITHOUT_CLASSIFICATION	1.134549215735747E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998045575996851	WITHOUT_CLASSIFICATION	1.9544240031496083E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999988452501245	WITHOUT_CLASSIFICATION	1.1547498755771368E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999273075887418	WITHOUT_CLASSIFICATION	7.269241125819353E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999989894806637	WITHOUT_CLASSIFICATION	1.0105193363845482E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999915049917962	WITHOUT_CLASSIFICATION	8.495008203865256E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999742339130197	WITHOUT_CLASSIFICATION	2.57660869803266E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999742339130197	WITHOUT_CLASSIFICATION	2.57660869803266E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999742339130197	WITHOUT_CLASSIFICATION	2.57660869803266E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999742339130197	WITHOUT_CLASSIFICATION	2.57660869803266E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999988094697805	WITHOUT_CLASSIFICATION	1.1905302195391624E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999961309583081	WITHOUT_CLASSIFICATION	3.869041691881719E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999859701531352	WITHOUT_CLASSIFICATION	1.4029846864775011E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999906345175829	WITHOUT_CLASSIFICATION	9.36548241715494E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999895289703509	WITHOUT_CLASSIFICATION	1.047102964910869E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999880993262832	WITHOUT_CLASSIFICATION	1.1900673716848348E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999994876949223	WITHOUT_CLASSIFICATION	5.123050777847172E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999089729212669	WITHOUT_CLASSIFICATION	9.102707873312775E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999901086544295	WITHOUT_CLASSIFICATION	9.891345570541779E-6	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997200259134	WITHOUT_CLASSIFICATION	2.7997408649861837E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999932372412694	WITHOUT_CLASSIFICATION	6.762758730631325E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999935683489177	WITHOUT_CLASSIFICATION	6.43165108217389E-6	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999998892283538	WITHOUT_CLASSIFICATION	1.1077164619730428E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999998606076981	WITHOUT_CLASSIFICATION	1.3939230190183667E-6	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999992725693688	WITHOUT_CLASSIFICATION	7.274306312034153E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999935683489177	WITHOUT_CLASSIFICATION	6.43165108217389E-6	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9993421660697488	WITHOUT_CLASSIFICATION	6.578339302511935E-4	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999990095902701	WITHOUT_CLASSIFICATION	9.90409729956839E-7	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999997029734669	WITHOUT_CLASSIFICATION	2.9702653317743337E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999797434059	WITHOUT_CLASSIFICATION	2.025659404581662E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999835143153	WITHOUT_CLASSIFICATION	1.6485684640450583E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999999654572617	WITHOUT_CLASSIFICATION	3.454273830784879E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999916318625	WITHOUT_CLASSIFICATION	8.368137495589466E-9	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9996134134604692	WITHOUT_CLASSIFICATION	3.865865395309245E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998957917095	WITHOUT_CLASSIFICATION	1.0420829049397155E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999447564567	WITHOUT_CLASSIFICATION	5.5243543372319187E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999973829221	WITHOUT_CLASSIFICATION	2.61707790076718E-8	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998961538733	WITHOUT_CLASSIFICATION	1.0384612671912076E-7	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999957622718816	WITHOUT_CLASSIFICATION	4.2377281185039455E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996819847791635	WITHOUT_CLASSIFICATION	3.180152208365132E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999884326668733	WITHOUT_CLASSIFICATION	1.1567333126767463E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999998421652435	WITHOUT_CLASSIFICATION	1.578347564445397E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999903131221	WITHOUT_CLASSIFICATION	9.686877953444735E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995800373003	WITHOUT_CLASSIFICATION	4.199626997588096E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999965807327518	WITHOUT_CLASSIFICATION	3.419267248359762E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995800373003	WITHOUT_CLASSIFICATION	4.199626997588096E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999800450164	WITHOUT_CLASSIFICATION	1.9954983505053414E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999995985568	WITHOUT_CLASSIFICATION	4.0144322431863536E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999973741725295	WITHOUT_CLASSIFICATION	2.6258274704915678E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999227444885	WITHOUT_CLASSIFICATION	7.72555115131874E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999903131221	WITHOUT_CLASSIFICATION	9.686877953444735E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999965807327518	WITHOUT_CLASSIFICATION	3.419267248359762E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999800450164	WITHOUT_CLASSIFICATION	1.9954983505053414E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991522076506	WITHOUT_CLASSIFICATION	8.47792349452509E-7	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999498927833997	WITHOUT_CLASSIFICATION	5.010721660018018E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9992055991909696	WITHOUT_CLASSIFICATION	7.944008090304148E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9996772011130193	WITHOUT_CLASSIFICATION	3.2279888698073545E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999915416392064	WITHOUT_CLASSIFICATION	8.458360793528802E-6	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999986492897239	WITHOUT_CLASSIFICATION	1.3507102761430684E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998386449428	WITHOUT_CLASSIFICATION	1.613550572045817E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999995985568	WITHOUT_CLASSIFICATION	4.0144322431863536E-10	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999994468846	WITHOUT_CLASSIFICATION	5.531155008367577E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999956739166379	WITHOUT_CLASSIFICATION	4.326083362152267E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999966956735	WITHOUT_CLASSIFICATION	3.3043265958724168E-9	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998386449428	WITHOUT_CLASSIFICATION	1.613550572045817E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999870080438079	WITHOUT_CLASSIFICATION	1.2991956192108975E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998386449428	WITHOUT_CLASSIFICATION	1.613550572045817E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999993174038526	WITHOUT_CLASSIFICATION	6.825961474245736E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993542855952	WITHOUT_CLASSIFICATION	6.457144047153002E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999848828333422	WITHOUT_CLASSIFICATION	1.5117166657793265E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999234112030159	WITHOUT_CLASSIFICATION	7.658879698424213E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995668598364	WITHOUT_CLASSIFICATION	4.3314016351382224E-7	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999966265417922	WITHOUT_CLASSIFICATION	3.37345820772571E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999996848707841	WITHOUT_CLASSIFICATION	3.1512921589732876E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999934785901566	WITHOUT_CLASSIFICATION	6.521409843320654E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999994063912823	WITHOUT_CLASSIFICATION	5.936087176902507E-7	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999984873014828	WITHOUT_CLASSIFICATION	1.512698517131957E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999778395986055	WITHOUT_CLASSIFICATION	2.2160401394542182E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999897944528	WITHOUT_CLASSIFICATION	1.0205547212911811E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9991504851326835	WITHOUT_CLASSIFICATION	8.495148673166113E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999989744734827	WITHOUT_CLASSIFICATION	1.0255265172769858E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994481241017724	WITHOUT_CLASSIFICATION	5.518758982275998E-4	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999999701019707	WITHOUT_CLASSIFICATION	2.989802929769654E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999962400038294	WITHOUT_CLASSIFICATION	3.7599961705481488E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999998986537	WITHOUT_CLASSIFICATION	1.0134616495476545E-10	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999993625668872	WITHOUT_CLASSIFICATION	6.374331128196127E-7	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999754080552614	WITHOUT_CLASSIFICATION	2.4591944738554232E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999858847164931	WITHOUT_CLASSIFICATION	1.4115283506802523E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999587919075	WITHOUT_CLASSIFICATION	4.120809246944546E-8	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999999999474964	WITHOUT_CLASSIFICATION	5.25035946148714E-10	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992131290027341	WITHOUT_CLASSIFICATION	7.868709972659136E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998733895058589	WITHOUT_CLASSIFICATION	1.2661049414108394E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999616663538334	WITHOUT_CLASSIFICATION	3.833364616651124E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996634921783	WITHOUT_CLASSIFICATION	3.3650782164926756E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999956452487943	WITHOUT_CLASSIFICATION	4.354751205738469E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999880237659341	WITHOUT_CLASSIFICATION	1.1976234065819144E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999717431164	WITHOUT_CLASSIFICATION	2.8256883600897117E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9987230997405462	WITHOUT_CLASSIFICATION	0.0012769002594537982	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999964281169716	WITHOUT_CLASSIFICATION	3.571883028256555E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999938509001363	WITHOUT_CLASSIFICATION	6.149099863634712E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998827831117207	WITHOUT_CLASSIFICATION	1.1721688827930102E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9998949187835852	WITHOUT_CLASSIFICATION	1.0508121641475936E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997041292786	WITHOUT_CLASSIFICATION	2.9587072139099214E-7	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999997176655196	WITHOUT_CLASSIFICATION	2.823344803132393E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999748440567454	WITHOUT_CLASSIFICATION	2.5155943254559122E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999380619144564	WITHOUT_CLASSIFICATION	6.193808554351726E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999922928062	WITHOUT_CLASSIFICATION	7.707193771680662E-9	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9959632160552738	WITHOUT_CLASSIFICATION	0.004036783944726186	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999015242125323	WITHOUT_CLASSIFICATION	9.847578746763438E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999407412994032	WITHOUT_CLASSIFICATION	5.925870059672354E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999588309838748	WITHOUT_CLASSIFICATION	4.116901612528759E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999588309838748	WITHOUT_CLASSIFICATION	4.116901612528759E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9997848041205099	WITHOUT_CLASSIFICATION	2.1519587949021688E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999934785901566	WITHOUT_CLASSIFICATION	6.521409843320654E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999859983019799	WITHOUT_CLASSIFICATION	1.4001698020124969E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999874599369	WITHOUT_CLASSIFICATION	1.2540063008662254E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999055740744	WITHOUT_CLASSIFICATION	9.442592562151316E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999115721934397	WITHOUT_CLASSIFICATION	8.842780656023135E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999755434145338	WITHOUT_CLASSIFICATION	2.4456585466186654E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999859216595111	WITHOUT_CLASSIFICATION	1.4078340488950741E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999756467832	WITHOUT_CLASSIFICATION	2.435321678039192E-8	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999971367479	WITHOUT_CLASSIFICATION	2.863251988848849E-9	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999935361572909	WITHOUT_CLASSIFICATION	6.4638427091086E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999998639200547	WITHOUT_CLASSIFICATION	1.360799453756726E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999994863681261	WITHOUT_CLASSIFICATION	5.136318739515699E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999998861893948	WITHOUT_CLASSIFICATION	1.1381060514490336E-7	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999703133163	WITHOUT_CLASSIFICATION	2.9686683577895863E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999986846969408	WITHOUT_CLASSIFICATION	1.3153030593307847E-6	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999764013111	WITHOUT_CLASSIFICATION	2.3598688882502212E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999968277953	WITHOUT_CLASSIFICATION	3.1722046652175223E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999981230695	WITHOUT_CLASSIFICATION	1.8769304999759015E-9	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999644831018343	WITHOUT_CLASSIFICATION	3.551689816573075E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999995148794879	WITHOUT_CLASSIFICATION	4.85120512111112E-7	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9922534476521562	WITHOUT_CLASSIFICATION	0.007746552347843838	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999350696455455	WITHOUT_CLASSIFICATION	6.493035445450041E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997193881943	WITHOUT_CLASSIFICATION	2.806118056251573E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9959632160552738	WITHOUT_CLASSIFICATION	0.004036783944726186	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999998853059511	WITHOUT_CLASSIFICATION	1.1469404895021991E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999994175443153	WITHOUT_CLASSIFICATION	5.82455684592546E-7	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999986507077	WITHOUT_CLASSIFICATION	1.3492923339639356E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999990731095822	WITHOUT_CLASSIFICATION	9.268904178231421E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998139756580376	WITHOUT_CLASSIFICATION	1.8602434196231124E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998952158910436	WITHOUT_CLASSIFICATION	1.0478410895643581E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999978215784447	WITHOUT_CLASSIFICATION	2.178421555193384E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999031315117	WITHOUT_CLASSIFICATION	9.686848829323664E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998071076092	WITHOUT_CLASSIFICATION	1.9289239086835516E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999997706362409	WITHOUT_CLASSIFICATION	2.2936375920723803E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999997434834623	WITHOUT_CLASSIFICATION	2.5651653768521266E-7	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999922732992	WITHOUT_CLASSIFICATION	7.726700808729834E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999997386725175	WITHOUT_CLASSIFICATION	2.6132748256198677E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999995728753394	WITHOUT_CLASSIFICATION	4.271246607044575E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998573972869607	WITHOUT_CLASSIFICATION	1.4260271303940603E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998573972869607	WITHOUT_CLASSIFICATION	1.4260271303940603E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999996583100178	WITHOUT_CLASSIFICATION	3.4168998219874545E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999715866310172	WITHOUT_CLASSIFICATION	2.8413368982823154E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999357347127	WITHOUT_CLASSIFICATION	6.42652873084497E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999357347127	WITHOUT_CLASSIFICATION	6.42652873084497E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999840424022	WITHOUT_CLASSIFICATION	1.595759778037866E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999845997290875	WITHOUT_CLASSIFICATION	1.5400270912498216E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9854057997402034	WITHOUT_CLASSIFICATION	0.014594200259796625	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999999993774942	WITHOUT_CLASSIFICATION	6.2250579964640856E-9	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999658386427	WITHOUT_CLASSIFICATION	3.416135723219684E-8	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997447595311	WITHOUT_CLASSIFICATION	2.5524046887979036E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999985566882	WITHOUT_CLASSIFICATION	1.4433118178679154E-9	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999985566882	WITHOUT_CLASSIFICATION	1.4433118178679154E-9	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993572782525	WITHOUT_CLASSIFICATION	6.427217475294342E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999985903604514	WITHOUT_CLASSIFICATION	1.4096395486312737E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999983464744264	WITHOUT_CLASSIFICATION	1.6535255735591377E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998465460076	WITHOUT_CLASSIFICATION	1.5345399239275887E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999998465460076	WITHOUT_CLASSIFICATION	1.5345399239275887E-7	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999656496139	WITHOUT_CLASSIFICATION	3.4350386130435924E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999996904590745	WITHOUT_CLASSIFICATION	3.0954092550235194E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999586940042	WITHOUT_CLASSIFICATION	4.130599592430142E-8	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999993735653758	WITHOUT_CLASSIFICATION	6.264346241455353E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999850401206	WITHOUT_CLASSIFICATION	1.4959879481688927E-8	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999305482818	WITHOUT_CLASSIFICATION	6.945171817335264E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999998072547792	WITHOUT_CLASSIFICATION	1.9274522085394042E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.999999292954752	WITHOUT_CLASSIFICATION	7.070452480079852E-7	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999992751166	WITHOUT_CLASSIFICATION	7.248833917455278E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999863760596	WITHOUT_CLASSIFICATION	1.3623940506378315E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999999603397152	WITHOUT_CLASSIFICATION	3.9660284802830477E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9994962806000772	WITHOUT_CLASSIFICATION	5.037193999228502E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9524880518981098	WITHOUT_CLASSIFICATION	0.04751194810189018	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999934955485994	WITHOUT_CLASSIFICATION	6.504451400616161E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999982598740064	WITHOUT_CLASSIFICATION	1.7401259936564165E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999919421759	WITHOUT_CLASSIFICATION	8.057824158251336E-9	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999826734158629	WITHOUT_CLASSIFICATION	1.7326584137148333E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999997469899893	WITHOUT_CLASSIFICATION	2.5301001075946054E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999988089635371	WITHOUT_CLASSIFICATION	1.1910364628965092E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999991038773458	WITHOUT_CLASSIFICATION	8.961226542905824E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999996958620236	WITHOUT_CLASSIFICATION	3.0413797641244113E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999907847732246	WITHOUT_CLASSIFICATION	9.21522677541857E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998736039977723	WITHOUT_CLASSIFICATION	1.263960022277666E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999982402630121	WITHOUT_CLASSIFICATION	1.7597369877927082E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999983148468674	WITHOUT_CLASSIFICATION	1.6851531325773178E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999993480551	WITHOUT_CLASSIFICATION	6.519448781155692E-10	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999999976119429	WITHOUT_CLASSIFICATION	2.3880570976141172E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999874555620044	WITHOUT_CLASSIFICATION	1.254443799561139E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999679634677	WITHOUT_CLASSIFICATION	3.2036532275102055E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999956537272069	WITHOUT_CLASSIFICATION	4.3462727931060435E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9858329702657878	WITHOUT_CLASSIFICATION	0.014167029734212326	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997563442602	WITHOUT_CLASSIFICATION	2.436557398803438E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999993648776841	WITHOUT_CLASSIFICATION	6.351223158390578E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999842947003071	WITHOUT_CLASSIFICATION	1.570529969288634E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999998616201945	WITHOUT_CLASSIFICATION	1.3837980550573933E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999691171265866	WITHOUT_CLASSIFICATION	3.08828734134076E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999132689631326	WITHOUT_CLASSIFICATION	8.673103686732654E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999988311992	WITHOUT_CLASSIFICATION	1.1688007960500492E-8	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999926708383321	WITHOUT_CLASSIFICATION	7.3291616678610006E-6	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999944135863	WITHOUT_CLASSIFICATION	5.586413599834241E-9	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999198180546	WITHOUT_CLASSIFICATION	8.018194542789166E-8	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999996326277523	WITHOUT_CLASSIFICATION	3.673722477612987E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999988960724152	WITHOUT_CLASSIFICATION	1.1039275848595875E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999968764859197	WITHOUT_CLASSIFICATION	3.1235140802316915E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999918766055128	WITHOUT_CLASSIFICATION	8.123394487196285E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997272882765	WITHOUT_CLASSIFICATION	2.7271172353240845E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999987419984223	WITHOUT_CLASSIFICATION	1.2580015776744654E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999999702585931	WITHOUT_CLASSIFICATION	2.9741406903439314E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999971113979863	WITHOUT_CLASSIFICATION	2.8886020136041934E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999287473197	WITHOUT_CLASSIFICATION	7.125268020248908E-8	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999975882472893	WITHOUT_CLASSIFICATION	2.411752710720537E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9988537833132641	WITHOUT_CLASSIFICATION	0.0011462166867358776	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9942068969268839	WITHOUT_CLASSIFICATION	0.005793103073116068	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999446896227	WITHOUT_CLASSIFICATION	5.5310377322577445E-8	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999997841488583	WITHOUT_CLASSIFICATION	2.1585114174432655E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998953677892592	WITHOUT_CLASSIFICATION	1.0463221074081533E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999993415449733	WITHOUT_CLASSIFICATION	6.584550267286952E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999998251343335	WITHOUT_CLASSIFICATION	1.748656665602784E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999901293192542	WITHOUT_CLASSIFICATION	9.870680745807442E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999998994155967	WITHOUT_CLASSIFICATION	1.0058440334572489E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988555679263	WITHOUT_CLASSIFICATION	1.1444320736608748E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988555679263	WITHOUT_CLASSIFICATION	1.1444320736608748E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999995762953	WITHOUT_CLASSIFICATION	4.237046987397674E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9997279417849777	WITHOUT_CLASSIFICATION	2.720582150222354E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999985680238501	WITHOUT_CLASSIFICATION	1.4319761498725892E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999994498935	WITHOUT_CLASSIFICATION	5.50106506599293E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999756196337	WITHOUT_CLASSIFICATION	2.4380366236264294E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999771779626616	WITHOUT_CLASSIFICATION	2.2822037338315517E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999999747361	WITHOUT_CLASSIFICATION	2.5263820709060278E-11	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999979210576255	WITHOUT_CLASSIFICATION	2.078942374388631E-6	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999829127719	WITHOUT_CLASSIFICATION	1.708722807491444E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999284347021	WITHOUT_CLASSIFICATION	7.156529792340763E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999418802604	WITHOUT_CLASSIFICATION	5.8119739667818424E-8	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999973952664348	WITHOUT_CLASSIFICATION	2.6047335650712324E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999909856724	WITHOUT_CLASSIFICATION	9.014327512825198E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999977162825672	WITHOUT_CLASSIFICATION	2.283717432902597E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999916085197821	WITHOUT_CLASSIFICATION	8.391480218003686E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999916085197821	WITHOUT_CLASSIFICATION	8.391480218003686E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999999980624	WITHOUT_CLASSIFICATION	1.9375908518283E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999635210753764	WITHOUT_CLASSIFICATION	3.6478924623537375E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998939282948	WITHOUT_CLASSIFICATION	1.0607170525559751E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999623970081	WITHOUT_CLASSIFICATION	3.760299195991227E-8	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996639560375	WITHOUT_CLASSIFICATION	3.360439625756282E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995986908234	WITHOUT_CLASSIFICATION	4.013091766120477E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.999995806677225	WITHOUT_CLASSIFICATION	4.19332277494923E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9998515978095299	WITHOUT_CLASSIFICATION	1.4840219047008063E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999648490351	WITHOUT_CLASSIFICATION	3.515096481170745E-8	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999953967388898	WITHOUT_CLASSIFICATION	4.603261110127465E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999959293255887	WITHOUT_CLASSIFICATION	4.070674411326691E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999728519426	WITHOUT_CLASSIFICATION	2.7148057360875354E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999997887882	WITHOUT_CLASSIFICATION	2.1121187123398322E-10	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999918032823	WITHOUT_CLASSIFICATION	8.1967177069215E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999993158629192	WITHOUT_CLASSIFICATION	6.841370807737501E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999756085614	WITHOUT_CLASSIFICATION	2.4391438662090447E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999988585881595	WITHOUT_CLASSIFICATION	1.1414118404969417E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999797652885	WITHOUT_CLASSIFICATION	2.0234711466571823E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999343302083	WITHOUT_CLASSIFICATION	6.566979170288251E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999675476506	WITHOUT_CLASSIFICATION	3.245234933446646E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999962186373	WITHOUT_CLASSIFICATION	3.781362648348854E-9	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998394152053	WITHOUT_CLASSIFICATION	1.6058479469215408E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999648158306	WITHOUT_CLASSIFICATION	3.5184169363046616E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.999995447478198	WITHOUT_CLASSIFICATION	4.5525218020043E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999936255596418	WITHOUT_CLASSIFICATION	6.374440358214537E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999940692884876	WITHOUT_CLASSIFICATION	5.9307115125311575E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999987773942085	WITHOUT_CLASSIFICATION	1.2226057915160526E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9956837214699122	WITHOUT_CLASSIFICATION	0.004316278530087743	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999934596225826	WITHOUT_CLASSIFICATION	6.540377417442839E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999485609117	WITHOUT_CLASSIFICATION	5.143908841265067E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999990446353298	WITHOUT_CLASSIFICATION	9.553646700894509E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999997071367577	WITHOUT_CLASSIFICATION	2.9286324236311026E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999995554848081	WITHOUT_CLASSIFICATION	4.445151919590957E-7	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999878484932933	WITHOUT_CLASSIFICATION	1.2151506706868878E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.990324826308746	WITHOUT_CLASSIFICATION	0.009675173691253987	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999268981499	WITHOUT_CLASSIFICATION	7.3101850114634E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998513619265	WITHOUT_CLASSIFICATION	1.4863807346969876E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999957458224	WITHOUT_CLASSIFICATION	4.254177491972428E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999989715419411	WITHOUT_CLASSIFICATION	1.028458058891921E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999759413841	WITHOUT_CLASSIFICATION	2.4058615902471115E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998463592785747	WITHOUT_CLASSIFICATION	1.5364072142535134E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998463592785747	WITHOUT_CLASSIFICATION	1.5364072142535134E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999691836536	WITHOUT_CLASSIFICATION	3.0816346237969315E-8	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999509937101	WITHOUT_CLASSIFICATION	4.9006289849818804E-8	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9988489198787429	WITHOUT_CLASSIFICATION	0.0011510801212571105	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999979219351883	WITHOUT_CLASSIFICATION	2.0780648116619867E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999894168434216	WITHOUT_CLASSIFICATION	1.058315657849013E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997166542854	WITHOUT_CLASSIFICATION	2.833457145840298E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999855870887095	WITHOUT_CLASSIFICATION	1.44129112904896E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999999063627997	WITHOUT_CLASSIFICATION	9.363720031366645E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999982703411944	WITHOUT_CLASSIFICATION	1.7296588057134475E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998478179618	WITHOUT_CLASSIFICATION	1.5218203817461268E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998499750493	WITHOUT_CLASSIFICATION	1.5002495070360046E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999928644251833	WITHOUT_CLASSIFICATION	7.135574816618337E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999912733811235	WITHOUT_CLASSIFICATION	8.726618876537009E-6	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998681335066	WITHOUT_CLASSIFICATION	1.318664933650966E-7	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999834623148663	WITHOUT_CLASSIFICATION	1.6537685133665233E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9996956451235789	WITHOUT_CLASSIFICATION	3.04354876421101E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999723986217	WITHOUT_CLASSIFICATION	2.7601378251634247E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999963379715	WITHOUT_CLASSIFICATION	3.6620284744204412E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9997784652086716	WITHOUT_CLASSIFICATION	2.21534791328403E-4	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997320646872	WITHOUT_CLASSIFICATION	2.6793531287996023E-7	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999608715061	WITHOUT_CLASSIFICATION	3.9128493892042034E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999839650121257	WITHOUT_CLASSIFICATION	1.6034987874309786E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999972331671567	WITHOUT_CLASSIFICATION	2.766832843418024E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999919937413622	WITHOUT_CLASSIFICATION	8.00625863782552E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999960849572314	WITHOUT_CLASSIFICATION	3.915042768625613E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999469983496504	WITHOUT_CLASSIFICATION	5.30016503495152E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999931984058	WITHOUT_CLASSIFICATION	6.8015942566697285E-9	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999997027499109	WITHOUT_CLASSIFICATION	2.972500890454951E-7	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999959813312213	WITHOUT_CLASSIFICATION	4.018668778675411E-6	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9990191379808773	WITHOUT_CLASSIFICATION	9.80862019122722E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999948761438998	WITHOUT_CLASSIFICATION	5.123856100138159E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999954579404762	WITHOUT_CLASSIFICATION	4.542059523816386E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999999492754	WITHOUT_CLASSIFICATION	5.072460626277039E-10	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999971515102	WITHOUT_CLASSIFICATION	2.8484898029344843E-9	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996910607	WITHOUT_CLASSIFICATION	3.0893932429049644E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999794175937723	WITHOUT_CLASSIFICATION	2.0582406227733144E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999739609452	WITHOUT_CLASSIFICATION	2.6039054825765667E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999853490076	WITHOUT_CLASSIFICATION	1.465099246420279E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999994337799154	WITHOUT_CLASSIFICATION	5.662200846159725E-7	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999970032248661	WITHOUT_CLASSIFICATION	2.996775133910701E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999804696975535	WITHOUT_CLASSIFICATION	1.9530302446545616E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999964928887	WITHOUT_CLASSIFICATION	3.507111372655307E-9	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999891826058	WITHOUT_CLASSIFICATION	1.0817394336367912E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999965127	WITHOUT_CLASSIFICATION	3.4874400772213236E-12	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999816476708335	WITHOUT_CLASSIFICATION	1.8352329166475073E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999999959991906	WITHOUT_CLASSIFICATION	4.000809408614649E-8	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996434473748	WITHOUT_CLASSIFICATION	3.5655262522698317E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999909856724	WITHOUT_CLASSIFICATION	9.014327512825198E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999997938338	WITHOUT_CLASSIFICATION	2.061662026573294E-10	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999995278718	WITHOUT_CLASSIFICATION	4.721281478216657E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999940260720724	WITHOUT_CLASSIFICATION	5.973927927597932E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9937819562711306	WITHOUT_CLASSIFICATION	0.006218043728869365	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999926282745	WITHOUT_CLASSIFICATION	7.371725473189488E-9	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999694291853977	WITHOUT_CLASSIFICATION	3.0570814602362954E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9786556349353562	WITHOUT_CLASSIFICATION	0.021344365064643694	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999961527344189	WITHOUT_CLASSIFICATION	3.847265581106232E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999994999325	WITHOUT_CLASSIFICATION	5.000675175937251E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998941634090739	WITHOUT_CLASSIFICATION	1.0583659092619863E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999948804227802	WITHOUT_CLASSIFICATION	5.119577219762272E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999968675739	WITHOUT_CLASSIFICATION	3.13242597911217E-9	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999794825359	WITHOUT_CLASSIFICATION	2.0517463986422674E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998685459492	WITHOUT_CLASSIFICATION	1.3145405076808096E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991610926641	WITHOUT_CLASSIFICATION	8.389073358820149E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998320174204174	WITHOUT_CLASSIFICATION	1.6798257958249165E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999749585958	WITHOUT_CLASSIFICATION	2.5041404194427786E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999975998265975	WITHOUT_CLASSIFICATION	2.400173402348857E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996704306016	WITHOUT_CLASSIFICATION	3.295693984560584E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991610926641	WITHOUT_CLASSIFICATION	8.389073358820149E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999989131946253	WITHOUT_CLASSIFICATION	1.0868053747746196E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999993800204	WITHOUT_CLASSIFICATION	6.199795769272147E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999982434246258	WITHOUT_CLASSIFICATION	1.7565753741204825E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999996053574	WITHOUT_CLASSIFICATION	3.946425923123476E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999874828386361	WITHOUT_CLASSIFICATION	1.251716136384057E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999950936105	WITHOUT_CLASSIFICATION	4.906389611220168E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999187694	WITHOUT_CLASSIFICATION	8.123055561788899E-11	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998267217506905	WITHOUT_CLASSIFICATION	1.7327824930948323E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999977852945	WITHOUT_CLASSIFICATION	2.214705546851719E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999119504701555	WITHOUT_CLASSIFICATION	8.804952984454358E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9989173377937056	WITHOUT_CLASSIFICATION	0.0010826622062944046	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999538581014054	WITHOUT_CLASSIFICATION	4.61418985946149E-5	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999667393621	WITHOUT_CLASSIFICATION	3.326063793993669E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9961853411439574	WITHOUT_CLASSIFICATION	0.003814658856042506	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999955065899799	WITHOUT_CLASSIFICATION	4.493410020092878E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997193881943	WITHOUT_CLASSIFICATION	2.806118056251573E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999948000258	WITHOUT_CLASSIFICATION	5.1999742011820146E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999851729353	WITHOUT_CLASSIFICATION	1.4827064697305732E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999183992877615	WITHOUT_CLASSIFICATION	8.160071223850231E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999921442507352	WITHOUT_CLASSIFICATION	7.855749264724682E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9997755263440986	WITHOUT_CLASSIFICATION	2.2447365590149543E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999994345532047	WITHOUT_CLASSIFICATION	5.654467953518767E-7	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999986618309226	WITHOUT_CLASSIFICATION	1.3381690774252196E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999921724851	WITHOUT_CLASSIFICATION	7.82751482605884E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999999128021	WITHOUT_CLASSIFICATION	8.719788447466099E-11	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999581711374	WITHOUT_CLASSIFICATION	4.1828862661730626E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999854176796011	WITHOUT_CLASSIFICATION	1.4582320398802323E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999994761162675	WITHOUT_CLASSIFICATION	5.23883732478255E-7	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9836043466357993	WITHOUT_CLASSIFICATION	0.016395653364200728	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.7707233937317374	WITHOUT_CLASSIFICATION	0.2292766062682625	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999071287877	WITHOUT_CLASSIFICATION	9.287121227473773E-8	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998382666371937	WITHOUT_CLASSIFICATION	1.6173336280629413E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999859909889075	WITHOUT_CLASSIFICATION	1.4009011092565098E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999998973869183	WITHOUT_CLASSIFICATION	1.0261308178121248E-7	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999993150504075	WITHOUT_CLASSIFICATION	6.849495925691601E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999981971107	WITHOUT_CLASSIFICATION	1.802889301481376E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999974897988	WITHOUT_CLASSIFICATION	2.510201199066947E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999998315177046	WITHOUT_CLASSIFICATION	1.6848229541117912E-6	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999317717	WITHOUT_CLASSIFICATION	6.822832645608932E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998470177728	WITHOUT_CLASSIFICATION	1.5298222726095768E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9984195900674167	WITHOUT_CLASSIFICATION	0.001580409932583334	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9984195900674167	WITHOUT_CLASSIFICATION	0.001580409932583334	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999982203758158	WITHOUT_CLASSIFICATION	1.7796241842681913E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999706266904	WITHOUT_CLASSIFICATION	2.9373309593273103E-8	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998297595319	WITHOUT_CLASSIFICATION	1.7024046804621798E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7289635482952905	IMPLEMENTATION	0.2710364517047095	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994991760118	WITHOUT_CLASSIFICATION	5.008239881582304E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994991760118	WITHOUT_CLASSIFICATION	5.008239881582304E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999981454153101	WITHOUT_CLASSIFICATION	1.8545846899201144E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999884866387	WITHOUT_CLASSIFICATION	1.1513361213382227E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999948574379508	WITHOUT_CLASSIFICATION	5.142562049286466E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999861483583213	WITHOUT_CLASSIFICATION	1.3851641678750078E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999552373429	WITHOUT_CLASSIFICATION	4.476265717537677E-8	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999985231074454	WITHOUT_CLASSIFICATION	1.4768925546036826E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999994444302999	WITHOUT_CLASSIFICATION	5.555697000620926E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999411782582	WITHOUT_CLASSIFICATION	5.8821741706452076E-8	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999633182718	WITHOUT_CLASSIFICATION	3.6681728138408396E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999230222362	WITHOUT_CLASSIFICATION	7.697776380482613E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999230222362	WITHOUT_CLASSIFICATION	7.697776380482613E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999973175924625	WITHOUT_CLASSIFICATION	2.6824075375651637E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999994753169866	WITHOUT_CLASSIFICATION	5.24683013349196E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999750207755	WITHOUT_CLASSIFICATION	2.4979224534859547E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998517282039325	WITHOUT_CLASSIFICATION	1.4827179606738942E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999968126645963	WITHOUT_CLASSIFICATION	3.187335403757262E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998726354384	WITHOUT_CLASSIFICATION	1.2736456151000502E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998620672694	WITHOUT_CLASSIFICATION	1.3793273060363113E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999981702513514	WITHOUT_CLASSIFICATION	1.829748648511584E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999993042948057	WITHOUT_CLASSIFICATION	6.957051944128058E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9990663607454667	WITHOUT_CLASSIFICATION	9.336392545332146E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999922352399	WITHOUT_CLASSIFICATION	7.764760118754039E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999119504701555	WITHOUT_CLASSIFICATION	8.804952984454358E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999454071578	WITHOUT_CLASSIFICATION	5.459284210918521E-8	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999938127055574	WITHOUT_CLASSIFICATION	6.187294442651474E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999995344594179	WITHOUT_CLASSIFICATION	4.655405820149914E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999956000594367	WITHOUT_CLASSIFICATION	4.399940563268077E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999970684345357	WITHOUT_CLASSIFICATION	2.931565464233139E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999937066359661	WITHOUT_CLASSIFICATION	6.293364033938774E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998956279195	WITHOUT_CLASSIFICATION	1.0437208049257827E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999988122375938	WITHOUT_CLASSIFICATION	1.187762406152826E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995543439004	WITHOUT_CLASSIFICATION	4.4565609957510966E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999818739157783	WITHOUT_CLASSIFICATION	1.812608422172829E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999818739157783	WITHOUT_CLASSIFICATION	1.812608422172829E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999935683489177	WITHOUT_CLASSIFICATION	6.43165108217389E-6	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999834966943824	WITHOUT_CLASSIFICATION	1.650330561761199E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998469327803892	WITHOUT_CLASSIFICATION	1.5306721961087547E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999549811425059	WITHOUT_CLASSIFICATION	4.501885749412959E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999987838283215	WITHOUT_CLASSIFICATION	1.2161716784445107E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999985302309883	WITHOUT_CLASSIFICATION	1.4697690117693916E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999884326668733	WITHOUT_CLASSIFICATION	1.1567333126767463E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999963032692	WITHOUT_CLASSIFICATION	3.696730696756658E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999991522076506	WITHOUT_CLASSIFICATION	8.47792349452509E-7	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9991582856556475	WITHOUT_CLASSIFICATION	8.417143443524268E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998386449428	WITHOUT_CLASSIFICATION	1.613550572045817E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997983677363242	WITHOUT_CLASSIFICATION	2.0163226367575816E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9992840473034701	WITHOUT_CLASSIFICATION	7.159526965300095E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999636257665	WITHOUT_CLASSIFICATION	3.637423351352915E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999993378549	WITHOUT_CLASSIFICATION	6.62144986130644E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999952968754378	WITHOUT_CLASSIFICATION	4.7031245622695385E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999849799557	WITHOUT_CLASSIFICATION	1.5020044266793583E-8	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999380696882	WITHOUT_CLASSIFICATION	6.193031180705632E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999689033182718	WITHOUT_CLASSIFICATION	3.1096681728194534E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999584	WITHOUT_CLASSIFICATION	4.1608762934759626E-14	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999996903187	WITHOUT_CLASSIFICATION	3.0968122781911733E-10	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995218848308	WITHOUT_CLASSIFICATION	4.781151692339919E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999586940042	WITHOUT_CLASSIFICATION	4.130599592430142E-8	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999997815	WITHOUT_CLASSIFICATION	2.1850716115051307E-13	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999721322538	WITHOUT_CLASSIFICATION	2.786774617528911E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999721322538	WITHOUT_CLASSIFICATION	2.786774617528911E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.99996368152837	WITHOUT_CLASSIFICATION	3.6318471630036925E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978343723273866	WITHOUT_CLASSIFICATION	0.0021656276726134066	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999996886725031	WITHOUT_CLASSIFICATION	3.11327496915162E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998899499556	WITHOUT_CLASSIFICATION	1.1005004442454898E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999998267373928	WITHOUT_CLASSIFICATION	1.732626071117415E-7	IMPLEMENTATION
