// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991530199479889	WITHOUT_CLASSIFICATION	8.469800520110875E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991530199479889	WITHOUT_CLASSIFICATION	8.469800520110875E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996547381124183	WITHOUT_CLASSIFICATION	3.45261887581657E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9827073105394543	WITHOUT_CLASSIFICATION	0.017292689460545692	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9885861179409666	WITHOUT_CLASSIFICATION	0.011413882059033315	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.958144718070487	IMPLEMENTATION	0.04185528192951304	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9866722058190582	WITHOUT_CLASSIFICATION	0.013327794180941752	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9569062356232031	WITHOUT_CLASSIFICATION	0.04309376437679698	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9961173467401762	WITHOUT_CLASSIFICATION	0.0038826532598238003	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9016086669230645	WITHOUT_CLASSIFICATION	0.09839133307693548	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9867362669972352	WITHOUT_CLASSIFICATION	0.013263733002764783	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.6259589956149245	IMPLEMENTATION	0.37404100438507554	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9802678787663299	WITHOUT_CLASSIFICATION	0.01973212123367006	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9802678787663299	WITHOUT_CLASSIFICATION	0.01973212123367006	IMPLEMENTATION
/**	IMPLEMENTATION	0.7291440873500413	IMPLEMENTATION	0.27085591264995873	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.738719221847854	IMPLEMENTATION	0.261280778152146	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9984540226829547	IMPLEMENTATION	0.0015459773170452566	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9974000248742954	WITHOUT_CLASSIFICATION	0.002599975125704669	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999994059025	WITHOUT_CLASSIFICATION	5.940976248443124E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.5629698081300124	WITHOUT_CLASSIFICATION	0.4370301918699876	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9083196186312514	WITHOUT_CLASSIFICATION	0.09168038136874854	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999622485150713	WITHOUT_CLASSIFICATION	3.775148492866878E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9443135175872118	WITHOUT_CLASSIFICATION	0.055686482412788264	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7388061862037926	IMPLEMENTATION	0.2611938137962075	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.7388061862037926	IMPLEMENTATION	0.2611938137962075	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9991317806400155	IMPLEMENTATION	8.682193599844378E-4	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9114244273802907	WITHOUT_CLASSIFICATION	0.08857557261970923	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9994482970466174	IMPLEMENTATION	5.517029533825692E-4	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8467971245496001	IMPLEMENTATION	0.15320287545039993	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.6956295646108105	IMPLEMENTATION	0.3043704353891895	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.950885763663592	WITHOUT_CLASSIFICATION	0.04911423633640798	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5263518936238669	WITHOUT_CLASSIFICATION	0.4736481063761331	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9999110019819899	WITHOUT_CLASSIFICATION	8.899801801004596E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9411089965977567	WITHOUT_CLASSIFICATION	0.05889100340224336	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.7914121066156374	IMPLEMENTATION	0.20858789338436265	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9988059493148332	WITHOUT_CLASSIFICATION	0.0011940506851667613	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.8841734303524025	IMPLEMENTATION	0.11582656964759755	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8921193728305727	WITHOUT_CLASSIFICATION	0.10788062716942726	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9748042499455812	WITHOUT_CLASSIFICATION	0.025195750054418837	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9993166459149003	IMPLEMENTATION	6.833540850997754E-4	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9993166459149003	IMPLEMENTATION	6.833540850997754E-4	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9231891907264017	IMPLEMENTATION	0.07681080927359828	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9995640288332521	WITHOUT_CLASSIFICATION	4.359711667478295E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9077840910145047	WITHOUT_CLASSIFICATION	0.09221590898549524	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9997432536170701	IMPLEMENTATION	2.567463829299858E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.8864904940152055	WITHOUT_CLASSIFICATION	0.11350950598479444	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9994622923705198	WITHOUT_CLASSIFICATION	5.377076294801441E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9199523718375296	WITHOUT_CLASSIFICATION	0.0800476281624703	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999955711591348	WITHOUT_CLASSIFICATION	4.4288408651252425E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.6710690609566392	IMPLEMENTATION	0.3289309390433607	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9979137700282295	WITHOUT_CLASSIFICATION	0.0020862299717704547	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9920398844546165	IMPLEMENTATION	0.007960115545383376	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.5118209202141938	WITHOUT_CLASSIFICATION	0.4881790797858063	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9707803281300226	WITHOUT_CLASSIFICATION	0.029219671869977457	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8643670261008305	WITHOUT_CLASSIFICATION	0.13563297389916948	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9773535935996754	IMPLEMENTATION	0.022646406400324552	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8643670261008305	WITHOUT_CLASSIFICATION	0.13563297389916948	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999956174516137	IMPLEMENTATION	4.382548386389738E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9950874022438373	IMPLEMENTATION	0.004912597756162813	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8643670261008305	WITHOUT_CLASSIFICATION	0.13563297389916948	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999775732865	WITHOUT_CLASSIFICATION	2.242671358606585E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999875676445	WITHOUT_CLASSIFICATION	1.243235539073465E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9982520856993825	IMPLEMENTATION	0.0017479143006174634	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999868436407208	WITHOUT_CLASSIFICATION	1.3156359279202882E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999671211723927	WITHOUT_CLASSIFICATION	3.287882760732253E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999989640881488	WITHOUT_CLASSIFICATION	1.0359118511747048E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999262387353	WITHOUT_CLASSIFICATION	7.376126467120934E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999998076389364	WITHOUT_CLASSIFICATION	1.9236106367792565E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999357024997	WITHOUT_CLASSIFICATION	6.429750032781607E-8	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999357024997	WITHOUT_CLASSIFICATION	6.429750032781607E-8	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999873444319	WITHOUT_CLASSIFICATION	1.2655568019734105E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.99999978888286	WITHOUT_CLASSIFICATION	2.111171399814002E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999983199748677	WITHOUT_CLASSIFICATION	1.6800251323452643E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999981950572873	WITHOUT_CLASSIFICATION	1.8049427127612162E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.999999988781417	WITHOUT_CLASSIFICATION	1.1218582988889691E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.999999988781417	WITHOUT_CLASSIFICATION	1.1218582988889691E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999999838398375	WITHOUT_CLASSIFICATION	1.6160162492048426E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996013914190466	WITHOUT_CLASSIFICATION	3.986085809533974E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999979945500104	WITHOUT_CLASSIFICATION	2.0054499895885006E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999198258439	WITHOUT_CLASSIFICATION	8.01741561346942E-8	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999991818181	WITHOUT_CLASSIFICATION	8.181819234526269E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999984355681	WITHOUT_CLASSIFICATION	1.5644319375847223E-9	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999978529563283	WITHOUT_CLASSIFICATION	2.147043671734427E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999999753557583	WITHOUT_CLASSIFICATION	2.464424170863188E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999719450466397	WITHOUT_CLASSIFICATION	2.8054953360435206E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981324209033514	WITHOUT_CLASSIFICATION	0.0018675790966485603	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999916405966011	WITHOUT_CLASSIFICATION	8.359403398919253E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999987459460418	WITHOUT_CLASSIFICATION	1.2540539582799053E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999807085	WITHOUT_CLASSIFICATION	1.9291527962539344E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999987012781982	WITHOUT_CLASSIFICATION	1.2987218017700541E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999987012781982	WITHOUT_CLASSIFICATION	1.2987218017700541E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999613470605	WITHOUT_CLASSIFICATION	3.865293953067013E-8	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999995591865138	WITHOUT_CLASSIFICATION	4.408134860888247E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998181891998	WITHOUT_CLASSIFICATION	1.8181080007136597E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999905184048675	WITHOUT_CLASSIFICATION	9.481595132452694E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999835301674526	WITHOUT_CLASSIFICATION	1.6469832547441707E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7291440873500413	IMPLEMENTATION	0.27085591264995873	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7291440873500413	IMPLEMENTATION	0.27085591264995873	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999997398409299	WITHOUT_CLASSIFICATION	2.601590700899649E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999987498676	WITHOUT_CLASSIFICATION	1.2501324614310116E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999995266562	WITHOUT_CLASSIFICATION	4.733437621645989E-10	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999851656117035	WITHOUT_CLASSIFICATION	1.483438829646454E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999997627240653	WITHOUT_CLASSIFICATION	2.372759347352182E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985553570054	WITHOUT_CLASSIFICATION	1.4446429945521206E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997462884174	WITHOUT_CLASSIFICATION	2.537115826990916E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998542477792	WITHOUT_CLASSIFICATION	1.4575222085519313E-7	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999860463583212	WITHOUT_CLASSIFICATION	1.395364167880625E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997782251645	WITHOUT_CLASSIFICATION	2.2177483541533156E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999932567152804	WITHOUT_CLASSIFICATION	6.74328471964326E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999860463583212	WITHOUT_CLASSIFICATION	1.395364167880625E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999932567152804	WITHOUT_CLASSIFICATION	6.74328471964326E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998606298158	WITHOUT_CLASSIFICATION	1.3937018421807797E-7	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999991869106607	WITHOUT_CLASSIFICATION	8.130893392236467E-7	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999939917252126	WITHOUT_CLASSIFICATION	6.008274787306907E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999035961440031	WITHOUT_CLASSIFICATION	9.640385599686437E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999988537537	WITHOUT_CLASSIFICATION	1.1462462792018888E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999997691099	WITHOUT_CLASSIFICATION	2.3089011908904415E-10	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998968885721635	WITHOUT_CLASSIFICATION	1.0311142783646615E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9972076306299862	WITHOUT_CLASSIFICATION	0.0027923693700138384	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999514990226176	WITHOUT_CLASSIFICATION	4.850097738240275E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999553193726404	WITHOUT_CLASSIFICATION	4.468062735953494E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999806307902236	WITHOUT_CLASSIFICATION	1.936920977638124E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990107672283	WITHOUT_CLASSIFICATION	9.89232771631472E-7	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999298683008	WITHOUT_CLASSIFICATION	7.013169921272912E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998822354946758	WITHOUT_CLASSIFICATION	1.1776450532410673E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999996219747476	WITHOUT_CLASSIFICATION	3.780252524470185E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999989841216	WITHOUT_CLASSIFICATION	1.015878364550927E-9	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999609348378	WITHOUT_CLASSIFICATION	3.906516226102247E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999008219700004	WITHOUT_CLASSIFICATION	9.917802999962845E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999959419694808	WITHOUT_CLASSIFICATION	4.058030519144598E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998911854638	WITHOUT_CLASSIFICATION	1.0881453615706741E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999943015709682	WITHOUT_CLASSIFICATION	5.698429031669287E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999982978598	WITHOUT_CLASSIFICATION	1.7021402016018129E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999994339438313	WITHOUT_CLASSIFICATION	5.660561688295227E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999996903616785	WITHOUT_CLASSIFICATION	3.096383215704317E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9975529468801708	WITHOUT_CLASSIFICATION	0.0024470531198291143	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996137698973	WITHOUT_CLASSIFICATION	3.862301027683551E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999080358706	WITHOUT_CLASSIFICATION	9.196412937090533E-8	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9680139068640872	WITHOUT_CLASSIFICATION	0.031986093135912864	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999928106337	WITHOUT_CLASSIFICATION	7.189366315819445E-9	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999896571221	WITHOUT_CLASSIFICATION	1.0342877996292482E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998879137485	WITHOUT_CLASSIFICATION	1.1208625147852975E-7	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999998940846212	WITHOUT_CLASSIFICATION	1.0591537878165337E-7	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999997533518447	WITHOUT_CLASSIFICATION	2.4664815525320746E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999976099215	WITHOUT_CLASSIFICATION	2.390078450766151E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999997547426315	WITHOUT_CLASSIFICATION	2.4525736849970745E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999999822188	WITHOUT_CLASSIFICATION	1.7781195912037327E-10	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999976099215	WITHOUT_CLASSIFICATION	2.390078450766151E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999988694177177	WITHOUT_CLASSIFICATION	1.1305822824543895E-6	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999911942741169	WITHOUT_CLASSIFICATION	8.805725883179649E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999994189585792	WITHOUT_CLASSIFICATION	5.81041420816373E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999986756132692	WITHOUT_CLASSIFICATION	1.3243867309092553E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999986307392944	WITHOUT_CLASSIFICATION	1.369260705593328E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999713364955	WITHOUT_CLASSIFICATION	2.8663504434603525E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999713364955	WITHOUT_CLASSIFICATION	2.8663504434603525E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999958036873299	WITHOUT_CLASSIFICATION	4.196312670110797E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999879380075	WITHOUT_CLASSIFICATION	1.2061992455361177E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999078974908883	WITHOUT_CLASSIFICATION	9.210250911178744E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999998527028	WITHOUT_CLASSIFICATION	1.4729717773496372E-10	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996378788288	WITHOUT_CLASSIFICATION	3.621211711225577E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999898748858671	WITHOUT_CLASSIFICATION	1.0125114132782342E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999997557296862	WITHOUT_CLASSIFICATION	2.442703137604099E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.999989795089213	WITHOUT_CLASSIFICATION	1.020491078682095E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999322896382	WITHOUT_CLASSIFICATION	6.771036179360404E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999991136974	WITHOUT_CLASSIFICATION	8.863026715722584E-10	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996983254388	WITHOUT_CLASSIFICATION	3.0167456117284295E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996983254388	WITHOUT_CLASSIFICATION	3.0167456117284295E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999451563921877	WITHOUT_CLASSIFICATION	5.484360781230528E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999270368747	WITHOUT_CLASSIFICATION	7.296312521750095E-8	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996857470731	WITHOUT_CLASSIFICATION	3.142529269112886E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999996983254388	WITHOUT_CLASSIFICATION	3.0167456117284295E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999451563921877	WITHOUT_CLASSIFICATION	5.484360781230528E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999451563921877	WITHOUT_CLASSIFICATION	5.484360781230528E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999999969380602	WITHOUT_CLASSIFICATION	3.061939802396779E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999916837521403	WITHOUT_CLASSIFICATION	8.316247859786328E-6	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999954078398	WITHOUT_CLASSIFICATION	4.592160105842671E-9	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.99999995632241	WITHOUT_CLASSIFICATION	4.367759001151135E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999968130535127	WITHOUT_CLASSIFICATION	3.1869464872167325E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999968130535127	WITHOUT_CLASSIFICATION	3.1869464872167325E-6	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999985784255546	WITHOUT_CLASSIFICATION	1.4215744454512388E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999873399692	WITHOUT_CLASSIFICATION	1.2660030776113637E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999999629492885	WITHOUT_CLASSIFICATION	3.70507114479241E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999996228558	WITHOUT_CLASSIFICATION	3.771442133553625E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999996228558	WITHOUT_CLASSIFICATION	3.771442133553625E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997663994585	WITHOUT_CLASSIFICATION	2.336005414320906E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999987515250488	WITHOUT_CLASSIFICATION	1.2484749511810817E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999904462379803	WITHOUT_CLASSIFICATION	9.553762019715172E-6	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999969444355	WITHOUT_CLASSIFICATION	3.055564400703001E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999999478738	WITHOUT_CLASSIFICATION	5.2126286518189705E-11	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999955348756	WITHOUT_CLASSIFICATION	4.465124307539354E-9	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999305772038237	WITHOUT_CLASSIFICATION	6.942279617629369E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999986181362191	WITHOUT_CLASSIFICATION	1.3818637808949077E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999879561507953	WITHOUT_CLASSIFICATION	1.2043849204744256E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999904462379803	WITHOUT_CLASSIFICATION	9.553762019715172E-6	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999921733343125	WITHOUT_CLASSIFICATION	7.826665687496599E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999419045949197	WITHOUT_CLASSIFICATION	5.809540508027912E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999419045949197	WITHOUT_CLASSIFICATION	5.809540508027912E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999998466400539	WITHOUT_CLASSIFICATION	1.5335994604634433E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999943828403451	WITHOUT_CLASSIFICATION	5.617159654831542E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999363994507748	WITHOUT_CLASSIFICATION	6.360054922521879E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999997439397736	WITHOUT_CLASSIFICATION	2.5606022628865136E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998961140548988	WITHOUT_CLASSIFICATION	1.038859451012773E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.999914282494496	WITHOUT_CLASSIFICATION	8.571750550404377E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999996789887209	WITHOUT_CLASSIFICATION	3.2101127919724657E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999984144900981	WITHOUT_CLASSIFICATION	1.5855099019469686E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999999744138	WITHOUT_CLASSIFICATION	2.558620093677058E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999999744138	WITHOUT_CLASSIFICATION	2.558620093677058E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999671211723927	WITHOUT_CLASSIFICATION	3.287882760732253E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999897008999	WITHOUT_CLASSIFICATION	1.0299100068155355E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999533083976	WITHOUT_CLASSIFICATION	4.669160242874084E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.99999974631727	WITHOUT_CLASSIFICATION	2.5368273000328827E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999578928738	WITHOUT_CLASSIFICATION	4.210712625332313E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999790494764	WITHOUT_CLASSIFICATION	2.0950523568477795E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994201877493	WITHOUT_CLASSIFICATION	5.798122506181342E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995975726821	WITHOUT_CLASSIFICATION	4.024273180067326E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999994351261875	WITHOUT_CLASSIFICATION	5.648738125363458E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999432398792	WITHOUT_CLASSIFICATION	5.676012070901395E-8	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985238895949	WITHOUT_CLASSIFICATION	1.47611040512019E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999262387353	WITHOUT_CLASSIFICATION	7.376126467120934E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998204266505	WITHOUT_CLASSIFICATION	1.795733496577203E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998204266505	WITHOUT_CLASSIFICATION	1.795733496577203E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.999999820631178	WITHOUT_CLASSIFICATION	1.7936882201942258E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999606024305054	WITHOUT_CLASSIFICATION	3.939756949457189E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998809415036	WITHOUT_CLASSIFICATION	1.1905849637475116E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999469453212	WITHOUT_CLASSIFICATION	5.3054678808575684E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999994036297464	WITHOUT_CLASSIFICATION	5.96370253663061E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999993337195059	WITHOUT_CLASSIFICATION	6.662804941201322E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999357024997	WITHOUT_CLASSIFICATION	6.429750032781607E-8	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999998638884455	WITHOUT_CLASSIFICATION	1.3611155451061037E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999999657669373	WITHOUT_CLASSIFICATION	3.423306269842916E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985015271357	WITHOUT_CLASSIFICATION	1.4984728643545156E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998191035621	WITHOUT_CLASSIFICATION	1.808964378374423E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999969656191211	WITHOUT_CLASSIFICATION	3.034380878855661E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999983291659325	WITHOUT_CLASSIFICATION	1.6708340675006903E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996227622691	WITHOUT_CLASSIFICATION	3.772377310190538E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999556687497	WITHOUT_CLASSIFICATION	4.433125031977996E-8	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999905170897221	WITHOUT_CLASSIFICATION	9.482910277954533E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999995388708229	WITHOUT_CLASSIFICATION	4.6112917715519034E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999912318821416	WITHOUT_CLASSIFICATION	8.768117858431083E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999981755868905	WITHOUT_CLASSIFICATION	1.8244131094220446E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997746972815	WITHOUT_CLASSIFICATION	2.253027185953273E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999432398792	WITHOUT_CLASSIFICATION	5.676012070901395E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998204266505	WITHOUT_CLASSIFICATION	1.795733496577203E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996227622691	WITHOUT_CLASSIFICATION	3.772377310190538E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999873444319	WITHOUT_CLASSIFICATION	1.2655568019734105E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999377837193	WITHOUT_CLASSIFICATION	6.22162805822391E-8	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999998099385834	WITHOUT_CLASSIFICATION	1.9006141663537773E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999927525442123	WITHOUT_CLASSIFICATION	7.247455787695514E-6	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999991019214358	WITHOUT_CLASSIFICATION	8.98078564115002E-7	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999795161685	WITHOUT_CLASSIFICATION	2.0483831489008187E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999998646611842	WITHOUT_CLASSIFICATION	1.3533881575284824E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998473346836	WITHOUT_CLASSIFICATION	1.5266531644321468E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999761461520349	WITHOUT_CLASSIFICATION	2.385384796506671E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999995515573935	WITHOUT_CLASSIFICATION	4.4844260646758367E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999983637996974	WITHOUT_CLASSIFICATION	1.6362003026424488E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999983637996974	WITHOUT_CLASSIFICATION	1.6362003026424488E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999996140561	WITHOUT_CLASSIFICATION	3.8594394550257773E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999989385907789	WITHOUT_CLASSIFICATION	1.0614092209926622E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999925339853747	WITHOUT_CLASSIFICATION	7.466014625274026E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999955247626048	WITHOUT_CLASSIFICATION	4.47523739524443E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999978714339	WITHOUT_CLASSIFICATION	2.1285661915076512E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999992162754532	WITHOUT_CLASSIFICATION	7.837245468258447E-7	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999757867458	WITHOUT_CLASSIFICATION	2.4213254244628192E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.99999978888286	WITHOUT_CLASSIFICATION	2.111171399814002E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999990965388929	WITHOUT_CLASSIFICATION	9.034611071546985E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999769988179	WITHOUT_CLASSIFICATION	2.3001182098116343E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999769988179	WITHOUT_CLASSIFICATION	2.3001182098116343E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999668279006	WITHOUT_CLASSIFICATION	3.317209945897061E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999994960851892	WITHOUT_CLASSIFICATION	5.039148107259393E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997323441443	WITHOUT_CLASSIFICATION	2.676558556892997E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999437757366	WITHOUT_CLASSIFICATION	5.622426331585999E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999999556921785	WITHOUT_CLASSIFICATION	4.430782151884103E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998696274448	WITHOUT_CLASSIFICATION	1.3037255521971886E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999432398792	WITHOUT_CLASSIFICATION	5.676012070901395E-8	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999262387353	WITHOUT_CLASSIFICATION	7.376126467120934E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996227622691	WITHOUT_CLASSIFICATION	3.772377310190538E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996227622691	WITHOUT_CLASSIFICATION	3.772377310190538E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998444236566	WITHOUT_CLASSIFICATION	1.5557634347553186E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998444236566	WITHOUT_CLASSIFICATION	1.5557634347553186E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999994637101361	WITHOUT_CLASSIFICATION	5.362898638715604E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999999506598635	WITHOUT_CLASSIFICATION	4.934013650218352E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.999999506598635	WITHOUT_CLASSIFICATION	4.934013650218352E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.999997571939433	WITHOUT_CLASSIFICATION	2.4280605670214E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999996233051018	WITHOUT_CLASSIFICATION	3.766948982078111E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.999999928108861	WITHOUT_CLASSIFICATION	7.189113909709433E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999375957132	WITHOUT_CLASSIFICATION	6.24042868050696E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998998715663	WITHOUT_CLASSIFICATION	1.0012843359234166E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999981950572873	WITHOUT_CLASSIFICATION	1.8049427127612162E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999981950572873	WITHOUT_CLASSIFICATION	1.8049427127612162E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997613607542774	WITHOUT_CLASSIFICATION	2.386392457225945E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999980375113859	WITHOUT_CLASSIFICATION	1.9624886141497777E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999879219149	WITHOUT_CLASSIFICATION	1.2078085041491232E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999996329847632	WITHOUT_CLASSIFICATION	3.670152366509862E-7	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999966463283	WITHOUT_CLASSIFICATION	3.3536717351629645E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.999999740903647	WITHOUT_CLASSIFICATION	2.5909635302424345E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.999999988781417	WITHOUT_CLASSIFICATION	1.1218582988889691E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999955326799	WITHOUT_CLASSIFICATION	4.467320101179744E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999955326799	WITHOUT_CLASSIFICATION	4.467320101179744E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999999838398375	WITHOUT_CLASSIFICATION	1.6160162492048426E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999999838398375	WITHOUT_CLASSIFICATION	1.6160162492048426E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999850942864923	WITHOUT_CLASSIFICATION	1.4905713507726076E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999850942864923	WITHOUT_CLASSIFICATION	1.4905713507726076E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999986054541	WITHOUT_CLASSIFICATION	1.394545833818478E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999986054541	WITHOUT_CLASSIFICATION	1.394545833818478E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999981950572873	WITHOUT_CLASSIFICATION	1.8049427127612162E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.999999988781417	WITHOUT_CLASSIFICATION	1.1218582988889691E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999955326799	WITHOUT_CLASSIFICATION	4.467320101179744E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.999999955326799	WITHOUT_CLASSIFICATION	4.467320101179744E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.999999838398375	WITHOUT_CLASSIFICATION	1.6160162492048426E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999850942864923	WITHOUT_CLASSIFICATION	1.4905713507726076E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999850942864923	WITHOUT_CLASSIFICATION	1.4905713507726076E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999986054541	WITHOUT_CLASSIFICATION	1.394545833818478E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999955058122009	WITHOUT_CLASSIFICATION	4.494187799160208E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999993283071902	WITHOUT_CLASSIFICATION	6.716928096741845E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.999912645950951	WITHOUT_CLASSIFICATION	8.7354049048988E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999901646578508	WITHOUT_CLASSIFICATION	9.835342149220875E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999984506801032	WITHOUT_CLASSIFICATION	1.549319896800486E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999988160791444	WITHOUT_CLASSIFICATION	1.1839208555743664E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999997777552518	WITHOUT_CLASSIFICATION	2.2224474812163512E-7	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999885519061	WITHOUT_CLASSIFICATION	1.1448093893589151E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999982992228007	WITHOUT_CLASSIFICATION	1.700777199274074E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999826249465	WITHOUT_CLASSIFICATION	1.7375053531704315E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999989715945706	WITHOUT_CLASSIFICATION	1.0284054293700277E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999772274621	WITHOUT_CLASSIFICATION	2.2772537783993337E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999958036873299	WITHOUT_CLASSIFICATION	4.196312670110797E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999988160791444	WITHOUT_CLASSIFICATION	1.1839208555743664E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999926979114131	WITHOUT_CLASSIFICATION	7.302088586917347E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999926979114131	WITHOUT_CLASSIFICATION	7.302088586917347E-6	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999999978613646	WITHOUT_CLASSIFICATION	2.1386354072281312E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999753728556	WITHOUT_CLASSIFICATION	2.4627144335763515E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999753728556	WITHOUT_CLASSIFICATION	2.4627144335763515E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999776490508	WITHOUT_CLASSIFICATION	2.2350949191867193E-8	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999739923108	WITHOUT_CLASSIFICATION	2.600768925102491E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999791186345	WITHOUT_CLASSIFICATION	2.0881365469778876E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999639515965407	WITHOUT_CLASSIFICATION	3.604840345934974E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999639515965407	WITHOUT_CLASSIFICATION	3.604840345934974E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999991818181	WITHOUT_CLASSIFICATION	8.181819234526269E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999988998565992	WITHOUT_CLASSIFICATION	1.1001434008359651E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999988998565992	WITHOUT_CLASSIFICATION	1.1001434008359651E-6	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997710905721	WITHOUT_CLASSIFICATION	2.2890942776954628E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999971078127	WITHOUT_CLASSIFICATION	2.892187286770245E-9	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999999082638	WITHOUT_CLASSIFICATION	9.173622541335099E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999976749562275	WITHOUT_CLASSIFICATION	2.3250437724817866E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999824661427	WITHOUT_CLASSIFICATION	1.753385721086755E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999733793749	WITHOUT_CLASSIFICATION	2.662062519304516E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999984355681	WITHOUT_CLASSIFICATION	1.5644319375847223E-9	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999986231261686	WITHOUT_CLASSIFICATION	1.3768738314006575E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.988925576282512	WITHOUT_CLASSIFICATION	0.011074423717487918	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999990139258682	WITHOUT_CLASSIFICATION	9.860741317882375E-7	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999997909389547	WITHOUT_CLASSIFICATION	2.0906104522225697E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999719450466397	WITHOUT_CLASSIFICATION	2.8054953360435206E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999786174885	WITHOUT_CLASSIFICATION	2.1382511594308816E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998715693986	WITHOUT_CLASSIFICATION	1.284306013959974E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999984030772	WITHOUT_CLASSIFICATION	1.5969227218723424E-9	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999719450466397	WITHOUT_CLASSIFICATION	2.8054953360435206E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999479332478	WITHOUT_CLASSIFICATION	5.2066752287558996E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999992852193712	WITHOUT_CLASSIFICATION	7.147806287123082E-7	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999947026022031	WITHOUT_CLASSIFICATION	5.297397796863303E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999995860656107	WITHOUT_CLASSIFICATION	4.1393438935160956E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999996476882601	WITHOUT_CLASSIFICATION	3.523117399104252E-7	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999998417277051	WITHOUT_CLASSIFICATION	1.582722949095217E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999237179916	WITHOUT_CLASSIFICATION	7.628200833255866E-8	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999987459460418	WITHOUT_CLASSIFICATION	1.2540539582799053E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999490145829	WITHOUT_CLASSIFICATION	5.098541715737794E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999807085	WITHOUT_CLASSIFICATION	1.9291527962539344E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999987468779254	WITHOUT_CLASSIFICATION	1.2531220745453666E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999966859251	WITHOUT_CLASSIFICATION	3.3140748206303036E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999999944591824	WITHOUT_CLASSIFICATION	5.540817592144208E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999984355681	WITHOUT_CLASSIFICATION	1.5644319375847223E-9	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999490145829	WITHOUT_CLASSIFICATION	5.098541715737794E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999987468779254	WITHOUT_CLASSIFICATION	1.2531220745453666E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999999944591824	WITHOUT_CLASSIFICATION	5.540817592144208E-8	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996724232774	WITHOUT_CLASSIFICATION	3.2757672253233754E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999959385898763	WITHOUT_CLASSIFICATION	4.061410123571801E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997418758865	WITHOUT_CLASSIFICATION	2.5812411352825313E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999987012781982	WITHOUT_CLASSIFICATION	1.2987218017700541E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999998889187449	WITHOUT_CLASSIFICATION	1.110812550241624E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999833761575032	WITHOUT_CLASSIFICATION	1.6623842496737952E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999991669955122	WITHOUT_CLASSIFICATION	8.330044877567996E-7	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999956057455804	WITHOUT_CLASSIFICATION	4.394254419551581E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999999037724949	WITHOUT_CLASSIFICATION	9.622750506136874E-8	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999849618678	WITHOUT_CLASSIFICATION	1.5038132200535577E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999176661041	WITHOUT_CLASSIFICATION	8.233389597825336E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999995317720582	WITHOUT_CLASSIFICATION	4.6822794173961223E-7	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997828101596	WITHOUT_CLASSIFICATION	2.1718984054064681E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995545081724	WITHOUT_CLASSIFICATION	4.454918276658211E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999994213211736	WITHOUT_CLASSIFICATION	5.786788263796149E-7	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999999303742393	WITHOUT_CLASSIFICATION	6.962576069781714E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999995591865138	WITHOUT_CLASSIFICATION	4.408134860888247E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999990923803	WITHOUT_CLASSIFICATION	9.076196966954664E-9	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999997936174182	WITHOUT_CLASSIFICATION	2.0638258183063255E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999490145829	WITHOUT_CLASSIFICATION	5.098541715737794E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998273542902	WITHOUT_CLASSIFICATION	1.7264570975033326E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999948396002029	WITHOUT_CLASSIFICATION	5.1603997971459994E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999994063832748	WITHOUT_CLASSIFICATION	5.936167251152884E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999982349183757	WITHOUT_CLASSIFICATION	1.7650816243084582E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999186475452	WITHOUT_CLASSIFICATION	8.135245476647927E-8	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999999319304455	WITHOUT_CLASSIFICATION	6.806955452480402E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999972224113	WITHOUT_CLASSIFICATION	2.7775887104112324E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999711948936	WITHOUT_CLASSIFICATION	2.8805106433498647E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999936303189062	WITHOUT_CLASSIFICATION	6.369681093744218E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999991774110063	WITHOUT_CLASSIFICATION	8.225889938335435E-7	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999963935380055	WITHOUT_CLASSIFICATION	3.6064619944280016E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999996228279182	WITHOUT_CLASSIFICATION	3.771720817521685E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9989746588093372	WITHOUT_CLASSIFICATION	0.001025341190662722	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999905184048675	WITHOUT_CLASSIFICATION	9.481595132452694E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999996445681151	WITHOUT_CLASSIFICATION	3.5543188500957503E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999434476946221	WITHOUT_CLASSIFICATION	5.655230537798005E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999493829795599	WITHOUT_CLASSIFICATION	5.061702044010342E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.99997869551994	WITHOUT_CLASSIFICATION	2.1304480060050107E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999791665365089	WITHOUT_CLASSIFICATION	2.083346349120569E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999962202069036	WITHOUT_CLASSIFICATION	3.7797930963224275E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999964227701	WITHOUT_CLASSIFICATION	3.5772298973056395E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999912028947832	WITHOUT_CLASSIFICATION	8.79710521686781E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999967717986202	WITHOUT_CLASSIFICATION	3.228201379671959E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999995305884315	WITHOUT_CLASSIFICATION	4.6941156846266384E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999812230456046	WITHOUT_CLASSIFICATION	1.8776954395432646E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999812230456046	WITHOUT_CLASSIFICATION	1.8776954395432646E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999221092583227	WITHOUT_CLASSIFICATION	7.789074167733608E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9995260540563853	WITHOUT_CLASSIFICATION	4.7394594361471217E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999956597974897	WITHOUT_CLASSIFICATION	4.340202510232175E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997866065083	WITHOUT_CLASSIFICATION	2.1339349179164704E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999891932886	WITHOUT_CLASSIFICATION	1.0806711316614676E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999943761979	WITHOUT_CLASSIFICATION	5.623802132760696E-9	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999990444002864	WITHOUT_CLASSIFICATION	9.555997135396558E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997377333224	WITHOUT_CLASSIFICATION	2.622666776884014E-7	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999993115193696	WITHOUT_CLASSIFICATION	6.884806303712453E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999999848327742	WITHOUT_CLASSIFICATION	1.516722580881117E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999950214096907	WITHOUT_CLASSIFICATION	4.9785903093195326E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999988821836576	WITHOUT_CLASSIFICATION	1.1178163423719632E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999987101386	WITHOUT_CLASSIFICATION	1.2898615029665559E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999957444250394	WITHOUT_CLASSIFICATION	4.255574960640225E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999986967719	WITHOUT_CLASSIFICATION	1.3032281326289183E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993584322778	WITHOUT_CLASSIFICATION	6.415677220615619E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999991095608659	WITHOUT_CLASSIFICATION	8.904391341046904E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999994970385	WITHOUT_CLASSIFICATION	5.029614235746942E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999996530840223	WITHOUT_CLASSIFICATION	3.469159777843289E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998762975573934	WITHOUT_CLASSIFICATION	1.2370244260671948E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999994959254417	WITHOUT_CLASSIFICATION	5.0407455828188E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999994959254417	WITHOUT_CLASSIFICATION	5.0407455828188E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999995439607332	WITHOUT_CLASSIFICATION	4.560392667412924E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999995439607332	WITHOUT_CLASSIFICATION	4.560392667412924E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999967717986202	WITHOUT_CLASSIFICATION	3.228201379671959E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999998616245599	WITHOUT_CLASSIFICATION	1.3837544009767916E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9990734747231369	WITHOUT_CLASSIFICATION	9.265252768631834E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999982795721241	WITHOUT_CLASSIFICATION	1.7204278758419572E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9990734747231369	WITHOUT_CLASSIFICATION	9.265252768631834E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999982795721241	WITHOUT_CLASSIFICATION	1.7204278758419572E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999800376395668	WITHOUT_CLASSIFICATION	1.996236043333481E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999957858641	WITHOUT_CLASSIFICATION	4.214136013873047E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999583164778	WITHOUT_CLASSIFICATION	4.168352218501905E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998175360425	WITHOUT_CLASSIFICATION	1.82463957428257E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996665276403784	WITHOUT_CLASSIFICATION	3.3347235962159067E-4	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9993901881765044	WITHOUT_CLASSIFICATION	6.098118234955776E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999831344407	WITHOUT_CLASSIFICATION	1.686555934259474E-8	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998078836837	WITHOUT_CLASSIFICATION	1.9211631633407578E-7	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999998979157056	WITHOUT_CLASSIFICATION	1.0208429434180251E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999894943841	WITHOUT_CLASSIFICATION	1.0505615996970861E-8	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999973099320745	WITHOUT_CLASSIFICATION	2.6900679256143804E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999404114766	WITHOUT_CLASSIFICATION	5.958852347439848E-8	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998925671293	WITHOUT_CLASSIFICATION	1.074328707297121E-7	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999864548298629	WITHOUT_CLASSIFICATION	1.3545170137100853E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999974861394787	WITHOUT_CLASSIFICATION	2.5138605214063874E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999409155419	WITHOUT_CLASSIFICATION	5.9084458177126344E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999409155419	WITHOUT_CLASSIFICATION	5.9084458177126344E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999998261076627	WITHOUT_CLASSIFICATION	1.7389233723239954E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999800376395668	WITHOUT_CLASSIFICATION	1.996236043333481E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999967784199848	WITHOUT_CLASSIFICATION	3.2215800151480235E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999811772456271	WITHOUT_CLASSIFICATION	1.882275437287154E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996515044730881	WITHOUT_CLASSIFICATION	3.4849552691190787E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998901012502	WITHOUT_CLASSIFICATION	1.0989874965983786E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998126062510896	WITHOUT_CLASSIFICATION	1.8739374891034666E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999800376395668	WITHOUT_CLASSIFICATION	1.996236043333481E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998901012502	WITHOUT_CLASSIFICATION	1.0989874965983786E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998126062510896	WITHOUT_CLASSIFICATION	1.8739374891034666E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999496419865236	WITHOUT_CLASSIFICATION	5.0358013476426004E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999999502455087	WITHOUT_CLASSIFICATION	4.975449130535028E-7	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999919553244444	WITHOUT_CLASSIFICATION	8.044675555631722E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999800376395668	WITHOUT_CLASSIFICATION	1.996236043333481E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999800376395668	WITHOUT_CLASSIFICATION	1.996236043333481E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998848198867	WITHOUT_CLASSIFICATION	1.1518011334328987E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.999999658024283	WITHOUT_CLASSIFICATION	3.419757170065602E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999974919348023	WITHOUT_CLASSIFICATION	2.508065197750389E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999996065637031	WITHOUT_CLASSIFICATION	3.934362968985055E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998864359999	WITHOUT_CLASSIFICATION	1.1356400007053419E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999986638091	WITHOUT_CLASSIFICATION	1.3361909255986165E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999985034436607	WITHOUT_CLASSIFICATION	1.4965563393295942E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999041015001	WITHOUT_CLASSIFICATION	9.589849997228522E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999005883928	WITHOUT_CLASSIFICATION	9.94116071833296E-8	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999994315965199	WITHOUT_CLASSIFICATION	5.684034799297589E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999998968723647	WITHOUT_CLASSIFICATION	1.0312763528951342E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999991061045381	WITHOUT_CLASSIFICATION	8.938954618753193E-7	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999979536266	WITHOUT_CLASSIFICATION	2.0463734680283002E-9	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999982840202802	WITHOUT_CLASSIFICATION	1.715979719699982E-6	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999341242614	WITHOUT_CLASSIFICATION	6.587573862371181E-8	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999970569399	WITHOUT_CLASSIFICATION	2.943060203438798E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999851656117035	WITHOUT_CLASSIFICATION	1.483438829646454E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999989248238131	WITHOUT_CLASSIFICATION	1.0751761868393265E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998366163107437	WITHOUT_CLASSIFICATION	1.6338368925626243E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998019004624	WITHOUT_CLASSIFICATION	1.980995376739669E-7	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999766878500186	WITHOUT_CLASSIFICATION	2.3312149981366675E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9951924650215959	WITHOUT_CLASSIFICATION	0.004807534978404192	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9951924650215959	WITHOUT_CLASSIFICATION	0.004807534978404192	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999851656117035	WITHOUT_CLASSIFICATION	1.483438829646454E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996146713596	WITHOUT_CLASSIFICATION	3.8532864042375715E-7	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999999935887351	WITHOUT_CLASSIFICATION	6.411264894280502E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9869457403364992	WITHOUT_CLASSIFICATION	0.013054259663500753	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999246270073	WITHOUT_CLASSIFICATION	7.537299275366459E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949013791903	WITHOUT_CLASSIFICATION	5.098620809749753E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999137957769	WITHOUT_CLASSIFICATION	8.620422302166995E-8	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998449133282	WITHOUT_CLASSIFICATION	1.5508667185012008E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999992059960281	WITHOUT_CLASSIFICATION	7.940039718904905E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999004432562	WITHOUT_CLASSIFICATION	9.95567438614136E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999896413531	WITHOUT_CLASSIFICATION	1.0358646900411152E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997597414029	WITHOUT_CLASSIFICATION	2.402585971402535E-7	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999972297398729	WITHOUT_CLASSIFICATION	2.770260127059571E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999905853416575	WITHOUT_CLASSIFICATION	9.414658342480908E-6	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999989532325196	WITHOUT_CLASSIFICATION	1.0467674803970694E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997599752887	WITHOUT_CLASSIFICATION	2.4002471129382667E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999896313755	WITHOUT_CLASSIFICATION	1.0368624566913026E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999323643329	WITHOUT_CLASSIFICATION	6.763566711021109E-8	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999980103156528	WITHOUT_CLASSIFICATION	1.989684347117375E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996346321904	WITHOUT_CLASSIFICATION	3.6536780946930124E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999462911855	WITHOUT_CLASSIFICATION	5.370881455468569E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999323749470271	WITHOUT_CLASSIFICATION	6.762505297279271E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999990954503678	WITHOUT_CLASSIFICATION	9.045496321987446E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927454759182	WITHOUT_CLASSIFICATION	7.254524081790523E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998068057884134	WITHOUT_CLASSIFICATION	1.931942115866349E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992253927555	WITHOUT_CLASSIFICATION	7.746072445085894E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951006793649	WITHOUT_CLASSIFICATION	4.8993206351290745E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852528342348	WITHOUT_CLASSIFICATION	1.4747165765206308E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864380102135	WITHOUT_CLASSIFICATION	1.3561989786579526E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998643550318058	WITHOUT_CLASSIFICATION	1.356449681941482E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979928274668	WITHOUT_CLASSIFICATION	2.007172533181362E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999946084845771	WITHOUT_CLASSIFICATION	5.391515422817624E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999956250412416	WITHOUT_CLASSIFICATION	4.374958758353333E-6	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975064176784	WITHOUT_CLASSIFICATION	2.4935823216400556E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993848395478	WITHOUT_CLASSIFICATION	6.151604521867818E-7	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694473301646	WITHOUT_CLASSIFICATION	3.0552669835420625E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999331772136207	WITHOUT_CLASSIFICATION	6.682278637919141E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908257311216	WITHOUT_CLASSIFICATION	9.174268878318494E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976202084843	WITHOUT_CLASSIFICATION	2.3797915156575067E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999961550133195	WITHOUT_CLASSIFICATION	3.844986680497085E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390718076233	WITHOUT_CLASSIFICATION	6.092819237673418E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998885779489	WITHOUT_CLASSIFICATION	1.1142205113332212E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900218213532	WITHOUT_CLASSIFICATION	9.978178646697743E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9995433052766707	WITHOUT_CLASSIFICATION	4.56694723329308E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999297040909	WITHOUT_CLASSIFICATION	7.0295909110582E-8	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999752762776	WITHOUT_CLASSIFICATION	2.4723722525089188E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999993637715	WITHOUT_CLASSIFICATION	6.36228499409202E-8	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999970713967462	WITHOUT_CLASSIFICATION	2.9286032537629336E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999984772046703	WITHOUT_CLASSIFICATION	1.5227953297075314E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999998311840839	WITHOUT_CLASSIFICATION	1.688159161482979E-7	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999912638688	WITHOUT_CLASSIFICATION	8.736131142630912E-9	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999982843913586	WITHOUT_CLASSIFICATION	1.7156086412803273E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999983466884973	WITHOUT_CLASSIFICATION	1.653311502675611E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999997340121738	WITHOUT_CLASSIFICATION	2.65987826210198E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999999817845946	WITHOUT_CLASSIFICATION	1.8215405390094928E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999214348607	WITHOUT_CLASSIFICATION	7.856513926681203E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999999997392821	WITHOUT_CLASSIFICATION	2.6071790752861997E-9	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999990912558661	WITHOUT_CLASSIFICATION	9.087441338667416E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999665810688	WITHOUT_CLASSIFICATION	3.341893111688736E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999997275870777	WITHOUT_CLASSIFICATION	2.7241292241506594E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739795649318	WITHOUT_CLASSIFICATION	2.6020435068083958E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965989402488	WITHOUT_CLASSIFICATION	3.401059751124994E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565272933045	WITHOUT_CLASSIFICATION	4.3472706695448356E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910888230895	WITHOUT_CLASSIFICATION	8.911176910502108E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999067825288342	WITHOUT_CLASSIFICATION	9.321747116580739E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999546148958	WITHOUT_CLASSIFICATION	4.538510423826473E-8	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9929136551296303	WITHOUT_CLASSIFICATION	0.007086344870369823	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9997259068834363	WITHOUT_CLASSIFICATION	2.7409311656371825E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999552823718898	WITHOUT_CLASSIFICATION	4.471762811018948E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999956129054	WITHOUT_CLASSIFICATION	4.387094601274153E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999223864787	WITHOUT_CLASSIFICATION	7.761352131686348E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999999955635497	WITHOUT_CLASSIFICATION	4.436450295144063E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999994800641	WITHOUT_CLASSIFICATION	5.1993591448950675E-9	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999729515763998	WITHOUT_CLASSIFICATION	2.7048423600251622E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999889798902721	WITHOUT_CLASSIFICATION	1.1020109727755842E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999950647745	WITHOUT_CLASSIFICATION	4.9352254639705775E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999979489653754	WITHOUT_CLASSIFICATION	2.0510346245031483E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999993637715	WITHOUT_CLASSIFICATION	6.36228499409202E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999996760682225	WITHOUT_CLASSIFICATION	3.2393177754562485E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999816846221519	WITHOUT_CLASSIFICATION	1.831537784818952E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999902805981828	WITHOUT_CLASSIFICATION	9.719401817215815E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995097003862	WITHOUT_CLASSIFICATION	4.902996137987232E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999266740638	WITHOUT_CLASSIFICATION	7.332593624151624E-8	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999999044611162	WITHOUT_CLASSIFICATION	9.553888374959933E-8	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999798366236098	WITHOUT_CLASSIFICATION	2.016337639020542E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999999331630014	WITHOUT_CLASSIFICATION	6.683699860579641E-8	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999984835629477	WITHOUT_CLASSIFICATION	1.5164370522674542E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999689498663	WITHOUT_CLASSIFICATION	3.1050133746629814E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999994371083362	WITHOUT_CLASSIFICATION	5.628916637951445E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999700665589	WITHOUT_CLASSIFICATION	2.993344103992774E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999896437293	WITHOUT_CLASSIFICATION	1.0356270790015838E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999860437835066	WITHOUT_CLASSIFICATION	1.3956216493309292E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999929329871	WITHOUT_CLASSIFICATION	7.067012880777583E-9	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999989141931052	WITHOUT_CLASSIFICATION	1.0858068947914285E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999864356018328	WITHOUT_CLASSIFICATION	1.3564398167249577E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999969341209073	WITHOUT_CLASSIFICATION	3.0658790927925943E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999992434252951	WITHOUT_CLASSIFICATION	7.565747048487871E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999892533463727	WITHOUT_CLASSIFICATION	1.0746653627189012E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999402663851	WITHOUT_CLASSIFICATION	5.973361490022219E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.999997001514698	WITHOUT_CLASSIFICATION	2.998485301960468E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999980709146965	WITHOUT_CLASSIFICATION	1.9290853035450187E-6	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999121893044252	WITHOUT_CLASSIFICATION	8.781069557478356E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999984029715288	WITHOUT_CLASSIFICATION	1.5970284712943198E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999474017078	WITHOUT_CLASSIFICATION	5.259829219519987E-8	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981324209033514	WITHOUT_CLASSIFICATION	0.0018675790966485603	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999991697810714	WITHOUT_CLASSIFICATION	8.302189286112873E-7	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997015877142	WITHOUT_CLASSIFICATION	2.9841228574484257E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999431541723	WITHOUT_CLASSIFICATION	5.684582772625836E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999993637715	WITHOUT_CLASSIFICATION	6.36228499409202E-8	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999993752864104	WITHOUT_CLASSIFICATION	6.247135896705589E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999996702282551	WITHOUT_CLASSIFICATION	3.2977174490885115E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999997946346568	WITHOUT_CLASSIFICATION	2.053653432945649E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999993637715	WITHOUT_CLASSIFICATION	6.36228499409202E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998362986601	WITHOUT_CLASSIFICATION	1.6370133986290182E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999402663851	WITHOUT_CLASSIFICATION	5.973361490022219E-7	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999675818720759	WITHOUT_CLASSIFICATION	3.241812792412765E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999895152700528	WITHOUT_CLASSIFICATION	1.0484729947270854E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999998031690927	WITHOUT_CLASSIFICATION	1.9683090728415176E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999689498663	WITHOUT_CLASSIFICATION	3.1050133746629814E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999994371083362	WITHOUT_CLASSIFICATION	5.628916637951445E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999700665589	WITHOUT_CLASSIFICATION	2.993344103992774E-8	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.99999999884485	WITHOUT_CLASSIFICATION	1.1551500083642401E-9	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999997889699153	WITHOUT_CLASSIFICATION	2.1103008465488402E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999985825060353	WITHOUT_CLASSIFICATION	1.4174939646544453E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999155324768	WITHOUT_CLASSIFICATION	8.446752311530787E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999850173	WITHOUT_CLASSIFICATION	1.4982749203787156E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999993637715	WITHOUT_CLASSIFICATION	6.36228499409202E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999896437293	WITHOUT_CLASSIFICATION	1.0356270790015838E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999860437835066	WITHOUT_CLASSIFICATION	1.3956216493309292E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999945219764	WITHOUT_CLASSIFICATION	5.478023525154692E-9	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999693682887	WITHOUT_CLASSIFICATION	3.063171130951166E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999990443508	WITHOUT_CLASSIFICATION	9.556492181199224E-10	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999978163949	WITHOUT_CLASSIFICATION	2.183605151295836E-9	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999271323284	WITHOUT_CLASSIFICATION	7.286767149632924E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999537573131	WITHOUT_CLASSIFICATION	4.624268690281539E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390718076233	WITHOUT_CLASSIFICATION	6.092819237673418E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999789231633	WITHOUT_CLASSIFICATION	2.107683667892561E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9993193513099654	WITHOUT_CLASSIFICATION	6.806486900345773E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999997012017501	WITHOUT_CLASSIFICATION	2.9879824991142005E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999993044033463	WITHOUT_CLASSIFICATION	6.955966536838816E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998958424855	WITHOUT_CLASSIFICATION	1.0415751451614484E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852528342348	WITHOUT_CLASSIFICATION	1.4747165765206308E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864380102135	WITHOUT_CLASSIFICATION	1.3561989786579526E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993848395478	WITHOUT_CLASSIFICATION	6.151604521867818E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998958424855	WITHOUT_CLASSIFICATION	1.0415751451614484E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999951715912093	WITHOUT_CLASSIFICATION	4.828408790580126E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999151548599	WITHOUT_CLASSIFICATION	8.484514014369703E-8	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998422212166167	WITHOUT_CLASSIFICATION	1.5777878338344114E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999085347425698	WITHOUT_CLASSIFICATION	9.146525743028548E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999617365437448	WITHOUT_CLASSIFICATION	3.8263456255265945E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999353468773855	WITHOUT_CLASSIFICATION	6.465312261454442E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694473301646	WITHOUT_CLASSIFICATION	3.0552669835420625E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976202084843	WITHOUT_CLASSIFICATION	2.3797915156575067E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999994800641	WITHOUT_CLASSIFICATION	5.1993591448950675E-9	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999853487801	WITHOUT_CLASSIFICATION	1.465121993639289E-8	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999997180085861	WITHOUT_CLASSIFICATION	2.819914138863735E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999259322885	WITHOUT_CLASSIFICATION	7.406771145986333E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999999854566677	WITHOUT_CLASSIFICATION	1.4543332300119141E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999991782568661	WITHOUT_CLASSIFICATION	8.217431339653402E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999994230415482	WITHOUT_CLASSIFICATION	5.769584517029029E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999904734790008	WITHOUT_CLASSIFICATION	9.526520999220437E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999004432562	WITHOUT_CLASSIFICATION	9.95567438614136E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999616432033986	WITHOUT_CLASSIFICATION	3.8356796601404344E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999593616750566	WITHOUT_CLASSIFICATION	4.063832494335178E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.99998259896088	WITHOUT_CLASSIFICATION	1.740103911987966E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999132092136	WITHOUT_CLASSIFICATION	8.679078648916152E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999995977248413	WITHOUT_CLASSIFICATION	4.02275158771193E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999756267341129	WITHOUT_CLASSIFICATION	2.4373265887210505E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919200468086	WITHOUT_CLASSIFICATION	8.079953191369434E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997756948340568	WITHOUT_CLASSIFICATION	2.2430516594318948E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999971009516808	WITHOUT_CLASSIFICATION	2.899048319221093E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999994261244465	WITHOUT_CLASSIFICATION	5.738755536055674E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999879993321663	WITHOUT_CLASSIFICATION	1.2000667833747496E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999642571252463	WITHOUT_CLASSIFICATION	3.574287475378388E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999895215162239	WITHOUT_CLASSIFICATION	1.0478483775997149E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999971346529184	WITHOUT_CLASSIFICATION	2.8653470816255257E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999965141551722	WITHOUT_CLASSIFICATION	3.4858448278967045E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998154988938	WITHOUT_CLASSIFICATION	1.8450110620831834E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999238036803	WITHOUT_CLASSIFICATION	7.619631974895616E-8	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989602389935	WITHOUT_CLASSIFICATION	1.0397610065220952E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999992085236337	WITHOUT_CLASSIFICATION	7.914763663096483E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991218110317	WITHOUT_CLASSIFICATION	8.781889682726286E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997393945383	WITHOUT_CLASSIFICATION	2.6060546168580796E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999967594411909	WITHOUT_CLASSIFICATION	3.2405588090381524E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999449398014	WITHOUT_CLASSIFICATION	5.5060198664072634E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996597008882	WITHOUT_CLASSIFICATION	3.4029911178729383E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999989248631572	WITHOUT_CLASSIFICATION	1.0751368427792903E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999912015844103	WITHOUT_CLASSIFICATION	8.798415589697545E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999181852565631	WITHOUT_CLASSIFICATION	8.181474343688982E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999112785435	WITHOUT_CLASSIFICATION	8.872145654508908E-8	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997208541219	WITHOUT_CLASSIFICATION	2.7914587811262953E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999978886855869	WITHOUT_CLASSIFICATION	2.111314413087467E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999955110030841	WITHOUT_CLASSIFICATION	4.488996915889916E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999485754787	WITHOUT_CLASSIFICATION	5.1424521303428273E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995919770788763	WITHOUT_CLASSIFICATION	4.080229211237092E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999999978898244	WITHOUT_CLASSIFICATION	2.110175591540249E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999908685962683	WITHOUT_CLASSIFICATION	9.131403731811532E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999995135681516	WITHOUT_CLASSIFICATION	4.864318484378314E-7	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999760349112	WITHOUT_CLASSIFICATION	2.396508875869337E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998472386942	WITHOUT_CLASSIFICATION	1.5276130580658262E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998233634916	WITHOUT_CLASSIFICATION	1.766365084356199E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999997970970868	WITHOUT_CLASSIFICATION	2.029029132734414E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999266316395417	WITHOUT_CLASSIFICATION	7.33683604583E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999029706831848	WITHOUT_CLASSIFICATION	9.70293168152507E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999994503489268	WITHOUT_CLASSIFICATION	5.496510731024774E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999875647433	WITHOUT_CLASSIFICATION	1.2435256711975517E-8	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998730134775502	WITHOUT_CLASSIFICATION	1.269865224497875E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999883484675981	WITHOUT_CLASSIFICATION	1.1651532401844456E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999999857875747	WITHOUT_CLASSIFICATION	1.4212425302404952E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999891233933325	WITHOUT_CLASSIFICATION	1.0876606667572158E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999996857943969	WITHOUT_CLASSIFICATION	3.142056030828277E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999353967624722	WITHOUT_CLASSIFICATION	6.460323752785253E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.99999300680173	WITHOUT_CLASSIFICATION	6.9931982700155635E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999997933549	WITHOUT_CLASSIFICATION	2.0664521132201569E-10	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998178116868	WITHOUT_CLASSIFICATION	1.8218831329738968E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999641219934	WITHOUT_CLASSIFICATION	3.587800650049305E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999996130033806	WITHOUT_CLASSIFICATION	3.8699661943684584E-7	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9953901336054496	WITHOUT_CLASSIFICATION	0.004609866394550362	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.99997855677489	WITHOUT_CLASSIFICATION	2.144322511003623E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999969490002092	WITHOUT_CLASSIFICATION	3.0509997908290085E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999988083916242	WITHOUT_CLASSIFICATION	1.191608375697497E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999995449376812	WITHOUT_CLASSIFICATION	4.550623187356184E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999761068344784	WITHOUT_CLASSIFICATION	2.389316552176115E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999965380321806	WITHOUT_CLASSIFICATION	3.461967819495574E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999997891841452	WITHOUT_CLASSIFICATION	2.108158547907759E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.991438451648918	WITHOUT_CLASSIFICATION	0.008561548351082016	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9998755418953621	WITHOUT_CLASSIFICATION	1.244581046378289E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999997314534487	WITHOUT_CLASSIFICATION	2.685465513233248E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999965260930932	WITHOUT_CLASSIFICATION	3.473906906752514E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999978039122588	WITHOUT_CLASSIFICATION	2.1960877412590764E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999998018782144	WITHOUT_CLASSIFICATION	1.9812178560493033E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999997156058528	WITHOUT_CLASSIFICATION	2.8439414718234955E-7	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999887079016001	WITHOUT_CLASSIFICATION	1.129209839994208E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999991196594	WITHOUT_CLASSIFICATION	8.803405278701123E-10	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999954011482014	WITHOUT_CLASSIFICATION	4.598851798518675E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999925592228	WITHOUT_CLASSIFICATION	7.44077729396943E-9	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999888956606404	WITHOUT_CLASSIFICATION	1.1104339359557187E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999989017220108	WITHOUT_CLASSIFICATION	1.0982779892391765E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999974235939	WITHOUT_CLASSIFICATION	2.5764061606404025E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998459619607	WITHOUT_CLASSIFICATION	1.5403803944523302E-7	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999990369	WITHOUT_CLASSIFICATION	9.63143281418821E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999887715768032	WITHOUT_CLASSIFICATION	1.1228423196814513E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999640854233014	WITHOUT_CLASSIFICATION	3.5914576698712814E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999387075372	WITHOUT_CLASSIFICATION	6.129246281130143E-8	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999998901909505	WITHOUT_CLASSIFICATION	1.0980904956929462E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999786747777053	WITHOUT_CLASSIFICATION	2.132522229469464E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999998848170715	WITHOUT_CLASSIFICATION	1.1518292856790242E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999539696793629	WITHOUT_CLASSIFICATION	4.603032063714548E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999979519674166	WITHOUT_CLASSIFICATION	2.048032583468102E-6	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.999965895269188	WITHOUT_CLASSIFICATION	3.4104730812029664E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999961534820082	WITHOUT_CLASSIFICATION	3.84651799186002E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999718423807	WITHOUT_CLASSIFICATION	2.815761933158936E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999963586549612	WITHOUT_CLASSIFICATION	3.641345038787607E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999980851149503	WITHOUT_CLASSIFICATION	1.9148850498119513E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999766507698	WITHOUT_CLASSIFICATION	2.3349230206914965E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999963586549612	WITHOUT_CLASSIFICATION	3.641345038787607E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999975582551	WITHOUT_CLASSIFICATION	2.4417449033336584E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999592352946	WITHOUT_CLASSIFICATION	4.076470527529513E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999907360202195	WITHOUT_CLASSIFICATION	9.263979780484066E-6	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994431196121569	WITHOUT_CLASSIFICATION	5.568803878430715E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997919997994	WITHOUT_CLASSIFICATION	2.0800020074139414E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999958979451	WITHOUT_CLASSIFICATION	4.102054891041104E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999930644904584	WITHOUT_CLASSIFICATION	6.935509541520602E-6	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998775883555	WITHOUT_CLASSIFICATION	1.2241164453026081E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998897729141077	WITHOUT_CLASSIFICATION	1.1022708589231812E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999981733455516	WITHOUT_CLASSIFICATION	1.8266544484141946E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999994203491	WITHOUT_CLASSIFICATION	5.796508093132845E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.99999975992602	WITHOUT_CLASSIFICATION	2.400739799703615E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999974831955897	WITHOUT_CLASSIFICATION	2.516804410429272E-6	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999991096193	WITHOUT_CLASSIFICATION	8.903806062438468E-10	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999976390092089	WITHOUT_CLASSIFICATION	2.360990791102528E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999963883764577	WITHOUT_CLASSIFICATION	3.6116235422521837E-6	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.998624242576043	WITHOUT_CLASSIFICATION	0.001375757423957101	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.998624242576043	WITHOUT_CLASSIFICATION	0.001375757423957101	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999966624859024	WITHOUT_CLASSIFICATION	3.3375140976969192E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999678217461441	WITHOUT_CLASSIFICATION	3.2178253855921E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996809442274	WITHOUT_CLASSIFICATION	3.190557725609031E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999186134736275	WITHOUT_CLASSIFICATION	8.138652637248585E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999989861626255	WITHOUT_CLASSIFICATION	1.013837374465991E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999877399839666	WITHOUT_CLASSIFICATION	1.2260016033480024E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999981262036103	WITHOUT_CLASSIFICATION	1.8737963897031302E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999573503615	WITHOUT_CLASSIFICATION	4.264963851796837E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998437197581	WITHOUT_CLASSIFICATION	1.562802417733498E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999917543013599	WITHOUT_CLASSIFICATION	8.245698640090235E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999931709575768	WITHOUT_CLASSIFICATION	6.829042423286971E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999922406192	WITHOUT_CLASSIFICATION	7.759380753106748E-9	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999993304003463	WITHOUT_CLASSIFICATION	6.695996537561769E-7	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999935870889991	WITHOUT_CLASSIFICATION	6.4129110008452204E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999645445481	WITHOUT_CLASSIFICATION	3.545545193451045E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999756267341129	WITHOUT_CLASSIFICATION	2.4373265887210505E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999975645235663	WITHOUT_CLASSIFICATION	2.4354764337332503E-6	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999997749891272	WITHOUT_CLASSIFICATION	2.2501087287016053E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9963633709239937	WITHOUT_CLASSIFICATION	0.003636629076006239	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999935575997013	WITHOUT_CLASSIFICATION	6.442400298724674E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999971594948	WITHOUT_CLASSIFICATION	2.8405050346790623E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999974969171983	WITHOUT_CLASSIFICATION	2.5030828017821917E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999999387424	WITHOUT_CLASSIFICATION	6.125753768376767E-11	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999945374183	WITHOUT_CLASSIFICATION	5.462581746575741E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999867173282255	WITHOUT_CLASSIFICATION	1.3282671774385208E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999924557403644	WITHOUT_CLASSIFICATION	7.544259635623146E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999999922681	WITHOUT_CLASSIFICATION	7.73190765885965E-11	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999928718194803	WITHOUT_CLASSIFICATION	7.12818051973912E-6	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999745205378009	WITHOUT_CLASSIFICATION	2.5479462199090424E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999970883903015	WITHOUT_CLASSIFICATION	2.91160969843515E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999970887399445	WITHOUT_CLASSIFICATION	2.91126005546832E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999992036447853	WITHOUT_CLASSIFICATION	7.963552146207485E-7	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999943362442746	WITHOUT_CLASSIFICATION	5.663755725386133E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999900054239461	WITHOUT_CLASSIFICATION	9.994576053880281E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999982159361557	WITHOUT_CLASSIFICATION	1.7840638443173107E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9998963049013724	WITHOUT_CLASSIFICATION	1.0369509862764545E-4	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999251571767491	WITHOUT_CLASSIFICATION	7.48428232509579E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999975950850758	WITHOUT_CLASSIFICATION	2.4049149242086994E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996546697983	WITHOUT_CLASSIFICATION	3.453302016279041E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999996507103233	WITHOUT_CLASSIFICATION	3.492896767396866E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999943880294553	WITHOUT_CLASSIFICATION	5.611970544684484E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999978853318624	WITHOUT_CLASSIFICATION	2.1146681375877915E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999998839811611	WITHOUT_CLASSIFICATION	1.1601883887794218E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998803881167	WITHOUT_CLASSIFICATION	1.1961188330717528E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999631992936	WITHOUT_CLASSIFICATION	3.6800706319117934E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999993023640993	WITHOUT_CLASSIFICATION	6.9763590074072E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996752623797	WITHOUT_CLASSIFICATION	3.2473762030677887E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995558594122	WITHOUT_CLASSIFICATION	4.441405877130811E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989189363583	WITHOUT_CLASSIFICATION	1.0810636416407877E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999602984747	WITHOUT_CLASSIFICATION	3.970152530969483E-8	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999652386027	WITHOUT_CLASSIFICATION	3.476139730400957E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998620802452	WITHOUT_CLASSIFICATION	1.37919754956545E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999999690795698	WITHOUT_CLASSIFICATION	3.0920430199324695E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999996711561547	WITHOUT_CLASSIFICATION	3.288438453093669E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999710842544404	WITHOUT_CLASSIFICATION	2.8915745559541022E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999996711561547	WITHOUT_CLASSIFICATION	3.288438453093669E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999681093543278	WITHOUT_CLASSIFICATION	3.189064567224664E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999999261425778	WITHOUT_CLASSIFICATION	7.38574221934137E-8	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999975347823056	WITHOUT_CLASSIFICATION	2.4652176944202136E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999548602629	WITHOUT_CLASSIFICATION	4.5139737105542097E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999538641421	WITHOUT_CLASSIFICATION	4.613585787727885E-8	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999951183477	WITHOUT_CLASSIFICATION	4.881652285621882E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999997532902031	WITHOUT_CLASSIFICATION	2.467097969419046E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999852030947	WITHOUT_CLASSIFICATION	1.4796905298193326E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999996821307813	WITHOUT_CLASSIFICATION	3.1786921876120325E-7	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997992944155181	WITHOUT_CLASSIFICATION	2.0070558448192173E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999886294579222	WITHOUT_CLASSIFICATION	1.1370542077864834E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999714297523	WITHOUT_CLASSIFICATION	2.857024778303056E-8	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999998368433931	WITHOUT_CLASSIFICATION	1.6315660690134585E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999996857849893	WITHOUT_CLASSIFICATION	3.142150106957042E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999952746242872	WITHOUT_CLASSIFICATION	4.725375712779085E-6	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999998562576	WITHOUT_CLASSIFICATION	1.4374239317050363E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981104822963	WITHOUT_CLASSIFICATION	1.8895177037548114E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981104822963	WITHOUT_CLASSIFICATION	1.8895177037548114E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999975523127258	WITHOUT_CLASSIFICATION	2.447687274255802E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999999986227217	WITHOUT_CLASSIFICATION	1.377278300523964E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999976610489	WITHOUT_CLASSIFICATION	2.3389510865241765E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998335286454391	WITHOUT_CLASSIFICATION	1.6647135456104558E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999990160093	WITHOUT_CLASSIFICATION	9.839907689906115E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999921399599	WITHOUT_CLASSIFICATION	7.860040090998566E-8	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9994270608471683	WITHOUT_CLASSIFICATION	5.729391528316721E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999566084844431	WITHOUT_CLASSIFICATION	4.339151555685257E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999531624084	WITHOUT_CLASSIFICATION	4.683759166932373E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997982684726	WITHOUT_CLASSIFICATION	2.0173152737288227E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999906626875	WITHOUT_CLASSIFICATION	9.337312461891925E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997151435168	WITHOUT_CLASSIFICATION	2.8485648318042837E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999956361904774	WITHOUT_CLASSIFICATION	4.363809522600507E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999549855004	WITHOUT_CLASSIFICATION	4.501449956040907E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.99999908181864	WITHOUT_CLASSIFICATION	9.181813599449542E-7	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999075654	WITHOUT_CLASSIFICATION	9.243466673125999E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999709872540076	WITHOUT_CLASSIFICATION	2.901274599242642E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997652479467583	WITHOUT_CLASSIFICATION	2.3475205324166037E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999858873882503	WITHOUT_CLASSIFICATION	1.4112611749794848E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996971892616	WITHOUT_CLASSIFICATION	3.028107384489021E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999996499718615	WITHOUT_CLASSIFICATION	3.5002813850388813E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999867360038259	WITHOUT_CLASSIFICATION	1.3263996174117822E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999972395505343	WITHOUT_CLASSIFICATION	2.76044946557837E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995810956187736	WITHOUT_CLASSIFICATION	4.1890438122643237E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999987774947522	WITHOUT_CLASSIFICATION	1.2225052478482485E-6	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999710346239	WITHOUT_CLASSIFICATION	2.896537601176852E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999884179938	WITHOUT_CLASSIFICATION	1.158200614267956E-8	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999686709685289	WITHOUT_CLASSIFICATION	3.132903147108931E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999998809592137	WITHOUT_CLASSIFICATION	1.1904078637687167E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999937157235	WITHOUT_CLASSIFICATION	6.284276575082456E-9	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999871861377	WITHOUT_CLASSIFICATION	1.2813862199823455E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999998905933167	WITHOUT_CLASSIFICATION	1.0940668330159476E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998327591498044	WITHOUT_CLASSIFICATION	1.6724085019571153E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999994721515066	WITHOUT_CLASSIFICATION	5.278484932758746E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999137439155419	WITHOUT_CLASSIFICATION	8.625608445809248E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999980625933599	WITHOUT_CLASSIFICATION	1.9374066401689155E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998802502081	WITHOUT_CLASSIFICATION	1.1974979190589756E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999896561423288	WITHOUT_CLASSIFICATION	1.0343857671090514E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999572788235	WITHOUT_CLASSIFICATION	4.272117655292421E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999992158073442	WITHOUT_CLASSIFICATION	7.84192655843992E-7	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999999471684	WITHOUT_CLASSIFICATION	5.2831685637603596E-11	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999590682696	WITHOUT_CLASSIFICATION	4.0931730523186985E-8	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999927359665389	WITHOUT_CLASSIFICATION	7.2640334610191315E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8287443592290391	WITHOUT_CLASSIFICATION	0.17125564077096075	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999990785344904	WITHOUT_CLASSIFICATION	9.214655094287973E-7	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998179191698897	WITHOUT_CLASSIFICATION	1.8208083011026242E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5879050509932388	WITHOUT_CLASSIFICATION	0.41209494900676114	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999961674038	WITHOUT_CLASSIFICATION	3.8325962652250944E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999947727797937	WITHOUT_CLASSIFICATION	5.227220206373623E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999995346654331	WITHOUT_CLASSIFICATION	4.653345668618796E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999231356483	WITHOUT_CLASSIFICATION	7.686435174403257E-8	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999907927055	WITHOUT_CLASSIFICATION	9.207294472324221E-9	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999959204814	WITHOUT_CLASSIFICATION	4.079518608410482E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999979069942462	WITHOUT_CLASSIFICATION	2.0930057537973953E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999876537690211	WITHOUT_CLASSIFICATION	1.2346230978910059E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998362986601	WITHOUT_CLASSIFICATION	1.6370133986290182E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999998362986601	WITHOUT_CLASSIFICATION	1.6370133986290182E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999949354278	WITHOUT_CLASSIFICATION	5.064572164379809E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999961712002042	WITHOUT_CLASSIFICATION	3.828799795770418E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999989076400211	WITHOUT_CLASSIFICATION	1.0923599788901448E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999989729075923	WITHOUT_CLASSIFICATION	1.027092407628439E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999986798676886	WITHOUT_CLASSIFICATION	1.3201323113085985E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9983634192626654	WITHOUT_CLASSIFICATION	0.0016365807373346895	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997613489622426	WITHOUT_CLASSIFICATION	2.3865103775734043E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999989224740916	WITHOUT_CLASSIFICATION	1.077525908332805E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999983755576	WITHOUT_CLASSIFICATION	1.6244424185085444E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999550508102	WITHOUT_CLASSIFICATION	4.49491897825169E-8	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999995644841746	WITHOUT_CLASSIFICATION	4.3551582534043283E-7	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.999995910380144	WITHOUT_CLASSIFICATION	4.08961985592067E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999989496891467	WITHOUT_CLASSIFICATION	1.0503108532932288E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999941246697	WITHOUT_CLASSIFICATION	5.875330296170552E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999998305637284	WITHOUT_CLASSIFICATION	1.6943627164612193E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999985060425555	WITHOUT_CLASSIFICATION	1.4939574445428946E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998897787771	WITHOUT_CLASSIFICATION	1.10221222885947E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999906292469547	WITHOUT_CLASSIFICATION	9.370753045270946E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999837737584	WITHOUT_CLASSIFICATION	1.622624161805229E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999587852296826	WITHOUT_CLASSIFICATION	4.121477031741816E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999996067322	WITHOUT_CLASSIFICATION	3.932676589029685E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999998991107805	WITHOUT_CLASSIFICATION	1.0088921949872781E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987011970811	WITHOUT_CLASSIFICATION	1.2988029188936262E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999791445457434	WITHOUT_CLASSIFICATION	2.0855454256632533E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997263130595514	WITHOUT_CLASSIFICATION	2.736869404485967E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9814388952044442	WITHOUT_CLASSIFICATION	0.018561104795555835	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9822203504167868	WITHOUT_CLASSIFICATION	0.017779649583213195	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999861552095946	WITHOUT_CLASSIFICATION	1.3844790405408266E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999968515960226	WITHOUT_CLASSIFICATION	3.1484039773810964E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987011970811	WITHOUT_CLASSIFICATION	1.2988029188936262E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999999453492832	WITHOUT_CLASSIFICATION	5.465071687854757E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999996287042	WITHOUT_CLASSIFICATION	3.7129584026457974E-10	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999957014258709	WITHOUT_CLASSIFICATION	4.2985741290431795E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999914637145186	WITHOUT_CLASSIFICATION	8.536285481284457E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999410025777	WITHOUT_CLASSIFICATION	5.899742237015366E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999972938381069	WITHOUT_CLASSIFICATION	2.7061618930611466E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999978852439877	WITHOUT_CLASSIFICATION	2.1147560122984506E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999220270039	WITHOUT_CLASSIFICATION	7.79729961217035E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993535837499529	WITHOUT_CLASSIFICATION	6.464162500470819E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999914637145186	WITHOUT_CLASSIFICATION	8.536285481284457E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999990835646	WITHOUT_CLASSIFICATION	9.164354171254708E-10	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999099146143	WITHOUT_CLASSIFICATION	9.008538573031784E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999871046291023	WITHOUT_CLASSIFICATION	1.2895370897602815E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999773605455139	WITHOUT_CLASSIFICATION	2.2639454486026638E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999974210460666	WITHOUT_CLASSIFICATION	2.578953933407238E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999906626875	WITHOUT_CLASSIFICATION	9.337312461891925E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999948512013	WITHOUT_CLASSIFICATION	5.1487987762319005E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992392168452	WITHOUT_CLASSIFICATION	7.607831548648685E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999784123375	WITHOUT_CLASSIFICATION	2.158766261874737E-8	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9975075003583268	WITHOUT_CLASSIFICATION	0.0024924996416732033	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999994863449	WITHOUT_CLASSIFICATION	5.136550772076453E-10	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999998907583139	WITHOUT_CLASSIFICATION	1.0924168607249643E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999997945231814	WITHOUT_CLASSIFICATION	2.0547681858923488E-7	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999793733285	WITHOUT_CLASSIFICATION	2.0626671451104937E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998773986286	WITHOUT_CLASSIFICATION	1.226013713859137E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999907632661807	WITHOUT_CLASSIFICATION	9.236733819282111E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999871927653157	WITHOUT_CLASSIFICATION	1.2807234684382599E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999999944864759	WITHOUT_CLASSIFICATION	5.513524100607281E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999963282557296	WITHOUT_CLASSIFICATION	3.671744270444241E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999939777699438	WITHOUT_CLASSIFICATION	6.022230056256352E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999983322075785	WITHOUT_CLASSIFICATION	1.6677924215662655E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999962443894	WITHOUT_CLASSIFICATION	3.755610599903167E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999984557230578	WITHOUT_CLASSIFICATION	1.5442769422066983E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997762654647	WITHOUT_CLASSIFICATION	2.2373453530306216E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999989144411557	WITHOUT_CLASSIFICATION	1.0855588442012288E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999988250680448	WITHOUT_CLASSIFICATION	1.1749319551345522E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999980139237297	WITHOUT_CLASSIFICATION	1.9860762703639256E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999966897408342	WITHOUT_CLASSIFICATION	3.3102591659008745E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999992922994839	WITHOUT_CLASSIFICATION	7.07700516082915E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999836308	WITHOUT_CLASSIFICATION	1.6369271623009066E-11	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999055002677475	WITHOUT_CLASSIFICATION	9.449973225245923E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999238748142162	WITHOUT_CLASSIFICATION	7.612518578384863E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998391578043	WITHOUT_CLASSIFICATION	1.6084219562293746E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614610281211	WITHOUT_CLASSIFICATION	3.853897187891759E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997944928846	WITHOUT_CLASSIFICATION	2.055071154007096E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999927367925109	WITHOUT_CLASSIFICATION	7.263207489145335E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998425689436871	WITHOUT_CLASSIFICATION	1.5743105631295368E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999983250631261	WITHOUT_CLASSIFICATION	1.6749368737914787E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999971741732	WITHOUT_CLASSIFICATION	2.82582682456819E-9	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998327462667937	WITHOUT_CLASSIFICATION	1.6725373320630689E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999506957597679	WITHOUT_CLASSIFICATION	4.930424023213739E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999922331326739	WITHOUT_CLASSIFICATION	7.766867326149531E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999996096753551	WITHOUT_CLASSIFICATION	3.903246449509059E-7	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999971960204055	WITHOUT_CLASSIFICATION	2.8039795945731877E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999997474614304	WITHOUT_CLASSIFICATION	2.5253856967676345E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997744466392	WITHOUT_CLASSIFICATION	2.255533608913566E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999999956758189	WITHOUT_CLASSIFICATION	4.324181106857933E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999929533874	WITHOUT_CLASSIFICATION	7.046612520783052E-9	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999997192015035	WITHOUT_CLASSIFICATION	2.80798496359225E-7	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999996973488698	WITHOUT_CLASSIFICATION	3.026511302227181E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999784935849989	WITHOUT_CLASSIFICATION	2.1506415001140254E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999994169855623	WITHOUT_CLASSIFICATION	5.830144377267039E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999972688985896	WITHOUT_CLASSIFICATION	2.7311014102656573E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99744639886181	WITHOUT_CLASSIFICATION	0.0025536011381900024	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999993150235276	WITHOUT_CLASSIFICATION	6.849764725040394E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997249480561	WITHOUT_CLASSIFICATION	2.7505194391582586E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999987472242796	WITHOUT_CLASSIFICATION	1.252775720375953E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9990041623735764	WITHOUT_CLASSIFICATION	9.958376264236045E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999793444267283	WITHOUT_CLASSIFICATION	2.0655573271731258E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999826617971	WITHOUT_CLASSIFICATION	1.7338202903424918E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999900353414342	WITHOUT_CLASSIFICATION	9.964658565871976E-6	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999788539796118	WITHOUT_CLASSIFICATION	2.1146020388264607E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614610281211	WITHOUT_CLASSIFICATION	3.853897187891759E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999997043736832	WITHOUT_CLASSIFICATION	2.956263167346708E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999974314794	WITHOUT_CLASSIFICATION	2.568520586321452E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.999999969170565	WITHOUT_CLASSIFICATION	3.0829434974737236E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999930817902353	WITHOUT_CLASSIFICATION	6.918209764667498E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999859303422521	WITHOUT_CLASSIFICATION	1.406965774787139E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999968429053253	WITHOUT_CLASSIFICATION	3.15709467464E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999979099243	WITHOUT_CLASSIFICATION	2.0900756960000138E-8	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999972233893	WITHOUT_CLASSIFICATION	2.776610637835966E-9	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999984922902	WITHOUT_CLASSIFICATION	1.50770987468512E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999997174518692	WITHOUT_CLASSIFICATION	2.825481307877319E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997737419972	WITHOUT_CLASSIFICATION	2.2625800270674586E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999928821775688	WITHOUT_CLASSIFICATION	7.117822431137255E-6	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999780893214	WITHOUT_CLASSIFICATION	2.1910678610335506E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999998386111789	WITHOUT_CLASSIFICATION	1.613888210522397E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999681093543278	WITHOUT_CLASSIFICATION	3.189064567224664E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999996863834	WITHOUT_CLASSIFICATION	3.136165031772761E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999796014423	WITHOUT_CLASSIFICATION	2.0398557685450574E-8	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999986214986	WITHOUT_CLASSIFICATION	1.3785013699918122E-9	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999998747534184	WITHOUT_CLASSIFICATION	1.252465815170545E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999981569402	WITHOUT_CLASSIFICATION	1.8430598034540156E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999810530950316	WITHOUT_CLASSIFICATION	1.894690496845279E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999810530950316	WITHOUT_CLASSIFICATION	1.894690496845279E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999969207529762	WITHOUT_CLASSIFICATION	3.0792470237945547E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999975661251	WITHOUT_CLASSIFICATION	2.433874791267862E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999815243802258	WITHOUT_CLASSIFICATION	1.8475619774212915E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998006916955017	WITHOUT_CLASSIFICATION	1.9930830449831196E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999994449894827	WITHOUT_CLASSIFICATION	5.550105172898495E-7	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997618119366	WITHOUT_CLASSIFICATION	2.3818806345860228E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999962117317817	WITHOUT_CLASSIFICATION	3.7882682183859433E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999663166458	WITHOUT_CLASSIFICATION	3.368335415591033E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999663166458	WITHOUT_CLASSIFICATION	3.368335415591033E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999996549091968	WITHOUT_CLASSIFICATION	3.4509080309840466E-7	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999956239120501	WITHOUT_CLASSIFICATION	4.3760879499409525E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999533104444	WITHOUT_CLASSIFICATION	4.668955555395366E-8	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986643201167	WITHOUT_CLASSIFICATION	1.3356798832599707E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986643201167	WITHOUT_CLASSIFICATION	1.3356798832599707E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986643201167	WITHOUT_CLASSIFICATION	1.3356798832599707E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999795758778375	WITHOUT_CLASSIFICATION	2.0424122162451836E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998564301852	WITHOUT_CLASSIFICATION	1.435698148721934E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9746400439323228	WITHOUT_CLASSIFICATION	0.025359956067677117	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997529673163609	WITHOUT_CLASSIFICATION	2.4703268363911364E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999999931782888	WITHOUT_CLASSIFICATION	6.82171119633529E-8	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996213892397	WITHOUT_CLASSIFICATION	3.7861076037552605E-7	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999979952655991	WITHOUT_CLASSIFICATION	2.0047344010220417E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9986350947811716	WITHOUT_CLASSIFICATION	0.0013649052188283712	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999792783197	WITHOUT_CLASSIFICATION	2.0721680218614627E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999958843854514	WITHOUT_CLASSIFICATION	4.1156145485121854E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997220978848	WITHOUT_CLASSIFICATION	2.779021151363101E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999975984377893	WITHOUT_CLASSIFICATION	2.4015622107071877E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998297564162	WITHOUT_CLASSIFICATION	1.7024358375610536E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999880087351	WITHOUT_CLASSIFICATION	1.199126483465715E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999990557135	WITHOUT_CLASSIFICATION	9.442865044260198E-9	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999999099894511	WITHOUT_CLASSIFICATION	9.00105489070804E-7	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999588925709	WITHOUT_CLASSIFICATION	4.1107429070815455E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999588925709	WITHOUT_CLASSIFICATION	4.1107429070815455E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999680876949	WITHOUT_CLASSIFICATION	3.191230516504393E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999680876949	WITHOUT_CLASSIFICATION	3.191230516504393E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999999967536725	WITHOUT_CLASSIFICATION	3.2463274960324814E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999999035302719	WITHOUT_CLASSIFICATION	9.646972801360741E-8	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999999035302719	WITHOUT_CLASSIFICATION	9.646972801360741E-8	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998443067231	WITHOUT_CLASSIFICATION	1.556932769745377E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998971080152	WITHOUT_CLASSIFICATION	1.0289198478974239E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997518633193975	WITHOUT_CLASSIFICATION	2.4813668060253135E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999810530950316	WITHOUT_CLASSIFICATION	1.894690496845279E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999904310079863	WITHOUT_CLASSIFICATION	9.56899201372852E-6	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998971080152	WITHOUT_CLASSIFICATION	1.0289198478974239E-7	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.99991476239396	WITHOUT_CLASSIFICATION	8.523760603998755E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999323075208454	WITHOUT_CLASSIFICATION	6.769247915455366E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999792411114	WITHOUT_CLASSIFICATION	2.075888850646417E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999414782332	WITHOUT_CLASSIFICATION	5.852176676927509E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999986889382523	WITHOUT_CLASSIFICATION	1.3110617478042244E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999893869702865	WITHOUT_CLASSIFICATION	1.0613029713450792E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996723982009	WITHOUT_CLASSIFICATION	3.276017991147745E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999674463842	WITHOUT_CLASSIFICATION	3.2553615799513196E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998083733541	WITHOUT_CLASSIFICATION	1.9162664597566573E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999932216707	WITHOUT_CLASSIFICATION	6.778329369353965E-9	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999999769654	WITHOUT_CLASSIFICATION	2.3034595438869567E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999996967075844	WITHOUT_CLASSIFICATION	3.032924156475877E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993949535607	WITHOUT_CLASSIFICATION	6.050464393662359E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999310602937	WITHOUT_CLASSIFICATION	6.893970625843457E-8	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999349136849196	WITHOUT_CLASSIFICATION	6.50863150804011E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999978336468102	WITHOUT_CLASSIFICATION	2.1663531898145387E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999992757487325	WITHOUT_CLASSIFICATION	7.242512674009715E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998581323417	WITHOUT_CLASSIFICATION	1.4186765822062168E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998581323417	WITHOUT_CLASSIFICATION	1.4186765822062168E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997199759754	WITHOUT_CLASSIFICATION	2.8002402470402374E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998380911237	WITHOUT_CLASSIFICATION	1.6190887632428873E-7	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999993553317938	WITHOUT_CLASSIFICATION	6.446682062440844E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999506057928932	WITHOUT_CLASSIFICATION	4.9394207106801545E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997976233346	WITHOUT_CLASSIFICATION	2.023766655162932E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999590777714821	WITHOUT_CLASSIFICATION	4.09222285178853E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999901359931657	WITHOUT_CLASSIFICATION	9.864006834330996E-6	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999991778106546	WITHOUT_CLASSIFICATION	8.221893454734954E-7	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999987561730741	WITHOUT_CLASSIFICATION	1.2438269259233244E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999611754803	WITHOUT_CLASSIFICATION	3.8824519765691315E-8	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999015467079	WITHOUT_CLASSIFICATION	9.845329204985677E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999928821775688	WITHOUT_CLASSIFICATION	7.117822431137255E-6	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998986246513	WITHOUT_CLASSIFICATION	1.0137534859161122E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999960193640672	WITHOUT_CLASSIFICATION	3.980635932776484E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999804370955614	WITHOUT_CLASSIFICATION	1.9562904438660785E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999923322089584	WITHOUT_CLASSIFICATION	7.667791041509083E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999663815264	WITHOUT_CLASSIFICATION	3.3618473619513775E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999663815264	WITHOUT_CLASSIFICATION	3.3618473619513775E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999824876706702	WITHOUT_CLASSIFICATION	1.751232932974982E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999989147550735	WITHOUT_CLASSIFICATION	1.0852449264190318E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999536687887872	WITHOUT_CLASSIFICATION	4.633121121287658E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999941205616703	WITHOUT_CLASSIFICATION	5.8794383297725944E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999991688947614	WITHOUT_CLASSIFICATION	8.311052384895603E-7	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999989170802221	WITHOUT_CLASSIFICATION	1.0829197778971425E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999649983350611	WITHOUT_CLASSIFICATION	3.500166493886664E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999537884732	WITHOUT_CLASSIFICATION	4.621152679712632E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999357377842308	WITHOUT_CLASSIFICATION	6.426221576908737E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999863471069	WITHOUT_CLASSIFICATION	1.3652893237256904E-8	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999581293272	WITHOUT_CLASSIFICATION	4.187067289523616E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999537884732	WITHOUT_CLASSIFICATION	4.621152679712632E-8	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999995958883	WITHOUT_CLASSIFICATION	4.041117000079259E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999982681395719	WITHOUT_CLASSIFICATION	1.7318604280402444E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999706618472	WITHOUT_CLASSIFICATION	2.9338152817945816E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999940819763	WITHOUT_CLASSIFICATION	5.918023672688295E-9	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999555839042	WITHOUT_CLASSIFICATION	4.4416095753404366E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999964466325	WITHOUT_CLASSIFICATION	3.553367494575399E-8	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999976763618045	WITHOUT_CLASSIFICATION	2.3236381954925956E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996081814997	WITHOUT_CLASSIFICATION	3.9181850021985045E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999981242883	WITHOUT_CLASSIFICATION	1.8757116259496145E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999936553777325	WITHOUT_CLASSIFICATION	6.344622267524172E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9991677212438976	WITHOUT_CLASSIFICATION	8.322787561022644E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999956111386	WITHOUT_CLASSIFICATION	4.388861295642609E-9	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999997297874794	WITHOUT_CLASSIFICATION	2.7021252064633375E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999944607436594	WITHOUT_CLASSIFICATION	5.539256340627252E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999227554732123	WITHOUT_CLASSIFICATION	7.724452678762087E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999339443755	WITHOUT_CLASSIFICATION	6.605562460743595E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999969818826	WITHOUT_CLASSIFICATION	3.0181175120496743E-9	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999625789497714	WITHOUT_CLASSIFICATION	3.742105022861559E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999923360375398	WITHOUT_CLASSIFICATION	7.663962460252082E-6	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999973716152369	WITHOUT_CLASSIFICATION	2.6283847630284756E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999995336089843	WITHOUT_CLASSIFICATION	4.6639101572182E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999988037577	WITHOUT_CLASSIFICATION	1.196242299960247E-6	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999735167110908	WITHOUT_CLASSIFICATION	2.6483288909260346E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999527304791	WITHOUT_CLASSIFICATION	4.726952099687353E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999748504105	WITHOUT_CLASSIFICATION	2.5149589560803592E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999419045949197	WITHOUT_CLASSIFICATION	5.809540508027912E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994312633299	WITHOUT_CLASSIFICATION	5.687366700798856E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999955882372524	WITHOUT_CLASSIFICATION	4.411762747632612E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999087407078	WITHOUT_CLASSIFICATION	9.125929222928816E-8	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999902043562071	WITHOUT_CLASSIFICATION	9.795643792794969E-6	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999989042337027	WITHOUT_CLASSIFICATION	1.0957662972605456E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999981206414014	WITHOUT_CLASSIFICATION	1.8793585987003744E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999893985461623	WITHOUT_CLASSIFICATION	1.0601453837607649E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999984581291	WITHOUT_CLASSIFICATION	1.5418707960924228E-9	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999331927127	WITHOUT_CLASSIFICATION	6.680728722772898E-8	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998079036818	WITHOUT_CLASSIFICATION	1.9209631816900183E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999536375465	WITHOUT_CLASSIFICATION	4.636245350509368E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999985133571	WITHOUT_CLASSIFICATION	1.4866428991081142E-8	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999580962772	WITHOUT_CLASSIFICATION	4.190372290107737E-8	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999961766338192	WITHOUT_CLASSIFICATION	3.823366180781329E-6	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999954626011892	WITHOUT_CLASSIFICATION	4.537398810700985E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999995517563196	WITHOUT_CLASSIFICATION	4.4824368047640167E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999982717300601	WITHOUT_CLASSIFICATION	1.7282699399678818E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999067541291	WITHOUT_CLASSIFICATION	9.32458708273688E-8	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999859558992	WITHOUT_CLASSIFICATION	1.4044100802500697E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999946117968	WITHOUT_CLASSIFICATION	5.388203258926336E-9	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998700557797	WITHOUT_CLASSIFICATION	1.2994422024448112E-7	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999978767115091	WITHOUT_CLASSIFICATION	2.1232884909374656E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999998775414763	WITHOUT_CLASSIFICATION	1.2245852362759047E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999994928063125	WITHOUT_CLASSIFICATION	5.071936874886104E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815012812036	WITHOUT_CLASSIFICATION	1.8498718796488467E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999999898297506	WITHOUT_CLASSIFICATION	1.0170249393356356E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999921740479	WITHOUT_CLASSIFICATION	7.825952049308344E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999993290385	WITHOUT_CLASSIFICATION	6.709614373467396E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999754650237	WITHOUT_CLASSIFICATION	2.4534976298390685E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999996349726731	WITHOUT_CLASSIFICATION	3.6502732694351516E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999557081063137	WITHOUT_CLASSIFICATION	4.429189368627588E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999984036427834	WITHOUT_CLASSIFICATION	1.5963572166154905E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999014774332	WITHOUT_CLASSIFICATION	9.852256685029403E-8	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999990839138	WITHOUT_CLASSIFICATION	9.160862349118003E-10	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998082228576	WITHOUT_CLASSIFICATION	1.9177714243310112E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999804795062042	WITHOUT_CLASSIFICATION	1.952049379577519E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999592814212022	WITHOUT_CLASSIFICATION	4.071857879782673E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999406228	WITHOUT_CLASSIFICATION	5.937716619179415E-11	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999497247909	WITHOUT_CLASSIFICATION	5.027520915027743E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999974731102163	WITHOUT_CLASSIFICATION	2.526889783832173E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815012812036	WITHOUT_CLASSIFICATION	1.8498718796488467E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999978678715986	WITHOUT_CLASSIFICATION	2.1321284014144565E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999950643702312	WITHOUT_CLASSIFICATION	4.935629768790758E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999624696472	WITHOUT_CLASSIFICATION	3.753035280813485E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999997783247286	WITHOUT_CLASSIFICATION	2.2167527127673555E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999818421455828	WITHOUT_CLASSIFICATION	1.81578544171729E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999411257543	WITHOUT_CLASSIFICATION	5.887424566991954E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999357377842308	WITHOUT_CLASSIFICATION	6.426221576908737E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999914292485747	WITHOUT_CLASSIFICATION	8.57075142528914E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999331927127	WITHOUT_CLASSIFICATION	6.680728722772898E-8	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999698679393109	WITHOUT_CLASSIFICATION	3.0132060689104802E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996801684298	WITHOUT_CLASSIFICATION	3.1983157028683675E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999966008932	WITHOUT_CLASSIFICATION	3.3991067910905866E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999820434026	WITHOUT_CLASSIFICATION	1.795659745434582E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999993608503362	WITHOUT_CLASSIFICATION	6.391496636535713E-7	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999924071902058	WITHOUT_CLASSIFICATION	7.5928097942772645E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999893939501	WITHOUT_CLASSIFICATION	1.0606049985810076E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999986889781	WITHOUT_CLASSIFICATION	1.3110219052817308E-8	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999840568737961	WITHOUT_CLASSIFICATION	1.5943126203913188E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999998315641	WITHOUT_CLASSIFICATION	1.6843601625308787E-10	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999973807452149	WITHOUT_CLASSIFICATION	2.6192547850552044E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999762608185276	WITHOUT_CLASSIFICATION	2.3739181472262186E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999973263489	WITHOUT_CLASSIFICATION	2.673651071325675E-9	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999973263489	WITHOUT_CLASSIFICATION	2.673651071325675E-9	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999802455615	WITHOUT_CLASSIFICATION	1.9754438526042175E-8	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999953386074777	WITHOUT_CLASSIFICATION	4.661392522261848E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999999740062	WITHOUT_CLASSIFICATION	2.599379327189977E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999916862733	WITHOUT_CLASSIFICATION	8.313726668442226E-9	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999813724695	WITHOUT_CLASSIFICATION	1.8627530518760553E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997664024162	WITHOUT_CLASSIFICATION	2.335975838289011E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999981640846	WITHOUT_CLASSIFICATION	1.8359154073357172E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999997620722072	WITHOUT_CLASSIFICATION	2.3792779275272123E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999714481506	WITHOUT_CLASSIFICATION	2.8551849467960856E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999723178848	WITHOUT_CLASSIFICATION	2.7682115164453835E-8	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999973453414307	WITHOUT_CLASSIFICATION	2.6546585693483242E-6	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999977970172994	WITHOUT_CLASSIFICATION	2.202982700580215E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999994387135146	WITHOUT_CLASSIFICATION	5.612864854622331E-7	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999850631655	WITHOUT_CLASSIFICATION	1.4936834586776817E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999674146615621	WITHOUT_CLASSIFICATION	3.258533843786752E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999999929424943	WITHOUT_CLASSIFICATION	7.057505692245891E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999577060785	WITHOUT_CLASSIFICATION	4.229392136223362E-8	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999953905891	WITHOUT_CLASSIFICATION	4.6094108619303E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998788140915	WITHOUT_CLASSIFICATION	1.2118590851140363E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999973551279	WITHOUT_CLASSIFICATION	2.644872098616325E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999986746024812	WITHOUT_CLASSIFICATION	1.3253975188813619E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999957182046	WITHOUT_CLASSIFICATION	4.281795407922509E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995631966331	WITHOUT_CLASSIFICATION	4.368033669998735E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9989640727273527	WITHOUT_CLASSIFICATION	0.001035927272647313	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9977174332025696	WITHOUT_CLASSIFICATION	0.0022825667974305168	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945696130087	WITHOUT_CLASSIFICATION	5.430386991265724E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997597414029	WITHOUT_CLASSIFICATION	2.402585971402535E-7	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999996543054469	WITHOUT_CLASSIFICATION	3.4569455306404296E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999621423182	WITHOUT_CLASSIFICATION	3.7857681737512753E-8	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999779147362	WITHOUT_CLASSIFICATION	2.2085263806659056E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981324209033514	WITHOUT_CLASSIFICATION	0.0018675790966485603	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999999376815617	WITHOUT_CLASSIFICATION	6.231843830193706E-7	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999986581184285	WITHOUT_CLASSIFICATION	1.341881571520532E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9896422741526153	WITHOUT_CLASSIFICATION	0.01035772584738471	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999976490562069	WITHOUT_CLASSIFICATION	2.3509437930490607E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993315045497	WITHOUT_CLASSIFICATION	6.68495450378692E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999973533027441	WITHOUT_CLASSIFICATION	2.646697255947187E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9994083436321124	WITHOUT_CLASSIFICATION	5.916563678875805E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999992739385443	WITHOUT_CLASSIFICATION	7.260614557478789E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997949109738	WITHOUT_CLASSIFICATION	2.050890262233984E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999313059889426	WITHOUT_CLASSIFICATION	6.869401105737031E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999875452378	WITHOUT_CLASSIFICATION	1.2454762206709736E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999981953607526	WITHOUT_CLASSIFICATION	1.8046392473629248E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999990304914969	WITHOUT_CLASSIFICATION	9.695085030569511E-7	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999988763958024	WITHOUT_CLASSIFICATION	1.1236041975519762E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998422212166167	WITHOUT_CLASSIFICATION	1.5777878338344114E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9991015735477483	WITHOUT_CLASSIFICATION	8.984264522516197E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989249765048	WITHOUT_CLASSIFICATION	1.0750234952808034E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999947219008305	WITHOUT_CLASSIFICATION	5.2780991695501125E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999664906134151	WITHOUT_CLASSIFICATION	3.3509386584856555E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990692551423	WITHOUT_CLASSIFICATION	9.307448577262138E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998146421814401	WITHOUT_CLASSIFICATION	1.8535781855980607E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999992693788	WITHOUT_CLASSIFICATION	7.30621202548728E-9	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994266897524	WITHOUT_CLASSIFICATION	5.733102476546014E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999969367879968	WITHOUT_CLASSIFICATION	3.0632120031100234E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999998813635623	WITHOUT_CLASSIFICATION	1.1863643770436758E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999512688924	WITHOUT_CLASSIFICATION	4.873110760484511E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999795961974802	WITHOUT_CLASSIFICATION	2.0403802519752618E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999972858159275	WITHOUT_CLASSIFICATION	2.7141840724941883E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998844522768	WITHOUT_CLASSIFICATION	1.1554772324578744E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999998967337221	WITHOUT_CLASSIFICATION	1.0326627780146167E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999812264969	WITHOUT_CLASSIFICATION	1.877350311120945E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999990928181856	WITHOUT_CLASSIFICATION	9.071818144036004E-6	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999986990124661	WITHOUT_CLASSIFICATION	1.300987533918571E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999997881357884	WITHOUT_CLASSIFICATION	2.1186421156168988E-7	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999992456099	WITHOUT_CLASSIFICATION	7.543900718511587E-10	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999569591274	WITHOUT_CLASSIFICATION	4.3040872644027446E-8	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999872691494986	WITHOUT_CLASSIFICATION	1.2730850501301822E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999910991835224	WITHOUT_CLASSIFICATION	8.90081647767694E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999986955198795	WITHOUT_CLASSIFICATION	1.304480120575025E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999910991835224	WITHOUT_CLASSIFICATION	8.90081647767694E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999903962974	WITHOUT_CLASSIFICATION	9.603702718551377E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999997825443279	WITHOUT_CLASSIFICATION	2.1745567210306502E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998140290710629	WITHOUT_CLASSIFICATION	1.859709289370773E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999759257906005	WITHOUT_CLASSIFICATION	2.4074209399489332E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999952776004292	WITHOUT_CLASSIFICATION	4.722399570803151E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999535631868347	WITHOUT_CLASSIFICATION	4.643681316535986E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999974787213	WITHOUT_CLASSIFICATION	2.5212786994683542E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999873827154	WITHOUT_CLASSIFICATION	1.2617284475447712E-8	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998410980825	WITHOUT_CLASSIFICATION	1.5890191749106602E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999989805365999	WITHOUT_CLASSIFICATION	1.0194634001796635E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998827383442	WITHOUT_CLASSIFICATION	1.1726165578972672E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997184090049	WITHOUT_CLASSIFICATION	2.815909950399748E-7	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999632285614	WITHOUT_CLASSIFICATION	3.677143852381099E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999990604944355	WITHOUT_CLASSIFICATION	9.395055643145493E-7	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997641715736602	WITHOUT_CLASSIFICATION	2.3582842633993042E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997361973728	WITHOUT_CLASSIFICATION	2.638026272497171E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997172368951	WITHOUT_CLASSIFICATION	2.827631048497471E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999972044589	WITHOUT_CLASSIFICATION	2.7955411011731055E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998901392669	WITHOUT_CLASSIFICATION	1.0986073297515378E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999473332394	WITHOUT_CLASSIFICATION	5.26667605424646E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999993721267381	WITHOUT_CLASSIFICATION	6.278732618725804E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998897381070211	WITHOUT_CLASSIFICATION	1.1026189297882811E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9985613280373103	WITHOUT_CLASSIFICATION	0.0014386719626895994	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999521556889246	WITHOUT_CLASSIFICATION	4.7844311075326215E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999896777944836	WITHOUT_CLASSIFICATION	1.0322205516495624E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999906217056	WITHOUT_CLASSIFICATION	9.378294453517162E-9	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999982759733703	WITHOUT_CLASSIFICATION	1.7240266296156365E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999958929027586	WITHOUT_CLASSIFICATION	4.107097241417011E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994685375554	WITHOUT_CLASSIFICATION	5.314624445842542E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999990973226316	WITHOUT_CLASSIFICATION	9.026773683104489E-7	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.999999511032433	WITHOUT_CLASSIFICATION	4.889675670293995E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999936139274689	WITHOUT_CLASSIFICATION	6.3860725311234E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999499021	WITHOUT_CLASSIFICATION	5.0097893877085846E-11	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.99999982963384	WITHOUT_CLASSIFICATION	1.7036615993330193E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999842742983135	WITHOUT_CLASSIFICATION	1.572570168650594E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999974135772653	WITHOUT_CLASSIFICATION	2.5864227346910917E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999977859309557	WITHOUT_CLASSIFICATION	2.2140690441999036E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997750591455	WITHOUT_CLASSIFICATION	2.249408546356328E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999543911848667	WITHOUT_CLASSIFICATION	4.560881513333068E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999615271874	WITHOUT_CLASSIFICATION	3.847281263249875E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999953150737	WITHOUT_CLASSIFICATION	4.6849262506661285E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999358028636404	WITHOUT_CLASSIFICATION	6.419713635964212E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999997946346568	WITHOUT_CLASSIFICATION	2.053653432945649E-7	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999906217056	WITHOUT_CLASSIFICATION	9.378294453517162E-9	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999391244033062	WITHOUT_CLASSIFICATION	6.087559669370785E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999994535039094	WITHOUT_CLASSIFICATION	5.4649609050558E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999910429131964	WITHOUT_CLASSIFICATION	8.957086803600702E-6	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999902694167	WITHOUT_CLASSIFICATION	9.73058326110658E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999967530532924	WITHOUT_CLASSIFICATION	3.2469467074859084E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999852877544	WITHOUT_CLASSIFICATION	1.4712245557524211E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999970624852165	WITHOUT_CLASSIFICATION	2.9375147836507294E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999237921329316	WITHOUT_CLASSIFICATION	7.620786706841175E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999931901089488	WITHOUT_CLASSIFICATION	6.809891051202468E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999998750857714	WITHOUT_CLASSIFICATION	1.249142286295039E-7	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9998825390368546	WITHOUT_CLASSIFICATION	1.174609631453003E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999814009787	WITHOUT_CLASSIFICATION	1.8599021365141153E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999977741298486	WITHOUT_CLASSIFICATION	2.2258701513978535E-6	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999952402757699	WITHOUT_CLASSIFICATION	4.75972423003293E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999937563511	WITHOUT_CLASSIFICATION	6.243649009659344E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999977614591	WITHOUT_CLASSIFICATION	2.2385409941873277E-9	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999273931582	WITHOUT_CLASSIFICATION	7.2606841730842E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998970653101	WITHOUT_CLASSIFICATION	1.0293468991051852E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999941706189598	WITHOUT_CLASSIFICATION	5.8293810403166915E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999391244033062	WITHOUT_CLASSIFICATION	6.087559669370785E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999815143495628	WITHOUT_CLASSIFICATION	1.848565043712145E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999784758699	WITHOUT_CLASSIFICATION	2.152413021903269E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999998505151457	WITHOUT_CLASSIFICATION	1.4948485432729567E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999991443385072	WITHOUT_CLASSIFICATION	8.556614928212296E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999999998365313	WITHOUT_CLASSIFICATION	1.634686934206652E-9	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9884619425531397	WITHOUT_CLASSIFICATION	0.011538057446860282	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9884619425531397	WITHOUT_CLASSIFICATION	0.011538057446860282	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998034778157	WITHOUT_CLASSIFICATION	1.9652218441656553E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9884619425531397	WITHOUT_CLASSIFICATION	0.011538057446860282	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9884619425531397	WITHOUT_CLASSIFICATION	0.011538057446860282	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999767280637653	WITHOUT_CLASSIFICATION	2.3271936234794675E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999828599557	WITHOUT_CLASSIFICATION	1.7140044380558348E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993476656222	WITHOUT_CLASSIFICATION	6.523343778595526E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999991125345657	WITHOUT_CLASSIFICATION	8.874654343002369E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999996255199052	WITHOUT_CLASSIFICATION	3.7448009479725893E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999930358151579	WITHOUT_CLASSIFICATION	6.964184842083973E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995948405158754	WITHOUT_CLASSIFICATION	4.051594841246267E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999858221594	WITHOUT_CLASSIFICATION	1.4177840624769804E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999813339651376	WITHOUT_CLASSIFICATION	1.8666034862451973E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999641483327687	WITHOUT_CLASSIFICATION	3.58516672313729E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999915287750618	WITHOUT_CLASSIFICATION	8.47122493808924E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999926208410705	WITHOUT_CLASSIFICATION	7.379158929508842E-6	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996736714502	WITHOUT_CLASSIFICATION	3.263285498290749E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999897172622435	WITHOUT_CLASSIFICATION	1.0282737756434605E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999998658265971	WITHOUT_CLASSIFICATION	1.341734029946255E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999987118152435	WITHOUT_CLASSIFICATION	1.288184756496771E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998620802452	WITHOUT_CLASSIFICATION	1.37919754956545E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999991046942329	WITHOUT_CLASSIFICATION	8.95305766985901E-7	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999213894167722	WITHOUT_CLASSIFICATION	7.861058322778126E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999989353391343	WITHOUT_CLASSIFICATION	1.0646608657007397E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999976202473631	WITHOUT_CLASSIFICATION	2.3797526369043217E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999968941162374	WITHOUT_CLASSIFICATION	3.1058837626047578E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998620802452	WITHOUT_CLASSIFICATION	1.37919754956545E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999982759733703	WITHOUT_CLASSIFICATION	1.7240266296156365E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999285673867584	WITHOUT_CLASSIFICATION	7.143261324161267E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999965141551722	WITHOUT_CLASSIFICATION	3.4858448278967045E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989602389935	WITHOUT_CLASSIFICATION	1.0397610065220952E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999927174883053	WITHOUT_CLASSIFICATION	7.282511694748528E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999986696669972	WITHOUT_CLASSIFICATION	1.330333002779202E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999998881952227	WITHOUT_CLASSIFICATION	1.1180477732051159E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9968609296437413	WITHOUT_CLASSIFICATION	0.00313907035625879	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999938299080209	WITHOUT_CLASSIFICATION	6.17009197909654E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999925862980749	WITHOUT_CLASSIFICATION	7.413701925184858E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999378676333958	WITHOUT_CLASSIFICATION	6.213236660425174E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999999999915183	WITHOUT_CLASSIFICATION	8.481698549592001E-11	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999999477852697	WITHOUT_CLASSIFICATION	5.221473028093992E-8	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996184175197	WITHOUT_CLASSIFICATION	3.815824802958421E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999212353164246	WITHOUT_CLASSIFICATION	7.876468357541164E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999951767874	WITHOUT_CLASSIFICATION	4.823212659097525E-9	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999998698071573	WITHOUT_CLASSIFICATION	1.3019284276282868E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999071952174861	WITHOUT_CLASSIFICATION	9.280478251398177E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999957958927	WITHOUT_CLASSIFICATION	4.204107363237516E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999996437233246	WITHOUT_CLASSIFICATION	3.562766753414477E-7	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999907983079135	WITHOUT_CLASSIFICATION	9.201692086509454E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999961675554544	WITHOUT_CLASSIFICATION	3.832444545686729E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999993350933715	WITHOUT_CLASSIFICATION	6.649066284888631E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999938299080209	WITHOUT_CLASSIFICATION	6.17009197909654E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999932536858314	WITHOUT_CLASSIFICATION	6.746314168690772E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999917348034965	WITHOUT_CLASSIFICATION	8.265196503495224E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997823805241315	WITHOUT_CLASSIFICATION	2.1761947586851775E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999996322740106	WITHOUT_CLASSIFICATION	3.677259894649984E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991534751926	WITHOUT_CLASSIFICATION	8.465248074711901E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999995074593822	WITHOUT_CLASSIFICATION	4.92540617802673E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999993464987857	WITHOUT_CLASSIFICATION	6.535012142271743E-7	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999996041392619	WITHOUT_CLASSIFICATION	3.9586073817608473E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999990683435434	WITHOUT_CLASSIFICATION	9.316564566039343E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998925487160091	WITHOUT_CLASSIFICATION	1.0745128399094992E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991376283615	WITHOUT_CLASSIFICATION	8.623716385492994E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999540851223	WITHOUT_CLASSIFICATION	4.591487772977829E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9995479381983396	WITHOUT_CLASSIFICATION	4.5206180166042974E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999798267803	WITHOUT_CLASSIFICATION	2.017321963479623E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999997402375679	WITHOUT_CLASSIFICATION	2.597624321547227E-7	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999998091105929	WITHOUT_CLASSIFICATION	1.9088940710466235E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991376283615	WITHOUT_CLASSIFICATION	8.623716385492994E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999997732679	WITHOUT_CLASSIFICATION	2.2673205950032708E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999999751177264	WITHOUT_CLASSIFICATION	2.488227359208026E-7	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997636145121	WITHOUT_CLASSIFICATION	2.3638548785531712E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999976198217926	WITHOUT_CLASSIFICATION	2.3801782073963083E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999997259016469	WITHOUT_CLASSIFICATION	2.740983531791761E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999954213942565	WITHOUT_CLASSIFICATION	4.578605743604177E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999970524297905	WITHOUT_CLASSIFICATION	2.947570209417813E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998365090871	WITHOUT_CLASSIFICATION	1.6349091289541358E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999366583409	WITHOUT_CLASSIFICATION	6.334165920646795E-8	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987392957968795	WITHOUT_CLASSIFICATION	0.001260704203120507	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9744604103504764	WITHOUT_CLASSIFICATION	0.02553958964952362	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9903540051743619	WITHOUT_CLASSIFICATION	0.009645994825638184	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994117682655	WITHOUT_CLASSIFICATION	5.882317344925972E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999994117682655	WITHOUT_CLASSIFICATION	5.882317344925972E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999493310016	WITHOUT_CLASSIFICATION	5.066899850776872E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999997668177353	WITHOUT_CLASSIFICATION	2.3318226481151326E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999997620464445	WITHOUT_CLASSIFICATION	2.379535555899879E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997156269161	WITHOUT_CLASSIFICATION	2.843730838231312E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999935834777886	WITHOUT_CLASSIFICATION	6.4165222114915736E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999677082638	WITHOUT_CLASSIFICATION	3.229173616779091E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996313527906	WITHOUT_CLASSIFICATION	3.6864720946079614E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992838646011	WITHOUT_CLASSIFICATION	7.161353988610549E-7	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999998363919426	WITHOUT_CLASSIFICATION	1.6360805745162191E-7	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999591125656	WITHOUT_CLASSIFICATION	4.0887434459991876E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999677082638	WITHOUT_CLASSIFICATION	3.229173616779091E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996313527906	WITHOUT_CLASSIFICATION	3.6864720946079614E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992838646011	WITHOUT_CLASSIFICATION	7.161353988610549E-7	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999968118681	WITHOUT_CLASSIFICATION	3.188131750602918E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999197180815408	WITHOUT_CLASSIFICATION	8.028191845920225E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999986719386	WITHOUT_CLASSIFICATION	1.3280614265374623E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999998862186746	WITHOUT_CLASSIFICATION	1.1378132539592092E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999863434433	WITHOUT_CLASSIFICATION	1.3656556569958007E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999752873279	WITHOUT_CLASSIFICATION	2.4712672040747356E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999958746283617	WITHOUT_CLASSIFICATION	4.1253716383413765E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.999998206054748	WITHOUT_CLASSIFICATION	1.7939452520661263E-6	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999980564238292	WITHOUT_CLASSIFICATION	1.943576170684226E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999924723036095	WITHOUT_CLASSIFICATION	7.527696390387678E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999969050586	WITHOUT_CLASSIFICATION	3.0949414790851002E-9	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999946456169916	WITHOUT_CLASSIFICATION	5.3543830084102275E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999948426592489	WITHOUT_CLASSIFICATION	5.157340751065047E-6	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998655625739	WITHOUT_CLASSIFICATION	1.344374262111646E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999961224941307	WITHOUT_CLASSIFICATION	3.87750586926545E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999997862722884	WITHOUT_CLASSIFICATION	2.137277116096856E-7	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999980782881379	WITHOUT_CLASSIFICATION	1.921711862062424E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999776756857052	WITHOUT_CLASSIFICATION	2.232431429478804E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998090607104	WITHOUT_CLASSIFICATION	1.9093928950677854E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999982189933767	WITHOUT_CLASSIFICATION	1.781006623290148E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999784669725	WITHOUT_CLASSIFICATION	2.1533027531480637E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9818714433731685	WITHOUT_CLASSIFICATION	0.01812855662683147	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999742712136598	WITHOUT_CLASSIFICATION	2.5728786340281448E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999939959790213	WITHOUT_CLASSIFICATION	6.0040209787349985E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999996010601	WITHOUT_CLASSIFICATION	3.989399786104477E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992091873583906	WITHOUT_CLASSIFICATION	7.908126416093638E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999502016956	WITHOUT_CLASSIFICATION	4.979830432748121E-8	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986134602026	WITHOUT_CLASSIFICATION	1.3865397974224577E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999995735187	WITHOUT_CLASSIFICATION	4.264812956456106E-9	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999825040469	WITHOUT_CLASSIFICATION	1.7495953092013093E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992778660746	WITHOUT_CLASSIFICATION	7.221339253261592E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999387075372	WITHOUT_CLASSIFICATION	6.129246281130143E-8	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999387075372	WITHOUT_CLASSIFICATION	6.129246281130143E-8	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999995334826	WITHOUT_CLASSIFICATION	4.665173890485049E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999994941335	WITHOUT_CLASSIFICATION	5.058664260670533E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999841171889189	WITHOUT_CLASSIFICATION	1.5882811081150967E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999928821775688	WITHOUT_CLASSIFICATION	7.117822431137255E-6	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999799954512087	WITHOUT_CLASSIFICATION	2.000454879123959E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999916713529	WITHOUT_CLASSIFICATION	8.328647056736463E-9	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999980421718253	WITHOUT_CLASSIFICATION	1.957828174665218E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999975224315272	WITHOUT_CLASSIFICATION	2.477568472806852E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999961534820082	WITHOUT_CLASSIFICATION	3.84651799186002E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999924497233	WITHOUT_CLASSIFICATION	7.550276704179896E-8	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998058703216	WITHOUT_CLASSIFICATION	1.941296784506909E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999331323678	WITHOUT_CLASSIFICATION	6.686763218662512E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999291720507	WITHOUT_CLASSIFICATION	7.082794923394664E-8	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999986187703	WITHOUT_CLASSIFICATION	1.3812296967180776E-8	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999536709959	WITHOUT_CLASSIFICATION	4.6329004137085644E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999933294233	WITHOUT_CLASSIFICATION	6.670576701634303E-8	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994402063616	WITHOUT_CLASSIFICATION	5.59793638493177E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998482319022	WITHOUT_CLASSIFICATION	1.5176809775680397E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996429336262	WITHOUT_CLASSIFICATION	3.5706637375030775E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999519791573	WITHOUT_CLASSIFICATION	4.8020842820154805E-8	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999987640268804	WITHOUT_CLASSIFICATION	1.2359731196472027E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999990857393427	WITHOUT_CLASSIFICATION	9.142606574145222E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99999836894067	WITHOUT_CLASSIFICATION	1.6310593300883699E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999972433242691	WITHOUT_CLASSIFICATION	2.7566757309235574E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999579260357	WITHOUT_CLASSIFICATION	4.2073964222697355E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999906670868721	WITHOUT_CLASSIFICATION	9.332913127833557E-6	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998674081303	WITHOUT_CLASSIFICATION	1.325918696544199E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.996534521844144	WITHOUT_CLASSIFICATION	0.0034654781558560157	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99999836894067	WITHOUT_CLASSIFICATION	1.6310593300883699E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99999836894067	WITHOUT_CLASSIFICATION	1.6310593300883699E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9989840411600981	WITHOUT_CLASSIFICATION	0.001015958839901879	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999992474290735	WITHOUT_CLASSIFICATION	7.525709265028902E-7	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999986406177	WITHOUT_CLASSIFICATION	1.3593822286386703E-9	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999981841124739	WITHOUT_CLASSIFICATION	1.8158875261279345E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993949535607	WITHOUT_CLASSIFICATION	6.050464393662359E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999982189933767	WITHOUT_CLASSIFICATION	1.781006623290148E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999996633665209	WITHOUT_CLASSIFICATION	3.3663347914615827E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999981874743835	WITHOUT_CLASSIFICATION	1.8125256164838138E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999896697049	WITHOUT_CLASSIFICATION	1.0330295069493748E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890361617801	WITHOUT_CLASSIFICATION	1.0963838219820348E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9975086628102353	WITHOUT_CLASSIFICATION	0.002491337189764664	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976009647598	WITHOUT_CLASSIFICATION	2.3990352402169363E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999985318303188	WITHOUT_CLASSIFICATION	1.4681696812682767E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999985318303188	WITHOUT_CLASSIFICATION	1.4681696812682767E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998215437387	WITHOUT_CLASSIFICATION	1.7845626121258464E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999998215437387	WITHOUT_CLASSIFICATION	1.7845626121258464E-7	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989802263350701	WITHOUT_CLASSIFICATION	0.001019773664929963	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999985883748	WITHOUT_CLASSIFICATION	1.4116251659502834E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999998053571042	WITHOUT_CLASSIFICATION	1.946428957577266E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998617113355477	WITHOUT_CLASSIFICATION	1.382886644523536E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999981826547908	WITHOUT_CLASSIFICATION	1.817345209160088E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999883779821831	WITHOUT_CLASSIFICATION	1.162201781688158E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983040825746	WITHOUT_CLASSIFICATION	1.6959174253487062E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999041612008	WITHOUT_CLASSIFICATION	9.583879911446216E-8	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999964125075	WITHOUT_CLASSIFICATION	3.5874926734342613E-9	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999876481072	WITHOUT_CLASSIFICATION	1.2351892806336461E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999999340084	WITHOUT_CLASSIFICATION	6.599160345853796E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999904908946264	WITHOUT_CLASSIFICATION	9.509105373601786E-6	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998388992730417	WITHOUT_CLASSIFICATION	1.6110072695832176E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998361818139	WITHOUT_CLASSIFICATION	1.6381818612796347E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999963900941967	WITHOUT_CLASSIFICATION	3.6099058032483517E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999970804851505	WITHOUT_CLASSIFICATION	2.9195148495131204E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999970804851505	WITHOUT_CLASSIFICATION	2.9195148495131204E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997784601082	WITHOUT_CLASSIFICATION	2.2153989169194986E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999908382884	WITHOUT_CLASSIFICATION	9.161711508424287E-9	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999999987514	WITHOUT_CLASSIFICATION	1.2486085871318943E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999961712916399	WITHOUT_CLASSIFICATION	3.828708360164312E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997722330015	WITHOUT_CLASSIFICATION	2.2776699849506367E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978958983531	WITHOUT_CLASSIFICATION	2.104101646938171E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999967876381285	WITHOUT_CLASSIFICATION	3.2123618715565064E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970521253891126	WITHOUT_CLASSIFICATION	0.002947874610887405	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9891483938790573	WITHOUT_CLASSIFICATION	0.01085160612094265	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999583002687	WITHOUT_CLASSIFICATION	4.169973127309424E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999786872026	WITHOUT_CLASSIFICATION	2.131279741449526E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9955747375573231	WITHOUT_CLASSIFICATION	0.004425262442676928	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999341242614	WITHOUT_CLASSIFICATION	6.587573862371181E-8	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997538769467	WITHOUT_CLASSIFICATION	2.4612305326374535E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999693140872526	WITHOUT_CLASSIFICATION	3.0685912747367585E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999981990749517	WITHOUT_CLASSIFICATION	1.8009250482431933E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999953516255	WITHOUT_CLASSIFICATION	4.6483745094480844E-8	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999971946878011	WITHOUT_CLASSIFICATION	2.805312198853132E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999957934124867	WITHOUT_CLASSIFICATION	4.206587513295066E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999998302071832	WITHOUT_CLASSIFICATION	1.69792816859439E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999961806	WITHOUT_CLASSIFICATION	3.819301309526E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999946412391	WITHOUT_CLASSIFICATION	5.3587609091636194E-9	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999415629709	WITHOUT_CLASSIFICATION	5.843702910426478E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998197594596	WITHOUT_CLASSIFICATION	1.8024054036616337E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999989423800627	WITHOUT_CLASSIFICATION	1.0576199373072403E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999980027951195	WITHOUT_CLASSIFICATION	1.9972048805381124E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997823423185	WITHOUT_CLASSIFICATION	2.1765768165231935E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999999696888121	WITHOUT_CLASSIFICATION	3.031118782078257E-8	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999480845	WITHOUT_CLASSIFICATION	5.1915505411249543E-11	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999900054239461	WITHOUT_CLASSIFICATION	9.994576053880281E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999961401	WITHOUT_CLASSIFICATION	3.859899002085331E-12	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996213887237	WITHOUT_CLASSIFICATION	3.786112763410218E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999991369618756	WITHOUT_CLASSIFICATION	8.630381243203552E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9988610313649405	WITHOUT_CLASSIFICATION	0.0011389686350594913	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999829873527	WITHOUT_CLASSIFICATION	1.701264725786368E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999994972080797	WITHOUT_CLASSIFICATION	5.027919203819409E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998897787771	WITHOUT_CLASSIFICATION	1.10221222885947E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999346078108008	WITHOUT_CLASSIFICATION	6.539218919923962E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999929712777	WITHOUT_CLASSIFICATION	7.028722293763602E-9	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9994628652619714	WITHOUT_CLASSIFICATION	5.371347380285895E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999875783591	WITHOUT_CLASSIFICATION	1.2421640847694116E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999980394645066	WITHOUT_CLASSIFICATION	1.9605354934285686E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9996295761100816	WITHOUT_CLASSIFICATION	3.704238899183422E-4	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999923031322521	WITHOUT_CLASSIFICATION	7.69686774799064E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999992268896	WITHOUT_CLASSIFICATION	7.731102829444659E-10	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999987222061709	WITHOUT_CLASSIFICATION	1.2777938290438333E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998049718777	WITHOUT_CLASSIFICATION	1.95028122306396E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999981104822963	WITHOUT_CLASSIFICATION	1.8895177037548114E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999987043794846	WITHOUT_CLASSIFICATION	1.2956205154441874E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999992415210368	WITHOUT_CLASSIFICATION	7.584789630927818E-7	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999379280713682	WITHOUT_CLASSIFICATION	6.207192863182759E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998984843637144	WITHOUT_CLASSIFICATION	1.0151563628559806E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999178080775375	WITHOUT_CLASSIFICATION	8.219192246243173E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999495655605805	WITHOUT_CLASSIFICATION	5.043443941956953E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999717858143893	WITHOUT_CLASSIFICATION	2.8214185610696858E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999990562340335	WITHOUT_CLASSIFICATION	9.437659665048912E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9937807292617025	WITHOUT_CLASSIFICATION	0.006219270738297555	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.999999284529541	WITHOUT_CLASSIFICATION	7.154704589276451E-7	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999863856185	WITHOUT_CLASSIFICATION	1.361438155729855E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998865241652463	WITHOUT_CLASSIFICATION	1.1347583475379948E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999450572601	WITHOUT_CLASSIFICATION	5.494273996746658E-8	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999995579036162	WITHOUT_CLASSIFICATION	4.420963838117145E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999999895005	WITHOUT_CLASSIFICATION	1.0499502246989863E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999341097748	WITHOUT_CLASSIFICATION	6.589022509407806E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999985872863	WITHOUT_CLASSIFICATION	1.4127137909112874E-9	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999995315477641	WITHOUT_CLASSIFICATION	4.684522358192986E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999326263198	WITHOUT_CLASSIFICATION	6.737368023689507E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999992109533593	WITHOUT_CLASSIFICATION	7.890466406200756E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987011970811	WITHOUT_CLASSIFICATION	1.2988029188936262E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987011970811	WITHOUT_CLASSIFICATION	1.2988029188936262E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997421149389	WITHOUT_CLASSIFICATION	2.578850611638854E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999511074408	WITHOUT_CLASSIFICATION	4.889255921679499E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999901433487	WITHOUT_CLASSIFICATION	9.856651189244968E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999982837613454	WITHOUT_CLASSIFICATION	1.7162386546289974E-6	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999308607345	WITHOUT_CLASSIFICATION	6.9139265479077E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999435383493771	WITHOUT_CLASSIFICATION	5.646165062289106E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999977302759	WITHOUT_CLASSIFICATION	2.2697240835767917E-9	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999992058969	WITHOUT_CLASSIFICATION	7.941031436702013E-10	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999777982706951	WITHOUT_CLASSIFICATION	2.220172930490349E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999852451784	WITHOUT_CLASSIFICATION	1.4754821663249515E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999982503840769	WITHOUT_CLASSIFICATION	1.749615923059001E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999987830811339	WITHOUT_CLASSIFICATION	1.2169188661342098E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999996954910314	WITHOUT_CLASSIFICATION	3.045089686519708E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999992132749	WITHOUT_CLASSIFICATION	7.867250809567374E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999998482371999	WITHOUT_CLASSIFICATION	1.5176280009398265E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9975866725024921	WITHOUT_CLASSIFICATION	0.00241332749750777	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999791711458331	WITHOUT_CLASSIFICATION	2.082885416697745E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9988752212776632	WITHOUT_CLASSIFICATION	0.0011247787223368634	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9994290964098401	WITHOUT_CLASSIFICATION	5.709035901599198E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999998116499069	WITHOUT_CLASSIFICATION	1.8835009302055035E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999997279750791	WITHOUT_CLASSIFICATION	2.7202492099540006E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999988194535183	WITHOUT_CLASSIFICATION	1.1805464816517613E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999979960907184	WITHOUT_CLASSIFICATION	2.0039092815783343E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998854806467715	WITHOUT_CLASSIFICATION	1.1451935322857575E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998388235011	WITHOUT_CLASSIFICATION	1.6117649887337214E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999825804394198	WITHOUT_CLASSIFICATION	1.7419560580255844E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999782136044323	WITHOUT_CLASSIFICATION	2.178639556765976E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999908696896	WITHOUT_CLASSIFICATION	9.13031033472432E-9	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999995776303136	WITHOUT_CLASSIFICATION	4.2236968651315206E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999953578168891	WITHOUT_CLASSIFICATION	4.642183110939827E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999999537333332	WITHOUT_CLASSIFICATION	4.626666679994574E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999996764725971	WITHOUT_CLASSIFICATION	3.2352740290781594E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999992902433297	WITHOUT_CLASSIFICATION	7.097566702938711E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999975581295691	WITHOUT_CLASSIFICATION	2.441870430898548E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999941766967071	WITHOUT_CLASSIFICATION	5.8233032929086625E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999941766967071	WITHOUT_CLASSIFICATION	5.8233032929086625E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999985134142861	WITHOUT_CLASSIFICATION	1.4865857139564493E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999850080457297	WITHOUT_CLASSIFICATION	1.499195427030737E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999828189259	WITHOUT_CLASSIFICATION	1.718107417265523E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999903821293772	WITHOUT_CLASSIFICATION	9.617870622903512E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999994315877	WITHOUT_CLASSIFICATION	5.684122142935502E-10	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999998704101202	WITHOUT_CLASSIFICATION	1.2958987979743345E-7	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999997432408125	WITHOUT_CLASSIFICATION	2.5675918740535905E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999700694349	WITHOUT_CLASSIFICATION	2.993056506760359E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999998947146465	WITHOUT_CLASSIFICATION	1.0528535350837667E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999984353364	WITHOUT_CLASSIFICATION	1.5646635937478137E-8	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999830839531316	WITHOUT_CLASSIFICATION	1.6916046868371135E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999734298963368	WITHOUT_CLASSIFICATION	2.657010366318514E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999972207255	WITHOUT_CLASSIFICATION	2.779274419059991E-9	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999792389115401	WITHOUT_CLASSIFICATION	2.076108845997586E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999999827237824	WITHOUT_CLASSIFICATION	1.7276217602897948E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994375061070114	WITHOUT_CLASSIFICATION	5.624938929885183E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994375061070114	WITHOUT_CLASSIFICATION	5.624938929885183E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999989576639803	WITHOUT_CLASSIFICATION	1.0423360197817558E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999021101293	WITHOUT_CLASSIFICATION	9.788987073884469E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999957130355365	WITHOUT_CLASSIFICATION	4.286964463566808E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999561137136	WITHOUT_CLASSIFICATION	4.3886286428749865E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999861552095946	WITHOUT_CLASSIFICATION	1.3844790405408266E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999998958722536	WITHOUT_CLASSIFICATION	1.041277464349857E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999815990597	WITHOUT_CLASSIFICATION	1.840094031544274E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999815990597	WITHOUT_CLASSIFICATION	1.840094031544274E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999997849092918	WITHOUT_CLASSIFICATION	2.1509070819499942E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996691615062	WITHOUT_CLASSIFICATION	3.308384937201611E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999988029273412	WITHOUT_CLASSIFICATION	1.1970726588151232E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999979520131	WITHOUT_CLASSIFICATION	2.0479869061790763E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999995114647476	WITHOUT_CLASSIFICATION	4.885352522925753E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999773605455139	WITHOUT_CLASSIFICATION	2.2639454486026638E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999064896839095	WITHOUT_CLASSIFICATION	9.351031609054589E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997518633193975	WITHOUT_CLASSIFICATION	2.4813668060253135E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983902254168	WITHOUT_CLASSIFICATION	1.6097745831437729E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999645296537324	WITHOUT_CLASSIFICATION	3.5470346267570204E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99744639886181	WITHOUT_CLASSIFICATION	0.0025536011381900024	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999930817902353	WITHOUT_CLASSIFICATION	6.918209764667498E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999768425112	WITHOUT_CLASSIFICATION	2.3157488716333206E-8	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999999967536725	WITHOUT_CLASSIFICATION	3.2463274960324814E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999621423182	WITHOUT_CLASSIFICATION	3.7857681737512753E-8	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999857100961	WITHOUT_CLASSIFICATION	1.4289904014834887E-8	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999994101098	WITHOUT_CLASSIFICATION	5.89890359927619E-10	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999983811534007	WITHOUT_CLASSIFICATION	1.6188465993254354E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999861862881239	WITHOUT_CLASSIFICATION	1.3813711876117592E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999422415796162	WITHOUT_CLASSIFICATION	5.775842038379805E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999615989884	WITHOUT_CLASSIFICATION	3.840101163653206E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998443067231	WITHOUT_CLASSIFICATION	1.556932769745377E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999959023613886	WITHOUT_CLASSIFICATION	4.097638611386064E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997491474305	WITHOUT_CLASSIFICATION	2.508525694267245E-7	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999995216013557	WITHOUT_CLASSIFICATION	4.783986442588721E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999793529926768	WITHOUT_CLASSIFICATION	2.064700732316744E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999849782716598	WITHOUT_CLASSIFICATION	1.5021728340295673E-5	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9996458612040292	WITHOUT_CLASSIFICATION	3.5413879597069993E-4	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998709541037291	WITHOUT_CLASSIFICATION	1.2904589627092458E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999663815264	WITHOUT_CLASSIFICATION	3.3618473619513775E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999502779009332	WITHOUT_CLASSIFICATION	4.972209906688318E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999999567677335	WITHOUT_CLASSIFICATION	4.3232266656346705E-8	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997746015141	WITHOUT_CLASSIFICATION	2.2539848591187674E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999986684690686	WITHOUT_CLASSIFICATION	1.331530931356426E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999872108711632	WITHOUT_CLASSIFICATION	1.278912883688875E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999858210472	WITHOUT_CLASSIFICATION	1.4178952693794275E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.999999939281389	WITHOUT_CLASSIFICATION	6.071861102971576E-8	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.999999990373413	WITHOUT_CLASSIFICATION	9.62658695515415E-9	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999961560035	WITHOUT_CLASSIFICATION	3.843996439574453E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999502989222	WITHOUT_CLASSIFICATION	4.970107770177384E-8	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999938230881	WITHOUT_CLASSIFICATION	6.17691181938534E-9	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.999998129384156	WITHOUT_CLASSIFICATION	1.8706158440115891E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999998842609793	WITHOUT_CLASSIFICATION	1.1573902070336963E-6	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999264295707	WITHOUT_CLASSIFICATION	7.357042929402276E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999818421	WITHOUT_CLASSIFICATION	1.815784863191203E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994217433838889	WITHOUT_CLASSIFICATION	5.782566161110923E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999961560035	WITHOUT_CLASSIFICATION	3.843996439574453E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999502989222	WITHOUT_CLASSIFICATION	4.970107770177384E-8	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999933506017291	WITHOUT_CLASSIFICATION	6.649398270900069E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999614417336878	WITHOUT_CLASSIFICATION	3.855826631212467E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999986929514	WITHOUT_CLASSIFICATION	1.3070485778714164E-9	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9996249261819458	WITHOUT_CLASSIFICATION	3.7507381805424616E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990679167059	WITHOUT_CLASSIFICATION	9.320832941268253E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998693030375	WITHOUT_CLASSIFICATION	1.3069696247913852E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9891131499696475	WITHOUT_CLASSIFICATION	0.01088685003035254	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.999999859877389	WITHOUT_CLASSIFICATION	1.4012261106359503E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999906824746134	WITHOUT_CLASSIFICATION	9.31752538662695E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8579440403229183	WITHOUT_CLASSIFICATION	0.1420559596770818	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999154099	WITHOUT_CLASSIFICATION	8.459007517793114E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8579440403229183	WITHOUT_CLASSIFICATION	0.1420559596770818	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999995923033979	WITHOUT_CLASSIFICATION	4.0769660204953103E-7	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.99999958926334	WITHOUT_CLASSIFICATION	4.1073666001758143E-7	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999998925421951	WITHOUT_CLASSIFICATION	1.0745780480966682E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999047550259	WITHOUT_CLASSIFICATION	9.524497401129413E-8	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999996221375546	WITHOUT_CLASSIFICATION	3.778624454257285E-7	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999924682539327	WITHOUT_CLASSIFICATION	7.531746067247528E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999924682539327	WITHOUT_CLASSIFICATION	7.531746067247528E-6	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999420806542	WITHOUT_CLASSIFICATION	5.791934577352624E-8	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998138769299	WITHOUT_CLASSIFICATION	1.8612306996686123E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999996951023928	WITHOUT_CLASSIFICATION	3.0489760720384715E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999855487222785	WITHOUT_CLASSIFICATION	1.4451277721372293E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999603459521	WITHOUT_CLASSIFICATION	3.9654047901521453E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999925875315775	WITHOUT_CLASSIFICATION	7.412468422468572E-6	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999993851150238	WITHOUT_CLASSIFICATION	6.148849761242343E-7	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999805291159	WITHOUT_CLASSIFICATION	1.9470884125384218E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.999999944591824	WITHOUT_CLASSIFICATION	5.540817592144208E-8	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999981476781984	WITHOUT_CLASSIFICATION	1.8523218015549686E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999999352849073	WITHOUT_CLASSIFICATION	6.471509270420316E-8	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999777493721587	WITHOUT_CLASSIFICATION	2.2250627841296936E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999866302187893	WITHOUT_CLASSIFICATION	1.3369781210719417E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999395575032	WITHOUT_CLASSIFICATION	6.044249681573745E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999935779695744	WITHOUT_CLASSIFICATION	6.422030425473873E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999993465508392	WITHOUT_CLASSIFICATION	6.534491607671301E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999984834853761	WITHOUT_CLASSIFICATION	1.5165146238788117E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999960436715093	WITHOUT_CLASSIFICATION	3.95632849078762E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999693700015	WITHOUT_CLASSIFICATION	3.062999859328881E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999966282460521	WITHOUT_CLASSIFICATION	3.37175394783167E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999907033574511	WITHOUT_CLASSIFICATION	9.296642548947127E-6	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999920428026428	WITHOUT_CLASSIFICATION	7.957197357314166E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999189046989846	WITHOUT_CLASSIFICATION	8.109530101542573E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999783875550279	WITHOUT_CLASSIFICATION	2.161244497216195E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999831354255934	WITHOUT_CLASSIFICATION	1.6864574406602405E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999996630380328	WITHOUT_CLASSIFICATION	3.3696196716050894E-7	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999986977185538	WITHOUT_CLASSIFICATION	1.3022814462850224E-6	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999058321229266	WITHOUT_CLASSIFICATION	9.416787707333885E-5	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9981481267158799	WITHOUT_CLASSIFICATION	0.0018518732841200426	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9974691601214686	WITHOUT_CLASSIFICATION	0.002530839878531461	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9893081770055416	WITHOUT_CLASSIFICATION	0.0106918229944585	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999018783237333	WITHOUT_CLASSIFICATION	9.812167626656117E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999993851150238	WITHOUT_CLASSIFICATION	6.148849761242343E-7	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999986177003033	WITHOUT_CLASSIFICATION	1.3822996967175236E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999446090471336	WITHOUT_CLASSIFICATION	5.539095286643973E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9986518412615913	WITHOUT_CLASSIFICATION	0.0013481587384086453	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999997051100379	WITHOUT_CLASSIFICATION	2.948899621926189E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998609561344923	WITHOUT_CLASSIFICATION	1.3904386550777454E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999986859302117	WITHOUT_CLASSIFICATION	1.3140697882847703E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999855487222785	WITHOUT_CLASSIFICATION	1.4451277721372293E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999855487222785	WITHOUT_CLASSIFICATION	1.4451277721372293E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999926646731719	WITHOUT_CLASSIFICATION	7.335326828100703E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999902644083423	WITHOUT_CLASSIFICATION	9.735591657738618E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999992314783128	WITHOUT_CLASSIFICATION	7.685216870433598E-7	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999452794394627	WITHOUT_CLASSIFICATION	5.472056053725467E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993699194140427	WITHOUT_CLASSIFICATION	6.300805859571685E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999997478734469	WITHOUT_CLASSIFICATION	2.5212655316843934E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999917048777	WITHOUT_CLASSIFICATION	8.29512214741297E-9	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999349859283	WITHOUT_CLASSIFICATION	6.50140716878915E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.99998799235839	WITHOUT_CLASSIFICATION	1.2007641609935963E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999966605002	WITHOUT_CLASSIFICATION	3.339499696123743E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.99999743352491	WITHOUT_CLASSIFICATION	2.566475089947925E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999169051044993	WITHOUT_CLASSIFICATION	8.309489550063945E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999998912604434	WITHOUT_CLASSIFICATION	1.0873955667956765E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999966605002	WITHOUT_CLASSIFICATION	3.339499696123743E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999999077675353	WITHOUT_CLASSIFICATION	9.223246461353678E-8	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998418926743502	WITHOUT_CLASSIFICATION	1.5810732564986013E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999989187762156	WITHOUT_CLASSIFICATION	1.08122378439443E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8879938623480801	WITHOUT_CLASSIFICATION	0.1120061376519198	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999169051044993	WITHOUT_CLASSIFICATION	8.309489550063945E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999651951917	WITHOUT_CLASSIFICATION	3.4804808296564795E-8	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999963801719	WITHOUT_CLASSIFICATION	3.6198280976207847E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999904021342	WITHOUT_CLASSIFICATION	9.597865938183833E-9	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999998668	WITHOUT_CLASSIFICATION	1.33158278716564E-13	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999765270961295	WITHOUT_CLASSIFICATION	2.3472903870474667E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999903793263	WITHOUT_CLASSIFICATION	9.620673684894654E-9	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999992578884	WITHOUT_CLASSIFICATION	7.421115630575652E-10	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997781543194	WITHOUT_CLASSIFICATION	2.2184568053179255E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997878021055523	WITHOUT_CLASSIFICATION	2.1219789444780764E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999922666623212	WITHOUT_CLASSIFICATION	7.733337678789348E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999995254123082	WITHOUT_CLASSIFICATION	4.7458769183750436E-7	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999898100261054	WITHOUT_CLASSIFICATION	1.0189973894658576E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999966605002	WITHOUT_CLASSIFICATION	3.339499696123743E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999651951917	WITHOUT_CLASSIFICATION	3.4804808296564795E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999904021342	WITHOUT_CLASSIFICATION	9.597865938183833E-9	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.99999969911493	WITHOUT_CLASSIFICATION	3.0088506991884143E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999028247559	WITHOUT_CLASSIFICATION	9.717524418281394E-8	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999956767394	WITHOUT_CLASSIFICATION	4.323260598371645E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999169051044993	WITHOUT_CLASSIFICATION	8.309489550063945E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999953191744817	WITHOUT_CLASSIFICATION	4.68082551823994E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999188065918	WITHOUT_CLASSIFICATION	8.119340819354466E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999719450466397	WITHOUT_CLASSIFICATION	2.8054953360435206E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999987012781982	WITHOUT_CLASSIFICATION	1.2987218017700541E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997781543194	WITHOUT_CLASSIFICATION	2.2184568053179255E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999999077675353	WITHOUT_CLASSIFICATION	9.223246461353678E-8	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999995527029873	WITHOUT_CLASSIFICATION	4.4729701271889455E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999991943856532	WITHOUT_CLASSIFICATION	8.056143467581424E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999998094286703	WITHOUT_CLASSIFICATION	1.9057132973068794E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999858691068323	WITHOUT_CLASSIFICATION	1.4130893167746716E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.936359903934187	WITHOUT_CLASSIFICATION	0.06364009606581293	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9966468264367548	WITHOUT_CLASSIFICATION	0.003353173563245251	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999838964377307	WITHOUT_CLASSIFICATION	1.6103562269248713E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999047550259	WITHOUT_CLASSIFICATION	9.524497401129413E-8	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999613157596	WITHOUT_CLASSIFICATION	3.86842403024357E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998346260026	WITHOUT_CLASSIFICATION	1.653739974384315E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999994820361359	WITHOUT_CLASSIFICATION	5.179638641306305E-7	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999837149619	WITHOUT_CLASSIFICATION	1.628503807494967E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999745723954	WITHOUT_CLASSIFICATION	2.5427604604968848E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999902210273	WITHOUT_CLASSIFICATION	9.778972751083181E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999591225914	WITHOUT_CLASSIFICATION	4.0877408602987396E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999993694905716	WITHOUT_CLASSIFICATION	6.305094283750503E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999987012781982	WITHOUT_CLASSIFICATION	1.2987218017700541E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999935081196548	WITHOUT_CLASSIFICATION	6.491880345071098E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999999846656615	WITHOUT_CLASSIFICATION	1.533433850375898E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999957660366622	WITHOUT_CLASSIFICATION	4.233963337871131E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999997307803219	WITHOUT_CLASSIFICATION	2.69219678030543E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.999974568796966	WITHOUT_CLASSIFICATION	2.5431203034027407E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999978337296941	WITHOUT_CLASSIFICATION	2.1662703060005273E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999977866916914	WITHOUT_CLASSIFICATION	2.2133083085951085E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997143809069734	WITHOUT_CLASSIFICATION	2.856190930266873E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999467762037	WITHOUT_CLASSIFICATION	5.322379615612383E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999968128351647	WITHOUT_CLASSIFICATION	3.1871648352769313E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999999811382117	WITHOUT_CLASSIFICATION	1.886178831114388E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999983855897	WITHOUT_CLASSIFICATION	1.614410297081554E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999541272882294	WITHOUT_CLASSIFICATION	4.587271177051231E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999984683340688	WITHOUT_CLASSIFICATION	1.5316659311872481E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999657373666	WITHOUT_CLASSIFICATION	3.4262633350234154E-8	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999419055207	WITHOUT_CLASSIFICATION	5.8094479248884764E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999941293499	WITHOUT_CLASSIFICATION	5.870650086985721E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999421816975	WITHOUT_CLASSIFICATION	5.781830244267546E-8	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999992939350885	WITHOUT_CLASSIFICATION	7.060649115264487E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999962127932905	WITHOUT_CLASSIFICATION	3.787206709512057E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999998698363124	WITHOUT_CLASSIFICATION	1.301636876176547E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999225253917	WITHOUT_CLASSIFICATION	7.747460824666616E-8	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999126826783	WITHOUT_CLASSIFICATION	8.731732169986279E-8	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999991715335	WITHOUT_CLASSIFICATION	8.284664965780602E-9	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999850050706	WITHOUT_CLASSIFICATION	1.499492942961806E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7744868367433886	WITHOUT_CLASSIFICATION	0.22551316325661144	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9978757635071186	WITHOUT_CLASSIFICATION	0.002124236492881284	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999978549764703	WITHOUT_CLASSIFICATION	2.1450235296832984E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999991951395443	WITHOUT_CLASSIFICATION	8.048604557622744E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6245294198881529	IMPLEMENTATION	0.37547058011184725	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999974111402	WITHOUT_CLASSIFICATION	2.5888598078124795E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999936553777325	WITHOUT_CLASSIFICATION	6.344622267524172E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999163140316	WITHOUT_CLASSIFICATION	8.36859683922848E-8	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999914292485747	WITHOUT_CLASSIFICATION	8.57075142528914E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999972037585	WITHOUT_CLASSIFICATION	2.7962414761453617E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.99999931968854	WITHOUT_CLASSIFICATION	6.803114600562242E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999925441228	WITHOUT_CLASSIFICATION	7.455877261041975E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999978886228339	WITHOUT_CLASSIFICATION	2.111377166191132E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.99999931968854	WITHOUT_CLASSIFICATION	6.803114600562242E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999972037585	WITHOUT_CLASSIFICATION	2.7962414761453617E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999925441228	WITHOUT_CLASSIFICATION	7.455877261041975E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999990552822163	WITHOUT_CLASSIFICATION	9.44717783570737E-7	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999499121988	WITHOUT_CLASSIFICATION	5.008780119625244E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999506678087	WITHOUT_CLASSIFICATION	4.9332191421236214E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999996529874419	WITHOUT_CLASSIFICATION	3.4701255815689316E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999873923423	WITHOUT_CLASSIFICATION	1.2607657604639235E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9551401438123509	IMPLEMENTATION	0.044859856187649066	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9996824284691206	WITHOUT_CLASSIFICATION	3.175715308794158E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9992519239588075	WITHOUT_CLASSIFICATION	7.480760411924507E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999963119962378	WITHOUT_CLASSIFICATION	3.688003762253823E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999995651070265	WITHOUT_CLASSIFICATION	4.3489297353492517E-7	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999997454447994	WITHOUT_CLASSIFICATION	2.5455520058151197E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999893935506795	WITHOUT_CLASSIFICATION	1.0606449320530772E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999014838035016	WITHOUT_CLASSIFICATION	9.851619649827997E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999981530343072	WITHOUT_CLASSIFICATION	1.846965692910935E-6	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9973357081512726	WITHOUT_CLASSIFICATION	0.0026642918487273935	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999999989874358	WITHOUT_CLASSIFICATION	1.0125641932387306E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999968986722	WITHOUT_CLASSIFICATION	3.101327768237302E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999882023141	WITHOUT_CLASSIFICATION	1.1797685852455268E-8	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999657625617	WITHOUT_CLASSIFICATION	3.4237438338601624E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997440173335	WITHOUT_CLASSIFICATION	2.559826665309666E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9972305284350108	WITHOUT_CLASSIFICATION	0.0027694715649891804	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999994688993	WITHOUT_CLASSIFICATION	5.311006878414532E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999996525381971	WITHOUT_CLASSIFICATION	3.4746180289824095E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998212052709	WITHOUT_CLASSIFICATION	1.787947291437037E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99999982635878	WITHOUT_CLASSIFICATION	1.7364121993843165E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99999982635878	WITHOUT_CLASSIFICATION	1.7364121993843165E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999981280886	WITHOUT_CLASSIFICATION	1.87191137211959E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999981280886	WITHOUT_CLASSIFICATION	1.87191137211959E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9940681530249853	WITHOUT_CLASSIFICATION	0.005931846975014693	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999968986722	WITHOUT_CLASSIFICATION	3.101327768237302E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999994087555468	WITHOUT_CLASSIFICATION	5.912444531225482E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999942514497366	WITHOUT_CLASSIFICATION	5.74855026340296E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992479040929	WITHOUT_CLASSIFICATION	7.520959071414188E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999992479040929	WITHOUT_CLASSIFICATION	7.520959071414188E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999927088068319	WITHOUT_CLASSIFICATION	7.291193168089599E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999986463477429	WITHOUT_CLASSIFICATION	1.3536522570829783E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999869866886	WITHOUT_CLASSIFICATION	1.3013311503522495E-8	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999920119232809	WITHOUT_CLASSIFICATION	7.988076719062403E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999791547464427	WITHOUT_CLASSIFICATION	2.0845253557233326E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999990912209841	WITHOUT_CLASSIFICATION	9.087790158496683E-7	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999974942444967	WITHOUT_CLASSIFICATION	2.505755503420315E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999909517084815	WITHOUT_CLASSIFICATION	9.048291518483443E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999505494205042	WITHOUT_CLASSIFICATION	4.945057949582213E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999944589656555	WITHOUT_CLASSIFICATION	5.541034344439799E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999975166883811	WITHOUT_CLASSIFICATION	2.4833116189417185E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999142217869381	WITHOUT_CLASSIFICATION	8.577821306190651E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999323769417	WITHOUT_CLASSIFICATION	6.762305818191829E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999995020038528	WITHOUT_CLASSIFICATION	4.979961471075888E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999789492720924	WITHOUT_CLASSIFICATION	2.1050727907546315E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999963844090666	WITHOUT_CLASSIFICATION	3.615590933430267E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999694691295	WITHOUT_CLASSIFICATION	3.0530870493493944E-7	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999786753223047	WITHOUT_CLASSIFICATION	2.1324677695294496E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998718232060129	WITHOUT_CLASSIFICATION	1.2817679398707504E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999990643468094	WITHOUT_CLASSIFICATION	9.35653190616008E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.99981619951402	WITHOUT_CLASSIFICATION	1.838004859799792E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999845230858	WITHOUT_CLASSIFICATION	1.5476914188339277E-8	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999978892768967	WITHOUT_CLASSIFICATION	2.1107231033234925E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999993858427055	WITHOUT_CLASSIFICATION	6.141572944098416E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999928821775688	WITHOUT_CLASSIFICATION	7.117822431137255E-6	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997457992931	WITHOUT_CLASSIFICATION	2.542007068525788E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999983855897	WITHOUT_CLASSIFICATION	1.614410297081554E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999998209888493	WITHOUT_CLASSIFICATION	1.790111507008339E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999999489383206	WITHOUT_CLASSIFICATION	5.106167940583398E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996910314337	WITHOUT_CLASSIFICATION	3.089685663235484E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717072638827	WITHOUT_CLASSIFICATION	2.8292736117193323E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999980880302056	WITHOUT_CLASSIFICATION	1.9119697943337513E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999980880302056	WITHOUT_CLASSIFICATION	1.9119697943337513E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995653607532	WITHOUT_CLASSIFICATION	4.3463924669097507E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999998490228327	WITHOUT_CLASSIFICATION	1.5097716723988543E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999494655007	WITHOUT_CLASSIFICATION	5.0534499187436074E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999494655007	WITHOUT_CLASSIFICATION	5.0534499187436074E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999557081063137	WITHOUT_CLASSIFICATION	4.429189368627588E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999917185833126	WITHOUT_CLASSIFICATION	8.28141668739297E-6	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999978135188478	WITHOUT_CLASSIFICATION	2.186481152238671E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993949535607	WITHOUT_CLASSIFICATION	6.050464393662359E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999968568723321	WITHOUT_CLASSIFICATION	3.1431276680096515E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999626376115	WITHOUT_CLASSIFICATION	3.7362388516683386E-8	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999504741532337	WITHOUT_CLASSIFICATION	4.9525846766249055E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999955058122009	WITHOUT_CLASSIFICATION	4.494187799160208E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999804018854	WITHOUT_CLASSIFICATION	1.9598114554096917E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999804018854	WITHOUT_CLASSIFICATION	1.9598114554096917E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999939792046032	WITHOUT_CLASSIFICATION	6.020795396712869E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999529517622	WITHOUT_CLASSIFICATION	4.704823771891682E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999529517622	WITHOUT_CLASSIFICATION	4.704823771891682E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999895331544	WITHOUT_CLASSIFICATION	1.046684564800679E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999692141	WITHOUT_CLASSIFICATION	3.078594409589849E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.998799475904472	WITHOUT_CLASSIFICATION	0.0012005240955279993	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997391351678	WITHOUT_CLASSIFICATION	2.6086483215977474E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997986928373	WITHOUT_CLASSIFICATION	2.0130716278461988E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999980210983	WITHOUT_CLASSIFICATION	1.9789016504450773E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999828785136325	WITHOUT_CLASSIFICATION	1.712148636751467E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999657397111881	WITHOUT_CLASSIFICATION	3.4260288811841556E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999992950002976	WITHOUT_CLASSIFICATION	7.049997023921434E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997061975797519	WITHOUT_CLASSIFICATION	2.938024202480609E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999996010492598	WITHOUT_CLASSIFICATION	3.989507402629065E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998432759640189	WITHOUT_CLASSIFICATION	1.5672403598112646E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949013791903	WITHOUT_CLASSIFICATION	5.098620809749753E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949013791903	WITHOUT_CLASSIFICATION	5.098620809749753E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949013791903	WITHOUT_CLASSIFICATION	5.098620809749753E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999949013791903	WITHOUT_CLASSIFICATION	5.098620809749753E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995911997109	WITHOUT_CLASSIFICATION	4.0880028914942333E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999925108288167	WITHOUT_CLASSIFICATION	7.489171183409872E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999789109437902	WITHOUT_CLASSIFICATION	2.1089056209813155E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999971912854309	WITHOUT_CLASSIFICATION	2.8087145690753784E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999961727809425	WITHOUT_CLASSIFICATION	3.8272190574663555E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999910308746636	WITHOUT_CLASSIFICATION	8.96912533646782E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999997664879089	WITHOUT_CLASSIFICATION	2.335120910516271E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999880159454017	WITHOUT_CLASSIFICATION	1.1984054598313798E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999952389592683	WITHOUT_CLASSIFICATION	4.7610407316978296E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999275675684	WITHOUT_CLASSIFICATION	7.243243154306351E-8	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999972534744451	WITHOUT_CLASSIFICATION	2.7465255548697305E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999981821731406	WITHOUT_CLASSIFICATION	1.8178268594034378E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999993225216348	WITHOUT_CLASSIFICATION	6.774783651905846E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996545553521	WITHOUT_CLASSIFICATION	3.45444647895764E-7	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999935111228013	WITHOUT_CLASSIFICATION	6.488877198694925E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999981821731406	WITHOUT_CLASSIFICATION	1.8178268594034378E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9998773416125546	WITHOUT_CLASSIFICATION	1.2265838744538666E-4	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999938614385828	WITHOUT_CLASSIFICATION	6.138561417275284E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999993653440172	WITHOUT_CLASSIFICATION	6.346559827363463E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999821925362	WITHOUT_CLASSIFICATION	1.7807463820801466E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999807441268	WITHOUT_CLASSIFICATION	1.925587328471703E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999996357334746	WITHOUT_CLASSIFICATION	3.6426652533806754E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999874921517	WITHOUT_CLASSIFICATION	1.2507848388802734E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9992629174751411	WITHOUT_CLASSIFICATION	7.370825248588777E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997619562396	WITHOUT_CLASSIFICATION	2.380437603937462E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999009596692	WITHOUT_CLASSIFICATION	9.904033079380198E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999904286287	WITHOUT_CLASSIFICATION	9.571371302897714E-9	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999580974015	WITHOUT_CLASSIFICATION	4.190259839863873E-8	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999988986016953	WITHOUT_CLASSIFICATION	1.1013983046835303E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998992185418205	WITHOUT_CLASSIFICATION	1.0078145817950552E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999896422032702	WITHOUT_CLASSIFICATION	1.0357796729863606E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999633847233	WITHOUT_CLASSIFICATION	3.661527669808725E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999985203829	WITHOUT_CLASSIFICATION	1.4796171678757056E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999062854401	WITHOUT_CLASSIFICATION	9.371455983146568E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991182335061	WITHOUT_CLASSIFICATION	8.817664940358353E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999062854401	WITHOUT_CLASSIFICATION	9.371455983146568E-8	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999278453352	WITHOUT_CLASSIFICATION	7.215466479235171E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999997733366	WITHOUT_CLASSIFICATION	2.2666344145532323E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999985401020407	WITHOUT_CLASSIFICATION	1.4598979593828196E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999861127702	WITHOUT_CLASSIFICATION	1.3887229876947276E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999985203829	WITHOUT_CLASSIFICATION	1.4796171678757056E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999991182335061	WITHOUT_CLASSIFICATION	8.817664940358353E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999278453352	WITHOUT_CLASSIFICATION	7.215466479235171E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989194883406	WITHOUT_CLASSIFICATION	1.0805116594042083E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.999973405034861	WITHOUT_CLASSIFICATION	2.6594965138972983E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9998862248811491	WITHOUT_CLASSIFICATION	1.1377511885087196E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.999881305710869	WITHOUT_CLASSIFICATION	1.1869428913102599E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999899469750253	WITHOUT_CLASSIFICATION	1.0053024974766716E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999981371557842	WITHOUT_CLASSIFICATION	1.862844215813497E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999694691295	WITHOUT_CLASSIFICATION	3.0530870493493944E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999997733366	WITHOUT_CLASSIFICATION	2.2666344145532323E-10	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999999999944638	WITHOUT_CLASSIFICATION	5.5362112161838205E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999979462927431	WITHOUT_CLASSIFICATION	2.0537072568875508E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999999983828163	WITHOUT_CLASSIFICATION	1.6171837049752196E-8	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999694691295	WITHOUT_CLASSIFICATION	3.0530870493493944E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999848338687319	WITHOUT_CLASSIFICATION	1.5166131268035758E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999694691295	WITHOUT_CLASSIFICATION	3.0530870493493944E-7	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998763207006	WITHOUT_CLASSIFICATION	1.2367929939368014E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997949109738	WITHOUT_CLASSIFICATION	2.050890262233984E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999832600514882	WITHOUT_CLASSIFICATION	1.6739948511745492E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999678504432484	WITHOUT_CLASSIFICATION	3.214955675163188E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999989249765048	WITHOUT_CLASSIFICATION	1.0750234952808034E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999995468120491	WITHOUT_CLASSIFICATION	4.53187950928011E-7	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999970303603677	WITHOUT_CLASSIFICATION	2.9696396323419503E-6	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999923356529866	WITHOUT_CLASSIFICATION	7.664347013252063E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999982536271732	WITHOUT_CLASSIFICATION	1.7463728267777332E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999996553881155	WITHOUT_CLASSIFICATION	3.44611884499264E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987011970811	WITHOUT_CLASSIFICATION	1.2988029188936262E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999717591181	WITHOUT_CLASSIFICATION	2.8240881832015698E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.998799475904472	WITHOUT_CLASSIFICATION	0.0012005240955279993	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999997753099168	WITHOUT_CLASSIFICATION	2.246900833273084E-7	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999758235714745	WITHOUT_CLASSIFICATION	2.4176428525491174E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999997423976658	WITHOUT_CLASSIFICATION	2.576023342406563E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999981953607526	WITHOUT_CLASSIFICATION	1.8046392473629248E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999524022	WITHOUT_CLASSIFICATION	4.7597715719416196E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999987551628543	WITHOUT_CLASSIFICATION	1.244837145761143E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999928852369656	WITHOUT_CLASSIFICATION	7.114763034410611E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999678039994372	WITHOUT_CLASSIFICATION	3.219600056287544E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999321567846	WITHOUT_CLASSIFICATION	6.784321535352407E-8	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999397759405	WITHOUT_CLASSIFICATION	6.022405951644796E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9988469234071344	WITHOUT_CLASSIFICATION	0.0011530765928655234	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999998668310427	WITHOUT_CLASSIFICATION	1.3316895729597967E-6	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999985960223794	WITHOUT_CLASSIFICATION	1.403977620634218E-6	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999997961826935	WITHOUT_CLASSIFICATION	2.0381730647816964E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999950419344793	WITHOUT_CLASSIFICATION	4.958065520727638E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999926979114131	WITHOUT_CLASSIFICATION	7.302088586917347E-6	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999066009851	WITHOUT_CLASSIFICATION	9.339901476388273E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9989686324080008	WITHOUT_CLASSIFICATION	0.0010313675919992108	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999962305510682	WITHOUT_CLASSIFICATION	3.7694489316790934E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999988688665997	WITHOUT_CLASSIFICATION	1.1311334002536287E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998146755248963	WITHOUT_CLASSIFICATION	1.8532447510360197E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.999886997946166	WITHOUT_CLASSIFICATION	1.1300205383393397E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999569591274	WITHOUT_CLASSIFICATION	4.3040872644027446E-8	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999998118367002	WITHOUT_CLASSIFICATION	1.8816329986061056E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999887847652943	WITHOUT_CLASSIFICATION	1.1215234705746507E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999925685712077	WITHOUT_CLASSIFICATION	7.431428792411578E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999895681239	WITHOUT_CLASSIFICATION	1.0431876226425227E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9945340246581109	WITHOUT_CLASSIFICATION	0.005465975341889151	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999147131084571	WITHOUT_CLASSIFICATION	8.52868915427905E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999950694080965	WITHOUT_CLASSIFICATION	4.930591903587038E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999730174684592	WITHOUT_CLASSIFICATION	2.6982531540743685E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999730174684592	WITHOUT_CLASSIFICATION	2.6982531540743685E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999249236621864	WITHOUT_CLASSIFICATION	7.50763378136299E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999923356529866	WITHOUT_CLASSIFICATION	7.664347013252063E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999924335457898	WITHOUT_CLASSIFICATION	7.5664542102418355E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999754588287	WITHOUT_CLASSIFICATION	2.4541171330244113E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999271140037	WITHOUT_CLASSIFICATION	7.288599635591043E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998824924563869	WITHOUT_CLASSIFICATION	1.1750754361304466E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999884262145875	WITHOUT_CLASSIFICATION	1.1573785412552586E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999945961302568	WITHOUT_CLASSIFICATION	5.403869743244461E-6	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999991260548	WITHOUT_CLASSIFICATION	8.739451955635641E-10	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999990413961	WITHOUT_CLASSIFICATION	9.586037877900291E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999660430284216	WITHOUT_CLASSIFICATION	3.395697157831399E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999999397461303	WITHOUT_CLASSIFICATION	6.02538696452241E-8	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9995557518942356	WITHOUT_CLASSIFICATION	4.4424810576427164E-4	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999704212601	WITHOUT_CLASSIFICATION	2.957873993040928E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999831382359	WITHOUT_CLASSIFICATION	1.6861764104972962E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999865898637	WITHOUT_CLASSIFICATION	1.3410136240977256E-8	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999562651577	WITHOUT_CLASSIFICATION	4.3734842198366676E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999962434948	WITHOUT_CLASSIFICATION	3.7565052108719115E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999999579067	WITHOUT_CLASSIFICATION	4.2093289364456436E-10	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999879960381803	WITHOUT_CLASSIFICATION	1.200396181976953E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999995606522611	WITHOUT_CLASSIFICATION	4.3934773890853397E-7	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9981908597107917	WITHOUT_CLASSIFICATION	0.0018091402892082813	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999832595704662	WITHOUT_CLASSIFICATION	1.6740429533816913E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999995556027295	WITHOUT_CLASSIFICATION	4.4439727046287934E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9945340246581109	WITHOUT_CLASSIFICATION	0.005465975341889151	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999005047163	WITHOUT_CLASSIFICATION	9.949528363702185E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999990832068876	WITHOUT_CLASSIFICATION	9.167931123993601E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999983159114	WITHOUT_CLASSIFICATION	1.6840886144639676E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999996090409703	WITHOUT_CLASSIFICATION	3.9095902978717977E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998537491937896	WITHOUT_CLASSIFICATION	1.4625080621047368E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999612405825979	WITHOUT_CLASSIFICATION	3.8759417401968755E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999991060190171	WITHOUT_CLASSIFICATION	8.939809830147486E-7	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999946579541	WITHOUT_CLASSIFICATION	5.342045892080303E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997840998673	WITHOUT_CLASSIFICATION	2.1590013265680724E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998869969168	WITHOUT_CLASSIFICATION	1.1300308318591597E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999831176466	WITHOUT_CLASSIFICATION	1.6882353382407578E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999678037946	WITHOUT_CLASSIFICATION	3.2196205376641354E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999583711987	WITHOUT_CLASSIFICATION	4.16288012325429E-8	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999961655151428	WITHOUT_CLASSIFICATION	3.83448485718092E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999891811098304	WITHOUT_CLASSIFICATION	1.0818890169740376E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999891811098304	WITHOUT_CLASSIFICATION	1.0818890169740376E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999996402898388	WITHOUT_CLASSIFICATION	3.597101612987204E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999939906809152	WITHOUT_CLASSIFICATION	6.009319084771193E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999755125184	WITHOUT_CLASSIFICATION	2.44874816004228E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999755125184	WITHOUT_CLASSIFICATION	2.44874816004228E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999878170461	WITHOUT_CLASSIFICATION	1.2182953895767012E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999926208410705	WITHOUT_CLASSIFICATION	7.379158929508842E-6	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9842053424581576	WITHOUT_CLASSIFICATION	0.015794657541842404	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999824986592	WITHOUT_CLASSIFICATION	1.7501340798546404E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999930746342	WITHOUT_CLASSIFICATION	6.9253658141525325E-9	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999488050244	WITHOUT_CLASSIFICATION	5.119497572633774E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999999876381	WITHOUT_CLASSIFICATION	1.2361901604662883E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999999876381	WITHOUT_CLASSIFICATION	1.2361901604662883E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998771932227	WITHOUT_CLASSIFICATION	1.228067772585659E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995867823606	WITHOUT_CLASSIFICATION	4.1321763942493473E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999997620603501	WITHOUT_CLASSIFICATION	2.3793964987576944E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999523712896	WITHOUT_CLASSIFICATION	4.762871035034732E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999523712896	WITHOUT_CLASSIFICATION	4.762871035034732E-8	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999325448291	WITHOUT_CLASSIFICATION	6.745517091476564E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999948322229857	WITHOUT_CLASSIFICATION	5.167777014266159E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999940111847	WITHOUT_CLASSIFICATION	5.988815306665399E-9	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998391934901	WITHOUT_CLASSIFICATION	1.6080650986688156E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996241687019	WITHOUT_CLASSIFICATION	3.7583129810823164E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999751390526	WITHOUT_CLASSIFICATION	2.4860947401890078E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999995992897058	WITHOUT_CLASSIFICATION	4.0071029407816875E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999992793261551	WITHOUT_CLASSIFICATION	7.206738448719125E-7	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999938959383	WITHOUT_CLASSIFICATION	6.104061725343645E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999597003336	WITHOUT_CLASSIFICATION	4.0299666477426835E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998361207891	WITHOUT_CLASSIFICATION	1.6387921082118227E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9959435279721957	WITHOUT_CLASSIFICATION	0.004056472027804291	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.981827101960984	WITHOUT_CLASSIFICATION	0.018172898039016026	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999975057471552	WITHOUT_CLASSIFICATION	2.494252844841829E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999967162433574	WITHOUT_CLASSIFICATION	3.283756642591727E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999995838259284	WITHOUT_CLASSIFICATION	4.1617407174010134E-7	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999955292119108	WITHOUT_CLASSIFICATION	4.470788089204144E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999998136911745	WITHOUT_CLASSIFICATION	1.8630882541884626E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.99996824266411	WITHOUT_CLASSIFICATION	3.1757335890024224E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999992682824974	WITHOUT_CLASSIFICATION	7.317175026189572E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999995854869697	WITHOUT_CLASSIFICATION	4.1451303039966234E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999988949136507	WITHOUT_CLASSIFICATION	1.1050863493132435E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999851934062451	WITHOUT_CLASSIFICATION	1.480659375487952E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999990700646102	WITHOUT_CLASSIFICATION	9.299353896911709E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999995908131737	WITHOUT_CLASSIFICATION	4.0918682629942737E-7	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999568963291	WITHOUT_CLASSIFICATION	4.3103670826624635E-8	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999999933370216	WITHOUT_CLASSIFICATION	6.66297840811235E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999918228631183	WITHOUT_CLASSIFICATION	8.177136881712467E-6	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999930212927	WITHOUT_CLASSIFICATION	6.978707293910203E-9	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999961224941307	WITHOUT_CLASSIFICATION	3.87750586926545E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9818714433731685	WITHOUT_CLASSIFICATION	0.01812855662683147	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999531199243	WITHOUT_CLASSIFICATION	4.6880075729190006E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999992205547887	WITHOUT_CLASSIFICATION	7.794452112465638E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999950729564329	WITHOUT_CLASSIFICATION	4.927043567118199E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999977444420014	WITHOUT_CLASSIFICATION	2.255557998573062E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999414587256394	WITHOUT_CLASSIFICATION	5.854127436070881E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999772951001626	WITHOUT_CLASSIFICATION	2.270489983730881E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999993419825	WITHOUT_CLASSIFICATION	6.580174635319844E-10	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999687992732705	WITHOUT_CLASSIFICATION	3.1200726729411816E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999958911392	WITHOUT_CLASSIFICATION	4.1088607608124286E-9	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999991522095086	WITHOUT_CLASSIFICATION	8.477904912676855E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999999477210606	WITHOUT_CLASSIFICATION	5.22789394004839E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999993297420066	WITHOUT_CLASSIFICATION	6.702579934788011E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999451114955736	WITHOUT_CLASSIFICATION	5.4888504426410954E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999976601635713	WITHOUT_CLASSIFICATION	2.3398364287597712E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999998856961029	WITHOUT_CLASSIFICATION	1.1430389706376048E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999985830152871	WITHOUT_CLASSIFICATION	1.416984712922046E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999999542428881	WITHOUT_CLASSIFICATION	4.575711197877548E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999989020906657	WITHOUT_CLASSIFICATION	1.0979093343760929E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999689217374	WITHOUT_CLASSIFICATION	3.1078262551881405E-8	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999988981750099	WITHOUT_CLASSIFICATION	1.1018249902225238E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.99959576911284	WITHOUT_CLASSIFICATION	4.042308871600225E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999434472177893	WITHOUT_CLASSIFICATION	5.6552782210713055E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999949874615	WITHOUT_CLASSIFICATION	5.012538547312862E-9	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999992213443363	WITHOUT_CLASSIFICATION	7.78655663684819E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999965730754523	WITHOUT_CLASSIFICATION	3.426924547719008E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999993689063577	WITHOUT_CLASSIFICATION	6.310936423960214E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999998754825173	WITHOUT_CLASSIFICATION	1.2451748263463102E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999632335574558	WITHOUT_CLASSIFICATION	3.6766442544178495E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999927807937	WITHOUT_CLASSIFICATION	7.219206437340914E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996454672456	WITHOUT_CLASSIFICATION	3.5453275440022545E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996454672456	WITHOUT_CLASSIFICATION	3.5453275440022545E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999998153327	WITHOUT_CLASSIFICATION	1.8466739379373013E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998428172767897	WITHOUT_CLASSIFICATION	1.571827232103669E-4	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999996322911643	WITHOUT_CLASSIFICATION	3.677088357357316E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999991965363	WITHOUT_CLASSIFICATION	8.034637390014845E-10	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999928766352	WITHOUT_CLASSIFICATION	7.123364832531659E-9	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999972255698918	WITHOUT_CLASSIFICATION	2.7744301081857353E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999998622283	WITHOUT_CLASSIFICATION	1.3777162588453825E-10	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999998447042	WITHOUT_CLASSIFICATION	1.552958067091848E-9	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999963895974	WITHOUT_CLASSIFICATION	3.610402593798215E-9	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999645395331	WITHOUT_CLASSIFICATION	3.5460467004698996E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999996035873325	WITHOUT_CLASSIFICATION	3.964126675637316E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999967119797941	WITHOUT_CLASSIFICATION	3.288020205908594E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999941621313	WITHOUT_CLASSIFICATION	5.8378687744386734E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999946762499202	WITHOUT_CLASSIFICATION	5.323750079796612E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999998091105929	WITHOUT_CLASSIFICATION	1.9088940710466235E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999998091105929	WITHOUT_CLASSIFICATION	1.9088940710466235E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999885515	WITHOUT_CLASSIFICATION	1.1448493405414901E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999954233011561	WITHOUT_CLASSIFICATION	4.5766988439386056E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997597476245	WITHOUT_CLASSIFICATION	2.4025237551345733E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999922674214	WITHOUT_CLASSIFICATION	7.732578585550591E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991376283615	WITHOUT_CLASSIFICATION	8.623716385492994E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998188335512	WITHOUT_CLASSIFICATION	1.811664489153704E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999954837135414	WITHOUT_CLASSIFICATION	4.5162864586504595E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9998083872688808	WITHOUT_CLASSIFICATION	1.9161273111929084E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998977748031	WITHOUT_CLASSIFICATION	1.0222519678369267E-7	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999873922250454	WITHOUT_CLASSIFICATION	1.2607774954649778E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999982416727121	WITHOUT_CLASSIFICATION	1.758327287865005E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999950497237	WITHOUT_CLASSIFICATION	4.950276242147389E-9	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999999973796	WITHOUT_CLASSIFICATION	2.6203955755558784E-11	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999886327369	WITHOUT_CLASSIFICATION	1.1367263066294186E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999524297728	WITHOUT_CLASSIFICATION	4.757022716223767E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999996760682225	WITHOUT_CLASSIFICATION	3.2393177754562485E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999998031690927	WITHOUT_CLASSIFICATION	1.9683090728415176E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999829198032	WITHOUT_CLASSIFICATION	1.708019683933779E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999983639773	WITHOUT_CLASSIFICATION	1.636022607228927E-9	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999457991401	WITHOUT_CLASSIFICATION	5.4200860049909344E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999708854715	WITHOUT_CLASSIFICATION	2.9114528416607178E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999994147388	WITHOUT_CLASSIFICATION	5.852611920282818E-9	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999784427229	WITHOUT_CLASSIFICATION	2.1557277169106705E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999992935570018	WITHOUT_CLASSIFICATION	7.064429982197549E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999946456169916	WITHOUT_CLASSIFICATION	5.3543830084102275E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999885860729995	WITHOUT_CLASSIFICATION	1.1413927000612938E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999870188373314	WITHOUT_CLASSIFICATION	1.2981162668587457E-5	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997309770174292	WITHOUT_CLASSIFICATION	2.6902298257081296E-4	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999988702290912	WITHOUT_CLASSIFICATION	1.1297709088721137E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999991476528	WITHOUT_CLASSIFICATION	8.523472035542993E-9	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999998053526042	WITHOUT_CLASSIFICATION	1.9464739575127485E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999540025258	WITHOUT_CLASSIFICATION	4.599747427875933E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999880150903	WITHOUT_CLASSIFICATION	1.1984909856516758E-8	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999967724063822	WITHOUT_CLASSIFICATION	3.2275936177921027E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9970126094271117	WITHOUT_CLASSIFICATION	0.002987390572888391	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999144398559	WITHOUT_CLASSIFICATION	8.556014411219851E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998813134463	WITHOUT_CLASSIFICATION	1.1868655364148385E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999976699001	WITHOUT_CLASSIFICATION	2.3300999020171312E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999993786931074	WITHOUT_CLASSIFICATION	6.213068926031444E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999117914335	WITHOUT_CLASSIFICATION	8.82085663994373E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999873367486328	WITHOUT_CLASSIFICATION	1.2663251367193705E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999873367486328	WITHOUT_CLASSIFICATION	1.2663251367193705E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999918411291	WITHOUT_CLASSIFICATION	8.15887087971815E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997559087636	WITHOUT_CLASSIFICATION	2.4409123638815237E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9969771375686959	WITHOUT_CLASSIFICATION	0.003022862431304029	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999994260143454	WITHOUT_CLASSIFICATION	5.739856546758323E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999896667214612	WITHOUT_CLASSIFICATION	1.0333278538953517E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999220338365	WITHOUT_CLASSIFICATION	7.796616349343317E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999941024182645	WITHOUT_CLASSIFICATION	5.897581735548312E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999998793533457	WITHOUT_CLASSIFICATION	1.2064665431843266E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999728634975991	WITHOUT_CLASSIFICATION	2.713650240096904E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999235653402	WITHOUT_CLASSIFICATION	7.643465980035132E-8	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999420995249	WITHOUT_CLASSIFICATION	5.7900475217558234E-8	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.99999836894067	WITHOUT_CLASSIFICATION	1.6310593300883699E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999997611809585	WITHOUT_CLASSIFICATION	2.38819041480831E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999959173731	WITHOUT_CLASSIFICATION	4.0826269574739485E-9	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999558136027071	WITHOUT_CLASSIFICATION	4.418639729283513E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999948009891111	WITHOUT_CLASSIFICATION	5.1990108889071115E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999941811768	WITHOUT_CLASSIFICATION	5.81882318374745E-9	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999886111172	WITHOUT_CLASSIFICATION	1.1388882895844194E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999671527076313	WITHOUT_CLASSIFICATION	3.284729236875803E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999661811657	WITHOUT_CLASSIFICATION	3.381883429095646E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999918697856	WITHOUT_CLASSIFICATION	8.13021438497076E-9	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999959611155885	WITHOUT_CLASSIFICATION	4.038884411365877E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999919381233062	WITHOUT_CLASSIFICATION	8.061876693810446E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999985646617754	WITHOUT_CLASSIFICATION	1.435338224684817E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999996975339988	WITHOUT_CLASSIFICATION	3.0246600115336027E-7	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997964148683248	WITHOUT_CLASSIFICATION	2.0358513167526176E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998044614227	WITHOUT_CLASSIFICATION	1.9553857731746082E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999766620838	WITHOUT_CLASSIFICATION	2.3337916115919086E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999997648701677	WITHOUT_CLASSIFICATION	2.3512983231449547E-6	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999581069053591	WITHOUT_CLASSIFICATION	4.1893094640985567E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999994249018004	WITHOUT_CLASSIFICATION	5.750981995434616E-7	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999975796538156	WITHOUT_CLASSIFICATION	2.4203461843857373E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999995193768	WITHOUT_CLASSIFICATION	4.806231993297655E-9	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999998315641	WITHOUT_CLASSIFICATION	1.6843601625308787E-10	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999999309583	WITHOUT_CLASSIFICATION	6.904165248950327E-11	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999521556889246	WITHOUT_CLASSIFICATION	4.7844311075326215E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999999998457243	WITHOUT_CLASSIFICATION	1.5427570484696423E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999354091498	WITHOUT_CLASSIFICATION	6.459085021351515E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999930857723085	WITHOUT_CLASSIFICATION	6.91422769146566E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999993215863969	WITHOUT_CLASSIFICATION	6.784136031919622E-7	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999574836136498	WITHOUT_CLASSIFICATION	4.251638635034122E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999748754278	WITHOUT_CLASSIFICATION	2.512457220610651E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999985230679	WITHOUT_CLASSIFICATION	1.4769321134951318E-9	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999981151	WITHOUT_CLASSIFICATION	1.8849670895612857E-12	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999961730109637	WITHOUT_CLASSIFICATION	3.826989036379199E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999996882431293	WITHOUT_CLASSIFICATION	3.117568707526255E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997891948538	WITHOUT_CLASSIFICATION	2.108051461634205E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999941621313	WITHOUT_CLASSIFICATION	5.8378687744386734E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999915683	WITHOUT_CLASSIFICATION	8.431689839772887E-12	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999999893573	WITHOUT_CLASSIFICATION	1.0642703753714952E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999352810479785	WITHOUT_CLASSIFICATION	6.471895202146164E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9993071187565721	WITHOUT_CLASSIFICATION	6.928812434279731E-4	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999989514434	WITHOUT_CLASSIFICATION	1.0485565623018947E-9	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999978495299755	WITHOUT_CLASSIFICATION	2.1504700244147972E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9802822375797139	WITHOUT_CLASSIFICATION	0.019717762420286108	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999942669117101	WITHOUT_CLASSIFICATION	5.73308828995886E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999999340084	WITHOUT_CLASSIFICATION	6.599160345853796E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999063245244006	WITHOUT_CLASSIFICATION	9.36754755993676E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999879791613	WITHOUT_CLASSIFICATION	1.2020838721539175E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999991443385072	WITHOUT_CLASSIFICATION	8.556614928212296E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999984143763	WITHOUT_CLASSIFICATION	1.5856237291708677E-9	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999959302094	WITHOUT_CLASSIFICATION	4.0697905850688924E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995414150586	WITHOUT_CLASSIFICATION	4.585849412995115E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999663570570957	WITHOUT_CLASSIFICATION	3.364294290427538E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999455565393	WITHOUT_CLASSIFICATION	5.444346078539412E-8	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999993453731811	WITHOUT_CLASSIFICATION	6.546268189221098E-7	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999995462479012	WITHOUT_CLASSIFICATION	4.5375209885953424E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995414150586	WITHOUT_CLASSIFICATION	4.585849412995115E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999973078017808	WITHOUT_CLASSIFICATION	2.6921982192818996E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999992519777	WITHOUT_CLASSIFICATION	7.480222555698787E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999995305520487	WITHOUT_CLASSIFICATION	4.69447951207891E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999962168362	WITHOUT_CLASSIFICATION	3.783163725336067E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999978846757102	WITHOUT_CLASSIFICATION	2.115324289877718E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999963274839	WITHOUT_CLASSIFICATION	3.6725159447420326E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999998164112	WITHOUT_CLASSIFICATION	1.8358881533818864E-10	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999804769707306	WITHOUT_CLASSIFICATION	1.9523029269408297E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999994879426	WITHOUT_CLASSIFICATION	5.120573461340951E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999986556254278	WITHOUT_CLASSIFICATION	1.3443745722256422E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998265329785355	WITHOUT_CLASSIFICATION	1.7346702146447227E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998760684686545	WITHOUT_CLASSIFICATION	1.2393153134559654E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999821168134	WITHOUT_CLASSIFICATION	1.7883186516092485E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999478863989173	WITHOUT_CLASSIFICATION	5.211360108260909E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999916543179654	WITHOUT_CLASSIFICATION	8.34568203457859E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999995556027295	WITHOUT_CLASSIFICATION	4.4439727046287934E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999317494862	WITHOUT_CLASSIFICATION	6.825051382179179E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998092262339	WITHOUT_CLASSIFICATION	1.907737660409793E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995024122871632	WITHOUT_CLASSIFICATION	4.975877128367348E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999986527809017	WITHOUT_CLASSIFICATION	1.3472190983429637E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999894502532346	WITHOUT_CLASSIFICATION	1.0549746765305051E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999988461022444	WITHOUT_CLASSIFICATION	1.1538977556389215E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999998213861583	WITHOUT_CLASSIFICATION	1.7861384175387372E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999963743396	WITHOUT_CLASSIFICATION	3.6256604397968126E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999999999781355	WITHOUT_CLASSIFICATION	2.1864499986248644E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999758597312	WITHOUT_CLASSIFICATION	2.4140268771896727E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998448710382809	WITHOUT_CLASSIFICATION	1.5512896171904968E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999953516255	WITHOUT_CLASSIFICATION	4.6483745094480844E-8	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9968346508746776	WITHOUT_CLASSIFICATION	0.0031653491253223753	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9898165075849377	WITHOUT_CLASSIFICATION	0.010183492415062317	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998839700993	WITHOUT_CLASSIFICATION	1.1602990069658865E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999975412730813	WITHOUT_CLASSIFICATION	2.4587269187000866E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999957275168323	WITHOUT_CLASSIFICATION	4.272483167705146E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999866077669	WITHOUT_CLASSIFICATION	1.339223316004089E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999873413353	WITHOUT_CLASSIFICATION	1.2658664683280083E-8	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999962715763	WITHOUT_CLASSIFICATION	3.728423700251444E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999917853778	WITHOUT_CLASSIFICATION	8.214622214594182E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993561349932	WITHOUT_CLASSIFICATION	6.438650066283321E-7	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999274289	WITHOUT_CLASSIFICATION	7.257112884062861E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998388235011	WITHOUT_CLASSIFICATION	1.6117649887337214E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999055349138492	WITHOUT_CLASSIFICATION	9.446508615079653E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999055349138492	WITHOUT_CLASSIFICATION	9.446508615079653E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999998704101202	WITHOUT_CLASSIFICATION	1.2958987979743345E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999984353364	WITHOUT_CLASSIFICATION	1.5646635937478137E-8	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999561137136	WITHOUT_CLASSIFICATION	4.3886286428749865E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7291440873500413	IMPLEMENTATION	0.27085591264995873	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993949535607	WITHOUT_CLASSIFICATION	6.050464393662359E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993949535607	WITHOUT_CLASSIFICATION	6.050464393662359E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999992464806613	WITHOUT_CLASSIFICATION	7.535193387477205E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999857100961	WITHOUT_CLASSIFICATION	1.4289904014834887E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966899588093	WITHOUT_CLASSIFICATION	3.3100411906063093E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999959023613886	WITHOUT_CLASSIFICATION	4.097638611386064E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999670210745	WITHOUT_CLASSIFICATION	3.297892549544105E-7	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999969223592075	WITHOUT_CLASSIFICATION	3.07764079265063E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999999068970269	WITHOUT_CLASSIFICATION	9.31029731346977E-8	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999995509191	WITHOUT_CLASSIFICATION	4.49080899736526E-9	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999798472549	WITHOUT_CLASSIFICATION	2.015274509888469E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999851465724	WITHOUT_CLASSIFICATION	1.485342773732638E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999851465724	WITHOUT_CLASSIFICATION	1.485342773732638E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999979987093767	WITHOUT_CLASSIFICATION	2.0012906232944775E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997781543194	WITHOUT_CLASSIFICATION	2.2184568053179255E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999903793263	WITHOUT_CLASSIFICATION	9.620673684894654E-9	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.999985781564538	WITHOUT_CLASSIFICATION	1.4218435461885877E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999993888715036	WITHOUT_CLASSIFICATION	6.111284963421652E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999613157596	WITHOUT_CLASSIFICATION	3.86842403024357E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994317936216	WITHOUT_CLASSIFICATION	5.682063783591679E-7	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998115152924	WITHOUT_CLASSIFICATION	1.8848470771649795E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998201305438	WITHOUT_CLASSIFICATION	1.7986945632754703E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999366758388797	WITHOUT_CLASSIFICATION	6.332416112031223E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999115478121	WITHOUT_CLASSIFICATION	8.845218791200828E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999986556254278	WITHOUT_CLASSIFICATION	1.3443745722256422E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998409678068	WITHOUT_CLASSIFICATION	1.5903219322699496E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999945935111881	WITHOUT_CLASSIFICATION	5.406488811828977E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999283919122	WITHOUT_CLASSIFICATION	7.160808774349992E-8	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999920697067148	WITHOUT_CLASSIFICATION	7.930293285147885E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999985359423547	WITHOUT_CLASSIFICATION	1.4640576454305048E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999991845387205	WITHOUT_CLASSIFICATION	8.154612794861923E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998213724794	WITHOUT_CLASSIFICATION	1.786275206807102E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999997456745667	WITHOUT_CLASSIFICATION	2.5432543327417533E-7	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999991807899183	WITHOUT_CLASSIFICATION	8.192100817756577E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999954871587323	WITHOUT_CLASSIFICATION	4.512841267698396E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999954871587323	WITHOUT_CLASSIFICATION	4.512841267698396E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999981821731406	WITHOUT_CLASSIFICATION	1.8178268594034378E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999514841534	WITHOUT_CLASSIFICATION	4.851584652065256E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998693262665234	WITHOUT_CLASSIFICATION	1.3067373347657433E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999147740228949	WITHOUT_CLASSIFICATION	8.522597710514118E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999986756132692	WITHOUT_CLASSIFICATION	1.3243867309092553E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999387961133	WITHOUT_CLASSIFICATION	6.120388678521703E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999896422032702	WITHOUT_CLASSIFICATION	1.0357796729863606E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999997865595	WITHOUT_CLASSIFICATION	2.1344057043812828E-10	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999989194883406	WITHOUT_CLASSIFICATION	1.0805116594042083E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999035961440031	WITHOUT_CLASSIFICATION	9.640385599686437E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999694691295	WITHOUT_CLASSIFICATION	3.0530870493493944E-7	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999606630523449	WITHOUT_CLASSIFICATION	3.933694765510712E-5	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9994201979153865	WITHOUT_CLASSIFICATION	5.798020846134298E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999298683008	WITHOUT_CLASSIFICATION	7.013169921272912E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999996911428	WITHOUT_CLASSIFICATION	3.088571712959978E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999994339438313	WITHOUT_CLASSIFICATION	5.660561688295227E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999640605179	WITHOUT_CLASSIFICATION	3.593948211923622E-8	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999996903616785	WITHOUT_CLASSIFICATION	3.096383215704317E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999315470785607	WITHOUT_CLASSIFICATION	6.845292143933625E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999667	WITHOUT_CLASSIFICATION	3.337427342519067E-14	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999506632	WITHOUT_CLASSIFICATION	4.93367883445798E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999982079625	WITHOUT_CLASSIFICATION	1.7920374863900251E-9	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999940111847	WITHOUT_CLASSIFICATION	5.988815306665399E-9	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999827008	WITHOUT_CLASSIFICATION	1.7299084615558543E-11	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999713364955	WITHOUT_CLASSIFICATION	2.8663504434603525E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999713364955	WITHOUT_CLASSIFICATION	2.8663504434603525E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999987515250488	WITHOUT_CLASSIFICATION	1.2484749511810817E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999363994507748	WITHOUT_CLASSIFICATION	6.360054922521879E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999907832395	WITHOUT_CLASSIFICATION	9.216760564515018E-9	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999535550375	WITHOUT_CLASSIFICATION	4.644496247160924E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999230670319	WITHOUT_CLASSIFICATION	7.693296808656316E-8	IMPLEMENTATION
